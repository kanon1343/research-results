2023-11-13 15:29:25 [main] [WARN]  Configuration$Builder - The directory where kGenProg is running is different from the root directory of the given target project.
2023-11-13 15:29:25 [main] [WARN]  Configuration$Builder - If the target project includes test cases with file I/O, such test cases won't run correctly.
2023-11-13 15:29:25 [main] [WARN]  Configuration$Builder - We recommend you running kGenProg with the root directory of the target project as the current directory.
2023-11-13 15:29:25 [main] [INFO]  KGenProgMain - 
==================== kGenProg Configuration ====================
configPath = /Users/haradakanon/Downloads/kGenProg-1.8.2/example/codec9/kgenprog-9.toml (set by command line)
rootDir = /Users/haradakanon/Downloads/kGenProg-1.8.2/example/codec9 (set in config file)
productPaths = [/Users/haradakanon/Downloads/kGenProg-1.8.2/example/codec9/src/java] (set in config file)
testPaths = [/Users/haradakanon/Downloads/kGenProg-1.8.2/example/codec9/src/test] (set in config file)
classPaths = []
executionTests = [org.apache.commons.codec.binary.Base64Test] (set in config file)
outDir = kgenprog-out
logLevel = INFO (set in config file)
mutationGeneratingCount = 200 (set in config file)
crossoverGeneratingCount = 200 (set in config file)
headcount = 100
maxGeneration = 500 (set in config file)
timeLimit = PT24H (set in config file)
testTimeLimit = PT3M (set in config file)
requiredSolutionsCount = 100 (set in config file)
randomSeed = 1 (set by command line)
scope = PACKAGE (set in config file)
faultLocalization = Zoltar (set in config file)
mutationType = Simple
crossoverType = Random
firstVariantSelectionStrategy = Random
secondVariantSelectionStrategy = Random
isPatchOutput = true (set in config file)
isHistoryRecord = false
currentDirectory = /Users/haradakanon/Downloads/research
version = 1.8.2
================================================================
2023-11-13 15:29:33 [main] [INFO]  KGenProgMain - initial failed tests (1/51)
org.apache.commons.codec.binary.Base64Test.testCodec112: null

2023-11-13 15:29:33 [main] [INFO]  KGenProgMain - GA started
2023-11-13 15:29:33 [main] [INFO]  KGenProgMain - entered the era of 1st generation.
2023-11-13 15:29:46 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 13 seconds
Variants: generated 200, build-succeeded 16, build-failed 111, syntax-invalid 8, redundant 65
Fitness: max 0.98(5), min 0.49(1), ave 0.816
Test execution time: sum 2653 ms, max 367 ms, min 100 ms
----------------------------------------------------------------

2023-11-13 15:29:46 [main] [INFO]  KGenProgMain - entered the era of 2nd generation.
2023-11-13 15:29:58 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 24 seconds
Variants: generated 200, build-succeeded 44, build-failed 97, syntax-invalid 19, redundant 40
Fitness: max 0.98(6), min 0.333(2), ave 0.716
Test execution time: sum 3796 ms, max 167 ms, min 57 ms
----------------------------------------------------------------

2023-11-13 15:29:58 [main] [INFO]  KGenProgMain - entered the era of 3rd generation.
2023-11-13 15:30:19 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 46 seconds
Variants: generated 400, build-succeeded 143, build-failed 99, syntax-invalid 43, redundant 115
Fitness: max 0.98(11), min 0.157(3), ave 0.698
Test execution time: sum 10591 ms, max 233 ms, min 51 ms
----------------------------------------------------------------

2023-11-13 15:30:19 [main] [INFO]  KGenProgMain - entered the era of 4th generation.
2023-11-13 15:30:40 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 minutes 6 seconds
Variants: generated 400, build-succeeded 143, build-failed 109, syntax-invalid 33, redundant 115
Fitness: max 1(4), min 0.157(1), ave 0.819
Test execution time: sum 10814 ms, max 129 ms, min 49 ms
----------------------------------------------------------------

2023-11-13 15:30:40 [main] [INFO]  KGenProgMain - entered the era of 5th generation.
2023-11-13 15:31:00 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 minutes 26 seconds
Variants: generated 400, build-succeeded 123, build-failed 123, syntax-invalid 34, redundant 120
Fitness: max 1(7), min 0.471(1), ave 0.891
Test execution time: sum 9817 ms, max 205 ms, min 51 ms
----------------------------------------------------------------

2023-11-13 15:31:00 [main] [INFO]  KGenProgMain - entered the era of 6th generation.
2023-11-13 15:31:23 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 minutes 50 seconds
Variants: generated 400, build-succeeded 139, build-failed 121, syntax-invalid 26, redundant 114
Fitness: max 1(5), min 0.137(1), ave 0.906
Test execution time: sum 12892 ms, max 2026 ms, min 49 ms
----------------------------------------------------------------

2023-11-13 15:31:23 [main] [INFO]  KGenProgMain - entered the era of 7th generation.
2023-11-13 15:31:41 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 minutes 7 seconds
Variants: generated 400, build-succeeded 119, build-failed 123, syntax-invalid 48, redundant 110
Fitness: max 1(2), min 0.49(4), ave 0.924
Test execution time: sum 9033 ms, max 180 ms, min 50 ms
----------------------------------------------------------------

2023-11-13 15:31:41 [main] [INFO]  KGenProgMain - entered the era of 8th generation.
2023-11-13 15:31:57 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 minutes 24 seconds
Variants: generated 400, build-succeeded 107, build-failed 129, syntax-invalid 47, redundant 117
Fitness: max 1(1), min 0.333(1), ave 0.922
Test execution time: sum 7892 ms, max 121 ms, min 50 ms
----------------------------------------------------------------

2023-11-13 15:31:57 [main] [INFO]  KGenProgMain - entered the era of 9th generation.
2023-11-13 15:32:17 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 minutes 43 seconds
Variants: generated 400, build-succeeded 121, build-failed 128, syntax-invalid 28, redundant 123
Fitness: max 1(1), min 0.49(2), ave 0.949
Test execution time: sum 9174 ms, max 147 ms, min 48 ms
----------------------------------------------------------------

2023-11-13 15:32:17 [main] [INFO]  KGenProgMain - entered the era of 10th generation.
2023-11-13 15:32:36 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 minutes 2 seconds
Variants: generated 400, build-succeeded 129, build-failed 121, syntax-invalid 49, redundant 101
Fitness: max 0.98(100), min 0.49(2), ave 0.941
Test execution time: sum 10009 ms, max 188 ms, min 51 ms
----------------------------------------------------------------

2023-11-13 15:32:36 [main] [INFO]  KGenProgMain - entered the era of 11th generation.
2023-11-13 15:32:57 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 minutes 23 seconds
Variants: generated 400, build-succeeded 141, build-failed 120, syntax-invalid 47, redundant 92
Fitness: max 0.98(112), min 0.49(1), ave 0.949
Test execution time: sum 10762 ms, max 181 ms, min 52 ms
----------------------------------------------------------------

2023-11-13 15:32:57 [main] [INFO]  KGenProgMain - entered the era of 12th generation.
2023-11-13 15:33:19 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 minutes 45 seconds
Variants: generated 400, build-succeeded 150, build-failed 120, syntax-invalid 46, redundant 84
Fitness: max 0.98(116), min 0.549(2), ave 0.946
Test execution time: sum 11584 ms, max 215 ms, min 62 ms
----------------------------------------------------------------

2023-11-13 15:33:19 [main] [INFO]  KGenProgMain - entered the era of 13th generation.
2023-11-13 15:33:42 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 minutes 9 seconds
Variants: generated 400, build-succeeded 161, build-failed 125, syntax-invalid 44, redundant 70
Fitness: max 1(1), min 0.471(1), ave 0.951
Test execution time: sum 12475 ms, max 173 ms, min 50 ms
----------------------------------------------------------------

2023-11-13 15:33:42 [main] [INFO]  KGenProgMain - entered the era of 14th generation.
2023-11-13 15:34:11 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 minutes 37 seconds
Variants: generated 400, build-succeeded 182, build-failed 113, syntax-invalid 46, redundant 59
Fitness: max 0.98(144), min 0.235(1), ave 0.943
Test execution time: sum 15168 ms, max 1073 ms, min 50 ms
----------------------------------------------------------------

2023-11-13 15:34:11 [main] [INFO]  KGenProgMain - entered the era of 15th generation.
2023-11-13 15:34:39 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 minutes 5 seconds
Variants: generated 400, build-succeeded 183, build-failed 116, syntax-invalid 34, redundant 67
Fitness: max 0.98(143), min 0.157(1), ave 0.944
Test execution time: sum 15013 ms, max 1000 ms, min 48 ms
----------------------------------------------------------------

2023-11-13 15:34:39 [main] [INFO]  KGenProgMain - entered the era of 16th generation.
2023-11-13 15:35:09 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 minutes 35 seconds
Variants: generated 400, build-succeeded 184, build-failed 118, syntax-invalid 44, redundant 54
Fitness: max 0.98(145), min 0.431(1), ave 0.949
Test execution time: sum 15170 ms, max 741 ms, min 55 ms
----------------------------------------------------------------

2023-11-13 15:35:09 [main] [INFO]  KGenProgMain - entered the era of 17th generation.
2023-11-13 15:35:39 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 minutes 5 seconds
Variants: generated 400, build-succeeded 204, build-failed 121, syntax-invalid 33, redundant 42
Fitness: max 1(1), min 0.294(1), ave 0.956
Test execution time: sum 15851 ms, max 171 ms, min 51 ms
----------------------------------------------------------------

2023-11-13 15:35:39 [main] [INFO]  KGenProgMain - entered the era of 18th generation.
2023-11-13 15:36:10 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 minutes 36 seconds
Variants: generated 400, build-succeeded 203, build-failed 105, syntax-invalid 54, redundant 38
Fitness: max 1(2), min 0.49(2), ave 0.952
Test execution time: sum 16482 ms, max 633 ms, min 49 ms
----------------------------------------------------------------

2023-11-13 15:36:10 [main] [INFO]  KGenProgMain - entered the era of 19th generation.
2023-11-13 15:36:44 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 minutes 10 seconds
Variants: generated 400, build-succeeded 217, build-failed 113, syntax-invalid 40, redundant 30
Fitness: max 0.98(176), min 0.49(5), ave 0.947
Test execution time: sum 17986 ms, max 671 ms, min 52 ms
----------------------------------------------------------------

2023-11-13 15:36:44 [main] [INFO]  KGenProgMain - entered the era of 20th generation.
2023-11-13 15:37:15 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 minutes 41 seconds
Variants: generated 400, build-succeeded 198, build-failed 114, syntax-invalid 39, redundant 49
Fitness: max 0.98(170), min 0.471(1), ave 0.961
Test execution time: sum 16186 ms, max 247 ms, min 50 ms
----------------------------------------------------------------

2023-11-13 15:37:15 [main] [INFO]  KGenProgMain - entered the era of 21st generation.
2023-11-13 15:37:52 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 minutes 19 seconds
Variants: generated 400, build-succeeded 203, build-failed 110, syntax-invalid 31, redundant 56
Fitness: max 1(1), min 0.471(1), ave 0.96
Test execution time: sum 20707 ms, max 1628 ms, min 65 ms
----------------------------------------------------------------

2023-11-13 15:37:52 [main] [INFO]  KGenProgMain - entered the era of 22nd generation.
2023-11-13 15:38:31 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 minutes 57 seconds
Variants: generated 400, build-succeeded 215, build-failed 118, syntax-invalid 27, redundant 40
Fitness: max 0.98(184), min 0.51(1), ave 0.953
Test execution time: sum 20549 ms, max 1765 ms, min 57 ms
----------------------------------------------------------------

2023-11-13 15:38:31 [main] [INFO]  KGenProgMain - entered the era of 23rd generation.
2023-11-13 15:39:06 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 minutes 32 seconds
Variants: generated 400, build-succeeded 222, build-failed 110, syntax-invalid 38, redundant 30
Fitness: max 0.98(186), min 0.49(1), ave 0.959
Test execution time: sum 18662 ms, max 186 ms, min 53 ms
----------------------------------------------------------------

2023-11-13 15:39:06 [main] [INFO]  KGenProgMain - entered the era of 24th generation.
2023-11-13 15:39:43 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 10 minutes 10 seconds
Variants: generated 400, build-succeeded 228, build-failed 119, syntax-invalid 27, redundant 26
Fitness: max 1(1), min 0.49(2), ave 0.957
Test execution time: sum 19813 ms, max 213 ms, min 52 ms
----------------------------------------------------------------

2023-11-13 15:39:43 [main] [INFO]  KGenProgMain - entered the era of 25th generation.
2023-11-13 15:41:04 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 minutes 30 seconds
Variants: generated 400, build-succeeded 202, build-failed 125, syntax-invalid 40, redundant 33
Fitness: max 1(1), min 0.49(1), ave 0.952
Test execution time: sum 45028 ms, max 509 ms, min 77 ms
----------------------------------------------------------------

2023-11-13 15:41:04 [main] [INFO]  KGenProgMain - entered the era of 26th generation.
2023-11-13 15:42:12 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 minutes 38 seconds
Variants: generated 400, build-succeeded 233, build-failed 110, syntax-invalid 35, redundant 22
Fitness: max 1(2), min 0.235(1), ave 0.942
Test execution time: sum 39140 ms, max 1099 ms, min 73 ms
----------------------------------------------------------------

2023-11-13 15:42:12 [main] [INFO]  KGenProgMain - entered the era of 27th generation.
2023-11-13 15:42:47 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 13 minutes 13 seconds
Variants: generated 400, build-succeeded 217, build-failed 112, syntax-invalid 37, redundant 34
Fitness: max 0.98(183), min 0.49(1), ave 0.958
Test execution time: sum 17844 ms, max 229 ms, min 55 ms
----------------------------------------------------------------

2023-11-13 15:42:47 [main] [INFO]  KGenProgMain - entered the era of 28th generation.
2023-11-13 15:43:19 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 13 minutes 46 seconds
Variants: generated 400, build-succeeded 201, build-failed 121, syntax-invalid 47, redundant 31
Fitness: max 0.98(167), min 0.137(1), ave 0.953
Test execution time: sum 16396 ms, max 171 ms, min 51 ms
----------------------------------------------------------------

2023-11-13 15:43:19 [main] [INFO]  KGenProgMain - entered the era of 29th generation.
2023-11-13 15:43:55 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 14 minutes 22 seconds
Variants: generated 400, build-succeeded 230, build-failed 121, syntax-invalid 28, redundant 21
Fitness: max 1(2), min 0.49(1), ave 0.954
Test execution time: sum 19475 ms, max 1176 ms, min 55 ms
----------------------------------------------------------------

2023-11-13 15:43:55 [main] [INFO]  KGenProgMain - entered the era of 30th generation.
2023-11-13 15:44:29 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 14 minutes 55 seconds
Variants: generated 400, build-succeeded 213, build-failed 125, syntax-invalid 42, redundant 20
Fitness: max 1(4), min 0.157(1), ave 0.947
Test execution time: sum 17125 ms, max 196 ms, min 53 ms
----------------------------------------------------------------

2023-11-13 15:44:29 [main] [INFO]  KGenProgMain - entered the era of 31st generation.
2023-11-13 15:45:04 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 15 minutes 30 seconds
Variants: generated 400, build-succeeded 219, build-failed 117, syntax-invalid 32, redundant 32
Fitness: max 1(1), min 0.49(1), ave 0.956
Test execution time: sum 18422 ms, max 1101 ms, min 51 ms
----------------------------------------------------------------

2023-11-13 15:45:04 [main] [INFO]  KGenProgMain - entered the era of 32nd generation.
2023-11-13 15:45:36 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 16 minutes 2 seconds
Variants: generated 400, build-succeeded 210, build-failed 130, syntax-invalid 31, redundant 29
Fitness: max 1(3), min 0.314(1), ave 0.955
Test execution time: sum 16934 ms, max 192 ms, min 51 ms
----------------------------------------------------------------

2023-11-13 15:45:36 [main] [INFO]  KGenProgMain - entered the era of 33rd generation.
2023-11-13 15:46:11 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 16 minutes 38 seconds
Variants: generated 400, build-succeeded 220, build-failed 118, syntax-invalid 37, redundant 25
Fitness: max 0.98(185), min 0.49(1), ave 0.959
Test execution time: sum 18956 ms, max 1135 ms, min 50 ms
----------------------------------------------------------------

2023-11-13 15:46:11 [main] [INFO]  KGenProgMain - entered the era of 34th generation.
2023-11-13 15:46:46 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 17 minutes 12 seconds
Variants: generated 400, build-succeeded 224, build-failed 117, syntax-invalid 38, redundant 21
Fitness: max 0.98(191), min 0.157(1), ave 0.959
Test execution time: sum 18125 ms, max 181 ms, min 48 ms
----------------------------------------------------------------

2023-11-13 15:46:46 [main] [INFO]  KGenProgMain - entered the era of 35th generation.
2023-11-13 15:47:22 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 17 minutes 48 seconds
Variants: generated 400, build-succeeded 220, build-failed 122, syntax-invalid 30, redundant 28
Fitness: max 1(1), min 0.235(1), ave 0.961
Test execution time: sum 18650 ms, max 262 ms, min 55 ms
----------------------------------------------------------------

2023-11-13 15:47:22 [main] [INFO]  KGenProgMain - entered the era of 36th generation.
2023-11-13 15:47:58 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 18 minutes 24 seconds
Variants: generated 400, build-succeeded 218, build-failed 119, syntax-invalid 38, redundant 25
Fitness: max 0.98(189), min 0.49(1), ave 0.963
Test execution time: sum 18710 ms, max 939 ms, min 52 ms
----------------------------------------------------------------

2023-11-13 15:47:58 [main] [INFO]  KGenProgMain - entered the era of 37th generation.
2023-11-13 15:48:38 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 19 minutes 4 seconds
Variants: generated 400, build-succeeded 226, build-failed 130, syntax-invalid 18, redundant 26
Fitness: max 0.98(197), min 0.255(1), ave 0.956
Test execution time: sum 22005 ms, max 1740 ms, min 51 ms
----------------------------------------------------------------

2023-11-13 15:48:38 [main] [INFO]  KGenProgMain - entered the era of 38th generation.
2023-11-13 15:49:18 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 19 minutes 45 seconds
Variants: generated 400, build-succeeded 217, build-failed 123, syntax-invalid 38, redundant 22
Fitness: max 0.98(188), min 0.471(1), ave 0.956
Test execution time: sum 20776 ms, max 1491 ms, min 59 ms
----------------------------------------------------------------

2023-11-13 15:49:18 [main] [INFO]  KGenProgMain - entered the era of 39th generation.
2023-11-13 15:49:59 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 20 minutes 25 seconds
Variants: generated 400, build-succeeded 241, build-failed 107, syntax-invalid 29, redundant 23
Fitness: max 0.98(202), min 0.49(3), ave 0.952
Test execution time: sum 23065 ms, max 3513 ms, min 52 ms
----------------------------------------------------------------

2023-11-13 15:49:59 [main] [INFO]  KGenProgMain - entered the era of 40th generation.
2023-11-13 15:50:38 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 21 minutes 4 seconds
Variants: generated 400, build-succeeded 233, build-failed 119, syntax-invalid 34, redundant 14
Fitness: max 0.98(191), min 0.235(1), ave 0.948
Test execution time: sum 21187 ms, max 2600 ms, min 54 ms
----------------------------------------------------------------

2023-11-13 15:50:38 [main] [INFO]  KGenProgMain - entered the era of 41st generation.
2023-11-13 15:51:15 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 21 minutes 41 seconds
Variants: generated 400, build-succeeded 223, build-failed 126, syntax-invalid 29, redundant 22
Fitness: max 0.98(201), min 0.137(1), ave 0.964
Test execution time: sum 18911 ms, max 219 ms, min 48 ms
----------------------------------------------------------------

2023-11-13 15:51:15 [main] [INFO]  KGenProgMain - entered the era of 42nd generation.
2023-11-13 15:51:54 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 22 minutes 20 seconds
Variants: generated 400, build-succeeded 230, build-failed 115, syntax-invalid 31, redundant 24
Fitness: max 0.98(194), min 0.49(5), ave 0.952
Test execution time: sum 20274 ms, max 240 ms, min 55 ms
----------------------------------------------------------------

2023-11-13 15:51:54 [main] [INFO]  KGenProgMain - entered the era of 43rd generation.
2023-11-13 15:52:30 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 22 minutes 56 seconds
Variants: generated 400, build-succeeded 228, build-failed 121, syntax-invalid 37, redundant 14
Fitness: max 1(1), min 0.235(1), ave 0.955
Test execution time: sum 18522 ms, max 177 ms, min 53 ms
----------------------------------------------------------------

2023-11-13 15:52:30 [main] [INFO]  KGenProgMain - entered the era of 44th generation.
2023-11-13 15:53:05 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 23 minutes 31 seconds
Variants: generated 400, build-succeeded 218, build-failed 126, syntax-invalid 41, redundant 15
Fitness: max 0.98(194), min 0.235(1), ave 0.959
Test execution time: sum 17860 ms, max 198 ms, min 53 ms
----------------------------------------------------------------

2023-11-13 15:53:05 [main] [INFO]  KGenProgMain - entered the era of 45th generation.
2023-11-13 15:53:40 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 24 minutes 7 seconds
Variants: generated 400, build-succeeded 219, build-failed 120, syntax-invalid 41, redundant 20
Fitness: max 0.98(190), min 0.157(1), ave 0.953
Test execution time: sum 18118 ms, max 255 ms, min 52 ms
----------------------------------------------------------------

2023-11-13 15:53:40 [main] [INFO]  KGenProgMain - entered the era of 46th generation.
2023-11-13 15:54:14 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 24 minutes 40 seconds
Variants: generated 400, build-succeeded 199, build-failed 125, syntax-invalid 51, redundant 25
Fitness: max 0.98(171), min 0.471(1), ave 0.954
Test execution time: sum 16360 ms, max 174 ms, min 50 ms
----------------------------------------------------------------

2023-11-13 15:54:14 [main] [INFO]  KGenProgMain - entered the era of 47th generation.
2023-11-13 15:54:50 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 25 minutes 16 seconds
Variants: generated 400, build-succeeded 224, build-failed 119, syntax-invalid 42, redundant 15
Fitness: max 0.98(198), min 0.49(2), ave 0.959
Test execution time: sum 18433 ms, max 183 ms, min 54 ms
----------------------------------------------------------------

2023-11-13 15:54:50 [main] [INFO]  KGenProgMain - entered the era of 48th generation.
2023-11-13 15:55:27 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 25 minutes 53 seconds
Variants: generated 400, build-succeeded 221, build-failed 111, syntax-invalid 43, redundant 25
Fitness: max 0.98(192), min 0.49(2), ave 0.955
Test execution time: sum 19289 ms, max 207 ms, min 53 ms
----------------------------------------------------------------

2023-11-13 15:55:27 [main] [INFO]  KGenProgMain - entered the era of 49th generation.
2023-11-13 15:56:11 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 26 minutes 37 seconds
Variants: generated 400, build-succeeded 221, build-failed 130, syntax-invalid 32, redundant 17
Fitness: max 0.98(199), min 0.49(2), ave 0.963
Test execution time: sum 23025 ms, max 1387 ms, min 60 ms
----------------------------------------------------------------

2023-11-13 15:56:11 [main] [INFO]  KGenProgMain - entered the era of 50th generation.
2023-11-13 15:56:53 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 27 minutes 20 seconds
Variants: generated 400, build-succeeded 228, build-failed 115, syntax-invalid 34, redundant 23
Fitness: max 1(1), min 0.549(4), ave 0.961
Test execution time: sum 22597 ms, max 2330 ms, min 72 ms
----------------------------------------------------------------

2023-11-13 15:56:53 [main] [INFO]  KGenProgMain - entered the era of 51st generation.
2023-11-13 15:57:35 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 28 minutes 1 seconds
Variants: generated 400, build-succeeded 236, build-failed 108, syntax-invalid 34, redundant 22
Fitness: max 0.98(204), min 0.49(1), ave 0.961
Test execution time: sum 21851 ms, max 1104 ms, min 54 ms
----------------------------------------------------------------

2023-11-13 15:57:35 [main] [INFO]  KGenProgMain - entered the era of 52nd generation.
2023-11-13 15:58:14 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 28 minutes 40 seconds
Variants: generated 400, build-succeeded 216, build-failed 131, syntax-invalid 42, redundant 11
Fitness: max 1(1), min 0.216(1), ave 0.955
Test execution time: sum 19079 ms, max 267 ms, min 53 ms
----------------------------------------------------------------

2023-11-13 15:58:14 [main] [INFO]  KGenProgMain - entered the era of 53rd generation.
2023-11-13 15:58:58 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 29 minutes 24 seconds
Variants: generated 400, build-succeeded 235, build-failed 115, syntax-invalid 34, redundant 16
Fitness: max 1(1), min 0.353(1), ave 0.958
Test execution time: sum 23335 ms, max 1618 ms, min 64 ms
----------------------------------------------------------------

2023-11-13 15:58:58 [main] [INFO]  KGenProgMain - entered the era of 54th generation.
2023-11-13 15:59:39 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 30 minutes 6 seconds
Variants: generated 400, build-succeeded 209, build-failed 115, syntax-invalid 56, redundant 20
Fitness: max 0.98(178), min 0.235(1), ave 0.961
Test execution time: sum 20647 ms, max 1234 ms, min 72 ms
----------------------------------------------------------------

2023-11-13 15:59:39 [main] [INFO]  KGenProgMain - entered the era of 55th generation.
2023-11-13 16:00:17 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 30 minutes 44 seconds
Variants: generated 400, build-succeeded 214, build-failed 121, syntax-invalid 43, redundant 22
Fitness: max 0.98(182), min 0.314(1), ave 0.959
Test execution time: sum 18803 ms, max 226 ms, min 54 ms
----------------------------------------------------------------

2023-11-13 16:00:17 [main] [INFO]  KGenProgMain - entered the era of 56th generation.
2023-11-13 16:00:55 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 31 minutes 21 seconds
Variants: generated 400, build-succeeded 221, build-failed 123, syntax-invalid 30, redundant 26
Fitness: max 0.98(190), min 0.216(1), ave 0.953
Test execution time: sum 18563 ms, max 204 ms, min 54 ms
----------------------------------------------------------------

2023-11-13 16:00:55 [main] [INFO]  KGenProgMain - entered the era of 57th generation.
2023-11-13 16:01:33 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 31 minutes 59 seconds
Variants: generated 400, build-succeeded 210, build-failed 113, syntax-invalid 51, redundant 26
Fitness: max 0.98(175), min 0.235(1), ave 0.95
Test execution time: sum 19095 ms, max 1031 ms, min 54 ms
----------------------------------------------------------------

2023-11-13 16:01:33 [main] [INFO]  KGenProgMain - entered the era of 58th generation.
2023-11-13 16:02:23 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 32 minutes 49 seconds
Variants: generated 400, build-succeeded 242, build-failed 107, syntax-invalid 34, redundant 17
Fitness: max 1(2), min 0.471(1), ave 0.961
Test execution time: sum 27484 ms, max 3892 ms, min 70 ms
----------------------------------------------------------------

2023-11-13 16:02:23 [main] [INFO]  KGenProgMain - entered the era of 59th generation.
2023-11-13 16:03:12 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 33 minutes 38 seconds
Variants: generated 400, build-succeeded 221, build-failed 127, syntax-invalid 41, redundant 11
Fitness: max 1(2), min 0.49(1), ave 0.962
Test execution time: sum 25174 ms, max 1573 ms, min 68 ms
----------------------------------------------------------------

2023-11-13 16:03:12 [main] [INFO]  KGenProgMain - entered the era of 60th generation.
2023-11-13 16:03:55 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 34 minutes 21 seconds
Variants: generated 400, build-succeeded 234, build-failed 118, syntax-invalid 26, redundant 22
Fitness: max 1(3), min 0.137(1), ave 0.957
Test execution time: sum 21380 ms, max 1855 ms, min 55 ms
----------------------------------------------------------------

2023-11-13 16:03:55 [main] [INFO]  KGenProgMain - entered the era of 61st generation.
2023-11-13 16:04:36 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 35 minutes 2 seconds
Variants: generated 400, build-succeeded 249, build-failed 107, syntax-invalid 23, redundant 21
Fitness: max 1(3), min 0.275(1), ave 0.948
Test execution time: sum 20707 ms, max 198 ms, min 53 ms
----------------------------------------------------------------

2023-11-13 16:04:36 [main] [INFO]  KGenProgMain - entered the era of 62nd generation.
2023-11-13 16:05:19 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 35 minutes 46 seconds
Variants: generated 400, build-succeeded 222, build-failed 123, syntax-invalid 33, redundant 22
Fitness: max 0.98(197), min 0.235(1), ave 0.962
Test execution time: sum 22156 ms, max 1367 ms, min 55 ms
----------------------------------------------------------------

2023-11-13 16:05:19 [main] [INFO]  KGenProgMain - entered the era of 63rd generation.
2023-11-13 16:06:00 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 36 minutes 27 seconds
Variants: generated 400, build-succeeded 230, build-failed 125, syntax-invalid 30, redundant 15
Fitness: max 1(1), min 0.353(1), ave 0.957
Test execution time: sum 20585 ms, max 1414 ms, min 54 ms
----------------------------------------------------------------

2023-11-13 16:06:00 [main] [INFO]  KGenProgMain - entered the era of 64th generation.
2023-11-13 16:06:42 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 37 minutes 8 seconds
Variants: generated 400, build-succeeded 231, build-failed 120, syntax-invalid 27, redundant 22
Fitness: max 1(1), min 0.333(1), ave 0.947
Test execution time: sum 21187 ms, max 2051 ms, min 54 ms
----------------------------------------------------------------

2023-11-13 16:06:42 [main] [INFO]  KGenProgMain - entered the era of 65th generation.
2023-11-13 16:07:23 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 37 minutes 49 seconds
Variants: generated 400, build-succeeded 236, build-failed 114, syntax-invalid 27, redundant 23
Fitness: max 1(1), min 0.49(1), ave 0.958
Test execution time: sum 21184 ms, max 1353 ms, min 57 ms
----------------------------------------------------------------

2023-11-13 16:07:23 [main] [INFO]  KGenProgMain - entered the era of 66th generation.
2023-11-13 16:08:05 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 38 minutes 31 seconds
Variants: generated 400, build-succeeded 239, build-failed 127, syntax-invalid 21, redundant 13
Fitness: max 0.98(208), min 0.49(3), ave 0.958
Test execution time: sum 21182 ms, max 361 ms, min 55 ms
----------------------------------------------------------------

2023-11-13 16:08:05 [main] [INFO]  KGenProgMain - entered the era of 67th generation.
2023-11-13 16:08:50 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 39 minutes 16 seconds
Variants: generated 400, build-succeeded 229, build-failed 124, syntax-invalid 23, redundant 24
Fitness: max 1(1), min 0.235(1), ave 0.951
Test execution time: sum 23372 ms, max 1881 ms, min 57 ms
----------------------------------------------------------------

2023-11-13 16:08:50 [main] [INFO]  KGenProgMain - entered the era of 68th generation.
2023-11-13 16:09:28 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 39 minutes 55 seconds
Variants: generated 400, build-succeeded 224, build-failed 127, syntax-invalid 29, redundant 20
Fitness: max 0.98(195), min 0.333(1), ave 0.955
Test execution time: sum 18810 ms, max 210 ms, min 56 ms
----------------------------------------------------------------

2023-11-13 16:09:28 [main] [INFO]  KGenProgMain - entered the era of 69th generation.
2023-11-13 16:10:11 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 40 minutes 37 seconds
Variants: generated 400, build-succeeded 227, build-failed 114, syntax-invalid 28, redundant 31
Fitness: max 0.98(197), min 0.49(3), ave 0.961
Test execution time: sum 21721 ms, max 1688 ms, min 55 ms
----------------------------------------------------------------

2023-11-13 16:10:11 [main] [INFO]  KGenProgMain - entered the era of 70th generation.
2023-11-13 16:11:02 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 41 minutes 28 seconds
Variants: generated 400, build-succeeded 224, build-failed 126, syntax-invalid 23, redundant 27
Fitness: max 0.98(209), min 0.49(2), ave 0.966
Test execution time: sum 27176 ms, max 4135 ms, min 75 ms
----------------------------------------------------------------

2023-11-13 16:11:02 [main] [INFO]  KGenProgMain - entered the era of 71st generation.
2023-11-13 16:11:44 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 42 minutes 10 seconds
Variants: generated 400, build-succeeded 225, build-failed 126, syntax-invalid 25, redundant 24
Fitness: max 0.98(199), min 0.353(1), ave 0.959
Test execution time: sum 20435 ms, max 1433 ms, min 56 ms
----------------------------------------------------------------

2023-11-13 16:11:44 [main] [INFO]  KGenProgMain - entered the era of 72nd generation.
2023-11-13 16:12:28 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 42 minutes 55 seconds
Variants: generated 400, build-succeeded 227, build-failed 111, syntax-invalid 32, redundant 30
Fitness: max 0.98(200), min 0.471(1), ave 0.963
Test execution time: sum 21841 ms, max 225 ms, min 61 ms
----------------------------------------------------------------

2023-11-13 16:12:28 [main] [INFO]  KGenProgMain - entered the era of 73rd generation.
2023-11-13 16:13:13 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 43 minutes 39 seconds
Variants: generated 400, build-succeeded 233, build-failed 117, syntax-invalid 30, redundant 20
Fitness: max 0.98(206), min 0.471(1), ave 0.961
Test execution time: sum 22063 ms, max 216 ms, min 58 ms
----------------------------------------------------------------

2023-11-13 16:13:13 [main] [INFO]  KGenProgMain - entered the era of 74th generation.
2023-11-13 16:13:58 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 44 minutes 24 seconds
Variants: generated 400, build-succeeded 240, build-failed 110, syntax-invalid 33, redundant 17
Fitness: max 0.98(206), min 0.353(1), ave 0.955
Test execution time: sum 22865 ms, max 1233 ms, min 61 ms
----------------------------------------------------------------

2023-11-13 16:13:58 [main] [INFO]  KGenProgMain - entered the era of 75th generation.
2023-11-13 16:14:41 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 45 minutes 8 seconds
Variants: generated 400, build-succeeded 232, build-failed 122, syntax-invalid 24, redundant 22
Fitness: max 0.98(201), min 0.314(1), ave 0.95
Test execution time: sum 20842 ms, max 227 ms, min 62 ms
----------------------------------------------------------------

2023-11-13 16:14:41 [main] [INFO]  KGenProgMain - entered the era of 76th generation.
2023-11-13 16:15:26 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 45 minutes 53 seconds
Variants: generated 400, build-succeeded 225, build-failed 120, syntax-invalid 30, redundant 25
Fitness: max 0.98(197), min 0.549(3), ave 0.961
Test execution time: sum 22428 ms, max 2115 ms, min 71 ms
----------------------------------------------------------------

2023-11-13 16:15:26 [main] [INFO]  KGenProgMain - entered the era of 77th generation.
2023-11-13 16:16:15 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 46 minutes 41 seconds
Variants: generated 400, build-succeeded 229, build-failed 121, syntax-invalid 31, redundant 19
Fitness: max 1(1), min 0.235(1), ave 0.962
Test execution time: sum 24749 ms, max 452 ms, min 65 ms
----------------------------------------------------------------

2023-11-13 16:16:15 [main] [INFO]  KGenProgMain - entered the era of 78th generation.
2023-11-13 16:17:00 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 47 minutes 26 seconds
Variants: generated 400, build-succeeded 222, build-failed 128, syntax-invalid 28, redundant 22
Fitness: max 1(1), min 0.431(1), ave 0.964
Test execution time: sum 22190 ms, max 275 ms, min 69 ms
----------------------------------------------------------------

2023-11-13 16:17:00 [main] [INFO]  KGenProgMain - entered the era of 79th generation.
2023-11-13 16:17:46 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 48 minutes 13 seconds
Variants: generated 400, build-succeeded 234, build-failed 111, syntax-invalid 31, redundant 24
Fitness: max 0.98(209), min 0.431(1), ave 0.96
Test execution time: sum 23016 ms, max 256 ms, min 69 ms
----------------------------------------------------------------

2023-11-13 16:17:46 [main] [INFO]  KGenProgMain - entered the era of 80th generation.
2023-11-13 16:18:33 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 48 minutes 59 seconds
Variants: generated 400, build-succeeded 222, build-failed 124, syntax-invalid 34, redundant 20
Fitness: max 1(1), min 0.431(1), ave 0.961
Test execution time: sum 23588 ms, max 3321 ms, min 58 ms
----------------------------------------------------------------

2023-11-13 16:18:33 [main] [INFO]  KGenProgMain - entered the era of 81st generation.
2023-11-13 16:19:17 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 49 minutes 43 seconds
Variants: generated 400, build-succeeded 237, build-failed 115, syntax-invalid 31, redundant 17
Fitness: max 1(1), min 0.353(1), ave 0.955
Test execution time: sum 22425 ms, max 1697 ms, min 54 ms
----------------------------------------------------------------

2023-11-13 16:19:17 [main] [INFO]  KGenProgMain - entered the era of 82nd generation.
2023-11-13 16:19:59 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 50 minutes 25 seconds
Variants: generated 400, build-succeeded 241, build-failed 112, syntax-invalid 27, redundant 20
Fitness: max 1(1), min 0.255(1), ave 0.96
Test execution time: sum 20740 ms, max 189 ms, min 54 ms
----------------------------------------------------------------

2023-11-13 16:19:59 [main] [INFO]  KGenProgMain - entered the era of 83rd generation.
2023-11-13 16:20:43 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 51 minutes 9 seconds
Variants: generated 400, build-succeeded 231, build-failed 120, syntax-invalid 27, redundant 22
Fitness: max 1(1), min 0.157(1), ave 0.955
Test execution time: sum 20923 ms, max 1322 ms, min 58 ms
----------------------------------------------------------------

2023-11-13 16:20:43 [main] [INFO]  KGenProgMain - entered the era of 84th generation.
2023-11-13 16:21:21 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 51 minutes 47 seconds
Variants: generated 400, build-succeeded 213, build-failed 116, syntax-invalid 49, redundant 22
Fitness: max 1(1), min 0.49(1), ave 0.963
Test execution time: sum 18144 ms, max 181 ms, min 57 ms
----------------------------------------------------------------

2023-11-13 16:21:21 [main] [INFO]  KGenProgMain - entered the era of 85th generation.
2023-11-13 16:22:11 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 52 minutes 37 seconds
Variants: generated 400, build-succeeded 213, build-failed 118, syntax-invalid 42, redundant 27
Fitness: max 0.98(180), min 0.49(1), ave 0.956
Test execution time: sum 24545 ms, max 296 ms, min 68 ms
----------------------------------------------------------------

2023-11-13 16:22:11 [main] [INFO]  KGenProgMain - entered the era of 86th generation.
2023-11-13 16:22:59 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 53 minutes 26 seconds
Variants: generated 400, build-succeeded 215, build-failed 132, syntax-invalid 38, redundant 15
Fitness: max 0.98(185), min 0.49(2), ave 0.959
Test execution time: sum 23560 ms, max 1703 ms, min 63 ms
----------------------------------------------------------------

2023-11-13 16:22:59 [main] [INFO]  KGenProgMain - entered the era of 87th generation.
2023-11-13 16:23:51 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 54 minutes 17 seconds
Variants: generated 400, build-succeeded 228, build-failed 121, syntax-invalid 30, redundant 21
Fitness: max 1(1), min 0.49(1), ave 0.963
Test execution time: sum 25223 ms, max 331 ms, min 67 ms
----------------------------------------------------------------

2023-11-13 16:23:51 [main] [INFO]  KGenProgMain - entered the era of 88th generation.
2023-11-13 16:24:33 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 54 minutes 59 seconds
Variants: generated 400, build-succeeded 223, build-failed 120, syntax-invalid 37, redundant 20
Fitness: max 1(2), min 0.353(1), ave 0.958
Test execution time: sum 19817 ms, max 262 ms, min 59 ms
----------------------------------------------------------------

2023-11-13 16:24:33 [main] [INFO]  KGenProgMain - entered the era of 89th generation.
2023-11-13 16:25:27 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 55 minutes 53 seconds
Variants: generated 400, build-succeeded 233, build-failed 114, syntax-invalid 31, redundant 22
Fitness: max 0.98(205), min 0.216(1), ave 0.954
Test execution time: sum 25611 ms, max 528 ms, min 59 ms
----------------------------------------------------------------

2023-11-13 16:25:27 [main] [INFO]  KGenProgMain - entered the era of 90th generation.
2023-11-13 16:26:16 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 56 minutes 42 seconds
Variants: generated 400, build-succeeded 209, build-failed 124, syntax-invalid 44, redundant 23
Fitness: max 1(1), min 0.49(1), ave 0.97
Test execution time: sum 22230 ms, max 229 ms, min 72 ms
----------------------------------------------------------------

2023-11-13 16:26:16 [main] [INFO]  KGenProgMain - entered the era of 91st generation.
2023-11-13 16:27:08 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 57 minutes 34 seconds
Variants: generated 400, build-succeeded 237, build-failed 106, syntax-invalid 25, redundant 32
Fitness: max 1(1), min 0.235(1), ave 0.955
Test execution time: sum 26760 ms, max 780 ms, min 69 ms
----------------------------------------------------------------

2023-11-13 16:27:08 [main] [INFO]  KGenProgMain - entered the era of 92nd generation.
2023-11-13 16:28:01 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 58 minutes 27 seconds
Variants: generated 400, build-succeeded 233, build-failed 124, syntax-invalid 19, redundant 24
Fitness: max 1(1), min 0.235(1), ave 0.961
Test execution time: sum 25969 ms, max 284 ms, min 81 ms
----------------------------------------------------------------

2023-11-13 16:28:01 [main] [INFO]  KGenProgMain - entered the era of 93rd generation.
2023-11-13 16:28:52 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 59 minutes 18 seconds
Variants: generated 400, build-succeeded 246, build-failed 106, syntax-invalid 22, redundant 26
Fitness: max 0.98(221), min 0.157(1), ave 0.962
Test execution time: sum 25893 ms, max 246 ms, min 67 ms
----------------------------------------------------------------

2023-11-13 16:28:52 [main] [INFO]  KGenProgMain - entered the era of 94th generation.
2023-11-13 16:29:43 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 10 seconds
Variants: generated 400, build-succeeded 237, build-failed 118, syntax-invalid 22, redundant 23
Fitness: max 1(1), min 0.431(1), ave 0.958
Test execution time: sum 25998 ms, max 228 ms, min 75 ms
----------------------------------------------------------------

2023-11-13 16:29:43 [main] [INFO]  KGenProgMain - entered the era of 95th generation.
2023-11-13 16:30:35 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 1 minutes 2 seconds
Variants: generated 400, build-succeeded 236, build-failed 112, syntax-invalid 19, redundant 33
Fitness: max 1(2), min 0.235(1), ave 0.962
Test execution time: sum 26049 ms, max 256 ms, min 79 ms
----------------------------------------------------------------

2023-11-13 16:30:35 [main] [INFO]  KGenProgMain - entered the era of 96th generation.
2023-11-13 16:31:28 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 1 minutes 54 seconds
Variants: generated 400, build-succeeded 239, build-failed 119, syntax-invalid 23, redundant 19
Fitness: max 1(1), min 0.157(1), ave 0.955
Test execution time: sum 25669 ms, max 223 ms, min 68 ms
----------------------------------------------------------------

2023-11-13 16:31:28 [main] [INFO]  KGenProgMain - entered the era of 97th generation.
2023-11-13 16:32:20 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 2 minutes 46 seconds
Variants: generated 400, build-succeeded 249, build-failed 102, syntax-invalid 23, redundant 26
Fitness: max 0.98(224), min 0.216(1), ave 0.963
Test execution time: sum 26716 ms, max 253 ms, min 77 ms
----------------------------------------------------------------

2023-11-13 16:32:20 [main] [INFO]  KGenProgMain - entered the era of 98th generation.
2023-11-13 16:33:11 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 3 minutes 37 seconds
Variants: generated 400, build-succeeded 237, build-failed 103, syntax-invalid 35, redundant 25
Fitness: max 0.98(207), min 0.49(3), ave 0.958
Test execution time: sum 25753 ms, max 332 ms, min 72 ms
----------------------------------------------------------------

2023-11-13 16:33:11 [main] [INFO]  KGenProgMain - entered the era of 99th generation.
2023-11-13 16:34:02 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 4 minutes 29 seconds
Variants: generated 400, build-succeeded 245, build-failed 116, syntax-invalid 18, redundant 21
Fitness: max 0.98(211), min 0.49(4), ave 0.955
Test execution time: sum 25707 ms, max 177 ms, min 67 ms
----------------------------------------------------------------

2023-11-13 16:34:02 [main] [INFO]  KGenProgMain - entered the era of 100th generation.
2023-11-13 16:34:51 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 5 minutes 18 seconds
Variants: generated 400, build-succeeded 229, build-failed 115, syntax-invalid 31, redundant 25
Fitness: max 0.98(195), min 0.216(1), ave 0.957
Test execution time: sum 24231 ms, max 188 ms, min 70 ms
----------------------------------------------------------------

2023-11-13 16:34:51 [main] [INFO]  KGenProgMain - entered the era of 101st generation.
2023-11-13 16:35:42 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 6 minutes 9 seconds
Variants: generated 400, build-succeeded 232, build-failed 111, syntax-invalid 33, redundant 24
Fitness: max 1(1), min 0.235(1), ave 0.952
Test execution time: sum 25101 ms, max 236 ms, min 72 ms
----------------------------------------------------------------

2023-11-13 16:35:42 [main] [INFO]  KGenProgMain - entered the era of 102nd generation.
2023-11-13 16:36:36 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 7 minutes 2 seconds
Variants: generated 400, build-succeeded 226, build-failed 111, syntax-invalid 34, redundant 29
Fitness: max 0.98(203), min 0.471(1), ave 0.966
Test execution time: sum 24977 ms, max 906 ms, min 77 ms
----------------------------------------------------------------

2023-11-13 16:36:36 [main] [INFO]  KGenProgMain - entered the era of 103rd generation.
2023-11-13 16:37:31 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 7 minutes 58 seconds
Variants: generated 400, build-succeeded 237, build-failed 110, syntax-invalid 23, redundant 30
Fitness: max 0.98(207), min 0.49(3), ave 0.96
Test execution time: sum 26176 ms, max 781 ms, min 77 ms
----------------------------------------------------------------

2023-11-13 16:37:31 [main] [INFO]  KGenProgMain - entered the era of 104th generation.
2023-11-13 16:38:25 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 8 minutes 51 seconds
Variants: generated 400, build-succeeded 224, build-failed 120, syntax-invalid 28, redundant 28
Fitness: max 0.98(203), min 0.49(2), ave 0.964
Test execution time: sum 24459 ms, max 231 ms, min 72 ms
----------------------------------------------------------------

2023-11-13 16:38:25 [main] [INFO]  KGenProgMain - entered the era of 105th generation.
2023-11-13 16:39:19 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 9 minutes 45 seconds
Variants: generated 400, build-succeeded 226, build-failed 118, syntax-invalid 30, redundant 26
Fitness: max 1(3), min 0.549(2), ave 0.969
Test execution time: sum 24702 ms, max 231 ms, min 88 ms
----------------------------------------------------------------

2023-11-13 16:39:19 [main] [INFO]  KGenProgMain - entered the era of 106th generation.
2023-11-13 16:40:16 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 10 minutes 43 seconds
Variants: generated 400, build-succeeded 241, build-failed 106, syntax-invalid 31, redundant 22
Fitness: max 1(5), min 0.294(1), ave 0.957
Test execution time: sum 26815 ms, max 1096 ms, min 71 ms
----------------------------------------------------------------

2023-11-13 16:40:16 [main] [INFO]  KGenProgMain - entered the era of 107th generation.
2023-11-13 16:41:11 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 11 minutes 38 seconds
Variants: generated 400, build-succeeded 232, build-failed 112, syntax-invalid 30, redundant 26
Fitness: max 1(1), min 0.569(1), ave 0.966
Test execution time: sum 25227 ms, max 251 ms, min 77 ms
----------------------------------------------------------------

2023-11-13 16:41:11 [main] [INFO]  KGenProgMain - entered the era of 108th generation.
2023-11-13 16:42:10 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 12 minutes 37 seconds
Variants: generated 400, build-succeeded 224, build-failed 124, syntax-invalid 32, redundant 20
Fitness: max 0.98(198), min 0.49(1), ave 0.962
Test execution time: sum 26682 ms, max 253 ms, min 73 ms
----------------------------------------------------------------

2023-11-13 16:42:10 [main] [INFO]  KGenProgMain - entered the era of 109th generation.
2023-11-13 16:43:09 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 13 minutes 35 seconds
Variants: generated 400, build-succeeded 222, build-failed 104, syntax-invalid 45, redundant 29
Fitness: max 0.98(204), min 0.49(1), ave 0.967
Test execution time: sum 26732 ms, max 286 ms, min 77 ms
----------------------------------------------------------------

2023-11-13 16:43:09 [main] [INFO]  KGenProgMain - entered the era of 110th generation.
2023-11-13 16:44:05 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 14 minutes 32 seconds
Variants: generated 400, build-succeeded 211, build-failed 122, syntax-invalid 40, redundant 27
Fitness: max 0.98(193), min 0.49(1), ave 0.969
Test execution time: sum 24284 ms, max 284 ms, min 78 ms
----------------------------------------------------------------

2023-11-13 16:44:05 [main] [INFO]  KGenProgMain - entered the era of 111th generation.
2023-11-13 16:45:00 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 15 minutes 26 seconds
Variants: generated 400, build-succeeded 220, build-failed 129, syntax-invalid 34, redundant 17
Fitness: max 1(2), min 0.333(1), ave 0.964
Test execution time: sum 24600 ms, max 982 ms, min 76 ms
----------------------------------------------------------------

2023-11-13 16:45:00 [main] [INFO]  KGenProgMain - entered the era of 112th generation.
2023-11-13 16:45:58 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 16 minutes 24 seconds
Variants: generated 400, build-succeeded 238, build-failed 112, syntax-invalid 29, redundant 21
Fitness: max 0.98(213), min 0.353(1), ave 0.965
Test execution time: sum 26359 ms, max 254 ms, min 72 ms
----------------------------------------------------------------

2023-11-13 16:45:58 [main] [INFO]  KGenProgMain - entered the era of 113th generation.
2023-11-13 16:46:57 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 17 minutes 23 seconds
Variants: generated 400, build-succeeded 238, build-failed 104, syntax-invalid 31, redundant 27
Fitness: max 0.98(208), min 0.49(1), ave 0.963
Test execution time: sum 27634 ms, max 1004 ms, min 87 ms
----------------------------------------------------------------

2023-11-13 16:46:57 [main] [INFO]  KGenProgMain - entered the era of 114th generation.
2023-11-13 16:47:55 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 18 minutes 21 seconds
Variants: generated 400, build-succeeded 230, build-failed 117, syntax-invalid 31, redundant 22
Fitness: max 0.98(202), min 0.49(2), ave 0.96
Test execution time: sum 26523 ms, max 1252 ms, min 72 ms
----------------------------------------------------------------

2023-11-13 16:47:55 [main] [INFO]  KGenProgMain - entered the era of 115th generation.
2023-11-13 16:48:49 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 19 minutes 15 seconds
Variants: generated 400, build-succeeded 211, build-failed 129, syntax-invalid 26, redundant 34
Fitness: max 1(1), min 0.49(1), ave 0.967
Test execution time: sum 23048 ms, max 224 ms, min 73 ms
----------------------------------------------------------------

2023-11-13 16:48:49 [main] [INFO]  KGenProgMain - entered the era of 116th generation.
2023-11-13 16:49:44 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 20 minutes 11 seconds
Variants: generated 400, build-succeeded 225, build-failed 116, syntax-invalid 30, redundant 29
Fitness: max 0.98(201), min 0.333(1), ave 0.961
Test execution time: sum 24381 ms, max 226 ms, min 73 ms
----------------------------------------------------------------

2023-11-13 16:49:44 [main] [INFO]  KGenProgMain - entered the era of 117th generation.
2023-11-13 16:50:38 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 21 minutes 4 seconds
Variants: generated 400, build-succeeded 209, build-failed 123, syntax-invalid 42, redundant 26
Fitness: max 1(1), min 0.137(1), ave 0.962
Test execution time: sum 22657 ms, max 221 ms, min 69 ms
----------------------------------------------------------------

2023-11-13 16:50:38 [main] [INFO]  KGenProgMain - entered the era of 118th generation.
2023-11-13 16:51:35 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 22 minutes 2 seconds
Variants: generated 400, build-succeeded 227, build-failed 121, syntax-invalid 35, redundant 17
Fitness: max 1(2), min 0.667(1), ave 0.972
Test execution time: sum 25618 ms, max 951 ms, min 86 ms
----------------------------------------------------------------

2023-11-13 16:51:35 [main] [INFO]  KGenProgMain - entered the era of 119th generation.
2023-11-13 16:52:33 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 22 minutes 59 seconds
Variants: generated 400, build-succeeded 228, build-failed 115, syntax-invalid 34, redundant 23
Fitness: max 0.98(196), min 0.255(1), ave 0.947
Test execution time: sum 24769 ms, max 240 ms, min 73 ms
----------------------------------------------------------------

2023-11-13 16:52:33 [main] [INFO]  KGenProgMain - entered the era of 120th generation.
2023-11-13 16:53:30 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 23 minutes 56 seconds
Variants: generated 400, build-succeeded 235, build-failed 117, syntax-invalid 30, redundant 18
Fitness: max 1(1), min 0.49(3), ave 0.96
Test execution time: sum 25343 ms, max 212 ms, min 72 ms
----------------------------------------------------------------

2023-11-13 16:53:30 [main] [INFO]  KGenProgMain - entered the era of 121st generation.
2023-11-13 16:54:25 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 24 minutes 51 seconds
Variants: generated 400, build-succeeded 218, build-failed 118, syntax-invalid 41, redundant 23
Fitness: max 0.98(193), min 0.275(1), ave 0.958
Test execution time: sum 23814 ms, max 224 ms, min 74 ms
----------------------------------------------------------------

2023-11-13 16:54:25 [main] [INFO]  KGenProgMain - entered the era of 122nd generation.
2023-11-13 16:55:19 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 25 minutes 46 seconds
Variants: generated 400, build-succeeded 219, build-failed 103, syntax-invalid 47, redundant 31
Fitness: max 0.98(193), min 0.314(1), ave 0.957
Test execution time: sum 23562 ms, max 225 ms, min 75 ms
----------------------------------------------------------------

2023-11-13 16:55:19 [main] [INFO]  KGenProgMain - entered the era of 123rd generation.
2023-11-13 16:56:18 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 26 minutes 45 seconds
Variants: generated 400, build-succeeded 223, build-failed 125, syntax-invalid 29, redundant 23
Fitness: max 1(1), min 0.49(2), ave 0.966
Test execution time: sum 27285 ms, max 2849 ms, min 74 ms
----------------------------------------------------------------

2023-11-13 16:56:18 [main] [INFO]  KGenProgMain - entered the era of 124th generation.
2023-11-13 16:57:17 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 27 minutes 44 seconds
Variants: generated 400, build-succeeded 235, build-failed 113, syntax-invalid 32, redundant 20
Fitness: max 1(2), min 0.49(1), ave 0.963
Test execution time: sum 25609 ms, max 248 ms, min 78 ms
----------------------------------------------------------------

2023-11-13 16:57:17 [main] [INFO]  KGenProgMain - entered the era of 125th generation.
2023-11-13 16:58:20 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 28 minutes 46 seconds
Variants: generated 400, build-succeeded 237, build-failed 106, syntax-invalid 30, redundant 27
Fitness: max 0.98(207), min 0.49(1), ave 0.963
Test execution time: sum 28565 ms, max 1519 ms, min 77 ms
----------------------------------------------------------------

2023-11-13 16:58:20 [main] [INFO]  KGenProgMain - entered the era of 126th generation.
2023-11-13 16:59:20 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 29 minutes 46 seconds
Variants: generated 400, build-succeeded 233, build-failed 120, syntax-invalid 25, redundant 22
Fitness: max 0.98(207), min 0.49(1), ave 0.963
Test execution time: sum 26702 ms, max 1270 ms, min 75 ms
----------------------------------------------------------------

2023-11-13 16:59:20 [main] [INFO]  KGenProgMain - entered the era of 127th generation.
2023-11-13 17:00:22 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 30 minutes 48 seconds
Variants: generated 400, build-succeeded 248, build-failed 105, syntax-invalid 29, redundant 18
Fitness: max 0.98(210), min 0.471(2), ave 0.959
Test execution time: sum 28280 ms, max 1167 ms, min 77 ms
----------------------------------------------------------------

2023-11-13 17:00:22 [main] [INFO]  KGenProgMain - entered the era of 128th generation.
2023-11-13 17:01:23 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 31 minutes 49 seconds
Variants: generated 400, build-succeeded 244, build-failed 110, syntax-invalid 23, redundant 23
Fitness: max 1(1), min 0.314(1), ave 0.961
Test execution time: sum 26611 ms, max 211 ms, min 76 ms
----------------------------------------------------------------

2023-11-13 17:01:23 [main] [INFO]  KGenProgMain - entered the era of 129th generation.
2023-11-13 17:02:23 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 32 minutes 49 seconds
Variants: generated 400, build-succeeded 228, build-failed 125, syntax-invalid 33, redundant 14
Fitness: max 0.98(206), min 0.49(1), ave 0.968
Test execution time: sum 25759 ms, max 788 ms, min 86 ms
----------------------------------------------------------------

2023-11-13 17:02:23 [main] [INFO]  KGenProgMain - entered the era of 130th generation.
2023-11-13 17:03:21 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 33 minutes 48 seconds
Variants: generated 400, build-succeeded 218, build-failed 119, syntax-invalid 38, redundant 25
Fitness: max 0.98(196), min 0.49(2), ave 0.964
Test execution time: sum 24450 ms, max 250 ms, min 78 ms
----------------------------------------------------------------

2023-11-13 17:03:21 [main] [INFO]  KGenProgMain - entered the era of 131st generation.
2023-11-13 17:04:22 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 34 minutes 48 seconds
Variants: generated 400, build-succeeded 236, build-failed 113, syntax-invalid 37, redundant 14
Fitness: max 0.98(210), min 0.549(1), ave 0.968
Test execution time: sum 26729 ms, max 870 ms, min 86 ms
----------------------------------------------------------------

2023-11-13 17:04:22 [main] [INFO]  KGenProgMain - entered the era of 132nd generation.
2023-11-13 17:05:23 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 35 minutes 49 seconds
Variants: generated 400, build-succeeded 228, build-failed 101, syntax-invalid 34, redundant 37
Fitness: max 0.98(204), min 0.471(2), ave 0.963
Test execution time: sum 27784 ms, max 3040 ms, min 76 ms
----------------------------------------------------------------

2023-11-13 17:05:23 [main] [INFO]  KGenProgMain - entered the era of 133rd generation.
2023-11-13 17:06:24 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 36 minutes 51 seconds
Variants: generated 400, build-succeeded 241, build-failed 110, syntax-invalid 23, redundant 26
Fitness: max 1(1), min 0.471(3), ave 0.95
Test execution time: sum 26335 ms, max 247 ms, min 74 ms
----------------------------------------------------------------

2023-11-13 17:06:24 [main] [INFO]  KGenProgMain - entered the era of 134th generation.
2023-11-13 17:07:24 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 37 minutes 50 seconds
Variants: generated 400, build-succeeded 234, build-failed 121, syntax-invalid 20, redundant 25
Fitness: max 0.98(208), min 0.49(4), ave 0.96
Test execution time: sum 25580 ms, max 253 ms, min 77 ms
----------------------------------------------------------------

2023-11-13 17:07:24 [main] [INFO]  KGenProgMain - entered the era of 135th generation.
2023-11-13 17:08:25 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 38 minutes 51 seconds
Variants: generated 400, build-succeeded 231, build-failed 121, syntax-invalid 27, redundant 21
Fitness: max 1(1), min 0.49(2), ave 0.965
Test execution time: sum 25535 ms, max 199 ms, min 76 ms
----------------------------------------------------------------

2023-11-13 17:08:25 [main] [INFO]  KGenProgMain - entered the era of 136th generation.
2023-11-13 17:09:24 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 39 minutes 50 seconds
Variants: generated 400, build-succeeded 219, build-failed 118, syntax-invalid 38, redundant 25
Fitness: max 0.98(193), min 0.275(1), ave 0.951
Test execution time: sum 24291 ms, max 221 ms, min 74 ms
----------------------------------------------------------------

2023-11-13 17:09:24 [main] [INFO]  KGenProgMain - entered the era of 137th generation.
2023-11-13 17:10:24 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 40 minutes 50 seconds
Variants: generated 400, build-succeeded 232, build-failed 121, syntax-invalid 32, redundant 15
Fitness: max 1(1), min 0.49(1), ave 0.962
Test execution time: sum 25963 ms, max 212 ms, min 80 ms
----------------------------------------------------------------

2023-11-13 17:10:24 [main] [INFO]  KGenProgMain - entered the era of 138th generation.
2023-11-13 17:11:25 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 41 minutes 52 seconds
Variants: generated 400, build-succeeded 221, build-failed 130, syntax-invalid 28, redundant 21
Fitness: max 0.98(204), min 0.451(1), ave 0.967
Test execution time: sum 25527 ms, max 1051 ms, min 76 ms
----------------------------------------------------------------

2023-11-13 17:11:25 [main] [INFO]  KGenProgMain - entered the era of 139th generation.
2023-11-13 17:11:26 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 41 minutes 53 seconds
Variants: generated 9, build-succeeded 3, build-failed 6, syntax-invalid 0, redundant 0
Fitness: max 1(1), min 0.98(2), ave 0.987
Test execution time: sum 345 ms, max 136 ms, min 103 ms
----------------------------------------------------------------

2023-11-13 17:11:26 [main] [INFO]  KGenProgMain - GA stopped
2023-11-13 17:11:27 [main] [INFO]  PatchLogExporter - patch (v1053)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 17:11:27 [main] [INFO]  PatchLogExporter - patch (v1053)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 17:11:27 [main] [INFO]  PatchLogExporter - patch (v1053)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -407,7 +407,7 @@
         if (buffer != null) {
             int len = Math.min(avail(), bAvail);
             System.arraycopy(buffer, readPos, b, bPos, len);
-            readPos += len;
+            x = x >> 2;
             if (readPos >= pos) {
                 buffer = null;
             }
@@ -978,7 +978,7 @@
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
-            if (!lenChunksPerfectly) {
+            if (pArray == null || pArray.length == 0) {
                 len += chunkSeparator.length;
             }
         }
2023-11-13 17:11:27 [main] [INFO]  PatchLogExporter - patch (v1053)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 17:11:27 [main] [INFO]  PatchLogExporter - patch (v1053)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 17:11:27 [main] [INFO]  PatchLogExporter - patch (v1053)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 17:11:27 [main] [INFO]  PatchLogExporter - patch (v1053)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 17:11:27 [main] [INFO]  PatchLogExporter - patch (v1093)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 17:11:27 [main] [INFO]  PatchLogExporter - patch (v1093)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 17:11:27 [main] [INFO]  PatchLogExporter - patch (v1093)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -407,7 +407,7 @@
         if (buffer != null) {
             int len = Math.min(avail(), bAvail);
             System.arraycopy(buffer, readPos, b, bPos, len);
-            readPos += len;
+            x = x >> 2;
             if (readPos >= pos) {
                 buffer = null;
             }
@@ -973,7 +973,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-13 17:11:27 [main] [INFO]  PatchLogExporter - patch (v1093)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 17:11:27 [main] [INFO]  PatchLogExporter - patch (v1093)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 17:11:27 [main] [INFO]  PatchLogExporter - patch (v1093)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 17:11:27 [main] [INFO]  PatchLogExporter - patch (v1093)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 17:11:27 [main] [INFO]  PatchLogExporter - patch (v1135)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 17:11:27 [main] [INFO]  PatchLogExporter - patch (v1135)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 17:11:27 [main] [INFO]  PatchLogExporter - patch (v1135)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -973,7 +973,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
@@ -1050,7 +1049,6 @@
      * Resets this Base64 object to its initial newly constructed state.
      */
     private void reset() {
-        buffer = null;
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
2023-11-13 17:11:27 [main] [INFO]  PatchLogExporter - patch (v1135)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 17:11:27 [main] [INFO]  PatchLogExporter - patch (v1135)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 17:11:27 [main] [INFO]  PatchLogExporter - patch (v1135)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 17:11:27 [main] [INFO]  PatchLogExporter - patch (v1135)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 17:11:27 [main] [INFO]  PatchLogExporter - patch (v1183)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 17:11:27 [main] [INFO]  PatchLogExporter - patch (v1183)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 17:11:27 [main] [INFO]  PatchLogExporter - patch (v1183)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -441,7 +441,8 @@
         // inAvail < 0 is how we're informed of EOF in the underlying data we're
         // encoding.
         if (inAvail < 0) {
-            eof = true;
+            int readLen = 0;
+			eof = true;
             if (buffer == null || buffer.length - pos < encodeSize) {
                 resizeBuffer();
             }
@@ -973,7 +974,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-13 17:11:27 [main] [INFO]  PatchLogExporter - patch (v1183)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 17:11:27 [main] [INFO]  PatchLogExporter - patch (v1183)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 17:11:27 [main] [INFO]  PatchLogExporter - patch (v1183)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 17:11:27 [main] [INFO]  PatchLogExporter - patch (v1183)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 17:11:27 [main] [INFO]  PatchLogExporter - patch (v1467)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 17:11:27 [main] [INFO]  PatchLogExporter - patch (v1467)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 17:11:27 [main] [INFO]  PatchLogExporter - patch (v1467)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -347,7 +347,8 @@
             String sep = StringUtils.newStringUtf8(lineSeparator);
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
-        this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
+        eof = true;
+		this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
     }
 
     /**
@@ -973,7 +974,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-13 17:11:27 [main] [INFO]  PatchLogExporter - patch (v1467)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 17:11:27 [main] [INFO]  PatchLogExporter - patch (v1467)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 17:11:27 [main] [INFO]  PatchLogExporter - patch (v1467)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 17:11:27 [main] [INFO]  PatchLogExporter - patch (v1467)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 17:11:27 [main] [INFO]  PatchLogExporter - patch (v1476)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 17:11:27 [main] [INFO]  PatchLogExporter - patch (v1476)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 17:11:27 [main] [INFO]  PatchLogExporter - patch (v1476)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -407,7 +407,7 @@
         if (buffer != null) {
             int len = Math.min(avail(), bAvail);
             System.arraycopy(buffer, readPos, b, bPos, len);
-            readPos += len;
+            x = x >> 2;
             if (readPos >= pos) {
                 buffer = null;
             }
@@ -973,7 +973,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-13 17:11:27 [main] [INFO]  PatchLogExporter - patch (v1476)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 17:11:27 [main] [INFO]  PatchLogExporter - patch (v1476)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 17:11:27 [main] [INFO]  PatchLogExporter - patch (v1476)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 17:11:27 [main] [INFO]  PatchLogExporter - patch (v1476)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -254,7 +254,7 @@
             String sep = StringUtils.newStringUtf8(lineSeparator);
             throw new IllegalArgumentException("lineSeperator must not contain Base32 characters: [" + sep + "]");
         }
-        if (useHex){
+        if (0 == modulus){
             this.encodeTable = BASE32HEX_ENCODE_TABLE;
             this.decodeTable = BASE32HEX_DECODE_TABLE;            
         } else {
2023-11-13 17:11:27 [main] [INFO]  PatchLogExporter - patch (v1476)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 17:11:27 [main] [INFO]  PatchLogExporter - patch (v1499)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 17:11:27 [main] [INFO]  PatchLogExporter - patch (v1499)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 17:11:27 [main] [INFO]  PatchLogExporter - patch (v1499)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -383,7 +383,6 @@
         if (buffer == null) {
             buffer = new byte[DEFAULT_BUFFER_SIZE];
             pos = 0;
-            readPos = 0;
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
             System.arraycopy(buffer, 0, b, 0, buffer.length);
@@ -407,7 +406,7 @@
         if (buffer != null) {
             int len = Math.min(avail(), bAvail);
             System.arraycopy(buffer, readPos, b, bPos, len);
-            readPos += len;
+            x = x >> 2;
             if (readPos >= pos) {
                 buffer = null;
             }
@@ -973,7 +972,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-13 17:11:27 [main] [INFO]  PatchLogExporter - patch (v1499)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 17:11:27 [main] [INFO]  PatchLogExporter - patch (v1499)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 17:11:27 [main] [INFO]  PatchLogExporter - patch (v1499)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 17:11:27 [main] [INFO]  PatchLogExporter - patch (v1499)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 17:11:27 [main] [INFO]  PatchLogExporter - patch (v1506)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 17:11:27 [main] [INFO]  PatchLogExporter - patch (v1506)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 17:11:27 [main] [INFO]  PatchLogExporter - patch (v1506)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -383,7 +383,6 @@
         if (buffer == null) {
             buffer = new byte[DEFAULT_BUFFER_SIZE];
             pos = 0;
-            readPos = 0;
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
             System.arraycopy(buffer, 0, b, 0, buffer.length);
@@ -441,7 +440,8 @@
         // inAvail < 0 is how we're informed of EOF in the underlying data we're
         // encoding.
         if (inAvail < 0) {
-            eof = true;
+            int readLen = 0;
+			eof = true;
             if (buffer == null || buffer.length - pos < encodeSize) {
                 resizeBuffer();
             }
@@ -973,7 +973,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-13 17:11:27 [main] [INFO]  PatchLogExporter - patch (v1506)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 17:11:27 [main] [INFO]  PatchLogExporter - patch (v1506)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 17:11:27 [main] [INFO]  PatchLogExporter - patch (v1506)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 17:11:27 [main] [INFO]  PatchLogExporter - patch (v1506)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 17:11:27 [main] [INFO]  PatchLogExporter - patch (v1515)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 17:11:27 [main] [INFO]  PatchLogExporter - patch (v1515)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 17:11:27 [main] [INFO]  PatchLogExporter - patch (v1515)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -973,7 +973,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
@@ -1050,8 +1049,6 @@
      * Resets this Base64 object to its initial newly constructed state.
      */
     private void reset() {
-        buffer = null;
-        pos = 0;
         readPos = 0;
         currentLinePos = 0;
         modulus = 0;
2023-11-13 17:11:27 [main] [INFO]  PatchLogExporter - patch (v1515)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 17:11:27 [main] [INFO]  PatchLogExporter - patch (v1515)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 17:11:27 [main] [INFO]  PatchLogExporter - patch (v1515)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 17:11:27 [main] [INFO]  PatchLogExporter - patch (v1515)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 17:11:27 [main] [INFO]  PatchLogExporter - patch (v1575)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 17:11:27 [main] [INFO]  PatchLogExporter - patch (v1575)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 17:11:27 [main] [INFO]  PatchLogExporter - patch (v1575)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -383,7 +383,6 @@
         if (buffer == null) {
             buffer = new byte[DEFAULT_BUFFER_SIZE];
             pos = 0;
-            readPos = 0;
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
             System.arraycopy(buffer, 0, b, 0, buffer.length);
@@ -973,7 +972,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
@@ -1050,7 +1048,6 @@
      * Resets this Base64 object to its initial newly constructed state.
      */
     private void reset() {
-        buffer = null;
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
2023-11-13 17:11:27 [main] [INFO]  PatchLogExporter - patch (v1575)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 17:11:27 [main] [INFO]  PatchLogExporter - patch (v1575)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 17:11:27 [main] [INFO]  PatchLogExporter - patch (v1575)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 17:11:27 [main] [INFO]  PatchLogExporter - patch (v1575)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 17:11:27 [main] [INFO]  PatchLogExporter - patch (v1600)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 17:11:27 [main] [INFO]  PatchLogExporter - patch (v1600)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 17:11:27 [main] [INFO]  PatchLogExporter - patch (v1600)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -973,12 +973,11 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
-            if (!lenChunksPerfectly) {
+            if (pArray == null || pArray.length == 0) {
                 len += chunkSeparator.length;
             }
         }
2023-11-13 17:11:27 [main] [INFO]  PatchLogExporter - patch (v1600)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 17:11:27 [main] [INFO]  PatchLogExporter - patch (v1600)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 17:11:27 [main] [INFO]  PatchLogExporter - patch (v1600)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 17:11:27 [main] [INFO]  PatchLogExporter - patch (v1600)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v1721)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v1721)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v1721)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -383,7 +383,6 @@
         if (buffer == null) {
             buffer = new byte[DEFAULT_BUFFER_SIZE];
             pos = 0;
-            readPos = 0;
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
             System.arraycopy(buffer, 0, b, 0, buffer.length);
@@ -973,7 +972,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v1721)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v1721)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v1721)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v1721)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v1807)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v1807)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v1807)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -973,7 +973,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
@@ -1052,7 +1051,6 @@
     private void reset() {
         buffer = null;
         pos = 0;
-        readPos = 0;
         currentLinePos = 0;
         modulus = 0;
         eof = false;
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v1807)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v1807)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v1807)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v1807)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v1818)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v1818)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v1818)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -973,7 +973,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
@@ -1054,7 +1053,8 @@
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
-        modulus = 0;
+        resizeBuffer();
+		modulus = 0;
         eof = false;
     }
 
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v1818)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v1818)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v1818)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v1818)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v1857)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v1857)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v1857)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -494,6 +494,7 @@
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
                         currentLinePos = 0;
+						x = x >> 4;
                     }
                 }
             }
@@ -973,7 +974,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v1857)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v1857)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v1857)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v1857)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v1952)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v1952)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v1952)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -973,7 +973,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
@@ -1051,7 +1050,8 @@
      */
     private void reset() {
         buffer = null;
-        pos = 0;
+        eof = true;
+		pos = 0;
         readPos = 0;
         currentLinePos = 0;
         modulus = 0;
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v1952)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v1952)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v1952)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v1952)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v2281)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v2281)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v2281)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -441,7 +441,8 @@
         // inAvail < 0 is how we're informed of EOF in the underlying data we're
         // encoding.
         if (inAvail < 0) {
-            eof = true;
+            int readLen = 0;
+			eof = true;
             if (buffer == null || buffer.length - pos < encodeSize) {
                 resizeBuffer();
             }
@@ -978,7 +979,7 @@
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
-            if (!lenChunksPerfectly) {
+            if (pArray == null || pArray.length == 0) {
                 len += chunkSeparator.length;
             }
         }
@@ -1051,7 +1052,8 @@
      */
     private void reset() {
         buffer = null;
-        pos = 0;
+        eof = true;
+		pos = 0;
         readPos = 0;
         currentLinePos = 0;
         modulus = 0;
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v2281)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v2281)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v2281)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v2281)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v2388)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v2388)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v2388)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -978,7 +978,7 @@
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
-            if (!lenChunksPerfectly) {
+            if (pArray == null || pArray.length == 0) {
                 len += chunkSeparator.length;
             }
         }
@@ -1051,7 +1051,6 @@
      */
     private void reset() {
         buffer = null;
-        pos = 0;
         readPos = 0;
         currentLinePos = 0;
         modulus = 0;
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v2388)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v2388)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v2388)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v2388)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v2446)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v2446)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v2446)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -383,7 +383,6 @@
         if (buffer == null) {
             buffer = new byte[DEFAULT_BUFFER_SIZE];
             pos = 0;
-            readPos = 0;
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
             System.arraycopy(buffer, 0, b, 0, buffer.length);
@@ -967,13 +966,9 @@
      *         a long since a max-len array will require Integer.MAX_VALUE + 33%.
      */
     private static long getEncodeLength(byte[] pArray, int chunkSize, byte[] chunkSeparator) {
-        // base64 always encodes to multiples of 4.
-        chunkSize = (chunkSize / 4) * 4;
-
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
@@ -1051,10 +1046,10 @@
      */
     private void reset() {
         buffer = null;
-        pos = 0;
         readPos = 0;
         currentLinePos = 0;
-        modulus = 0;
+        resizeBuffer();
+		modulus = 0;
         eof = false;
     }
 
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v2446)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v2446)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v2446)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v2446)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v3098)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v3098)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v3098)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -494,6 +494,7 @@
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
                         currentLinePos = 0;
+						x = x >> 4;
                     }
                 }
             }
@@ -973,7 +974,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
@@ -1051,8 +1051,8 @@
      */
     private void reset() {
         buffer = null;
-        pos = 0;
-        readPos = 0;
+        eof = true;
+		readPos = 0;
         currentLinePos = 0;
         modulus = 0;
         eof = false;
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v3098)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v3098)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v3098)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v3098)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v4525)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v4525)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v4525)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -407,7 +407,7 @@
         if (buffer != null) {
             int len = Math.min(avail(), bAvail);
             System.arraycopy(buffer, readPos, b, bPos, len);
-            readPos += len;
+            x = x >> 2;
             if (readPos >= pos) {
                 buffer = null;
             }
@@ -494,6 +494,7 @@
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
                         currentLinePos = 0;
+						x = x >> 4;
                     }
                 }
             }
@@ -948,7 +949,8 @@
         if (pArray == null || pArray.length == 0) {
             return pArray;
         }
-        encode(pArray, 0, pArray.length);
+        reset();
+		encode(pArray, 0, pArray.length);
         encode(pArray, 0, -1); // Notify encoder of EOF.
         byte[] buf = new byte[pos - readPos];
         readResults(buf, 0, buf.length);
@@ -979,7 +981,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v4525)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v4525)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v4525)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v4525)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v6052)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v6052)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v6052)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -407,7 +407,7 @@
         if (buffer != null) {
             int len = Math.min(avail(), bAvail);
             System.arraycopy(buffer, readPos, b, bPos, len);
-            readPos += len;
+            x = x >> 2;
             if (readPos >= pos) {
                 buffer = null;
             }
@@ -491,7 +491,8 @@
                     buffer[pos++] = encodeTable[x & MASK_6BITS];
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
-                        System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                        currentLinePos = 0;
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
                         currentLinePos = 0;
                     }
@@ -948,7 +949,8 @@
         if (pArray == null || pArray.length == 0) {
             return pArray;
         }
-        encode(pArray, 0, pArray.length);
+        reset();
+		encode(pArray, 0, pArray.length);
         encode(pArray, 0, -1); // Notify encoder of EOF.
         byte[] buf = new byte[pos - readPos];
         readResults(buf, 0, buf.length);
@@ -973,7 +975,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v6052)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v6052)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v6052)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v6052)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v6473)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v6473)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v6473)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -409,7 +409,6 @@
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
-                buffer = null;
             }
             return len;
         }
@@ -494,6 +493,7 @@
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
                         currentLinePos = 0;
+						x = x >> 4;
                     }
                 }
             }
@@ -979,7 +979,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
@@ -1051,10 +1050,10 @@
      */
     private void reset() {
         buffer = null;
-        pos = 0;
         readPos = 0;
         currentLinePos = 0;
-        modulus = 0;
+        resizeBuffer();
+		modulus = 0;
         eof = false;
     }
 
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v6473)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v6473)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v6473)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v6473)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v6575)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v6575)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v6575)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -383,7 +383,6 @@
         if (buffer == null) {
             buffer = new byte[DEFAULT_BUFFER_SIZE];
             pos = 0;
-            readPos = 0;
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
             System.arraycopy(buffer, 0, b, 0, buffer.length);
@@ -441,14 +440,14 @@
         // inAvail < 0 is how we're informed of EOF in the underlying data we're
         // encoding.
         if (inAvail < 0) {
-            eof = true;
             if (buffer == null || buffer.length - pos < encodeSize) {
                 resizeBuffer();
             }
             switch (modulus) {
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
-                    buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
+				String sep = StringUtils.newStringUtf8(lineSeparator);
+				buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buffer[pos++] = PAD;
@@ -967,9 +966,6 @@
      *         a long since a max-len array will require Integer.MAX_VALUE + 33%.
      */
     private static long getEncodeLength(byte[] pArray, int chunkSize, byte[] chunkSeparator) {
-        // base64 always encodes to multiples of 4.
-        chunkSize = (chunkSize / 4) * 4;
-
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
@@ -979,7 +975,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
@@ -1051,7 +1046,6 @@
      */
     private void reset() {
         buffer = null;
-        pos = 0;
         readPos = 0;
         currentLinePos = 0;
         modulus = 0;
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v6575)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v6575)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v6575)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v6575)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v7870)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v7870)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v7870)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -347,7 +347,8 @@
             String sep = StringUtils.newStringUtf8(lineSeparator);
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
-        this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
+        eof = true;
+		this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
     }
 
     /**
@@ -435,20 +436,22 @@
      *            Amount of bytes available from input for encoding.
      */
     void encode(byte[] in, int inPos, int inAvail) {
-        if (eof) {
+        if (eof && modulus != 0) {
             return;
         }
         // inAvail < 0 is how we're informed of EOF in the underlying data we're
         // encoding.
         if (inAvail < 0) {
-            eof = true;
+            int readLen = 0;
+			eof = true;
             if (buffer == null || buffer.length - pos < encodeSize) {
                 resizeBuffer();
             }
             switch (modulus) {
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
-                    buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
+				String sep = StringUtils.newStringUtf8(lineSeparator);
+				buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buffer[pos++] = PAD;
@@ -973,7 +976,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v7870)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v7870)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v7870)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v7870)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v8823)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v8823)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v8823)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -409,7 +409,6 @@
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
-                buffer = null;
             }
             return len;
         }
@@ -435,7 +434,7 @@
      *            Amount of bytes available from input for encoding.
      */
     void encode(byte[] in, int inPos, int inAvail) {
-        if (eof) {
+        if (eof && modulus != 0) {
             return;
         }
         // inAvail < 0 is how we're informed of EOF in the underlying data we're
@@ -493,6 +492,7 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						x = (x << 8) + b;
                         currentLinePos = 0;
                     }
                 }
@@ -967,9 +967,6 @@
      *         a long since a max-len array will require Integer.MAX_VALUE + 33%.
      */
     private static long getEncodeLength(byte[] pArray, int chunkSize, byte[] chunkSeparator) {
-        // base64 always encodes to multiples of 4.
-        chunkSize = (chunkSize / 4) * 4;
-
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
@@ -978,7 +975,7 @@
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
-            if (!lenChunksPerfectly) {
+            if (pArray == null || pArray.length == 0) {
                 len += chunkSeparator.length;
             }
         }
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v8823)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v8823)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v8823)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v8823)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v9259)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v9259)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v9259)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -347,7 +347,8 @@
             String sep = StringUtils.newStringUtf8(lineSeparator);
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
-        this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
+        eof = true;
+		this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
     }
 
     /**
@@ -382,7 +383,6 @@
     private void resizeBuffer() {
         if (buffer == null) {
             buffer = new byte[DEFAULT_BUFFER_SIZE];
-            pos = 0;
             readPos = 0;
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
@@ -494,6 +494,7 @@
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
                         currentLinePos = 0;
+						x = x >> 4;
                     }
                 }
             }
@@ -948,7 +949,8 @@
         if (pArray == null || pArray.length == 0) {
             return pArray;
         }
-        encode(pArray, 0, pArray.length);
+        reset();
+		encode(pArray, 0, pArray.length);
         encode(pArray, 0, -1); // Notify encoder of EOF.
         byte[] buf = new byte[pos - readPos];
         readResults(buf, 0, buf.length);
@@ -979,7 +981,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v9259)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v9259)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v9259)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v9259)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -246,6 +246,7 @@
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
+			buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
         } else {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK;
         }
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v9259)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v9679)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v9679)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v9679)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -383,7 +383,6 @@
         if (buffer == null) {
             buffer = new byte[DEFAULT_BUFFER_SIZE];
             pos = 0;
-            readPos = 0;
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
             System.arraycopy(buffer, 0, b, 0, buffer.length);
@@ -407,7 +406,6 @@
         if (buffer != null) {
             int len = Math.min(avail(), bAvail);
             System.arraycopy(buffer, readPos, b, bPos, len);
-            readPos += len;
             if (readPos >= pos) {
                 buffer = null;
             }
@@ -441,7 +439,8 @@
         // inAvail < 0 is how we're informed of EOF in the underlying data we're
         // encoding.
         if (inAvail < 0) {
-            eof = true;
+            int readLen = 0;
+			eof = true;
             if (buffer == null || buffer.length - pos < encodeSize) {
                 resizeBuffer();
             }
@@ -494,6 +493,7 @@
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
                         currentLinePos = 0;
+						x = x >> 3;
                     }
                 }
             }
@@ -948,7 +948,8 @@
         if (pArray == null || pArray.length == 0) {
             return pArray;
         }
-        encode(pArray, 0, pArray.length);
+        reset();
+		encode(pArray, 0, pArray.length);
         encode(pArray, 0, -1); // Notify encoder of EOF.
         byte[] buf = new byte[pos - readPos];
         readResults(buf, 0, buf.length);
@@ -979,7 +980,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v9679)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v9679)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v9679)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v9679)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v9720)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v9720)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v9720)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -383,7 +383,6 @@
         if (buffer == null) {
             buffer = new byte[DEFAULT_BUFFER_SIZE];
             pos = 0;
-            readPos = 0;
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
             System.arraycopy(buffer, 0, b, 0, buffer.length);
@@ -409,7 +408,6 @@
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
-                buffer = null;
             }
             return len;
         }
@@ -435,7 +433,7 @@
      *            Amount of bytes available from input for encoding.
      */
     void encode(byte[] in, int inPos, int inAvail) {
-        if (eof) {
+        if (eof && modulus != 0) {
             return;
         }
         // inAvail < 0 is how we're informed of EOF in the underlying data we're
@@ -948,7 +946,8 @@
         if (pArray == null || pArray.length == 0) {
             return pArray;
         }
-        encode(pArray, 0, pArray.length);
+        reset();
+		encode(pArray, 0, pArray.length);
         encode(pArray, 0, -1); // Notify encoder of EOF.
         byte[] buf = new byte[pos - readPos];
         readResults(buf, 0, buf.length);
@@ -967,13 +966,9 @@
      *         a long since a max-len array will require Integer.MAX_VALUE + 33%.
      */
     private static long getEncodeLength(byte[] pArray, int chunkSize, byte[] chunkSeparator) {
-        // base64 always encodes to multiples of 4.
-        chunkSize = (chunkSize / 4) * 4;
-
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v9720)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v9720)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v9720)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v9720)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v10921)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v10921)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v10921)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -347,7 +347,8 @@
             String sep = StringUtils.newStringUtf8(lineSeparator);
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
-        this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
+        eof = true;
+		this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
     }
 
     /**
@@ -435,7 +436,7 @@
      *            Amount of bytes available from input for encoding.
      */
     void encode(byte[] in, int inPos, int inAvail) {
-        if (eof) {
+        if (eof && modulus != 0) {
             return;
         }
         // inAvail < 0 is how we're informed of EOF in the underlying data we're
@@ -491,7 +492,9 @@
                     buffer[pos++] = encodeTable[x & MASK_6BITS];
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
-                        System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                        currentLinePos = 0;
+						x = x >> 4;
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
                         currentLinePos = 0;
                     }
@@ -979,7 +982,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
@@ -1050,7 +1052,6 @@
      * Resets this Base64 object to its initial newly constructed state.
      */
     private void reset() {
-        buffer = null;
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v10921)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v10921)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v10921)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v10921)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v11121)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v11121)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v11121)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -347,7 +347,8 @@
             String sep = StringUtils.newStringUtf8(lineSeparator);
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
-        this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
+        eof = true;
+		this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
     }
 
     /**
@@ -383,7 +384,6 @@
         if (buffer == null) {
             buffer = new byte[DEFAULT_BUFFER_SIZE];
             pos = 0;
-            readPos = 0;
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
             System.arraycopy(buffer, 0, b, 0, buffer.length);
@@ -435,7 +435,7 @@
      *            Amount of bytes available from input for encoding.
      */
     void encode(byte[] in, int inPos, int inAvail) {
-        if (eof) {
+        if (eof && modulus != 0) {
             return;
         }
         // inAvail < 0 is how we're informed of EOF in the underlying data we're
@@ -494,6 +494,7 @@
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
                         currentLinePos = 0;
+						x = x >> 4;
                     }
                 }
             }
@@ -973,7 +974,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
@@ -1051,7 +1051,8 @@
      */
     private void reset() {
         buffer = null;
-        pos = 0;
+        eof = true;
+		pos = 0;
         readPos = 0;
         currentLinePos = 0;
         modulus = 0;
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v11121)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v11121)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v11121)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v11121)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v11278)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v11278)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v11278)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -383,7 +383,6 @@
         if (buffer == null) {
             buffer = new byte[DEFAULT_BUFFER_SIZE];
             pos = 0;
-            readPos = 0;
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
             System.arraycopy(buffer, 0, b, 0, buffer.length);
@@ -409,7 +408,6 @@
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
-                buffer = null;
             }
             return len;
         }
@@ -435,7 +433,7 @@
      *            Amount of bytes available from input for encoding.
      */
     void encode(byte[] in, int inPos, int inAvail) {
-        if (eof) {
+        if (eof && modulus != 0) {
             return;
         }
         // inAvail < 0 is how we're informed of EOF in the underlying data we're
@@ -491,8 +489,10 @@
                     buffer[pos++] = encodeTable[x & MASK_6BITS];
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
-                        System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                        currentLinePos = 0;
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						x = (x << 8) + b;
                         currentLinePos = 0;
                     }
                 }
@@ -979,7 +979,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
@@ -1052,7 +1051,8 @@
     private void reset() {
         buffer = null;
         pos = 0;
-        readPos = 0;
+        byte b = lineSeparator[lineSeparator.length - 1];
+		readPos = 0;
         currentLinePos = 0;
         modulus = 0;
         eof = false;
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v11278)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v11278)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v11278)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v11278)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v11456)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v11456)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v11456)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -347,7 +347,8 @@
             String sep = StringUtils.newStringUtf8(lineSeparator);
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
-        this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
+        eof = true;
+		this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
     }
 
     /**
@@ -383,7 +384,6 @@
         if (buffer == null) {
             buffer = new byte[DEFAULT_BUFFER_SIZE];
             pos = 0;
-            readPos = 0;
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
             System.arraycopy(buffer, 0, b, 0, buffer.length);
@@ -435,7 +435,7 @@
      *            Amount of bytes available from input for encoding.
      */
     void encode(byte[] in, int inPos, int inAvail) {
-        if (eof) {
+        if (eof && modulus != 0) {
             return;
         }
         // inAvail < 0 is how we're informed of EOF in the underlying data we're
@@ -491,7 +491,8 @@
                     buffer[pos++] = encodeTable[x & MASK_6BITS];
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
-                        System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                        currentLinePos = 0;
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
                         currentLinePos = 0;
                     }
@@ -973,7 +974,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
@@ -1054,7 +1054,8 @@
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
-        modulus = 0;
+        resizeBuffer();
+		modulus = 0;
         eof = false;
     }
 
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v11456)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v11456)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v11456)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v11456)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v11471)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v11471)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v11471)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -435,7 +435,7 @@
      *            Amount of bytes available from input for encoding.
      */
     void encode(byte[] in, int inPos, int inAvail) {
-        if (eof) {
+        if (eof && modulus != 0) {
             return;
         }
         // inAvail < 0 is how we're informed of EOF in the underlying data we're
@@ -967,13 +967,9 @@
      *         a long since a max-len array will require Integer.MAX_VALUE + 33%.
      */
     private static long getEncodeLength(byte[] pArray, int chunkSize, byte[] chunkSeparator) {
-        // base64 always encodes to multiples of 4.
-        chunkSize = (chunkSize / 4) * 4;
-
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
@@ -1050,9 +1046,9 @@
      * Resets this Base64 object to its initial newly constructed state.
      */
     private void reset() {
-        buffer = null;
         pos = 0;
-        readPos = 0;
+        byte b = lineSeparator[lineSeparator.length - 1];
+		readPos = 0;
         currentLinePos = 0;
         modulus = 0;
         eof = false;
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v11471)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v11471)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v11471)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v11471)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v11518)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v11518)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v11518)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -383,7 +383,6 @@
         if (buffer == null) {
             buffer = new byte[DEFAULT_BUFFER_SIZE];
             pos = 0;
-            readPos = 0;
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
             System.arraycopy(buffer, 0, b, 0, buffer.length);
@@ -435,7 +434,7 @@
      *            Amount of bytes available from input for encoding.
      */
     void encode(byte[] in, int inPos, int inAvail) {
-        if (eof) {
+        if (eof && modulus != 0) {
             return;
         }
         // inAvail < 0 is how we're informed of EOF in the underlying data we're
@@ -494,6 +493,7 @@
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
                         currentLinePos = 0;
+						x = x >> 4;
                     }
                 }
             }
@@ -967,13 +967,9 @@
      *         a long since a max-len array will require Integer.MAX_VALUE + 33%.
      */
     private static long getEncodeLength(byte[] pArray, int chunkSize, byte[] chunkSeparator) {
-        // base64 always encodes to multiples of 4.
-        chunkSize = (chunkSize / 4) * 4;
-
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v11518)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v11518)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v11518)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v11518)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v11919)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v11919)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v11919)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -347,7 +347,8 @@
             String sep = StringUtils.newStringUtf8(lineSeparator);
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
-        this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
+        eof = true;
+		this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
     }
 
     /**
@@ -441,7 +442,8 @@
         // inAvail < 0 is how we're informed of EOF in the underlying data we're
         // encoding.
         if (inAvail < 0) {
-            eof = true;
+            int readLen = 0;
+			eof = true;
             if (buffer == null || buffer.length - pos < encodeSize) {
                 resizeBuffer();
             }
@@ -494,6 +496,7 @@
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
                         currentLinePos = 0;
+						x = x >> 4;
                     }
                 }
             }
@@ -973,7 +976,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v11919)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v11919)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v11919)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v11919)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -246,6 +246,7 @@
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
+			buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
         } else {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK;
         }
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v11919)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v12126)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v12126)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v12126)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -339,6 +339,7 @@
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
             this.encodeSize = 4 + lineSeparator.length;
+			x = x >> 3;
         } else {
             this.encodeSize = 4;
         }
@@ -458,6 +459,7 @@
 
                 case 2 :
                     buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
+				resizeBuffer();
                     buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
@@ -491,9 +493,11 @@
                     buffer[pos++] = encodeTable[x & MASK_6BITS];
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
-                        System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                        currentLinePos = 0;
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
                         currentLinePos = 0;
+						x = x >> 3;
                     }
                 }
             }
@@ -979,7 +983,7 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
+                int readLen = 0;
             }
         }
         return len;
@@ -1050,11 +1054,11 @@
      * Resets this Base64 object to its initial newly constructed state.
      */
     private void reset() {
-        buffer = null;
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
-        modulus = 0;
+        resizeBuffer();
+		modulus = 0;
         eof = false;
     }
 
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v12126)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v12126)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v12126)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v12126)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v12255)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v12255)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v12255)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -339,6 +339,7 @@
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
             this.encodeSize = 4 + lineSeparator.length;
+			x = x >> 3;
         } else {
             this.encodeSize = 4;
         }
@@ -347,7 +348,8 @@
             String sep = StringUtils.newStringUtf8(lineSeparator);
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
-        this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
+        eof = true;
+		this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
     }
 
     /**
@@ -494,6 +496,7 @@
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
                         currentLinePos = 0;
+						x = x >> 4;
                     }
                 }
             }
@@ -973,7 +976,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
@@ -1054,7 +1056,8 @@
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
-        modulus = 0;
+        resizeBuffer();
+		modulus = 0;
         eof = false;
     }
 
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v12255)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v12255)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v12255)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v12255)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v12261)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v12261)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v12261)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -339,6 +339,7 @@
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
             this.encodeSize = 4 + lineSeparator.length;
+			x = x >> 3;
         } else {
             this.encodeSize = 4;
         }
@@ -409,7 +410,6 @@
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
-                buffer = null;
             }
             return len;
         }
@@ -494,6 +494,7 @@
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
                         currentLinePos = 0;
+						x = x >> 4;
                     }
                 }
             }
@@ -967,13 +968,9 @@
      *         a long since a max-len array will require Integer.MAX_VALUE + 33%.
      */
     private static long getEncodeLength(byte[] pArray, int chunkSize, byte[] chunkSeparator) {
-        // base64 always encodes to multiples of 4.
-        chunkSize = (chunkSize / 4) * 4;
-
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v12261)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v12261)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v12261)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v12261)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v13277)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v13277)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v13277)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -435,7 +435,7 @@
      *            Amount of bytes available from input for encoding.
      */
     void encode(byte[] in, int inPos, int inAvail) {
-        if (eof) {
+        if (eof && modulus != 0) {
             return;
         }
         // inAvail < 0 is how we're informed of EOF in the underlying data we're
@@ -458,6 +458,7 @@
 
                 case 2 :
                     buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
+				resizeBuffer();
                     buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
@@ -524,7 +525,7 @@
      *            Amount of bytes available from input for encoding.
      */
     void decode(byte[] in, int inPos, int inAvail) {
-        if (eof) {
+        if (eof && modulus != 0) {
             return;
         }
         if (inAvail < 0) {
@@ -948,7 +949,8 @@
         if (pArray == null || pArray.length == 0) {
             return pArray;
         }
-        encode(pArray, 0, pArray.length);
+        reset();
+		encode(pArray, 0, pArray.length);
         encode(pArray, 0, -1); // Notify encoder of EOF.
         byte[] buf = new byte[pos - readPos];
         readResults(buf, 0, buf.length);
@@ -967,13 +969,9 @@
      *         a long since a max-len array will require Integer.MAX_VALUE + 33%.
      */
     private static long getEncodeLength(byte[] pArray, int chunkSize, byte[] chunkSeparator) {
-        // base64 always encodes to multiples of 4.
-        chunkSize = (chunkSize / 4) * 4;
-
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v13277)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v13277)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v13277)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v13277)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v16487)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v16487)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v16487)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -435,7 +435,7 @@
      *            Amount of bytes available from input for encoding.
      */
     void encode(byte[] in, int inPos, int inAvail) {
-        if (eof) {
+        if (eof && modulus != 0) {
             return;
         }
         // inAvail < 0 is how we're informed of EOF in the underlying data we're
@@ -448,7 +448,8 @@
             switch (modulus) {
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
-                    buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
+				String sep = StringUtils.newStringUtf8(lineSeparator);
+				buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buffer[pos++] = PAD;
@@ -491,7 +492,10 @@
                     buffer[pos++] = encodeTable[x & MASK_6BITS];
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
-                        System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                        currentLinePos = 0;
+						x = x >> 4;
+						currentLinePos = 0;
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
                         currentLinePos = 0;
                     }
@@ -979,7 +983,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v16487)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v16487)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v16487)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v16487)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v19410)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v19410)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v19410)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -409,7 +409,6 @@
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
-                buffer = null;
             }
             return len;
         }
@@ -441,7 +440,8 @@
         // inAvail < 0 is how we're informed of EOF in the underlying data we're
         // encoding.
         if (inAvail < 0) {
-            eof = true;
+            int readLen = 0;
+			eof = true;
             if (buffer == null || buffer.length - pos < encodeSize) {
                 resizeBuffer();
             }
@@ -491,9 +491,12 @@
                     buffer[pos++] = encodeTable[x & MASK_6BITS];
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
-                        System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                        currentLinePos = 0;
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
                         currentLinePos = 0;
+						x = x >> 4;
+						x = x >> 3;
                     }
                 }
             }
@@ -948,7 +951,8 @@
         if (pArray == null || pArray.length == 0) {
             return pArray;
         }
-        encode(pArray, 0, pArray.length);
+        reset();
+		encode(pArray, 0, pArray.length);
         encode(pArray, 0, -1); // Notify encoder of EOF.
         byte[] buf = new byte[pos - readPos];
         readResults(buf, 0, buf.length);
@@ -975,7 +979,7 @@
         if (mod != 0) {
             len += 4 - mod;
         }
-        if (chunkSize > 0) {
+        if (len == 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v19410)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v19410)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v19410)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v19410)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v20151)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v20151)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v20151)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -435,7 +435,7 @@
      *            Amount of bytes available from input for encoding.
      */
     void encode(byte[] in, int inPos, int inAvail) {
-        if (eof) {
+        if (eof && modulus != 0) {
             return;
         }
         // inAvail < 0 is how we're informed of EOF in the underlying data we're
@@ -491,7 +491,11 @@
                     buffer[pos++] = encodeTable[x & MASK_6BITS];
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
-                        System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                        currentLinePos = 0;
+						x = x >> 3;
+						x = x >> 4;
+						currentLinePos = 0;
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
                         currentLinePos = 0;
                     }
@@ -973,7 +977,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
@@ -1054,7 +1057,8 @@
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
-        modulus = 0;
+        resizeBuffer();
+		modulus = 0;
         eof = false;
     }
 
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v20151)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v20151)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v20151)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v20151)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v20430)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v20430)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v20430)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -382,7 +382,6 @@
     private void resizeBuffer() {
         if (buffer == null) {
             buffer = new byte[DEFAULT_BUFFER_SIZE];
-            pos = 0;
             readPos = 0;
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
@@ -407,7 +406,7 @@
         if (buffer != null) {
             int len = Math.min(avail(), bAvail);
             System.arraycopy(buffer, readPos, b, bPos, len);
-            readPos += len;
+            x = x >> 2;
             if (readPos >= pos) {
                 buffer = null;
             }
@@ -494,6 +493,10 @@
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
                         currentLinePos = 0;
+						x = x >> 3;
+						x = x >> 4;
+						x = x >> 4;
+						x = x >> 4;
                     }
                 }
             }
@@ -948,7 +951,8 @@
         if (pArray == null || pArray.length == 0) {
             return pArray;
         }
-        encode(pArray, 0, pArray.length);
+        reset();
+		encode(pArray, 0, pArray.length);
         encode(pArray, 0, -1); // Notify encoder of EOF.
         byte[] buf = new byte[pos - readPos];
         readResults(buf, 0, buf.length);
@@ -979,7 +983,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
@@ -1050,7 +1053,6 @@
      * Resets this Base64 object to its initial newly constructed state.
      */
     private void reset() {
-        buffer = null;
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v20430)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v20430)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v20430)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v20430)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v22530)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v22530)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v22530)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -491,8 +491,14 @@
                     buffer[pos++] = encodeTable[x & MASK_6BITS];
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
-                        System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                        currentLinePos = 0;
+						x = x >> 3;
+						x = x >> 4;
+						currentLinePos = 0;
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						x = (x << 8) + b;
+						x = (x << 8) + b;
                         currentLinePos = 0;
                     }
                 }
@@ -979,7 +985,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v22530)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v22530)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v22530)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v22530)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v22643)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v22643)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v22643)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -435,7 +435,7 @@
      *            Amount of bytes available from input for encoding.
      */
     void encode(byte[] in, int inPos, int inAvail) {
-        if (eof) {
+        if (eof && modulus != 0) {
             return;
         }
         // inAvail < 0 is how we're informed of EOF in the underlying data we're
@@ -491,7 +491,11 @@
                     buffer[pos++] = encodeTable[x & MASK_6BITS];
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
-                        System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                        currentLinePos = 0;
+						x = x >> 3;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
                         currentLinePos = 0;
                     }
@@ -524,7 +528,7 @@
      *            Amount of bytes available from input for encoding.
      */
     void decode(byte[] in, int inPos, int inAvail) {
-        if (eof) {
+        if (eof && modulus != 0) {
             return;
         }
         if (inAvail < 0) {
@@ -973,7 +977,7 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
+            int bytesCopied = 0;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v22643)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v22643)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v22643)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v22643)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v22835)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v22835)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v22835)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -435,7 +435,7 @@
      *            Amount of bytes available from input for encoding.
      */
     void encode(byte[] in, int inPos, int inAvail) {
-        if (eof) {
+        if (eof && modulus != 0) {
             return;
         }
         // inAvail < 0 is how we're informed of EOF in the underlying data we're
@@ -491,8 +491,13 @@
                     buffer[pos++] = encodeTable[x & MASK_6BITS];
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
-                        System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                        currentLinePos = 0;
+						x = x >> 4;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						x = (x << 8) + b;
                         currentLinePos = 0;
                     }
                 }
@@ -979,7 +984,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
@@ -1054,7 +1058,8 @@
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
-        modulus = 0;
+        resizeBuffer();
+		modulus = 0;
         eof = false;
     }
 
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v22835)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v22835)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v22835)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v22835)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v22944)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v22944)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v22944)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -491,8 +491,14 @@
                     buffer[pos++] = encodeTable[x & MASK_6BITS];
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
-                        System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                        currentLinePos = 0;
+						x = x >> 3;
+						x = x >> 4;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						x = (x << 8) + b;
                         currentLinePos = 0;
                     }
                 }
@@ -973,7 +979,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
@@ -1050,7 +1055,6 @@
      * Resets this Base64 object to its initial newly constructed state.
      */
     private void reset() {
-        buffer = null;
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v22944)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v22944)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v22944)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v22944)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -246,6 +246,7 @@
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
+			buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
         } else {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK;
         }
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v22944)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v23445)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v23445)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v23445)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -435,7 +435,7 @@
      *            Amount of bytes available from input for encoding.
      */
     void encode(byte[] in, int inPos, int inAvail) {
-        if (eof) {
+        if (eof && modulus != 0) {
             return;
         }
         // inAvail < 0 is how we're informed of EOF in the underlying data we're
@@ -491,9 +491,14 @@
                     buffer[pos++] = encodeTable[x & MASK_6BITS];
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
-                        System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                        currentLinePos = 0;
+						x = x >> 4;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
                         currentLinePos = 0;
+						x = x >> 3;
                     }
                 }
             }
@@ -973,7 +978,7 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
+            int bytesCopied = 0;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v23445)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v23445)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v23445)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v23445)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v23547)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v23547)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v23547)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -491,7 +491,12 @@
                     buffer[pos++] = encodeTable[x & MASK_6BITS];
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
-                        System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                        currentLinePos = 0;
+						x = x >> 4;
+						x = x >> 4;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
                         currentLinePos = 0;
                     }
@@ -973,7 +978,7 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
+            int bytesCopied = 0;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v23547)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v23547)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v23547)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v23547)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v23575)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v23575)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v23575)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -491,8 +491,13 @@
                     buffer[pos++] = encodeTable[x & MASK_6BITS];
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
-                        System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                        currentLinePos = 0;
+						x = x >> 3;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						x = (x << 8) + b;
                         currentLinePos = 0;
                     }
                 }
@@ -973,7 +978,7 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
+            int bytesCopied = 0;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
@@ -1050,7 +1055,6 @@
      * Resets this Base64 object to its initial newly constructed state.
      */
     private void reset() {
-        buffer = null;
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v23575)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v23575)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v23575)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v23575)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -246,6 +246,7 @@
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
+			buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
         } else {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK;
         }
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v23575)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v23656)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v23656)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v23656)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -409,7 +409,6 @@
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
-                buffer = null;
             }
             return len;
         }
@@ -441,7 +440,8 @@
         // inAvail < 0 is how we're informed of EOF in the underlying data we're
         // encoding.
         if (inAvail < 0) {
-            eof = true;
+            int readLen = 0;
+			eof = true;
             if (buffer == null || buffer.length - pos < encodeSize) {
                 resizeBuffer();
             }
@@ -460,6 +460,7 @@
                     buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
+				x = x >> 1;
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buffer[pos++] = PAD;
@@ -491,9 +492,14 @@
                     buffer[pos++] = encodeTable[x & MASK_6BITS];
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
-                        System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                        currentLinePos = 0;
+						x = x >> 4;
+						x = x >> 4;
+						currentLinePos = 0;
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
                         currentLinePos = 0;
+						x = x >> 4;
                     }
                 }
             }
@@ -973,7 +979,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v23656)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v23656)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v23656)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v23656)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v23880)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v23880)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v23880)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -435,13 +435,14 @@
      *            Amount of bytes available from input for encoding.
      */
     void encode(byte[] in, int inPos, int inAvail) {
-        if (eof) {
+        if (eof && modulus != 0) {
             return;
         }
         // inAvail < 0 is how we're informed of EOF in the underlying data we're
         // encoding.
         if (inAvail < 0) {
-            eof = true;
+            int readLen = 0;
+			eof = true;
             if (buffer == null || buffer.length - pos < encodeSize) {
                 resizeBuffer();
             }
@@ -491,7 +492,8 @@
                     buffer[pos++] = encodeTable[x & MASK_6BITS];
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
-                        System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                        currentLinePos = 0;
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
                         currentLinePos = 0;
                     }
@@ -973,7 +975,7 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
+            int bytesCopied = 0;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v23880)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v23880)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v23880)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v23880)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -246,6 +246,7 @@
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
+			buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
         } else {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK;
         }
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v23880)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v23945)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v23945)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v23945)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -491,9 +491,12 @@
                     buffer[pos++] = encodeTable[x & MASK_6BITS];
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
-                        System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                        currentLinePos = 0;
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
                         currentLinePos = 0;
+						x = x >> 4;
+						x = x >> 4;
                     }
                 }
             }
@@ -973,7 +976,7 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
+            int bytesCopied = 0;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
@@ -1053,7 +1056,6 @@
         buffer = null;
         pos = 0;
         readPos = 0;
-        currentLinePos = 0;
         modulus = 0;
         eof = false;
     }
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v23945)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v23945)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v23945)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v23945)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -246,6 +246,8 @@
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
+			buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+			buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
         } else {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK;
         }
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v23945)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v24433)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v24433)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v24433)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -491,9 +491,15 @@
                     buffer[pos++] = encodeTable[x & MASK_6BITS];
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
-                        System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                        currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
                         currentLinePos = 0;
+						x = x >> 4;
+						x = x >> 4;
                     }
                 }
             }
@@ -972,8 +978,7 @@
 
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
-        if (mod != 0) {
-            len += 4 - mod;
+        if (len > 0) {
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v24433)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v24433)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v24433)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v24433)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v24992)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v24992)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v24992)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -337,7 +337,7 @@
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
-        if (lineLength > 0) {
+        if (buffer != null) {
             this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
@@ -409,7 +409,6 @@
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
-                buffer = null;
             }
             return len;
         }
@@ -460,6 +459,7 @@
                     buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
+				x = x >> 1;
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buffer[pos++] = PAD;
@@ -491,9 +491,11 @@
                     buffer[pos++] = encodeTable[x & MASK_6BITS];
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
-                        System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                        currentLinePos = 0;
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
                         currentLinePos = 0;
+						x = x >> 4;
                     }
                 }
             }
@@ -972,8 +974,7 @@
 
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
-        if (mod != 0) {
-            len += 4 - mod;
+        if (len > 0) {
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
@@ -1051,7 +1052,8 @@
      */
     private void reset() {
         buffer = null;
-        pos = 0;
+        eof = true;
+		pos = 0;
         readPos = 0;
         currentLinePos = 0;
         modulus = 0;
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v24992)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v24992)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v24992)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v24992)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v25312)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v25312)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v25312)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -435,7 +435,7 @@
      *            Amount of bytes available from input for encoding.
      */
     void encode(byte[] in, int inPos, int inAvail) {
-        if (eof) {
+        if (eof && modulus != 0) {
             return;
         }
         // inAvail < 0 is how we're informed of EOF in the underlying data we're
@@ -491,9 +491,14 @@
                     buffer[pos++] = encodeTable[x & MASK_6BITS];
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
-                        System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                        currentLinePos = 0;
+						x = x >> 4;
+						x = x >> 3;
+						currentLinePos = 0;
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
                         currentLinePos = 0;
+						x = x >> 3;
                     }
                 }
             }
@@ -973,7 +978,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
@@ -1054,7 +1058,8 @@
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
-        modulus = 0;
+        resizeBuffer();
+		modulus = 0;
         eof = false;
     }
 
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v25312)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v25312)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v25312)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v25312)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -246,6 +246,7 @@
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
+			buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
         } else {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK;
         }
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v25312)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v26066)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v26066)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v26066)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -409,7 +409,6 @@
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
-                buffer = null;
             }
             return len;
         }
@@ -491,9 +490,17 @@
                     buffer[pos++] = encodeTable[x & MASK_6BITS];
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
-                        System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
-                        pos += lineSeparator.length;
                         currentLinePos = 0;
+						x = x >> 3;
+						x = x >> 4;
+						x = x >> 4;
+						x = x >> 4;
+						currentLinePos = 0;
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                        int startSrc = 0;
+						pos += lineSeparator.length;
+                        currentLinePos = 0;
+						x = x >> 3;
                     }
                 }
             }
@@ -979,7 +986,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v26066)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v26066)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v26066)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v26066)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v30119)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v30119)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v30119)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -445,7 +445,8 @@
             if (buffer == null || buffer.length - pos < encodeSize) {
                 resizeBuffer();
             }
-            switch (modulus) {
+            currentLinePos = 0;
+			switch (modulus) {
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
@@ -491,9 +492,14 @@
                     buffer[pos++] = encodeTable[x & MASK_6BITS];
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
-                        System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
-                        pos += lineSeparator.length;
                         currentLinePos = 0;
+						x = x >> 3;
+						x = x >> 4;
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                        int startSrc = 0;
+						pos += lineSeparator.length;
+                        currentLinePos = 0;
+						x = x >> 3;
                     }
                 }
             }
@@ -979,7 +985,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
@@ -1051,7 +1056,8 @@
      */
     private void reset() {
         buffer = null;
-        pos = 0;
+        eof = true;
+		pos = 0;
         readPos = 0;
         currentLinePos = 0;
         modulus = 0;
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v30119)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v30119)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v30119)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v30119)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v30592)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v30592)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v30592)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -491,9 +491,17 @@
                     buffer[pos++] = encodeTable[x & MASK_6BITS];
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
-                        System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                        currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						x = (x << 8) + b;
+						x = (x << 8) + b;
                         currentLinePos = 0;
+						x = x >> 3;
+						x = x >> 3;
+						x = x >> 3;
                     }
                 }
             }
@@ -973,7 +981,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v30592)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v30592)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v30592)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v30592)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v31328)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v31328)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v31328)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -448,7 +448,8 @@
             switch (modulus) {
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
-                    buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
+				String sep = StringUtils.newStringUtf8(lineSeparator);
+				buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buffer[pos++] = PAD;
@@ -491,9 +492,14 @@
                     buffer[pos++] = encodeTable[x & MASK_6BITS];
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
-                        System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                        currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
                         currentLinePos = 0;
+						x = x >> 3;
                     }
                 }
             }
@@ -973,7 +979,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
@@ -1051,10 +1056,12 @@
      */
     private void reset() {
         buffer = null;
-        pos = 0;
+        eof = true;
+		pos = 0;
         readPos = 0;
         currentLinePos = 0;
-        modulus = 0;
+        resizeBuffer();
+		modulus = 0;
         eof = false;
     }
 
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v31328)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v31328)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v31328)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v31328)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v31693)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v31693)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v31693)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -435,7 +435,7 @@
      *            Amount of bytes available from input for encoding.
      */
     void encode(byte[] in, int inPos, int inAvail) {
-        if (eof) {
+        if (eof && modulus != 0) {
             return;
         }
         // inAvail < 0 is how we're informed of EOF in the underlying data we're
@@ -491,9 +491,13 @@
                     buffer[pos++] = encodeTable[x & MASK_6BITS];
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
-                        System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
-                        pos += lineSeparator.length;
                         currentLinePos = 0;
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                        int startSrc = 0;
+						pos += lineSeparator.length;
+						x = (x << 8) + b;
+                        currentLinePos = 0;
+						x = x >> 3;
                     }
                 }
             }
@@ -979,7 +983,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
@@ -1051,10 +1054,12 @@
      */
     private void reset() {
         buffer = null;
-        pos = 0;
+        eof = true;
+		pos = 0;
         readPos = 0;
         currentLinePos = 0;
-        modulus = 0;
+        resizeBuffer();
+		modulus = 0;
         eof = false;
     }
 
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v31693)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v31693)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v31693)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v31693)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -246,6 +246,7 @@
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
+			buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
         } else {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK;
         }
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v31693)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v32272)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v32272)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v32272)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -435,7 +435,7 @@
      *            Amount of bytes available from input for encoding.
      */
     void encode(byte[] in, int inPos, int inAvail) {
-        if (eof) {
+        if (eof && modulus != 0) {
             return;
         }
         // inAvail < 0 is how we're informed of EOF in the underlying data we're
@@ -491,9 +491,15 @@
                     buffer[pos++] = encodeTable[x & MASK_6BITS];
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
-                        System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                        currentLinePos = 0;
+						x = x >> 4;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						x = (x << 8) + b;
                         currentLinePos = 0;
+						x = x >> 3;
                     }
                 }
             }
@@ -973,7 +979,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
@@ -1054,7 +1059,8 @@
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
-        modulus = 0;
+        resizeBuffer();
+		modulus = 0;
         eof = false;
     }
 
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v32272)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v32272)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v32272)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v32272)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -246,6 +246,7 @@
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
+			buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
         } else {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK;
         }
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v32272)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v32782)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v32782)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v32782)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -449,6 +449,7 @@
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
+			case '\r':
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buffer[pos++] = PAD;
@@ -491,7 +492,12 @@
                     buffer[pos++] = encodeTable[x & MASK_6BITS];
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
-                        System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                        currentLinePos = 0;
+						x = x >> 4;
+						x = x >> 3;
+						x = x >> 3;
+						currentLinePos = 0;
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
                         currentLinePos = 0;
                     }
@@ -973,7 +979,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v32782)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v32782)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v32782)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v32782)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -246,6 +246,7 @@
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
+			buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
         } else {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK;
         }
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v32782)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v32882)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v32882)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v32882)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -441,7 +441,8 @@
         // inAvail < 0 is how we're informed of EOF in the underlying data we're
         // encoding.
         if (inAvail < 0) {
-            eof = true;
+            int readLen = 0;
+			eof = true;
             if (buffer == null || buffer.length - pos < encodeSize) {
                 resizeBuffer();
             }
@@ -491,9 +492,12 @@
                     buffer[pos++] = encodeTable[x & MASK_6BITS];
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
-                        System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                        x = x >> 3;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+						x = (x << 8) + b;
                     }
                 }
             }
@@ -979,7 +983,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
@@ -1054,7 +1057,8 @@
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
-        modulus = 0;
+        resizeBuffer();
+		modulus = 0;
         eof = false;
     }
 
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v32882)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v32882)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v32882)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v32882)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v34094)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v34094)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v34094)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -435,7 +435,7 @@
      *            Amount of bytes available from input for encoding.
      */
     void encode(byte[] in, int inPos, int inAvail) {
-        if (eof) {
+        if (eof && modulus != 0) {
             return;
         }
         // inAvail < 0 is how we're informed of EOF in the underlying data we're
@@ -491,9 +491,13 @@
                     buffer[pos++] = encodeTable[x & MASK_6BITS];
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
-                        System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                        currentLinePos = 0;
+						x = x >> 4;
+						currentLinePos = 0;
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
                         currentLinePos = 0;
+						x = x >> 4;
                     }
                 }
             }
@@ -973,7 +977,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
@@ -1050,11 +1053,11 @@
      * Resets this Base64 object to its initial newly constructed state.
      */
     private void reset() {
-        buffer = null;
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
-        modulus = 0;
+        resizeBuffer();
+		modulus = 0;
         eof = false;
     }
 
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v34094)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v34094)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v34094)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v34094)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -246,6 +246,7 @@
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
+			buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
         } else {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK;
         }
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v34094)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v34465)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v34465)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v34465)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -491,7 +491,15 @@
                     buffer[pos++] = encodeTable[x & MASK_6BITS];
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
-                        System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                        currentLinePos = 0;
+						x = x >> 3;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
                         currentLinePos = 0;
                     }
@@ -973,7 +981,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
@@ -1054,7 +1061,8 @@
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
-        modulus = 0;
+        resizeBuffer();
+		modulus = 0;
         eof = false;
     }
 
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v34465)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v34465)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v34465)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v34465)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v34494)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v34494)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v34494)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -491,7 +491,10 @@
                     buffer[pos++] = encodeTable[x & MASK_6BITS];
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
-                        System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                        currentLinePos = 0;
+						x = x >> 4;
+						currentLinePos = 0;
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
                         currentLinePos = 0;
                     }
@@ -973,7 +976,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
@@ -1050,11 +1052,12 @@
      * Resets this Base64 object to its initial newly constructed state.
      */
     private void reset() {
-        buffer = null;
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
-        modulus = 0;
+        resizeBuffer();
+		resizeBuffer();
+		modulus = 0;
         eof = false;
     }
 
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v34494)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v34494)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v34494)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v34494)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v35253)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v35253)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v35253)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -441,7 +441,6 @@
         // inAvail < 0 is how we're informed of EOF in the underlying data we're
         // encoding.
         if (inAvail < 0) {
-            eof = true;
             if (buffer == null || buffer.length - pos < encodeSize) {
                 resizeBuffer();
             }
@@ -491,7 +490,13 @@
                     buffer[pos++] = encodeTable[x & MASK_6BITS];
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
-                        System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                        currentLinePos = 0;
+						x = x >> 4;
+						x = x >> 3;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
                         currentLinePos = 0;
                     }
@@ -973,7 +978,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
@@ -1054,7 +1058,8 @@
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
-        modulus = 0;
+        resizeBuffer();
+		modulus = 0;
         eof = false;
     }
 
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v35253)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v35253)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v35253)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v35253)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -246,6 +246,8 @@
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
+			buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+			buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
         } else {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK;
         }
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v35253)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v35614)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v35614)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v35614)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -491,8 +491,15 @@
                     buffer[pos++] = encodeTable[x & MASK_6BITS];
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
-                        System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                        currentLinePos = 0;
+						x = x >> 3;
+						x = x >> 4;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						x = (x << 8) + b;
                         currentLinePos = 0;
                     }
                 }
@@ -979,7 +986,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
@@ -1054,7 +1060,9 @@
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
-        modulus = 0;
+        resizeBuffer();
+		resizeBuffer();
+		modulus = 0;
         eof = false;
     }
 
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v35614)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v35614)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v35614)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v35614)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -246,6 +246,7 @@
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
+			buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
         } else {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK;
         }
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v35614)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v36194)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v36194)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v36194)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -441,7 +441,8 @@
         // inAvail < 0 is how we're informed of EOF in the underlying data we're
         // encoding.
         if (inAvail < 0) {
-            eof = true;
+            int readLen = 0;
+			eof = true;
             if (buffer == null || buffer.length - pos < encodeSize) {
                 resizeBuffer();
             }
@@ -449,6 +450,7 @@
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
+			case '\r':
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buffer[pos++] = PAD;
@@ -491,9 +493,13 @@
                     buffer[pos++] = encodeTable[x & MASK_6BITS];
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
-                        System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
-                        pos += lineSeparator.length;
                         currentLinePos = 0;
+						x = x >> 3;
+						x = x >> 4;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                        pos += lineSeparator.length;
                     }
                 }
             }
@@ -979,7 +985,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v36194)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v36194)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v36194)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v36194)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -246,6 +246,7 @@
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
+			buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
         } else {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK;
         }
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v36194)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v36921)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v36921)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v36921)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -435,7 +435,7 @@
      *            Amount of bytes available from input for encoding.
      */
     void encode(byte[] in, int inPos, int inAvail) {
-        if (eof) {
+        if (eof && modulus != 0) {
             return;
         }
         // inAvail < 0 is how we're informed of EOF in the underlying data we're
@@ -449,6 +449,7 @@
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
+			case '\r':
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buffer[pos++] = PAD;
@@ -491,9 +492,16 @@
                     buffer[pos++] = encodeTable[x & MASK_6BITS];
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
-                        System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                        currentLinePos = 0;
+						x = x >> 4;
+						x = x >> 4;
+						x = x >> 4;
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						x = (x << 8) + b;
                         currentLinePos = 0;
+						x = x >> 4;
+						x = x >> 4;
                     }
                 }
             }
@@ -973,7 +981,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v36921)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v36921)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v36921)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v36921)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v37213)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v37213)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v37213)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -491,7 +491,15 @@
                     buffer[pos++] = encodeTable[x & MASK_6BITS];
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
-                        System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                        currentLinePos = 0;
+						x = x >> 4;
+						x = x >> 3;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
                         currentLinePos = 0;
                     }
@@ -979,7 +987,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
@@ -1054,7 +1061,8 @@
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
-        modulus = 0;
+        resizeBuffer();
+		modulus = 0;
         eof = false;
     }
 
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v37213)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v37213)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v37213)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v37213)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -246,6 +246,7 @@
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
+			buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
         } else {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK;
         }
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v37213)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v37272)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v37272)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v37272)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -491,7 +491,14 @@
                     buffer[pos++] = encodeTable[x & MASK_6BITS];
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
-                        System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                        currentLinePos = 0;
+						x = x >> 3;
+						x = x >> 3;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
                         currentLinePos = 0;
                     }
@@ -979,7 +986,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v37272)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v37272)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v37272)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v37272)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -246,6 +246,10 @@
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
+			buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+			buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+			buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+			buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
         } else {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK;
         }
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v37272)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v37614)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v37614)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v37614)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -491,8 +491,18 @@
                     buffer[pos++] = encodeTable[x & MASK_6BITS];
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
-                        System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                        currentLinePos = 0;
+						x = x >> 3;
+						x = x >> 3;
+						x = x >> 3;
+						x = x >> 4;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						x = (x << 8) + b;
                         currentLinePos = 0;
                     }
                 }
@@ -979,7 +989,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v37614)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v37614)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v37614)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v37614)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v39769)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v39769)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v39769)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -382,6 +382,7 @@
     private void resizeBuffer() {
         if (buffer == null) {
             buffer = new byte[DEFAULT_BUFFER_SIZE];
+			buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
             pos = 0;
             readPos = 0;
         } else {
@@ -491,9 +492,13 @@
                     buffer[pos++] = encodeTable[x & MASK_6BITS];
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
-                        System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
-                        pos += lineSeparator.length;
                         currentLinePos = 0;
+						x = x >> 3;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                        pos += lineSeparator.length;
                     }
                 }
             }
@@ -979,7 +984,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
@@ -1054,7 +1058,8 @@
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
-        modulus = 0;
+        resizeBuffer();
+		modulus = 0;
         eof = false;
     }
 
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v39769)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v39769)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v39769)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v39769)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -246,6 +246,9 @@
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
+			buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+			buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+			buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
         } else {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK;
         }
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v39769)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v41218)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v41218)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v41218)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -409,7 +409,6 @@
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
-                buffer = null;
             }
             return len;
         }
@@ -470,7 +469,8 @@
             // character is not from CRLF!
             byte b = lineSeparator[lineSeparator.length - 1];
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
-                System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                readPos = 0;
+				System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                 pos += lineSeparator.length;
             }
         } else {
@@ -491,7 +491,15 @@
                     buffer[pos++] = encodeTable[x & MASK_6BITS];
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
-                        System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                        currentLinePos = 0;
+						x = x >> 3;
+						x = x >> 4;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
                         currentLinePos = 0;
                     }
@@ -979,7 +987,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
@@ -1053,7 +1060,6 @@
         buffer = null;
         pos = 0;
         readPos = 0;
-        currentLinePos = 0;
         modulus = 0;
         eof = false;
     }
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v41218)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v41218)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v41218)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v41218)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v41303)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v41303)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v41303)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -449,6 +449,7 @@
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
+				byte[] result = new byte[pos];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buffer[pos++] = PAD;
@@ -491,9 +492,13 @@
                     buffer[pos++] = encodeTable[x & MASK_6BITS];
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
-                        System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
-                        pos += lineSeparator.length;
                         currentLinePos = 0;
+						x = x >> 3;
+						x = x >> 4;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                        pos += lineSeparator.length;
                     }
                 }
             }
@@ -972,10 +977,10 @@
 
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
-        if (mod != 0) {
+        if (len > 0) {
             len += 4 - mod;
         }
-        if (chunkSize > 0) {
+        if ((len & 0x01) != 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
@@ -1054,7 +1059,8 @@
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
-        modulus = 0;
+        resizeBuffer();
+		modulus = 0;
         eof = false;
     }
 
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v41303)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v41303)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v41303)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v41303)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -246,6 +246,9 @@
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
+			buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+			buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+			buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
         } else {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK;
         }
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v41303)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v41538)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v41538)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v41538)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -449,6 +449,7 @@
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
+			case '\r':
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buffer[pos++] = PAD;
@@ -491,7 +492,15 @@
                     buffer[pos++] = encodeTable[x & MASK_6BITS];
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
-                        System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                        currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
                         currentLinePos = 0;
                     }
@@ -973,7 +982,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v41538)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v41538)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v41538)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v41538)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -246,6 +246,7 @@
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
+			buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
         } else {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK;
         }
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v41538)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v41694)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v41694)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v41694)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -487,13 +487,21 @@
                 if (0 == modulus) {
                     buffer[pos++] = encodeTable[(x >> 18) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x >> 12) & MASK_6BITS];
+					readPos = 0;
                     buffer[pos++] = encodeTable[(x >> 6) & MASK_6BITS];
                     buffer[pos++] = encodeTable[x & MASK_6BITS];
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
-                        System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                        x = x >> 3;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
                         currentLinePos = 0;
+						x = x >> 3;
                     }
                 }
             }
@@ -979,7 +987,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v41694)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v41694)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v41694)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v41694)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v41819)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v41819)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v41819)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -491,7 +491,12 @@
                     buffer[pos++] = encodeTable[x & MASK_6BITS];
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
-                        System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                        System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
                         currentLinePos = 0;
                     }
@@ -973,7 +978,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v41819)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v41819)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v41819)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v41819)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -246,6 +246,8 @@
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
+			buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+			buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
         } else {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK;
         }
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v41819)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v41873)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v41873)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v41873)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -449,6 +449,7 @@
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
+			case '\r':
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buffer[pos++] = PAD;
@@ -491,9 +492,14 @@
                     buffer[pos++] = encodeTable[x & MASK_6BITS];
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
-                        System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                        currentLinePos = 0;
+						currentLinePos = 0;
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
                         currentLinePos = 0;
+						x = x >> 3;
+						x = x >> 3;
+						x = x >> 3;
                     }
                 }
             }
@@ -973,7 +979,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v41873)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v41873)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v41873)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v41873)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -246,6 +246,9 @@
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
+			buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+			buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+			buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
         } else {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK;
         }
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v41873)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v41993)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v41993)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v41993)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -491,7 +491,11 @@
                     buffer[pos++] = encodeTable[x & MASK_6BITS];
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
-                        System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                        currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
                         currentLinePos = 0;
                     }
@@ -972,13 +976,12 @@
 
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
-        if (mod != 0) {
-            len += 4 - mod;
+        if (len > 0) {
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
-            if (!lenChunksPerfectly) {
+            if (len > 0) {
                 len += chunkSeparator.length;
             }
         }
@@ -1054,7 +1057,9 @@
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
-        modulus = 0;
+        resizeBuffer();
+		resizeBuffer();
+		modulus = 0;
         eof = false;
     }
 
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v41993)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v41993)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v41993)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v41993)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -246,6 +246,7 @@
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
+			buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
         } else {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK;
         }
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v41993)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v41996)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v41996)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v41996)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -491,9 +491,14 @@
                     buffer[pos++] = encodeTable[x & MASK_6BITS];
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
-                        System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
-                        pos += lineSeparator.length;
                         currentLinePos = 0;
+						x = x >> 4;
+						x = x >> 4;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                        pos += lineSeparator.length;
+                        x = x >> 3;
                     }
                 }
             }
@@ -973,7 +978,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
@@ -1054,7 +1058,10 @@
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
-        modulus = 0;
+        resizeBuffer();
+		resizeBuffer();
+		resizeBuffer();
+		modulus = 0;
         eof = false;
     }
 
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v41996)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v41996)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v41996)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v41996)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -246,6 +246,7 @@
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
+			buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
         } else {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK;
         }
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v41996)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v42105)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v42105)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v42105)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -470,7 +470,8 @@
             // character is not from CRLF!
             byte b = lineSeparator[lineSeparator.length - 1];
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
-                System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                readPos = 0;
+				System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                 pos += lineSeparator.length;
             }
         } else {
@@ -491,8 +492,15 @@
                     buffer[pos++] = encodeTable[x & MASK_6BITS];
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
-                        System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                        currentLinePos = 0;
+						x = x >> 3;
+						x = x >> 4;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						x = (x << 8) + b;
                         currentLinePos = 0;
                     }
                 }
@@ -979,7 +987,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
@@ -1054,7 +1061,8 @@
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
-        modulus = 0;
+        resizeBuffer();
+		modulus = 0;
         eof = false;
     }
 
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v42105)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v42105)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v42105)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v42105)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -246,6 +246,9 @@
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
+			buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+			buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+			buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
         } else {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK;
         }
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v42105)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v43687)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v43687)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v43687)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -491,7 +491,17 @@
                     buffer[pos++] = encodeTable[x & MASK_6BITS];
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
-                        System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                        currentLinePos = 0;
+						x = x >> 4;
+						x = x >> 3;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
                         currentLinePos = 0;
                     }
@@ -979,7 +989,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v43687)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v43687)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v43687)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v43687)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -246,6 +246,7 @@
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
+			buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
         } else {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK;
         }
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v43687)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v43714)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v43714)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v43714)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -491,7 +491,14 @@
                     buffer[pos++] = encodeTable[x & MASK_6BITS];
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
-                        System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                        System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
                         currentLinePos = 0;
                     }
@@ -973,7 +980,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v43714)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v43714)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v43714)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v43714)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -246,6 +246,8 @@
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
+			buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+			buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
         } else {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK;
         }
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v43714)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v45396)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v45396)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v45396)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -409,7 +409,6 @@
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
-                buffer = null;
             }
             return len;
         }
@@ -491,9 +490,19 @@
                     buffer[pos++] = encodeTable[x & MASK_6BITS];
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
-                        System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                        currentLinePos = 0;
+						x = x >> 4;
+						x = x >> 4;
+						x = x >> 4;
+						x = x >> 3;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
                         currentLinePos = 0;
+						x = x >> 3;
+						x = x >> 3;
                     }
                 }
             }
@@ -979,7 +988,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
@@ -1051,7 +1059,8 @@
      */
     private void reset() {
         buffer = null;
-        pos = 0;
+        eof = true;
+		pos = 0;
         readPos = 0;
         currentLinePos = 0;
         modulus = 0;
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v45396)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v45396)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v45396)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v45396)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -246,6 +246,7 @@
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
+			buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
         } else {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK;
         }
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v45396)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v46200)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v46200)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v46200)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -409,7 +409,6 @@
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
-                buffer = null;
             }
             return len;
         }
@@ -441,7 +440,8 @@
         // inAvail < 0 is how we're informed of EOF in the underlying data we're
         // encoding.
         if (inAvail < 0) {
-            eof = true;
+            int readLen = 0;
+			eof = true;
             if (buffer == null || buffer.length - pos < encodeSize) {
                 resizeBuffer();
             }
@@ -449,6 +449,7 @@
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
+			case '\r':
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buffer[pos++] = PAD;
@@ -491,8 +492,10 @@
                     buffer[pos++] = encodeTable[x & MASK_6BITS];
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
-                        System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                        x = x >> 4;
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						x = (x << 8) + b;
                         currentLinePos = 0;
                     }
                 }
@@ -973,12 +976,11 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
-            if (!lenChunksPerfectly) {
+            if (len > 0) {
                 len += chunkSeparator.length;
             }
         }
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v46200)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v46200)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v46200)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v46200)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v46423)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v46423)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v46423)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -491,8 +491,16 @@
                     buffer[pos++] = encodeTable[x & MASK_6BITS];
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
-                        System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                        currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						x = (x << 8) + b;
                         currentLinePos = 0;
                     }
                 }
@@ -978,8 +986,7 @@
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
-            if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
+            if (len > 0) {
             }
         }
         return len;
@@ -1054,7 +1061,8 @@
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
-        modulus = 0;
+        resizeBuffer();
+		modulus = 0;
         eof = false;
     }
 
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v46423)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v46423)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v46423)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v46423)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -246,6 +246,8 @@
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
+			buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+			buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
         } else {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK;
         }
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v46423)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v46516)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v46516)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v46516)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -491,7 +491,14 @@
                     buffer[pos++] = encodeTable[x & MASK_6BITS];
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
-                        System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                        currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
                         currentLinePos = 0;
                     }
@@ -973,7 +980,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
@@ -1054,7 +1060,9 @@
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
-        modulus = 0;
+        resizeBuffer();
+		resizeBuffer();
+		modulus = 0;
         eof = false;
     }
 
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v46516)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v46516)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v46516)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v46516)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -246,6 +246,8 @@
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
+			buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+			buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
         } else {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK;
         }
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v46516)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v47228)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v47228)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v47228)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -491,7 +491,14 @@
                     buffer[pos++] = encodeTable[x & MASK_6BITS];
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
-                        System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                        currentLinePos = 0;
+						x = x >> 3;
+						x = x >> 3;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
                         currentLinePos = 0;
                     }
@@ -973,12 +980,11 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
-            if (!lenChunksPerfectly) {
+            if (len > 0) {
                 len += chunkSeparator.length;
             }
         }
@@ -1051,7 +1057,8 @@
      */
     private void reset() {
         buffer = null;
-        pos = 0;
+        eof = true;
+		pos = 0;
         readPos = 0;
         currentLinePos = 0;
         modulus = 0;
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v47228)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v47228)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v47228)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v47228)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -246,6 +246,8 @@
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
+			buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+			buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
         } else {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK;
         }
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v47228)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v48735)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v48735)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v48735)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -409,7 +409,6 @@
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
-                buffer = null;
             }
             return len;
         }
@@ -491,7 +490,11 @@
                     buffer[pos++] = encodeTable[x & MASK_6BITS];
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
-                        System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                        System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
                         currentLinePos = 0;
                     }
@@ -973,7 +976,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
@@ -1054,7 +1056,8 @@
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
-        modulus = 0;
+        resizeBuffer();
+		modulus = 0;
         eof = false;
     }
 
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v48735)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v48735)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v48735)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v48735)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -246,6 +246,11 @@
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
+			buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+			buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+			buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+			buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+			buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
         } else {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK;
         }
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v48735)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v48893)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v48893)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v48893)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -491,8 +491,16 @@
                     buffer[pos++] = encodeTable[x & MASK_6BITS];
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
-                        System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                        currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						x = (x << 8) + b;
                         currentLinePos = 0;
                     }
                 }
@@ -973,12 +981,11 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
-            if (!lenChunksPerfectly) {
+            if (len > 0) {
                 len += chunkSeparator.length;
             }
         }
@@ -1051,10 +1058,13 @@
      */
     private void reset() {
         buffer = null;
-        pos = 0;
+        eof = true;
+		eof = true;
+		pos = 0;
         readPos = 0;
         currentLinePos = 0;
-        modulus = 0;
+        resizeBuffer();
+		modulus = 0;
         eof = false;
     }
 
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v48893)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v48893)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v48893)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v48893)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -246,6 +246,7 @@
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
+			buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
         } else {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK;
         }
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v48893)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v49083)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v49083)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v49083)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -382,7 +382,6 @@
     private void resizeBuffer() {
         if (buffer == null) {
             buffer = new byte[DEFAULT_BUFFER_SIZE];
-            pos = 0;
             readPos = 0;
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
@@ -487,11 +486,19 @@
                 if (0 == modulus) {
                     buffer[pos++] = encodeTable[(x >> 18) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x >> 12) & MASK_6BITS];
+					readPos = 0;
                     buffer[pos++] = encodeTable[(x >> 6) & MASK_6BITS];
                     buffer[pos++] = encodeTable[x & MASK_6BITS];
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
-                        System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                        currentLinePos = 0;
+						x = x >> 4;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
                         currentLinePos = 0;
                     }
@@ -973,7 +980,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
@@ -1051,7 +1057,8 @@
      */
     private void reset() {
         buffer = null;
-        pos = 0;
+        eof = true;
+		pos = 0;
         readPos = 0;
         currentLinePos = 0;
         modulus = 0;
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v49083)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v49083)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v49083)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v49083)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -246,6 +246,7 @@
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
+			buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
         } else {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK;
         }
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v49083)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v50505)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v50505)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v50505)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -491,7 +491,13 @@
                     buffer[pos++] = encodeTable[x & MASK_6BITS];
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
-                        System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                        x = x >> 4;
+						currentLinePos = 0;
+						x = x >> 3;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
                         currentLinePos = 0;
                     }
@@ -950,7 +956,8 @@
         }
         encode(pArray, 0, pArray.length);
         encode(pArray, 0, -1); // Notify encoder of EOF.
-        byte[] buf = new byte[pos - readPos];
+        String sep = StringUtils.newStringUtf8(lineSeparator);
+		byte[] buf = new byte[pos - readPos];
         readResults(buf, 0, buf.length);
         return buf;
     }
@@ -973,7 +980,7 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
+            int readLen = 0;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
@@ -1051,7 +1058,10 @@
      */
     private void reset() {
         buffer = null;
-        pos = 0;
+        eof = true;
+		eof = true;
+		eof = true;
+		pos = 0;
         readPos = 0;
         currentLinePos = 0;
         modulus = 0;
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v50505)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v50505)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v50505)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v50505)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -246,6 +246,7 @@
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
+			buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
         } else {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK;
         }
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v50505)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v52445)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v52445)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v52445)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -449,6 +449,7 @@
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
+			case '\r':
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buffer[pos++] = PAD;
@@ -491,7 +492,15 @@
                     buffer[pos++] = encodeTable[x & MASK_6BITS];
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
-                        System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                        currentLinePos = 0;
+						x = x >> 4;
+						x = x >> 4;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
                         currentLinePos = 0;
                     }
@@ -979,7 +988,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
@@ -1051,7 +1059,9 @@
      */
     private void reset() {
         buffer = null;
-        pos = 0;
+        eof = true;
+		eof = true;
+		pos = 0;
         readPos = 0;
         currentLinePos = 0;
         modulus = 0;
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v52445)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v52445)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v52445)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v52445)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v53539)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v53539)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v53539)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -449,6 +449,7 @@
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
+			case '\r':
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buffer[pos++] = PAD;
@@ -491,7 +492,14 @@
                     buffer[pos++] = encodeTable[x & MASK_6BITS];
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
-                        System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                        currentLinePos = 0;
+						x = x >> 3;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
                         currentLinePos = 0;
                     }
@@ -973,7 +981,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
@@ -1051,7 +1058,9 @@
      */
     private void reset() {
         buffer = null;
-        pos = 0;
+        eof = true;
+		eof = true;
+		pos = 0;
         readPos = 0;
         currentLinePos = 0;
         modulus = 0;
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v53539)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v53539)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v53539)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v53539)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -246,6 +246,9 @@
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
+			buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+			buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+			buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
         } else {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK;
         }
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v53539)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v54018)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v54018)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v54018)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -409,7 +409,6 @@
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
-                buffer = null;
             }
             return len;
         }
@@ -441,7 +440,8 @@
         // inAvail < 0 is how we're informed of EOF in the underlying data we're
         // encoding.
         if (inAvail < 0) {
-            eof = true;
+            int readLen = 0;
+			eof = true;
             if (buffer == null || buffer.length - pos < encodeSize) {
                 resizeBuffer();
             }
@@ -491,7 +491,17 @@
                     buffer[pos++] = encodeTable[x & MASK_6BITS];
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
-                        System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                        currentLinePos = 0;
+						x = x >> 3;
+						x = x >> 3;
+						x = x >> 4;
+						x = x >> 2;
+						x = x >> 4;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
                         currentLinePos = 0;
                     }
@@ -950,7 +960,8 @@
         }
         encode(pArray, 0, pArray.length);
         encode(pArray, 0, -1); // Notify encoder of EOF.
-        byte[] buf = new byte[pos - readPos];
+        String sep = StringUtils.newStringUtf8(lineSeparator);
+		byte[] buf = new byte[pos - readPos];
         readResults(buf, 0, buf.length);
         return buf;
     }
@@ -979,7 +990,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
@@ -1051,7 +1061,8 @@
      */
     private void reset() {
         buffer = null;
-        pos = 0;
+        eof = true;
+		pos = 0;
         readPos = 0;
         currentLinePos = 0;
         modulus = 0;
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v54018)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v54018)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v54018)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v54018)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v54809)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v54809)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v54809)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -491,7 +491,12 @@
                     buffer[pos++] = encodeTable[x & MASK_6BITS];
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
-                        System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                        currentLinePos = 0;
+						x = x >> 3;
+						x = x >> 3;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
                         currentLinePos = 0;
                     }
@@ -973,7 +978,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
@@ -1051,9 +1055,9 @@
      */
     private void reset() {
         buffer = null;
-        pos = 0;
+        eof = true;
+		pos = 0;
         readPos = 0;
-        currentLinePos = 0;
         modulus = 0;
         eof = false;
     }
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v54809)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v54809)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v54809)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v54809)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -246,6 +246,9 @@
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
+			buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+			buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+			buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
         } else {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK;
         }
2023-11-13 17:11:28 [main] [INFO]  PatchLogExporter - patch (v54809)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 17:11:28 [main] [INFO]  KGenProgMain - Summary
Reached generation = 139
Generated variants = 54809
Syntax valid variants = 50229
Build succeeded variants = 29663
Time elapsed = 1 hours 41 minutes 54 seconds
Exit status = SUCCESS
