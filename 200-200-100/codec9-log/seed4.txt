2023-11-13 20:15:26 [main] [WARN]  Configuration$Builder - The directory where kGenProg is running is different from the root directory of the given target project.
2023-11-13 20:15:26 [main] [WARN]  Configuration$Builder - If the target project includes test cases with file I/O, such test cases won't run correctly.
2023-11-13 20:15:26 [main] [WARN]  Configuration$Builder - We recommend you running kGenProg with the root directory of the target project as the current directory.
2023-11-13 20:15:26 [main] [INFO]  KGenProgMain - 
==================== kGenProg Configuration ====================
configPath = /Users/haradakanon/Downloads/kGenProg-1.8.2/example/codec9/kgenprog-9.toml (set by command line)
rootDir = /Users/haradakanon/Downloads/kGenProg-1.8.2/example/codec9 (set in config file)
productPaths = [/Users/haradakanon/Downloads/kGenProg-1.8.2/example/codec9/src/java] (set in config file)
testPaths = [/Users/haradakanon/Downloads/kGenProg-1.8.2/example/codec9/src/test] (set in config file)
classPaths = []
executionTests = [org.apache.commons.codec.binary.Base64Test] (set in config file)
outDir = kgenprog-out
logLevel = INFO (set in config file)
mutationGeneratingCount = 200 (set in config file)
crossoverGeneratingCount = 200 (set in config file)
headcount = 100
maxGeneration = 500 (set in config file)
timeLimit = PT24H (set in config file)
testTimeLimit = PT3M (set in config file)
requiredSolutionsCount = 100 (set in config file)
randomSeed = 4 (set by command line)
scope = PACKAGE (set in config file)
faultLocalization = Zoltar (set in config file)
mutationType = Simple
crossoverType = Random
firstVariantSelectionStrategy = Random
secondVariantSelectionStrategy = Random
isPatchOutput = true (set in config file)
isHistoryRecord = false
currentDirectory = /Users/haradakanon/Downloads/research
version = 1.8.2
================================================================
2023-11-13 20:15:35 [main] [INFO]  KGenProgMain - initial failed tests (1/51)
org.apache.commons.codec.binary.Base64Test.testCodec112: null

2023-11-13 20:15:35 [main] [INFO]  KGenProgMain - GA started
2023-11-13 20:15:35 [main] [INFO]  KGenProgMain - entered the era of 1st generation.
2023-11-13 20:15:52 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 16 seconds
Variants: generated 200, build-succeeded 19, build-failed 114, syntax-invalid 8, redundant 59
Fitness: max 1(2), min 0.49(3), ave 0.83
Test execution time: sum 3291 ms, max 409 ms, min 108 ms
----------------------------------------------------------------

2023-11-13 20:15:52 [main] [INFO]  KGenProgMain - entered the era of 2nd generation.
2023-11-13 20:16:09 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 33 seconds
Variants: generated 200, build-succeeded 39, build-failed 120, syntax-invalid 17, redundant 24
Fitness: max 0.98(8), min 0.333(1), ave 0.778
Test execution time: sum 4626 ms, max 241 ms, min 78 ms
----------------------------------------------------------------

2023-11-13 20:16:09 [main] [INFO]  KGenProgMain - entered the era of 3rd generation.
2023-11-13 20:16:37 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 minutes 1 seconds
Variants: generated 400, build-succeeded 132, build-failed 122, syntax-invalid 28, redundant 118
Fitness: max 1(1), min 0.235(1), ave 0.723
Test execution time: sum 12540 ms, max 250 ms, min 61 ms
----------------------------------------------------------------

2023-11-13 20:16:37 [main] [INFO]  KGenProgMain - entered the era of 4th generation.
2023-11-13 20:17:01 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 minutes 25 seconds
Variants: generated 400, build-succeeded 121, build-failed 131, syntax-invalid 31, redundant 117
Fitness: max 0.98(21), min 0.49(2), ave 0.861
Test execution time: sum 11691 ms, max 218 ms, min 66 ms
----------------------------------------------------------------

2023-11-13 20:17:01 [main] [INFO]  KGenProgMain - entered the era of 5th generation.
2023-11-13 20:17:26 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 minutes 50 seconds
Variants: generated 400, build-succeeded 129, build-failed 122, syntax-invalid 31, redundant 118
Fitness: max 0.98(41), min 0.294(1), ave 0.89
Test execution time: sum 13035 ms, max 211 ms, min 65 ms
----------------------------------------------------------------

2023-11-13 20:17:26 [main] [INFO]  KGenProgMain - entered the era of 6th generation.
2023-11-13 20:17:50 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 minutes 14 seconds
Variants: generated 400, build-succeeded 105, build-failed 126, syntax-invalid 45, redundant 124
Fitness: max 0.98(76), min 0.49(1), ave 0.955
Test execution time: sum 12630 ms, max 2398 ms, min 74 ms
----------------------------------------------------------------

2023-11-13 20:17:50 [main] [INFO]  KGenProgMain - entered the era of 7th generation.
2023-11-13 20:18:13 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 minutes 38 seconds
Variants: generated 400, build-succeeded 119, build-failed 131, syntax-invalid 36, redundant 114
Fitness: max 1(1), min 0.353(1), ave 0.948
Test execution time: sum 11889 ms, max 315 ms, min 63 ms
----------------------------------------------------------------

2023-11-13 20:18:13 [main] [INFO]  KGenProgMain - entered the era of 8th generation.
2023-11-13 20:18:38 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 minutes 2 seconds
Variants: generated 400, build-succeeded 132, build-failed 114, syntax-invalid 19, redundant 135
Fitness: max 1(5), min 0.49(3), ave 0.933
Test execution time: sum 12974 ms, max 276 ms, min 66 ms
----------------------------------------------------------------

2023-11-13 20:18:38 [main] [INFO]  KGenProgMain - entered the era of 9th generation.
2023-11-13 20:19:01 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 minutes 25 seconds
Variants: generated 400, build-succeeded 121, build-failed 125, syntax-invalid 34, redundant 120
Fitness: max 1(1), min 0.314(1), ave 0.946
Test execution time: sum 11769 ms, max 175 ms, min 63 ms
----------------------------------------------------------------

2023-11-13 20:19:01 [main] [INFO]  KGenProgMain - entered the era of 10th generation.
2023-11-13 20:19:26 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 minutes 50 seconds
Variants: generated 400, build-succeeded 127, build-failed 125, syntax-invalid 37, redundant 111
Fitness: max 1(1), min 0.235(1), ave 0.938
Test execution time: sum 12649 ms, max 261 ms, min 63 ms
----------------------------------------------------------------

2023-11-13 20:19:26 [main] [INFO]  KGenProgMain - entered the era of 11th generation.
2023-11-13 20:19:51 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 minutes 15 seconds
Variants: generated 400, build-succeeded 142, build-failed 124, syntax-invalid 38, redundant 96
Fitness: max 0.98(116), min 0.294(1), ave 0.948
Test execution time: sum 13855 ms, max 212 ms, min 63 ms
----------------------------------------------------------------

2023-11-13 20:19:51 [main] [INFO]  KGenProgMain - entered the era of 12th generation.
2023-11-13 20:20:25 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 minutes 49 seconds
Variants: generated 400, build-succeeded 164, build-failed 116, syntax-invalid 39, redundant 81
Fitness: max 1(2), min 0.235(1), ave 0.939
Test execution time: sum 17182 ms, max 1112 ms, min 63 ms
----------------------------------------------------------------

2023-11-13 20:20:25 [main] [INFO]  KGenProgMain - entered the era of 13th generation.
2023-11-13 20:20:57 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 minutes 21 seconds
Variants: generated 400, build-succeeded 163, build-failed 118, syntax-invalid 42, redundant 77
Fitness: max 0.98(129), min 0.235(1), ave 0.945
Test execution time: sum 16080 ms, max 323 ms, min 60 ms
----------------------------------------------------------------

2023-11-13 20:20:57 [main] [INFO]  KGenProgMain - entered the era of 14th generation.
2023-11-13 20:21:29 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 minutes 53 seconds
Variants: generated 400, build-succeeded 170, build-failed 122, syntax-invalid 39, redundant 69
Fitness: max 1(1), min 0.49(1), ave 0.954
Test execution time: sum 16691 ms, max 203 ms, min 65 ms
----------------------------------------------------------------

2023-11-13 20:21:29 [main] [INFO]  KGenProgMain - entered the era of 15th generation.
2023-11-13 20:22:02 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 minutes 26 seconds
Variants: generated 400, build-succeeded 169, build-failed 118, syntax-invalid 42, redundant 71
Fitness: max 1(1), min 0.275(1), ave 0.944
Test execution time: sum 17531 ms, max 890 ms, min 62 ms
----------------------------------------------------------------

2023-11-13 20:22:02 [main] [INFO]  KGenProgMain - entered the era of 16th generation.
2023-11-13 20:22:39 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 minutes 3 seconds
Variants: generated 400, build-succeeded 188, build-failed 108, syntax-invalid 43, redundant 61
Fitness: max 1(1), min 0.49(3), ave 0.948
Test execution time: sum 19522 ms, max 757 ms, min 64 ms
----------------------------------------------------------------

2023-11-13 20:22:39 [main] [INFO]  KGenProgMain - entered the era of 17th generation.
2023-11-13 20:23:13 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 minutes 37 seconds
Variants: generated 400, build-succeeded 179, build-failed 117, syntax-invalid 50, redundant 54
Fitness: max 1(1), min 0.471(1), ave 0.957
Test execution time: sum 17930 ms, max 230 ms, min 65 ms
----------------------------------------------------------------

2023-11-13 20:23:13 [main] [INFO]  KGenProgMain - entered the era of 18th generation.
2023-11-13 20:23:48 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 minutes 12 seconds
Variants: generated 400, build-succeeded 184, build-failed 125, syntax-invalid 45, redundant 46
Fitness: max 0.98(155), min 0.471(1), ave 0.957
Test execution time: sum 18189 ms, max 252 ms, min 64 ms
----------------------------------------------------------------

2023-11-13 20:23:48 [main] [INFO]  KGenProgMain - entered the era of 19th generation.
2023-11-13 20:24:26 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 minutes 50 seconds
Variants: generated 400, build-succeeded 191, build-failed 114, syntax-invalid 42, redundant 53
Fitness: max 0.98(150), min 0.49(3), ave 0.948
Test execution time: sum 19621 ms, max 1005 ms, min 65 ms
----------------------------------------------------------------

2023-11-13 20:24:26 [main] [INFO]  KGenProgMain - entered the era of 20th generation.
2023-11-13 20:24:59 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 minutes 24 seconds
Variants: generated 400, build-succeeded 168, build-failed 126, syntax-invalid 53, redundant 53
Fitness: max 1(1), min 0.216(1), ave 0.951
Test execution time: sum 16715 ms, max 200 ms, min 64 ms
----------------------------------------------------------------

2023-11-13 20:24:59 [main] [INFO]  KGenProgMain - entered the era of 21st generation.
2023-11-13 20:25:35 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 10 minutes 0 seconds
Variants: generated 400, build-succeeded 180, build-failed 126, syntax-invalid 36, redundant 58
Fitness: max 1(2), min 0.49(1), ave 0.961
Test execution time: sum 18052 ms, max 200 ms, min 76 ms
----------------------------------------------------------------

2023-11-13 20:25:35 [main] [INFO]  KGenProgMain - entered the era of 22nd generation.
2023-11-13 20:26:15 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 10 minutes 40 seconds
Variants: generated 400, build-succeeded 192, build-failed 125, syntax-invalid 49, redundant 34
Fitness: max 0.98(165), min 0.471(1), ave 0.95
Test execution time: sum 20879 ms, max 1784 ms, min 69 ms
----------------------------------------------------------------

2023-11-13 20:26:15 [main] [INFO]  KGenProgMain - entered the era of 23rd generation.
2023-11-13 20:26:56 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 minutes 20 seconds
Variants: generated 400, build-succeeded 206, build-failed 114, syntax-invalid 47, redundant 33
Fitness: max 0.98(168), min 0.49(2), ave 0.948
Test execution time: sum 20867 ms, max 211 ms, min 63 ms
----------------------------------------------------------------

2023-11-13 20:26:56 [main] [INFO]  KGenProgMain - entered the era of 24th generation.
2023-11-13 20:27:38 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 minutes 2 seconds
Variants: generated 400, build-succeeded 197, build-failed 129, syntax-invalid 38, redundant 36
Fitness: max 0.98(173), min 0.235(1), ave 0.962
Test execution time: sum 21149 ms, max 821 ms, min 64 ms
----------------------------------------------------------------

2023-11-13 20:27:38 [main] [INFO]  KGenProgMain - entered the era of 25th generation.
2023-11-13 20:28:20 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 minutes 44 seconds
Variants: generated 400, build-succeeded 214, build-failed 120, syntax-invalid 37, redundant 29
Fitness: max 1(1), min 0.49(1), ave 0.959
Test execution time: sum 22384 ms, max 225 ms, min 65 ms
----------------------------------------------------------------

2023-11-13 20:28:20 [main] [INFO]  KGenProgMain - entered the era of 26th generation.
2023-11-13 20:29:04 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 13 minutes 28 seconds
Variants: generated 400, build-succeeded 208, build-failed 124, syntax-invalid 37, redundant 31
Fitness: max 1(1), min 0.49(3), ave 0.947
Test execution time: sum 22741 ms, max 1244 ms, min 64 ms
----------------------------------------------------------------

2023-11-13 20:29:04 [main] [INFO]  KGenProgMain - entered the era of 27th generation.
2023-11-13 20:29:46 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 14 minutes 11 seconds
Variants: generated 400, build-succeeded 214, build-failed 113, syntax-invalid 30, redundant 43
Fitness: max 1(1), min 0.49(2), ave 0.962
Test execution time: sum 21869 ms, max 241 ms, min 64 ms
----------------------------------------------------------------

2023-11-13 20:29:46 [main] [INFO]  KGenProgMain - entered the era of 28th generation.
2023-11-13 20:30:29 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 14 minutes 53 seconds
Variants: generated 400, build-succeeded 213, build-failed 112, syntax-invalid 30, redundant 45
Fitness: max 1(1), min 0.471(1), ave 0.956
Test execution time: sum 21873 ms, max 205 ms, min 63 ms
----------------------------------------------------------------

2023-11-13 20:30:29 [main] [INFO]  KGenProgMain - entered the era of 29th generation.
2023-11-13 20:31:13 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 15 minutes 38 seconds
Variants: generated 400, build-succeeded 227, build-failed 107, syntax-invalid 45, redundant 21
Fitness: max 0.98(184), min 0.255(1), ave 0.948
Test execution time: sum 23420 ms, max 212 ms, min 63 ms
----------------------------------------------------------------

2023-11-13 20:31:13 [main] [INFO]  KGenProgMain - entered the era of 30th generation.
2023-11-13 20:32:00 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 16 minutes 25 seconds
Variants: generated 400, build-succeeded 216, build-failed 113, syntax-invalid 36, redundant 35
Fitness: max 1(1), min 0.49(3), ave 0.96
Test execution time: sum 23773 ms, max 1090 ms, min 65 ms
----------------------------------------------------------------

2023-11-13 20:32:00 [main] [INFO]  KGenProgMain - entered the era of 31st generation.
2023-11-13 20:32:46 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 17 minutes 10 seconds
Variants: generated 400, build-succeeded 234, build-failed 109, syntax-invalid 31, redundant 26
Fitness: max 0.98(196), min 0.275(1), ave 0.95
Test execution time: sum 24388 ms, max 235 ms, min 64 ms
----------------------------------------------------------------

2023-11-13 20:32:46 [main] [INFO]  KGenProgMain - entered the era of 32nd generation.
2023-11-13 20:33:29 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 17 minutes 54 seconds
Variants: generated 400, build-succeeded 207, build-failed 127, syntax-invalid 34, redundant 32
Fitness: max 0.98(179), min 0.49(2), ave 0.957
Test execution time: sum 21580 ms, max 205 ms, min 65 ms
----------------------------------------------------------------

2023-11-13 20:33:29 [main] [INFO]  KGenProgMain - entered the era of 33rd generation.
2023-11-13 20:34:19 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 18 minutes 44 seconds
Variants: generated 400, build-succeeded 217, build-failed 123, syntax-invalid 25, redundant 35
Fitness: max 0.98(193), min 0.431(1), ave 0.96
Test execution time: sum 26951 ms, max 4010 ms, min 71 ms
----------------------------------------------------------------

2023-11-13 20:34:19 [main] [INFO]  KGenProgMain - entered the era of 34th generation.
2023-11-13 20:35:05 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 19 minutes 29 seconds
Variants: generated 400, build-succeeded 225, build-failed 111, syntax-invalid 34, redundant 30
Fitness: max 0.98(189), min 0.333(1), ave 0.957
Test execution time: sum 23508 ms, max 254 ms, min 62 ms
----------------------------------------------------------------

2023-11-13 20:35:05 [main] [INFO]  KGenProgMain - entered the era of 35th generation.
2023-11-13 20:35:50 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 20 minutes 15 seconds
Variants: generated 400, build-succeeded 211, build-failed 128, syntax-invalid 33, redundant 28
Fitness: max 0.98(193), min 0.549(1), ave 0.968
Test execution time: sum 22434 ms, max 207 ms, min 65 ms
----------------------------------------------------------------

2023-11-13 20:35:50 [main] [INFO]  KGenProgMain - entered the era of 36th generation.
2023-11-13 20:36:39 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 21 minutes 4 seconds
Variants: generated 400, build-succeeded 219, build-failed 110, syntax-invalid 45, redundant 26
Fitness: max 0.98(177), min 0.137(1), ave 0.952
Test execution time: sum 25971 ms, max 2815 ms, min 61 ms
----------------------------------------------------------------

2023-11-13 20:36:39 [main] [INFO]  KGenProgMain - entered the era of 37th generation.
2023-11-13 20:37:24 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 21 minutes 49 seconds
Variants: generated 400, build-succeeded 209, build-failed 112, syntax-invalid 47, redundant 32
Fitness: max 1(3), min 0.353(1), ave 0.949
Test execution time: sum 23352 ms, max 1425 ms, min 66 ms
----------------------------------------------------------------

2023-11-13 20:37:24 [main] [INFO]  KGenProgMain - entered the era of 38th generation.
2023-11-13 20:38:09 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 22 minutes 34 seconds
Variants: generated 400, build-succeeded 207, build-failed 125, syntax-invalid 38, redundant 30
Fitness: max 0.98(182), min 0.471(1), ave 0.959
Test execution time: sum 21797 ms, max 210 ms, min 75 ms
----------------------------------------------------------------

2023-11-13 20:38:09 [main] [INFO]  KGenProgMain - entered the era of 39th generation.
2023-11-13 20:38:55 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 23 minutes 19 seconds
Variants: generated 400, build-succeeded 219, build-failed 116, syntax-invalid 44, redundant 21
Fitness: max 1(2), min 0.471(1), ave 0.955
Test execution time: sum 22861 ms, max 232 ms, min 66 ms
----------------------------------------------------------------

2023-11-13 20:38:55 [main] [INFO]  KGenProgMain - entered the era of 40th generation.
2023-11-13 20:39:40 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 24 minutes 5 seconds
Variants: generated 400, build-succeeded 217, build-failed 112, syntax-invalid 41, redundant 30
Fitness: max 1(4), min 0.49(2), ave 0.953
Test execution time: sum 22588 ms, max 200 ms, min 68 ms
----------------------------------------------------------------

2023-11-13 20:39:40 [main] [INFO]  KGenProgMain - entered the era of 41st generation.
2023-11-13 20:40:28 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 24 minutes 52 seconds
Variants: generated 400, build-succeeded 232, build-failed 109, syntax-invalid 37, redundant 22
Fitness: max 1(3), min 0.275(1), ave 0.951
Test execution time: sum 23951 ms, max 235 ms, min 64 ms
----------------------------------------------------------------

2023-11-13 20:40:28 [main] [INFO]  KGenProgMain - entered the era of 42nd generation.
2023-11-13 20:41:16 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 25 minutes 40 seconds
Variants: generated 400, build-succeeded 223, build-failed 114, syntax-invalid 36, redundant 27
Fitness: max 1(1), min 0.294(1), ave 0.958
Test execution time: sum 23569 ms, max 236 ms, min 71 ms
----------------------------------------------------------------

2023-11-13 20:41:16 [main] [INFO]  KGenProgMain - entered the era of 43rd generation.
2023-11-13 20:42:07 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 26 minutes 32 seconds
Variants: generated 400, build-succeeded 232, build-failed 114, syntax-invalid 33, redundant 21
Fitness: max 1(1), min 0.49(1), ave 0.963
Test execution time: sum 26067 ms, max 1192 ms, min 72 ms
----------------------------------------------------------------

2023-11-13 20:42:07 [main] [INFO]  KGenProgMain - entered the era of 44th generation.
2023-11-13 20:42:55 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 27 minutes 19 seconds
Variants: generated 400, build-succeeded 220, build-failed 117, syntax-invalid 41, redundant 22
Fitness: max 1(1), min 0.49(1), ave 0.957
Test execution time: sum 23188 ms, max 220 ms, min 67 ms
----------------------------------------------------------------

2023-11-13 20:42:55 [main] [INFO]  KGenProgMain - entered the era of 45th generation.
2023-11-13 20:43:45 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 28 minutes 10 seconds
Variants: generated 400, build-succeeded 215, build-failed 124, syntax-invalid 44, redundant 17
Fitness: max 1(1), min 0.216(1), ave 0.945
Test execution time: sum 26303 ms, max 1094 ms, min 67 ms
----------------------------------------------------------------

2023-11-13 20:43:45 [main] [INFO]  KGenProgMain - entered the era of 46th generation.
2023-11-13 20:44:32 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 28 minutes 57 seconds
Variants: generated 400, build-succeeded 194, build-failed 131, syntax-invalid 55, redundant 20
Fitness: max 1(1), min 0.549(1), ave 0.957
Test execution time: sum 21773 ms, max 807 ms, min 71 ms
----------------------------------------------------------------

2023-11-13 20:44:32 [main] [INFO]  KGenProgMain - entered the era of 47th generation.
2023-11-13 20:45:21 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 29 minutes 45 seconds
Variants: generated 400, build-succeeded 218, build-failed 108, syntax-invalid 51, redundant 23
Fitness: max 1(2), min 0.49(2), ave 0.951
Test execution time: sum 24064 ms, max 800 ms, min 64 ms
----------------------------------------------------------------

2023-11-13 20:45:21 [main] [INFO]  KGenProgMain - entered the era of 48th generation.
2023-11-13 20:46:15 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 30 minutes 39 seconds
Variants: generated 400, build-succeeded 242, build-failed 109, syntax-invalid 29, redundant 20
Fitness: max 1(2), min 0.137(1), ave 0.945
Test execution time: sum 28442 ms, max 1492 ms, min 61 ms
----------------------------------------------------------------

2023-11-13 20:46:15 [main] [INFO]  KGenProgMain - entered the era of 49th generation.
2023-11-13 20:47:04 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 31 minutes 29 seconds
Variants: generated 400, build-succeeded 220, build-failed 128, syntax-invalid 38, redundant 14
Fitness: max 1(3), min 0.49(1), ave 0.962
Test execution time: sum 23649 ms, max 230 ms, min 65 ms
----------------------------------------------------------------

2023-11-13 20:47:05 [main] [INFO]  KGenProgMain - entered the era of 50th generation.
2023-11-13 20:47:56 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 32 minutes 21 seconds
Variants: generated 400, build-succeeded 223, build-failed 113, syntax-invalid 40, redundant 24
Fitness: max 1(3), min 0.255(1), ave 0.96
Test execution time: sum 25025 ms, max 958 ms, min 64 ms
----------------------------------------------------------------

2023-11-13 20:47:56 [main] [INFO]  KGenProgMain - entered the era of 51st generation.
2023-11-13 20:48:46 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 33 minutes 10 seconds
Variants: generated 400, build-succeeded 227, build-failed 111, syntax-invalid 35, redundant 27
Fitness: max 1(3), min 0.49(1), ave 0.964
Test execution time: sum 24453 ms, max 212 ms, min 69 ms
----------------------------------------------------------------

2023-11-13 20:48:46 [main] [INFO]  KGenProgMain - entered the era of 52nd generation.
2023-11-13 20:49:38 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 34 minutes 3 seconds
Variants: generated 400, build-succeeded 228, build-failed 116, syntax-invalid 35, redundant 21
Fitness: max 1(3), min 0.431(1), ave 0.96
Test execution time: sum 25119 ms, max 777 ms, min 73 ms
----------------------------------------------------------------

2023-11-13 20:49:38 [main] [INFO]  KGenProgMain - entered the era of 53rd generation.
2023-11-13 20:50:30 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 34 minutes 54 seconds
Variants: generated 400, build-succeeded 225, build-failed 114, syntax-invalid 34, redundant 27
Fitness: max 1(1), min 0.275(1), ave 0.963
Test execution time: sum 24654 ms, max 208 ms, min 67 ms
----------------------------------------------------------------

2023-11-13 20:50:30 [main] [INFO]  KGenProgMain - entered the era of 54th generation.
2023-11-13 20:51:18 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 35 minutes 43 seconds
Variants: generated 400, build-succeeded 212, build-failed 123, syntax-invalid 30, redundant 35
Fitness: max 1(4), min 0.49(1), ave 0.959
Test execution time: sum 24082 ms, max 1215 ms, min 78 ms
----------------------------------------------------------------

2023-11-13 20:51:18 [main] [INFO]  KGenProgMain - entered the era of 55th generation.
2023-11-13 20:52:12 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 36 minutes 36 seconds
Variants: generated 400, build-succeeded 233, build-failed 113, syntax-invalid 33, redundant 21
Fitness: max 1(1), min 0.725(1), ave 0.965
Test execution time: sum 25843 ms, max 226 ms, min 86 ms
----------------------------------------------------------------

2023-11-13 20:52:12 [main] [INFO]  KGenProgMain - entered the era of 56th generation.
2023-11-13 20:53:06 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 37 minutes 30 seconds
Variants: generated 400, build-succeeded 236, build-failed 104, syntax-invalid 38, redundant 22
Fitness: max 0.98(186), min 0.216(1), ave 0.944
Test execution time: sum 26723 ms, max 1001 ms, min 67 ms
----------------------------------------------------------------

2023-11-13 20:53:06 [main] [INFO]  KGenProgMain - entered the era of 57th generation.
2023-11-13 20:53:57 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 38 minutes 21 seconds
Variants: generated 400, build-succeeded 224, build-failed 108, syntax-invalid 38, redundant 30
Fitness: max 0.98(192), min 0.49(3), ave 0.956
Test execution time: sum 24338 ms, max 215 ms, min 67 ms
----------------------------------------------------------------

2023-11-13 20:53:57 [main] [INFO]  KGenProgMain - entered the era of 58th generation.
2023-11-13 20:54:52 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 39 minutes 16 seconds
Variants: generated 400, build-succeeded 235, build-failed 121, syntax-invalid 23, redundant 21
Fitness: max 0.98(200), min 0.353(1), ave 0.955
Test execution time: sum 25872 ms, max 196 ms, min 67 ms
----------------------------------------------------------------

2023-11-13 20:54:52 [main] [INFO]  KGenProgMain - entered the era of 59th generation.
2023-11-13 20:55:45 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 40 minutes 10 seconds
Variants: generated 400, build-succeeded 234, build-failed 110, syntax-invalid 23, redundant 33
Fitness: max 0.98(200), min 0.49(2), ave 0.956
Test execution time: sum 26138 ms, max 422 ms, min 65 ms
----------------------------------------------------------------

2023-11-13 20:55:45 [main] [INFO]  KGenProgMain - entered the era of 60th generation.
2023-11-13 20:56:35 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 40 minutes 59 seconds
Variants: generated 400, build-succeeded 226, build-failed 128, syntax-invalid 23, redundant 23
Fitness: max 1(2), min 0.49(1), ave 0.967
Test execution time: sum 25002 ms, max 214 ms, min 80 ms
----------------------------------------------------------------

2023-11-13 20:56:35 [main] [INFO]  KGenProgMain - entered the era of 61st generation.
2023-11-13 20:57:28 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 41 minutes 52 seconds
Variants: generated 400, build-succeeded 228, build-failed 115, syntax-invalid 41, redundant 16
Fitness: max 0.98(192), min 0.49(1), ave 0.961
Test execution time: sum 26614 ms, max 1010 ms, min 68 ms
----------------------------------------------------------------

2023-11-13 20:57:28 [main] [INFO]  KGenProgMain - entered the era of 62nd generation.
2023-11-13 20:58:22 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 42 minutes 47 seconds
Variants: generated 400, build-succeeded 225, build-failed 115, syntax-invalid 27, redundant 33
Fitness: max 0.98(197), min 0.549(1), ave 0.965
Test execution time: sum 25441 ms, max 248 ms, min 72 ms
----------------------------------------------------------------

2023-11-13 20:58:22 [main] [INFO]  KGenProgMain - entered the era of 63rd generation.
2023-11-13 20:59:21 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 43 minutes 45 seconds
Variants: generated 400, build-succeeded 237, build-failed 107, syntax-invalid 31, redundant 25
Fitness: max 0.98(202), min 0.216(1), ave 0.954
Test execution time: sum 27561 ms, max 1080 ms, min 66 ms
----------------------------------------------------------------

2023-11-13 20:59:21 [main] [INFO]  KGenProgMain - entered the era of 64th generation.
2023-11-13 21:00:18 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 44 minutes 42 seconds
Variants: generated 400, build-succeeded 242, build-failed 101, syntax-invalid 34, redundant 23
Fitness: max 0.98(198), min 0.314(1), ave 0.953
Test execution time: sum 26918 ms, max 202 ms, min 66 ms
----------------------------------------------------------------

2023-11-13 21:00:18 [main] [INFO]  KGenProgMain - entered the era of 65th generation.
2023-11-13 21:01:17 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 45 minutes 41 seconds
Variants: generated 400, build-succeeded 231, build-failed 107, syntax-invalid 36, redundant 26
Fitness: max 0.98(200), min 0.49(3), ave 0.958
Test execution time: sum 27367 ms, max 921 ms, min 71 ms
----------------------------------------------------------------

2023-11-13 21:01:17 [main] [INFO]  KGenProgMain - entered the era of 66th generation.
2023-11-13 21:02:13 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 46 minutes 37 seconds
Variants: generated 400, build-succeeded 224, build-failed 122, syntax-invalid 32, redundant 22
Fitness: max 1(2), min 0.137(1), ave 0.95
Test execution time: sum 25481 ms, max 218 ms, min 65 ms
----------------------------------------------------------------

2023-11-13 21:02:13 [main] [INFO]  KGenProgMain - entered the era of 67th generation.
2023-11-13 21:03:04 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 47 minutes 29 seconds
Variants: generated 400, build-succeeded 222, build-failed 111, syntax-invalid 49, redundant 18
Fitness: max 0.98(180), min 0.137(1), ave 0.945
Test execution time: sum 24399 ms, max 205 ms, min 64 ms
----------------------------------------------------------------

2023-11-13 21:03:04 [main] [INFO]  KGenProgMain - entered the era of 68th generation.
2023-11-13 21:04:01 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 48 minutes 25 seconds
Variants: generated 400, build-succeeded 214, build-failed 125, syntax-invalid 36, redundant 25
Fitness: max 0.98(189), min 0.549(1), ave 0.966
Test execution time: sum 25678 ms, max 1173 ms, min 66 ms
----------------------------------------------------------------

2023-11-13 21:04:01 [main] [INFO]  KGenProgMain - entered the era of 69th generation.
2023-11-13 21:05:00 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 49 minutes 24 seconds
Variants: generated 400, build-succeeded 234, build-failed 113, syntax-invalid 39, redundant 14
Fitness: max 0.98(205), min 0.49(1), ave 0.962
Test execution time: sum 26848 ms, max 215 ms, min 68 ms
----------------------------------------------------------------

2023-11-13 21:05:00 [main] [INFO]  KGenProgMain - entered the era of 70th generation.
2023-11-13 21:05:53 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 50 minutes 17 seconds
Variants: generated 400, build-succeeded 236, build-failed 103, syntax-invalid 40, redundant 21
Fitness: max 1(2), min 0.49(3), ave 0.961
Test execution time: sum 26239 ms, max 234 ms, min 68 ms
----------------------------------------------------------------

2023-11-13 21:05:53 [main] [INFO]  KGenProgMain - entered the era of 71st generation.
2023-11-13 21:06:53 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 51 minutes 17 seconds
Variants: generated 400, build-succeeded 227, build-failed 111, syntax-invalid 41, redundant 21
Fitness: max 1(1), min 0.49(3), ave 0.952
Test execution time: sum 28700 ms, max 2607 ms, min 72 ms
----------------------------------------------------------------

2023-11-13 21:06:53 [main] [INFO]  KGenProgMain - entered the era of 72nd generation.
2023-11-13 21:07:53 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 52 minutes 17 seconds
Variants: generated 400, build-succeeded 235, build-failed 110, syntax-invalid 37, redundant 18
Fitness: max 1(2), min 0.353(1), ave 0.959
Test execution time: sum 27604 ms, max 437 ms, min 68 ms
----------------------------------------------------------------

2023-11-13 21:07:53 [main] [INFO]  KGenProgMain - entered the era of 73rd generation.
2023-11-13 21:08:54 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 53 minutes 19 seconds
Variants: generated 400, build-succeeded 220, build-failed 120, syntax-invalid 33, redundant 27
Fitness: max 0.98(193), min 0.49(2), ave 0.962
Test execution time: sum 27794 ms, max 1358 ms, min 72 ms
----------------------------------------------------------------

2023-11-13 21:08:54 [main] [INFO]  KGenProgMain - entered the era of 74th generation.
2023-11-13 21:09:55 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 54 minutes 19 seconds
Variants: generated 400, build-succeeded 236, build-failed 108, syntax-invalid 36, redundant 20
Fitness: max 0.98(199), min 0.157(1), ave 0.954
Test execution time: sum 27838 ms, max 274 ms, min 70 ms
----------------------------------------------------------------

2023-11-13 21:09:55 [main] [INFO]  KGenProgMain - entered the era of 75th generation.
2023-11-13 21:10:59 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 55 minutes 23 seconds
Variants: generated 400, build-succeeded 241, build-failed 114, syntax-invalid 24, redundant 21
Fitness: max 1(2), min 0.216(1), ave 0.961
Test execution time: sum 29279 ms, max 275 ms, min 68 ms
----------------------------------------------------------------

2023-11-13 21:10:59 [main] [INFO]  KGenProgMain - entered the era of 76th generation.
2023-11-13 21:11:57 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 56 minutes 22 seconds
Variants: generated 400, build-succeeded 233, build-failed 117, syntax-invalid 31, redundant 19
Fitness: max 1(1), min 0.235(1), ave 0.953
Test execution time: sum 27915 ms, max 257 ms, min 66 ms
----------------------------------------------------------------

2023-11-13 21:11:57 [main] [INFO]  KGenProgMain - entered the era of 77th generation.
2023-11-13 21:12:54 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 57 minutes 18 seconds
Variants: generated 400, build-succeeded 231, build-failed 118, syntax-invalid 25, redundant 26
Fitness: max 1(1), min 0.471(1), ave 0.963
Test execution time: sum 27834 ms, max 297 ms, min 70 ms
----------------------------------------------------------------

2023-11-13 21:12:54 [main] [INFO]  KGenProgMain - entered the era of 78th generation.
2023-11-13 21:13:52 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 58 minutes 16 seconds
Variants: generated 400, build-succeeded 228, build-failed 123, syntax-invalid 31, redundant 18
Fitness: max 0.98(201), min 0.49(1), ave 0.962
Test execution time: sum 27710 ms, max 269 ms, min 69 ms
----------------------------------------------------------------

2023-11-13 21:13:52 [main] [INFO]  KGenProgMain - entered the era of 79th generation.
2023-11-13 21:14:47 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 59 minutes 11 seconds
Variants: generated 400, build-succeeded 227, build-failed 117, syntax-invalid 29, redundant 27
Fitness: max 0.98(205), min 0.49(2), ave 0.962
Test execution time: sum 26832 ms, max 233 ms, min 68 ms
----------------------------------------------------------------

2023-11-13 21:14:47 [main] [INFO]  KGenProgMain - entered the era of 80th generation.
2023-11-13 21:15:46 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 10 seconds
Variants: generated 400, build-succeeded 240, build-failed 118, syntax-invalid 24, redundant 18
Fitness: max 1(3), min 0.275(1), ave 0.953
Test execution time: sum 28603 ms, max 253 ms, min 67 ms
----------------------------------------------------------------

2023-11-13 21:15:46 [main] [INFO]  KGenProgMain - entered the era of 81st generation.
2023-11-13 21:16:49 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 1 minutes 13 seconds
Variants: generated 400, build-succeeded 236, build-failed 128, syntax-invalid 19, redundant 17
Fitness: max 0.98(217), min 0.49(3), ave 0.965
Test execution time: sum 29784 ms, max 536 ms, min 68 ms
----------------------------------------------------------------

2023-11-13 21:16:49 [main] [INFO]  KGenProgMain - entered the era of 82nd generation.
2023-11-13 21:18:01 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 2 minutes 25 seconds
Variants: generated 400, build-succeeded 255, build-failed 118, syntax-invalid 15, redundant 12
Fitness: max 1(1), min 0.216(1), ave 0.957
Test execution time: sum 33110 ms, max 862 ms, min 73 ms
----------------------------------------------------------------

2023-11-13 21:18:01 [main] [INFO]  KGenProgMain - entered the era of 83rd generation.
2023-11-13 21:19:13 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 3 minutes 37 seconds
Variants: generated 400, build-succeeded 237, build-failed 121, syntax-invalid 18, redundant 24
Fitness: max 1(1), min 0.49(1), ave 0.961
Test execution time: sum 30331 ms, max 234 ms, min 69 ms
----------------------------------------------------------------

2023-11-13 21:19:13 [main] [INFO]  KGenProgMain - entered the era of 84th generation.
2023-11-13 21:20:15 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 4 minutes 40 seconds
Variants: generated 400, build-succeeded 235, build-failed 120, syntax-invalid 26, redundant 19
Fitness: max 1(1), min 0.235(1), ave 0.961
Test execution time: sum 29519 ms, max 301 ms, min 68 ms
----------------------------------------------------------------

2023-11-13 21:20:15 [main] [INFO]  KGenProgMain - entered the era of 85th generation.
2023-11-13 21:21:23 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 5 minutes 47 seconds
Variants: generated 400, build-succeeded 247, build-failed 112, syntax-invalid 24, redundant 17
Fitness: max 0.98(217), min 0.353(1), ave 0.959
Test execution time: sum 31116 ms, max 298 ms, min 68 ms
----------------------------------------------------------------

2023-11-13 21:21:23 [main] [INFO]  KGenProgMain - entered the era of 86th generation.
2023-11-13 21:22:34 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 6 minutes 59 seconds
Variants: generated 400, build-succeeded 248, build-failed 111, syntax-invalid 20, redundant 21
Fitness: max 0.98(214), min 0.49(1), ave 0.961
Test execution time: sum 34283 ms, max 1582 ms, min 70 ms
----------------------------------------------------------------

2023-11-13 21:22:35 [main] [INFO]  KGenProgMain - entered the era of 87th generation.
2023-11-13 21:23:44 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 8 minutes 9 seconds
Variants: generated 400, build-succeeded 254, build-failed 114, syntax-invalid 10, redundant 22
Fitness: max 1(1), min 0.235(1), ave 0.956
Test execution time: sum 32070 ms, max 283 ms, min 68 ms
----------------------------------------------------------------

2023-11-13 21:23:44 [main] [INFO]  KGenProgMain - entered the era of 88th generation.
2023-11-13 21:24:48 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 9 minutes 13 seconds
Variants: generated 400, build-succeeded 259, build-failed 111, syntax-invalid 20, redundant 10
Fitness: max 1(1), min 0.353(1), ave 0.953
Test execution time: sum 31438 ms, max 283 ms, min 69 ms
----------------------------------------------------------------

2023-11-13 21:24:48 [main] [INFO]  KGenProgMain - entered the era of 89th generation.
2023-11-13 21:25:53 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 10 minutes 18 seconds
Variants: generated 400, build-succeeded 236, build-failed 121, syntax-invalid 25, redundant 18
Fitness: max 0.98(207), min 0.49(1), ave 0.963
Test execution time: sum 30044 ms, max 350 ms, min 83 ms
----------------------------------------------------------------

2023-11-13 21:25:53 [main] [INFO]  KGenProgMain - entered the era of 90th generation.
2023-11-13 21:26:59 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 11 minutes 23 seconds
Variants: generated 400, build-succeeded 238, build-failed 110, syntax-invalid 27, redundant 25
Fitness: max 1(2), min 0.216(1), ave 0.96
Test execution time: sum 30819 ms, max 511 ms, min 68 ms
----------------------------------------------------------------

2023-11-13 21:26:59 [main] [INFO]  KGenProgMain - entered the era of 91st generation.
2023-11-13 21:28:14 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 12 minutes 39 seconds
Variants: generated 400, build-succeeded 241, build-failed 113, syntax-invalid 30, redundant 16
Fitness: max 1(1), min 0.49(2), ave 0.955
Test execution time: sum 34774 ms, max 1710 ms, min 74 ms
----------------------------------------------------------------

2023-11-13 21:28:14 [main] [INFO]  KGenProgMain - entered the era of 92nd generation.
2023-11-13 21:29:30 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 13 minutes 54 seconds
Variants: generated 400, build-succeeded 252, build-failed 102, syntax-invalid 26, redundant 20
Fitness: max 0.98(217), min 0.235(1), ave 0.954
Test execution time: sum 33733 ms, max 350 ms, min 72 ms
----------------------------------------------------------------

2023-11-13 21:29:30 [main] [INFO]  KGenProgMain - entered the era of 93rd generation.
2023-11-13 21:30:44 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 15 minutes 9 seconds
Variants: generated 400, build-succeeded 235, build-failed 116, syntax-invalid 28, redundant 21
Fitness: max 0.98(209), min 0.49(1), ave 0.967
Test execution time: sum 31223 ms, max 299 ms, min 84 ms
----------------------------------------------------------------

2023-11-13 21:30:44 [main] [INFO]  KGenProgMain - entered the era of 94th generation.
2023-11-13 21:31:53 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 16 minutes 17 seconds
Variants: generated 400, build-succeeded 223, build-failed 115, syntax-invalid 31, redundant 31
Fitness: max 0.98(195), min 0.275(1), ave 0.958
Test execution time: sum 29550 ms, max 268 ms, min 67 ms
----------------------------------------------------------------

2023-11-13 21:31:53 [main] [INFO]  KGenProgMain - entered the era of 95th generation.
2023-11-13 21:32:59 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 17 minutes 24 seconds
Variants: generated 400, build-succeeded 227, build-failed 117, syntax-invalid 32, redundant 24
Fitness: max 0.98(201), min 0.49(4), ave 0.961
Test execution time: sum 29980 ms, max 584 ms, min 68 ms
----------------------------------------------------------------

2023-11-13 21:33:00 [main] [INFO]  KGenProgMain - entered the era of 96th generation.
2023-11-13 21:34:15 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 18 minutes 40 seconds
Variants: generated 400, build-succeeded 225, build-failed 123, syntax-invalid 32, redundant 20
Fitness: max 0.98(195), min 0.235(1), ave 0.958
Test execution time: sum 33011 ms, max 1930 ms, min 69 ms
----------------------------------------------------------------

2023-11-13 21:34:15 [main] [INFO]  KGenProgMain - entered the era of 97th generation.
2023-11-13 21:35:26 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 19 minutes 50 seconds
Variants: generated 400, build-succeeded 234, build-failed 112, syntax-invalid 39, redundant 15
Fitness: max 0.98(203), min 0.471(2), ave 0.953
Test execution time: sum 32926 ms, max 1401 ms, min 65 ms
----------------------------------------------------------------

2023-11-13 21:35:26 [main] [INFO]  KGenProgMain - entered the era of 98th generation.
2023-11-13 21:36:44 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 21 minutes 8 seconds
Variants: generated 400, build-succeeded 248, build-failed 110, syntax-invalid 26, redundant 16
Fitness: max 0.98(216), min 0.353(1), ave 0.964
Test execution time: sum 35061 ms, max 915 ms, min 72 ms
----------------------------------------------------------------

2023-11-13 21:36:44 [main] [INFO]  KGenProgMain - entered the era of 99th generation.
2023-11-13 21:38:03 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 22 minutes 28 seconds
Variants: generated 400, build-succeeded 245, build-failed 114, syntax-invalid 20, redundant 21
Fitness: max 0.98(211), min 0.49(1), ave 0.961
Test execution time: sum 34566 ms, max 506 ms, min 71 ms
----------------------------------------------------------------

2023-11-13 21:38:03 [main] [INFO]  KGenProgMain - entered the era of 100th generation.
2023-11-13 21:39:23 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 23 minutes 48 seconds
Variants: generated 400, build-succeeded 234, build-failed 126, syntax-invalid 22, redundant 18
Fitness: max 1(1), min 0.49(1), ave 0.965
Test execution time: sum 35095 ms, max 747 ms, min 72 ms
----------------------------------------------------------------

2023-11-13 21:39:23 [main] [INFO]  KGenProgMain - entered the era of 101st generation.
2023-11-13 21:40:43 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 25 minutes 7 seconds
Variants: generated 400, build-succeeded 235, build-failed 121, syntax-invalid 18, redundant 26
Fitness: max 0.98(208), min 0.49(1), ave 0.964
Test execution time: sum 35098 ms, max 1588 ms, min 76 ms
----------------------------------------------------------------

2023-11-13 21:40:43 [main] [INFO]  KGenProgMain - entered the era of 102nd generation.
2023-11-13 21:41:56 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 26 minutes 21 seconds
Variants: generated 400, build-succeeded 231, build-failed 119, syntax-invalid 31, redundant 19
Fitness: max 1(1), min 0.471(1), ave 0.959
Test execution time: sum 31988 ms, max 722 ms, min 71 ms
----------------------------------------------------------------

2023-11-13 21:41:56 [main] [INFO]  KGenProgMain - entered the era of 103rd generation.
2023-11-13 21:43:11 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 27 minutes 35 seconds
Variants: generated 400, build-succeeded 226, build-failed 119, syntax-invalid 33, redundant 22
Fitness: max 0.98(201), min 0.235(1), ave 0.958
Test execution time: sum 31906 ms, max 343 ms, min 72 ms
----------------------------------------------------------------

2023-11-13 21:43:11 [main] [INFO]  KGenProgMain - entered the era of 104th generation.
2023-11-13 21:44:25 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 28 minutes 49 seconds
Variants: generated 400, build-succeeded 226, build-failed 110, syntax-invalid 45, redundant 19
Fitness: max 0.98(200), min 0.471(1), ave 0.964
Test execution time: sum 31639 ms, max 319 ms, min 86 ms
----------------------------------------------------------------

2023-11-13 21:44:25 [main] [INFO]  KGenProgMain - entered the era of 105th generation.
2023-11-13 21:45:44 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 30 minutes 8 seconds
Variants: generated 400, build-succeeded 234, build-failed 124, syntax-invalid 30, redundant 12
Fitness: max 0.98(206), min 0.275(1), ave 0.957
Test execution time: sum 32995 ms, max 401 ms, min 71 ms
----------------------------------------------------------------

2023-11-13 21:45:44 [main] [INFO]  KGenProgMain - entered the era of 106th generation.
2023-11-13 21:46:59 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 31 minutes 23 seconds
Variants: generated 400, build-succeeded 215, build-failed 115, syntax-invalid 47, redundant 23
Fitness: max 0.98(185), min 0.49(1), ave 0.958
Test execution time: sum 30148 ms, max 342 ms, min 73 ms
----------------------------------------------------------------

2023-11-13 21:46:59 [main] [INFO]  KGenProgMain - entered the era of 107th generation.
2023-11-13 21:48:24 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 32 minutes 48 seconds
Variants: generated 400, build-succeeded 244, build-failed 109, syntax-invalid 32, redundant 15
Fitness: max 0.98(214), min 0.216(1), ave 0.955
Test execution time: sum 36754 ms, max 1863 ms, min 81 ms
----------------------------------------------------------------

2023-11-13 21:48:24 [main] [INFO]  KGenProgMain - entered the era of 108th generation.
2023-11-13 21:49:47 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 34 minutes 11 seconds
Variants: generated 400, build-succeeded 216, build-failed 113, syntax-invalid 49, redundant 22
Fitness: max 0.98(191), min 0.451(1), ave 0.961
Test execution time: sum 33933 ms, max 1545 ms, min 72 ms
----------------------------------------------------------------

2023-11-13 21:49:47 [main] [INFO]  KGenProgMain - entered the era of 109th generation.
2023-11-13 21:51:12 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 35 minutes 36 seconds
Variants: generated 400, build-succeeded 233, build-failed 114, syntax-invalid 34, redundant 19
Fitness: max 0.98(208), min 0.667(2), ave 0.968
Test execution time: sum 34308 ms, max 333 ms, min 93 ms
----------------------------------------------------------------

2023-11-13 21:51:12 [main] [INFO]  KGenProgMain - entered the era of 110th generation.
2023-11-13 21:52:37 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 37 minutes 2 seconds
Variants: generated 400, build-succeeded 245, build-failed 117, syntax-invalid 24, redundant 14
Fitness: max 0.98(213), min 0.549(1), ave 0.963
Test execution time: sum 35192 ms, max 578 ms, min 77 ms
----------------------------------------------------------------

2023-11-13 21:52:37 [main] [INFO]  KGenProgMain - entered the era of 111th generation.
2023-11-13 21:53:58 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 38 minutes 22 seconds
Variants: generated 400, build-succeeded 226, build-failed 111, syntax-invalid 42, redundant 21
Fitness: max 1(2), min 0.353(1), ave 0.959
Test execution time: sum 32600 ms, max 437 ms, min 70 ms
----------------------------------------------------------------

2023-11-13 21:53:58 [main] [INFO]  KGenProgMain - entered the era of 112th generation.
2023-11-13 21:55:26 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 39 minutes 50 seconds
Variants: generated 400, build-succeeded 242, build-failed 128, syntax-invalid 20, redundant 10
Fitness: max 0.98(214), min 0.353(1), ave 0.966
Test execution time: sum 37462 ms, max 1605 ms, min 101 ms
----------------------------------------------------------------

2023-11-13 21:55:26 [main] [INFO]  KGenProgMain - entered the era of 113th generation.
2023-11-13 21:56:43 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 41 minutes 8 seconds
Variants: generated 400, build-succeeded 235, build-failed 123, syntax-invalid 28, redundant 14
Fitness: max 0.98(212), min 0.353(1), ave 0.964
Test execution time: sum 33702 ms, max 906 ms, min 74 ms
----------------------------------------------------------------

2023-11-13 21:56:43 [main] [INFO]  KGenProgMain - entered the era of 114th generation.
2023-11-13 21:58:07 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 42 minutes 31 seconds
Variants: generated 400, build-succeeded 238, build-failed 122, syntax-invalid 23, redundant 17
Fitness: max 0.98(214), min 0.353(1), ave 0.962
Test execution time: sum 35528 ms, max 572 ms, min 73 ms
----------------------------------------------------------------

2023-11-13 21:58:07 [main] [INFO]  KGenProgMain - entered the era of 115th generation.
2023-11-13 21:59:40 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 44 minutes 4 seconds
Variants: generated 400, build-succeeded 236, build-failed 125, syntax-invalid 26, redundant 13
Fitness: max 1(1), min 0.549(1), ave 0.97
Test execution time: sum 37714 ms, max 765 ms, min 89 ms
----------------------------------------------------------------

2023-11-13 21:59:40 [main] [INFO]  KGenProgMain - entered the era of 116th generation.
2023-11-13 22:01:08 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 45 minutes 32 seconds
Variants: generated 400, build-succeeded 249, build-failed 113, syntax-invalid 20, redundant 18
Fitness: max 0.98(220), min 0.49(2), ave 0.959
Test execution time: sum 37377 ms, max 461 ms, min 77 ms
----------------------------------------------------------------

2023-11-13 22:01:08 [main] [INFO]  KGenProgMain - entered the era of 117th generation.
2023-11-13 22:02:37 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 47 minutes 2 seconds
Variants: generated 400, build-succeeded 240, build-failed 109, syntax-invalid 35, redundant 16
Fitness: max 0.98(213), min 0.157(1), ave 0.958
Test execution time: sum 35918 ms, max 607 ms, min 70 ms
----------------------------------------------------------------

2023-11-13 22:02:37 [main] [INFO]  KGenProgMain - entered the era of 118th generation.
2023-11-13 22:04:07 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 48 minutes 31 seconds
Variants: generated 400, build-succeeded 240, build-failed 116, syntax-invalid 30, redundant 14
Fitness: max 0.98(201), min 0.235(1), ave 0.948
Test execution time: sum 38521 ms, max 1683 ms, min 76 ms
----------------------------------------------------------------

2023-11-13 22:04:07 [main] [INFO]  KGenProgMain - entered the era of 119th generation.
2023-11-13 22:05:37 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 50 minutes 1 seconds
Variants: generated 400, build-succeeded 230, build-failed 115, syntax-invalid 35, redundant 20
Fitness: max 0.98(205), min 0.49(2), ave 0.96
Test execution time: sum 37612 ms, max 1671 ms, min 74 ms
----------------------------------------------------------------

2023-11-13 22:05:37 [main] [INFO]  KGenProgMain - entered the era of 120th generation.
2023-11-13 22:06:56 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 51 minutes 21 seconds
Variants: generated 400, build-succeeded 238, build-failed 120, syntax-invalid 21, redundant 21
Fitness: max 0.98(211), min 0.216(1), ave 0.96
Test execution time: sum 32788 ms, max 615 ms, min 60 ms
----------------------------------------------------------------

2023-11-13 22:06:56 [main] [INFO]  KGenProgMain - entered the era of 121st generation.
2023-11-13 22:08:34 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 52 minutes 58 seconds
Variants: generated 400, build-succeeded 246, build-failed 115, syntax-invalid 22, redundant 17
Fitness: max 0.98(219), min 0.49(3), ave 0.962
Test execution time: sum 45739 ms, max 3095 ms, min 59 ms
----------------------------------------------------------------

2023-11-13 22:08:34 [main] [INFO]  KGenProgMain - entered the era of 122nd generation.
2023-11-13 22:10:04 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 54 minutes 28 seconds
Variants: generated 400, build-succeeded 227, build-failed 120, syntax-invalid 32, redundant 21
Fitness: max 0.98(206), min 0.157(1), ave 0.962
Test execution time: sum 35961 ms, max 767 ms, min 59 ms
----------------------------------------------------------------

2023-11-13 22:10:04 [main] [INFO]  KGenProgMain - entered the era of 123rd generation.
2023-11-13 22:11:33 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 55 minutes 57 seconds
Variants: generated 400, build-succeeded 238, build-failed 126, syntax-invalid 19, redundant 17
Fitness: max 1(1), min 0.549(1), ave 0.97
Test execution time: sum 36105 ms, max 674 ms, min 77 ms
----------------------------------------------------------------

2023-11-13 22:11:33 [main] [INFO]  KGenProgMain - entered the era of 124th generation.
2023-11-13 22:12:59 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 57 minutes 23 seconds
Variants: generated 400, build-succeeded 228, build-failed 130, syntax-invalid 29, redundant 13
Fitness: max 0.98(204), min 0.235(1), ave 0.96
Test execution time: sum 34563 ms, max 1216 ms, min 58 ms
----------------------------------------------------------------

2023-11-13 22:12:59 [main] [INFO]  KGenProgMain - entered the era of 125th generation.
2023-11-13 22:14:27 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 58 minutes 51 seconds
Variants: generated 400, build-succeeded 246, build-failed 109, syntax-invalid 32, redundant 13
Fitness: max 0.98(212), min 0.353(1), ave 0.958
Test execution time: sum 35590 ms, max 736 ms, min 65 ms
----------------------------------------------------------------

2023-11-13 22:14:27 [main] [INFO]  KGenProgMain - entered the era of 126th generation.
2023-11-13 22:15:56 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 20 seconds
Variants: generated 400, build-succeeded 241, build-failed 110, syntax-invalid 34, redundant 15
Fitness: max 1(2), min 0.314(1), ave 0.959
Test execution time: sum 36539 ms, max 937 ms, min 59 ms
----------------------------------------------------------------

2023-11-13 22:15:56 [main] [INFO]  KGenProgMain - entered the era of 127th generation.
2023-11-13 22:17:25 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 1 minutes 49 seconds
Variants: generated 400, build-succeeded 229, build-failed 116, syntax-invalid 38, redundant 17
Fitness: max 1(1), min 0.49(1), ave 0.959
Test execution time: sum 35282 ms, max 632 ms, min 66 ms
----------------------------------------------------------------

2023-11-13 22:17:25 [main] [INFO]  KGenProgMain - entered the era of 128th generation.
2023-11-13 22:18:49 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 3 minutes 13 seconds
Variants: generated 400, build-succeeded 232, build-failed 123, syntax-invalid 29, redundant 16
Fitness: max 0.98(200), min 0.235(1), ave 0.956
Test execution time: sum 34685 ms, max 744 ms, min 60 ms
----------------------------------------------------------------

2023-11-13 22:18:49 [main] [INFO]  KGenProgMain - entered the era of 129th generation.
2023-11-13 22:20:22 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 4 minutes 46 seconds
Variants: generated 400, build-succeeded 241, build-failed 123, syntax-invalid 18, redundant 18
Fitness: max 1(1), min 0.49(1), ave 0.965
Test execution time: sum 37828 ms, max 1257 ms, min 58 ms
----------------------------------------------------------------

2023-11-13 22:20:22 [main] [INFO]  KGenProgMain - entered the era of 130th generation.
2023-11-13 22:21:55 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 6 minutes 19 seconds
Variants: generated 400, build-succeeded 240, build-failed 116, syntax-invalid 30, redundant 14
Fitness: max 0.98(211), min 0.353(1), ave 0.958
Test execution time: sum 36892 ms, max 1120 ms, min 59 ms
----------------------------------------------------------------

2023-11-13 22:21:55 [main] [INFO]  KGenProgMain - entered the era of 131st generation.
2023-11-13 22:23:39 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 8 minutes 3 seconds
Variants: generated 400, build-succeeded 220, build-failed 123, syntax-invalid 40, redundant 17
Fitness: max 0.98(197), min 0.216(1), ave 0.956
Test execution time: sum 44942 ms, max 1354 ms, min 60 ms
----------------------------------------------------------------

2023-11-13 22:23:39 [main] [INFO]  KGenProgMain - entered the era of 132nd generation.
2023-11-13 22:25:06 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 9 minutes 30 seconds
Variants: generated 351, build-succeeded 189, build-failed 118, syntax-invalid 25, redundant 19
Fitness: max 1(2), min 0.49(1), ave 0.959
Test execution time: sum 37497 ms, max 1649 ms, min 71 ms
----------------------------------------------------------------

2023-11-13 22:25:06 [main] [INFO]  KGenProgMain - GA stopped
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v49)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v49)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v49)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -973,7 +973,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v49)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v49)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v49)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v49)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v50)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v50)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v50)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -979,7 +979,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v50)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v50)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v50)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v50)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v626)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v626)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v626)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -383,7 +383,6 @@
         if (buffer == null) {
             buffer = new byte[DEFAULT_BUFFER_SIZE];
             pos = 0;
-            readPos = 0;
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
             System.arraycopy(buffer, 0, b, 0, buffer.length);
@@ -978,7 +977,7 @@
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
-            if (!lenChunksPerfectly) {
+            if (pArray == null || pArray.length == 0) {
                 len += chunkSeparator.length;
             }
         }
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v626)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v626)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v626)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v626)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v2159)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v2159)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v2159)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -979,7 +979,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
@@ -1052,9 +1051,9 @@
     private void reset() {
         buffer = null;
         pos = 0;
-        readPos = 0;
         currentLinePos = 0;
-        modulus = 0;
+        currentLinePos = 0;
+		modulus = 0;
         eof = false;
     }
 
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v2159)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v2159)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v2159)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v2159)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v2452)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v2452)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v2452)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -383,7 +383,6 @@
         if (buffer == null) {
             buffer = new byte[DEFAULT_BUFFER_SIZE];
             pos = 0;
-            readPos = 0;
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
             System.arraycopy(buffer, 0, b, 0, buffer.length);
@@ -967,13 +966,9 @@
      *         a long since a max-len array will require Integer.MAX_VALUE + 33%.
      */
     private static long getEncodeLength(byte[] pArray, int chunkSize, byte[] chunkSeparator) {
-        // base64 always encodes to multiples of 4.
-        chunkSize = (chunkSize / 4) * 4;
-
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v2452)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v2452)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v2452)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v2452)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -237,10 +237,8 @@
      *             The provided lineSeparator included some Base32 characters. That's not going to work!
      */
     public Base32(int lineLength, byte[] lineSeparator, boolean useHex) {
-        if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
-        }
+        if (lineSeparator == null)
+			buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
         this.lineLength = lineLength > 0 ? (lineLength / BYTES_PER_ENCODED_BLOCK) * BYTES_PER_ENCODED_BLOCK : 0;
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v2452)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v2518)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v2518)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v2518)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -409,7 +409,6 @@
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
-                buffer = null;
             }
             return len;
         }
@@ -967,13 +966,9 @@
      *         a long since a max-len array will require Integer.MAX_VALUE + 33%.
      */
     private static long getEncodeLength(byte[] pArray, int chunkSize, byte[] chunkSeparator) {
-        // base64 always encodes to multiples of 4.
-        chunkSize = (chunkSize / 4) * 4;
-
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
@@ -1054,7 +1049,8 @@
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
-        modulus = 0;
+        currentLinePos = 0;
+		modulus = 0;
         eof = false;
     }
 
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v2518)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v2518)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v2518)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v2518)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v2532)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v2532)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v2532)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -382,6 +382,7 @@
     private void resizeBuffer() {
         if (buffer == null) {
             buffer = new byte[DEFAULT_BUFFER_SIZE];
+			String sep = StringUtils.newStringUtf8(lineSeparator);
             pos = 0;
             readPos = 0;
         } else {
@@ -409,7 +410,6 @@
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
-                buffer = null;
             }
             return len;
         }
@@ -979,7 +979,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v2532)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v2532)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v2532)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v2532)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v2651)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v2651)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v2651)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -409,7 +409,6 @@
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
-                buffer = null;
             }
             return len;
         }
@@ -967,13 +966,9 @@
      *         a long since a max-len array will require Integer.MAX_VALUE + 33%.
      */
     private static long getEncodeLength(byte[] pArray, int chunkSize, byte[] chunkSeparator) {
-        // base64 always encodes to multiples of 4.
-        chunkSize = (chunkSize / 4) * 4;
-
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v2651)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v2651)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v2651)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v2651)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v2760)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v2760)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v2760)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -826,7 +826,8 @@
 
         long len = getEncodeLength(binaryData, MIME_CHUNK_SIZE, CHUNK_SEPARATOR);
         if (len > maxResultSize) {
-            throw new IllegalArgumentException("Input array too big, the output array would be bigger (" +
+            int bytesCopied = 0;
+			throw new IllegalArgumentException("Input array too big, the output array would be bigger (" +
                 len +
                 ") than the specified maxium size of " +
                 maxResultSize);
@@ -973,7 +974,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
@@ -1052,7 +1052,6 @@
     private void reset() {
         buffer = null;
         pos = 0;
-        readPos = 0;
         currentLinePos = 0;
         modulus = 0;
         eof = false;
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v2760)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v2760)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v2760)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v2760)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v3066)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v3066)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v3066)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -448,7 +448,8 @@
             switch (modulus) {
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
-                    buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
+				resizeBuffer();
+				buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buffer[pos++] = PAD;
@@ -967,13 +968,9 @@
      *         a long since a max-len array will require Integer.MAX_VALUE + 33%.
      */
     private static long getEncodeLength(byte[] pArray, int chunkSize, byte[] chunkSeparator) {
-        // base64 always encodes to multiples of 4.
-        chunkSize = (chunkSize / 4) * 4;
-
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
@@ -1052,7 +1049,6 @@
     private void reset() {
         buffer = null;
         pos = 0;
-        readPos = 0;
         currentLinePos = 0;
         modulus = 0;
         eof = false;
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v3066)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v3066)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v3066)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v3066)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v3378)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v3378)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v3378)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -448,7 +448,8 @@
             switch (modulus) {
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
-                    buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
+				resizeBuffer();
+				buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buffer[pos++] = PAD;
@@ -973,7 +974,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v3378)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v3378)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v3378)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v3378)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -243,7 +243,6 @@
         }
         this.lineLength = lineLength > 0 ? (lineLength / BYTES_PER_ENCODED_BLOCK) * BYTES_PER_ENCODED_BLOCK : 0;
         this.lineSeparator = new byte[lineSeparator.length];
-        System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
         } else {
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v3378)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v4051)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v4051)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v4051)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -411,7 +411,8 @@
             if (readPos >= pos) {
                 buffer = null;
             }
-            return len;
+            resizeBuffer();
+			return len;
         }
         return eof ? -1 : 0;
     }
@@ -967,9 +968,6 @@
      *         a long since a max-len array will require Integer.MAX_VALUE + 33%.
      */
     private static long getEncodeLength(byte[] pArray, int chunkSize, byte[] chunkSeparator) {
-        // base64 always encodes to multiples of 4.
-        chunkSize = (chunkSize / 4) * 4;
-
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
@@ -979,7 +977,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
@@ -1054,7 +1051,8 @@
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
-        modulus = 0;
+        currentLinePos = 0;
+		modulus = 0;
         eof = false;
     }
 
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v4051)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v4051)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v4051)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v4051)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -237,10 +237,8 @@
      *             The provided lineSeparator included some Base32 characters. That's not going to work!
      */
     public Base32(int lineLength, byte[] lineSeparator, boolean useHex) {
-        if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
-        }
+        if (lineSeparator == null)
+			buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
         this.lineLength = lineLength > 0 ? (lineLength / BYTES_PER_ENCODED_BLOCK) * BYTES_PER_ENCODED_BLOCK : 0;
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v4051)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v4231)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v4231)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v4231)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -332,7 +332,8 @@
     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            lineLength = 0;
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -451,8 +452,9 @@
                     buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
+                        resizeBuffer();
+						buffer[pos++] = PAD;
                         buffer[pos++] = PAD;
-                        buffer[pos++] = PAD;
                     }
                     break;
 
@@ -494,6 +496,7 @@
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
                         currentLinePos = 0;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -973,7 +976,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v4231)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v4231)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v4231)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v4231)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v4982)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v4982)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v4982)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -494,6 +494,7 @@
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
                         currentLinePos = 0;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -967,13 +968,9 @@
      *         a long since a max-len array will require Integer.MAX_VALUE + 33%.
      */
     private static long getEncodeLength(byte[] pArray, int chunkSize, byte[] chunkSeparator) {
-        // base64 always encodes to multiples of 4.
-        chunkSize = (chunkSize / 4) * 4;
-
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
@@ -1052,7 +1049,6 @@
     private void reset() {
         buffer = null;
         pos = 0;
-        readPos = 0;
         currentLinePos = 0;
         modulus = 0;
         eof = false;
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v4982)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v4982)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v4982)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v4982)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v5292)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v5292)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v5292)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -451,8 +451,9 @@
                     buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
+                        resizeBuffer();
+						buffer[pos++] = PAD;
                         buffer[pos++] = PAD;
-                        buffer[pos++] = PAD;
                     }
                     break;
 
@@ -979,7 +980,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
@@ -1052,7 +1052,6 @@
     private void reset() {
         buffer = null;
         pos = 0;
-        readPos = 0;
         currentLinePos = 0;
         modulus = 0;
         eof = false;
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v5292)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v5292)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v5292)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v5292)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -243,7 +243,6 @@
         }
         this.lineLength = lineLength > 0 ? (lineLength / BYTES_PER_ENCODED_BLOCK) * BYTES_PER_ENCODED_BLOCK : 0;
         this.lineSeparator = new byte[lineSeparator.length];
-        System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
         } else {
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v5292)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v5912)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v5912)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v5912)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -448,7 +448,8 @@
             switch (modulus) {
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
-                    buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
+				resizeBuffer();
+				buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buffer[pos++] = PAD;
@@ -973,11 +974,9 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
-            len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
                 len += chunkSeparator.length;
             }
@@ -1052,7 +1051,6 @@
     private void reset() {
         buffer = null;
         pos = 0;
-        readPos = 0;
         currentLinePos = 0;
         modulus = 0;
         eof = false;
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v5912)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v5912)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v5912)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v5912)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v6139)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v6139)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v6139)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -973,11 +973,9 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
-            len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
                 len += chunkSeparator.length;
             }
@@ -1054,7 +1052,9 @@
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
-        modulus = 0;
+        currentLinePos = 0;
+		currentLinePos = 0;
+		modulus = 0;
         eof = false;
     }
 
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v6139)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v6139)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v6139)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v6139)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v7205)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v7205)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v7205)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -448,7 +448,8 @@
             switch (modulus) {
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
-                    buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
+				resizeBuffer();
+				buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buffer[pos++] = PAD;
@@ -494,6 +495,7 @@
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
                         currentLinePos = 0;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -973,7 +975,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
@@ -1054,7 +1055,8 @@
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
-        modulus = 0;
+        currentLinePos = 0;
+		modulus = 0;
         eof = false;
     }
 
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v7205)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v7205)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v7205)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v7205)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -237,10 +237,8 @@
      *             The provided lineSeparator included some Base32 characters. That's not going to work!
      */
     public Base32(int lineLength, byte[] lineSeparator, boolean useHex) {
-        if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
-        }
+        if (lineSeparator == null)
+			buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
         this.lineLength = lineLength > 0 ? (lineLength / BYTES_PER_ENCODED_BLOCK) * BYTES_PER_ENCODED_BLOCK : 0;
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v7205)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v7610)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v7610)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v7610)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -382,6 +382,7 @@
     private void resizeBuffer() {
         if (buffer == null) {
             buffer = new byte[DEFAULT_BUFFER_SIZE];
+			String sep = StringUtils.newStringUtf8(lineSeparator);
             pos = 0;
             readPos = 0;
         } else {
@@ -448,7 +449,8 @@
             switch (modulus) {
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
-                    buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
+				resizeBuffer();
+				buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buffer[pos++] = PAD;
@@ -493,7 +495,44 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+                        {
+							if (buffer == null || buffer.length - pos < decodeSize) {
+								resizeBuffer();
+							}
+							switch (modulus) {
+							case 2:
+								buffer[pos++] = (byte) ((x >> 2) & MASK_8BITS);
+								break;
+							case 3:
+								buffer[pos++] = (byte) ((x >> 7) & MASK_8BITS);
+								break;
+							case 4:
+								x = x >> 4;
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 5:
+								x = x >> 1;
+								buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 6:
+								x = x >> 6;
+								buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 7:
+								x = x >> 3;
+								buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							}
+						}
+						currentLinePos = 0;
                     }
                 }
             }
@@ -967,13 +1006,9 @@
      *         a long since a max-len array will require Integer.MAX_VALUE + 33%.
      */
     private static long getEncodeLength(byte[] pArray, int chunkSize, byte[] chunkSeparator) {
-        // base64 always encodes to multiples of 4.
-        chunkSize = (chunkSize / 4) * 4;
-
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
@@ -1054,7 +1089,8 @@
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
-        modulus = 0;
+        currentLinePos = 0;
+		modulus = 0;
         eof = false;
     }
 
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v7610)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v7610)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v7610)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v7610)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v7680)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v7680)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v7680)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -409,9 +409,9 @@
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
-                buffer = null;
             }
-            return len;
+            resizeBuffer();
+			return len;
         }
         return eof ? -1 : 0;
     }
@@ -967,18 +967,14 @@
      *         a long since a max-len array will require Integer.MAX_VALUE + 33%.
      */
     private static long getEncodeLength(byte[] pArray, int chunkSize, byte[] chunkSeparator) {
-        // base64 always encodes to multiples of 4.
-        chunkSize = (chunkSize / 4) * 4;
-
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
-            if (!lenChunksPerfectly) {
+            if (mod != 0) {
                 len += chunkSeparator.length;
             }
         }
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v7680)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v7680)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v7680)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v7680)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -237,10 +237,8 @@
      *             The provided lineSeparator included some Base32 characters. That's not going to work!
      */
     public Base32(int lineLength, byte[] lineSeparator, boolean useHex) {
-        if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
-        }
+        if (lineSeparator == null)
+			buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
         this.lineLength = lineLength > 0 ? (lineLength / BYTES_PER_ENCODED_BLOCK) * BYTES_PER_ENCODED_BLOCK : 0;
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v7680)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v9233)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v9233)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v9233)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -494,6 +494,8 @@
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
                         currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -973,7 +975,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
@@ -1052,9 +1053,9 @@
     private void reset() {
         buffer = null;
         pos = 0;
-        readPos = 0;
         currentLinePos = 0;
-        modulus = 0;
+        currentLinePos = 0;
+		modulus = 0;
         eof = false;
     }
 
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v9233)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v9233)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v9233)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v9233)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -237,10 +237,8 @@
      *             The provided lineSeparator included some Base32 characters. That's not going to work!
      */
     public Base32(int lineLength, byte[] lineSeparator, boolean useHex) {
-        if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
-        }
+        if (lineSeparator == null)
+			buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
         this.lineLength = lineLength > 0 ? (lineLength / BYTES_PER_ENCODED_BLOCK) * BYTES_PER_ENCODED_BLOCK : 0;
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v9233)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v9727)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v9727)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v9727)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -382,6 +382,7 @@
     private void resizeBuffer() {
         if (buffer == null) {
             buffer = new byte[DEFAULT_BUFFER_SIZE];
+			String sep = StringUtils.newStringUtf8(lineSeparator);
             pos = 0;
             readPos = 0;
         } else {
@@ -411,7 +412,9 @@
             if (readPos >= pos) {
                 buffer = null;
             }
-            return len;
+            resizeBuffer();
+			resizeBuffer();
+			return len;
         }
         return eof ? -1 : 0;
     }
@@ -448,7 +451,8 @@
             switch (modulus) {
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
-                    buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
+				resizeBuffer();
+				buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buffer[pos++] = PAD;
@@ -973,12 +977,11 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
-            if (!lenChunksPerfectly) {
+            if (mod != 0) {
                 len += chunkSeparator.length;
             }
         }
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v9727)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v9727)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v9727)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v9727)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v10243)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v10243)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v10243)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -411,7 +411,9 @@
             if (readPos >= pos) {
                 buffer = null;
             }
-            return len;
+            resizeBuffer();
+			resizeBuffer();
+			return len;
         }
         return eof ? -1 : 0;
     }
@@ -493,7 +495,45 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+                        byte[] buf = new byte[pos - readPos];
+						{
+							if (buffer == null || buffer.length - pos < decodeSize) {
+								resizeBuffer();
+							}
+							switch (modulus) {
+							case 2:
+								buffer[pos++] = (byte) ((x >> 2) & MASK_8BITS);
+								break;
+							case 3:
+								buffer[pos++] = (byte) ((x >> 7) & MASK_8BITS);
+								break;
+							case 4:
+								x = x >> 4;
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 5:
+								x = x >> 1;
+								buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 6:
+								x = x >> 6;
+								buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 7:
+								x = x >> 3;
+								buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							}
+						}
+						currentLinePos = 0;
                     }
                 }
             }
@@ -973,7 +1013,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v10243)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v10243)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v10243)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v10243)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -243,7 +243,6 @@
         }
         this.lineLength = lineLength > 0 ? (lineLength / BYTES_PER_ENCODED_BLOCK) * BYTES_PER_ENCODED_BLOCK : 0;
         this.lineSeparator = new byte[lineSeparator.length];
-        System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
         } else {
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v10243)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v10450)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v10450)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v10450)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -383,7 +383,6 @@
         if (buffer == null) {
             buffer = new byte[DEFAULT_BUFFER_SIZE];
             pos = 0;
-            readPos = 0;
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
             System.arraycopy(buffer, 0, b, 0, buffer.length);
@@ -411,7 +410,8 @@
             if (readPos >= pos) {
                 buffer = null;
             }
-            return len;
+            resizeBuffer();
+			return len;
         }
         return eof ? -1 : 0;
     }
@@ -973,11 +973,9 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
-            len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
                 len += chunkSeparator.length;
             }
@@ -1054,7 +1052,9 @@
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
-        modulus = 0;
+        currentLinePos = 0;
+		currentLinePos = 0;
+		modulus = 0;
         eof = false;
     }
 
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v10450)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v10450)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v10450)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v10450)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v11261)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v11261)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v11261)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -382,6 +382,7 @@
     private void resizeBuffer() {
         if (buffer == null) {
             buffer = new byte[DEFAULT_BUFFER_SIZE];
+			String sep = StringUtils.newStringUtf8(lineSeparator);
             pos = 0;
             readPos = 0;
         } else {
@@ -441,7 +442,6 @@
         // inAvail < 0 is how we're informed of EOF in the underlying data we're
         // encoding.
         if (inAvail < 0) {
-            eof = true;
             if (buffer == null || buffer.length - pos < encodeSize) {
                 resizeBuffer();
             }
@@ -494,6 +494,7 @@
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
                         currentLinePos = 0;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -826,7 +827,8 @@
 
         long len = getEncodeLength(binaryData, MIME_CHUNK_SIZE, CHUNK_SEPARATOR);
         if (len > maxResultSize) {
-            throw new IllegalArgumentException("Input array too big, the output array would be bigger (" +
+            int bytesCopied = 0;
+			throw new IllegalArgumentException("Input array too big, the output array would be bigger (" +
                 len +
                 ") than the specified maxium size of " +
                 maxResultSize);
@@ -979,7 +981,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
@@ -1054,7 +1055,8 @@
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
-        modulus = 0;
+        currentLinePos = 0;
+		modulus = 0;
         eof = false;
     }
 
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v11261)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v11261)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v11261)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v11261)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v14308)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v14308)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v14308)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -441,14 +441,14 @@
         // inAvail < 0 is how we're informed of EOF in the underlying data we're
         // encoding.
         if (inAvail < 0) {
-            eof = true;
             if (buffer == null || buffer.length - pos < encodeSize) {
                 resizeBuffer();
             }
             switch (modulus) {
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
-                    buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
+				resizeBuffer();
+				buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buffer[pos++] = PAD;
@@ -493,7 +493,44 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+                        {
+							if (buffer == null || buffer.length - pos < decodeSize) {
+								resizeBuffer();
+							}
+							switch (modulus) {
+							case 2:
+								buffer[pos++] = (byte) ((x >> 2) & MASK_8BITS);
+								break;
+							case 3:
+								buffer[pos++] = (byte) ((x >> 7) & MASK_8BITS);
+								break;
+							case 4:
+								x = x >> 4;
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 5:
+								x = x >> 1;
+								buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 6:
+								x = x >> 6;
+								buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 7:
+								x = x >> 3;
+								buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							}
+						}
+						currentLinePos = 0;
                     }
                 }
             }
@@ -973,7 +1010,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
@@ -1054,7 +1090,9 @@
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
-        modulus = 0;
+        currentLinePos = 0;
+		currentLinePos = 0;
+		modulus = 0;
         eof = false;
     }
 
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v14308)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v14308)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v14308)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v14308)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v14336)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v14336)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v14336)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -448,7 +448,8 @@
             switch (modulus) {
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
-                    buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
+				resizeBuffer();
+				buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buffer[pos++] = PAD;
@@ -471,7 +472,9 @@
             byte b = lineSeparator[lineSeparator.length - 1];
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
-                pos += lineSeparator.length;
+                eof = false;
+				pos += lineSeparator.length;
+				resizeBuffer();
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
@@ -973,7 +976,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
@@ -1054,7 +1056,9 @@
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
-        modulus = 0;
+        currentLinePos = 0;
+		currentLinePos = 0;
+		modulus = 0;
         eof = false;
     }
 
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v14336)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v14336)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v14336)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v14336)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -243,7 +243,6 @@
         }
         this.lineLength = lineLength > 0 ? (lineLength / BYTES_PER_ENCODED_BLOCK) * BYTES_PER_ENCODED_BLOCK : 0;
         this.lineSeparator = new byte[lineSeparator.length];
-        System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
         } else {
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v14336)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v14338)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v14338)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v14338)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -409,9 +409,9 @@
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
-                buffer = null;
             }
-            return len;
+            resizeBuffer();
+			return len;
         }
         return eof ? -1 : 0;
     }
@@ -441,14 +441,14 @@
         // inAvail < 0 is how we're informed of EOF in the underlying data we're
         // encoding.
         if (inAvail < 0) {
-            eof = true;
             if (buffer == null || buffer.length - pos < encodeSize) {
                 resizeBuffer();
             }
             switch (modulus) {
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
-                    buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
+				resizeBuffer();
+				buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buffer[pos++] = PAD;
@@ -973,7 +973,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
@@ -1054,7 +1053,8 @@
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
-        modulus = 0;
+        currentLinePos = 0;
+		modulus = 0;
         eof = false;
     }
 
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v14338)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v14338)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v14338)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v14338)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v15037)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v15037)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v15037)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -411,7 +411,8 @@
             if (readPos >= pos) {
                 buffer = null;
             }
-            return len;
+            resizeBuffer();
+			return len;
         }
         return eof ? -1 : 0;
     }
@@ -451,8 +452,19 @@
                     buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
+                        switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						buffer[pos++] = PAD;
                         buffer[pos++] = PAD;
-                        buffer[pos++] = PAD;
                     }
                     break;
 
@@ -493,7 +505,82 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+                        {
+							if (buffer == null || buffer.length - pos < decodeSize) {
+								resizeBuffer();
+							}
+							switch (modulus) {
+							case 2:
+								buffer[pos++] = (byte) ((x >> 2) & MASK_8BITS);
+								break;
+							case 3:
+								buffer[pos++] = (byte) ((x >> 7) & MASK_8BITS);
+								break;
+							case 4:
+								x = x >> 4;
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 5:
+								x = x >> 1;
+								buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 6:
+								x = x >> 6;
+								buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 7:
+								x = x >> 3;
+								buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							}
+						}
+						{
+							if (buffer == null || buffer.length - pos < decodeSize) {
+								resizeBuffer();
+							}
+							switch (modulus) {
+							case 2:
+								buffer[pos++] = (byte) ((x >> 2) & MASK_8BITS);
+								break;
+							case 3:
+								buffer[pos++] = (byte) ((x >> 7) & MASK_8BITS);
+								break;
+							case 4:
+								x = x >> 4;
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 5:
+								x = x >> 1;
+								buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 6:
+								x = x >> 6;
+								buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 7:
+								x = x >> 3;
+								buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							}
+						}
+						currentLinePos = 0;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -973,7 +1060,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
@@ -1054,7 +1140,8 @@
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
-        modulus = 0;
+        currentLinePos = 0;
+		modulus = 0;
         eof = false;
     }
 
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v15037)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v15037)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v15037)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v15037)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v15043)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v15043)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v15043)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -411,7 +411,9 @@
             if (readPos >= pos) {
                 buffer = null;
             }
-            return len;
+            resizeBuffer();
+			resizeBuffer();
+			return len;
         }
         return eof ? -1 : 0;
     }
@@ -444,6 +446,7 @@
             eof = true;
             if (buffer == null || buffer.length - pos < encodeSize) {
                 resizeBuffer();
+				buffer[pos++] = PAD;
             }
             switch (modulus) {
                 case 1 :
@@ -492,8 +495,46 @@
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
-                        pos += lineSeparator.length;
-                        currentLinePos = 0;
+                        eof = false;
+						pos += lineSeparator.length;
+                        {
+							if (buffer == null || buffer.length - pos < decodeSize) {
+								resizeBuffer();
+							}
+							switch (modulus) {
+							case 2:
+								buffer[pos++] = (byte) ((x >> 2) & MASK_8BITS);
+								break;
+							case 3:
+								buffer[pos++] = (byte) ((x >> 7) & MASK_8BITS);
+								break;
+							case 4:
+								x = x >> 4;
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 5:
+								x = x >> 1;
+								buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 6:
+								x = x >> 6;
+								buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 7:
+								x = x >> 3;
+								buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							}
+						}
+						currentLinePos = 0;
                     }
                 }
             }
@@ -973,7 +1014,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v15043)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v15043)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v15043)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v15043)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v15347)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v15347)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v15347)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -411,7 +411,10 @@
             if (readPos >= pos) {
                 buffer = null;
             }
-            return len;
+            resizeBuffer();
+			resizeBuffer();
+			resizeBuffer();
+			return len;
         }
         return eof ? -1 : 0;
     }
@@ -448,7 +451,8 @@
             switch (modulus) {
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
-                    buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
+				resizeBuffer();
+				buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buffer[pos++] = PAD;
@@ -494,6 +498,7 @@
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
                         currentLinePos = 0;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -973,7 +978,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
@@ -1054,7 +1058,8 @@
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
-        modulus = 0;
+        currentLinePos = 0;
+		modulus = 0;
         eof = false;
     }
 
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v15347)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v15347)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v15347)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v15347)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v15470)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v15470)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v15470)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -383,7 +383,6 @@
         if (buffer == null) {
             buffer = new byte[DEFAULT_BUFFER_SIZE];
             pos = 0;
-            readPos = 0;
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
             System.arraycopy(buffer, 0, b, 0, buffer.length);
@@ -444,6 +443,7 @@
             eof = true;
             if (buffer == null || buffer.length - pos < encodeSize) {
                 resizeBuffer();
+				buffer[pos++] = PAD;
             }
             switch (modulus) {
                 case 1 :
@@ -472,6 +472,7 @@
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                 pos += lineSeparator.length;
+				resizeBuffer();
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
@@ -493,7 +494,45 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+                        {
+							if (buffer == null || buffer.length - pos < decodeSize) {
+								resizeBuffer();
+							}
+							switch (modulus) {
+							case 2:
+								buffer[pos++] = (byte) ((x >> 2) & MASK_8BITS);
+								break;
+							case 3:
+								buffer[pos++] = (byte) ((x >> 7) & MASK_8BITS);
+								break;
+							case 4:
+								x = x >> 4;
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 5:
+								x = x >> 1;
+								buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 6:
+								x = x >> 6;
+								buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 7:
+								x = x >> 3;
+								buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							}
+						}
+						currentLinePos = 0;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -973,7 +1012,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
@@ -1054,7 +1092,8 @@
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
-        modulus = 0;
+        currentLinePos = 0;
+		modulus = 0;
         eof = false;
     }
 
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v15470)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v15470)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v15470)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v15470)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v15510)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v15510)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v15510)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -383,7 +383,6 @@
         if (buffer == null) {
             buffer = new byte[DEFAULT_BUFFER_SIZE];
             pos = 0;
-            readPos = 0;
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
             System.arraycopy(buffer, 0, b, 0, buffer.length);
@@ -451,8 +450,19 @@
                     buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
+                        switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						buffer[pos++] = PAD;
                         buffer[pos++] = PAD;
-                        buffer[pos++] = PAD;
                     }
                     break;
 
@@ -493,7 +503,47 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+                        {
+							if (buffer == null || buffer.length - pos < decodeSize) {
+								resizeBuffer();
+							}
+							switch (modulus) {
+							case 2:
+								buffer[pos++] = (byte) ((x >> 2) & MASK_8BITS);
+								break;
+							case 3:
+								buffer[pos++] = (byte) ((x >> 7) & MASK_8BITS);
+								break;
+							case 4:
+								x = x >> 4;
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 5:
+								x = x >> 1;
+								buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 6:
+								x = x >> 6;
+								buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 7:
+								x = x >> 3;
+								buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							}
+						}
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -973,7 +1023,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v15510)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v15510)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v15510)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v15510)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v15541)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v15541)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v15541)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -441,14 +441,15 @@
         // inAvail < 0 is how we're informed of EOF in the underlying data we're
         // encoding.
         if (inAvail < 0) {
-            eof = true;
             if (buffer == null || buffer.length - pos < encodeSize) {
                 resizeBuffer();
+				buffer[pos++] = PAD;
             }
             switch (modulus) {
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
-                    buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
+				resizeBuffer();
+				buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buffer[pos++] = PAD;
@@ -973,11 +974,9 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
-            len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
                 len += chunkSeparator.length;
             }
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v15541)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v15541)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v15541)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v15541)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -237,10 +237,8 @@
      *             The provided lineSeparator included some Base32 characters. That's not going to work!
      */
     public Base32(int lineLength, byte[] lineSeparator, boolean useHex) {
-        if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
-        }
+        if (lineSeparator == null)
+			buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
         this.lineLength = lineLength > 0 ? (lineLength / BYTES_PER_ENCODED_BLOCK) * BYTES_PER_ENCODED_BLOCK : 0;
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v15541)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v15641)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v15641)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v15641)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -382,6 +382,7 @@
     private void resizeBuffer() {
         if (buffer == null) {
             buffer = new byte[DEFAULT_BUFFER_SIZE];
+			String sep = StringUtils.newStringUtf8(lineSeparator);
             pos = 0;
             readPos = 0;
         } else {
@@ -441,7 +442,6 @@
         // inAvail < 0 is how we're informed of EOF in the underlying data we're
         // encoding.
         if (inAvail < 0) {
-            eof = true;
             if (buffer == null || buffer.length - pos < encodeSize) {
                 resizeBuffer();
             }
@@ -493,7 +493,44 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+                        {
+							if (buffer == null || buffer.length - pos < decodeSize) {
+								resizeBuffer();
+							}
+							switch (modulus) {
+							case 2:
+								buffer[pos++] = (byte) ((x >> 2) & MASK_8BITS);
+								break;
+							case 3:
+								buffer[pos++] = (byte) ((x >> 7) & MASK_8BITS);
+								break;
+							case 4:
+								x = x >> 4;
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 5:
+								x = x >> 1;
+								buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 6:
+								x = x >> 6;
+								buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 7:
+								x = x >> 3;
+								buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							}
+						}
+						currentLinePos = 0;
                     }
                 }
             }
@@ -826,7 +863,8 @@
 
         long len = getEncodeLength(binaryData, MIME_CHUNK_SIZE, CHUNK_SEPARATOR);
         if (len > maxResultSize) {
-            throw new IllegalArgumentException("Input array too big, the output array would be bigger (" +
+            int startSrc = 0;
+			throw new IllegalArgumentException("Input array too big, the output array would be bigger (" +
                 len +
                 ") than the specified maxium size of " +
                 maxResultSize);
@@ -973,7 +1011,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
@@ -1054,7 +1091,8 @@
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
-        modulus = 0;
+        currentLinePos = 0;
+		modulus = 0;
         eof = false;
     }
 
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v15641)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v15641)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v15641)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v15641)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v15842)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v15842)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v15842)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -411,7 +411,8 @@
             if (readPos >= pos) {
                 buffer = null;
             }
-            return len;
+            resizeBuffer();
+			return len;
         }
         return eof ? -1 : 0;
     }
@@ -451,8 +452,19 @@
                     buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
+                        switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						buffer[pos++] = PAD;
                         buffer[pos++] = PAD;
-                        buffer[pos++] = PAD;
                     }
                     break;
 
@@ -493,7 +505,46 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+                        {
+							if (buffer == null || buffer.length - pos < decodeSize) {
+								resizeBuffer();
+							}
+							switch (modulus) {
+							case 2:
+								buffer[pos++] = (byte) ((x >> 2) & MASK_8BITS);
+								break;
+							case 3:
+								buffer[pos++] = (byte) ((x >> 7) & MASK_8BITS);
+								break;
+							case 4:
+								x = x >> 4;
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 5:
+								x = x >> 1;
+								buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 6:
+								x = x >> 6;
+								buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 7:
+								x = x >> 3;
+								buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							}
+						}
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -973,7 +1024,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v15842)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v15842)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v15842)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v15842)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v15868)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v15868)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v15868)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -382,6 +382,7 @@
     private void resizeBuffer() {
         if (buffer == null) {
             buffer = new byte[DEFAULT_BUFFER_SIZE];
+			String sep = StringUtils.newStringUtf8(lineSeparator);
             pos = 0;
             readPos = 0;
         } else {
@@ -411,7 +412,8 @@
             if (readPos >= pos) {
                 buffer = null;
             }
-            return len;
+            resizeBuffer();
+			return len;
         }
         return eof ? -1 : 0;
     }
@@ -492,8 +494,11 @@
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
-                        pos += lineSeparator.length;
+                        eof = false;
+						pos += lineSeparator.length;
                         currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -973,7 +978,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
@@ -1054,7 +1058,8 @@
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
-        modulus = 0;
+        currentLinePos = 0;
+		modulus = 0;
         eof = false;
     }
 
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v15868)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v15868)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v15868)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v15868)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v16271)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v16271)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v16271)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -451,8 +451,19 @@
                     buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
+                        switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						buffer[pos++] = PAD;
                         buffer[pos++] = PAD;
-                        buffer[pos++] = PAD;
                     }
                     break;
 
@@ -493,7 +504,82 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+                        {
+							if (buffer == null || buffer.length - pos < decodeSize) {
+								resizeBuffer();
+							}
+							switch (modulus) {
+							case 2:
+								buffer[pos++] = (byte) ((x >> 2) & MASK_8BITS);
+								break;
+							case 3:
+								buffer[pos++] = (byte) ((x >> 7) & MASK_8BITS);
+								break;
+							case 4:
+								x = x >> 4;
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 5:
+								x = x >> 1;
+								buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 6:
+								x = x >> 6;
+								buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 7:
+								x = x >> 3;
+								buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							}
+						}
+						{
+							if (buffer == null || buffer.length - pos < decodeSize) {
+								resizeBuffer();
+							}
+							switch (modulus) {
+							case 2:
+								buffer[pos++] = (byte) ((x >> 2) & MASK_8BITS);
+								break;
+							case 3:
+								buffer[pos++] = (byte) ((x >> 7) & MASK_8BITS);
+								break;
+							case 4:
+								x = x >> 4;
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 5:
+								x = x >> 1;
+								buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 6:
+								x = x >> 6;
+								buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 7:
+								x = x >> 3;
+								buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							}
+						}
+						currentLinePos = 0;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -973,7 +1059,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
@@ -1054,7 +1139,8 @@
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
-        modulus = 0;
+        currentLinePos = 0;
+		modulus = 0;
         eof = false;
     }
 
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v16271)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v16271)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v16271)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v16271)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v16524)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v16524)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v16524)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -441,14 +441,14 @@
         // inAvail < 0 is how we're informed of EOF in the underlying data we're
         // encoding.
         if (inAvail < 0) {
-            eof = true;
             if (buffer == null || buffer.length - pos < encodeSize) {
                 resizeBuffer();
             }
             switch (modulus) {
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
-                    buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
+				resizeBuffer();
+				buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buffer[pos++] = PAD;
@@ -471,7 +471,11 @@
             byte b = lineSeparator[lineSeparator.length - 1];
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
-                pos += lineSeparator.length;
+                {
+					System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+					pos += lineSeparator.length;
+					currentLinePos = 0;
+				}
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
@@ -493,7 +497,45 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+                        {
+							if (buffer == null || buffer.length - pos < decodeSize) {
+								resizeBuffer();
+							}
+							switch (modulus) {
+							case 2:
+								buffer[pos++] = (byte) ((x >> 2) & MASK_8BITS);
+								break;
+							case 3:
+								buffer[pos++] = (byte) ((x >> 7) & MASK_8BITS);
+								break;
+							case 4:
+								x = x >> 4;
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 5:
+								x = x >> 1;
+								buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 6:
+								x = x >> 6;
+								buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 7:
+								x = x >> 3;
+								buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							}
+						}
+						currentLinePos = 0;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -973,7 +1015,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v16524)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v16524)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v16524)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v16524)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -237,10 +237,8 @@
      *             The provided lineSeparator included some Base32 characters. That's not going to work!
      */
     public Base32(int lineLength, byte[] lineSeparator, boolean useHex) {
-        if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
-        }
+        if (lineSeparator == null)
+			buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
         this.lineLength = lineLength > 0 ? (lineLength / BYTES_PER_ENCODED_BLOCK) * BYTES_PER_ENCODED_BLOCK : 0;
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v16524)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v17195)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v17195)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v17195)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -383,7 +383,6 @@
         if (buffer == null) {
             buffer = new byte[DEFAULT_BUFFER_SIZE];
             pos = 0;
-            readPos = 0;
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
             System.arraycopy(buffer, 0, b, 0, buffer.length);
@@ -411,7 +410,8 @@
             if (readPos >= pos) {
                 buffer = null;
             }
-            return len;
+            resizeBuffer();
+			return len;
         }
         return eof ? -1 : 0;
     }
@@ -441,7 +441,6 @@
         // inAvail < 0 is how we're informed of EOF in the underlying data we're
         // encoding.
         if (inAvail < 0) {
-            eof = true;
             if (buffer == null || buffer.length - pos < encodeSize) {
                 resizeBuffer();
             }
@@ -471,7 +470,11 @@
             byte b = lineSeparator[lineSeparator.length - 1];
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
-                pos += lineSeparator.length;
+                {
+					System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+					pos += lineSeparator.length;
+					currentLinePos = 0;
+				}
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
@@ -494,6 +497,7 @@
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
                         currentLinePos = 0;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -973,7 +977,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
@@ -1054,7 +1057,8 @@
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
-        modulus = 0;
+        currentLinePos = 0;
+		modulus = 0;
         eof = false;
     }
 
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v17195)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v17195)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v17195)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v17195)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v17477)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v17477)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v17477)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -444,6 +444,7 @@
             eof = true;
             if (buffer == null || buffer.length - pos < encodeSize) {
                 resizeBuffer();
+				buffer[pos++] = PAD;
             }
             switch (modulus) {
                 case 1 :
@@ -493,7 +494,47 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+                        {
+							if (buffer == null || buffer.length - pos < decodeSize) {
+								resizeBuffer();
+							}
+							switch (modulus) {
+							case 2:
+								buffer[pos++] = (byte) ((x >> 2) & MASK_8BITS);
+								break;
+							case 3:
+								buffer[pos++] = (byte) ((x >> 7) & MASK_8BITS);
+								break;
+							case 4:
+								x = x >> 4;
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 5:
+								x = x >> 1;
+								buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 6:
+								x = x >> 6;
+								buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 7:
+								x = x >> 3;
+								buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							}
+						}
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -967,13 +1008,9 @@
      *         a long since a max-len array will require Integer.MAX_VALUE + 33%.
      */
     private static long getEncodeLength(byte[] pArray, int chunkSize, byte[] chunkSeparator) {
-        // base64 always encodes to multiples of 4.
-        chunkSize = (chunkSize / 4) * 4;
-
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
@@ -1052,7 +1089,6 @@
     private void reset() {
         buffer = null;
         pos = 0;
-        readPos = 0;
         currentLinePos = 0;
         modulus = 0;
         eof = false;
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v17477)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v17477)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v17477)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v17477)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v17846)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v17846)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v17846)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -411,7 +411,8 @@
             if (readPos >= pos) {
                 buffer = null;
             }
-            return len;
+            resizeBuffer();
+			return len;
         }
         return eof ? -1 : 0;
     }
@@ -448,7 +449,10 @@
             switch (modulus) {
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
-                    buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buffer[pos++] = PAD;
@@ -973,7 +977,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
@@ -1054,7 +1057,8 @@
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
-        modulus = 0;
+        currentLinePos = 0;
+		modulus = 0;
         eof = false;
     }
 
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v17846)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v17846)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v17846)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v17846)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -243,7 +243,6 @@
         }
         this.lineLength = lineLength > 0 ? (lineLength / BYTES_PER_ENCODED_BLOCK) * BYTES_PER_ENCODED_BLOCK : 0;
         this.lineSeparator = new byte[lineSeparator.length];
-        System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
         } else {
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v17846)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v18094)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v18094)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v18094)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -411,7 +411,8 @@
             if (readPos >= pos) {
                 buffer = null;
             }
-            return len;
+            resizeBuffer();
+			return len;
         }
         return eof ? -1 : 0;
     }
@@ -441,9 +442,9 @@
         // inAvail < 0 is how we're informed of EOF in the underlying data we're
         // encoding.
         if (inAvail < 0) {
-            eof = true;
             if (buffer == null || buffer.length - pos < encodeSize) {
                 resizeBuffer();
+				buffer[pos++] = PAD;
             }
             switch (modulus) {
                 case 1 :
@@ -492,8 +493,11 @@
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
-                        pos += lineSeparator.length;
+                        eof = false;
+						pos += lineSeparator.length;
                         currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -979,7 +983,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v18094)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v18094)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v18094)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v18094)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -243,7 +243,6 @@
         }
         this.lineLength = lineLength > 0 ? (lineLength / BYTES_PER_ENCODED_BLOCK) * BYTES_PER_ENCODED_BLOCK : 0;
         this.lineSeparator = new byte[lineSeparator.length];
-        System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
         } else {
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v18094)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v18279)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v18279)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v18279)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -411,7 +411,10 @@
             if (readPos >= pos) {
                 buffer = null;
             }
-            return len;
+            resizeBuffer();
+			resizeBuffer();
+			resizeBuffer();
+			return len;
         }
         return eof ? -1 : 0;
     }
@@ -471,7 +474,11 @@
             byte b = lineSeparator[lineSeparator.length - 1];
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
-                pos += lineSeparator.length;
+                {
+					System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+					pos += lineSeparator.length;
+					currentLinePos = 0;
+				}
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
@@ -494,6 +501,9 @@
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
                         currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -973,7 +983,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v18279)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v18279)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v18279)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v18279)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v18601)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v18601)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v18601)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -411,7 +411,9 @@
             if (readPos >= pos) {
                 buffer = null;
             }
-            return len;
+            resizeBuffer();
+			resizeBuffer();
+			return len;
         }
         return eof ? -1 : 0;
     }
@@ -471,7 +473,11 @@
             byte b = lineSeparator[lineSeparator.length - 1];
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
-                pos += lineSeparator.length;
+                {
+					System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+					pos += lineSeparator.length;
+					currentLinePos = 0;
+				}
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
@@ -973,7 +979,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
@@ -1054,7 +1059,8 @@
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
-        modulus = 0;
+        currentLinePos = 0;
+		modulus = 0;
         eof = false;
     }
 
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v18601)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v18601)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v18601)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v18601)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -237,10 +237,8 @@
      *             The provided lineSeparator included some Base32 characters. That's not going to work!
      */
     public Base32(int lineLength, byte[] lineSeparator, boolean useHex) {
-        if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
-        }
+        if (lineSeparator == null)
+			buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
         this.lineLength = lineLength > 0 ? (lineLength / BYTES_PER_ENCODED_BLOCK) * BYTES_PER_ENCODED_BLOCK : 0;
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v18601)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v18763)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v18763)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v18763)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -411,7 +411,9 @@
             if (readPos >= pos) {
                 buffer = null;
             }
-            return len;
+            resizeBuffer();
+			resizeBuffer();
+			return len;
         }
         return eof ? -1 : 0;
     }
@@ -448,7 +450,8 @@
             switch (modulus) {
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
-                    buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
+				resizeBuffer();
+				buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buffer[pos++] = PAD;
@@ -493,7 +496,44 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+                        {
+							if (buffer == null || buffer.length - pos < decodeSize) {
+								resizeBuffer();
+							}
+							switch (modulus) {
+							case 2:
+								buffer[pos++] = (byte) ((x >> 2) & MASK_8BITS);
+								break;
+							case 3:
+								buffer[pos++] = (byte) ((x >> 7) & MASK_8BITS);
+								break;
+							case 4:
+								x = x >> 4;
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 5:
+								x = x >> 1;
+								buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 6:
+								x = x >> 6;
+								buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 7:
+								x = x >> 3;
+								buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							}
+						}
+						currentLinePos = 0;
                     }
                 }
             }
@@ -967,13 +1007,9 @@
      *         a long since a max-len array will require Integer.MAX_VALUE + 33%.
      */
     private static long getEncodeLength(byte[] pArray, int chunkSize, byte[] chunkSeparator) {
-        // base64 always encodes to multiples of 4.
-        chunkSize = (chunkSize / 4) * 4;
-
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
@@ -1054,7 +1090,9 @@
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
-        modulus = 0;
+        currentLinePos = 0;
+		currentLinePos = 0;
+		modulus = 0;
         eof = false;
     }
 
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v18763)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v18763)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v18763)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v18763)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v18827)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v18827)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v18827)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -411,7 +411,10 @@
             if (readPos >= pos) {
                 buffer = null;
             }
-            return len;
+            resizeBuffer();
+			resizeBuffer();
+			resizeBuffer();
+			return len;
         }
         return eof ? -1 : 0;
     }
@@ -494,6 +497,7 @@
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
                         currentLinePos = 0;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -967,13 +971,9 @@
      *         a long since a max-len array will require Integer.MAX_VALUE + 33%.
      */
     private static long getEncodeLength(byte[] pArray, int chunkSize, byte[] chunkSeparator) {
-        // base64 always encodes to multiples of 4.
-        chunkSize = (chunkSize / 4) * 4;
-
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v18827)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v18827)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v18827)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v18827)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -237,10 +237,8 @@
      *             The provided lineSeparator included some Base32 characters. That's not going to work!
      */
     public Base32(int lineLength, byte[] lineSeparator, boolean useHex) {
-        if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
-        }
+        if (lineSeparator == null)
+			buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
         this.lineLength = lineLength > 0 ? (lineLength / BYTES_PER_ENCODED_BLOCK) * BYTES_PER_ENCODED_BLOCK : 0;
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v18827)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v18882)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v18882)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v18882)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -383,7 +383,6 @@
         if (buffer == null) {
             buffer = new byte[DEFAULT_BUFFER_SIZE];
             pos = 0;
-            readPos = 0;
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
             System.arraycopy(buffer, 0, b, 0, buffer.length);
@@ -411,7 +410,8 @@
             if (readPos >= pos) {
                 buffer = null;
             }
-            return len;
+            resizeBuffer();
+			return len;
         }
         return eof ? -1 : 0;
     }
@@ -441,14 +441,16 @@
         // inAvail < 0 is how we're informed of EOF in the underlying data we're
         // encoding.
         if (inAvail < 0) {
-            eof = true;
             if (buffer == null || buffer.length - pos < encodeSize) {
                 resizeBuffer();
+				buffer[pos++] = PAD;
             }
             switch (modulus) {
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
-                    buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
+				resizeBuffer();
+				resizeBuffer();
+				buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buffer[pos++] = PAD;
@@ -494,6 +496,7 @@
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
                         currentLinePos = 0;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -973,7 +976,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v18882)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v18882)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v18882)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v18882)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -237,10 +237,8 @@
      *             The provided lineSeparator included some Base32 characters. That's not going to work!
      */
     public Base32(int lineLength, byte[] lineSeparator, boolean useHex) {
-        if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
-        }
+        if (lineSeparator == null)
+			buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
         this.lineLength = lineLength > 0 ? (lineLength / BYTES_PER_ENCODED_BLOCK) * BYTES_PER_ENCODED_BLOCK : 0;
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v18882)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v19118)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v19118)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v19118)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -444,11 +444,13 @@
             eof = true;
             if (buffer == null || buffer.length - pos < encodeSize) {
                 resizeBuffer();
+				buffer[pos++] = PAD;
             }
             switch (modulus) {
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
-                    buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
+				resizeBuffer();
+				buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buffer[pos++] = PAD;
@@ -471,7 +473,11 @@
             byte b = lineSeparator[lineSeparator.length - 1];
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
-                pos += lineSeparator.length;
+                {
+					System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+					pos += lineSeparator.length;
+					currentLinePos = 0;
+				}
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
@@ -492,8 +498,11 @@
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
-                        pos += lineSeparator.length;
+                        eof = false;
+						pos += lineSeparator.length;
                         currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -973,7 +982,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
@@ -1054,7 +1062,8 @@
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
-        modulus = 0;
+        currentLinePos = 0;
+		modulus = 0;
         eof = false;
     }
 
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v19118)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v19118)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v19118)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v19118)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v19291)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v19291)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v19291)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -448,7 +448,8 @@
             switch (modulus) {
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
-                    buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
+				resizeBuffer();
+				buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buffer[pos++] = PAD;
@@ -472,6 +473,7 @@
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                 pos += lineSeparator.length;
+				resizeBuffer();
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
@@ -494,6 +496,9 @@
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
                         currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -973,7 +978,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
@@ -1054,7 +1058,8 @@
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
-        modulus = 0;
+        currentLinePos = 0;
+		modulus = 0;
         eof = false;
     }
 
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v19291)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v19291)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v19291)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v19291)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -243,7 +243,6 @@
         }
         this.lineLength = lineLength > 0 ? (lineLength / BYTES_PER_ENCODED_BLOCK) * BYTES_PER_ENCODED_BLOCK : 0;
         this.lineSeparator = new byte[lineSeparator.length];
-        System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
         } else {
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v19291)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v19548)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v19548)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v19548)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -383,7 +383,6 @@
         if (buffer == null) {
             buffer = new byte[DEFAULT_BUFFER_SIZE];
             pos = 0;
-            readPos = 0;
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
             System.arraycopy(buffer, 0, b, 0, buffer.length);
@@ -448,7 +447,8 @@
             switch (modulus) {
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
-                    buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
+				resizeBuffer();
+				buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buffer[pos++] = PAD;
@@ -471,7 +471,11 @@
             byte b = lineSeparator[lineSeparator.length - 1];
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
-                pos += lineSeparator.length;
+                {
+					System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+					pos += lineSeparator.length;
+					currentLinePos = 0;
+				}
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
@@ -494,6 +498,9 @@
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
                         currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -826,7 +833,8 @@
 
         long len = getEncodeLength(binaryData, MIME_CHUNK_SIZE, CHUNK_SEPARATOR);
         if (len > maxResultSize) {
-            throw new IllegalArgumentException("Input array too big, the output array would be bigger (" +
+            int startSrc = 0;
+			throw new IllegalArgumentException("Input array too big, the output array would be bigger (" +
                 len +
                 ") than the specified maxium size of " +
                 maxResultSize);
@@ -973,7 +981,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v19548)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v19548)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v19548)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v19548)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v19589)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v19589)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v19589)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -444,11 +444,15 @@
             eof = true;
             if (buffer == null || buffer.length - pos < encodeSize) {
                 resizeBuffer();
+				buffer[pos++] = PAD;
+				buffer[pos++] = PAD;
             }
             switch (modulus) {
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
-                    buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
+				resizeBuffer();
+				resizeBuffer();
+				buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buffer[pos++] = PAD;
@@ -471,7 +475,11 @@
             byte b = lineSeparator[lineSeparator.length - 1];
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
-                pos += lineSeparator.length;
+                {
+					System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+					pos += lineSeparator.length;
+					currentLinePos = 0;
+				}
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
@@ -494,6 +502,8 @@
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
                         currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -973,7 +983,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v19589)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v19589)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v19589)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v19589)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v19634)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v19634)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v19634)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -383,7 +383,6 @@
         if (buffer == null) {
             buffer = new byte[DEFAULT_BUFFER_SIZE];
             pos = 0;
-            readPos = 0;
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
             System.arraycopy(buffer, 0, b, 0, buffer.length);
@@ -411,7 +410,11 @@
             if (readPos >= pos) {
                 buffer = null;
             }
-            return len;
+            resizeBuffer();
+			resizeBuffer();
+			resizeBuffer();
+			resizeBuffer();
+			return len;
         }
         return eof ? -1 : 0;
     }
@@ -444,11 +447,13 @@
             eof = true;
             if (buffer == null || buffer.length - pos < encodeSize) {
                 resizeBuffer();
+				buffer[pos++] = PAD;
             }
             switch (modulus) {
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
-                    buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
+				resizeBuffer();
+				buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buffer[pos++] = PAD;
@@ -493,7 +498,44 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+                        {
+							if (buffer == null || buffer.length - pos < decodeSize) {
+								resizeBuffer();
+							}
+							switch (modulus) {
+							case 2:
+								buffer[pos++] = (byte) ((x >> 2) & MASK_8BITS);
+								break;
+							case 3:
+								buffer[pos++] = (byte) ((x >> 7) & MASK_8BITS);
+								break;
+							case 4:
+								x = x >> 4;
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 5:
+								x = x >> 1;
+								buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 6:
+								x = x >> 6;
+								buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 7:
+								x = x >> 3;
+								buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							}
+						}
+						currentLinePos = 0;
                     }
                 }
             }
@@ -973,7 +1015,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v19634)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v19634)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v19634)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v19634)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v19881)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v19881)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v19881)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -411,7 +411,10 @@
             if (readPos >= pos) {
                 buffer = null;
             }
-            return len;
+            resizeBuffer();
+			resizeBuffer();
+			resizeBuffer();
+			return len;
         }
         return eof ? -1 : 0;
     }
@@ -448,7 +451,8 @@
             switch (modulus) {
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
-                    buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
+				resizeBuffer();
+				buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buffer[pos++] = PAD;
@@ -494,6 +498,8 @@
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
                         currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -973,11 +979,9 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
-            len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
                 len += chunkSeparator.length;
             }
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v19881)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v19881)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v19881)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v19881)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v19897)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v19897)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v19897)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -444,11 +444,14 @@
             eof = true;
             if (buffer == null || buffer.length - pos < encodeSize) {
                 resizeBuffer();
+				buffer[pos++] = PAD;
+				buffer[pos++] = PAD;
             }
             switch (modulus) {
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
-                    buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
+				resizeBuffer();
+				buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buffer[pos++] = PAD;
@@ -471,7 +474,11 @@
             byte b = lineSeparator[lineSeparator.length - 1];
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
-                pos += lineSeparator.length;
+                {
+					System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+					pos += lineSeparator.length;
+					currentLinePos = 0;
+				}
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
@@ -494,6 +501,8 @@
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
                         currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -973,7 +982,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
@@ -1054,7 +1062,8 @@
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
-        modulus = 0;
+        currentLinePos = 0;
+		modulus = 0;
         eof = false;
     }
 
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v19897)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v19897)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v19897)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v19897)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v20107)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v20107)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v20107)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -411,7 +411,8 @@
             if (readPos >= pos) {
                 buffer = null;
             }
-            return len;
+            resizeBuffer();
+			return len;
         }
         return eof ? -1 : 0;
     }
@@ -441,14 +442,17 @@
         // inAvail < 0 is how we're informed of EOF in the underlying data we're
         // encoding.
         if (inAvail < 0) {
-            eof = true;
             if (buffer == null || buffer.length - pos < encodeSize) {
                 resizeBuffer();
+				buffer[pos++] = PAD;
+				buffer[pos++] = PAD;
+				buffer[pos++] = PAD;
             }
             switch (modulus) {
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
-                    buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
+				resizeBuffer();
+				buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buffer[pos++] = PAD;
@@ -494,6 +498,7 @@
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
                         currentLinePos = 0;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -973,7 +978,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
@@ -1054,7 +1058,8 @@
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
-        modulus = 0;
+        currentLinePos = 0;
+		modulus = 0;
         eof = false;
     }
 
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v20107)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v20107)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v20107)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v20107)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v20314)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v20314)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v20314)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -444,6 +444,7 @@
             eof = true;
             if (buffer == null || buffer.length - pos < encodeSize) {
                 resizeBuffer();
+				buffer[pos++] = PAD;
             }
             switch (modulus) {
                 case 1 :
@@ -451,13 +452,25 @@
                     buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
+                        switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						buffer[pos++] = PAD;
                         buffer[pos++] = PAD;
-                        buffer[pos++] = PAD;
                     }
                     break;
 
                 case 2 :
-                    buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
+			case '\t':
+				buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
@@ -471,7 +484,11 @@
             byte b = lineSeparator[lineSeparator.length - 1];
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
-                pos += lineSeparator.length;
+                {
+					System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+					pos += lineSeparator.length;
+					currentLinePos = 0;
+				}
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
@@ -494,6 +511,8 @@
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
                         currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -973,7 +992,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v20314)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v20314)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v20314)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v20314)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v20370)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v20370)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v20370)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -411,7 +411,8 @@
             if (readPos >= pos) {
                 buffer = null;
             }
-            return len;
+            resizeBuffer();
+			return len;
         }
         return eof ? -1 : 0;
     }
@@ -441,7 +442,6 @@
         // inAvail < 0 is how we're informed of EOF in the underlying data we're
         // encoding.
         if (inAvail < 0) {
-            eof = true;
             if (buffer == null || buffer.length - pos < encodeSize) {
                 resizeBuffer();
             }
@@ -471,7 +471,11 @@
             byte b = lineSeparator[lineSeparator.length - 1];
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
-                pos += lineSeparator.length;
+                {
+					System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+					pos += lineSeparator.length;
+					currentLinePos = 0;
+				}
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
@@ -973,11 +977,9 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
-            len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
                 len += chunkSeparator.length;
             }
@@ -1054,7 +1056,8 @@
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
-        modulus = 0;
+        currentLinePos = 0;
+		modulus = 0;
         eof = false;
     }
 
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v20370)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v20370)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v20370)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v20370)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -243,7 +243,6 @@
         }
         this.lineLength = lineLength > 0 ? (lineLength / BYTES_PER_ENCODED_BLOCK) * BYTES_PER_ENCODED_BLOCK : 0;
         this.lineSeparator = new byte[lineSeparator.length];
-        System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
         } else {
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v20370)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v20625)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v20625)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v20625)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -411,7 +411,9 @@
             if (readPos >= pos) {
                 buffer = null;
             }
-            return len;
+            resizeBuffer();
+			resizeBuffer();
+			return len;
         }
         return eof ? -1 : 0;
     }
@@ -444,11 +446,13 @@
             eof = true;
             if (buffer == null || buffer.length - pos < encodeSize) {
                 resizeBuffer();
+				buffer[pos++] = PAD;
             }
             switch (modulus) {
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
-                    buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
+				resizeBuffer();
+				buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buffer[pos++] = PAD;
@@ -471,7 +475,11 @@
             byte b = lineSeparator[lineSeparator.length - 1];
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
-                pos += lineSeparator.length;
+                {
+					System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+					pos += lineSeparator.length;
+					currentLinePos = 0;
+				}
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
@@ -492,8 +500,10 @@
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
-                        pos += lineSeparator.length;
+                        eof = false;
+						pos += lineSeparator.length;
                         currentLinePos = 0;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -973,7 +983,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v20625)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v20625)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v20625)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v20625)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v21022)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v21022)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v21022)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -444,11 +444,14 @@
             eof = true;
             if (buffer == null || buffer.length - pos < encodeSize) {
                 resizeBuffer();
+				buffer[pos++] = PAD;
             }
             switch (modulus) {
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
-                    buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
+				resizeBuffer();
+				resizeBuffer();
+				buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buffer[pos++] = PAD;
@@ -492,8 +495,10 @@
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
-                        pos += lineSeparator.length;
+                        eof = false;
+						pos += lineSeparator.length;
                         currentLinePos = 0;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -973,11 +978,9 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
-            len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
                 len += chunkSeparator.length;
             }
@@ -1054,7 +1057,8 @@
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
-        modulus = 0;
+        currentLinePos = 0;
+		modulus = 0;
         eof = false;
     }
 
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v21022)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v21022)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v21022)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v21022)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v21149)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v21149)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v21149)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -411,7 +411,8 @@
             if (readPos >= pos) {
                 buffer = null;
             }
-            return len;
+            resizeBuffer();
+			return len;
         }
         return eof ? -1 : 0;
     }
@@ -441,14 +442,15 @@
         // inAvail < 0 is how we're informed of EOF in the underlying data we're
         // encoding.
         if (inAvail < 0) {
-            eof = true;
             if (buffer == null || buffer.length - pos < encodeSize) {
                 resizeBuffer();
+				buffer[pos++] = PAD;
             }
             switch (modulus) {
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
-                    buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
+				resizeBuffer();
+				buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buffer[pos++] = PAD;
@@ -494,6 +496,7 @@
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
                         currentLinePos = 0;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -973,11 +976,9 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
-            len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
                 len += chunkSeparator.length;
             }
@@ -1054,7 +1055,8 @@
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
-        modulus = 0;
+        currentLinePos = 0;
+		modulus = 0;
         eof = false;
     }
 
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v21149)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v21149)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v21149)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v21149)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v21151)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v21151)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v21151)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -411,7 +411,9 @@
             if (readPos >= pos) {
                 buffer = null;
             }
-            return len;
+            resizeBuffer();
+			resizeBuffer();
+			return len;
         }
         return eof ? -1 : 0;
     }
@@ -444,6 +446,7 @@
             eof = true;
             if (buffer == null || buffer.length - pos < encodeSize) {
                 resizeBuffer();
+				buffer[pos++] = PAD;
             }
             switch (modulus) {
                 case 1 :
@@ -471,7 +474,11 @@
             byte b = lineSeparator[lineSeparator.length - 1];
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
-                pos += lineSeparator.length;
+                {
+					System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+					pos += lineSeparator.length;
+					currentLinePos = 0;
+				}
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
@@ -494,6 +501,8 @@
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
                         currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -973,7 +982,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v21151)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v21151)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v21151)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v21151)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v21163)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v21163)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v21163)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -411,7 +411,10 @@
             if (readPos >= pos) {
                 buffer = null;
             }
-            return len;
+            resizeBuffer();
+			resizeBuffer();
+			resizeBuffer();
+			return len;
         }
         return eof ? -1 : 0;
     }
@@ -494,6 +497,9 @@
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
                         currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -973,7 +979,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
@@ -1054,7 +1059,8 @@
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
-        modulus = 0;
+        currentLinePos = 0;
+		modulus = 0;
         eof = false;
     }
 
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v21163)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v21163)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v21163)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v21163)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v21203)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v21203)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v21203)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -411,7 +411,8 @@
             if (readPos >= pos) {
                 buffer = null;
             }
-            return len;
+            resizeBuffer();
+			return len;
         }
         return eof ? -1 : 0;
     }
@@ -448,7 +449,11 @@
             switch (modulus) {
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
-                    buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buffer[pos++] = PAD;
@@ -492,8 +497,10 @@
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
-                        pos += lineSeparator.length;
+                        eof = false;
+						pos += lineSeparator.length;
                         currentLinePos = 0;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -979,7 +986,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v21203)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v21203)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v21203)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v21203)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -243,7 +243,6 @@
         }
         this.lineLength = lineLength > 0 ? (lineLength / BYTES_PER_ENCODED_BLOCK) * BYTES_PER_ENCODED_BLOCK : 0;
         this.lineSeparator = new byte[lineSeparator.length];
-        System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
         } else {
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v21203)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v23348)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v23348)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v23348)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -382,7 +382,6 @@
     private void resizeBuffer() {
         if (buffer == null) {
             buffer = new byte[DEFAULT_BUFFER_SIZE];
-            pos = 0;
             readPos = 0;
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
@@ -411,7 +410,8 @@
             if (readPos >= pos) {
                 buffer = null;
             }
-            return len;
+            resizeBuffer();
+			return len;
         }
         return eof ? -1 : 0;
     }
@@ -444,11 +444,13 @@
             eof = true;
             if (buffer == null || buffer.length - pos < encodeSize) {
                 resizeBuffer();
+				buffer[pos++] = PAD;
             }
             switch (modulus) {
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
-                    buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
+				resizeBuffer();
+				buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buffer[pos++] = PAD;
@@ -493,7 +495,46 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+                        {
+							if (buffer == null || buffer.length - pos < decodeSize) {
+								resizeBuffer();
+							}
+							switch (modulus) {
+							case 2:
+								buffer[pos++] = (byte) ((x >> 2) & MASK_8BITS);
+								break;
+							case 3:
+								buffer[pos++] = (byte) ((x >> 7) & MASK_8BITS);
+								break;
+							case 4:
+								x = x >> 4;
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 5:
+								x = x >> 1;
+								buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 6:
+								x = x >> 6;
+								buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 7:
+								x = x >> 3;
+								buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							}
+						}
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -977,9 +1018,7 @@
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
-            len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v23348)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v23348)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v23348)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v23348)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v23364)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v23364)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v23364)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -441,14 +441,16 @@
         // inAvail < 0 is how we're informed of EOF in the underlying data we're
         // encoding.
         if (inAvail < 0) {
-            eof = true;
             if (buffer == null || buffer.length - pos < encodeSize) {
                 resizeBuffer();
+				buffer[pos++] = PAD;
             }
             switch (modulus) {
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
-                    buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
+				resizeBuffer();
+				resizeBuffer();
+				buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buffer[pos++] = PAD;
@@ -471,7 +473,8 @@
             byte b = lineSeparator[lineSeparator.length - 1];
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
-                pos += lineSeparator.length;
+                eof = false;
+				pos += lineSeparator.length;
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
@@ -494,6 +497,8 @@
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
                         currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -973,7 +978,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v23364)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v23364)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v23364)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v23364)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -243,7 +243,6 @@
         }
         this.lineLength = lineLength > 0 ? (lineLength / BYTES_PER_ENCODED_BLOCK) * BYTES_PER_ENCODED_BLOCK : 0;
         this.lineSeparator = new byte[lineSeparator.length];
-        System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
         } else {
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v23364)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v25757)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v25757)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v25757)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -411,7 +411,11 @@
             if (readPos >= pos) {
                 buffer = null;
             }
-            return len;
+            resizeBuffer();
+			resizeBuffer();
+			resizeBuffer();
+			resizeBuffer();
+			return len;
         }
         return eof ? -1 : 0;
     }
@@ -441,14 +445,15 @@
         // inAvail < 0 is how we're informed of EOF in the underlying data we're
         // encoding.
         if (inAvail < 0) {
-            eof = true;
             if (buffer == null || buffer.length - pos < encodeSize) {
                 resizeBuffer();
+				buffer[pos++] = PAD;
             }
             switch (modulus) {
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
-                    buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
+				resizeBuffer();
+				buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buffer[pos++] = PAD;
@@ -494,6 +499,7 @@
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
                         currentLinePos = 0;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -979,7 +985,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v25757)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v25757)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v25757)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v25757)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v25792)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v25792)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v25792)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -411,7 +411,8 @@
             if (readPos >= pos) {
                 buffer = null;
             }
-            return len;
+            resizeBuffer();
+			return len;
         }
         return eof ? -1 : 0;
     }
@@ -444,11 +445,17 @@
             eof = true;
             if (buffer == null || buffer.length - pos < encodeSize) {
                 resizeBuffer();
+				buffer[pos++] = PAD;
+				buffer[pos++] = PAD;
+				buffer[pos++] = PAD;
             }
             switch (modulus) {
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
-                    buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buffer[pos++] = PAD;
@@ -471,7 +478,8 @@
             byte b = lineSeparator[lineSeparator.length - 1];
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
-                pos += lineSeparator.length;
+                eof = false;
+				pos += lineSeparator.length;
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
@@ -979,7 +987,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
@@ -1054,7 +1061,8 @@
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
-        modulus = 0;
+        currentLinePos = 0;
+		modulus = 0;
         eof = false;
     }
 
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v25792)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v25792)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v25792)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v25792)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v27209)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v27209)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v27209)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -411,7 +411,10 @@
             if (readPos >= pos) {
                 buffer = null;
             }
-            return len;
+            resizeBuffer();
+			resizeBuffer();
+			resizeBuffer();
+			return len;
         }
         return eof ? -1 : 0;
     }
@@ -493,7 +496,45 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+                        {
+							if (buffer == null || buffer.length - pos < decodeSize) {
+								resizeBuffer();
+							}
+							switch (modulus) {
+							case 2:
+								buffer[pos++] = (byte) ((x >> 2) & MASK_8BITS);
+								break;
+							case 3:
+								buffer[pos++] = (byte) ((x >> 7) & MASK_8BITS);
+								break;
+							case 4:
+								x = x >> 4;
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 5:
+								x = x >> 1;
+								buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 6:
+								x = x >> 6;
+								buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 7:
+								x = x >> 3;
+								buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							}
+						}
+						currentLinePos = 0;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -967,9 +1008,6 @@
      *         a long since a max-len array will require Integer.MAX_VALUE + 33%.
      */
     private static long getEncodeLength(byte[] pArray, int chunkSize, byte[] chunkSeparator) {
-        // base64 always encodes to multiples of 4.
-        chunkSize = (chunkSize / 4) * 4;
-
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
@@ -977,9 +1015,7 @@
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
-            len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
@@ -1054,7 +1090,9 @@
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
-        modulus = 0;
+        currentLinePos = 0;
+		currentLinePos = 0;
+		modulus = 0;
         eof = false;
     }
 
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v27209)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v27209)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v27209)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v27209)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v27322)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v27322)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v27322)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -444,11 +444,15 @@
             eof = true;
             if (buffer == null || buffer.length - pos < encodeSize) {
                 resizeBuffer();
+				buffer[pos++] = PAD;
+				buffer[pos++] = PAD;
             }
             switch (modulus) {
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
-                    buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
+				resizeBuffer();
+				resizeBuffer();
+				buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buffer[pos++] = PAD;
@@ -492,8 +496,11 @@
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
-                        pos += lineSeparator.length;
+                        eof = false;
+						pos += lineSeparator.length;
                         currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -973,7 +980,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
@@ -1054,7 +1060,9 @@
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
-        modulus = 0;
+        currentLinePos = 0;
+		currentLinePos = 0;
+		modulus = 0;
         eof = false;
     }
 
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v27322)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v27322)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v27322)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v27322)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v27644)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v27644)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v27644)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -411,7 +411,8 @@
             if (readPos >= pos) {
                 buffer = null;
             }
-            return len;
+            resizeBuffer();
+			return len;
         }
         return eof ? -1 : 0;
     }
@@ -448,11 +449,46 @@
             switch (modulus) {
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
-                    buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
+				resizeBuffer();
+				resizeBuffer();
+				buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
+                        switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						buffer[pos++] = PAD;
                         buffer[pos++] = PAD;
-                        buffer[pos++] = PAD;
                     }
                     break;
 
@@ -471,7 +507,8 @@
             byte b = lineSeparator[lineSeparator.length - 1];
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
-                pos += lineSeparator.length;
+                eof = false;
+				pos += lineSeparator.length;
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
@@ -494,6 +531,7 @@
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
                         currentLinePos = 0;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -973,7 +1011,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
@@ -1054,7 +1091,9 @@
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
-        modulus = 0;
+        currentLinePos = 0;
+		currentLinePos = 0;
+		modulus = 0;
         eof = false;
     }
 
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v27644)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v27644)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v27644)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v27644)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v28113)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v28113)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v28113)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -411,7 +411,8 @@
             if (readPos >= pos) {
                 buffer = null;
             }
-            return len;
+            resizeBuffer();
+			return len;
         }
         return eof ? -1 : 0;
     }
@@ -444,15 +445,18 @@
             eof = true;
             if (buffer == null || buffer.length - pos < encodeSize) {
                 resizeBuffer();
+				buffer[pos++] = PAD;
             }
             switch (modulus) {
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
-                    buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
+				resizeBuffer();
+				buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
+                        resizeBuffer();
+						buffer[pos++] = PAD;
                         buffer[pos++] = PAD;
-                        buffer[pos++] = PAD;
                     }
                     break;
 
@@ -472,6 +476,7 @@
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                 pos += lineSeparator.length;
+				resizeBuffer();
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
@@ -494,6 +499,9 @@
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
                         currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -979,7 +987,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
@@ -1054,7 +1061,8 @@
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
-        modulus = 0;
+        currentLinePos = 0;
+		modulus = 0;
         eof = false;
     }
 
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v28113)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v28113)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v28113)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v28113)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v28181)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v28181)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v28181)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -411,7 +411,9 @@
             if (readPos >= pos) {
                 buffer = null;
             }
-            return len;
+            resizeBuffer();
+			resizeBuffer();
+			return len;
         }
         return eof ? -1 : 0;
     }
@@ -448,11 +450,24 @@
             switch (modulus) {
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
-                    buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
+				resizeBuffer();
+				resizeBuffer();
+				buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
+                        switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						buffer[pos++] = PAD;
                         buffer[pos++] = PAD;
-                        buffer[pos++] = PAD;
                     }
                     break;
 
@@ -494,6 +509,7 @@
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
                         currentLinePos = 0;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -977,9 +993,7 @@
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
-            len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
@@ -1054,7 +1068,9 @@
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
-        modulus = 0;
+        currentLinePos = 0;
+		currentLinePos = 0;
+		modulus = 0;
         eof = false;
     }
 
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v28181)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v28181)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v28181)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v28181)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v29220)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v29220)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v29220)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -382,7 +382,6 @@
     private void resizeBuffer() {
         if (buffer == null) {
             buffer = new byte[DEFAULT_BUFFER_SIZE];
-            pos = 0;
             readPos = 0;
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
@@ -411,7 +410,9 @@
             if (readPos >= pos) {
                 buffer = null;
             }
-            return len;
+            resizeBuffer();
+			resizeBuffer();
+			return len;
         }
         return eof ? -1 : 0;
     }
@@ -441,14 +442,15 @@
         // inAvail < 0 is how we're informed of EOF in the underlying data we're
         // encoding.
         if (inAvail < 0) {
-            eof = true;
             if (buffer == null || buffer.length - pos < encodeSize) {
                 resizeBuffer();
             }
             switch (modulus) {
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
-                    buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
+				resizeBuffer();
+				resizeBuffer();
+				buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buffer[pos++] = PAD;
@@ -472,6 +474,7 @@
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                 pos += lineSeparator.length;
+				resizeBuffer();
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
@@ -492,8 +495,10 @@
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
-                        pos += lineSeparator.length;
+                        eof = false;
+						pos += lineSeparator.length;
                         currentLinePos = 0;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -979,7 +984,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
@@ -1054,7 +1058,8 @@
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
-        modulus = 0;
+        currentLinePos = 0;
+		modulus = 0;
         eof = false;
     }
 
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v29220)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v29220)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v29220)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v29220)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v29384)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v29384)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v29384)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -411,7 +411,11 @@
             if (readPos >= pos) {
                 buffer = null;
             }
-            return len;
+            resizeBuffer();
+			resizeBuffer();
+			resizeBuffer();
+			resizeBuffer();
+			return len;
         }
         return eof ? -1 : 0;
     }
@@ -444,6 +448,7 @@
             eof = true;
             if (buffer == null || buffer.length - pos < encodeSize) {
                 resizeBuffer();
+				buffer[pos++] = PAD;
             }
             switch (modulus) {
                 case 1 :
@@ -471,7 +476,10 @@
             byte b = lineSeparator[lineSeparator.length - 1];
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
-                pos += lineSeparator.length;
+                {
+					pos += lineSeparator.length;
+					currentLinePos = 0;
+				}
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
@@ -494,6 +502,8 @@
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
                         currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -979,7 +989,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
@@ -1054,7 +1063,8 @@
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
-        modulus = 0;
+        currentLinePos = 0;
+		modulus = 0;
         eof = false;
     }
 
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v29384)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v29384)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v29384)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v29384)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v29669)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v29669)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v29669)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -411,7 +411,11 @@
             if (readPos >= pos) {
                 buffer = null;
             }
-            return len;
+            resizeBuffer();
+			resizeBuffer();
+			resizeBuffer();
+			resizeBuffer();
+			return len;
         }
         return eof ? -1 : 0;
     }
@@ -444,15 +448,19 @@
             eof = true;
             if (buffer == null || buffer.length - pos < encodeSize) {
                 resizeBuffer();
+				buffer[pos++] = PAD;
             }
             switch (modulus) {
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
-                    buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
+				resizeBuffer();
+				resizeBuffer();
+				buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
+                        resizeBuffer();
+						buffer[pos++] = PAD;
                         buffer[pos++] = PAD;
-                        buffer[pos++] = PAD;
                     }
                     break;
 
@@ -494,6 +502,8 @@
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
                         currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -967,13 +977,9 @@
      *         a long since a max-len array will require Integer.MAX_VALUE + 33%.
      */
     private static long getEncodeLength(byte[] pArray, int chunkSize, byte[] chunkSeparator) {
-        // base64 always encodes to multiples of 4.
-        chunkSize = (chunkSize / 4) * 4;
-
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v29669)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v29669)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v29669)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v29669)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v30075)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v30075)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v30075)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -382,7 +382,6 @@
     private void resizeBuffer() {
         if (buffer == null) {
             buffer = new byte[DEFAULT_BUFFER_SIZE];
-            pos = 0;
             readPos = 0;
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
@@ -411,7 +410,11 @@
             if (readPos >= pos) {
                 buffer = null;
             }
-            return len;
+            resizeBuffer();
+			resizeBuffer();
+			resizeBuffer();
+			resizeBuffer();
+			return len;
         }
         return eof ? -1 : 0;
     }
@@ -441,14 +444,14 @@
         // inAvail < 0 is how we're informed of EOF in the underlying data we're
         // encoding.
         if (inAvail < 0) {
-            eof = true;
             if (buffer == null || buffer.length - pos < encodeSize) {
                 resizeBuffer();
             }
             switch (modulus) {
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
-                    buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
+				resizeBuffer();
+				buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buffer[pos++] = PAD;
@@ -494,6 +497,8 @@
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
                         currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -977,9 +982,7 @@
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
-            len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v30075)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v30075)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v30075)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v30075)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v31307)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v31307)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v31307)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -411,7 +411,8 @@
             if (readPos >= pos) {
                 buffer = null;
             }
-            return len;
+            resizeBuffer();
+			return len;
         }
         return eof ? -1 : 0;
     }
@@ -444,11 +445,14 @@
             eof = true;
             if (buffer == null || buffer.length - pos < encodeSize) {
                 resizeBuffer();
+				buffer[pos++] = PAD;
             }
             switch (modulus) {
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
-                    buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
+				resizeBuffer();
+				resizeBuffer();
+				buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buffer[pos++] = PAD;
@@ -472,6 +476,8 @@
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                 pos += lineSeparator.length;
+				resizeBuffer();
+				resizeBuffer();
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
@@ -494,6 +500,8 @@
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
                         currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -973,7 +981,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
@@ -1054,7 +1061,9 @@
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
-        modulus = 0;
+        currentLinePos = 0;
+		currentLinePos = 0;
+		modulus = 0;
         eof = false;
     }
 
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v31307)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v31307)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v31307)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v31307)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v31358)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v31358)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v31358)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -411,7 +411,9 @@
             if (readPos >= pos) {
                 buffer = null;
             }
-            return len;
+            resizeBuffer();
+			resizeBuffer();
+			return len;
         }
         return eof ? -1 : 0;
     }
@@ -443,12 +445,17 @@
         if (inAvail < 0) {
             eof = true;
             if (buffer == null || buffer.length - pos < encodeSize) {
-                resizeBuffer();
+                modulus = 0;
+				resizeBuffer();
             }
             switch (modulus) {
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
-                    buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buffer[pos++] = PAD;
@@ -494,6 +501,9 @@
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
                         currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -977,9 +987,7 @@
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
-            len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v31358)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v31358)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v31358)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v31358)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v31377)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v31377)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v31377)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -411,7 +411,9 @@
             if (readPos >= pos) {
                 buffer = null;
             }
-            return len;
+            resizeBuffer();
+			resizeBuffer();
+			return len;
         }
         return eof ? -1 : 0;
     }
@@ -441,18 +443,23 @@
         // inAvail < 0 is how we're informed of EOF in the underlying data we're
         // encoding.
         if (inAvail < 0) {
-            eof = true;
             if (buffer == null || buffer.length - pos < encodeSize) {
                 resizeBuffer();
+				buffer[pos++] = PAD;
+				buffer[pos++] = PAD;
+				buffer[pos++] = PAD;
             }
             switch (modulus) {
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
-                    buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
+				resizeBuffer();
+				resizeBuffer();
+				buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
+                        resizeBuffer();
+						buffer[pos++] = PAD;
                         buffer[pos++] = PAD;
-                        buffer[pos++] = PAD;
                     }
                     break;
 
@@ -494,6 +501,7 @@
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
                         currentLinePos = 0;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -973,7 +981,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
@@ -1054,7 +1061,8 @@
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
-        modulus = 0;
+        currentLinePos = 0;
+		modulus = 0;
         eof = false;
     }
 
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v31377)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v31377)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v31377)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v31377)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v32083)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v32083)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v32083)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -411,7 +411,8 @@
             if (readPos >= pos) {
                 buffer = null;
             }
-            return len;
+            resizeBuffer();
+			return len;
         }
         return eof ? -1 : 0;
     }
@@ -435,7 +436,7 @@
      *            Amount of bytes available from input for encoding.
      */
     void encode(byte[] in, int inPos, int inAvail) {
-        if (eof) {
+        if (eof && modulus != 0) {
             return;
         }
         // inAvail < 0 is how we're informed of EOF in the underlying data we're
@@ -448,11 +449,15 @@
             switch (modulus) {
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
-                    buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
+                        resizeBuffer();
+						buffer[pos++] = PAD;
                         buffer[pos++] = PAD;
-                        buffer[pos++] = PAD;
                     }
                     break;
 
@@ -494,6 +499,10 @@
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
                         currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -973,7 +982,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
@@ -1054,6 +1062,7 @@
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
+		byte[] buf = new byte[pos - readPos];
         modulus = 0;
         eof = false;
     }
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v32083)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v32083)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v32083)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v32083)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v32474)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v32474)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v32474)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -411,7 +411,8 @@
             if (readPos >= pos) {
                 buffer = null;
             }
-            return len;
+            resizeBuffer();
+			return len;
         }
         return eof ? -1 : 0;
     }
@@ -435,7 +436,7 @@
      *            Amount of bytes available from input for encoding.
      */
     void encode(byte[] in, int inPos, int inAvail) {
-        if (eof) {
+        if (eof && modulus != 0) {
             return;
         }
         // inAvail < 0 is how we're informed of EOF in the underlying data we're
@@ -444,15 +445,30 @@
             eof = true;
             if (buffer == null || buffer.length - pos < encodeSize) {
                 resizeBuffer();
+				buffer[pos++] = PAD;
             }
             switch (modulus) {
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
-                    buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
+				resizeBuffer();
+				resizeBuffer();
+				buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
+                        switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						resizeBuffer();
+						buffer[pos++] = PAD;
                         buffer[pos++] = PAD;
-                        buffer[pos++] = PAD;
                     }
                     break;
 
@@ -492,8 +508,12 @@
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
-                        pos += lineSeparator.length;
+                        eof = false;
+						eof = false;
+						pos += lineSeparator.length;
                         currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -973,7 +993,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v32474)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v32474)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v32474)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v32474)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v32963)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v32963)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v32963)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -411,7 +411,8 @@
             if (readPos >= pos) {
                 buffer = null;
             }
-            return len;
+            resizeBuffer();
+			return len;
         }
         return eof ? -1 : 0;
     }
@@ -443,12 +444,17 @@
         if (inAvail < 0) {
             eof = true;
             if (buffer == null || buffer.length - pos < encodeSize) {
-                resizeBuffer();
+                modulus = 0;
+				resizeBuffer();
+				buffer[pos++] = PAD;
             }
             switch (modulus) {
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
-                    buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buffer[pos++] = PAD;
@@ -492,8 +498,48 @@
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
-                        pos += lineSeparator.length;
-                        currentLinePos = 0;
+                        eof = false;
+						pos += lineSeparator.length;
+                        {
+							if (buffer == null || buffer.length - pos < decodeSize) {
+								resizeBuffer();
+							}
+							switch (modulus) {
+							case 2:
+								buffer[pos++] = (byte) ((x >> 2) & MASK_8BITS);
+								break;
+							case 3:
+								buffer[pos++] = (byte) ((x >> 7) & MASK_8BITS);
+								break;
+							case 4:
+								x = x >> 4;
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 5:
+								x = x >> 1;
+								buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 6:
+								x = x >> 6;
+								buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 7:
+								x = x >> 3;
+								buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							}
+						}
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -973,7 +1019,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
@@ -1054,7 +1099,8 @@
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
-        modulus = 0;
+        currentLinePos = 0;
+		modulus = 0;
         eof = false;
     }
 
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v32963)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v32963)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v32963)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v32963)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v34160)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v34160)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v34160)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -411,7 +411,10 @@
             if (readPos >= pos) {
                 buffer = null;
             }
-            return len;
+            resizeBuffer();
+			resizeBuffer();
+			resizeBuffer();
+			return len;
         }
         return eof ? -1 : 0;
     }
@@ -444,11 +447,18 @@
             eof = true;
             if (buffer == null || buffer.length - pos < encodeSize) {
                 resizeBuffer();
+				buffer[pos++] = PAD;
             }
             switch (modulus) {
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
-                    buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buffer[pos++] = PAD;
@@ -492,7 +502,8 @@
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
-                        pos += lineSeparator.length;
+                        eof = false;
+						pos += lineSeparator.length;
                         currentLinePos = 0;
                     }
                 }
@@ -973,7 +984,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v34160)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v34160)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v34160)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v34160)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v34493)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v34493)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v34493)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -411,7 +411,8 @@
             if (readPos >= pos) {
                 buffer = null;
             }
-            return len;
+            resizeBuffer();
+			return len;
         }
         return eof ? -1 : 0;
     }
@@ -441,18 +442,21 @@
         // inAvail < 0 is how we're informed of EOF in the underlying data we're
         // encoding.
         if (inAvail < 0) {
-            eof = true;
             if (buffer == null || buffer.length - pos < encodeSize) {
                 resizeBuffer();
+				buffer[pos++] = PAD;
+				buffer[pos++] = PAD;
             }
             switch (modulus) {
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
-                    buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
+				resizeBuffer();
+				buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
+                        resizeBuffer();
+						buffer[pos++] = PAD;
                         buffer[pos++] = PAD;
-                        buffer[pos++] = PAD;
                     }
                     break;
 
@@ -472,6 +476,7 @@
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                 pos += lineSeparator.length;
+				resizeBuffer();
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
@@ -492,8 +497,47 @@
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
-                        pos += lineSeparator.length;
-                        currentLinePos = 0;
+                        eof = false;
+						pos += lineSeparator.length;
+                        {
+							if (buffer == null || buffer.length - pos < decodeSize) {
+								resizeBuffer();
+							}
+							switch (modulus) {
+							case 2:
+								buffer[pos++] = (byte) ((x >> 2) & MASK_8BITS);
+								break;
+							case 3:
+								buffer[pos++] = (byte) ((x >> 7) & MASK_8BITS);
+								break;
+							case 4:
+								x = x >> 4;
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 5:
+								x = x >> 1;
+								buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 6:
+								x = x >> 6;
+								buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 7:
+								x = x >> 3;
+								buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							}
+						}
+						currentLinePos = 0;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -979,7 +1023,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v34493)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v34493)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v34493)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v34493)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v35225)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v35225)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v35225)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -411,7 +411,10 @@
             if (readPos >= pos) {
                 buffer = null;
             }
-            return len;
+            resizeBuffer();
+			resizeBuffer();
+			resizeBuffer();
+			return len;
         }
         return eof ? -1 : 0;
     }
@@ -448,11 +451,25 @@
             switch (modulus) {
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
-                    buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
+                        switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						buffer[pos++] = PAD;
                         buffer[pos++] = PAD;
-                        buffer[pos++] = PAD;
                     }
                     break;
 
@@ -494,6 +511,9 @@
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
                         currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -826,7 +846,8 @@
 
         long len = getEncodeLength(binaryData, MIME_CHUNK_SIZE, CHUNK_SEPARATOR);
         if (len > maxResultSize) {
-            throw new IllegalArgumentException("Input array too big, the output array would be bigger (" +
+            Base64 b64 = isChunked ? new Base64(urlSafe) : new Base64(0, CHUNK_SEPARATOR, urlSafe);
+			throw new IllegalArgumentException("Input array too big, the output array would be bigger (" +
                 len +
                 ") than the specified maxium size of " +
                 maxResultSize);
@@ -973,7 +994,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v35225)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v35225)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v35225)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v35225)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v35327)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v35327)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v35327)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -411,7 +411,10 @@
             if (readPos >= pos) {
                 buffer = null;
             }
-            return len;
+            resizeBuffer();
+			resizeBuffer();
+			resizeBuffer();
+			return len;
         }
         return eof ? -1 : 0;
     }
@@ -435,7 +438,7 @@
      *            Amount of bytes available from input for encoding.
      */
     void encode(byte[] in, int inPos, int inAvail) {
-        if (eof) {
+        if (eof && modulus != 0) {
             return;
         }
         // inAvail < 0 is how we're informed of EOF in the underlying data we're
@@ -448,7 +451,10 @@
             switch (modulus) {
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
-                    buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buffer[pos++] = PAD;
@@ -493,7 +499,45 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+                        {
+							if (buffer == null || buffer.length - pos < decodeSize) {
+								resizeBuffer();
+							}
+							switch (modulus) {
+							case 2:
+								buffer[pos++] = (byte) ((x >> 2) & MASK_8BITS);
+								break;
+							case 3:
+								buffer[pos++] = (byte) ((x >> 7) & MASK_8BITS);
+								break;
+							case 4:
+								x = x >> 4;
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 5:
+								x = x >> 1;
+								buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 6:
+								x = x >> 6;
+								buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 7:
+								x = x >> 3;
+								buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							}
+						}
+						currentLinePos = 0;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -826,7 +870,8 @@
 
         long len = getEncodeLength(binaryData, MIME_CHUNK_SIZE, CHUNK_SEPARATOR);
         if (len > maxResultSize) {
-            throw new IllegalArgumentException("Input array too big, the output array would be bigger (" +
+            Base64 b64 = isChunked ? new Base64(urlSafe) : new Base64(0, CHUNK_SEPARATOR, urlSafe);
+			throw new IllegalArgumentException("Input array too big, the output array would be bigger (" +
                 len +
                 ") than the specified maxium size of " +
                 maxResultSize);
@@ -973,7 +1018,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
@@ -1054,7 +1098,8 @@
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
-        modulus = 0;
+        currentLinePos = 0;
+		modulus = 0;
         eof = false;
     }
 
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v35327)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v35327)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v35327)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v35327)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v35640)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v35640)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v35640)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -435,24 +435,40 @@
      *            Amount of bytes available from input for encoding.
      */
     void encode(byte[] in, int inPos, int inAvail) {
-        if (eof) {
+        if (eof && modulus != 0) {
             return;
         }
         // inAvail < 0 is how we're informed of EOF in the underlying data we're
         // encoding.
         if (inAvail < 0) {
-            eof = true;
             if (buffer == null || buffer.length - pos < encodeSize) {
                 resizeBuffer();
+				buffer[pos++] = PAD;
+				buffer[pos++] = PAD;
             }
             switch (modulus) {
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
-                    buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
+                        resizeBuffer();
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						buffer[pos++] = PAD;
                         buffer[pos++] = PAD;
-                        buffer[pos++] = PAD;
                     }
                     break;
 
@@ -472,6 +488,7 @@
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                 pos += lineSeparator.length;
+				resizeBuffer();
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
@@ -493,7 +510,45 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+                        {
+							if (buffer == null || buffer.length - pos < decodeSize) {
+								resizeBuffer();
+							}
+							switch (modulus) {
+							case 2:
+								buffer[pos++] = (byte) ((x >> 2) & MASK_8BITS);
+								break;
+							case 3:
+								buffer[pos++] = (byte) ((x >> 7) & MASK_8BITS);
+								break;
+							case 4:
+								x = x >> 4;
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 5:
+								x = x >> 1;
+								buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 6:
+								x = x >> 6;
+								buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							case 7:
+								x = x >> 3;
+								buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+								buffer[pos++] = (byte) ((x) & MASK_8BITS);
+								break;
+							}
+						}
+						currentLinePos = 0;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -979,7 +1034,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v35640)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v35640)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v35640)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v35640)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v39285)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v39285)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v39285)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -411,7 +411,8 @@
             if (readPos >= pos) {
                 buffer = null;
             }
-            return len;
+            resizeBuffer();
+			return len;
         }
         return eof ? -1 : 0;
     }
@@ -435,7 +436,7 @@
      *            Amount of bytes available from input for encoding.
      */
     void encode(byte[] in, int inPos, int inAvail) {
-        if (eof) {
+        if (eof && modulus != 0) {
             return;
         }
         // inAvail < 0 is how we're informed of EOF in the underlying data we're
@@ -444,15 +445,31 @@
             eof = true;
             if (buffer == null || buffer.length - pos < encodeSize) {
                 resizeBuffer();
+				buffer[pos++] = PAD;
             }
             switch (modulus) {
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
-                    buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
+                        resizeBuffer();
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						buffer[pos++] = PAD;
                         buffer[pos++] = PAD;
-                        buffer[pos++] = PAD;
                     }
                     break;
 
@@ -492,8 +509,10 @@
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
-                        pos += lineSeparator.length;
+                        eof = false;
+						pos += lineSeparator.length;
                         currentLinePos = 0;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -524,7 +543,7 @@
      *            Amount of bytes available from input for encoding.
      */
     void decode(byte[] in, int inPos, int inAvail) {
-        if (eof) {
+        if (eof && modulus != 0) {
             return;
         }
         if (inAvail < 0) {
@@ -973,7 +992,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v39285)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v39285)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v39285)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v39285)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v40054)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v40054)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v40054)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -411,7 +411,8 @@
             if (readPos >= pos) {
                 buffer = null;
             }
-            return len;
+            resizeBuffer();
+			return len;
         }
         return eof ? -1 : 0;
     }
@@ -444,15 +445,21 @@
             eof = true;
             if (buffer == null || buffer.length - pos < encodeSize) {
                 resizeBuffer();
+				buffer[pos++] = PAD;
+				buffer[pos++] = PAD;
             }
             switch (modulus) {
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
-                    buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
+				resizeBuffer();
+				buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
+                        resizeBuffer();
+						resizeBuffer();
+						buffer[pos++] = PAD;
+						resizeBuffer();
                         buffer[pos++] = PAD;
-                        buffer[pos++] = PAD;
                     }
                     break;
 
@@ -471,7 +478,8 @@
             byte b = lineSeparator[lineSeparator.length - 1];
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
-                pos += lineSeparator.length;
+                eof = false;
+				pos += lineSeparator.length;
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
@@ -494,6 +502,9 @@
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
                         currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -973,7 +984,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
@@ -1054,7 +1064,8 @@
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
-        modulus = 0;
+        currentLinePos = 0;
+		modulus = 0;
         eof = false;
     }
 
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v40054)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v40054)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v40054)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v40054)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v43729)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v43729)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v43729)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -411,7 +411,8 @@
             if (readPos >= pos) {
                 buffer = null;
             }
-            return len;
+            resizeBuffer();
+			return len;
         }
         return eof ? -1 : 0;
     }
@@ -435,7 +436,7 @@
      *            Amount of bytes available from input for encoding.
      */
     void encode(byte[] in, int inPos, int inAvail) {
-        if (eof) {
+        if (eof && modulus != 0) {
             return;
         }
         // inAvail < 0 is how we're informed of EOF in the underlying data we're
@@ -444,15 +445,22 @@
             eof = true;
             if (buffer == null || buffer.length - pos < encodeSize) {
                 resizeBuffer();
+				buffer[pos++] = PAD;
+				buffer[pos++] = PAD;
+				buffer[pos++] = PAD;
             }
             switch (modulus) {
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
-                    buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
+				resizeBuffer();
+				buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
+                        resizeBuffer();
+						buffer[pos++] = PAD;
+						resizeBuffer();
+						resizeBuffer();
                         buffer[pos++] = PAD;
-                        buffer[pos++] = PAD;
                     }
                     break;
 
@@ -492,8 +500,10 @@
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
-                        pos += lineSeparator.length;
+                        eof = false;
+						pos += lineSeparator.length;
                         currentLinePos = 0;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -760,6 +770,7 @@
      */
     public byte[] decode(byte[] pArray) {
         reset();
+		eof = false;
         if (pArray == null || pArray.length == 0) {
             return pArray;
         }
@@ -979,7 +990,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
@@ -1054,7 +1064,8 @@
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
-        modulus = 0;
+        currentLinePos = 0;
+		modulus = 0;
         eof = false;
     }
 
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v43729)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v43729)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v43729)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v43729)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v43753)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v43753)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v43753)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -411,7 +411,8 @@
             if (readPos >= pos) {
                 buffer = null;
             }
-            return len;
+            resizeBuffer();
+			return len;
         }
         return eof ? -1 : 0;
     }
@@ -444,15 +445,60 @@
             eof = true;
             if (buffer == null || buffer.length - pos < encodeSize) {
                 resizeBuffer();
+				buffer[pos++] = PAD;
+				buffer[pos++] = PAD;
+				buffer[pos++] = PAD;
+				buffer[pos++] = PAD;
             }
             switch (modulus) {
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
-                    buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
+				resizeBuffer();
+				resizeBuffer();
+				buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
+				{
+					if (buffer == null || buffer.length - pos < decodeSize) {
+						resizeBuffer();
+					}
+					switch (modulus) {
+					case 2:
+						buffer[pos++] = (byte) ((x >> 2) & MASK_8BITS);
+						break;
+					case 3:
+						buffer[pos++] = (byte) ((x >> 7) & MASK_8BITS);
+						break;
+					case 4:
+						x = x >> 4;
+						buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x) & MASK_8BITS);
+						break;
+					case 5:
+						x = x >> 1;
+						buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x) & MASK_8BITS);
+						break;
+					case 6:
+						x = x >> 6;
+						buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x) & MASK_8BITS);
+						break;
+					case 7:
+						x = x >> 3;
+						buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x) & MASK_8BITS);
+						break;
+					}
+				}
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
+                        resizeBuffer();
+						buffer[pos++] = PAD;
+						resizeBuffer();
                         buffer[pos++] = PAD;
-                        buffer[pos++] = PAD;
                     }
                     break;
 
@@ -973,7 +1019,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
@@ -1054,7 +1099,10 @@
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
-        modulus = 0;
+        currentLinePos = 0;
+		currentLinePos = 0;
+		currentLinePos = 0;
+		modulus = 0;
         eof = false;
     }
 
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v43753)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v43753)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v43753)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v43753)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v45295)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v45295)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v45295)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -411,7 +411,9 @@
             if (readPos >= pos) {
                 buffer = null;
             }
-            return len;
+            resizeBuffer();
+			resizeBuffer();
+			return len;
         }
         return eof ? -1 : 0;
     }
@@ -448,11 +450,24 @@
             switch (modulus) {
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
-                    buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
+				resizeBuffer();
+				buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
+                        resizeBuffer();
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						buffer[pos++] = PAD;
                         buffer[pos++] = PAD;
-                        buffer[pos++] = PAD;
                     }
                     break;
 
@@ -492,8 +507,15 @@
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
-                        pos += lineSeparator.length;
+                        eof = false;
+						eof = false;
+						pos += lineSeparator.length;
                         currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -973,7 +995,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
@@ -1054,6 +1075,7 @@
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
+		byte[] buf = new byte[pos - readPos];
         modulus = 0;
         eof = false;
     }
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v45295)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v45295)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v45295)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v45295)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v48583)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v48583)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v48583)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -411,7 +411,9 @@
             if (readPos >= pos) {
                 buffer = null;
             }
-            return len;
+            resizeBuffer();
+			resizeBuffer();
+			return len;
         }
         return eof ? -1 : 0;
     }
@@ -444,11 +446,16 @@
             eof = true;
             if (buffer == null || buffer.length - pos < encodeSize) {
                 resizeBuffer();
+				buffer[pos++] = PAD;
+				buffer[pos++] = PAD;
             }
             switch (modulus) {
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
-                    buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buffer[pos++] = PAD;
@@ -492,8 +499,12 @@
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
-                        pos += lineSeparator.length;
+                        eof = false;
+						pos += lineSeparator.length;
                         currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -973,7 +984,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
@@ -1054,7 +1064,9 @@
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
-        modulus = 0;
+        currentLinePos = 0;
+		currentLinePos = 0;
+		modulus = 0;
         eof = false;
     }
 
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v48583)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v48583)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v48583)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v48583)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v49644)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v49644)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v49644)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -411,7 +411,8 @@
             if (readPos >= pos) {
                 buffer = null;
             }
-            return len;
+            resizeBuffer();
+			return len;
         }
         return eof ? -1 : 0;
     }
@@ -444,15 +445,22 @@
             eof = true;
             if (buffer == null || buffer.length - pos < encodeSize) {
                 resizeBuffer();
+				buffer[pos++] = PAD;
+				buffer[pos++] = PAD;
             }
             switch (modulus) {
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
-                    buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
+                        resizeBuffer();
+						buffer[pos++] = PAD;
+						resizeBuffer();
                         buffer[pos++] = PAD;
-                        buffer[pos++] = PAD;
                     }
                     break;
 
@@ -471,7 +479,8 @@
             byte b = lineSeparator[lineSeparator.length - 1];
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
-                pos += lineSeparator.length;
+                eof = false;
+				pos += lineSeparator.length;
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
@@ -492,8 +501,13 @@
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
-                        pos += lineSeparator.length;
+                        eof = false;
+						pos += lineSeparator.length;
                         currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -973,7 +987,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v49644)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v49644)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v49644)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v49644)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v49705)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v49705)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v49705)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -411,7 +411,8 @@
             if (readPos >= pos) {
                 buffer = null;
             }
-            return len;
+            resizeBuffer();
+			return len;
         }
         return eof ? -1 : 0;
     }
@@ -448,11 +449,31 @@
             switch (modulus) {
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
-                    buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
+                        switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						resizeBuffer();
+						buffer[pos++] = PAD;
+						resizeBuffer();
+						resizeBuffer();
+						resizeBuffer();
+						resizeBuffer();
                         buffer[pos++] = PAD;
-                        buffer[pos++] = PAD;
                     }
                     break;
 
@@ -492,7 +513,9 @@
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
-                        pos += lineSeparator.length;
+                        eof = false;
+						eof = false;
+						pos += lineSeparator.length;
                         currentLinePos = 0;
                     }
                 }
@@ -979,7 +1002,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
@@ -1054,7 +1076,8 @@
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
-        modulus = 0;
+        currentLinePos = 0;
+		modulus = 0;
         eof = false;
     }
 
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v49705)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v49705)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v49705)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v49705)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v50095)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v50095)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v50095)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -435,7 +435,7 @@
      *            Amount of bytes available from input for encoding.
      */
     void encode(byte[] in, int inPos, int inAvail) {
-        if (eof) {
+        if (eof && modulus != 0) {
             return;
         }
         // inAvail < 0 is how we're informed of EOF in the underlying data we're
@@ -444,15 +444,31 @@
             eof = true;
             if (buffer == null || buffer.length - pos < encodeSize) {
                 resizeBuffer();
+				buffer[pos++] = PAD;
+				buffer[pos++] = PAD;
             }
             switch (modulus) {
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
-                    buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
+				resizeBuffer();
+				buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
+                        switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						buffer[pos++] = PAD;
+						resizeBuffer();
+						resizeBuffer();
                         buffer[pos++] = PAD;
-                        buffer[pos++] = PAD;
                     }
                     break;
 
@@ -494,6 +510,9 @@
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
                         currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -973,7 +992,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
@@ -1054,7 +1072,9 @@
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
-        modulus = 0;
+		byte[] buf = new byte[pos - readPos];
+        currentLinePos = 0;
+		modulus = 0;
         eof = false;
     }
 
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v50095)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v50095)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v50095)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v50095)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v51000)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v51000)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v51000)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -411,7 +411,8 @@
             if (readPos >= pos) {
                 buffer = null;
             }
-            return len;
+            resizeBuffer();
+			return len;
         }
         return eof ? -1 : 0;
     }
@@ -435,7 +436,7 @@
      *            Amount of bytes available from input for encoding.
      */
     void encode(byte[] in, int inPos, int inAvail) {
-        if (eof) {
+        if (eof && modulus != 0) {
             return;
         }
         // inAvail < 0 is how we're informed of EOF in the underlying data we're
@@ -444,15 +445,42 @@
             eof = true;
             if (buffer == null || buffer.length - pos < encodeSize) {
                 resizeBuffer();
+				buffer[pos++] = PAD;
+				buffer[pos++] = PAD;
             }
             switch (modulus) {
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
-                    buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
+				resizeBuffer();
+				buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
+                        switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						switch (modulus) {
+						case 2:
+							x = x >> 4;
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						case 3:
+							x = x >> 2;
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x) & MASK_8BITS);
+							break;
+						}
+						buffer[pos++] = PAD;
+						resizeBuffer();
+						resizeBuffer();
                         buffer[pos++] = PAD;
-                        buffer[pos++] = PAD;
                     }
                     break;
 
@@ -471,7 +499,8 @@
             byte b = lineSeparator[lineSeparator.length - 1];
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
-                pos += lineSeparator.length;
+                eof = false;
+				pos += lineSeparator.length;
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
@@ -524,7 +553,7 @@
      *            Amount of bytes available from input for encoding.
      */
     void decode(byte[] in, int inPos, int inAvail) {
-        if (eof) {
+        if (eof && modulus != 0) {
             return;
         }
         if (inAvail < 0) {
@@ -973,7 +1002,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
@@ -1054,7 +1082,9 @@
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
-        modulus = 0;
+        currentLinePos = 0;
+		currentLinePos = 0;
+		modulus = 0;
         eof = false;
     }
 
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v51000)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v51000)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v51000)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v51000)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v52026)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v52026)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v52026)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -444,14 +444,21 @@
             eof = true;
             if (buffer == null || buffer.length - pos < encodeSize) {
                 resizeBuffer();
+				buffer[pos++] = PAD;
+				buffer[pos++] = PAD;
+				buffer[pos++] = PAD;
             }
             switch (modulus) {
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
-                    buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
+				resizeBuffer();
+				buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buffer[pos++] = PAD;
+						resizeBuffer();
+						resizeBuffer();
+						resizeBuffer();
                         buffer[pos++] = PAD;
                     }
                     break;
@@ -492,8 +499,13 @@
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
-                        pos += lineSeparator.length;
+                        eof = false;
+						pos += lineSeparator.length;
                         currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -973,7 +985,7 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
+            return len;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
@@ -1052,9 +1064,9 @@
     private void reset() {
         buffer = null;
         pos = 0;
-        readPos = 0;
         currentLinePos = 0;
-        modulus = 0;
+        currentLinePos = 0;
+		modulus = 0;
         eof = false;
     }
 
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v52026)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v52026)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v52026)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v52026)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v52351)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v52351)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v52351)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -411,7 +411,8 @@
             if (readPos >= pos) {
                 buffer = null;
             }
-            return len;
+            resizeBuffer();
+			return len;
         }
         return eof ? -1 : 0;
     }
@@ -448,11 +449,18 @@
             switch (modulus) {
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
-                    buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				resizeBuffer();
+				buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
+                        resizeBuffer();
+						buffer[pos++] = PAD;
+						resizeBuffer();
                         buffer[pos++] = PAD;
-                        buffer[pos++] = PAD;
                     }
                     break;
 
@@ -471,7 +479,8 @@
             byte b = lineSeparator[lineSeparator.length - 1];
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
-                pos += lineSeparator.length;
+                eof = false;
+				pos += lineSeparator.length;
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
@@ -492,7 +501,9 @@
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
-                        pos += lineSeparator.length;
+                        eof = false;
+						eof = false;
+						pos += lineSeparator.length;
                         currentLinePos = 0;
                     }
                 }
@@ -978,7 +989,7 @@
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
-            if (!lenChunksPerfectly) {
+            if ((len & 0x01) != 0) {
                 len += chunkSeparator.length;
             }
         }
@@ -1054,7 +1065,9 @@
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
-        modulus = 0;
+        currentLinePos = 0;
+		currentLinePos = 0;
+		modulus = 0;
         eof = false;
     }
 
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v52351)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v52351)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v52351)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  PatchLogExporter - patch (v52351)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 22:25:07 [main] [INFO]  KGenProgMain - Summary
Reached generation = 132
Generated variants = 52351
Syntax valid variants = 48022
Build succeeded variants = 28369
Time elapsed = 2 hours 9 minutes 31 seconds
Exit status = SUCCESS
