2023-11-13 14:34:33 [main] [WARN]  Configuration$Builder - The directory where kGenProg is running is different from the root directory of the given target project.
2023-11-13 14:34:33 [main] [WARN]  Configuration$Builder - If the target project includes test cases with file I/O, such test cases won't run correctly.
2023-11-13 14:34:33 [main] [WARN]  Configuration$Builder - We recommend you running kGenProg with the root directory of the target project as the current directory.
2023-11-13 14:34:33 [main] [INFO]  KGenProgMain - 
==================== kGenProg Configuration ====================
configPath = /Users/haradakanon/Downloads/kGenProg-1.8.2/example/codec9/kgenprog-9.toml (set by command line)
rootDir = /Users/haradakanon/Downloads/kGenProg-1.8.2/example/codec9 (set in config file)
productPaths = [/Users/haradakanon/Downloads/kGenProg-1.8.2/example/codec9/src/java] (set in config file)
testPaths = [/Users/haradakanon/Downloads/kGenProg-1.8.2/example/codec9/src/test] (set in config file)
classPaths = []
executionTests = [org.apache.commons.codec.binary.Base64Test] (set in config file)
outDir = kgenprog-out
logLevel = INFO (set in config file)
mutationGeneratingCount = 200 (set in config file)
crossoverGeneratingCount = 200 (set in config file)
headcount = 100
maxGeneration = 500 (set in config file)
timeLimit = PT24H (set in config file)
testTimeLimit = PT3M (set in config file)
requiredSolutionsCount = 100 (set in config file)
randomSeed = 0 (set by command line)
scope = PACKAGE (set in config file)
faultLocalization = Zoltar (set in config file)
mutationType = Simple
crossoverType = Random
firstVariantSelectionStrategy = Random
secondVariantSelectionStrategy = Random
isPatchOutput = true (set in config file)
isHistoryRecord = false
currentDirectory = /Users/haradakanon/Downloads/research
version = 1.8.2
================================================================
2023-11-13 14:34:41 [main] [INFO]  KGenProgMain - initial failed tests (1/51)
org.apache.commons.codec.binary.Base64Test.testCodec112: null

2023-11-13 14:34:41 [main] [INFO]  KGenProgMain - GA started
2023-11-13 14:34:41 [main] [INFO]  KGenProgMain - entered the era of 1st generation.
2023-11-13 14:34:58 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 17 seconds
Variants: generated 200, build-succeeded 16, build-failed 109, syntax-invalid 11, redundant 64
Fitness: max 1(1), min 0.49(1), ave 0.85
Test execution time: sum 3186 ms, max 411 ms, min 113 ms
----------------------------------------------------------------

2023-11-13 14:34:58 [main] [INFO]  KGenProgMain - entered the era of 2nd generation.
2023-11-13 14:35:15 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 33 seconds
Variants: generated 200, build-succeeded 47, build-failed 97, syntax-invalid 18, redundant 38
Fitness: max 0.98(13), min 0.157(1), ave 0.74
Test execution time: sum 5688 ms, max 211 ms, min 83 ms
----------------------------------------------------------------

2023-11-13 14:35:15 [main] [INFO]  KGenProgMain - entered the era of 3rd generation.
2023-11-13 14:35:48 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 minutes 7 seconds
Variants: generated 400, build-succeeded 142, build-failed 115, syntax-invalid 27, redundant 116
Fitness: max 1(3), min 0.157(4), ave 0.708
Test execution time: sum 16729 ms, max 3312 ms, min 64 ms
----------------------------------------------------------------

2023-11-13 14:35:48 [main] [INFO]  KGenProgMain - entered the era of 4th generation.
2023-11-13 14:36:17 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 minutes 36 seconds
Variants: generated 400, build-succeeded 152, build-failed 114, syntax-invalid 20, redundant 114
Fitness: max 1(3), min 0.216(1), ave 0.86
Test execution time: sum 14471 ms, max 212 ms, min 67 ms
----------------------------------------------------------------

2023-11-13 14:36:17 [main] [INFO]  KGenProgMain - entered the era of 5th generation.
2023-11-13 14:36:43 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 minutes 2 seconds
Variants: generated 400, build-succeeded 134, build-failed 116, syntax-invalid 19, redundant 131
Fitness: max 1(4), min 0.294(1), ave 0.931
Test execution time: sum 13678 ms, max 406 ms, min 68 ms
----------------------------------------------------------------

2023-11-13 14:36:43 [main] [INFO]  KGenProgMain - entered the era of 6th generation.
2023-11-13 14:37:11 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 minutes 30 seconds
Variants: generated 400, build-succeeded 149, build-failed 122, syntax-invalid 21, redundant 108
Fitness: max 1(5), min 0.49(2), ave 0.955
Test execution time: sum 15985 ms, max 504 ms, min 65 ms
----------------------------------------------------------------

2023-11-13 14:37:11 [main] [INFO]  KGenProgMain - entered the era of 7th generation.
2023-11-13 14:37:41 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 minutes 59 seconds
Variants: generated 400, build-succeeded 141, build-failed 114, syntax-invalid 28, redundant 117
Fitness: max 1(4), min 0.314(1), ave 0.938
Test execution time: sum 16906 ms, max 1994 ms, min 68 ms
----------------------------------------------------------------

2023-11-13 14:37:41 [main] [INFO]  KGenProgMain - entered the era of 8th generation.
2023-11-13 14:38:07 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 minutes 25 seconds
Variants: generated 400, build-succeeded 135, build-failed 127, syntax-invalid 34, redundant 104
Fitness: max 1(6), min 0.667(1), ave 0.965
Test execution time: sum 13777 ms, max 279 ms, min 83 ms
----------------------------------------------------------------

2023-11-13 14:38:07 [main] [INFO]  KGenProgMain - entered the era of 9th generation.
2023-11-13 14:38:46 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 minutes 5 seconds
Variants: generated 400, build-succeeded 152, build-failed 114, syntax-invalid 23, redundant 111
Fitness: max 1(2), min 0.216(1), ave 0.944
Test execution time: sum 23366 ms, max 2187 ms, min 64 ms
----------------------------------------------------------------

2023-11-13 14:38:46 [main] [INFO]  KGenProgMain - entered the era of 10th generation.
2023-11-13 14:39:24 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 minutes 43 seconds
Variants: generated 400, build-succeeded 168, build-failed 124, syntax-invalid 33, redundant 75
Fitness: max 1(1), min 0.431(1), ave 0.941
Test execution time: sum 21954 ms, max 427 ms, min 73 ms
----------------------------------------------------------------

2023-11-13 14:39:24 [main] [INFO]  KGenProgMain - entered the era of 11th generation.
2023-11-13 14:39:59 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 minutes 18 seconds
Variants: generated 400, build-succeeded 163, build-failed 123, syntax-invalid 39, redundant 75
Fitness: max 1(1), min 0.49(1), ave 0.959
Test execution time: sum 20452 ms, max 552 ms, min 75 ms
----------------------------------------------------------------

2023-11-13 14:39:59 [main] [INFO]  KGenProgMain - entered the era of 12th generation.
2023-11-13 14:40:37 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 minutes 55 seconds
Variants: generated 400, build-succeeded 170, build-failed 132, syntax-invalid 33, redundant 65
Fitness: max 1(4), min 0.49(2), ave 0.957
Test execution time: sum 21538 ms, max 698 ms, min 84 ms
----------------------------------------------------------------

2023-11-13 14:40:37 [main] [INFO]  KGenProgMain - entered the era of 13th generation.
2023-11-13 14:41:12 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 minutes 30 seconds
Variants: generated 400, build-succeeded 164, build-failed 134, syntax-invalid 31, redundant 71
Fitness: max 1(2), min 0.275(1), ave 0.952
Test execution time: sum 19127 ms, max 372 ms, min 83 ms
----------------------------------------------------------------

2023-11-13 14:41:12 [main] [INFO]  KGenProgMain - entered the era of 14th generation.
2023-11-13 14:41:46 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 minutes 5 seconds
Variants: generated 400, build-succeeded 173, build-failed 131, syntax-invalid 13, redundant 83
Fitness: max 1(2), min 0.275(1), ave 0.953
Test execution time: sum 19878 ms, max 548 ms, min 71 ms
----------------------------------------------------------------

2023-11-13 14:41:47 [main] [INFO]  KGenProgMain - entered the era of 15th generation.
2023-11-13 14:42:24 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 minutes 43 seconds
Variants: generated 400, build-succeeded 171, build-failed 133, syntax-invalid 26, redundant 70
Fitness: max 1(2), min 0.235(1), ave 0.957
Test execution time: sum 21345 ms, max 546 ms, min 77 ms
----------------------------------------------------------------

2023-11-13 14:42:24 [main] [INFO]  KGenProgMain - entered the era of 16th generation.
2023-11-13 14:43:05 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 minutes 24 seconds
Variants: generated 400, build-succeeded 191, build-failed 125, syntax-invalid 23, redundant 61
Fitness: max 1(2), min 0.49(1), ave 0.956
Test execution time: sum 24033 ms, max 277 ms, min 80 ms
----------------------------------------------------------------

2023-11-13 14:43:05 [main] [INFO]  KGenProgMain - entered the era of 17th generation.
2023-11-13 14:43:45 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 minutes 3 seconds
Variants: generated 400, build-succeeded 199, build-failed 109, syntax-invalid 32, redundant 60
Fitness: max 1(2), min 0.431(1), ave 0.956
Test execution time: sum 24520 ms, max 605 ms, min 71 ms
----------------------------------------------------------------

2023-11-13 14:43:45 [main] [INFO]  KGenProgMain - entered the era of 18th generation.
2023-11-13 14:44:26 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 minutes 44 seconds
Variants: generated 400, build-succeeded 211, build-failed 113, syntax-invalid 22, redundant 54
Fitness: max 0.98(182), min 0.353(1), ave 0.958
Test execution time: sum 24877 ms, max 671 ms, min 65 ms
----------------------------------------------------------------

2023-11-13 14:44:26 [main] [INFO]  KGenProgMain - entered the era of 19th generation.
2023-11-13 14:45:14 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 10 minutes 32 seconds
Variants: generated 400, build-succeeded 215, build-failed 112, syntax-invalid 26, redundant 47
Fitness: max 1(1), min 0.353(1), ave 0.953
Test execution time: sum 28852 ms, max 4816 ms, min 66 ms
----------------------------------------------------------------

2023-11-13 14:45:14 [main] [INFO]  KGenProgMain - entered the era of 20th generation.
2023-11-13 14:45:54 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 minutes 13 seconds
Variants: generated 400, build-succeeded 220, build-failed 122, syntax-invalid 17, redundant 41
Fitness: max 0.98(198), min 0.49(3), ave 0.962
Test execution time: sum 23002 ms, max 233 ms, min 68 ms
----------------------------------------------------------------

2023-11-13 14:45:54 [main] [INFO]  KGenProgMain - entered the era of 21st generation.
2023-11-13 14:46:35 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 minutes 54 seconds
Variants: generated 400, build-succeeded 212, build-failed 128, syntax-invalid 24, redundant 36
Fitness: max 1(1), min 0.333(1), ave 0.958
Test execution time: sum 22587 ms, max 427 ms, min 65 ms
----------------------------------------------------------------

2023-11-13 14:46:35 [main] [INFO]  KGenProgMain - entered the era of 22nd generation.
2023-11-13 14:47:16 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 minutes 34 seconds
Variants: generated 400, build-succeeded 198, build-failed 135, syntax-invalid 34, redundant 33
Fitness: max 0.98(168), min 0.353(1), ave 0.955
Test execution time: sum 23221 ms, max 1725 ms, min 68 ms
----------------------------------------------------------------

2023-11-13 14:47:16 [main] [INFO]  KGenProgMain - entered the era of 23rd generation.
2023-11-13 14:47:58 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 13 minutes 16 seconds
Variants: generated 400, build-succeeded 216, build-failed 120, syntax-invalid 23, redundant 41
Fitness: max 1(1), min 0.157(1), ave 0.949
Test execution time: sum 23077 ms, max 255 ms, min 73 ms
----------------------------------------------------------------

2023-11-13 14:47:58 [main] [INFO]  KGenProgMain - entered the era of 24th generation.
2023-11-13 14:48:41 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 14 minutes 0 seconds
Variants: generated 400, build-succeeded 226, build-failed 111, syntax-invalid 29, redundant 34
Fitness: max 1(1), min 0.275(1), ave 0.961
Test execution time: sum 25364 ms, max 270 ms, min 71 ms
----------------------------------------------------------------

2023-11-13 14:48:41 [main] [INFO]  KGenProgMain - entered the era of 25th generation.
2023-11-13 14:49:23 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 14 minutes 41 seconds
Variants: generated 400, build-succeeded 208, build-failed 131, syntax-invalid 21, redundant 40
Fitness: max 1(1), min 0.294(1), ave 0.964
Test execution time: sum 23001 ms, max 452 ms, min 71 ms
----------------------------------------------------------------

2023-11-13 14:49:23 [main] [INFO]  KGenProgMain - entered the era of 26th generation.
2023-11-13 14:50:07 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 15 minutes 26 seconds
Variants: generated 400, build-succeeded 242, build-failed 112, syntax-invalid 21, redundant 25
Fitness: max 0.98(204), min 0.353(1), ave 0.954
Test execution time: sum 25781 ms, max 448 ms, min 68 ms
----------------------------------------------------------------

2023-11-13 14:50:07 [main] [INFO]  KGenProgMain - entered the era of 27th generation.
2023-11-13 14:50:48 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 16 minutes 6 seconds
Variants: generated 400, build-succeeded 229, build-failed 127, syntax-invalid 21, redundant 23
Fitness: max 1(1), min 0.333(1), ave 0.953
Test execution time: sum 24668 ms, max 306 ms, min 63 ms
----------------------------------------------------------------

2023-11-13 14:50:48 [main] [INFO]  KGenProgMain - entered the era of 28th generation.
2023-11-13 14:51:30 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 16 minutes 48 seconds
Variants: generated 400, build-succeeded 226, build-failed 121, syntax-invalid 21, redundant 32
Fitness: max 0.98(197), min 0.49(1), ave 0.958
Test execution time: sum 24696 ms, max 487 ms, min 72 ms
----------------------------------------------------------------

2023-11-13 14:51:30 [main] [INFO]  KGenProgMain - entered the era of 29th generation.
2023-11-13 14:52:14 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 17 minutes 33 seconds
Variants: generated 400, build-succeeded 222, build-failed 132, syntax-invalid 21, redundant 25
Fitness: max 0.98(196), min 0.294(1), ave 0.958
Test execution time: sum 25771 ms, max 2250 ms, min 70 ms
----------------------------------------------------------------

2023-11-13 14:52:14 [main] [INFO]  KGenProgMain - entered the era of 30th generation.
2023-11-13 14:52:59 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 18 minutes 17 seconds
Variants: generated 400, build-succeeded 231, build-failed 118, syntax-invalid 27, redundant 24
Fitness: max 1(3), min 0.431(1), ave 0.954
Test execution time: sum 24823 ms, max 826 ms, min 68 ms
----------------------------------------------------------------

2023-11-13 14:52:59 [main] [INFO]  KGenProgMain - entered the era of 31st generation.
2023-11-13 14:53:46 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 19 minutes 4 seconds
Variants: generated 400, build-succeeded 238, build-failed 115, syntax-invalid 18, redundant 29
Fitness: max 0.98(206), min 0.49(3), ave 0.959
Test execution time: sum 28337 ms, max 3039 ms, min 69 ms
----------------------------------------------------------------

2023-11-13 14:53:46 [main] [INFO]  KGenProgMain - entered the era of 32nd generation.
2023-11-13 14:54:29 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 19 minutes 48 seconds
Variants: generated 400, build-succeeded 219, build-failed 123, syntax-invalid 26, redundant 32
Fitness: max 0.98(198), min 0.471(1), ave 0.966
Test execution time: sum 24957 ms, max 2145 ms, min 65 ms
----------------------------------------------------------------

2023-11-13 14:54:29 [main] [INFO]  KGenProgMain - entered the era of 33rd generation.
2023-11-13 14:55:11 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 20 minutes 30 seconds
Variants: generated 400, build-succeeded 225, build-failed 124, syntax-invalid 24, redundant 27
Fitness: max 1(1), min 0.49(1), ave 0.963
Test execution time: sum 23624 ms, max 320 ms, min 67 ms
----------------------------------------------------------------

2023-11-13 14:55:11 [main] [INFO]  KGenProgMain - entered the era of 34th generation.
2023-11-13 14:55:56 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 21 minutes 14 seconds
Variants: generated 400, build-succeeded 233, build-failed 120, syntax-invalid 24, redundant 23
Fitness: max 1(1), min 0.216(1), ave 0.953
Test execution time: sum 25125 ms, max 265 ms, min 66 ms
----------------------------------------------------------------

2023-11-13 14:55:56 [main] [INFO]  KGenProgMain - entered the era of 35th generation.
2023-11-13 14:56:41 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 21 minutes 59 seconds
Variants: generated 400, build-succeeded 229, build-failed 116, syntax-invalid 23, redundant 32
Fitness: max 1(7), min 0.431(1), ave 0.954
Test execution time: sum 25169 ms, max 476 ms, min 73 ms
----------------------------------------------------------------

2023-11-13 14:56:41 [main] [INFO]  KGenProgMain - entered the era of 36th generation.
2023-11-13 14:57:24 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 22 minutes 43 seconds
Variants: generated 400, build-succeeded 202, build-failed 129, syntax-invalid 29, redundant 40
Fitness: max 1(1), min 0.275(1), ave 0.958
Test execution time: sum 24039 ms, max 2862 ms, min 83 ms
----------------------------------------------------------------

2023-11-13 14:57:24 [main] [INFO]  KGenProgMain - entered the era of 37th generation.
2023-11-13 14:58:09 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 23 minutes 28 seconds
Variants: generated 400, build-succeeded 227, build-failed 111, syntax-invalid 22, redundant 40
Fitness: max 1(1), min 0.49(1), ave 0.959
Test execution time: sum 25774 ms, max 2342 ms, min 69 ms
----------------------------------------------------------------

2023-11-13 14:58:09 [main] [INFO]  KGenProgMain - entered the era of 38th generation.
2023-11-13 14:58:50 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 24 minutes 9 seconds
Variants: generated 400, build-succeeded 219, build-failed 116, syntax-invalid 25, redundant 40
Fitness: max 1(1), min 0.353(1), ave 0.951
Test execution time: sum 22757 ms, max 277 ms, min 65 ms
----------------------------------------------------------------

2023-11-13 14:58:50 [main] [INFO]  KGenProgMain - entered the era of 39th generation.
2023-11-13 14:59:37 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 24 minutes 56 seconds
Variants: generated 400, build-succeeded 214, build-failed 124, syntax-invalid 27, redundant 35
Fitness: max 0.98(190), min 0.294(1), ave 0.959
Test execution time: sum 26526 ms, max 1691 ms, min 73 ms
----------------------------------------------------------------

2023-11-13 14:59:37 [main] [INFO]  KGenProgMain - entered the era of 40th generation.
2023-11-13 15:00:22 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 25 minutes 40 seconds
Variants: generated 400, build-succeeded 234, build-failed 105, syntax-invalid 28, redundant 33
Fitness: max 0.98(195), min 0.216(1), ave 0.954
Test execution time: sum 25473 ms, max 347 ms, min 74 ms
----------------------------------------------------------------

2023-11-13 15:00:22 [main] [INFO]  KGenProgMain - entered the era of 41st generation.
2023-11-13 15:01:03 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 26 minutes 21 seconds
Variants: generated 400, build-succeeded 224, build-failed 119, syntax-invalid 32, redundant 25
Fitness: max 0.98(183), min 0.49(1), ave 0.952
Test execution time: sum 23161 ms, max 527 ms, min 56 ms
----------------------------------------------------------------

2023-11-13 15:01:03 [main] [INFO]  KGenProgMain - entered the era of 42nd generation.
2023-11-13 15:01:44 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 27 minutes 3 seconds
Variants: generated 400, build-succeeded 237, build-failed 112, syntax-invalid 28, redundant 23
Fitness: max 1(1), min 0.353(1), ave 0.956
Test execution time: sum 24224 ms, max 604 ms, min 67 ms
----------------------------------------------------------------

2023-11-13 15:01:44 [main] [INFO]  KGenProgMain - entered the era of 43rd generation.
2023-11-13 15:02:20 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 27 minutes 38 seconds
Variants: generated 400, build-succeeded 207, build-failed 121, syntax-invalid 39, redundant 33
Fitness: max 1(1), min 0.314(1), ave 0.957
Test execution time: sum 19874 ms, max 243 ms, min 55 ms
----------------------------------------------------------------

2023-11-13 15:02:20 [main] [INFO]  KGenProgMain - entered the era of 44th generation.
2023-11-13 15:02:58 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 28 minutes 16 seconds
Variants: generated 400, build-succeeded 238, build-failed 110, syntax-invalid 26, redundant 26
Fitness: max 0.98(204), min 0.49(3), ave 0.958
Test execution time: sum 23064 ms, max 375 ms, min 53 ms
----------------------------------------------------------------

2023-11-13 15:02:58 [main] [INFO]  KGenProgMain - entered the era of 45th generation.
2023-11-13 15:03:35 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 28 minutes 53 seconds
Variants: generated 400, build-succeeded 213, build-failed 105, syntax-invalid 36, redundant 46
Fitness: max 0.98(184), min 0.549(2), ave 0.962
Test execution time: sum 21271 ms, max 482 ms, min 69 ms
----------------------------------------------------------------

2023-11-13 15:03:35 [main] [INFO]  KGenProgMain - entered the era of 46th generation.
2023-11-13 15:04:12 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 29 minutes 30 seconds
Variants: generated 400, build-succeeded 207, build-failed 135, syntax-invalid 30, redundant 28
Fitness: max 0.98(178), min 0.49(1), ave 0.962
Test execution time: sum 21451 ms, max 370 ms, min 63 ms
----------------------------------------------------------------

2023-11-13 15:04:12 [main] [INFO]  KGenProgMain - entered the era of 47th generation.
2023-11-13 15:04:49 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 30 minutes 7 seconds
Variants: generated 400, build-succeeded 224, build-failed 106, syntax-invalid 39, redundant 31
Fitness: max 1(1), min 0.49(1), ave 0.964
Test execution time: sum 21135 ms, max 387 ms, min 66 ms
----------------------------------------------------------------

2023-11-13 15:04:49 [main] [INFO]  KGenProgMain - entered the era of 48th generation.
2023-11-13 15:05:29 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 30 minutes 47 seconds
Variants: generated 400, build-succeeded 242, build-failed 117, syntax-invalid 26, redundant 15
Fitness: max 0.98(203), min 0.353(2), ave 0.954
Test execution time: sum 24001 ms, max 353 ms, min 57 ms
----------------------------------------------------------------

2023-11-13 15:05:29 [main] [INFO]  KGenProgMain - entered the era of 49th generation.
2023-11-13 15:06:02 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 31 minutes 21 seconds
Variants: generated 400, build-succeeded 227, build-failed 115, syntax-invalid 31, redundant 27
Fitness: max 1(3), min 0.157(1), ave 0.953
Test execution time: sum 18776 ms, max 341 ms, min 49 ms
----------------------------------------------------------------

2023-11-13 15:06:02 [main] [INFO]  KGenProgMain - entered the era of 50th generation.
2023-11-13 15:06:34 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 31 minutes 52 seconds
Variants: generated 400, build-succeeded 224, build-failed 114, syntax-invalid 35, redundant 27
Fitness: max 0.98(188), min 0.49(4), ave 0.95
Test execution time: sum 17944 ms, max 221 ms, min 53 ms
----------------------------------------------------------------

2023-11-13 15:06:34 [main] [INFO]  KGenProgMain - entered the era of 51st generation.
2023-11-13 15:07:07 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 32 minutes 26 seconds
Variants: generated 400, build-succeeded 229, build-failed 120, syntax-invalid 24, redundant 27
Fitness: max 0.98(204), min 0.216(1), ave 0.963
Test execution time: sum 19055 ms, max 323 ms, min 64 ms
----------------------------------------------------------------

2023-11-13 15:07:07 [main] [INFO]  KGenProgMain - entered the era of 52nd generation.
2023-11-13 15:07:48 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 33 minutes 7 seconds
Variants: generated 400, build-succeeded 234, build-failed 118, syntax-invalid 26, redundant 22
Fitness: max 1(2), min 0.137(1), ave 0.947
Test execution time: sum 23891 ms, max 2981 ms, min 65 ms
----------------------------------------------------------------

2023-11-13 15:07:48 [main] [INFO]  KGenProgMain - entered the era of 53rd generation.
2023-11-13 15:08:28 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 33 minutes 47 seconds
Variants: generated 400, build-succeeded 232, build-failed 126, syntax-invalid 20, redundant 22
Fitness: max 0.98(207), min 0.49(3), ave 0.962
Test execution time: sum 21844 ms, max 325 ms, min 58 ms
----------------------------------------------------------------

2023-11-13 15:08:28 [main] [INFO]  KGenProgMain - entered the era of 54th generation.
2023-11-13 15:09:11 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 34 minutes 30 seconds
Variants: generated 400, build-succeeded 226, build-failed 124, syntax-invalid 28, redundant 22
Fitness: max 0.98(198), min 0.49(5), ave 0.953
Test execution time: sum 23633 ms, max 564 ms, min 54 ms
----------------------------------------------------------------

2023-11-13 15:09:11 [main] [INFO]  KGenProgMain - entered the era of 55th generation.
2023-11-13 15:09:55 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 35 minutes 14 seconds
Variants: generated 400, build-succeeded 229, build-failed 115, syntax-invalid 27, redundant 29
Fitness: max 1(2), min 0.588(2), ave 0.964
Test execution time: sum 24633 ms, max 536 ms, min 77 ms
----------------------------------------------------------------

2023-11-13 15:09:55 [main] [INFO]  KGenProgMain - entered the era of 56th generation.
2023-11-13 15:10:36 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 35 minutes 54 seconds
Variants: generated 400, build-succeeded 230, build-failed 113, syntax-invalid 25, redundant 32
Fitness: max 1(1), min 0.49(2), ave 0.96
Test execution time: sum 22691 ms, max 2466 ms, min 53 ms
----------------------------------------------------------------

2023-11-13 15:10:36 [main] [INFO]  KGenProgMain - entered the era of 57th generation.
2023-11-13 15:11:16 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 36 minutes 35 seconds
Variants: generated 400, build-succeeded 234, build-failed 130, syntax-invalid 18, redundant 18
Fitness: max 1(3), min 0.49(2), ave 0.961
Test execution time: sum 22080 ms, max 1697 ms, min 53 ms
----------------------------------------------------------------

2023-11-13 15:11:16 [main] [INFO]  KGenProgMain - entered the era of 58th generation.
2023-11-13 15:11:57 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 37 minutes 15 seconds
Variants: generated 400, build-succeeded 250, build-failed 112, syntax-invalid 15, redundant 23
Fitness: max 0.98(222), min 0.333(1), ave 0.96
Test execution time: sum 22577 ms, max 224 ms, min 53 ms
----------------------------------------------------------------

2023-11-13 15:11:57 [main] [INFO]  KGenProgMain - entered the era of 59th generation.
2023-11-13 15:12:42 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 38 minutes 1 seconds
Variants: generated 400, build-succeeded 248, build-failed 116, syntax-invalid 14, redundant 22
Fitness: max 0.98(207), min 0.216(1), ave 0.951
Test execution time: sum 25099 ms, max 2896 ms, min 69 ms
----------------------------------------------------------------

2023-11-13 15:12:42 [main] [INFO]  KGenProgMain - entered the era of 60th generation.
2023-11-13 15:13:29 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 38 minutes 48 seconds
Variants: generated 400, build-succeeded 241, build-failed 127, syntax-invalid 13, redundant 19
Fitness: max 0.98(210), min 0.235(1), ave 0.958
Test execution time: sum 25510 ms, max 269 ms, min 56 ms
----------------------------------------------------------------

2023-11-13 15:13:29 [main] [INFO]  KGenProgMain - entered the era of 61st generation.
2023-11-13 15:14:14 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 39 minutes 32 seconds
Variants: generated 400, build-succeeded 234, build-failed 117, syntax-invalid 32, redundant 17
Fitness: max 1(1), min 0.49(1), ave 0.961
Test execution time: sum 24072 ms, max 351 ms, min 62 ms
----------------------------------------------------------------

2023-11-13 15:14:14 [main] [INFO]  KGenProgMain - entered the era of 62nd generation.
2023-11-13 15:14:55 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 40 minutes 14 seconds
Variants: generated 400, build-succeeded 232, build-failed 131, syntax-invalid 22, redundant 15
Fitness: max 0.98(208), min 0.353(1), ave 0.959
Test execution time: sum 22170 ms, max 374 ms, min 61 ms
----------------------------------------------------------------

2023-11-13 15:14:55 [main] [INFO]  KGenProgMain - entered the era of 63rd generation.
2023-11-13 15:15:34 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 40 minutes 53 seconds
Variants: generated 400, build-succeeded 220, build-failed 123, syntax-invalid 38, redundant 19
Fitness: max 0.98(193), min 0.353(1), ave 0.955
Test execution time: sum 21281 ms, max 269 ms, min 56 ms
----------------------------------------------------------------

2023-11-13 15:15:34 [main] [INFO]  KGenProgMain - entered the era of 64th generation.
2023-11-13 15:16:13 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 41 minutes 32 seconds
Variants: generated 400, build-succeeded 227, build-failed 124, syntax-invalid 32, redundant 17
Fitness: max 0.98(202), min 0.137(1), ave 0.961
Test execution time: sum 21404 ms, max 306 ms, min 68 ms
----------------------------------------------------------------

2023-11-13 15:16:13 [main] [INFO]  KGenProgMain - entered the era of 65th generation.
2023-11-13 15:16:54 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 42 minutes 12 seconds
Variants: generated 400, build-succeeded 240, build-failed 108, syntax-invalid 28, redundant 24
Fitness: max 1(1), min 0.471(3), ave 0.956
Test execution time: sum 22136 ms, max 279 ms, min 54 ms
----------------------------------------------------------------

2023-11-13 15:16:54 [main] [INFO]  KGenProgMain - entered the era of 66th generation.
2023-11-13 15:17:36 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 42 minutes 55 seconds
Variants: generated 400, build-succeeded 236, build-failed 119, syntax-invalid 33, redundant 12
Fitness: max 0.98(201), min 0.137(1), ave 0.957
Test execution time: sum 23153 ms, max 245 ms, min 59 ms
----------------------------------------------------------------

2023-11-13 15:17:36 [main] [INFO]  KGenProgMain - entered the era of 67th generation.
2023-11-13 15:18:21 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 43 minutes 40 seconds
Variants: generated 400, build-succeeded 249, build-failed 120, syntax-invalid 18, redundant 13
Fitness: max 0.98(213), min 0.294(1), ave 0.957
Test execution time: sum 25057 ms, max 259 ms, min 59 ms
----------------------------------------------------------------

2023-11-13 15:18:21 [main] [INFO]  KGenProgMain - entered the era of 68th generation.
2023-11-13 15:19:07 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 44 minutes 25 seconds
Variants: generated 400, build-succeeded 243, build-failed 121, syntax-invalid 21, redundant 15
Fitness: max 1(1), min 0.275(1), ave 0.962
Test execution time: sum 25732 ms, max 459 ms, min 75 ms
----------------------------------------------------------------

2023-11-13 15:19:07 [main] [INFO]  KGenProgMain - entered the era of 69th generation.
2023-11-13 15:19:47 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 45 minutes 6 seconds
Variants: generated 400, build-succeeded 240, build-failed 116, syntax-invalid 25, redundant 19
Fitness: max 0.98(209), min 0.118(1), ave 0.959
Test execution time: sum 22465 ms, max 255 ms, min 57 ms
----------------------------------------------------------------

2023-11-13 15:19:47 [main] [INFO]  KGenProgMain - entered the era of 70th generation.
2023-11-13 15:20:27 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 45 minutes 45 seconds
Variants: generated 400, build-succeeded 234, build-failed 114, syntax-invalid 23, redundant 29
Fitness: max 1(1), min 0.235(1), ave 0.965
Test execution time: sum 22332 ms, max 440 ms, min 68 ms
----------------------------------------------------------------

2023-11-13 15:20:27 [main] [INFO]  KGenProgMain - entered the era of 71st generation.
2023-11-13 15:21:12 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 46 minutes 31 seconds
Variants: generated 400, build-succeeded 233, build-failed 124, syntax-invalid 25, redundant 18
Fitness: max 0.98(205), min 0.49(1), ave 0.966
Test execution time: sum 24543 ms, max 1941 ms, min 63 ms
----------------------------------------------------------------

2023-11-13 15:21:12 [main] [INFO]  KGenProgMain - entered the era of 72nd generation.
2023-11-13 15:21:55 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 47 minutes 14 seconds
Variants: generated 400, build-succeeded 247, build-failed 119, syntax-invalid 24, redundant 10
Fitness: max 0.98(210), min 0.49(1), ave 0.961
Test execution time: sum 23542 ms, max 276 ms, min 63 ms
----------------------------------------------------------------

2023-11-13 15:21:55 [main] [INFO]  KGenProgMain - entered the era of 73rd generation.
2023-11-13 15:22:36 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 47 minutes 55 seconds
Variants: generated 400, build-succeeded 237, build-failed 112, syntax-invalid 28, redundant 23
Fitness: max 1(1), min 0.49(3), ave 0.961
Test execution time: sum 22828 ms, max 317 ms, min 57 ms
----------------------------------------------------------------

2023-11-13 15:22:36 [main] [INFO]  KGenProgMain - entered the era of 74th generation.
2023-11-13 15:23:18 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 48 minutes 36 seconds
Variants: generated 400, build-succeeded 244, build-failed 122, syntax-invalid 23, redundant 11
Fitness: max 1(1), min 0.275(1), ave 0.96
Test execution time: sum 23281 ms, max 223 ms, min 56 ms
----------------------------------------------------------------

2023-11-13 15:23:18 [main] [INFO]  KGenProgMain - entered the era of 75th generation.
2023-11-13 15:24:00 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 49 minutes 19 seconds
Variants: generated 400, build-succeeded 232, build-failed 119, syntax-invalid 30, redundant 19
Fitness: max 1(1), min 0.314(1), ave 0.957
Test execution time: sum 22794 ms, max 342 ms, min 55 ms
----------------------------------------------------------------

2023-11-13 15:24:00 [main] [INFO]  KGenProgMain - entered the era of 76th generation.
2023-11-13 15:24:43 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 50 minutes 1 seconds
Variants: generated 400, build-succeeded 238, build-failed 118, syntax-invalid 26, redundant 18
Fitness: max 1(1), min 0.471(1), ave 0.962
Test execution time: sum 23681 ms, max 299 ms, min 62 ms
----------------------------------------------------------------

2023-11-13 15:24:43 [main] [INFO]  KGenProgMain - entered the era of 77th generation.
2023-11-13 15:25:30 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 50 minutes 49 seconds
Variants: generated 400, build-succeeded 237, build-failed 124, syntax-invalid 23, redundant 16
Fitness: max 1(1), min 0.294(1), ave 0.965
Test execution time: sum 25511 ms, max 1986 ms, min 59 ms
----------------------------------------------------------------

2023-11-13 15:25:30 [main] [INFO]  KGenProgMain - entered the era of 78th generation.
2023-11-13 15:26:21 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 51 minutes 39 seconds
Variants: generated 400, build-succeeded 247, build-failed 111, syntax-invalid 23, redundant 19
Fitness: max 0.98(218), min 0.353(1), ave 0.959
Test execution time: sum 28280 ms, max 340 ms, min 62 ms
----------------------------------------------------------------

2023-11-13 15:26:21 [main] [INFO]  KGenProgMain - entered the era of 79th generation.
2023-11-13 15:27:04 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 52 minutes 22 seconds
Variants: generated 400, build-succeeded 239, build-failed 109, syntax-invalid 33, redundant 19
Fitness: max 1(3), min 0.549(1), ave 0.962
Test execution time: sum 23887 ms, max 472 ms, min 63 ms
----------------------------------------------------------------

2023-11-13 15:27:04 [main] [INFO]  KGenProgMain - entered the era of 80th generation.
2023-11-13 15:27:55 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 53 minutes 14 seconds
Variants: generated 400, build-succeeded 232, build-failed 115, syntax-invalid 35, redundant 18
Fitness: max 1(2), min 0.353(1), ave 0.955
Test execution time: sum 28757 ms, max 3547 ms, min 58 ms
----------------------------------------------------------------

2023-11-13 15:27:55 [main] [INFO]  KGenProgMain - entered the era of 81st generation.
2023-11-13 15:28:44 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 54 minutes 2 seconds
Variants: generated 400, build-succeeded 213, build-failed 114, syntax-invalid 47, redundant 26
Fitness: max 1(3), min 0.353(1), ave 0.96
Test execution time: sum 25634 ms, max 3220 ms, min 69 ms
----------------------------------------------------------------

2023-11-13 15:28:44 [main] [INFO]  KGenProgMain - entered the era of 82nd generation.
2023-11-13 15:29:18 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 54 minutes 36 seconds
Variants: generated 311, build-succeeded 154, build-failed 112, syntax-invalid 26, redundant 19
Fitness: max 1(4), min 0.549(2), ave 0.956
Test execution time: sum 16621 ms, max 371 ms, min 78 ms
----------------------------------------------------------------

2023-11-13 15:29:18 [main] [INFO]  KGenProgMain - GA stopped
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v80)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v80)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v80)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -978,7 +978,7 @@
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
-            if (!lenChunksPerfectly) {
+            if (pArray == null || pArray.length == 0) {
                 len += chunkSeparator.length;
             }
         }
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v80)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v80)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v80)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v80)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v526)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v526)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v526)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -826,7 +826,8 @@
 
         long len = getEncodeLength(binaryData, MIME_CHUNK_SIZE, CHUNK_SEPARATOR);
         if (len > maxResultSize) {
-            throw new IllegalArgumentException("Input array too big, the output array would be bigger (" +
+            Base32 b64 = isChunked ? new Base32(MIME_CHUNK_SIZE, CHUNK_SEPARATOR, true) : new Base32(true);
+			throw new IllegalArgumentException("Input array too big, the output array would be bigger (" +
                 len +
                 ") than the specified maxium size of " +
                 maxResultSize);
@@ -979,7 +980,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v526)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v526)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v526)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v526)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -239,7 +239,8 @@
     public Base32(int lineLength, byte[] lineSeparator, boolean useHex) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / BYTES_PER_ENCODED_BLOCK) * BYTES_PER_ENCODED_BLOCK : 0;
         this.lineSeparator = new byte[lineSeparator.length];
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v526)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v674)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v674)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v674)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -826,7 +826,8 @@
 
         long len = getEncodeLength(binaryData, MIME_CHUNK_SIZE, CHUNK_SEPARATOR);
         if (len > maxResultSize) {
-            throw new IllegalArgumentException("Input array too big, the output array would be bigger (" +
+            Base32 b64 = isChunked ? new Base32(MIME_CHUNK_SIZE, CHUNK_SEPARATOR, true) : new Base32(true);
+			throw new IllegalArgumentException("Input array too big, the output array would be bigger (" +
                 len +
                 ") than the specified maxium size of " +
                 maxResultSize);
@@ -979,7 +980,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v674)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v674)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v674)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v674)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v799)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v799)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v799)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -973,7 +973,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
@@ -1053,7 +1052,6 @@
         buffer = null;
         pos = 0;
         readPos = 0;
-        currentLinePos = 0;
         modulus = 0;
         eof = false;
     }
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v799)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v799)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v799)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v799)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v933)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v933)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v933)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -826,7 +826,8 @@
 
         long len = getEncodeLength(binaryData, MIME_CHUNK_SIZE, CHUNK_SEPARATOR);
         if (len > maxResultSize) {
-            throw new IllegalArgumentException("Input array too big, the output array would be bigger (" +
+            Base32 b64 = isChunked ? new Base32(MIME_CHUNK_SIZE, CHUNK_SEPARATOR, true) : new Base32(true);
+			throw new IllegalArgumentException("Input array too big, the output array would be bigger (" +
                 len +
                 ") than the specified maxium size of " +
                 maxResultSize);
@@ -973,7 +974,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v933)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v933)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v933)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v933)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -238,7 +238,11 @@
      */
     public Base32(int lineLength, byte[] lineSeparator, boolean useHex) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
+            {
+				System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+				pos += lineSeparator.length;
+				currentLinePos = 0;
+			}
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / BYTES_PER_ENCODED_BLOCK) * BYTES_PER_ENCODED_BLOCK : 0;
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v933)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v1062)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v1062)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v1062)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -411,7 +411,6 @@
             if (readPos >= pos) {
                 buffer = null;
             }
-            return len;
         }
         return eof ? -1 : 0;
     }
@@ -973,7 +972,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v1062)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v1062)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v1062)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v1062)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v1134)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v1134)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v1134)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -826,7 +826,8 @@
 
         long len = getEncodeLength(binaryData, MIME_CHUNK_SIZE, CHUNK_SEPARATOR);
         if (len > maxResultSize) {
-            throw new IllegalArgumentException("Input array too big, the output array would be bigger (" +
+            Base32 b64 = isChunked ? new Base32(MIME_CHUNK_SIZE, CHUNK_SEPARATOR, true) : new Base32(true);
+			throw new IllegalArgumentException("Input array too big, the output array would be bigger (" +
                 len +
                 ") than the specified maxium size of " +
                 maxResultSize);
@@ -973,7 +974,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v1134)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v1134)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v1134)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v1134)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v1448)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v1448)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v1448)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -973,7 +973,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v1448)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v1448)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v1448)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v1448)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -242,7 +242,8 @@
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / BYTES_PER_ENCODED_BLOCK) * BYTES_PER_ENCODED_BLOCK : 0;
-        this.lineSeparator = new byte[lineSeparator.length];
+        resizeBuffer();
+		this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v1448)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v1493)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v1493)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v1493)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -979,7 +979,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v1493)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v1493)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v1493)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v1493)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -326,7 +326,7 @@
      */
     private boolean containsBase32Byte(byte[] arrayOctet) {
         for (int i = 0; i < arrayOctet.length; i++) {
-            if (isBase32(arrayOctet[i])) {
+            if (modulus == 0) {
                 return true;
             }
         }
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v1493)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v1548)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v1548)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v1548)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -347,7 +347,8 @@
             String sep = StringUtils.newStringUtf8(lineSeparator);
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
-        this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
+        currentLinePos = 0;
+		this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
     }
 
     /**
@@ -973,7 +974,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v1548)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v1548)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v1548)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v1548)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v1575)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v1575)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v1575)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -448,6 +448,7 @@
             switch (modulus) {
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
+				modulus = (++modulus) % 4;
                     buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
@@ -973,7 +974,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v1575)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v1575)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v1575)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v1575)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v1828)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v1828)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v1828)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -448,6 +448,8 @@
             switch (modulus) {
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
+				modulus = (++modulus) % 4;
+				modulus = (++modulus) % 4;
                     buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
@@ -973,7 +975,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v1828)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v1828)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v1828)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v1828)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v1874)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v1874)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v1874)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -442,12 +442,13 @@
         // encoding.
         if (inAvail < 0) {
             eof = true;
-            if (buffer == null || buffer.length - pos < encodeSize) {
+            if (readPos >= pos) {
                 resizeBuffer();
             }
             switch (modulus) {
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
+				modulus = (++modulus) % 4;
                     buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
@@ -973,7 +974,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v1874)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v1874)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v1874)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v1874)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v1904)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v1904)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v1904)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -442,7 +442,7 @@
         // encoding.
         if (inAvail < 0) {
             eof = true;
-            if (buffer == null || buffer.length - pos < encodeSize) {
+            if (readPos >= pos) {
                 resizeBuffer();
             }
             switch (modulus) {
@@ -826,7 +826,8 @@
 
         long len = getEncodeLength(binaryData, MIME_CHUNK_SIZE, CHUNK_SEPARATOR);
         if (len > maxResultSize) {
-            throw new IllegalArgumentException("Input array too big, the output array would be bigger (" +
+            Base32 b64 = isChunked ? new Base32(MIME_CHUNK_SIZE, CHUNK_SEPARATOR, true) : new Base32(true);
+			throw new IllegalArgumentException("Input array too big, the output array would be bigger (" +
                 len +
                 ") than the specified maxium size of " +
                 maxResultSize);
@@ -973,7 +974,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v1904)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v1904)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v1904)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v1904)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v1957)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v1957)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v1957)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -973,7 +973,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v1957)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v1957)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v1957)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v1957)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -238,7 +238,6 @@
      */
     public Base32(int lineLength, byte[] lineSeparator, boolean useHex) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / BYTES_PER_ENCODED_BLOCK) * BYTES_PER_ENCODED_BLOCK : 0;
@@ -254,7 +253,7 @@
             String sep = StringUtils.newStringUtf8(lineSeparator);
             throw new IllegalArgumentException("lineSeperator must not contain Base32 characters: [" + sep + "]");
         }
-        if (useHex){
+        if (lineSeparator == null){
             this.encodeTable = BASE32HEX_ENCODE_TABLE;
             this.decodeTable = BASE32HEX_DECODE_TABLE;            
         } else {
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v1957)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v1974)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v1974)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v1974)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -449,6 +449,7 @@
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
+				eof = true;
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buffer[pos++] = PAD;
@@ -979,7 +980,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v1974)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v1974)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v1974)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v1974)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v2255)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v2255)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v2255)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -442,7 +442,7 @@
         // encoding.
         if (inAvail < 0) {
             eof = true;
-            if (buffer == null || buffer.length - pos < encodeSize) {
+            if (readPos >= pos) {
                 resizeBuffer();
             }
             switch (modulus) {
@@ -973,7 +973,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v2255)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v2255)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v2255)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v2255)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -238,7 +238,6 @@
      */
     public Base32(int lineLength, byte[] lineSeparator, boolean useHex) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / BYTES_PER_ENCODED_BLOCK) * BYTES_PER_ENCODED_BLOCK : 0;
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v2255)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v2262)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v2262)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v2262)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -493,6 +493,7 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
                         currentLinePos = 0;
                     }
                 }
@@ -973,7 +974,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v2262)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v2262)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v2262)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v2262)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -242,7 +242,8 @@
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / BYTES_PER_ENCODED_BLOCK) * BYTES_PER_ENCODED_BLOCK : 0;
-        this.lineSeparator = new byte[lineSeparator.length];
+        resizeBuffer();
+		this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v2262)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v2284)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v2284)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v2284)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -338,7 +338,13 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = 4 + lineSeparator.length;
+            {
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				modulus = 0;
+				readPos = 0;
+			}
+			this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
         }
@@ -973,7 +979,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v2284)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v2284)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v2284)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v2284)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v2350)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v2350)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v2350)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -967,13 +967,9 @@
      *         a long since a max-len array will require Integer.MAX_VALUE + 33%.
      */
     private static long getEncodeLength(byte[] pArray, int chunkSize, byte[] chunkSeparator) {
-        // base64 always encodes to multiples of 4.
-        chunkSize = (chunkSize / 4) * 4;
-
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v2350)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v2350)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v2350)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v2350)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -326,7 +326,7 @@
      */
     private boolean containsBase32Byte(byte[] arrayOctet) {
         for (int i = 0; i < arrayOctet.length; i++) {
-            if (isBase32(arrayOctet[i])) {
+            if (modulus == 0) {
                 return true;
             }
         }
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v2350)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v2615)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v2615)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v2615)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -493,6 +493,7 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
                         currentLinePos = 0;
                     }
                 }
@@ -973,7 +974,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v2615)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v2615)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v2615)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v2615)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -239,7 +239,6 @@
     public Base32(int lineLength, byte[] lineSeparator, boolean useHex) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / BYTES_PER_ENCODED_BLOCK) * BYTES_PER_ENCODED_BLOCK : 0;
         this.lineSeparator = new byte[lineSeparator.length];
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v2615)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v2625)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v2625)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v2625)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -338,7 +338,12 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = 4 + lineSeparator.length;
+            {
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
         }
@@ -411,7 +416,6 @@
             if (readPos >= pos) {
                 buffer = null;
             }
-            return len;
         }
         return eof ? -1 : 0;
     }
@@ -973,7 +977,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v2625)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v2625)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v2625)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v2625)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v2679)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v2679)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v2679)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -338,7 +338,12 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = 4 + lineSeparator.length;
+            {
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
         }
@@ -973,7 +978,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v2679)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v2679)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v2679)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v2679)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -239,7 +239,6 @@
     public Base32(int lineLength, byte[] lineSeparator, boolean useHex) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / BYTES_PER_ENCODED_BLOCK) * BYTES_PER_ENCODED_BLOCK : 0;
         this.lineSeparator = new byte[lineSeparator.length];
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v2679)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v2735)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v2735)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v2735)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -338,7 +338,12 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = 4 + lineSeparator.length;
+            {
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
         }
@@ -492,6 +497,7 @@
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						currentLinePos = 0;
                         pos += lineSeparator.length;
                         currentLinePos = 0;
                     }
@@ -973,7 +979,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v2735)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v2735)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v2735)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v2735)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v2774)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v2774)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v2774)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -442,7 +442,7 @@
         // encoding.
         if (inAvail < 0) {
             eof = true;
-            if (buffer == null || buffer.length - pos < encodeSize) {
+            if (readPos >= pos) {
                 resizeBuffer();
             }
             switch (modulus) {
@@ -973,7 +973,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v2774)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v2774)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v2774)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v2774)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -250,10 +250,8 @@
             this.encodeSize = BYTES_PER_ENCODED_BLOCK;
         }
         this.decodeSize = this.encodeSize - 1;
-        if (containsBase32Byte(lineSeparator)) {
-            String sep = StringUtils.newStringUtf8(lineSeparator);
-            throw new IllegalArgumentException("lineSeperator must not contain Base32 characters: [" + sep + "]");
-        }
+        if (containsBase32Byte(lineSeparator))
+			resizeBuffer();
         if (useHex){
             this.encodeTable = BASE32HEX_ENCODE_TABLE;
             this.decodeTable = BASE32HEX_DECODE_TABLE;            
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v2774)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v2795)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v2795)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v2795)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -338,7 +338,12 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = 4 + lineSeparator.length;
+            {
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
         }
@@ -492,6 +497,7 @@
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						int bytesCopied = 0;
                         pos += lineSeparator.length;
                         currentLinePos = 0;
                     }
@@ -973,7 +979,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v2795)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v2795)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v2795)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v2795)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v3112)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v3112)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v3112)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -383,6 +383,7 @@
         if (buffer == null) {
             buffer = new byte[DEFAULT_BUFFER_SIZE];
             pos = 0;
+			resizeBuffer();
             readPos = 0;
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
@@ -449,6 +450,7 @@
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
+				eof = true;
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buffer[pos++] = PAD;
@@ -979,7 +981,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v3112)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v3112)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v3112)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v3112)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v3198)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v3198)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v3198)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -449,6 +449,7 @@
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
+				eof = true;
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buffer[pos++] = PAD;
@@ -492,6 +493,7 @@
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						int bytesCopied = 0;
                         pos += lineSeparator.length;
                         currentLinePos = 0;
                     }
@@ -979,7 +981,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v3198)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v3198)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v3198)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v3198)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v3481)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v3481)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v3481)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -383,7 +383,6 @@
         if (buffer == null) {
             buffer = new byte[DEFAULT_BUFFER_SIZE];
             pos = 0;
-            readPos = 0;
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
             System.arraycopy(buffer, 0, b, 0, buffer.length);
@@ -449,6 +448,7 @@
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
+				eof = true;
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buffer[pos++] = PAD;
@@ -826,7 +826,8 @@
 
         long len = getEncodeLength(binaryData, MIME_CHUNK_SIZE, CHUNK_SEPARATOR);
         if (len > maxResultSize) {
-            throw new IllegalArgumentException("Input array too big, the output array would be bigger (" +
+            Base32 b64 = isChunked ? new Base32(MIME_CHUNK_SIZE, CHUNK_SEPARATOR, true) : new Base32(true);
+			throw new IllegalArgumentException("Input array too big, the output array would be bigger (" +
                 len +
                 ") than the specified maxium size of " +
                 maxResultSize);
@@ -979,7 +980,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v3481)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v3481)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v3481)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v3481)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v3983)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v3983)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v3983)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -826,7 +826,8 @@
 
         long len = getEncodeLength(binaryData, MIME_CHUNK_SIZE, CHUNK_SEPARATOR);
         if (len > maxResultSize) {
-            throw new IllegalArgumentException("Input array too big, the output array would be bigger (" +
+            Base32 b64 = isChunked ? new Base32(MIME_CHUNK_SIZE, CHUNK_SEPARATOR, true) : new Base32(true);
+			throw new IllegalArgumentException("Input array too big, the output array would be bigger (" +
                 len +
                 ") than the specified maxium size of " +
                 maxResultSize);
@@ -979,7 +980,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v3983)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v3983)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v3983)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v3983)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -238,7 +238,7 @@
      */
     public Base32(int lineLength, byte[] lineSeparator, boolean useHex) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
+            currentLinePos += 4;
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / BYTES_PER_ENCODED_BLOCK) * BYTES_PER_ENCODED_BLOCK : 0;
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v3983)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v4332)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v4332)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v4332)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -492,6 +492,7 @@
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						int bytesCopied = 0;
                         pos += lineSeparator.length;
                         currentLinePos = 0;
                     }
@@ -967,9 +968,6 @@
      *         a long since a max-len array will require Integer.MAX_VALUE + 33%.
      */
     private static long getEncodeLength(byte[] pArray, int chunkSize, byte[] chunkSeparator) {
-        // base64 always encodes to multiples of 4.
-        chunkSize = (chunkSize / 4) * 4;
-
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
@@ -979,7 +977,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v4332)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v4332)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v4332)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v4332)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v4344)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v4344)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v4344)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -826,7 +826,8 @@
 
         long len = getEncodeLength(binaryData, MIME_CHUNK_SIZE, CHUNK_SEPARATOR);
         if (len > maxResultSize) {
-            throw new IllegalArgumentException("Input array too big, the output array would be bigger (" +
+            Base32 b64 = isChunked ? new Base32(MIME_CHUNK_SIZE, CHUNK_SEPARATOR, true) : new Base32(true);
+			throw new IllegalArgumentException("Input array too big, the output array would be bigger (" +
                 len +
                 ") than the specified maxium size of " +
                 maxResultSize);
@@ -979,7 +980,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v4344)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v4344)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v4344)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v4344)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -242,7 +242,8 @@
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / BYTES_PER_ENCODED_BLOCK) * BYTES_PER_ENCODED_BLOCK : 0;
-        this.lineSeparator = new byte[lineSeparator.length];
+        resizeBuffer();
+		this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v4344)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v4364)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v4364)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v4364)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -383,6 +383,7 @@
         if (buffer == null) {
             buffer = new byte[DEFAULT_BUFFER_SIZE];
             pos = 0;
+			resizeBuffer();
             readPos = 0;
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
@@ -979,7 +980,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v4364)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v4364)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v4364)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v4364)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -326,7 +326,7 @@
      */
     private boolean containsBase32Byte(byte[] arrayOctet) {
         for (int i = 0; i < arrayOctet.length; i++) {
-            if (isBase32(arrayOctet[i])) {
+            if (eof && modulus != 0) {
                 return true;
             }
         }
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v4364)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v4395)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v4395)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v4395)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -826,7 +826,8 @@
 
         long len = getEncodeLength(binaryData, MIME_CHUNK_SIZE, CHUNK_SEPARATOR);
         if (len > maxResultSize) {
-            throw new IllegalArgumentException("Input array too big, the output array would be bigger (" +
+            Base32 b64 = isChunked ? new Base32(MIME_CHUNK_SIZE, CHUNK_SEPARATOR, true) : new Base32(true);
+			throw new IllegalArgumentException("Input array too big, the output array would be bigger (" +
                 len +
                 ") than the specified maxium size of " +
                 maxResultSize);
@@ -979,7 +980,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v4395)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v4395)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v4395)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v4395)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -250,10 +250,8 @@
             this.encodeSize = BYTES_PER_ENCODED_BLOCK;
         }
         this.decodeSize = this.encodeSize - 1;
-        if (containsBase32Byte(lineSeparator)) {
-            String sep = StringUtils.newStringUtf8(lineSeparator);
-            throw new IllegalArgumentException("lineSeperator must not contain Base32 characters: [" + sep + "]");
-        }
+        if (containsBase32Byte(lineSeparator))
+			resizeBuffer();
         if (useHex){
             this.encodeTable = BASE32HEX_ENCODE_TABLE;
             this.decodeTable = BASE32HEX_DECODE_TABLE;            
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v4395)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v4656)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v4656)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v4656)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -347,7 +347,8 @@
             String sep = StringUtils.newStringUtf8(lineSeparator);
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
-        this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
+        currentLinePos = 0;
+		this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
     }
 
     /**
@@ -975,11 +976,10 @@
         if (mod != 0) {
             len += 4 - mod;
         }
-        if (chunkSize > 0) {
+        if (mod != 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v4656)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v4656)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v4656)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v4656)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -239,7 +239,8 @@
     public Base32(int lineLength, byte[] lineSeparator, boolean useHex) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / BYTES_PER_ENCODED_BLOCK) * BYTES_PER_ENCODED_BLOCK : 0;
         this.lineSeparator = new byte[lineSeparator.length];
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v4656)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v4788)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v4788)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v4788)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -492,6 +492,7 @@
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						int bytesCopied = 0;
                         pos += lineSeparator.length;
                         currentLinePos = 0;
                     }
@@ -979,7 +980,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
@@ -1053,7 +1053,6 @@
         buffer = null;
         pos = 0;
         readPos = 0;
-        currentLinePos = 0;
         modulus = 0;
         eof = false;
     }
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v4788)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v4788)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v4788)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v4788)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v5016)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v5016)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v5016)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -979,7 +979,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v5016)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v5016)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v5016)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v5016)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -238,7 +238,6 @@
      */
     public Base32(int lineLength, byte[] lineSeparator, boolean useHex) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / BYTES_PER_ENCODED_BLOCK) * BYTES_PER_ENCODED_BLOCK : 0;
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v5016)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v5089)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v5089)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v5089)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -347,7 +347,8 @@
             String sep = StringUtils.newStringUtf8(lineSeparator);
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
-        this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
+        currentLinePos = 0;
+		this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
     }
 
     /**
@@ -967,9 +968,6 @@
      *         a long since a max-len array will require Integer.MAX_VALUE + 33%.
      */
     private static long getEncodeLength(byte[] pArray, int chunkSize, byte[] chunkSeparator) {
-        // base64 always encodes to multiples of 4.
-        chunkSize = (chunkSize / 4) * 4;
-
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
@@ -979,7 +977,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v5089)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v5089)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v5089)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v5089)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v5468)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v5468)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v5468)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -338,7 +338,12 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = 4 + lineSeparator.length;
+            {
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
         }
@@ -826,7 +831,8 @@
 
         long len = getEncodeLength(binaryData, MIME_CHUNK_SIZE, CHUNK_SEPARATOR);
         if (len > maxResultSize) {
-            throw new IllegalArgumentException("Input array too big, the output array would be bigger (" +
+            Base32 b64 = isChunked ? new Base32(MIME_CHUNK_SIZE, CHUNK_SEPARATOR, true) : new Base32(true);
+			throw new IllegalArgumentException("Input array too big, the output array would be bigger (" +
                 len +
                 ") than the specified maxium size of " +
                 maxResultSize);
@@ -967,9 +973,6 @@
      *         a long since a max-len array will require Integer.MAX_VALUE + 33%.
      */
     private static long getEncodeLength(byte[] pArray, int chunkSize, byte[] chunkSeparator) {
-        // base64 always encodes to multiples of 4.
-        chunkSize = (chunkSize / 4) * 4;
-
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
@@ -979,7 +982,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v5468)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v5468)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v5468)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v5468)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v5534)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v5534)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v5534)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -448,6 +448,7 @@
             switch (modulus) {
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
+				modulus = (++modulus) % 4;
                     buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
@@ -492,6 +493,7 @@
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						int bytesCopied = 0;
                         pos += lineSeparator.length;
                         currentLinePos = 0;
                     }
@@ -979,7 +981,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v5534)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v5534)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v5534)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v5534)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v5625)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v5625)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v5625)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -442,12 +442,13 @@
         // encoding.
         if (inAvail < 0) {
             eof = true;
-            if (buffer == null || buffer.length - pos < encodeSize) {
+            if (readPos >= pos) {
                 resizeBuffer();
             }
             switch (modulus) {
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
+				modulus = (++modulus) % 4;
                     buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
@@ -492,6 +493,7 @@
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						currentLinePos = 0;
                         pos += lineSeparator.length;
                         currentLinePos = 0;
                     }
@@ -973,7 +975,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v5625)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v5625)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v5625)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v5625)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v5904)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v5904)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v5904)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -409,7 +409,6 @@
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
-                buffer = null;
             }
             return len;
         }
@@ -493,6 +492,7 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
                         currentLinePos = 0;
                     }
                 }
@@ -826,7 +826,8 @@
 
         long len = getEncodeLength(binaryData, MIME_CHUNK_SIZE, CHUNK_SEPARATOR);
         if (len > maxResultSize) {
-            throw new IllegalArgumentException("Input array too big, the output array would be bigger (" +
+            Base32 b64 = isChunked ? new Base32(MIME_CHUNK_SIZE, CHUNK_SEPARATOR, true) : new Base32(true);
+			throw new IllegalArgumentException("Input array too big, the output array would be bigger (" +
                 len +
                 ") than the specified maxium size of " +
                 maxResultSize);
@@ -979,7 +980,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v5904)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v5904)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v5904)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v5904)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v6063)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v6063)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v6063)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -347,7 +347,8 @@
             String sep = StringUtils.newStringUtf8(lineSeparator);
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
-        this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
+        currentLinePos = 0;
+		this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
     }
 
     /**
@@ -383,6 +384,7 @@
         if (buffer == null) {
             buffer = new byte[DEFAULT_BUFFER_SIZE];
             pos = 0;
+			resizeBuffer();
             readPos = 0;
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
@@ -448,6 +450,7 @@
             switch (modulus) {
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
+				modulus = (++modulus) % 4;
                     buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
@@ -973,7 +976,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v6063)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v6063)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v6063)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v6063)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -238,7 +238,7 @@
      */
     public Base32(int lineLength, byte[] lineSeparator, boolean useHex) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
+            currentLinePos += 4;
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / BYTES_PER_ENCODED_BLOCK) * BYTES_PER_ENCODED_BLOCK : 0;
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v6063)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v6111)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v6111)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v6111)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -441,7 +441,6 @@
         // inAvail < 0 is how we're informed of EOF in the underlying data we're
         // encoding.
         if (inAvail < 0) {
-            eof = true;
             if (buffer == null || buffer.length - pos < encodeSize) {
                 resizeBuffer();
             }
@@ -492,6 +491,8 @@
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						currentLinePos = 0;
+						currentLinePos = 0;
                         pos += lineSeparator.length;
                         currentLinePos = 0;
                     }
@@ -973,7 +974,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v6111)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v6111)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v6111)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v6111)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v6860)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v6860)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v6860)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -383,6 +383,7 @@
         if (buffer == null) {
             buffer = new byte[DEFAULT_BUFFER_SIZE];
             pos = 0;
+			resizeBuffer();
             readPos = 0;
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
@@ -441,7 +442,6 @@
         // inAvail < 0 is how we're informed of EOF in the underlying data we're
         // encoding.
         if (inAvail < 0) {
-            eof = true;
             if (buffer == null || buffer.length - pos < encodeSize) {
                 resizeBuffer();
             }
@@ -979,7 +979,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v6860)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v6860)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v6860)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v6860)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -239,7 +239,6 @@
     public Base32(int lineLength, byte[] lineSeparator, boolean useHex) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / BYTES_PER_ENCODED_BLOCK) * BYTES_PER_ENCODED_BLOCK : 0;
         this.lineSeparator = new byte[lineSeparator.length];
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v6860)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v7778)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v7778)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v7778)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -409,7 +409,6 @@
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
-                buffer = null;
             }
             return len;
         }
@@ -492,6 +491,7 @@
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						int bytesCopied = 0;
                         pos += lineSeparator.length;
                         currentLinePos = 0;
                     }
@@ -979,7 +979,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v7778)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v7778)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v7778)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v7778)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -239,10 +239,12 @@
     public Base32(int lineLength, byte[] lineSeparator, boolean useHex) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / BYTES_PER_ENCODED_BLOCK) * BYTES_PER_ENCODED_BLOCK : 0;
-        this.lineSeparator = new byte[lineSeparator.length];
+        resizeBuffer();
+		this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v7778)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v8441)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v8441)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v8441)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -338,7 +338,12 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = 4 + lineSeparator.length;
+            {
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
         }
@@ -347,7 +352,8 @@
             String sep = StringUtils.newStringUtf8(lineSeparator);
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
-        this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
+        currentLinePos = 0;
+		this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
     }
 
     /**
@@ -448,6 +454,8 @@
             switch (modulus) {
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
+				modulus = (++modulus) % 4;
+				modulus = (++modulus) % 4;
                     buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
@@ -979,7 +987,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v8441)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v8441)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v8441)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v8441)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -238,7 +238,7 @@
      */
     public Base32(int lineLength, byte[] lineSeparator, boolean useHex) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
+            buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / BYTES_PER_ENCODED_BLOCK) * BYTES_PER_ENCODED_BLOCK : 0;
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v8441)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v8981)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v8981)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v8981)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -383,7 +383,6 @@
         if (buffer == null) {
             buffer = new byte[DEFAULT_BUFFER_SIZE];
             pos = 0;
-            readPos = 0;
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
             System.arraycopy(buffer, 0, b, 0, buffer.length);
@@ -452,6 +451,7 @@
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buffer[pos++] = PAD;
+						int bytesCopied = 0;
                         buffer[pos++] = PAD;
                     }
                     break;
@@ -979,7 +979,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v8981)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v8981)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v8981)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v8981)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -242,7 +242,8 @@
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / BYTES_PER_ENCODED_BLOCK) * BYTES_PER_ENCODED_BLOCK : 0;
-        this.lineSeparator = new byte[lineSeparator.length];
+        resizeBuffer();
+		this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
@@ -254,7 +255,7 @@
             String sep = StringUtils.newStringUtf8(lineSeparator);
             throw new IllegalArgumentException("lineSeperator must not contain Base32 characters: [" + sep + "]");
         }
-        if (useHex){
+        if (eof){
             this.encodeTable = BASE32HEX_ENCODE_TABLE;
             this.decodeTable = BASE32HEX_DECODE_TABLE;            
         } else {
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v8981)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v9293)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v9293)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v9293)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -383,6 +383,7 @@
         if (buffer == null) {
             buffer = new byte[DEFAULT_BUFFER_SIZE];
             pos = 0;
+			resizeBuffer();
             readPos = 0;
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
@@ -409,7 +410,6 @@
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
-                buffer = null;
             }
             return len;
         }
@@ -441,7 +441,6 @@
         // inAvail < 0 is how we're informed of EOF in the underlying data we're
         // encoding.
         if (inAvail < 0) {
-            eof = true;
             if (buffer == null || buffer.length - pos < encodeSize) {
                 resizeBuffer();
             }
@@ -973,7 +972,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v9293)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v9293)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v9293)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v9293)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -240,6 +240,7 @@
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+			String sep = StringUtils.newStringUtf8(lineSeparator);
         }
         this.lineLength = lineLength > 0 ? (lineLength / BYTES_PER_ENCODED_BLOCK) * BYTES_PER_ENCODED_BLOCK : 0;
         this.lineSeparator = new byte[lineSeparator.length];
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v9293)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v10130)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v10130)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v10130)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -492,6 +492,7 @@
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						currentLinePos = 0;
                         pos += lineSeparator.length;
                         currentLinePos = 0;
                     }
@@ -967,13 +968,9 @@
      *         a long since a max-len array will require Integer.MAX_VALUE + 33%.
      */
     private static long getEncodeLength(byte[] pArray, int chunkSize, byte[] chunkSeparator) {
-        // base64 always encodes to multiples of 4.
-        chunkSize = (chunkSize / 4) * 4;
-
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
@@ -1050,7 +1047,6 @@
      * Resets this Base64 object to its initial newly constructed state.
      */
     private void reset() {
-        buffer = null;
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v10130)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v10130)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v10130)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v10130)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -238,7 +238,7 @@
      */
     public Base32(int lineLength, byte[] lineSeparator, boolean useHex) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
+            buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / BYTES_PER_ENCODED_BLOCK) * BYTES_PER_ENCODED_BLOCK : 0;
@@ -250,10 +250,8 @@
             this.encodeSize = BYTES_PER_ENCODED_BLOCK;
         }
         this.decodeSize = this.encodeSize - 1;
-        if (containsBase32Byte(lineSeparator)) {
-            String sep = StringUtils.newStringUtf8(lineSeparator);
-            throw new IllegalArgumentException("lineSeperator must not contain Base32 characters: [" + sep + "]");
-        }
+        if (containsBase32Byte(lineSeparator))
+			resizeBuffer();
         if (useHex){
             this.encodeTable = BASE32HEX_ENCODE_TABLE;
             this.decodeTable = BASE32HEX_DECODE_TABLE;            
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v10130)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v11272)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v11272)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v11272)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -383,6 +383,7 @@
         if (buffer == null) {
             buffer = new byte[DEFAULT_BUFFER_SIZE];
             pos = 0;
+			resizeBuffer();
             readPos = 0;
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
@@ -448,6 +449,7 @@
             switch (modulus) {
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
+				modulus = (++modulus) % 4;
                     buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
@@ -979,7 +981,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v11272)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v11272)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v11272)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v11272)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -239,7 +239,6 @@
     public Base32(int lineLength, byte[] lineSeparator, boolean useHex) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / BYTES_PER_ENCODED_BLOCK) * BYTES_PER_ENCODED_BLOCK : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -248,13 +247,12 @@
             this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
         } else {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK;
+			buffer = null;
         }
         this.decodeSize = this.encodeSize - 1;
-        if (containsBase32Byte(lineSeparator)) {
-            String sep = StringUtils.newStringUtf8(lineSeparator);
-            throw new IllegalArgumentException("lineSeperator must not contain Base32 characters: [" + sep + "]");
-        }
-        if (useHex){
+        if (containsBase32Byte(lineSeparator))
+			resizeBuffer();
+        if (eof){
             this.encodeTable = BASE32HEX_ENCODE_TABLE;
             this.decodeTable = BASE32HEX_DECODE_TABLE;            
         } else {
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v11272)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v11301)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v11301)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v11301)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -979,7 +979,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
@@ -1050,7 +1049,6 @@
      * Resets this Base64 object to its initial newly constructed state.
      */
     private void reset() {
-        buffer = null;
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v11301)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v11301)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v11301)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v11301)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -242,7 +242,9 @@
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / BYTES_PER_ENCODED_BLOCK) * BYTES_PER_ENCODED_BLOCK : 0;
-        this.lineSeparator = new byte[lineSeparator.length];
+        resizeBuffer();
+		resizeBuffer();
+		this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
@@ -250,10 +252,8 @@
             this.encodeSize = BYTES_PER_ENCODED_BLOCK;
         }
         this.decodeSize = this.encodeSize - 1;
-        if (containsBase32Byte(lineSeparator)) {
-            String sep = StringUtils.newStringUtf8(lineSeparator);
-            throw new IllegalArgumentException("lineSeperator must not contain Base32 characters: [" + sep + "]");
-        }
+        if (containsBase32Byte(lineSeparator))
+			resizeBuffer();
         if (useHex){
             this.encodeTable = BASE32HEX_ENCODE_TABLE;
             this.decodeTable = BASE32HEX_DECODE_TABLE;            
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v11301)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v11379)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v11379)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v11379)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -411,7 +411,6 @@
             if (readPos >= pos) {
                 buffer = null;
             }
-            return len;
         }
         return eof ? -1 : 0;
     }
@@ -442,7 +441,7 @@
         // encoding.
         if (inAvail < 0) {
             eof = true;
-            if (buffer == null || buffer.length - pos < encodeSize) {
+            if (readPos >= pos) {
                 resizeBuffer();
             }
             switch (modulus) {
@@ -493,6 +492,7 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
                         currentLinePos = 0;
                     }
                 }
@@ -973,7 +973,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v11379)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v11379)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v11379)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v11379)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -239,7 +239,6 @@
     public Base32(int lineLength, byte[] lineSeparator, boolean useHex) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / BYTES_PER_ENCODED_BLOCK) * BYTES_PER_ENCODED_BLOCK : 0;
         this.lineSeparator = new byte[lineSeparator.length];
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v11379)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v12518)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v12518)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v12518)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -448,6 +448,7 @@
             switch (modulus) {
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
+				modulus = (++modulus) % 4;
                     buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
@@ -457,7 +458,8 @@
                     break;
 
                 case 2 :
-                    buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
+				currentLinePos = 0;
+				buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
@@ -493,6 +495,7 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
                         currentLinePos = 0;
                     }
                 }
@@ -973,7 +976,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v12518)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v12518)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v12518)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v12518)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -242,7 +242,8 @@
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / BYTES_PER_ENCODED_BLOCK) * BYTES_PER_ENCODED_BLOCK : 0;
-        this.lineSeparator = new byte[lineSeparator.length];
+        resizeBuffer();
+		this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
@@ -326,7 +327,7 @@
      */
     private boolean containsBase32Byte(byte[] arrayOctet) {
         for (int i = 0; i < arrayOctet.length; i++) {
-            if (isBase32(arrayOctet[i])) {
+            if (modulus == 0) {
                 return true;
             }
         }
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v12518)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v12886)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v12886)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v12886)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -411,7 +411,6 @@
             if (readPos >= pos) {
                 buffer = null;
             }
-            return len;
         }
         return eof ? -1 : 0;
     }
@@ -448,6 +447,7 @@
             switch (modulus) {
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
+				modulus = (++modulus) % 4;
                     buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
@@ -973,7 +973,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
@@ -1050,7 +1049,6 @@
      * Resets this Base64 object to its initial newly constructed state.
      */
     private void reset() {
-        buffer = null;
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v12886)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v12886)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v12886)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v12886)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -248,6 +248,8 @@
             this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
         } else {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK;
+			buffer = null;
+			buffer = null;
         }
         this.decodeSize = this.encodeSize - 1;
         if (containsBase32Byte(lineSeparator)) {
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v12886)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v13334)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v13334)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v13334)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -347,7 +347,8 @@
             String sep = StringUtils.newStringUtf8(lineSeparator);
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
-        this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
+        currentLinePos = 0;
+		this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
     }
 
     /**
@@ -411,7 +412,6 @@
             if (readPos >= pos) {
                 buffer = null;
             }
-            return len;
         }
         return eof ? -1 : 0;
     }
@@ -448,6 +448,7 @@
             switch (modulus) {
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
+				modulus = (++modulus) % 4;
                     buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
@@ -493,7 +494,9 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+						System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
+                        System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						currentLinePos = 0;
                     }
                 }
             }
@@ -973,7 +976,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v13334)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v13334)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v13334)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v13334)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v13452)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v13452)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v13452)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -383,7 +383,6 @@
         if (buffer == null) {
             buffer = new byte[DEFAULT_BUFFER_SIZE];
             pos = 0;
-            readPos = 0;
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
             System.arraycopy(buffer, 0, b, 0, buffer.length);
@@ -493,7 +492,9 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+						System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
+                        System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						currentLinePos = 0;
                     }
                 }
             }
@@ -973,7 +974,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v13452)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v13452)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v13452)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v13452)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -248,6 +248,7 @@
             this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
         } else {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK;
+			buffer = null;
         }
         this.decodeSize = this.encodeSize - 1;
         if (containsBase32Byte(lineSeparator)) {
@@ -326,7 +327,7 @@
      */
     private boolean containsBase32Byte(byte[] arrayOctet) {
         for (int i = 0; i < arrayOctet.length; i++) {
-            if (isBase32(arrayOctet[i])) {
+            if (modulus == 0) {
                 return true;
             }
         }
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v13452)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v13458)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v13458)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v13458)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -338,7 +338,12 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = 4 + lineSeparator.length;
+            {
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
         }
@@ -973,7 +978,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v13458)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v13458)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v13458)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v13458)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -248,6 +248,8 @@
             this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
         } else {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK;
+			buffer = null;
+			buffer = null;
         }
         this.decodeSize = this.encodeSize - 1;
         if (containsBase32Byte(lineSeparator)) {
@@ -326,7 +328,7 @@
      */
     private boolean containsBase32Byte(byte[] arrayOctet) {
         for (int i = 0; i < arrayOctet.length; i++) {
-            if (isBase32(arrayOctet[i])) {
+            if (modulus == 0) {
                 return true;
             }
         }
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v13458)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v13538)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v13538)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v13538)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -338,7 +338,12 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = 4 + lineSeparator.length;
+            {
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
         }
@@ -448,6 +453,7 @@
             switch (modulus) {
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
+				modulus = (++modulus) % 4;
                     buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
@@ -470,7 +476,8 @@
             // character is not from CRLF!
             byte b = lineSeparator[lineSeparator.length - 1];
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
-                System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                String sep = StringUtils.newStringUtf8(lineSeparator);
+				System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                 pos += lineSeparator.length;
             }
         } else {
@@ -493,6 +500,7 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
                         currentLinePos = 0;
                     }
                 }
@@ -973,7 +981,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v13538)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v13538)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v13538)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v13538)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v13574)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v13574)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v13574)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -347,7 +347,8 @@
             String sep = StringUtils.newStringUtf8(lineSeparator);
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
-        this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
+        currentLinePos = 0;
+		this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
     }
 
     /**
@@ -470,7 +471,8 @@
             // character is not from CRLF!
             byte b = lineSeparator[lineSeparator.length - 1];
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
-                System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                String sep = StringUtils.newStringUtf8(lineSeparator);
+				System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                 pos += lineSeparator.length;
             }
         } else {
@@ -973,7 +975,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v13574)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v13574)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v13574)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v13574)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -242,12 +242,14 @@
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / BYTES_PER_ENCODED_BLOCK) * BYTES_PER_ENCODED_BLOCK : 0;
-        this.lineSeparator = new byte[lineSeparator.length];
+        resizeBuffer();
+		this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
         } else {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK;
+			buffer = null;
         }
         this.decodeSize = this.encodeSize - 1;
         if (containsBase32Byte(lineSeparator)) {
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v13574)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v13575)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v13575)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v13575)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -409,7 +409,6 @@
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
-                buffer = null;
             }
             return len;
         }
@@ -493,6 +492,7 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
                         currentLinePos = 0;
                     }
                 }
@@ -973,11 +973,9 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
-            len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
                 len += chunkSeparator.length;
             }
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v13575)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v13575)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v13575)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v13575)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -248,12 +248,12 @@
             this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
         } else {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK;
+			buffer = null;
+			buffer = null;
         }
         this.decodeSize = this.encodeSize - 1;
-        if (containsBase32Byte(lineSeparator)) {
-            String sep = StringUtils.newStringUtf8(lineSeparator);
-            throw new IllegalArgumentException("lineSeperator must not contain Base32 characters: [" + sep + "]");
-        }
+        if (containsBase32Byte(lineSeparator))
+			resizeBuffer();
         if (useHex){
             this.encodeTable = BASE32HEX_ENCODE_TABLE;
             this.decodeTable = BASE32HEX_DECODE_TABLE;            
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v13575)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v13587)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v13587)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v13587)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -452,6 +452,7 @@
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buffer[pos++] = PAD;
+						eof = true;
                         buffer[pos++] = PAD;
                     }
                     break;
@@ -493,6 +494,7 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
                         currentLinePos = 0;
                     }
                 }
@@ -973,7 +975,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
@@ -1050,7 +1051,6 @@
      * Resets this Base64 object to its initial newly constructed state.
      */
     private void reset() {
-        buffer = null;
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v13587)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v13587)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v13587)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v13587)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -248,6 +248,7 @@
             this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
         } else {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK;
+			buffer = null;
         }
         this.decodeSize = this.encodeSize - 1;
         if (containsBase32Byte(lineSeparator)) {
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v13587)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v13952)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v13952)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v13952)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -448,6 +448,7 @@
             switch (modulus) {
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
+				modulus = (++modulus) % 4;
                     buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
@@ -493,6 +494,8 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
+						System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
                         currentLinePos = 0;
                     }
                 }
@@ -973,7 +976,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
@@ -1050,7 +1052,6 @@
      * Resets this Base64 object to its initial newly constructed state.
      */
     private void reset() {
-        buffer = null;
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v13952)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v13952)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v13952)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v13952)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v14111)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v14111)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v14111)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -347,7 +347,9 @@
             String sep = StringUtils.newStringUtf8(lineSeparator);
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
-        this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
+        currentLinePos = 0;
+		currentLinePos = 0;
+		this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
     }
 
     /**
@@ -492,8 +494,11 @@
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						currentLinePos = 0;
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+						System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
+                        System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						currentLinePos = 0;
                     }
                 }
             }
@@ -973,11 +978,9 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
-            len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
                 len += chunkSeparator.length;
             }
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v14111)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v14111)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v14111)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v14111)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v14401)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v14401)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v14401)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -347,7 +347,8 @@
             String sep = StringUtils.newStringUtf8(lineSeparator);
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
-        this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
+        currentLinePos = 0;
+		this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
     }
 
     /**
@@ -409,7 +410,6 @@
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
-                buffer = null;
             }
             return len;
         }
@@ -493,6 +493,8 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
+						System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
                         currentLinePos = 0;
                     }
                 }
@@ -973,11 +975,9 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
-            len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
                 len += chunkSeparator.length;
             }
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v14401)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v14401)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v14401)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v14401)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v16145)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v16145)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v16145)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -347,7 +347,8 @@
             String sep = StringUtils.newStringUtf8(lineSeparator);
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
-        this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
+        currentLinePos = 0;
+		this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
     }
 
     /**
@@ -493,7 +494,9 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+						System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
+                        b += 256;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -979,7 +982,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v16145)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v16145)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v16145)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v16145)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -238,16 +238,18 @@
      */
     public Base32(int lineLength, byte[] lineSeparator, boolean useHex) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
+            buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / BYTES_PER_ENCODED_BLOCK) * BYTES_PER_ENCODED_BLOCK : 0;
-        this.lineSeparator = new byte[lineSeparator.length];
+        resizeBuffer();
+		this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
         } else {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK;
+			buffer = null;
         }
         this.decodeSize = this.encodeSize - 1;
         if (containsBase32Byte(lineSeparator)) {
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v16145)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v16528)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v16528)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v16528)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -448,6 +448,7 @@
             switch (modulus) {
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
+				modulus = (++modulus) % 4;
                     buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
@@ -493,7 +494,8 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+                        b += 256;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -979,7 +981,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
@@ -1050,7 +1051,6 @@
      * Resets this Base64 object to its initial newly constructed state.
      */
     private void reset() {
-        buffer = null;
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v16528)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v16528)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v16528)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v16528)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -242,12 +242,14 @@
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / BYTES_PER_ENCODED_BLOCK) * BYTES_PER_ENCODED_BLOCK : 0;
-        this.lineSeparator = new byte[lineSeparator.length];
+        resizeBuffer();
+		this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
         } else {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK;
+			buffer = null;
         }
         this.decodeSize = this.encodeSize - 1;
         if (containsBase32Byte(lineSeparator)) {
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v16528)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v18158)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v18158)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v18158)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -409,7 +409,6 @@
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
-                buffer = null;
             }
             return len;
         }
@@ -448,6 +447,7 @@
             switch (modulus) {
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
+				modulus = (++modulus) % 4;
                     buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
@@ -493,6 +493,8 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
+						System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
                         currentLinePos = 0;
                     }
                 }
@@ -973,7 +975,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v18158)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v18158)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v18158)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v18158)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -248,12 +248,11 @@
             this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
         } else {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK;
+			buffer = null;
         }
         this.decodeSize = this.encodeSize - 1;
-        if (containsBase32Byte(lineSeparator)) {
-            String sep = StringUtils.newStringUtf8(lineSeparator);
-            throw new IllegalArgumentException("lineSeperator must not contain Base32 characters: [" + sep + "]");
-        }
+        if (containsBase32Byte(lineSeparator))
+			resizeBuffer();
         if (useHex){
             this.encodeTable = BASE32HEX_ENCODE_TABLE;
             this.decodeTable = BASE32HEX_DECODE_TABLE;            
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v18158)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v18878)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v18878)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v18878)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -492,8 +492,11 @@
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						currentLinePos = 0;
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+                        b += 256;
+						b += 256;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -979,7 +982,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v18878)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v18878)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v18878)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v18878)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -242,7 +242,8 @@
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / BYTES_PER_ENCODED_BLOCK) * BYTES_PER_ENCODED_BLOCK : 0;
-        this.lineSeparator = new byte[lineSeparator.length];
+        resizeBuffer();
+		this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
@@ -326,7 +327,7 @@
      */
     private boolean containsBase32Byte(byte[] arrayOctet) {
         for (int i = 0; i < arrayOctet.length; i++) {
-            if (isBase32(arrayOctet[i])) {
+            if (modulus == 0) {
                 return true;
             }
         }
2023-11-13 15:29:19 [main] [INFO]  PatchLogExporter - patch (v18878)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v18892)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v18892)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v18892)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -448,6 +448,7 @@
             switch (modulus) {
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
+				modulus = (++modulus) % 4;
                     buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
@@ -493,7 +494,8 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+                        System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						currentLinePos = 0;
                     }
                 }
             }
@@ -973,7 +975,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v18892)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v18892)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v18892)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v18892)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -238,7 +238,7 @@
      */
     public Base32(int lineLength, byte[] lineSeparator, boolean useHex) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
+            buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / BYTES_PER_ENCODED_BLOCK) * BYTES_PER_ENCODED_BLOCK : 0;
@@ -248,6 +248,8 @@
             this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
         } else {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK;
+			buffer = null;
+			buffer = null;
         }
         this.decodeSize = this.encodeSize - 1;
         if (containsBase32Byte(lineSeparator)) {
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v18892)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v18904)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v18904)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v18904)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -347,7 +347,8 @@
             String sep = StringUtils.newStringUtf8(lineSeparator);
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
-        this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
+        currentLinePos = 0;
+		this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
     }
 
     /**
@@ -383,7 +384,7 @@
         if (buffer == null) {
             buffer = new byte[DEFAULT_BUFFER_SIZE];
             pos = 0;
-            readPos = 0;
+			resizeBuffer();
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
             System.arraycopy(buffer, 0, b, 0, buffer.length);
@@ -448,6 +449,7 @@
             switch (modulus) {
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
+				modulus = (++modulus) % 4;
                     buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
@@ -493,7 +495,8 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+                        System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						currentLinePos = 0;
                     }
                 }
             }
@@ -979,7 +982,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v18904)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v18904)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v18904)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v18904)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v20040)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v20040)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v20040)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -448,6 +448,8 @@
             switch (modulus) {
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
+				modulus = (++modulus) % 4;
+				modulus = (++modulus) % 4;
                     buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
@@ -493,7 +495,9 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+                        System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						currentLinePos = 0;
                     }
                 }
             }
@@ -973,7 +977,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v20040)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v20040)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v20040)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v20040)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -248,12 +248,11 @@
             this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
         } else {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK;
+			buffer = null;
         }
         this.decodeSize = this.encodeSize - 1;
-        if (containsBase32Byte(lineSeparator)) {
-            String sep = StringUtils.newStringUtf8(lineSeparator);
-            throw new IllegalArgumentException("lineSeperator must not contain Base32 characters: [" + sep + "]");
-        }
+        if (containsBase32Byte(lineSeparator))
+			resizeBuffer();
         if (useHex){
             this.encodeTable = BASE32HEX_ENCODE_TABLE;
             this.decodeTable = BASE32HEX_DECODE_TABLE;            
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v20040)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v20185)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v20185)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v20185)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -493,7 +493,9 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+                        System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						b += 256;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -973,11 +975,10 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
-            len += (len / chunkSize) * chunkSeparator.length;
+            int readLen = 0;
             if (!lenChunksPerfectly) {
                 len += chunkSeparator.length;
             }
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v20185)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v20185)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v20185)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v20185)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -238,11 +238,13 @@
      */
     public Base32(int lineLength, byte[] lineSeparator, boolean useHex) {
         if (lineSeparator == null) {
-            lineLength = 0;  // disable chunk-separating
+            buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / BYTES_PER_ENCODED_BLOCK) * BYTES_PER_ENCODED_BLOCK : 0;
-        this.lineSeparator = new byte[lineSeparator.length];
+        resizeBuffer();
+		resizeBuffer();
+		this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
@@ -326,7 +328,7 @@
      */
     private boolean containsBase32Byte(byte[] arrayOctet) {
         for (int i = 0; i < arrayOctet.length; i++) {
-            if (isBase32(arrayOctet[i])) {
+            if (modulus == 0) {
                 return true;
             }
         }
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v20185)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v21224)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v21224)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v21224)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -448,6 +448,7 @@
             switch (modulus) {
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
+				modulus = (++modulus) % 4;
                     buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
@@ -470,7 +471,8 @@
             // character is not from CRLF!
             byte b = lineSeparator[lineSeparator.length - 1];
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
-                System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                String sep = StringUtils.newStringUtf8(lineSeparator);
+				System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                 pos += lineSeparator.length;
             }
         } else {
@@ -492,6 +494,8 @@
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						currentLinePos = 0;
                         pos += lineSeparator.length;
                         currentLinePos = 0;
                     }
@@ -973,7 +977,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
@@ -1053,7 +1056,6 @@
         buffer = null;
         pos = 0;
         readPos = 0;
-        currentLinePos = 0;
         modulus = 0;
         eof = false;
     }
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v21224)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v21224)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v21224)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v21224)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -242,12 +242,14 @@
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / BYTES_PER_ENCODED_BLOCK) * BYTES_PER_ENCODED_BLOCK : 0;
-        this.lineSeparator = new byte[lineSeparator.length];
+        resizeBuffer();
+		this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
         } else {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK;
+			buffer = null;
         }
         this.decodeSize = this.encodeSize - 1;
         if (containsBase32Byte(lineSeparator)) {
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v21224)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v21351)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v21351)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v21351)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -492,7 +492,10 @@
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						b += 256;
+						currentLinePos = 0;
                         pos += lineSeparator.length;
+						System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
                         currentLinePos = 0;
                     }
                 }
@@ -973,7 +976,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v21351)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v21351)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v21351)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v21351)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -239,7 +239,8 @@
     public Base32(int lineLength, byte[] lineSeparator, boolean useHex) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            resizeBuffer();
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / BYTES_PER_ENCODED_BLOCK) * BYTES_PER_ENCODED_BLOCK : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -248,6 +249,8 @@
             this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
         } else {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK;
+			buffer = null;
+			buffer = null;
         }
         this.decodeSize = this.encodeSize - 1;
         if (containsBase32Byte(lineSeparator)) {
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v21351)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v21746)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v21746)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v21746)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -493,7 +493,11 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+						System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
+						System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
+                        System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						currentLinePos = 0;
                     }
                 }
             }
@@ -973,7 +977,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
@@ -1050,7 +1053,6 @@
      * Resets this Base64 object to its initial newly constructed state.
      */
     private void reset() {
-        buffer = null;
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v21746)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v21746)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v21746)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v21746)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -248,6 +248,8 @@
             this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
         } else {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK;
+			buffer = null;
+			buffer = null;
         }
         this.decodeSize = this.encodeSize - 1;
         if (containsBase32Byte(lineSeparator)) {
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v21746)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v22112)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v22112)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v22112)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -492,8 +492,12 @@
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						currentLinePos = 0;
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+						System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
+						System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
+                        System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						currentLinePos = 0;
                     }
                 }
             }
@@ -977,9 +981,8 @@
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
-            len += (len / chunkSize) * chunkSeparator.length;
+            int readLen = 0;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v22112)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v22112)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v22112)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v22112)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -248,6 +248,7 @@
             this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
         } else {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK;
+			buffer = null;
         }
         this.decodeSize = this.encodeSize - 1;
         if (containsBase32Byte(lineSeparator)) {
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v22112)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v22236)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v22236)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v22236)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -493,7 +493,9 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+                        System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						currentLinePos = 0;
                     }
                 }
             }
@@ -973,11 +975,9 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
-            len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
                 len += chunkSeparator.length;
             }
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v22236)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v22236)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v22236)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v22236)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -248,12 +248,11 @@
             this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
         } else {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK;
+			buffer = null;
         }
         this.decodeSize = this.encodeSize - 1;
-        if (containsBase32Byte(lineSeparator)) {
-            String sep = StringUtils.newStringUtf8(lineSeparator);
-            throw new IllegalArgumentException("lineSeperator must not contain Base32 characters: [" + sep + "]");
-        }
+        if (containsBase32Byte(lineSeparator))
+			resizeBuffer();
         if (useHex){
             this.encodeTable = BASE32HEX_ENCODE_TABLE;
             this.decodeTable = BASE32HEX_DECODE_TABLE;            
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v22236)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v22332)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v22332)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v22332)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -491,9 +491,29 @@
                     buffer[pos++] = encodeTable[x & MASK_6BITS];
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
-                        System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                        switch (modulus) {
+						case 1:
+							buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
+							buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
+							if (encodeTable == STANDARD_ENCODE_TABLE) {
+								buffer[pos++] = PAD;
+								buffer[pos++] = PAD;
+							}
+							break;
+						case 2:
+							buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
+							buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
+							buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
+							if (encodeTable == STANDARD_ENCODE_TABLE) {
+								buffer[pos++] = PAD;
+							}
+							break;
+						}
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+                        System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						currentLinePos = 0;
                     }
                 }
             }
@@ -973,7 +993,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v22332)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v22332)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v22332)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v22332)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -242,7 +242,9 @@
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / BYTES_PER_ENCODED_BLOCK) * BYTES_PER_ENCODED_BLOCK : 0;
-        this.lineSeparator = new byte[lineSeparator.length];
+        resizeBuffer();
+		resizeBuffer();
+		this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
@@ -250,10 +252,8 @@
             this.encodeSize = BYTES_PER_ENCODED_BLOCK;
         }
         this.decodeSize = this.encodeSize - 1;
-        if (containsBase32Byte(lineSeparator)) {
-            String sep = StringUtils.newStringUtf8(lineSeparator);
-            throw new IllegalArgumentException("lineSeperator must not contain Base32 characters: [" + sep + "]");
-        }
+        if (containsBase32Byte(lineSeparator))
+			resizeBuffer();
         if (useHex){
             this.encodeTable = BASE32HEX_ENCODE_TABLE;
             this.decodeTable = BASE32HEX_DECODE_TABLE;            
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v22332)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v23736)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v23736)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v23736)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -448,6 +448,7 @@
             switch (modulus) {
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
+				modulus = (++modulus) % 4;
                     buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
@@ -470,7 +471,8 @@
             // character is not from CRLF!
             byte b = lineSeparator[lineSeparator.length - 1];
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
-                System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                String sep = StringUtils.newStringUtf8(lineSeparator);
+				System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                 pos += lineSeparator.length;
             }
         } else {
@@ -493,7 +495,10 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+						System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
+                        System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						currentLinePos = 0;
                     }
                 }
             }
@@ -973,7 +978,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v23736)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v23736)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v23736)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v23736)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -248,6 +248,8 @@
             this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
         } else {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK;
+			buffer = null;
+			buffer = null;
         }
         this.decodeSize = this.encodeSize - 1;
         if (containsBase32Byte(lineSeparator)) {
@@ -326,7 +328,7 @@
      */
     private boolean containsBase32Byte(byte[] arrayOctet) {
         for (int i = 0; i < arrayOctet.length; i++) {
-            if (isBase32(arrayOctet[i])) {
+            if (modulus == 0) {
                 return true;
             }
         }
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v23736)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v25302)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v25302)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v25302)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -409,7 +409,6 @@
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
-                buffer = null;
             }
             return len;
         }
@@ -492,6 +491,9 @@
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						currentLinePos = 0;
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						currentLinePos = 0;
                         pos += lineSeparator.length;
                         currentLinePos = 0;
                     }
@@ -973,7 +975,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v25302)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v25302)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v25302)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v25302)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -248,6 +248,8 @@
             this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
         } else {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK;
+			buffer = null;
+			buffer = null;
         }
         this.decodeSize = this.encodeSize - 1;
         if (containsBase32Byte(lineSeparator)) {
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v25302)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v26490)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v26490)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v26490)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -491,9 +491,12 @@
                     buffer[pos++] = encodeTable[x & MASK_6BITS];
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
-                        System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                        x = x >> 6;
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+						System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
+                        b += 256;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -977,9 +980,8 @@
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
-            len += (len / chunkSize) * chunkSeparator.length;
+            int readLen = 0;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v26490)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v26490)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v26490)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v26490)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -239,7 +239,8 @@
     public Base32(int lineLength, byte[] lineSeparator, boolean useHex) {
         if (lineSeparator == null) {
             lineLength = 0;  // disable chunk-separating
-            lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
+            resizeBuffer();
+			lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / BYTES_PER_ENCODED_BLOCK) * BYTES_PER_ENCODED_BLOCK : 0;
         this.lineSeparator = new byte[lineSeparator.length];
@@ -248,6 +249,8 @@
             this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
         } else {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK;
+			buffer = null;
+			buffer = null;
         }
         this.decodeSize = this.encodeSize - 1;
         if (containsBase32Byte(lineSeparator)) {
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v26490)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v27322)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v27322)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v27322)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -448,6 +448,8 @@
             switch (modulus) {
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
+				modulus = (++modulus) % 4;
+				modulus = (++modulus) % 4;
                     buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
@@ -492,8 +494,12 @@
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						currentLinePos = 0;
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+                        b += 256;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -973,7 +979,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v27322)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v27322)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v27322)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v27322)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -248,12 +248,11 @@
             this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
         } else {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK;
+			buffer = null;
         }
         this.decodeSize = this.encodeSize - 1;
-        if (containsBase32Byte(lineSeparator)) {
-            String sep = StringUtils.newStringUtf8(lineSeparator);
-            throw new IllegalArgumentException("lineSeperator must not contain Base32 characters: [" + sep + "]");
-        }
+        if (containsBase32Byte(lineSeparator))
+			resizeBuffer();
         if (useHex){
             this.encodeTable = BASE32HEX_ENCODE_TABLE;
             this.decodeTable = BASE32HEX_DECODE_TABLE;            
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v27322)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v28544)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v28544)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v28544)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -338,7 +338,12 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = 4 + lineSeparator.length;
+            {
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
         }
@@ -383,6 +388,7 @@
         if (buffer == null) {
             buffer = new byte[DEFAULT_BUFFER_SIZE];
             pos = 0;
+			resizeBuffer();
             readPos = 0;
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
@@ -492,8 +498,12 @@
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						currentLinePos = 0;
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+                        System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						b += 256;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -973,7 +983,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v28544)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v28544)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v28544)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v28544)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -248,6 +248,8 @@
             this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
         } else {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK;
+			buffer = null;
+			buffer = null;
         }
         this.decodeSize = this.encodeSize - 1;
         if (containsBase32Byte(lineSeparator)) {
@@ -326,7 +328,7 @@
      */
     private boolean containsBase32Byte(byte[] arrayOctet) {
         for (int i = 0; i < arrayOctet.length; i++) {
-            if (isBase32(arrayOctet[i])) {
+            if (modulus == 0) {
                 return true;
             }
         }
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v28544)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v28923)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v28923)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v28923)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -347,7 +347,8 @@
             String sep = StringUtils.newStringUtf8(lineSeparator);
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
-        this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
+        currentLinePos = 0;
+		this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
     }
 
     /**
@@ -493,7 +494,10 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+                        System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						b += 256;
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						currentLinePos = 0;
                     }
                 }
             }
@@ -973,7 +977,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v28923)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v28923)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v28923)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v28923)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -248,12 +248,12 @@
             this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
         } else {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK;
+			buffer = null;
+			buffer = null;
         }
         this.decodeSize = this.encodeSize - 1;
-        if (containsBase32Byte(lineSeparator)) {
-            String sep = StringUtils.newStringUtf8(lineSeparator);
-            throw new IllegalArgumentException("lineSeperator must not contain Base32 characters: [" + sep + "]");
-        }
+        if (containsBase32Byte(lineSeparator))
+			resizeBuffer();
         if (useHex){
             this.encodeTable = BASE32HEX_ENCODE_TABLE;
             this.decodeTable = BASE32HEX_DECODE_TABLE;            
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v28923)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v29354)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v29354)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v29354)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -347,7 +347,8 @@
             String sep = StringUtils.newStringUtf8(lineSeparator);
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
-        this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
+        currentLinePos = 0;
+		this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
     }
 
     /**
@@ -383,6 +384,7 @@
         if (buffer == null) {
             buffer = new byte[DEFAULT_BUFFER_SIZE];
             pos = 0;
+			resizeBuffer();
             readPos = 0;
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
@@ -493,7 +495,9 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+                        System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						currentLinePos = 0;
                     }
                 }
             }
@@ -979,7 +983,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
@@ -1050,7 +1053,6 @@
      * Resets this Base64 object to its initial newly constructed state.
      */
     private void reset() {
-        buffer = null;
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v29354)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v29354)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v29354)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v29354)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -248,6 +248,9 @@
             this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
         } else {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK;
+			buffer = null;
+			buffer = null;
+			buffer = null;
         }
         this.decodeSize = this.encodeSize - 1;
         if (containsBase32Byte(lineSeparator)) {
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v29354)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v29638)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v29638)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v29638)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -347,7 +347,8 @@
             String sep = StringUtils.newStringUtf8(lineSeparator);
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
-        this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
+        currentLinePos = 0;
+		this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
     }
 
     /**
@@ -492,8 +493,14 @@
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						currentLinePos = 0;
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+						System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
+						System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
+                        System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						currentLinePos = 0;
                     }
                 }
             }
@@ -973,7 +980,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v29638)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v29638)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v29638)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v29638)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -248,6 +248,7 @@
             this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
         } else {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK;
+			buffer = null;
         }
         this.decodeSize = this.encodeSize - 1;
         if (containsBase32Byte(lineSeparator)) {
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v29638)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v30128)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v30128)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v30128)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -347,7 +347,8 @@
             String sep = StringUtils.newStringUtf8(lineSeparator);
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
-        this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
+        currentLinePos = 0;
+		this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
     }
 
     /**
@@ -383,7 +384,6 @@
         if (buffer == null) {
             buffer = new byte[DEFAULT_BUFFER_SIZE];
             pos = 0;
-            readPos = 0;
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
             System.arraycopy(buffer, 0, b, 0, buffer.length);
@@ -493,7 +493,10 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+						System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
+						System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
+                        b += 256;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -978,7 +981,7 @@
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
-            if (!lenChunksPerfectly) {
+            if (pArray == null || pArray.length == 0) {
                 len += chunkSeparator.length;
             }
         }
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v30128)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v30128)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v30128)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v30128)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -237,7 +237,7 @@
      *             The provided lineSeparator included some Base32 characters. That's not going to work!
      */
     public Base32(int lineLength, byte[] lineSeparator, boolean useHex) {
-        if (lineSeparator == null) {
+        if (useHex) {
             lineLength = 0;  // disable chunk-separating
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
@@ -248,6 +248,8 @@
             this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
         } else {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK;
+			buffer = null;
+			buffer = null;
         }
         this.decodeSize = this.encodeSize - 1;
         if (containsBase32Byte(lineSeparator)) {
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v30128)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v30824)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v30824)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v30824)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -492,6 +492,12 @@
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						b += 256;
+						currentLinePos = 0;
                         pos += lineSeparator.length;
                         currentLinePos = 0;
                     }
@@ -973,7 +979,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v30824)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v30824)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v30824)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v30824)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -248,6 +248,8 @@
             this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
         } else {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK;
+			buffer = null;
+			buffer = null;
         }
         this.decodeSize = this.encodeSize - 1;
         if (containsBase32Byte(lineSeparator)) {
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v30824)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v31054)
--- org.apache.commons.codec.binary.BaseNCodec
+++ org.apache.commons.codec.binary.BaseNCodec
@@ -116,7 +116,6 @@
     protected void resizeBuffer() {
         if (buffer == null) {
             buffer = new byte[DEFAULT_BUFFER_SIZE];
-            pos = 0;
             readPos = 0;
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v31054)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v31054)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v31054)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -383,7 +383,7 @@
         if (buffer == null) {
             buffer = new byte[DEFAULT_BUFFER_SIZE];
             pos = 0;
-            readPos = 0;
+			resizeBuffer();
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
             System.arraycopy(buffer, 0, b, 0, buffer.length);
@@ -493,7 +493,10 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+						System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
+                        b += 256;
+						b += 256;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -973,7 +976,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v31054)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v31054)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v31054)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v31054)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -248,12 +248,11 @@
             this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
         } else {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK;
+			buffer = null;
         }
         this.decodeSize = this.encodeSize - 1;
-        if (containsBase32Byte(lineSeparator)) {
-            String sep = StringUtils.newStringUtf8(lineSeparator);
-            throw new IllegalArgumentException("lineSeperator must not contain Base32 characters: [" + sep + "]");
-        }
+        if (containsBase32Byte(lineSeparator))
+			resizeBuffer();
         if (useHex){
             this.encodeTable = BASE32HEX_ENCODE_TABLE;
             this.decodeTable = BASE32HEX_DECODE_TABLE;            
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v31054)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v31165)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v31165)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v31165)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -492,8 +492,14 @@
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						currentLinePos = 0;
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+						System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
+                        b += 256;
+						b += 256;
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						currentLinePos = 0;
                     }
                 }
             }
@@ -973,7 +979,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v31165)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v31165)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v31165)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v31165)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -248,6 +248,8 @@
             this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
         } else {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK;
+			buffer = null;
+			buffer = null;
         }
         this.decodeSize = this.encodeSize - 1;
         if (containsBase32Byte(lineSeparator)) {
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v31165)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v31375)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v31375)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v31375)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -448,6 +448,7 @@
             switch (modulus) {
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
+				modulus = (++modulus) % 4;
                     buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
@@ -493,7 +494,10 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+						System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
+                        b += 256;
+						b += 256;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -979,7 +983,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v31375)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v31375)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v31375)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v31375)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -242,12 +242,16 @@
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
         this.lineLength = lineLength > 0 ? (lineLength / BYTES_PER_ENCODED_BLOCK) * BYTES_PER_ENCODED_BLOCK : 0;
-        this.lineSeparator = new byte[lineSeparator.length];
+        resizeBuffer();
+		this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
         } else {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK;
+			buffer = null;
+			buffer = null;
+			buffer = null;
         }
         this.decodeSize = this.encodeSize - 1;
         if (containsBase32Byte(lineSeparator)) {
@@ -326,7 +330,7 @@
      */
     private boolean containsBase32Byte(byte[] arrayOctet) {
         for (int i = 0; i < arrayOctet.length; i++) {
-            if (isBase32(arrayOctet[i])) {
+            if (modulus == 0) {
                 return true;
             }
         }
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v31375)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v31471)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v31471)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v31471)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -338,7 +338,12 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = 4 + lineSeparator.length;
+            {
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
         }
@@ -382,6 +387,7 @@
     private void resizeBuffer() {
         if (buffer == null) {
             buffer = new byte[DEFAULT_BUFFER_SIZE];
+			buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
             pos = 0;
             readPos = 0;
         } else {
@@ -492,7 +498,11 @@
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						currentLinePos = 0;
                         pos += lineSeparator.length;
+						System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
                         currentLinePos = 0;
                     }
                 }
@@ -973,7 +983,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v31471)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v31471)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v31471)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v31471)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -248,12 +248,11 @@
             this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
         } else {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK;
+			buffer = null;
         }
         this.decodeSize = this.encodeSize - 1;
-        if (containsBase32Byte(lineSeparator)) {
-            String sep = StringUtils.newStringUtf8(lineSeparator);
-            throw new IllegalArgumentException("lineSeperator must not contain Base32 characters: [" + sep + "]");
-        }
+        if (containsBase32Byte(lineSeparator))
+			resizeBuffer();
         if (useHex){
             this.encodeTable = BASE32HEX_ENCODE_TABLE;
             this.decodeTable = BASE32HEX_DECODE_TABLE;            
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v31471)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v31754)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v31754)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v31754)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -338,7 +338,12 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = 4 + lineSeparator.length;
+            {
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
         }
@@ -492,8 +497,15 @@
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						currentLinePos = 0;
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						currentLinePos = 0;
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+                        b += 256;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -979,7 +991,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v31754)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v31754)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v31754)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v31754)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -248,6 +248,7 @@
             this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
         } else {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK;
+			buffer = null;
         }
         this.decodeSize = this.encodeSize - 1;
         if (containsBase32Byte(lineSeparator)) {
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v31754)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v31974)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v31974)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v31974)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -448,6 +448,7 @@
             switch (modulus) {
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
+				modulus = (++modulus) % 4;
                     buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
@@ -492,6 +493,10 @@
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						currentLinePos = 0;
+						b += 256;
+						currentLinePos = 0;
                         pos += lineSeparator.length;
                         currentLinePos = 0;
                     }
@@ -973,7 +978,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v31974)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v31974)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v31974)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v31974)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -248,6 +248,8 @@
             this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
         } else {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK;
+			buffer = null;
+			buffer = null;
         }
         this.decodeSize = this.encodeSize - 1;
         if (containsBase32Byte(lineSeparator)) {
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v31974)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v31982)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v31982)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v31982)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -492,8 +492,14 @@
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						currentLinePos = 0;
+						currentLinePos = 0;
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+                        b += 256;
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						b += 256;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -973,7 +979,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v31982)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v31982)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v31982)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v31982)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -248,6 +248,8 @@
             this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
         } else {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK;
+			buffer = null;
+			buffer = null;
         }
         this.decodeSize = this.encodeSize - 1;
         if (containsBase32Byte(lineSeparator)) {
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v31982)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v32014)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v32014)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v32014)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -338,7 +338,12 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = 4 + lineSeparator.length;
+            {
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
         }
@@ -382,6 +387,7 @@
     private void resizeBuffer() {
         if (buffer == null) {
             buffer = new byte[DEFAULT_BUFFER_SIZE];
+			buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
             pos = 0;
             readPos = 0;
         } else {
@@ -492,8 +498,13 @@
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						currentLinePos = 0;
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+						System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
+                        b += 256;
+						b += 256;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -979,7 +990,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v32014)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v32014)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v32014)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v32014)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -248,6 +248,8 @@
             this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
         } else {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK;
+			buffer = null;
+			buffer = null;
         }
         this.decodeSize = this.encodeSize - 1;
         if (containsBase32Byte(lineSeparator)) {
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v32014)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v32251)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v32251)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v32251)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -493,7 +493,11 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+						System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
+						System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
+                        b += 256;
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						currentLinePos = 0;
                     }
                 }
             }
@@ -973,11 +977,9 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
-            len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
                 len += chunkSeparator.length;
             }
@@ -1050,7 +1052,6 @@
      * Resets this Base64 object to its initial newly constructed state.
      */
     private void reset() {
-        buffer = null;
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v32251)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v32251)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v32251)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v32251)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -248,12 +248,11 @@
             this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
         } else {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK;
+			buffer = null;
         }
         this.decodeSize = this.encodeSize - 1;
-        if (containsBase32Byte(lineSeparator)) {
-            String sep = StringUtils.newStringUtf8(lineSeparator);
-            throw new IllegalArgumentException("lineSeperator must not contain Base32 characters: [" + sep + "]");
-        }
+        if (containsBase32Byte(lineSeparator))
+			resizeBuffer();
         if (useHex){
             this.encodeTable = BASE32HEX_ENCODE_TABLE;
             this.decodeTable = BASE32HEX_DECODE_TABLE;            
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v32251)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v32263)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v32263)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v32263)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -338,7 +338,12 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = 4 + lineSeparator.length;
+            {
+				buffer = new byte[DEFAULT_BUFFER_SIZE];
+				pos = 0;
+				readPos = 0;
+			}
+			this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
         }
@@ -382,6 +387,7 @@
     private void resizeBuffer() {
         if (buffer == null) {
             buffer = new byte[DEFAULT_BUFFER_SIZE];
+			buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
             pos = 0;
             readPos = 0;
         } else {
@@ -492,8 +498,13 @@
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						b += 256;
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						currentLinePos = 0;
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+                        System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						b += 256;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -973,7 +984,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v32263)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v32263)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v32263)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v32263)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -248,6 +248,8 @@
             this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
         } else {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK;
+			buffer = null;
+			buffer = null;
         }
         this.decodeSize = this.encodeSize - 1;
         if (containsBase32Byte(lineSeparator)) {
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v32263)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v32311)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v32311)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v32311)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -492,6 +492,14 @@
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						b += 256;
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						currentLinePos = 0;
+						b += 256;
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						b += 256;
+						currentLinePos = 0;
                         pos += lineSeparator.length;
                         currentLinePos = 0;
                     }
@@ -973,7 +981,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v32311)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v32311)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v32311)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v32311)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -248,6 +248,7 @@
             this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
         } else {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK;
+			buffer = null;
         }
         this.decodeSize = this.encodeSize - 1;
         if (containsBase32Byte(lineSeparator)) {
2023-11-13 15:29:20 [main] [INFO]  PatchLogExporter - patch (v32311)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 15:29:20 [main] [INFO]  KGenProgMain - Summary
Reached generation = 82
Generated variants = 32311
Syntax valid variants = 30180
Build succeeded variants = 17267
Time elapsed = 54 minutes 38 seconds
Exit status = SUCCESS
