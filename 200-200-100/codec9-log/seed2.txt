2023-11-13 17:11:31 [main] [WARN]  Configuration$Builder - The directory where kGenProg is running is different from the root directory of the given target project.
2023-11-13 17:11:31 [main] [WARN]  Configuration$Builder - If the target project includes test cases with file I/O, such test cases won't run correctly.
2023-11-13 17:11:31 [main] [WARN]  Configuration$Builder - We recommend you running kGenProg with the root directory of the target project as the current directory.
2023-11-13 17:11:31 [main] [INFO]  KGenProgMain - 
==================== kGenProg Configuration ====================
configPath = /Users/haradakanon/Downloads/kGenProg-1.8.2/example/codec9/kgenprog-9.toml (set by command line)
rootDir = /Users/haradakanon/Downloads/kGenProg-1.8.2/example/codec9 (set in config file)
productPaths = [/Users/haradakanon/Downloads/kGenProg-1.8.2/example/codec9/src/java] (set in config file)
testPaths = [/Users/haradakanon/Downloads/kGenProg-1.8.2/example/codec9/src/test] (set in config file)
classPaths = []
executionTests = [org.apache.commons.codec.binary.Base64Test] (set in config file)
outDir = kgenprog-out
logLevel = INFO (set in config file)
mutationGeneratingCount = 200 (set in config file)
crossoverGeneratingCount = 200 (set in config file)
headcount = 100
maxGeneration = 500 (set in config file)
timeLimit = PT24H (set in config file)
testTimeLimit = PT3M (set in config file)
requiredSolutionsCount = 100 (set in config file)
randomSeed = 2 (set by command line)
scope = PACKAGE (set in config file)
faultLocalization = Zoltar (set in config file)
mutationType = Simple
crossoverType = Random
firstVariantSelectionStrategy = Random
secondVariantSelectionStrategy = Random
isPatchOutput = true (set in config file)
isHistoryRecord = false
currentDirectory = /Users/haradakanon/Downloads/research
version = 1.8.2
================================================================
2023-11-13 17:11:41 [main] [INFO]  KGenProgMain - initial failed tests (1/51)
org.apache.commons.codec.binary.Base64Test.testCodec112: null

2023-11-13 17:11:41 [main] [INFO]  KGenProgMain - GA started
2023-11-13 17:11:41 [main] [INFO]  KGenProgMain - entered the era of 1st generation.
2023-11-13 17:11:56 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 15 seconds
Variants: generated 200, build-succeeded 23, build-failed 110, syntax-invalid 11, redundant 56
Fitness: max 0.98(9), min 0.353(1), ave 0.782
Test execution time: sum 3876 ms, max 480 ms, min 94 ms
----------------------------------------------------------------

2023-11-13 17:11:56 [main] [INFO]  KGenProgMain - entered the era of 2nd generation.
2023-11-13 17:12:11 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 30 seconds
Variants: generated 200, build-succeeded 39, build-failed 114, syntax-invalid 13, redundant 34
Fitness: max 0.98(9), min 0.235(2), ave 0.731
Test execution time: sum 4395 ms, max 252 ms, min 76 ms
----------------------------------------------------------------

2023-11-13 17:12:11 [main] [INFO]  KGenProgMain - entered the era of 3rd generation.
2023-11-13 17:12:37 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 56 seconds
Variants: generated 400, build-succeeded 149, build-failed 111, syntax-invalid 22, redundant 118
Fitness: max 1(2), min 0.216(1), ave 0.711
Test execution time: sum 13667 ms, max 241 ms, min 62 ms
----------------------------------------------------------------

2023-11-13 17:12:37 [main] [INFO]  KGenProgMain - entered the era of 4th generation.
2023-11-13 17:13:01 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 minutes 20 seconds
Variants: generated 400, build-succeeded 123, build-failed 112, syntax-invalid 33, redundant 132
Fitness: max 1(1), min 0.235(1), ave 0.839
Test execution time: sum 11676 ms, max 229 ms, min 67 ms
----------------------------------------------------------------

2023-11-13 17:13:01 [main] [INFO]  KGenProgMain - entered the era of 5th generation.
2023-11-13 17:13:30 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 minutes 49 seconds
Variants: generated 400, build-succeeded 126, build-failed 131, syntax-invalid 33, redundant 110
Fitness: max 1(3), min 0.49(2), ave 0.915
Test execution time: sum 15745 ms, max 2664 ms, min 67 ms
----------------------------------------------------------------

2023-11-13 17:13:30 [main] [INFO]  KGenProgMain - entered the era of 6th generation.
2023-11-13 17:13:53 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 minutes 12 seconds
Variants: generated 400, build-succeeded 105, build-failed 126, syntax-invalid 29, redundant 140
Fitness: max 1(6), min 0.49(1), ave 0.948
Test execution time: sum 10681 ms, max 291 ms, min 76 ms
----------------------------------------------------------------

2023-11-13 17:13:53 [main] [INFO]  KGenProgMain - entered the era of 7th generation.
2023-11-13 17:14:21 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 minutes 39 seconds
Variants: generated 400, build-succeeded 136, build-failed 120, syntax-invalid 30, redundant 114
Fitness: max 1(7), min 0.333(1), ave 0.946
Test execution time: sum 14427 ms, max 1301 ms, min 63 ms
----------------------------------------------------------------

2023-11-13 17:14:21 [main] [INFO]  KGenProgMain - entered the era of 8th generation.
2023-11-13 17:14:49 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 minutes 8 seconds
Variants: generated 400, build-succeeded 149, build-failed 121, syntax-invalid 21, redundant 109
Fitness: max 1(5), min 0.49(1), ave 0.945
Test execution time: sum 14508 ms, max 233 ms, min 63 ms
----------------------------------------------------------------

2023-11-13 17:14:49 [main] [INFO]  KGenProgMain - entered the era of 9th generation.
2023-11-13 17:15:19 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 minutes 38 seconds
Variants: generated 400, build-succeeded 157, build-failed 127, syntax-invalid 30, redundant 86
Fitness: max 1(3), min 0.49(3), ave 0.942
Test execution time: sum 15369 ms, max 252 ms, min 64 ms
----------------------------------------------------------------

2023-11-13 17:15:19 [main] [INFO]  KGenProgMain - entered the era of 10th generation.
2023-11-13 17:15:51 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 minutes 9 seconds
Variants: generated 400, build-succeeded 162, build-failed 120, syntax-invalid 33, redundant 85
Fitness: max 1(2), min 0.353(1), ave 0.941
Test execution time: sum 15704 ms, max 236 ms, min 66 ms
----------------------------------------------------------------

2023-11-13 17:15:51 [main] [INFO]  KGenProgMain - entered the era of 11th generation.
2023-11-13 17:16:22 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 minutes 41 seconds
Variants: generated 400, build-succeeded 167, build-failed 117, syntax-invalid 36, redundant 80
Fitness: max 1(3), min 0.49(6), ave 0.938
Test execution time: sum 16070 ms, max 245 ms, min 63 ms
----------------------------------------------------------------

2023-11-13 17:16:22 [main] [INFO]  KGenProgMain - entered the era of 12th generation.
2023-11-13 17:16:56 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 minutes 15 seconds
Variants: generated 400, build-succeeded 179, build-failed 121, syntax-invalid 34, redundant 66
Fitness: max 1(5), min 0.216(1), ave 0.945
Test execution time: sum 17272 ms, max 213 ms, min 63 ms
----------------------------------------------------------------

2023-11-13 17:16:56 [main] [INFO]  KGenProgMain - entered the era of 13th generation.
2023-11-13 17:17:32 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 minutes 51 seconds
Variants: generated 400, build-succeeded 193, build-failed 119, syntax-invalid 24, redundant 64
Fitness: max 0.98(156), min 0.431(1), ave 0.948
Test execution time: sum 19150 ms, max 219 ms, min 64 ms
----------------------------------------------------------------

2023-11-13 17:17:32 [main] [INFO]  KGenProgMain - entered the era of 14th generation.
2023-11-13 17:18:06 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 minutes 25 seconds
Variants: generated 400, build-succeeded 184, build-failed 128, syntax-invalid 26, redundant 62
Fitness: max 1(1), min 0.471(1), ave 0.954
Test execution time: sum 17866 ms, max 208 ms, min 66 ms
----------------------------------------------------------------

2023-11-13 17:18:06 [main] [INFO]  KGenProgMain - entered the era of 15th generation.
2023-11-13 17:18:39 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 minutes 58 seconds
Variants: generated 400, build-succeeded 185, build-failed 126, syntax-invalid 28, redundant 61
Fitness: max 0.98(153), min 0.431(1), ave 0.944
Test execution time: sum 17829 ms, max 242 ms, min 64 ms
----------------------------------------------------------------

2023-11-13 17:18:39 [main] [INFO]  KGenProgMain - entered the era of 16th generation.
2023-11-13 17:19:13 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 minutes 32 seconds
Variants: generated 400, build-succeeded 191, build-failed 129, syntax-invalid 29, redundant 51
Fitness: max 1(2), min 0.49(2), ave 0.958
Test execution time: sum 18334 ms, max 207 ms, min 63 ms
----------------------------------------------------------------

2023-11-13 17:19:13 [main] [INFO]  KGenProgMain - entered the era of 17th generation.
2023-11-13 17:19:46 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 minutes 5 seconds
Variants: generated 400, build-succeeded 191, build-failed 119, syntax-invalid 41, redundant 49
Fitness: max 1(1), min 0.333(1), ave 0.944
Test execution time: sum 18165 ms, max 199 ms, min 67 ms
----------------------------------------------------------------

2023-11-13 17:19:46 [main] [INFO]  KGenProgMain - entered the era of 18th generation.
2023-11-13 17:20:19 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 minutes 38 seconds
Variants: generated 400, build-succeeded 180, build-failed 133, syntax-invalid 40, redundant 47
Fitness: max 1(1), min 0.471(1), ave 0.959
Test execution time: sum 17301 ms, max 221 ms, min 66 ms
----------------------------------------------------------------

2023-11-13 17:20:19 [main] [INFO]  KGenProgMain - entered the era of 19th generation.
2023-11-13 17:21:00 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 minutes 19 seconds
Variants: generated 400, build-succeeded 192, build-failed 126, syntax-invalid 34, redundant 48
Fitness: max 1(1), min 0.235(1), ave 0.952
Test execution time: sum 20873 ms, max 1107 ms, min 68 ms
----------------------------------------------------------------

2023-11-13 17:21:00 [main] [INFO]  KGenProgMain - entered the era of 20th generation.
2023-11-13 17:21:38 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 minutes 57 seconds
Variants: generated 400, build-succeeded 198, build-failed 122, syntax-invalid 39, redundant 41
Fitness: max 0.98(176), min 0.471(1), ave 0.959
Test execution time: sum 19925 ms, max 703 ms, min 62 ms
----------------------------------------------------------------

2023-11-13 17:21:38 [main] [INFO]  KGenProgMain - entered the era of 21st generation.
2023-11-13 17:22:16 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 10 minutes 35 seconds
Variants: generated 400, build-succeeded 204, build-failed 126, syntax-invalid 32, redundant 38
Fitness: max 1(2), min 0.333(1), ave 0.957
Test execution time: sum 20090 ms, max 231 ms, min 64 ms
----------------------------------------------------------------

2023-11-13 17:22:16 [main] [INFO]  KGenProgMain - entered the era of 22nd generation.
2023-11-13 17:22:56 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 minutes 14 seconds
Variants: generated 400, build-succeeded 200, build-failed 132, syntax-invalid 32, redundant 36
Fitness: max 1(2), min 0.49(3), ave 0.957
Test execution time: sum 19592 ms, max 205 ms, min 65 ms
----------------------------------------------------------------

2023-11-13 17:22:56 [main] [INFO]  KGenProgMain - entered the era of 23rd generation.
2023-11-13 17:23:34 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 minutes 53 seconds
Variants: generated 400, build-succeeded 201, build-failed 122, syntax-invalid 27, redundant 50
Fitness: max 1(4), min 0.353(1), ave 0.958
Test execution time: sum 19499 ms, max 198 ms, min 62 ms
----------------------------------------------------------------

2023-11-13 17:23:34 [main] [INFO]  KGenProgMain - entered the era of 24th generation.
2023-11-13 17:24:13 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 minutes 32 seconds
Variants: generated 400, build-succeeded 198, build-failed 124, syntax-invalid 38, redundant 40
Fitness: max 1(2), min 0.49(1), ave 0.96
Test execution time: sum 19608 ms, max 209 ms, min 65 ms
----------------------------------------------------------------

2023-11-13 17:24:13 [main] [INFO]  KGenProgMain - entered the era of 25th generation.
2023-11-13 17:24:52 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 13 minutes 11 seconds
Variants: generated 400, build-succeeded 209, build-failed 111, syntax-invalid 48, redundant 32
Fitness: max 0.98(168), min 0.353(1), ave 0.947
Test execution time: sum 20611 ms, max 215 ms, min 64 ms
----------------------------------------------------------------

2023-11-13 17:24:52 [main] [INFO]  KGenProgMain - entered the era of 26th generation.
2023-11-13 17:25:28 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 13 minutes 47 seconds
Variants: generated 400, build-succeeded 186, build-failed 128, syntax-invalid 51, redundant 35
Fitness: max 0.98(155), min 0.471(1), ave 0.948
Test execution time: sum 18072 ms, max 207 ms, min 64 ms
----------------------------------------------------------------

2023-11-13 17:25:29 [main] [INFO]  KGenProgMain - entered the era of 27th generation.
2023-11-13 17:26:10 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 14 minutes 29 seconds
Variants: generated 400, build-succeeded 206, build-failed 122, syntax-invalid 36, redundant 36
Fitness: max 0.98(175), min 0.333(1), ave 0.952
Test execution time: sum 21271 ms, max 766 ms, min 65 ms
----------------------------------------------------------------

2023-11-13 17:26:10 [main] [INFO]  KGenProgMain - entered the era of 28th generation.
2023-11-13 17:26:51 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 15 minutes 10 seconds
Variants: generated 400, build-succeeded 202, build-failed 134, syntax-invalid 37, redundant 27
Fitness: max 0.98(179), min 0.49(1), ave 0.964
Test execution time: sum 19979 ms, max 201 ms, min 66 ms
----------------------------------------------------------------

2023-11-13 17:26:51 [main] [INFO]  KGenProgMain - entered the era of 29th generation.
2023-11-13 17:27:32 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 15 minutes 50 seconds
Variants: generated 400, build-succeeded 205, build-failed 126, syntax-invalid 40, redundant 29
Fitness: max 1(1), min 0.235(1), ave 0.952
Test execution time: sum 20274 ms, max 211 ms, min 63 ms
----------------------------------------------------------------

2023-11-13 17:27:32 [main] [INFO]  KGenProgMain - entered the era of 30th generation.
2023-11-13 17:28:12 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 16 minutes 30 seconds
Variants: generated 400, build-succeeded 199, build-failed 140, syntax-invalid 37, redundant 24
Fitness: max 0.98(174), min 0.49(2), ave 0.961
Test execution time: sum 20005 ms, max 234 ms, min 63 ms
----------------------------------------------------------------

2023-11-13 17:28:12 [main] [INFO]  KGenProgMain - entered the era of 31st generation.
2023-11-13 17:28:54 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 17 minutes 13 seconds
Variants: generated 400, build-succeeded 210, build-failed 124, syntax-invalid 40, redundant 26
Fitness: max 0.98(181), min 0.49(2), ave 0.959
Test execution time: sum 20895 ms, max 205 ms, min 66 ms
----------------------------------------------------------------

2023-11-13 17:28:54 [main] [INFO]  KGenProgMain - entered the era of 32nd generation.
2023-11-13 17:29:34 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 17 minutes 52 seconds
Variants: generated 400, build-succeeded 200, build-failed 126, syntax-invalid 38, redundant 36
Fitness: max 1(2), min 0.275(1), ave 0.959
Test execution time: sum 19735 ms, max 198 ms, min 64 ms
----------------------------------------------------------------

2023-11-13 17:29:34 [main] [INFO]  KGenProgMain - entered the era of 33rd generation.
2023-11-13 17:30:16 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 18 minutes 35 seconds
Variants: generated 400, build-succeeded 207, build-failed 120, syntax-invalid 47, redundant 26
Fitness: max 0.98(169), min 0.333(1), ave 0.952
Test execution time: sum 22376 ms, max 1778 ms, min 65 ms
----------------------------------------------------------------

2023-11-13 17:30:16 [main] [INFO]  KGenProgMain - entered the era of 34th generation.
2023-11-13 17:30:59 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 19 minutes 18 seconds
Variants: generated 400, build-succeeded 201, build-failed 125, syntax-invalid 47, redundant 27
Fitness: max 0.98(164), min 0.49(1), ave 0.954
Test execution time: sum 20704 ms, max 759 ms, min 70 ms
----------------------------------------------------------------

2023-11-13 17:30:59 [main] [INFO]  KGenProgMain - entered the era of 35th generation.
2023-11-13 17:31:41 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 19 minutes 59 seconds
Variants: generated 400, build-succeeded 216, build-failed 130, syntax-invalid 35, redundant 19
Fitness: max 1(1), min 0.275(1), ave 0.952
Test execution time: sum 21255 ms, max 237 ms, min 65 ms
----------------------------------------------------------------

2023-11-13 17:31:41 [main] [INFO]  KGenProgMain - entered the era of 36th generation.
2023-11-13 17:32:23 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 20 minutes 41 seconds
Variants: generated 400, build-succeeded 209, build-failed 128, syntax-invalid 42, redundant 21
Fitness: max 0.98(172), min 0.49(2), ave 0.958
Test execution time: sum 21043 ms, max 236 ms, min 65 ms
----------------------------------------------------------------

2023-11-13 17:32:23 [main] [INFO]  KGenProgMain - entered the era of 37th generation.
2023-11-13 17:33:06 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 21 minutes 24 seconds
Variants: generated 400, build-succeeded 210, build-failed 125, syntax-invalid 49, redundant 16
Fitness: max 0.98(178), min 0.529(1), ave 0.954
Test execution time: sum 21130 ms, max 217 ms, min 69 ms
----------------------------------------------------------------

2023-11-13 17:33:06 [main] [INFO]  KGenProgMain - entered the era of 38th generation.
2023-11-13 17:33:46 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 22 minutes 4 seconds
Variants: generated 400, build-succeeded 196, build-failed 128, syntax-invalid 48, redundant 28
Fitness: max 1(1), min 0.353(1), ave 0.954
Test execution time: sum 19720 ms, max 250 ms, min 69 ms
----------------------------------------------------------------

2023-11-13 17:33:46 [main] [INFO]  KGenProgMain - entered the era of 39th generation.
2023-11-13 17:34:30 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 22 minutes 49 seconds
Variants: generated 400, build-succeeded 215, build-failed 112, syntax-invalid 51, redundant 22
Fitness: max 0.98(173), min 0.314(1), ave 0.948
Test execution time: sum 22170 ms, max 1089 ms, min 65 ms
----------------------------------------------------------------

2023-11-13 17:34:30 [main] [INFO]  KGenProgMain - entered the era of 40th generation.
2023-11-13 17:35:16 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 23 minutes 35 seconds
Variants: generated 400, build-succeeded 211, build-failed 112, syntax-invalid 50, redundant 27
Fitness: max 0.98(191), min 0.49(2), ave 0.961
Test execution time: sum 22963 ms, max 2083 ms, min 72 ms
----------------------------------------------------------------

2023-11-13 17:35:16 [main] [INFO]  KGenProgMain - entered the era of 41st generation.
2023-11-13 17:36:01 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 24 minutes 20 seconds
Variants: generated 400, build-succeeded 210, build-failed 129, syntax-invalid 42, redundant 19
Fitness: max 0.98(186), min 0.333(1), ave 0.959
Test execution time: sum 21759 ms, max 886 ms, min 64 ms
----------------------------------------------------------------

2023-11-13 17:36:01 [main] [INFO]  KGenProgMain - entered the era of 42nd generation.
2023-11-13 17:36:44 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 25 minutes 3 seconds
Variants: generated 400, build-succeeded 212, build-failed 125, syntax-invalid 44, redundant 19
Fitness: max 0.98(180), min 0.333(1), ave 0.955
Test execution time: sum 20938 ms, max 225 ms, min 64 ms
----------------------------------------------------------------

2023-11-13 17:36:44 [main] [INFO]  KGenProgMain - entered the era of 43rd generation.
2023-11-13 17:37:29 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 25 minutes 47 seconds
Variants: generated 400, build-succeeded 220, build-failed 120, syntax-invalid 41, redundant 19
Fitness: max 1(1), min 0.353(1), ave 0.954
Test execution time: sum 22394 ms, max 203 ms, min 64 ms
----------------------------------------------------------------

2023-11-13 17:37:29 [main] [INFO]  KGenProgMain - entered the era of 44th generation.
2023-11-13 17:38:13 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 26 minutes 32 seconds
Variants: generated 400, build-succeeded 211, build-failed 116, syntax-invalid 53, redundant 20
Fitness: max 0.98(185), min 0.353(1), ave 0.954
Test execution time: sum 22532 ms, max 884 ms, min 66 ms
----------------------------------------------------------------

2023-11-13 17:38:13 [main] [INFO]  KGenProgMain - entered the era of 45th generation.
2023-11-13 17:39:00 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 27 minutes 19 seconds
Variants: generated 400, build-succeeded 220, build-failed 124, syntax-invalid 38, redundant 18
Fitness: max 1(1), min 0.49(2), ave 0.961
Test execution time: sum 22799 ms, max 688 ms, min 66 ms
----------------------------------------------------------------

2023-11-13 17:39:00 [main] [INFO]  KGenProgMain - entered the era of 46th generation.
2023-11-13 17:39:52 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 28 minutes 11 seconds
Variants: generated 400, build-succeeded 239, build-failed 115, syntax-invalid 21, redundant 25
Fitness: max 1(2), min 0.235(1), ave 0.944
Test execution time: sum 26329 ms, max 1389 ms, min 64 ms
----------------------------------------------------------------

2023-11-13 17:39:52 [main] [INFO]  KGenProgMain - entered the era of 47th generation.
2023-11-13 17:40:43 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 29 minutes 2 seconds
Variants: generated 400, build-succeeded 236, build-failed 116, syntax-invalid 32, redundant 16
Fitness: max 0.98(195), min 0.294(1), ave 0.943
Test execution time: sum 25489 ms, max 889 ms, min 65 ms
----------------------------------------------------------------

2023-11-13 17:40:43 [main] [INFO]  KGenProgMain - entered the era of 48th generation.
2023-11-13 17:41:32 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 29 minutes 51 seconds
Variants: generated 400, build-succeeded 250, build-failed 102, syntax-invalid 26, redundant 22
Fitness: max 1(1), min 0.49(2), ave 0.951
Test execution time: sum 25457 ms, max 219 ms, min 67 ms
----------------------------------------------------------------

2023-11-13 17:41:32 [main] [INFO]  KGenProgMain - entered the era of 49th generation.
2023-11-13 17:42:17 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 30 minutes 36 seconds
Variants: generated 400, build-succeeded 220, build-failed 118, syntax-invalid 42, redundant 20
Fitness: max 1(5), min 0.275(1), ave 0.959
Test execution time: sum 22196 ms, max 197 ms, min 69 ms
----------------------------------------------------------------

2023-11-13 17:42:17 [main] [INFO]  KGenProgMain - entered the era of 50th generation.
2023-11-13 17:43:04 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 31 minutes 22 seconds
Variants: generated 400, build-succeeded 223, build-failed 124, syntax-invalid 33, redundant 20
Fitness: max 1(3), min 0.471(2), ave 0.958
Test execution time: sum 22625 ms, max 204 ms, min 66 ms
----------------------------------------------------------------

2023-11-13 17:43:04 [main] [INFO]  KGenProgMain - entered the era of 51st generation.
2023-11-13 17:43:53 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 32 minutes 12 seconds
Variants: generated 400, build-succeeded 233, build-failed 116, syntax-invalid 35, redundant 16
Fitness: max 0.98(195), min 0.176(1), ave 0.949
Test execution time: sum 24527 ms, max 1018 ms, min 67 ms
----------------------------------------------------------------

2023-11-13 17:43:53 [main] [INFO]  KGenProgMain - entered the era of 52nd generation.
2023-11-13 17:44:38 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 32 minutes 57 seconds
Variants: generated 400, build-succeeded 218, build-failed 127, syntax-invalid 42, redundant 13
Fitness: max 0.98(187), min 0.49(1), ave 0.958
Test execution time: sum 21978 ms, max 231 ms, min 69 ms
----------------------------------------------------------------

2023-11-13 17:44:38 [main] [INFO]  KGenProgMain - entered the era of 53rd generation.
2023-11-13 17:45:26 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 33 minutes 45 seconds
Variants: generated 400, build-succeeded 221, build-failed 120, syntax-invalid 43, redundant 16
Fitness: max 1(1), min 0.49(3), ave 0.962
Test execution time: sum 24129 ms, max 324 ms, min 65 ms
----------------------------------------------------------------

2023-11-13 17:45:26 [main] [INFO]  KGenProgMain - entered the era of 54th generation.
2023-11-13 17:46:12 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 34 minutes 31 seconds
Variants: generated 400, build-succeeded 228, build-failed 120, syntax-invalid 27, redundant 25
Fitness: max 0.98(192), min 0.353(1), ave 0.951
Test execution time: sum 23909 ms, max 403 ms, min 66 ms
----------------------------------------------------------------

2023-11-13 17:46:12 [main] [INFO]  KGenProgMain - entered the era of 55th generation.
2023-11-13 17:46:56 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 35 minutes 15 seconds
Variants: generated 400, build-succeeded 217, build-failed 130, syntax-invalid 38, redundant 15
Fitness: max 0.98(183), min 0.49(2), ave 0.956
Test execution time: sum 22500 ms, max 248 ms, min 65 ms
----------------------------------------------------------------

2023-11-13 17:46:56 [main] [INFO]  KGenProgMain - entered the era of 56th generation.
2023-11-13 17:47:46 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 36 minutes 5 seconds
Variants: generated 400, build-succeeded 217, build-failed 113, syntax-invalid 48, redundant 22
Fitness: max 0.98(179), min 0.49(3), ave 0.95
Test execution time: sum 24790 ms, max 1030 ms, min 67 ms
----------------------------------------------------------------

2023-11-13 17:47:46 [main] [INFO]  KGenProgMain - entered the era of 57th generation.
2023-11-13 17:48:42 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 37 minutes 1 seconds
Variants: generated 400, build-succeeded 233, build-failed 115, syntax-invalid 34, redundant 18
Fitness: max 0.98(195), min 0.549(2), ave 0.959
Test execution time: sum 30292 ms, max 3302 ms, min 85 ms
----------------------------------------------------------------

2023-11-13 17:48:42 [main] [INFO]  KGenProgMain - entered the era of 58th generation.
2023-11-13 17:49:33 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 37 minutes 52 seconds
Variants: generated 400, build-succeeded 233, build-failed 114, syntax-invalid 26, redundant 27
Fitness: max 1(1), min 0.294(1), ave 0.95
Test execution time: sum 25105 ms, max 217 ms, min 62 ms
----------------------------------------------------------------

2023-11-13 17:49:33 [main] [INFO]  KGenProgMain - entered the era of 59th generation.
2023-11-13 17:50:24 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 38 minutes 43 seconds
Variants: generated 400, build-succeeded 224, build-failed 122, syntax-invalid 35, redundant 19
Fitness: max 0.98(185), min 0.49(4), ave 0.948
Test execution time: sum 25888 ms, max 336 ms, min 68 ms
----------------------------------------------------------------

2023-11-13 17:50:24 [main] [INFO]  KGenProgMain - entered the era of 60th generation.
2023-11-13 17:51:19 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 39 minutes 38 seconds
Variants: generated 400, build-succeeded 245, build-failed 102, syntax-invalid 28, redundant 25
Fitness: max 0.98(208), min 0.353(1), ave 0.959
Test execution time: sum 28058 ms, max 1311 ms, min 72 ms
----------------------------------------------------------------

2023-11-13 17:51:19 [main] [INFO]  KGenProgMain - entered the era of 61st generation.
2023-11-13 17:52:12 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 40 minutes 31 seconds
Variants: generated 400, build-succeeded 224, build-failed 121, syntax-invalid 41, redundant 14
Fitness: max 1(1), min 0.49(4), ave 0.954
Test execution time: sum 25645 ms, max 2213 ms, min 68 ms
----------------------------------------------------------------

2023-11-13 17:52:12 [main] [INFO]  KGenProgMain - entered the era of 62nd generation.
2023-11-13 17:53:00 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 41 minutes 19 seconds
Variants: generated 400, build-succeeded 222, build-failed 114, syntax-invalid 43, redundant 21
Fitness: max 1(1), min 0.255(1), ave 0.948
Test execution time: sum 23138 ms, max 211 ms, min 66 ms
----------------------------------------------------------------

2023-11-13 17:53:00 [main] [INFO]  KGenProgMain - entered the era of 63rd generation.
2023-11-13 17:53:50 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 42 minutes 9 seconds
Variants: generated 400, build-succeeded 219, build-failed 132, syntax-invalid 30, redundant 19
Fitness: max 0.98(197), min 0.353(1), ave 0.964
Test execution time: sum 25570 ms, max 2745 ms, min 66 ms
----------------------------------------------------------------

2023-11-13 17:53:50 [main] [INFO]  KGenProgMain - entered the era of 64th generation.
2023-11-13 17:54:41 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 43 minutes 0 seconds
Variants: generated 400, build-succeeded 223, build-failed 117, syntax-invalid 39, redundant 21
Fitness: max 1(1), min 0.49(4), ave 0.951
Test execution time: sum 24586 ms, max 231 ms, min 70 ms
----------------------------------------------------------------

2023-11-13 17:54:41 [main] [INFO]  KGenProgMain - entered the era of 65th generation.
2023-11-13 17:55:30 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 43 minutes 49 seconds
Variants: generated 400, build-succeeded 232, build-failed 122, syntax-invalid 30, redundant 16
Fitness: max 0.98(202), min 0.353(1), ave 0.957
Test execution time: sum 24469 ms, max 240 ms, min 65 ms
----------------------------------------------------------------

2023-11-13 17:55:30 [main] [INFO]  KGenProgMain - entered the era of 66th generation.
2023-11-13 17:56:25 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 44 minutes 44 seconds
Variants: generated 400, build-succeeded 245, build-failed 102, syntax-invalid 26, redundant 27
Fitness: max 1(5), min 0.549(2), ave 0.957
Test execution time: sum 27634 ms, max 240 ms, min 69 ms
----------------------------------------------------------------

2023-11-13 17:56:25 [main] [INFO]  KGenProgMain - entered the era of 67th generation.
2023-11-13 17:57:14 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 45 minutes 33 seconds
Variants: generated 400, build-succeeded 236, build-failed 114, syntax-invalid 41, redundant 9
Fitness: max 0.98(186), min 0.431(1), ave 0.948
Test execution time: sum 24361 ms, max 207 ms, min 75 ms
----------------------------------------------------------------

2023-11-13 17:57:14 [main] [INFO]  KGenProgMain - entered the era of 68th generation.
2023-11-13 17:58:07 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 46 minutes 26 seconds
Variants: generated 400, build-succeeded 233, build-failed 126, syntax-invalid 24, redundant 17
Fitness: max 0.98(198), min 0.353(1), ave 0.952
Test execution time: sum 25613 ms, max 1383 ms, min 68 ms
----------------------------------------------------------------

2023-11-13 17:58:07 [main] [INFO]  KGenProgMain - entered the era of 69th generation.
2023-11-13 17:58:56 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 47 minutes 14 seconds
Variants: generated 400, build-succeeded 229, build-failed 112, syntax-invalid 39, redundant 20
Fitness: max 0.98(196), min 0.353(1), ave 0.949
Test execution time: sum 23389 ms, max 202 ms, min 69 ms
----------------------------------------------------------------

2023-11-13 17:58:56 [main] [INFO]  KGenProgMain - entered the era of 70th generation.
2023-11-13 17:59:50 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 48 minutes 9 seconds
Variants: generated 400, build-succeeded 244, build-failed 116, syntax-invalid 29, redundant 11
Fitness: max 1(2), min 0.49(3), ave 0.943
Test execution time: sum 27516 ms, max 1290 ms, min 65 ms
----------------------------------------------------------------

2023-11-13 17:59:50 [main] [INFO]  KGenProgMain - entered the era of 71st generation.
2023-11-13 18:00:44 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 49 minutes 2 seconds
Variants: generated 400, build-succeeded 247, build-failed 111, syntax-invalid 22, redundant 20
Fitness: max 1(1), min 0.157(1), ave 0.954
Test execution time: sum 26744 ms, max 1075 ms, min 64 ms
----------------------------------------------------------------

2023-11-13 18:00:44 [main] [INFO]  KGenProgMain - entered the era of 72nd generation.
2023-11-13 18:01:34 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 49 minutes 53 seconds
Variants: generated 400, build-succeeded 243, build-failed 109, syntax-invalid 26, redundant 22
Fitness: max 0.98(197), min 0.137(1), ave 0.946
Test execution time: sum 25309 ms, max 236 ms, min 67 ms
----------------------------------------------------------------

2023-11-13 18:01:34 [main] [INFO]  KGenProgMain - entered the era of 73rd generation.
2023-11-13 18:02:25 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 50 minutes 44 seconds
Variants: generated 400, build-succeeded 237, build-failed 111, syntax-invalid 26, redundant 26
Fitness: max 1(1), min 0.294(1), ave 0.954
Test execution time: sum 24916 ms, max 210 ms, min 66 ms
----------------------------------------------------------------

2023-11-13 18:02:25 [main] [INFO]  KGenProgMain - entered the era of 74th generation.
2023-11-13 18:03:13 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 51 minutes 32 seconds
Variants: generated 400, build-succeeded 221, build-failed 128, syntax-invalid 32, redundant 19
Fitness: max 0.98(184), min 0.314(1), ave 0.948
Test execution time: sum 23967 ms, max 2929 ms, min 66 ms
----------------------------------------------------------------

2023-11-13 18:03:13 [main] [INFO]  KGenProgMain - entered the era of 75th generation.
2023-11-13 18:04:02 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 52 minutes 21 seconds
Variants: generated 400, build-succeeded 234, build-failed 118, syntax-invalid 27, redundant 21
Fitness: max 1(1), min 0.353(1), ave 0.956
Test execution time: sum 24762 ms, max 296 ms, min 54 ms
----------------------------------------------------------------

2023-11-13 18:04:02 [main] [INFO]  KGenProgMain - entered the era of 76th generation.
2023-11-13 18:04:49 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 53 minutes 8 seconds
Variants: generated 400, build-succeeded 227, build-failed 136, syntax-invalid 19, redundant 18
Fitness: max 0.98(192), min 0.216(1), ave 0.956
Test execution time: sum 22864 ms, max 332 ms, min 60 ms
----------------------------------------------------------------

2023-11-13 18:04:49 [main] [INFO]  KGenProgMain - entered the era of 77th generation.
2023-11-13 18:05:41 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 53 minutes 59 seconds
Variants: generated 400, build-succeeded 257, build-failed 109, syntax-invalid 14, redundant 20
Fitness: max 1(1), min 0.255(1), ave 0.952
Test execution time: sum 26379 ms, max 293 ms, min 54 ms
----------------------------------------------------------------

2023-11-13 18:05:41 [main] [INFO]  KGenProgMain - entered the era of 78th generation.
2023-11-13 18:06:28 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 54 minutes 47 seconds
Variants: generated 400, build-succeeded 234, build-failed 108, syntax-invalid 34, redundant 24
Fitness: max 0.98(195), min 0.353(1), ave 0.955
Test execution time: sum 25302 ms, max 325 ms, min 61 ms
----------------------------------------------------------------

2023-11-13 18:06:28 [main] [INFO]  KGenProgMain - entered the era of 79th generation.
2023-11-13 18:07:14 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 55 minutes 32 seconds
Variants: generated 400, build-succeeded 229, build-failed 131, syntax-invalid 27, redundant 13
Fitness: max 0.98(203), min 0.49(2), ave 0.963
Test execution time: sum 24055 ms, max 399 ms, min 65 ms
----------------------------------------------------------------

2023-11-13 18:07:14 [main] [INFO]  KGenProgMain - entered the era of 80th generation.
2023-11-13 18:07:55 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 56 minutes 14 seconds
Variants: generated 400, build-succeeded 224, build-failed 122, syntax-invalid 37, redundant 17
Fitness: max 1(1), min 0.49(2), ave 0.953
Test execution time: sum 20720 ms, max 220 ms, min 64 ms
----------------------------------------------------------------

2023-11-13 18:07:55 [main] [INFO]  KGenProgMain - entered the era of 81st generation.
2023-11-13 18:08:42 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 57 minutes 1 seconds
Variants: generated 400, build-succeeded 231, build-failed 107, syntax-invalid 45, redundant 17
Fitness: max 0.98(191), min 0.353(1), ave 0.952
Test execution time: sum 24034 ms, max 2280 ms, min 60 ms
----------------------------------------------------------------

2023-11-13 18:08:42 [main] [INFO]  KGenProgMain - entered the era of 82nd generation.
2023-11-13 18:09:25 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 57 minutes 44 seconds
Variants: generated 400, build-succeeded 222, build-failed 117, syntax-invalid 41, redundant 20
Fitness: max 0.98(187), min 0.49(2), ave 0.951
Test execution time: sum 20192 ms, max 196 ms, min 55 ms
----------------------------------------------------------------

2023-11-13 18:09:25 [main] [INFO]  KGenProgMain - entered the era of 83rd generation.
2023-11-13 18:10:06 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 58 minutes 25 seconds
Variants: generated 400, build-succeeded 224, build-failed 115, syntax-invalid 42, redundant 19
Fitness: max 1(1), min 0.49(4), ave 0.953
Test execution time: sum 19859 ms, max 175 ms, min 57 ms
----------------------------------------------------------------

2023-11-13 18:10:06 [main] [INFO]  KGenProgMain - entered the era of 84th generation.
2023-11-13 18:10:52 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 59 minutes 11 seconds
Variants: generated 400, build-succeeded 222, build-failed 112, syntax-invalid 50, redundant 16
Fitness: max 0.98(188), min 0.333(1), ave 0.956
Test execution time: sum 22681 ms, max 1483 ms, min 62 ms
----------------------------------------------------------------

2023-11-13 18:10:52 [main] [INFO]  KGenProgMain - entered the era of 85th generation.
2023-11-13 18:11:40 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 59 minutes 59 seconds
Variants: generated 400, build-succeeded 219, build-failed 125, syntax-invalid 42, redundant 14
Fitness: max 0.98(178), min 0.353(1), ave 0.948
Test execution time: sum 24449 ms, max 613 ms, min 56 ms
----------------------------------------------------------------

2023-11-13 18:11:40 [main] [INFO]  KGenProgMain - entered the era of 86th generation.
2023-11-13 18:12:30 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 49 seconds
Variants: generated 400, build-succeeded 225, build-failed 118, syntax-invalid 41, redundant 16
Fitness: max 1(1), min 0.49(3), ave 0.949
Test execution time: sum 25761 ms, max 422 ms, min 72 ms
----------------------------------------------------------------

2023-11-13 18:12:30 [main] [INFO]  KGenProgMain - entered the era of 87th generation.
2023-11-13 18:13:12 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 1 minutes 30 seconds
Variants: generated 400, build-succeeded 212, build-failed 119, syntax-invalid 54, redundant 15
Fitness: max 0.98(179), min 0.137(1), ave 0.947
Test execution time: sum 19453 ms, max 245 ms, min 56 ms
----------------------------------------------------------------

2023-11-13 18:13:12 [main] [INFO]  KGenProgMain - entered the era of 88th generation.
2023-11-13 18:14:00 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 2 minutes 18 seconds
Variants: generated 400, build-succeeded 216, build-failed 125, syntax-invalid 40, redundant 19
Fitness: max 1(1), min 0.49(2), ave 0.955
Test execution time: sum 23235 ms, max 1184 ms, min 57 ms
----------------------------------------------------------------

2023-11-13 18:14:00 [main] [INFO]  KGenProgMain - entered the era of 89th generation.
2023-11-13 18:14:56 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 3 minutes 15 seconds
Variants: generated 400, build-succeeded 231, build-failed 109, syntax-invalid 37, redundant 23
Fitness: max 0.98(194), min 0.176(1), ave 0.944
Test execution time: sum 28757 ms, max 1981 ms, min 79 ms
----------------------------------------------------------------

2023-11-13 18:14:56 [main] [INFO]  KGenProgMain - entered the era of 90th generation.
2023-11-13 18:15:46 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 4 minutes 5 seconds
Variants: generated 400, build-succeeded 214, build-failed 127, syntax-invalid 42, redundant 17
Fitness: max 0.98(188), min 0.137(1), ave 0.958
Test execution time: sum 23589 ms, max 250 ms, min 70 ms
----------------------------------------------------------------

2023-11-13 18:15:46 [main] [INFO]  KGenProgMain - entered the era of 91st generation.
2023-11-13 18:16:36 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 4 minutes 55 seconds
Variants: generated 400, build-succeeded 225, build-failed 123, syntax-invalid 37, redundant 15
Fitness: max 0.98(188), min 0.235(1), ave 0.953
Test execution time: sum 26085 ms, max 1562 ms, min 65 ms
----------------------------------------------------------------

2023-11-13 18:16:36 [main] [INFO]  KGenProgMain - entered the era of 92nd generation.
2023-11-13 18:17:27 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 5 minutes 46 seconds
Variants: generated 400, build-succeeded 232, build-failed 114, syntax-invalid 42, redundant 12
Fitness: max 0.98(195), min 0.137(1), ave 0.95
Test execution time: sum 24896 ms, max 273 ms, min 60 ms
----------------------------------------------------------------

2023-11-13 18:17:27 [main] [INFO]  KGenProgMain - entered the era of 93rd generation.
2023-11-13 18:18:14 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 6 minutes 33 seconds
Variants: generated 400, build-succeeded 220, build-failed 114, syntax-invalid 45, redundant 21
Fitness: max 0.98(188), min 0.353(1), ave 0.958
Test execution time: sum 24704 ms, max 406 ms, min 64 ms
----------------------------------------------------------------

2023-11-13 18:18:14 [main] [INFO]  KGenProgMain - entered the era of 94th generation.
2023-11-13 18:19:00 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 7 minutes 19 seconds
Variants: generated 400, build-succeeded 220, build-failed 124, syntax-invalid 33, redundant 23
Fitness: max 0.98(190), min 0.569(1), ave 0.962
Test execution time: sum 23389 ms, max 268 ms, min 70 ms
----------------------------------------------------------------

2023-11-13 18:19:00 [main] [INFO]  KGenProgMain - entered the era of 95th generation.
2023-11-13 18:19:50 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 8 minutes 8 seconds
Variants: generated 400, build-succeeded 223, build-failed 123, syntax-invalid 41, redundant 13
Fitness: max 0.98(191), min 0.49(1), ave 0.957
Test execution time: sum 26950 ms, max 545 ms, min 77 ms
----------------------------------------------------------------

2023-11-13 18:19:50 [main] [INFO]  KGenProgMain - entered the era of 96th generation.
2023-11-13 18:20:48 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 9 minutes 7 seconds
Variants: generated 400, build-succeeded 212, build-failed 129, syntax-invalid 43, redundant 16
Fitness: max 0.98(180), min 0.49(2), ave 0.962
Test execution time: sum 29238 ms, max 1874 ms, min 69 ms
----------------------------------------------------------------

2023-11-13 18:20:48 [main] [INFO]  KGenProgMain - entered the era of 97th generation.
2023-11-13 18:21:36 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 9 minutes 55 seconds
Variants: generated 400, build-succeeded 226, build-failed 116, syntax-invalid 37, redundant 21
Fitness: max 1(1), min 0.49(4), ave 0.958
Test execution time: sum 22750 ms, max 337 ms, min 64 ms
----------------------------------------------------------------

2023-11-13 18:21:36 [main] [INFO]  KGenProgMain - entered the era of 98th generation.
2023-11-13 18:22:24 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 10 minutes 43 seconds
Variants: generated 400, build-succeeded 230, build-failed 122, syntax-invalid 30, redundant 18
Fitness: max 0.98(199), min 0.569(1), ave 0.96
Test execution time: sum 25489 ms, max 317 ms, min 64 ms
----------------------------------------------------------------

2023-11-13 18:22:24 [main] [INFO]  KGenProgMain - entered the era of 99th generation.
2023-11-13 18:23:16 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 11 minutes 35 seconds
Variants: generated 400, build-succeeded 229, build-failed 122, syntax-invalid 29, redundant 20
Fitness: max 0.98(202), min 0.667(2), ave 0.964
Test execution time: sum 26072 ms, max 355 ms, min 72 ms
----------------------------------------------------------------

2023-11-13 18:23:16 [main] [INFO]  KGenProgMain - entered the era of 100th generation.
2023-11-13 18:24:14 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 12 minutes 33 seconds
Variants: generated 400, build-succeeded 236, build-failed 113, syntax-invalid 32, redundant 19
Fitness: max 0.98(211), min 0.216(1), ave 0.957
Test execution time: sum 29082 ms, max 2545 ms, min 63 ms
----------------------------------------------------------------

2023-11-13 18:24:14 [main] [INFO]  KGenProgMain - entered the era of 101st generation.
2023-11-13 18:25:09 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 13 minutes 28 seconds
Variants: generated 400, build-succeeded 242, build-failed 115, syntax-invalid 26, redundant 17
Fitness: max 0.98(213), min 0.49(4), ave 0.958
Test execution time: sum 27200 ms, max 259 ms, min 72 ms
----------------------------------------------------------------

2023-11-13 18:25:09 [main] [INFO]  KGenProgMain - entered the era of 102nd generation.
2023-11-13 18:25:58 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 14 minutes 17 seconds
Variants: generated 400, build-succeeded 238, build-failed 114, syntax-invalid 29, redundant 19
Fitness: max 1(1), min 0.353(1), ave 0.963
Test execution time: sum 23893 ms, max 319 ms, min 59 ms
----------------------------------------------------------------

2023-11-13 18:25:58 [main] [INFO]  KGenProgMain - entered the era of 103rd generation.
2023-11-13 18:26:49 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 15 minutes 8 seconds
Variants: generated 400, build-succeeded 245, build-failed 113, syntax-invalid 22, redundant 20
Fitness: max 1(1), min 0.471(1), ave 0.964
Test execution time: sum 25668 ms, max 2267 ms, min 57 ms
----------------------------------------------------------------

2023-11-13 18:26:49 [main] [INFO]  KGenProgMain - entered the era of 104th generation.
2023-11-13 18:27:41 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 16 minutes 0 seconds
Variants: generated 400, build-succeeded 237, build-failed 129, syntax-invalid 24, redundant 10
Fitness: max 0.98(217), min 0.216(1), ave 0.965
Test execution time: sum 24780 ms, max 1606 ms, min 55 ms
----------------------------------------------------------------

2023-11-13 18:27:41 [main] [INFO]  KGenProgMain - entered the era of 105th generation.
2023-11-13 18:28:30 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 16 minutes 49 seconds
Variants: generated 400, build-succeeded 233, build-failed 133, syntax-invalid 26, redundant 8
Fitness: max 1(2), min 0.294(1), ave 0.962
Test execution time: sum 22896 ms, max 351 ms, min 61 ms
----------------------------------------------------------------

2023-11-13 18:28:30 [main] [INFO]  KGenProgMain - entered the era of 106th generation.
2023-11-13 18:29:22 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 17 minutes 41 seconds
Variants: generated 400, build-succeeded 244, build-failed 107, syntax-invalid 30, redundant 19
Fitness: max 1(1), min 0.49(2), ave 0.961
Test execution time: sum 25179 ms, max 376 ms, min 63 ms
----------------------------------------------------------------

2023-11-13 18:29:22 [main] [INFO]  KGenProgMain - entered the era of 107th generation.
2023-11-13 18:30:12 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 18 minutes 31 seconds
Variants: generated 400, build-succeeded 246, build-failed 118, syntax-invalid 26, redundant 10
Fitness: max 1(2), min 0.49(3), ave 0.96
Test execution time: sum 24503 ms, max 204 ms, min 60 ms
----------------------------------------------------------------

2023-11-13 18:30:12 [main] [INFO]  KGenProgMain - entered the era of 108th generation.
2023-11-13 18:30:35 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 18 minutes 53 seconds
Variants: generated 237, build-succeeded 81, build-failed 122, syntax-invalid 12, redundant 22
Fitness: max 1(1), min 0.49(1), ave 0.947
Test execution time: sum 7898 ms, max 220 ms, min 66 ms
----------------------------------------------------------------

2023-11-13 18:30:35 [main] [INFO]  KGenProgMain - GA stopped
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v566)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v566)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v566)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -973,7 +973,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v566)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v566)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v566)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v566)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v732)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v732)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v732)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -967,13 +967,9 @@
      *         a long since a max-len array will require Integer.MAX_VALUE + 33%.
      */
     private static long getEncodeLength(byte[] pArray, int chunkSize, byte[] chunkSeparator) {
-        // base64 always encodes to multiples of 4.
-        chunkSize = (chunkSize / 4) * 4;
-
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v732)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v732)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v732)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v732)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v1013)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v1013)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v1013)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -409,7 +409,6 @@
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
-                buffer = null;
             }
             return len;
         }
@@ -973,7 +972,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v1013)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v1013)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v1013)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v1013)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v1437)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v1437)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v1437)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -973,11 +973,9 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
-            len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
                 len += chunkSeparator.length;
             }
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v1437)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v1437)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v1437)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v1437)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v1468)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v1468)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v1468)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -339,6 +339,7 @@
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
             this.encodeSize = 4 + lineSeparator.length;
+			resizeBuffer();
         } else {
             this.encodeSize = 4;
         }
@@ -973,7 +974,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v1468)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v1468)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v1468)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v1468)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v1563)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v1563)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v1563)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -382,7 +382,6 @@
     private void resizeBuffer() {
         if (buffer == null) {
             buffer = new byte[DEFAULT_BUFFER_SIZE];
-            pos = 0;
             readPos = 0;
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
@@ -973,7 +972,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v1563)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v1563)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v1563)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v1563)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v1834)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v1834)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v1834)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -451,8 +451,9 @@
                     buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
+                        readPos = 0;
+						buffer[pos++] = PAD;
                         buffer[pos++] = PAD;
-                        buffer[pos++] = PAD;
                     }
                     break;
 
@@ -973,7 +974,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
@@ -1053,7 +1053,6 @@
         buffer = null;
         pos = 0;
         readPos = 0;
-        currentLinePos = 0;
         modulus = 0;
         eof = false;
     }
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v1834)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v1834)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v1834)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v1834)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v1877)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v1877)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v1877)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -409,7 +409,6 @@
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
-                buffer = null;
             }
             return len;
         }
@@ -979,7 +978,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
@@ -1053,7 +1051,6 @@
         buffer = null;
         pos = 0;
         readPos = 0;
-        currentLinePos = 0;
         modulus = 0;
         eof = false;
     }
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v1877)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v1877)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v1877)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v1877)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v1900)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v1900)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v1900)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -409,7 +409,6 @@
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
-                buffer = null;
             }
             return len;
         }
@@ -979,7 +978,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v1900)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v1900)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v1900)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v1900)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v1923)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v1923)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v1923)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -343,6 +343,7 @@
             this.encodeSize = 4;
         }
         this.decodeSize = this.encodeSize - 1;
+		eof = true;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
@@ -973,7 +974,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v1923)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v1923)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v1923)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v1923)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v1946)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v1946)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v1946)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -491,7 +491,8 @@
                     buffer[pos++] = encodeTable[x & MASK_6BITS];
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
-                        System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                        byte[] buf = new byte[pos - readPos];
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
                         currentLinePos = 0;
                     }
@@ -973,7 +974,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
@@ -1053,7 +1053,6 @@
         buffer = null;
         pos = 0;
         readPos = 0;
-        currentLinePos = 0;
         modulus = 0;
         eof = false;
     }
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v1946)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v1946)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v1946)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v1946)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v1986)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v1986)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v1986)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -343,6 +343,7 @@
             this.encodeSize = 4;
         }
         this.decodeSize = this.encodeSize - 1;
+		eof = true;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
@@ -973,7 +974,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
@@ -1053,7 +1053,6 @@
         buffer = null;
         pos = 0;
         readPos = 0;
-        currentLinePos = 0;
         modulus = 0;
         eof = false;
     }
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v1986)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v1986)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v1986)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v1986)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v2060)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v2060)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v2060)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -343,6 +343,7 @@
             this.encodeSize = 4;
         }
         this.decodeSize = this.encodeSize - 1;
+		eof = true;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
@@ -972,9 +973,7 @@
 
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
-        if (mod != 0) {
-            len += 4 - mod;
-        }
+        if (mod != 0)
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v2060)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v2060)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v2060)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v2060)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v2222)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v2222)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v2222)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -409,7 +409,6 @@
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
-                buffer = null;
             }
             return len;
         }
@@ -977,9 +976,7 @@
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
-            len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v2222)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v2222)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v2222)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v2222)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v2224)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v2224)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v2224)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -826,7 +826,8 @@
 
         long len = getEncodeLength(binaryData, MIME_CHUNK_SIZE, CHUNK_SEPARATOR);
         if (len > maxResultSize) {
-            throw new IllegalArgumentException("Input array too big, the output array would be bigger (" +
+            int readLen = 0;
+			throw new IllegalArgumentException("Input array too big, the output array would be bigger (" +
                 len +
                 ") than the specified maxium size of " +
                 maxResultSize);
@@ -973,7 +974,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v2224)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v2224)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v2224)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v2224)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v2308)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v2308)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v2308)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -343,6 +343,7 @@
             this.encodeSize = 4;
         }
         this.decodeSize = this.encodeSize - 1;
+		eof = true;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
@@ -494,6 +495,7 @@
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
                         currentLinePos = 0;
+						byte[] buf = new byte[pos - readPos];
                     }
                 }
             }
@@ -973,7 +975,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
@@ -1053,7 +1054,6 @@
         buffer = null;
         pos = 0;
         readPos = 0;
-        currentLinePos = 0;
         modulus = 0;
         eof = false;
     }
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v2308)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v2308)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v2308)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v2308)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v2346)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v2346)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v2346)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -826,7 +826,8 @@
 
         long len = getEncodeLength(binaryData, MIME_CHUNK_SIZE, CHUNK_SEPARATOR);
         if (len > maxResultSize) {
-            throw new IllegalArgumentException("Input array too big, the output array would be bigger (" +
+            int readLen = 0;
+			throw new IllegalArgumentException("Input array too big, the output array would be bigger (" +
                 len +
                 ") than the specified maxium size of " +
                 maxResultSize);
@@ -973,7 +974,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
@@ -1053,7 +1053,6 @@
         buffer = null;
         pos = 0;
         readPos = 0;
-        currentLinePos = 0;
         modulus = 0;
         eof = false;
     }
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v2346)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v2346)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v2346)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v2346)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v2357)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v2357)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v2357)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -407,9 +407,7 @@
         if (buffer != null) {
             int len = Math.min(avail(), bAvail);
             System.arraycopy(buffer, readPos, b, bPos, len);
-            readPos += len;
             if (readPos >= pos) {
-                buffer = null;
             }
             return len;
         }
@@ -973,7 +971,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v2357)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v2357)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v2357)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v2357)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v2363)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v2363)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v2363)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -407,7 +407,6 @@
         if (buffer != null) {
             int len = Math.min(avail(), bAvail);
             System.arraycopy(buffer, readPos, b, bPos, len);
-            readPos += len;
             if (readPos >= pos) {
                 buffer = null;
             }
@@ -973,7 +972,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
@@ -1053,7 +1051,6 @@
         buffer = null;
         pos = 0;
         readPos = 0;
-        currentLinePos = 0;
         modulus = 0;
         eof = false;
     }
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v2363)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v2363)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v2363)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v2363)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v2599)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v2599)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v2599)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -339,6 +339,7 @@
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
             this.encodeSize = 4 + lineSeparator.length;
+			resizeBuffer();
         } else {
             this.encodeSize = 4;
         }
@@ -409,7 +410,6 @@
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
-                buffer = null;
             }
             return len;
         }
@@ -973,7 +973,7 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
+            boolean lenChunksPerfectly = len % chunkSize == 0;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
@@ -1053,7 +1053,6 @@
         buffer = null;
         pos = 0;
         readPos = 0;
-        currentLinePos = 0;
         modulus = 0;
         eof = false;
     }
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v2599)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v2599)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v2599)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v2599)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v2649)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v2649)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v2649)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -343,6 +343,8 @@
             this.encodeSize = 4;
         }
         this.decodeSize = this.encodeSize - 1;
+		eof = true;
+		eof = true;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
@@ -979,7 +981,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v2649)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v2649)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v2649)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v2649)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v2710)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v2710)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v2710)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -382,7 +382,6 @@
     private void resizeBuffer() {
         if (buffer == null) {
             buffer = new byte[DEFAULT_BUFFER_SIZE];
-            pos = 0;
             readPos = 0;
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
@@ -451,8 +450,9 @@
                     buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
+                        readPos = 0;
+						buffer[pos++] = PAD;
                         buffer[pos++] = PAD;
-                        buffer[pos++] = PAD;
                     }
                     break;
 
@@ -973,7 +973,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v2710)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v2710)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v2710)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v2710)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v2743)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v2743)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v2743)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -973,13 +973,18 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
+            {
+				boolean lenChunksPerfectly = len % chunkSize == 0;
+				len += (len / chunkSize) * chunkSeparator.length;
+				if (!lenChunksPerfectly) {
+					len += chunkSeparator.length;
+				}
+			}
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v2743)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v2743)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v2743)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v2743)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v2757)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v2757)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v2757)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -494,6 +494,7 @@
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
                         currentLinePos = 0;
+						byte[] buf = new byte[pos - readPos];
                     }
                 }
             }
@@ -973,7 +974,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
@@ -1053,7 +1053,6 @@
         buffer = null;
         pos = 0;
         readPos = 0;
-        currentLinePos = 0;
         modulus = 0;
         eof = false;
     }
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v2757)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v2757)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v2757)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v2757)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v2924)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v2924)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v2924)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -441,7 +441,6 @@
         // inAvail < 0 is how we're informed of EOF in the underlying data we're
         // encoding.
         if (inAvail < 0) {
-            eof = true;
             if (buffer == null || buffer.length - pos < encodeSize) {
                 resizeBuffer();
             }
@@ -967,14 +966,9 @@
      *         a long since a max-len array will require Integer.MAX_VALUE + 33%.
      */
     private static long getEncodeLength(byte[] pArray, int chunkSize, byte[] chunkSeparator) {
-        // base64 always encodes to multiples of 4.
-        chunkSize = (chunkSize / 4) * 4;
-
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
-        if (mod != 0) {
-            len += 4 - mod;
-        }
+        if (mod != 0)
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v2924)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v2924)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v2924)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v2924)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v3005)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v3005)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v3005)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -409,7 +409,6 @@
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
-                buffer = null;
             }
             return len;
         }
@@ -448,6 +447,7 @@
             switch (modulus) {
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
+				byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
                     buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
@@ -979,7 +979,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v3005)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v3005)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v3005)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v3005)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v3065)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v3065)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v3065)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -343,6 +343,7 @@
             this.encodeSize = 4;
         }
         this.decodeSize = this.encodeSize - 1;
+		eof = true;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
@@ -967,9 +968,6 @@
      *         a long since a max-len array will require Integer.MAX_VALUE + 33%.
      */
     private static long getEncodeLength(byte[] pArray, int chunkSize, byte[] chunkSeparator) {
-        // base64 always encodes to multiples of 4.
-        chunkSize = (chunkSize / 4) * 4;
-
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
@@ -979,7 +977,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v3065)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v3065)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v3065)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v3065)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v3389)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v3389)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v3389)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -407,7 +407,6 @@
         if (buffer != null) {
             int len = Math.min(avail(), bAvail);
             System.arraycopy(buffer, readPos, b, bPos, len);
-            readPos += len;
             if (readPos >= pos) {
                 buffer = null;
             }
@@ -978,8 +977,7 @@
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
-            if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
+            if (mod != 0) {
             }
         }
         return len;
@@ -1053,7 +1051,6 @@
         buffer = null;
         pos = 0;
         readPos = 0;
-        currentLinePos = 0;
         modulus = 0;
         eof = false;
     }
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v3389)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v3389)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v3389)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v3389)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v3510)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v3510)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v3510)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -339,6 +339,7 @@
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
             this.encodeSize = 4 + lineSeparator.length;
+			resizeBuffer();
         } else {
             this.encodeSize = 4;
         }
@@ -973,11 +974,9 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
-            len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
                 len += chunkSeparator.length;
             }
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v3510)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v3510)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v3510)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v3510)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v3813)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v3813)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v3813)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -339,6 +339,7 @@
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
             this.encodeSize = 4 + lineSeparator.length;
+			resizeBuffer();
         } else {
             this.encodeSize = 4;
         }
@@ -826,7 +827,8 @@
 
         long len = getEncodeLength(binaryData, MIME_CHUNK_SIZE, CHUNK_SEPARATOR);
         if (len > maxResultSize) {
-            throw new IllegalArgumentException("Input array too big, the output array would be bigger (" +
+            int readLen = 0;
+			throw new IllegalArgumentException("Input array too big, the output array would be bigger (" +
                 len +
                 ") than the specified maxium size of " +
                 maxResultSize);
@@ -973,7 +975,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v3813)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v3813)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v3813)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v3813)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v3880)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v3880)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v3880)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -339,6 +339,7 @@
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
             this.encodeSize = 4 + lineSeparator.length;
+			resizeBuffer();
         } else {
             this.encodeSize = 4;
         }
@@ -973,7 +974,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
@@ -1051,7 +1051,6 @@
      */
     private void reset() {
         buffer = null;
-        pos = 0;
         readPos = 0;
         currentLinePos = 0;
         modulus = 0;
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v3880)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v3880)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v3880)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v3880)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v3891)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v3891)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v3891)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -407,7 +407,6 @@
         if (buffer != null) {
             int len = Math.min(avail(), bAvail);
             System.arraycopy(buffer, readPos, b, bPos, len);
-            readPos += len;
             if (readPos >= pos) {
                 buffer = null;
             }
@@ -967,13 +966,9 @@
      *         a long since a max-len array will require Integer.MAX_VALUE + 33%.
      */
     private static long getEncodeLength(byte[] pArray, int chunkSize, byte[] chunkSeparator) {
-        // base64 always encodes to multiples of 4.
-        chunkSize = (chunkSize / 4) * 4;
-
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v3891)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v3891)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v3891)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v3891)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v4203)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v4203)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v4203)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -493,6 +493,7 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						currentLinePos += 4;
                         currentLinePos = 0;
                     }
                 }
@@ -973,11 +974,9 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
-            len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
                 len += chunkSeparator.length;
             }
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v4203)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v4203)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v4203)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v4203)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v4218)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v4218)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v4218)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -343,6 +343,7 @@
             this.encodeSize = 4;
         }
         this.decodeSize = this.encodeSize - 1;
+		eof = true;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
@@ -451,8 +452,9 @@
                     buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
+                        readPos = 0;
+						buffer[pos++] = PAD;
                         buffer[pos++] = PAD;
-                        buffer[pos++] = PAD;
                     }
                     break;
 
@@ -973,7 +975,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v4218)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v4218)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v4218)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v4218)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v4232)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v4232)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v4232)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -494,6 +494,7 @@
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
                         currentLinePos = 0;
+						byte[] buf = new byte[pos - readPos];
                     }
                 }
             }
@@ -973,7 +974,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
@@ -1051,7 +1051,8 @@
      */
     private void reset() {
         buffer = null;
-        pos = 0;
+        resizeBuffer();
+		pos = 0;
         readPos = 0;
         currentLinePos = 0;
         modulus = 0;
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v4232)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v4232)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v4232)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v4232)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v4323)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v4323)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v4323)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -383,7 +383,6 @@
         if (buffer == null) {
             buffer = new byte[DEFAULT_BUFFER_SIZE];
             pos = 0;
-            readPos = 0;
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
             System.arraycopy(buffer, 0, b, 0, buffer.length);
@@ -409,7 +408,6 @@
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
-                buffer = null;
             }
             return len;
         }
@@ -973,7 +971,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
@@ -1053,7 +1050,6 @@
         buffer = null;
         pos = 0;
         readPos = 0;
-        currentLinePos = 0;
         modulus = 0;
         eof = false;
     }
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v4323)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v4323)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v4323)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v4323)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v4380)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v4380)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v4380)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -338,7 +338,8 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = 4 + lineSeparator.length;
+            buffer = null;
+			this.encodeSize = 4 + lineSeparator.length;
         } else {
             this.encodeSize = 4;
         }
@@ -448,6 +449,7 @@
             switch (modulus) {
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
+				byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
                     buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
@@ -973,11 +975,9 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
-            len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
                 len += chunkSeparator.length;
             }
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v4380)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v4380)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v4380)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v4380)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v4908)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v4908)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v4908)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -343,6 +343,7 @@
             this.encodeSize = 4;
         }
         this.decodeSize = this.encodeSize - 1;
+		eof = true;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
@@ -409,7 +410,7 @@
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
-                buffer = null;
+                eof = true;
             }
             return len;
         }
@@ -967,9 +968,6 @@
      *         a long since a max-len array will require Integer.MAX_VALUE + 33%.
      */
     private static long getEncodeLength(byte[] pArray, int chunkSize, byte[] chunkSeparator) {
-        // base64 always encodes to multiples of 4.
-        chunkSize = (chunkSize / 4) * 4;
-
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
@@ -979,7 +977,7 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
+                return len;
             }
         }
         return len;
@@ -1053,7 +1051,6 @@
         buffer = null;
         pos = 0;
         readPos = 0;
-        currentLinePos = 0;
         modulus = 0;
         eof = false;
     }
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v4908)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v4908)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v4908)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v4908)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v5617)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v5617)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v5617)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -493,6 +493,7 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						currentLinePos += 4;
                         currentLinePos = 0;
                     }
                 }
@@ -967,14 +968,9 @@
      *         a long since a max-len array will require Integer.MAX_VALUE + 33%.
      */
     private static long getEncodeLength(byte[] pArray, int chunkSize, byte[] chunkSeparator) {
-        // base64 always encodes to multiples of 4.
-        chunkSize = (chunkSize / 4) * 4;
-
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
-        if (mod != 0) {
-            len += 4 - mod;
-        }
+        if (mod != 0)
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
@@ -1051,7 +1047,6 @@
      */
     private void reset() {
         buffer = null;
-        pos = 0;
         readPos = 0;
         currentLinePos = 0;
         modulus = 0;
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v5617)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v5617)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v5617)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v5617)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v5722)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v5722)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v5722)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -451,8 +451,9 @@
                     buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
+                        readPos = 0;
+						buffer[pos++] = PAD;
                         buffer[pos++] = PAD;
-                        buffer[pos++] = PAD;
                     }
                     break;
 
@@ -484,6 +485,7 @@
                     b += 256;
                 }
                 x = (x << 8) + b;
+				byte[] buf = new byte[pos - readPos];
                 if (0 == modulus) {
                     buffer[pos++] = encodeTable[(x >> 18) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x >> 12) & MASK_6BITS];
@@ -826,7 +828,8 @@
 
         long len = getEncodeLength(binaryData, MIME_CHUNK_SIZE, CHUNK_SEPARATOR);
         if (len > maxResultSize) {
-            throw new IllegalArgumentException("Input array too big, the output array would be bigger (" +
+            int readLen = 0;
+			throw new IllegalArgumentException("Input array too big, the output array would be bigger (" +
                 len +
                 ") than the specified maxium size of " +
                 maxResultSize);
@@ -979,7 +982,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
@@ -1052,7 +1054,7 @@
     private void reset() {
         buffer = null;
         pos = 0;
-        readPos = 0;
+        eof = false;
         currentLinePos = 0;
         modulus = 0;
         eof = false;
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v5722)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v5722)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v5722)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v5722)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v6118)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v6118)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v6118)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -339,6 +339,7 @@
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
             this.encodeSize = 4 + lineSeparator.length;
+			resizeBuffer();
         } else {
             this.encodeSize = 4;
         }
@@ -407,7 +408,6 @@
         if (buffer != null) {
             int len = Math.min(avail(), bAvail);
             System.arraycopy(buffer, readPos, b, bPos, len);
-            readPos += len;
             if (readPos >= pos) {
                 buffer = null;
             }
@@ -973,7 +973,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
@@ -1051,9 +1050,9 @@
      */
     private void reset() {
         buffer = null;
-        pos = 0;
+        resizeBuffer();
+		pos = 0;
         readPos = 0;
-        currentLinePos = 0;
         modulus = 0;
         eof = false;
     }
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v6118)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v6118)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v6118)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v6118)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v6592)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v6592)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v6592)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -407,11 +407,9 @@
         if (buffer != null) {
             int len = Math.min(avail(), bAvail);
             System.arraycopy(buffer, readPos, b, bPos, len);
-            readPos += len;
             if (readPos >= pos) {
                 buffer = null;
             }
-            return len;
         }
         return eof ? -1 : 0;
     }
@@ -441,7 +439,6 @@
         // inAvail < 0 is how we're informed of EOF in the underlying data we're
         // encoding.
         if (inAvail < 0) {
-            eof = true;
             if (buffer == null || buffer.length - pos < encodeSize) {
                 resizeBuffer();
             }
@@ -979,7 +976,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
@@ -1053,7 +1049,6 @@
         buffer = null;
         pos = 0;
         readPos = 0;
-        currentLinePos = 0;
         modulus = 0;
         eof = false;
     }
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v6592)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v6592)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v6592)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v6592)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v7129)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v7129)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v7129)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -343,6 +343,7 @@
             this.encodeSize = 4;
         }
         this.decodeSize = this.encodeSize - 1;
+		eof = true;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
@@ -409,9 +410,10 @@
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
-                buffer = null;
+                eof = true;
             }
-            return len;
+            buffer = null;
+			return len;
         }
         return eof ? -1 : 0;
     }
@@ -973,7 +975,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
@@ -1053,7 +1054,6 @@
         buffer = null;
         pos = 0;
         readPos = 0;
-        currentLinePos = 0;
         modulus = 0;
         eof = false;
     }
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v7129)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v7129)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v7129)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v7129)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v7676)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v7676)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v7676)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -343,6 +343,7 @@
             this.encodeSize = 4;
         }
         this.decodeSize = this.encodeSize - 1;
+		eof = true;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
@@ -493,6 +494,7 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						readPos = 0;
                         currentLinePos = 0;
                     }
                 }
@@ -967,13 +969,9 @@
      *         a long since a max-len array will require Integer.MAX_VALUE + 33%.
      */
     private static long getEncodeLength(byte[] pArray, int chunkSize, byte[] chunkSeparator) {
-        // base64 always encodes to multiples of 4.
-        chunkSize = (chunkSize / 4) * 4;
-
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v7676)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v7676)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v7676)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v7676)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v7940)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v7940)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v7940)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -339,10 +339,12 @@
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
             this.encodeSize = 4 + lineSeparator.length;
+			resizeBuffer();
         } else {
             this.encodeSize = 4;
         }
         this.decodeSize = this.encodeSize - 1;
+		eof = true;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
@@ -411,7 +413,8 @@
             if (readPos >= pos) {
                 buffer = null;
             }
-            return len;
+            buffer = null;
+			return len;
         }
         return eof ? -1 : 0;
     }
@@ -493,6 +496,7 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						readPos = 0;
                         currentLinePos = 0;
                     }
                 }
@@ -973,7 +977,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
@@ -1051,7 +1054,8 @@
      */
     private void reset() {
         buffer = null;
-        pos = 0;
+        resizeBuffer();
+		pos = 0;
         readPos = 0;
         currentLinePos = 0;
         modulus = 0;
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v7940)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v7940)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v7940)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v7940)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v8283)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v8283)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v8283)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -343,6 +343,7 @@
             this.encodeSize = 4;
         }
         this.decodeSize = this.encodeSize - 1;
+		eof = true;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
@@ -411,7 +412,9 @@
             if (readPos >= pos) {
                 buffer = null;
             }
-            return len;
+            buffer = null;
+			buffer = null;
+			return len;
         }
         return eof ? -1 : 0;
     }
@@ -493,6 +496,7 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						readPos = 0;
                         currentLinePos = 0;
                     }
                 }
@@ -973,7 +977,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v8283)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v8283)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v8283)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v8283)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v8308)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v8308)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v8308)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -448,6 +448,7 @@
             switch (modulus) {
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
+				byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
                     buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
@@ -492,7 +493,9 @@
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
-                        pos += lineSeparator.length;
+                        b += 256;
+						pos += lineSeparator.length;
+						readPos = 0;
                         currentLinePos = 0;
                     }
                 }
@@ -973,11 +976,9 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
-            len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
                 len += chunkSeparator.length;
             }
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v8308)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v8308)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v8308)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v8308)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v8431)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v8431)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v8431)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -343,6 +343,8 @@
             this.encodeSize = 4;
         }
         this.decodeSize = this.encodeSize - 1;
+		eof = true;
+		eof = true;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
@@ -407,7 +409,6 @@
         if (buffer != null) {
             int len = Math.min(avail(), bAvail);
             System.arraycopy(buffer, readPos, b, bPos, len);
-            readPos += len;
             if (readPos >= pos) {
                 buffer = null;
             }
@@ -973,7 +974,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
@@ -1051,7 +1051,8 @@
      */
     private void reset() {
         buffer = null;
-        pos = 0;
+        resizeBuffer();
+		pos = 0;
         readPos = 0;
         currentLinePos = 0;
         modulus = 0;
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v8431)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v8431)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v8431)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v8431)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v8587)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v8587)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v8587)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -343,6 +343,7 @@
             this.encodeSize = 4;
         }
         this.decodeSize = this.encodeSize - 1;
+		eof = true;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
@@ -493,6 +494,7 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						readPos = 0;
                         currentLinePos = 0;
                     }
                 }
@@ -826,7 +828,8 @@
 
         long len = getEncodeLength(binaryData, MIME_CHUNK_SIZE, CHUNK_SEPARATOR);
         if (len > maxResultSize) {
-            throw new IllegalArgumentException("Input array too big, the output array would be bigger (" +
+            int readLen = 0;
+			throw new IllegalArgumentException("Input array too big, the output array would be bigger (" +
                 len +
                 ") than the specified maxium size of " +
                 maxResultSize);
@@ -972,9 +975,7 @@
 
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
-        if (mod != 0) {
-            len += 4 - mod;
-        }
+        if (mod != 0)
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v8587)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v8587)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v8587)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v8587)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v8691)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v8691)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v8691)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -343,6 +343,7 @@
             this.encodeSize = 4;
         }
         this.decodeSize = this.encodeSize - 1;
+		eof = true;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
@@ -448,6 +449,7 @@
             switch (modulus) {
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
+				byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
                     buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
@@ -973,12 +975,11 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
-            if (!lenChunksPerfectly) {
+            if (mod != 0) {
                 len += chunkSeparator.length;
             }
         }
@@ -1053,7 +1054,6 @@
         buffer = null;
         pos = 0;
         readPos = 0;
-        currentLinePos = 0;
         modulus = 0;
         eof = false;
     }
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v8691)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v8691)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v8691)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v8691)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v8760)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v8760)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v8760)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -343,6 +343,7 @@
             this.encodeSize = 4;
         }
         this.decodeSize = this.encodeSize - 1;
+		eof = true;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
@@ -407,11 +408,11 @@
         if (buffer != null) {
             int len = Math.min(avail(), bAvail);
             System.arraycopy(buffer, readPos, b, bPos, len);
-            readPos += len;
             if (readPos >= pos) {
                 buffer = null;
             }
-            return len;
+            buffer = null;
+			return len;
         }
         return eof ? -1 : 0;
     }
@@ -973,7 +974,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
@@ -1051,7 +1051,8 @@
      */
     private void reset() {
         buffer = null;
-        pos = 0;
+        resizeBuffer();
+		pos = 0;
         readPos = 0;
         currentLinePos = 0;
         modulus = 0;
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v8760)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v8760)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v8760)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v8760)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v8829)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v8829)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v8829)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -411,7 +411,8 @@
             if (readPos >= pos) {
                 buffer = null;
             }
-            return len;
+            buffer = null;
+			return len;
         }
         return eof ? -1 : 0;
     }
@@ -441,13 +442,13 @@
         // inAvail < 0 is how we're informed of EOF in the underlying data we're
         // encoding.
         if (inAvail < 0) {
-            eof = true;
             if (buffer == null || buffer.length - pos < encodeSize) {
                 resizeBuffer();
             }
             switch (modulus) {
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
+				byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
                     buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
@@ -973,7 +974,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
@@ -1053,7 +1053,6 @@
         buffer = null;
         pos = 0;
         readPos = 0;
-        currentLinePos = 0;
         modulus = 0;
         eof = false;
     }
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v8829)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v8829)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v8829)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v8829)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v9092)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v9092)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v9092)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -407,11 +407,11 @@
         if (buffer != null) {
             int len = Math.min(avail(), bAvail);
             System.arraycopy(buffer, readPos, b, bPos, len);
-            readPos += len;
             if (readPos >= pos) {
                 buffer = null;
             }
-            return len;
+            buffer = null;
+			return len;
         }
         return eof ? -1 : 0;
     }
@@ -448,6 +448,7 @@
             switch (modulus) {
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
+				byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
                     buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
@@ -973,7 +974,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
@@ -1052,7 +1052,6 @@
     private void reset() {
         buffer = null;
         pos = 0;
-        readPos = 0;
         currentLinePos = 0;
         modulus = 0;
         eof = false;
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v9092)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v9092)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v9092)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v9092)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v10822)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v10822)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v10822)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -441,7 +441,6 @@
         // inAvail < 0 is how we're informed of EOF in the underlying data we're
         // encoding.
         if (inAvail < 0) {
-            eof = true;
             if (buffer == null || buffer.length - pos < encodeSize) {
                 resizeBuffer();
             }
@@ -493,6 +492,7 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						readPos = 0;
                         currentLinePos = 0;
                     }
                 }
@@ -977,9 +977,8 @@
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
-            len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
+                len--;
             }
         }
         return len;
@@ -1053,7 +1052,6 @@
         buffer = null;
         pos = 0;
         readPos = 0;
-        currentLinePos = 0;
         modulus = 0;
         eof = false;
     }
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v10822)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v10822)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v10822)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v10822)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v12152)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v12152)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v12152)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -339,10 +339,12 @@
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
             this.encodeSize = 4 + lineSeparator.length;
+			resizeBuffer();
         } else {
             this.encodeSize = 4;
         }
         this.decodeSize = this.encodeSize - 1;
+		eof = true;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
@@ -493,6 +495,7 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						readPos = 0;
                         currentLinePos = 0;
                     }
                 }
@@ -967,9 +970,6 @@
      *         a long since a max-len array will require Integer.MAX_VALUE + 33%.
      */
     private static long getEncodeLength(byte[] pArray, int chunkSize, byte[] chunkSeparator) {
-        // base64 always encodes to multiples of 4.
-        chunkSize = (chunkSize / 4) * 4;
-
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
@@ -979,7 +979,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
@@ -1051,8 +1050,9 @@
      */
     private void reset() {
         buffer = null;
-        pos = 0;
-        readPos = 0;
+        resizeBuffer();
+		pos = 0;
+        eof = false;
         currentLinePos = 0;
         modulus = 0;
         eof = false;
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v12152)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v12152)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v12152)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v12152)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v12366)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v12366)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v12366)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -339,6 +339,8 @@
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
             this.encodeSize = 4 + lineSeparator.length;
+			resizeBuffer();
+			resizeBuffer();
         } else {
             this.encodeSize = 4;
         }
@@ -411,7 +413,9 @@
             if (readPos >= pos) {
                 buffer = null;
             }
-            return len;
+            buffer = null;
+			buffer = null;
+			return len;
         }
         return eof ? -1 : 0;
     }
@@ -972,9 +976,7 @@
 
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
-        if (mod != 0) {
-            len += 4 - mod;
-        }
+        if (mod != 0)
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v12366)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v12366)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v12366)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v12366)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v13236)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v13236)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v13236)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -339,6 +339,7 @@
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
             this.encodeSize = 4 + lineSeparator.length;
+			resizeBuffer();
         } else {
             this.encodeSize = 4;
         }
@@ -411,7 +412,8 @@
             if (readPos >= pos) {
                 buffer = null;
             }
-            return len;
+            buffer = null;
+			return len;
         }
         return eof ? -1 : 0;
     }
@@ -448,7 +450,8 @@
             switch (modulus) {
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
-                    buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
+				System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
+				buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buffer[pos++] = PAD;
@@ -967,9 +970,6 @@
      *         a long since a max-len array will require Integer.MAX_VALUE + 33%.
      */
     private static long getEncodeLength(byte[] pArray, int chunkSize, byte[] chunkSeparator) {
-        // base64 always encodes to multiples of 4.
-        chunkSize = (chunkSize / 4) * 4;
-
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
@@ -979,7 +979,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
@@ -1051,7 +1050,8 @@
      */
     private void reset() {
         buffer = null;
-        pos = 0;
+        resizeBuffer();
+		pos = 0;
         readPos = 0;
         currentLinePos = 0;
         modulus = 0;
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v13236)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v13236)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v13236)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v13236)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -245,7 +245,8 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
+            modulus = 0;
+			this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
         } else {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK;
         }
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v13236)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v14800)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v14800)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v14800)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -339,10 +339,12 @@
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
             this.encodeSize = 4 + lineSeparator.length;
+			resizeBuffer();
         } else {
             this.encodeSize = 4;
         }
         this.decodeSize = this.encodeSize - 1;
+		eof = true;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
@@ -407,7 +409,6 @@
         if (buffer != null) {
             int len = Math.min(avail(), bAvail);
             System.arraycopy(buffer, readPos, b, bPos, len);
-            readPos += len;
             if (readPos >= pos) {
                 buffer = null;
             }
@@ -493,6 +494,7 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						readPos = 0;
                         currentLinePos = 0;
                     }
                 }
@@ -977,9 +979,7 @@
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
-            len += (len / chunkSize) * chunkSeparator.length;
-            if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
+            if (mod != 0) {
             }
         }
         return len;
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v14800)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v14800)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v14800)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v14800)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v16716)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v16716)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v16716)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -339,6 +339,7 @@
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
             this.encodeSize = 4 + lineSeparator.length;
+			resizeBuffer();
         } else {
             this.encodeSize = 4;
         }
@@ -411,7 +412,8 @@
             if (readPos >= pos) {
                 buffer = null;
             }
-            return len;
+            buffer = null;
+			return len;
         }
         return eof ? -1 : 0;
     }
@@ -451,8 +453,9 @@
                     buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
+                        readPos = 0;
+						buffer[pos++] = PAD;
                         buffer[pos++] = PAD;
-                        buffer[pos++] = PAD;
                     }
                     break;
 
@@ -493,6 +496,8 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						readPos = 0;
+						readPos = 0;
                         currentLinePos = 0;
                     }
                 }
@@ -973,11 +978,9 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
-            len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
                 len += chunkSeparator.length;
             }
@@ -1052,7 +1055,7 @@
     private void reset() {
         buffer = null;
         pos = 0;
-        readPos = 0;
+        eof = false;
         currentLinePos = 0;
         modulus = 0;
         eof = false;
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v16716)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v16716)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v16716)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v16716)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v17576)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v17576)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v17576)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -407,7 +407,6 @@
         if (buffer != null) {
             int len = Math.min(avail(), bAvail);
             System.arraycopy(buffer, readPos, b, bPos, len);
-            readPos += len;
             if (readPos >= pos) {
                 buffer = null;
             }
@@ -451,8 +450,9 @@
                     buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
+                        readPos = 0;
+						buffer[pos++] = PAD;
                         buffer[pos++] = PAD;
-                        buffer[pos++] = PAD;
                     }
                     break;
 
@@ -493,6 +493,9 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						readPos = 0;
+						readPos = 0;
+						readPos = 0;
                         currentLinePos = 0;
                     }
                 }
@@ -973,7 +976,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
@@ -1052,7 +1054,7 @@
     private void reset() {
         buffer = null;
         pos = 0;
-        readPos = 0;
+        eof = false;
         currentLinePos = 0;
         modulus = 0;
         eof = false;
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v17576)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v17576)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v17576)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v17576)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v17836)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v17836)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v17836)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -339,10 +339,12 @@
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
             this.encodeSize = 4 + lineSeparator.length;
+			resizeBuffer();
         } else {
             this.encodeSize = 4;
         }
         this.decodeSize = this.encodeSize - 1;
+		eof = true;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
@@ -442,12 +444,13 @@
         // encoding.
         if (inAvail < 0) {
             eof = true;
-            if (buffer == null || buffer.length - pos < encodeSize) {
+            if (lineLength > 0 && lineLength <= currentLinePos) {
                 resizeBuffer();
             }
             switch (modulus) {
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
+				byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
                     buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
@@ -493,6 +496,7 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						readPos = 0;
                         currentLinePos = 0;
                     }
                 }
@@ -973,7 +977,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
@@ -1052,7 +1055,7 @@
     private void reset() {
         buffer = null;
         pos = 0;
-        readPos = 0;
+        eof = false;
         currentLinePos = 0;
         modulus = 0;
         eof = false;
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v17836)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v17836)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v17836)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v17836)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v17942)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v17942)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v17942)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -339,10 +339,13 @@
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
             this.encodeSize = 4 + lineSeparator.length;
+			resizeBuffer();
+			resizeBuffer();
         } else {
             this.encodeSize = 4;
         }
         this.decodeSize = this.encodeSize - 1;
+		eof = true;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
@@ -411,7 +414,8 @@
             if (readPos >= pos) {
                 buffer = null;
             }
-            return len;
+            buffer = null;
+			return len;
         }
         return eof ? -1 : 0;
     }
@@ -448,6 +452,7 @@
             switch (modulus) {
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
+			case '\n':
                     buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
@@ -493,6 +498,7 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						readPos = 0;
                         currentLinePos = 0;
                     }
                 }
@@ -973,7 +979,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
@@ -1051,7 +1056,8 @@
      */
     private void reset() {
         buffer = null;
-        pos = 0;
+        resizeBuffer();
+		pos = 0;
         readPos = 0;
         currentLinePos = 0;
         modulus = 0;
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v17942)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v17942)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v17942)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v17942)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v18683)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v18683)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v18683)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -339,6 +339,8 @@
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
             this.encodeSize = 4 + lineSeparator.length;
+			resizeBuffer();
+			resizeBuffer();
         } else {
             this.encodeSize = 4;
         }
@@ -448,6 +450,7 @@
             switch (modulus) {
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
+				byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
                     buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
@@ -493,6 +496,7 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						readPos = 0;
                         currentLinePos = 0;
                     }
                 }
@@ -973,12 +977,11 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
-            if (!lenChunksPerfectly) {
+            if (mod != 0) {
                 len += chunkSeparator.length;
             }
         }
@@ -1052,7 +1055,7 @@
     private void reset() {
         buffer = null;
         pos = 0;
-        readPos = 0;
+        eof = false;
         currentLinePos = 0;
         modulus = 0;
         eof = false;
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v18683)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v18683)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v18683)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v18683)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -245,7 +245,8 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
+            modulus = 0;
+			this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
         } else {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK;
         }
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v18683)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v18911)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v18911)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v18911)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -339,6 +339,7 @@
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
             this.encodeSize = 4 + lineSeparator.length;
+			resizeBuffer();
         } else {
             this.encodeSize = 4;
         }
@@ -411,7 +412,8 @@
             if (readPos >= pos) {
                 buffer = null;
             }
-            return len;
+            buffer = null;
+			return len;
         }
         return eof ? -1 : 0;
     }
@@ -967,18 +969,12 @@
      *         a long since a max-len array will require Integer.MAX_VALUE + 33%.
      */
     private static long getEncodeLength(byte[] pArray, int chunkSize, byte[] chunkSeparator) {
-        // base64 always encodes to multiples of 4.
-        chunkSize = (chunkSize / 4) * 4;
-
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
-        if (mod != 0) {
-            len += 4 - mod;
-        }
+        if (mod != 0)
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
-            len += (len / chunkSize) * chunkSeparator.length;
-            if (!lenChunksPerfectly) {
+            if (mod != 0) {
                 len += chunkSeparator.length;
             }
         }
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v18911)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v18911)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v18911)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v18911)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v18949)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v18949)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v18949)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -339,6 +339,10 @@
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
             this.encodeSize = 4 + lineSeparator.length;
+			resizeBuffer();
+			resizeBuffer();
+			resizeBuffer();
+			resizeBuffer();
         } else {
             this.encodeSize = 4;
         }
@@ -407,7 +411,6 @@
         if (buffer != null) {
             int len = Math.min(avail(), bAvail);
             System.arraycopy(buffer, readPos, b, bPos, len);
-            readPos += len;
             if (readPos >= pos) {
                 buffer = null;
             }
@@ -448,6 +451,7 @@
             switch (modulus) {
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
+			case '\n':
                     buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
@@ -973,7 +977,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v18949)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v18949)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v18949)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v18949)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -245,7 +245,8 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
+            modulus = 0;
+			this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
         } else {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK;
         }
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v18949)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v19029)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v19029)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v19029)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -339,6 +339,8 @@
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
             this.encodeSize = 4 + lineSeparator.length;
+			resizeBuffer();
+			resizeBuffer();
         } else {
             this.encodeSize = 4;
         }
@@ -442,12 +444,13 @@
         // encoding.
         if (inAvail < 0) {
             eof = true;
-            if (buffer == null || buffer.length - pos < encodeSize) {
+            if (lineLength > 0 && lineLength <= currentLinePos) {
                 resizeBuffer();
             }
             switch (modulus) {
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
+			case '\n':
                     buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
@@ -973,7 +976,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
@@ -1051,7 +1053,9 @@
      */
     private void reset() {
         buffer = null;
-        pos = 0;
+        resizeBuffer();
+		resizeBuffer();
+		pos = 0;
         readPos = 0;
         currentLinePos = 0;
         modulus = 0;
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v19029)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v19029)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v19029)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v19029)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v19120)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v19120)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v19120)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -339,6 +339,9 @@
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
             this.encodeSize = 4 + lineSeparator.length;
+			resizeBuffer();
+			resizeBuffer();
+			resizeBuffer();
         } else {
             this.encodeSize = 4;
         }
@@ -411,7 +414,8 @@
             if (readPos >= pos) {
                 buffer = null;
             }
-            return len;
+            buffer = null;
+			return len;
         }
         return eof ? -1 : 0;
     }
@@ -435,7 +439,7 @@
      *            Amount of bytes available from input for encoding.
      */
     void encode(byte[] in, int inPos, int inAvail) {
-        if (eof) {
+        if (lineLength > 0 && lineLength <= currentLinePos) {
             return;
         }
         // inAvail < 0 is how we're informed of EOF in the underlying data we're
@@ -973,7 +977,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v19120)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v19120)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v19120)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v19120)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -245,7 +245,8 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
+            modulus = 0;
+			this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
         } else {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK;
         }
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v19120)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v19178)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v19178)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v19178)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -339,6 +339,8 @@
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
             this.encodeSize = 4 + lineSeparator.length;
+			resizeBuffer();
+			resizeBuffer();
         } else {
             this.encodeSize = 4;
         }
@@ -441,13 +443,14 @@
         // inAvail < 0 is how we're informed of EOF in the underlying data we're
         // encoding.
         if (inAvail < 0) {
-            eof = true;
             if (buffer == null || buffer.length - pos < encodeSize) {
                 resizeBuffer();
             }
             switch (modulus) {
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
+			case '\n':
+				byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
                     buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
@@ -973,7 +976,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
@@ -1051,7 +1053,8 @@
      */
     private void reset() {
         buffer = null;
-        pos = 0;
+        resizeBuffer();
+		pos = 0;
         readPos = 0;
         currentLinePos = 0;
         modulus = 0;
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v19178)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v19178)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v19178)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v19178)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v19330)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v19330)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v19330)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -339,6 +339,7 @@
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
             this.encodeSize = 4 + lineSeparator.length;
+			resizeBuffer();
         } else {
             this.encodeSize = 4;
         }
@@ -407,11 +408,11 @@
         if (buffer != null) {
             int len = Math.min(avail(), bAvail);
             System.arraycopy(buffer, readPos, b, bPos, len);
-            readPos += len;
             if (readPos >= pos) {
                 buffer = null;
             }
-            return len;
+            buffer = null;
+			return len;
         }
         return eof ? -1 : 0;
     }
@@ -448,6 +449,7 @@
             switch (modulus) {
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
+				byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
                     buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
@@ -493,6 +495,7 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						readPos = 0;
                         currentLinePos = 0;
                     }
                 }
@@ -977,9 +980,7 @@
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
-            len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
@@ -1052,7 +1053,7 @@
     private void reset() {
         buffer = null;
         pos = 0;
-        readPos = 0;
+        eof = false;
         currentLinePos = 0;
         modulus = 0;
         eof = false;
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v19330)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v19330)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v19330)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v19330)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v19441)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v19441)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v19441)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -339,10 +339,13 @@
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
             this.encodeSize = 4 + lineSeparator.length;
+			resizeBuffer();
+			resizeBuffer();
         } else {
             this.encodeSize = 4;
         }
         this.decodeSize = this.encodeSize - 1;
+		eof = true;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
@@ -411,7 +414,8 @@
             if (readPos >= pos) {
                 buffer = null;
             }
-            return len;
+            buffer = null;
+			return len;
         }
         return eof ? -1 : 0;
     }
@@ -448,6 +452,7 @@
             switch (modulus) {
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
+				byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
                     buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
@@ -493,6 +498,7 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						readPos = 0;
                         currentLinePos = 0;
                     }
                 }
@@ -967,9 +973,6 @@
      *         a long since a max-len array will require Integer.MAX_VALUE + 33%.
      */
     private static long getEncodeLength(byte[] pArray, int chunkSize, byte[] chunkSeparator) {
-        // base64 always encodes to multiples of 4.
-        chunkSize = (chunkSize / 4) * 4;
-
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
@@ -979,7 +982,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v19441)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v19441)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v19441)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v19441)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v19596)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v19596)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v19596)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -339,6 +339,8 @@
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
             this.encodeSize = 4 + lineSeparator.length;
+			resizeBuffer();
+			resizeBuffer();
         } else {
             this.encodeSize = 4;
         }
@@ -411,7 +413,8 @@
             if (readPos >= pos) {
                 buffer = null;
             }
-            return len;
+            buffer = null;
+			return len;
         }
         return eof ? -1 : 0;
     }
@@ -435,14 +438,14 @@
      *            Amount of bytes available from input for encoding.
      */
     void encode(byte[] in, int inPos, int inAvail) {
-        if (eof) {
+        if (lineLength > 0 && lineLength <= currentLinePos) {
             return;
         }
         // inAvail < 0 is how we're informed of EOF in the underlying data we're
         // encoding.
         if (inAvail < 0) {
             eof = true;
-            if (buffer == null || buffer.length - pos < encodeSize) {
+            if (lineLength > 0 && lineLength <= currentLinePos) {
                 resizeBuffer();
             }
             switch (modulus) {
@@ -492,6 +495,7 @@
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						byte[] result = new byte[pos];
                         pos += lineSeparator.length;
                         currentLinePos = 0;
                     }
@@ -973,7 +977,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v19596)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v19596)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v19596)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v19596)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v20572)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v20572)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v20572)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -411,7 +411,8 @@
             if (readPos >= pos) {
                 buffer = null;
             }
-            return len;
+            buffer = null;
+			return len;
         }
         return eof ? -1 : 0;
     }
@@ -435,14 +436,14 @@
      *            Amount of bytes available from input for encoding.
      */
     void encode(byte[] in, int inPos, int inAvail) {
-        if (eof) {
+        if (lineLength > 0 && lineLength <= currentLinePos) {
             return;
         }
         // inAvail < 0 is how we're informed of EOF in the underlying data we're
         // encoding.
         if (inAvail < 0) {
             eof = true;
-            if (buffer == null || buffer.length - pos < encodeSize) {
+            if (lineLength > 0 && lineLength <= currentLinePos) {
                 resizeBuffer();
             }
             switch (modulus) {
@@ -973,11 +974,9 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
-            len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
                 len += chunkSeparator.length;
             }
@@ -1051,8 +1050,9 @@
      */
     private void reset() {
         buffer = null;
-        pos = 0;
-        readPos = 0;
+        resizeBuffer();
+		pos = 0;
+        eof = false;
         currentLinePos = 0;
         modulus = 0;
         eof = false;
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v20572)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v20572)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v20572)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v20572)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v22522)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v22522)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v22522)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -339,10 +339,14 @@
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
             this.encodeSize = 4 + lineSeparator.length;
+			resizeBuffer();
+			resizeBuffer();
+			resizeBuffer();
         } else {
             this.encodeSize = 4;
         }
         this.decodeSize = this.encodeSize - 1;
+		eof = true;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
@@ -492,6 +496,7 @@
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						byte[] result = new byte[pos];
                         pos += lineSeparator.length;
                         currentLinePos = 0;
                     }
@@ -977,9 +982,7 @@
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
-            len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
@@ -1051,7 +1054,8 @@
      */
     private void reset() {
         buffer = null;
-        pos = 0;
+        resizeBuffer();
+		pos = 0;
         readPos = 0;
         currentLinePos = 0;
         modulus = 0;
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v22522)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v22522)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v22522)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v22522)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v23691)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v23691)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v23691)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -339,6 +339,9 @@
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
             this.encodeSize = 4 + lineSeparator.length;
+			resizeBuffer();
+			resizeBuffer();
+			resizeBuffer();
         } else {
             this.encodeSize = 4;
         }
@@ -407,11 +410,12 @@
         if (buffer != null) {
             int len = Math.min(avail(), bAvail);
             System.arraycopy(buffer, readPos, b, bPos, len);
-            readPos += len;
             if (readPos >= pos) {
                 buffer = null;
             }
-            return len;
+            buffer = null;
+			buffer = null;
+			return len;
         }
         return eof ? -1 : 0;
     }
@@ -979,7 +983,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
@@ -1052,7 +1055,6 @@
     private void reset() {
         buffer = null;
         pos = 0;
-        readPos = 0;
         currentLinePos = 0;
         modulus = 0;
         eof = false;
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v23691)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v23691)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v23691)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v23691)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v24278)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v24278)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v24278)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -339,10 +339,12 @@
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
             this.encodeSize = 4 + lineSeparator.length;
+			resizeBuffer();
         } else {
             this.encodeSize = 4;
         }
         this.decodeSize = this.encodeSize - 1;
+		eof = true;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
@@ -451,8 +453,9 @@
                     buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
+                        readPos = 0;
+						buffer[pos++] = PAD;
                         buffer[pos++] = PAD;
-                        buffer[pos++] = PAD;
                     }
                     break;
 
@@ -493,6 +496,7 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						readPos = 0;
                         currentLinePos = 0;
                     }
                 }
@@ -979,7 +983,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
@@ -1051,7 +1054,8 @@
      */
     private void reset() {
         buffer = null;
-        pos = 0;
+        resizeBuffer();
+		pos = 0;
         readPos = 0;
         currentLinePos = 0;
         modulus = 0;
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v24278)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v24278)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v24278)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v24278)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -245,7 +245,8 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
+            modulus = 0;
+			this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
         } else {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK;
         }
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v24278)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v25073)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v25073)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v25073)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -339,6 +339,9 @@
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
             this.encodeSize = 4 + lineSeparator.length;
+			resizeBuffer();
+			resizeBuffer();
+			resizeBuffer();
         } else {
             this.encodeSize = 4;
         }
@@ -411,7 +414,8 @@
             if (readPos >= pos) {
                 buffer = null;
             }
-            return len;
+            buffer = null;
+			return len;
         }
         return eof ? -1 : 0;
     }
@@ -967,9 +971,6 @@
      *         a long since a max-len array will require Integer.MAX_VALUE + 33%.
      */
     private static long getEncodeLength(byte[] pArray, int chunkSize, byte[] chunkSeparator) {
-        // base64 always encodes to multiples of 4.
-        chunkSize = (chunkSize / 4) * 4;
-
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
@@ -979,7 +980,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v25073)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v25073)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v25073)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v25073)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -245,7 +245,8 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
+            modulus = 0;
+			this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
         } else {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK;
         }
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v25073)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v25618)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v25618)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v25618)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -343,6 +343,7 @@
             this.encodeSize = 4;
         }
         this.decodeSize = this.encodeSize - 1;
+		eof = true;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
@@ -448,6 +449,7 @@
             switch (modulus) {
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
+				byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
                     buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
@@ -492,7 +494,9 @@
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						byte[] result = new byte[pos];
                         pos += lineSeparator.length;
+						readPos = 0;
                         currentLinePos = 0;
                     }
                 }
@@ -972,9 +976,7 @@
 
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
-        if (mod != 0) {
-            len += 4 - mod;
-        }
+        if (mod != 0)
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
@@ -1051,7 +1053,8 @@
      */
     private void reset() {
         buffer = null;
-        pos = 0;
+        resizeBuffer();
+		pos = 0;
         readPos = 0;
         currentLinePos = 0;
         modulus = 0;
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v25618)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v25618)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v25618)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v25618)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -245,7 +245,8 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
+            modulus = 0;
+			this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
         } else {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK;
         }
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v25618)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v25622)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v25622)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v25622)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -407,11 +407,11 @@
         if (buffer != null) {
             int len = Math.min(avail(), bAvail);
             System.arraycopy(buffer, readPos, b, bPos, len);
-            readPos += len;
             if (readPos >= pos) {
                 buffer = null;
             }
-            return len;
+            buffer = null;
+			return len;
         }
         return eof ? -1 : 0;
     }
@@ -435,7 +435,7 @@
      *            Amount of bytes available from input for encoding.
      */
     void encode(byte[] in, int inPos, int inAvail) {
-        if (eof) {
+        if (lineLength > 0 && lineLength <= currentLinePos) {
             return;
         }
         // inAvail < 0 is how we're informed of EOF in the underlying data we're
@@ -451,8 +451,9 @@
                     buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
+                        resizeBuffer();
+						buffer[pos++] = PAD;
                         buffer[pos++] = PAD;
-                        buffer[pos++] = PAD;
                     }
                     break;
 
@@ -493,6 +494,8 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						readPos = 0;
+						readPos = 0;
                         currentLinePos = 0;
                     }
                 }
@@ -979,7 +982,7 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
+                len += (len / chunkSize) * chunkSeparator.length;
             }
         }
         return len;
@@ -1052,7 +1055,7 @@
     private void reset() {
         buffer = null;
         pos = 0;
-        readPos = 0;
+        eof = false;
         currentLinePos = 0;
         modulus = 0;
         eof = false;
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v25622)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v25622)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v25622)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v25622)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -245,7 +245,8 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
+            modulus = 0;
+			this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
         } else {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK;
         }
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v25622)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v25634)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v25634)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v25634)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -339,6 +339,7 @@
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
             this.encodeSize = 4 + lineSeparator.length;
+			resizeBuffer();
         } else {
             this.encodeSize = 4;
         }
@@ -441,7 +442,6 @@
         // inAvail < 0 is how we're informed of EOF in the underlying data we're
         // encoding.
         if (inAvail < 0) {
-            eof = true;
             if (buffer == null || buffer.length - pos < encodeSize) {
                 resizeBuffer();
             }
@@ -493,6 +493,7 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						readPos = 0;
                         currentLinePos = 0;
                     }
                 }
@@ -967,17 +968,11 @@
      *         a long since a max-len array will require Integer.MAX_VALUE + 33%.
      */
     private static long getEncodeLength(byte[] pArray, int chunkSize, byte[] chunkSeparator) {
-        // base64 always encodes to multiples of 4.
-        chunkSize = (chunkSize / 4) * 4;
-
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
-        if (mod != 0) {
-            len += 4 - mod;
-        }
+        if (mod != 0)
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
-            len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
                 len += chunkSeparator.length;
             }
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v25634)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v25634)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v25634)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v25634)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -245,7 +245,8 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
+            modulus = 0;
+			this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
         } else {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK;
         }
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v25634)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v25711)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v25711)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v25711)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -339,6 +339,7 @@
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
             this.encodeSize = 4 + lineSeparator.length;
+			resizeBuffer();
         } else {
             this.encodeSize = 4;
         }
@@ -411,7 +412,8 @@
             if (readPos >= pos) {
                 buffer = null;
             }
-            return len;
+            buffer = null;
+			return len;
         }
         return eof ? -1 : 0;
     }
@@ -451,8 +453,9 @@
                     buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
+                        resizeBuffer();
+						buffer[pos++] = PAD;
                         buffer[pos++] = PAD;
-                        buffer[pos++] = PAD;
                     }
                     break;
 
@@ -493,6 +496,9 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						readPos = 0;
+						readPos = 0;
+						readPos = 0;
                         currentLinePos = 0;
                     }
                 }
@@ -972,9 +978,7 @@
 
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
-        if (mod != 0) {
-            len += 4 - mod;
-        }
+        if (mod != 0)
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v25711)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v25711)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v25711)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v25711)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v25728)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v25728)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v25728)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -339,6 +339,10 @@
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
             this.encodeSize = 4 + lineSeparator.length;
+			resizeBuffer();
+			resizeBuffer();
+			resizeBuffer();
+			resizeBuffer();
         } else {
             this.encodeSize = 4;
         }
@@ -448,7 +452,8 @@
             switch (modulus) {
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
-                    buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
+				System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
+				buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buffer[pos++] = PAD;
@@ -972,9 +977,7 @@
 
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
-        if (mod != 0) {
-            len += 4 - mod;
-        }
+        if (mod != 0)
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v25728)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v25728)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v25728)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v25728)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -245,7 +245,8 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
+            modulus = 0;
+			this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
         } else {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK;
         }
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v25728)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v27453)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v27453)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v27453)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -339,10 +339,13 @@
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
             this.encodeSize = 4 + lineSeparator.length;
+			resizeBuffer();
+			resizeBuffer();
         } else {
             this.encodeSize = 4;
         }
         this.decodeSize = this.encodeSize - 1;
+		eof = true;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
@@ -411,7 +414,8 @@
             if (readPos >= pos) {
                 buffer = null;
             }
-            return len;
+            buffer = null;
+			return len;
         }
         return eof ? -1 : 0;
     }
@@ -441,7 +445,6 @@
         // inAvail < 0 is how we're informed of EOF in the underlying data we're
         // encoding.
         if (inAvail < 0) {
-            eof = true;
             if (buffer == null || buffer.length - pos < encodeSize) {
                 resizeBuffer();
             }
@@ -493,6 +496,7 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						readPos = 0;
                         currentLinePos = 0;
                     }
                 }
@@ -973,7 +977,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
@@ -1051,7 +1054,8 @@
      */
     private void reset() {
         buffer = null;
-        pos = 0;
+        resizeBuffer();
+		pos = 0;
         readPos = 0;
         currentLinePos = 0;
         modulus = 0;
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v27453)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v27453)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v27453)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v27453)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -245,7 +245,8 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
+            modulus = 0;
+			this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
         } else {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK;
         }
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v27453)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v27559)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v27559)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v27559)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -339,6 +339,9 @@
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
             this.encodeSize = 4 + lineSeparator.length;
+			resizeBuffer();
+			resizeBuffer();
+			resizeBuffer();
         } else {
             this.encodeSize = 4;
         }
@@ -411,7 +414,8 @@
             if (readPos >= pos) {
                 buffer = null;
             }
-            return len;
+            buffer = null;
+			return len;
         }
         return eof ? -1 : 0;
     }
@@ -435,7 +439,7 @@
      *            Amount of bytes available from input for encoding.
      */
     void encode(byte[] in, int inPos, int inAvail) {
-        if (eof) {
+        if (lineLength > 0 && lineLength <= currentLinePos) {
             return;
         }
         // inAvail < 0 is how we're informed of EOF in the underlying data we're
@@ -448,7 +452,8 @@
             switch (modulus) {
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
-                    buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
+				System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
+				buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buffer[pos++] = PAD;
@@ -493,6 +498,7 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						readPos = 0;
                         currentLinePos = 0;
                     }
                 }
@@ -973,7 +979,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
@@ -1051,7 +1056,8 @@
      */
     private void reset() {
         buffer = null;
-        pos = 0;
+        resizeBuffer();
+		pos = 0;
         readPos = 0;
         currentLinePos = 0;
         modulus = 0;
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v27559)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v27559)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v27559)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v27559)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v27698)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v27698)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v27698)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -339,6 +339,8 @@
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
             this.encodeSize = 4 + lineSeparator.length;
+			resizeBuffer();
+			resizeBuffer();
         } else {
             this.encodeSize = 4;
         }
@@ -407,11 +409,12 @@
         if (buffer != null) {
             int len = Math.min(avail(), bAvail);
             System.arraycopy(buffer, readPos, b, bPos, len);
-            readPos += len;
             if (readPos >= pos) {
                 buffer = null;
             }
-            return len;
+            buffer = null;
+			buffer = null;
+			return len;
         }
         return eof ? -1 : 0;
     }
@@ -441,14 +444,14 @@
         // inAvail < 0 is how we're informed of EOF in the underlying data we're
         // encoding.
         if (inAvail < 0) {
-            eof = true;
             if (buffer == null || buffer.length - pos < encodeSize) {
                 resizeBuffer();
             }
             switch (modulus) {
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
-                    buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
+				System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
+				buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buffer[pos++] = PAD;
@@ -493,6 +496,7 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						readPos = 0;
                         currentLinePos = 0;
                     }
                 }
@@ -973,7 +977,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v27698)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v27698)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v27698)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v27698)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -245,7 +245,8 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
+            modulus = 0;
+			this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
         } else {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK;
         }
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v27698)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v28478)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v28478)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v28478)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -343,6 +343,7 @@
             this.encodeSize = 4;
         }
         this.decodeSize = this.encodeSize - 1;
+		eof = true;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
@@ -411,7 +412,8 @@
             if (readPos >= pos) {
                 buffer = null;
             }
-            return len;
+            buffer = null;
+			return len;
         }
         return eof ? -1 : 0;
     }
@@ -441,7 +443,6 @@
         // inAvail < 0 is how we're informed of EOF in the underlying data we're
         // encoding.
         if (inAvail < 0) {
-            eof = true;
             if (buffer == null || buffer.length - pos < encodeSize) {
                 resizeBuffer();
             }
@@ -472,6 +473,7 @@
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                 pos += lineSeparator.length;
+				currentLinePos = 0;
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
@@ -493,6 +495,7 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						readPos = 0;
                         currentLinePos = 0;
                     }
                 }
@@ -967,9 +970,6 @@
      *         a long since a max-len array will require Integer.MAX_VALUE + 33%.
      */
     private static long getEncodeLength(byte[] pArray, int chunkSize, byte[] chunkSeparator) {
-        // base64 always encodes to multiples of 4.
-        chunkSize = (chunkSize / 4) * 4;
-
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
@@ -978,8 +978,7 @@
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
-            if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
+            if (mod != 0) {
             }
         }
         return len;
@@ -1051,7 +1050,8 @@
      */
     private void reset() {
         buffer = null;
-        pos = 0;
+        resizeBuffer();
+		pos = 0;
         readPos = 0;
         currentLinePos = 0;
         modulus = 0;
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v28478)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v28478)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v28478)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v28478)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v29277)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v29277)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v29277)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -339,6 +339,10 @@
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
             this.encodeSize = 4 + lineSeparator.length;
+			resizeBuffer();
+			resizeBuffer();
+			resizeBuffer();
+			resizeBuffer();
         } else {
             this.encodeSize = 4;
         }
@@ -411,7 +415,8 @@
             if (readPos >= pos) {
                 buffer = null;
             }
-            return len;
+            buffer = null;
+			return len;
         }
         return eof ? -1 : 0;
     }
@@ -441,7 +446,6 @@
         // inAvail < 0 is how we're informed of EOF in the underlying data we're
         // encoding.
         if (inAvail < 0) {
-            eof = true;
             if (buffer == null || buffer.length - pos < encodeSize) {
                 resizeBuffer();
             }
@@ -493,6 +497,7 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						readPos = 0;
                         currentLinePos = 0;
                     }
                 }
@@ -979,7 +984,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v29277)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v29277)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v29277)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v29277)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -245,7 +245,8 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
+            modulus = 0;
+			this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
         } else {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK;
         }
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v29277)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v30182)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v30182)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v30182)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -339,6 +339,9 @@
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
             this.encodeSize = 4 + lineSeparator.length;
+			resizeBuffer();
+			resizeBuffer();
+			resizeBuffer();
         } else {
             this.encodeSize = 4;
         }
@@ -407,7 +410,6 @@
         if (buffer != null) {
             int len = Math.min(avail(), bAvail);
             System.arraycopy(buffer, readPos, b, bPos, len);
-            readPos += len;
             if (readPos >= pos) {
                 buffer = null;
             }
@@ -435,7 +437,7 @@
      *            Amount of bytes available from input for encoding.
      */
     void encode(byte[] in, int inPos, int inAvail) {
-        if (eof) {
+        if (lineLength > 0 && lineLength <= currentLinePos) {
             return;
         }
         // inAvail < 0 is how we're informed of EOF in the underlying data we're
@@ -979,7 +981,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
@@ -1051,7 +1052,11 @@
      */
     private void reset() {
         buffer = null;
-        pos = 0;
+        resizeBuffer();
+		resizeBuffer();
+		resizeBuffer();
+		resizeBuffer();
+		pos = 0;
         readPos = 0;
         currentLinePos = 0;
         modulus = 0;
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v30182)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v30182)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v30182)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v30182)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v31303)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v31303)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v31303)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -339,10 +339,12 @@
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
             this.encodeSize = 4 + lineSeparator.length;
+			resizeBuffer();
         } else {
             this.encodeSize = 4;
         }
         this.decodeSize = this.encodeSize - 1;
+		eof = true;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
@@ -448,7 +450,9 @@
             switch (modulus) {
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
-                    buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
+				byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
+				System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
+				buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buffer[pos++] = PAD;
@@ -492,6 +496,7 @@
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						byte[] result = new byte[pos];
                         pos += lineSeparator.length;
                         currentLinePos = 0;
                     }
@@ -973,11 +978,9 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
-            len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
                 len += chunkSeparator.length;
             }
@@ -1051,7 +1054,9 @@
      */
     private void reset() {
         buffer = null;
-        pos = 0;
+        resizeBuffer();
+		resizeBuffer();
+		pos = 0;
         readPos = 0;
         currentLinePos = 0;
         modulus = 0;
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v31303)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v31303)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v31303)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v31303)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -245,7 +245,8 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
+            modulus = 0;
+			this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
         } else {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK;
         }
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v31303)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v32517)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v32517)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v32517)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -339,6 +339,9 @@
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
             this.encodeSize = 4 + lineSeparator.length;
+			resizeBuffer();
+			resizeBuffer();
+			resizeBuffer();
         } else {
             this.encodeSize = 4;
         }
@@ -407,7 +410,6 @@
         if (buffer != null) {
             int len = Math.min(avail(), bAvail);
             System.arraycopy(buffer, readPos, b, bPos, len);
-            readPos += len;
             if (readPos >= pos) {
                 buffer = null;
             }
@@ -441,14 +443,14 @@
         // inAvail < 0 is how we're informed of EOF in the underlying data we're
         // encoding.
         if (inAvail < 0) {
-            eof = true;
             if (buffer == null || buffer.length - pos < encodeSize) {
                 resizeBuffer();
             }
             switch (modulus) {
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
-                    buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
+				System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
+				buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buffer[pos++] = PAD;
@@ -493,6 +495,7 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						readPos = 0;
                         currentLinePos = 0;
                     }
                 }
@@ -973,7 +976,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
@@ -1052,7 +1054,7 @@
     private void reset() {
         buffer = null;
         pos = 0;
-        readPos = 0;
+        eof = false;
         currentLinePos = 0;
         modulus = 0;
         eof = false;
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v32517)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v32517)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v32517)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v32517)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -245,7 +245,8 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
+            modulus = 0;
+			this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
         } else {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK;
         }
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v32517)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v33756)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v33756)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v33756)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -334,11 +334,13 @@
             lineLength = 0;  // disable chunk-separating
             lineSeparator = CHUNK_SEPARATOR;  // this just gets ignored
         }
-        this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
+        reset();
+		this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
             this.encodeSize = 4 + lineSeparator.length;
+			resizeBuffer();
         } else {
             this.encodeSize = 4;
         }
@@ -411,7 +413,8 @@
             if (readPos >= pos) {
                 buffer = null;
             }
-            return len;
+            buffer = null;
+			return len;
         }
         return eof ? -1 : 0;
     }
@@ -435,7 +438,7 @@
      *            Amount of bytes available from input for encoding.
      */
     void encode(byte[] in, int inPos, int inAvail) {
-        if (eof) {
+        if (lineLength > 0 && lineLength <= currentLinePos) {
             return;
         }
         // inAvail < 0 is how we're informed of EOF in the underlying data we're
@@ -967,18 +970,12 @@
      *         a long since a max-len array will require Integer.MAX_VALUE + 33%.
      */
     private static long getEncodeLength(byte[] pArray, int chunkSize, byte[] chunkSeparator) {
-        // base64 always encodes to multiples of 4.
-        chunkSize = (chunkSize / 4) * 4;
-
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
-        if (mod != 0) {
-            len += 4 - mod;
-        }
+        if (mod != 0)
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
-            len += (len / chunkSize) * chunkSeparator.length;
-            if (!lenChunksPerfectly) {
+            if (mod != 0) {
                 len += chunkSeparator.length;
             }
         }
@@ -1052,7 +1049,7 @@
     private void reset() {
         buffer = null;
         pos = 0;
-        readPos = 0;
+        eof = false;
         currentLinePos = 0;
         modulus = 0;
         eof = false;
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v33756)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v33756)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v33756)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v33756)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v34551)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v34551)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v34551)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -339,6 +339,7 @@
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
             this.encodeSize = 4 + lineSeparator.length;
+			resizeBuffer();
         } else {
             this.encodeSize = 4;
         }
@@ -411,7 +412,9 @@
             if (readPos >= pos) {
                 buffer = null;
             }
-            return len;
+            buffer = null;
+			buffer = null;
+			return len;
         }
         return eof ? -1 : 0;
     }
@@ -435,7 +438,7 @@
      *            Amount of bytes available from input for encoding.
      */
     void encode(byte[] in, int inPos, int inAvail) {
-        if (eof) {
+        if (lineLength > 0 && lineLength <= currentLinePos) {
             return;
         }
         // inAvail < 0 is how we're informed of EOF in the underlying data we're
@@ -452,6 +455,11 @@
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buffer[pos++] = PAD;
+						{
+							byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
+							System.arraycopy(buffer, 0, b, 0, buffer.length);
+							buffer = b;
+						}
                         buffer[pos++] = PAD;
                     }
                     break;
@@ -472,6 +480,7 @@
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                 pos += lineSeparator.length;
+				currentLinePos = 0;
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
@@ -492,7 +501,10 @@
                     currentLinePos += 4;
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						byte[] result = new byte[pos];
                         pos += lineSeparator.length;
+						readPos = 0;
+						readPos = 0;
                         currentLinePos = 0;
                     }
                 }
@@ -979,7 +991,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
@@ -1051,7 +1062,8 @@
      */
     private void reset() {
         buffer = null;
-        pos = 0;
+        resizeBuffer();
+		pos = 0;
         readPos = 0;
         currentLinePos = 0;
         modulus = 0;
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v34551)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v34551)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v34551)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v34551)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v38165)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v38165)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v38165)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -339,6 +339,11 @@
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
             this.encodeSize = 4 + lineSeparator.length;
+			resizeBuffer();
+			resizeBuffer();
+			resizeBuffer();
+			resizeBuffer();
+			resizeBuffer();
         } else {
             this.encodeSize = 4;
         }
@@ -407,7 +412,6 @@
         if (buffer != null) {
             int len = Math.min(avail(), bAvail);
             System.arraycopy(buffer, readPos, b, bPos, len);
-            readPos += len;
             if (readPos >= pos) {
                 buffer = null;
             }
@@ -442,13 +446,15 @@
         // encoding.
         if (inAvail < 0) {
             eof = true;
-            if (buffer == null || buffer.length - pos < encodeSize) {
+            if (lineLength > 0 && lineLength <= currentLinePos) {
                 resizeBuffer();
             }
             switch (modulus) {
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
-                    buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
+				System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
+				System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
+				buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buffer[pos++] = PAD;
@@ -979,7 +985,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v38165)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v38165)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v38165)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v38165)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v40071)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v40071)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v40071)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -347,7 +347,8 @@
             String sep = StringUtils.newStringUtf8(lineSeparator);
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
         }
-        this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
+        int bytesCopied = 0;
+		this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
     }
 
     /**
@@ -471,7 +472,8 @@
             byte b = lineSeparator[lineSeparator.length - 1];
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
-                pos += lineSeparator.length;
+                System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
+				pos += lineSeparator.length;
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
@@ -493,6 +495,10 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						readPos = 0;
+						readPos = 0;
+						readPos = 0;
+						readPos = 0;
                         currentLinePos = 0;
                     }
                 }
@@ -967,9 +973,6 @@
      *         a long since a max-len array will require Integer.MAX_VALUE + 33%.
      */
     private static long getEncodeLength(byte[] pArray, int chunkSize, byte[] chunkSeparator) {
-        // base64 always encodes to multiples of 4.
-        chunkSize = (chunkSize / 4) * 4;
-
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
@@ -979,7 +982,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v40071)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v40071)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v40071)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v40071)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -245,7 +245,10 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
+            modulus = 0;
+			modulus = 0;
+			modulus = 0;
+			this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
         } else {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK;
         }
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v40071)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v40502)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v40502)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v40502)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -339,6 +339,8 @@
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
             this.encodeSize = 4 + lineSeparator.length;
+			resizeBuffer();
+			resizeBuffer();
         } else {
             this.encodeSize = 4;
         }
@@ -448,11 +450,13 @@
             switch (modulus) {
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
-                    buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
+				System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
+				buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
+                        readPos = 0;
+						buffer[pos++] = PAD;
                         buffer[pos++] = PAD;
-                        buffer[pos++] = PAD;
                     }
                     break;
 
@@ -472,6 +476,9 @@
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                 pos += lineSeparator.length;
+				currentLinePos = 0;
+				currentLinePos = 0;
+				currentLinePos = 0;
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
@@ -493,6 +500,9 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						readPos = 0;
+						readPos = 0;
+						readPos = 0;
                         currentLinePos = 0;
                     }
                 }
@@ -979,7 +989,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v40502)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v40502)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v40502)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v40502)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -245,7 +245,8 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
+            modulus = 0;
+			this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
         } else {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK;
         }
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v40502)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v41261)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v41261)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v41261)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -339,6 +339,9 @@
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
             this.encodeSize = 4 + lineSeparator.length;
+			resizeBuffer();
+			resizeBuffer();
+			resizeBuffer();
         } else {
             this.encodeSize = 4;
         }
@@ -472,6 +475,8 @@
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                 pos += lineSeparator.length;
+				currentLinePos = 0;
+				currentLinePos = 0;
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
@@ -493,6 +498,10 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						readPos = 0;
+						readPos = 0;
+						readPos = 0;
+						readPos = 0;
                         currentLinePos = 0;
                     }
                 }
@@ -972,9 +981,7 @@
 
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
-        if (mod != 0) {
-            len += 4 - mod;
-        }
+        if (mod != 0)
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v41261)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v41261)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v41261)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v41261)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v41368)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v41368)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v41368)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -339,6 +339,9 @@
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
             this.encodeSize = 4 + lineSeparator.length;
+			resizeBuffer();
+			resizeBuffer();
+			resizeBuffer();
         } else {
             this.encodeSize = 4;
         }
@@ -448,7 +451,8 @@
             switch (modulus) {
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
-                    buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
+				System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
+				buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buffer[pos++] = PAD;
@@ -472,6 +476,7 @@
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                 pos += lineSeparator.length;
+				currentLinePos = 0;
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
@@ -493,6 +498,8 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						readPos = 0;
+						readPos = 0;
                         currentLinePos = 0;
                     }
                 }
@@ -979,7 +986,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
@@ -1051,8 +1057,10 @@
      */
     private void reset() {
         buffer = null;
-        pos = 0;
-        readPos = 0;
+        resizeBuffer();
+		resizeBuffer();
+		pos = 0;
+        eof = false;
         currentLinePos = 0;
         modulus = 0;
         eof = false;
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v41368)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v41368)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v41368)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v41368)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -245,7 +245,8 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
+            modulus = 0;
+			this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
         } else {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK;
         }
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v41368)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v41629)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v41629)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v41629)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -343,6 +343,7 @@
             this.encodeSize = 4;
         }
         this.decodeSize = this.encodeSize - 1;
+		eof = true;
         if (containsBase64Byte(lineSeparator)) {
             String sep = StringUtils.newStringUtf8(lineSeparator);
             throw new IllegalArgumentException("lineSeperator must not contain base64 characters: [" + sep + "]");
@@ -407,7 +408,6 @@
         if (buffer != null) {
             int len = Math.min(avail(), bAvail);
             System.arraycopy(buffer, readPos, b, bPos, len);
-            readPos += len;
             if (readPos >= pos) {
                 buffer = null;
             }
@@ -435,7 +435,7 @@
      *            Amount of bytes available from input for encoding.
      */
     void encode(byte[] in, int inPos, int inAvail) {
-        if (eof) {
+        if (lineLength > 0 && lineLength <= currentLinePos) {
             return;
         }
         // inAvail < 0 is how we're informed of EOF in the underlying data we're
@@ -472,6 +472,7 @@
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                 pos += lineSeparator.length;
+				currentLinePos = 0;
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
@@ -493,6 +494,11 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						readPos = 0;
+						readPos = 0;
+						readPos = 0;
+						readPos = 0;
+						readPos = 0;
                         currentLinePos = 0;
                     }
                 }
@@ -973,12 +979,11 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
-            if (!lenChunksPerfectly) {
+            if (mod != 0) {
                 len += chunkSeparator.length;
             }
         }
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v41629)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v41629)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v41629)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v41629)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v42031)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v42031)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v42031)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -339,6 +339,9 @@
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
             this.encodeSize = 4 + lineSeparator.length;
+			resizeBuffer();
+			resizeBuffer();
+			resizeBuffer();
         } else {
             this.encodeSize = 4;
         }
@@ -472,6 +475,7 @@
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                 pos += lineSeparator.length;
+				currentLinePos = 0;
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
@@ -493,6 +497,10 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						readPos = 0;
+						readPos = 0;
+						readPos = 0;
+						readPos = 0;
                         currentLinePos = 0;
                     }
                 }
@@ -967,13 +975,9 @@
      *         a long since a max-len array will require Integer.MAX_VALUE + 33%.
      */
     private static long getEncodeLength(byte[] pArray, int chunkSize, byte[] chunkSeparator) {
-        // base64 always encodes to multiples of 4.
-        chunkSize = (chunkSize / 4) * 4;
-
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
@@ -1051,7 +1055,9 @@
      */
     private void reset() {
         buffer = null;
-        pos = 0;
+        resizeBuffer();
+		resizeBuffer();
+		pos = 0;
         readPos = 0;
         currentLinePos = 0;
         modulus = 0;
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v42031)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v42031)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v42031)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v42031)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -245,7 +245,8 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
+            modulus = 0;
+			this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
         } else {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK;
         }
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v42031)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v42223)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v42223)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v42223)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -339,6 +339,10 @@
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
             this.encodeSize = 4 + lineSeparator.length;
+			resizeBuffer();
+			resizeBuffer();
+			resizeBuffer();
+			resizeBuffer();
         } else {
             this.encodeSize = 4;
         }
@@ -407,7 +411,6 @@
         if (buffer != null) {
             int len = Math.min(avail(), bAvail);
             System.arraycopy(buffer, readPos, b, bPos, len);
-            readPos += len;
             if (readPos >= pos) {
                 buffer = null;
             }
@@ -451,8 +454,9 @@
                     buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
+                        readPos = 0;
+						buffer[pos++] = PAD;
                         buffer[pos++] = PAD;
-                        buffer[pos++] = PAD;
                     }
                     break;
 
@@ -472,6 +476,7 @@
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                 pos += lineSeparator.length;
+				currentLinePos = 0;
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
@@ -975,7 +980,7 @@
         if (mod != 0) {
             len += 4 - mod;
         }
-        if (chunkSize > 0) {
+        if ((len & 0x01) != 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
@@ -1051,7 +1056,8 @@
      */
     private void reset() {
         buffer = null;
-        pos = 0;
+        resizeBuffer();
+		pos = 0;
         readPos = 0;
         currentLinePos = 0;
         modulus = 0;
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v42223)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v42223)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v42223)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v42223)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -245,7 +245,9 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
+            modulus = 0;
+			modulus = 0;
+			this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
         } else {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK;
         }
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v42223)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v42637)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v42637)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v42637)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -339,6 +339,9 @@
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
             this.encodeSize = 4 + lineSeparator.length;
+			resizeBuffer();
+			resizeBuffer();
+			resizeBuffer();
         } else {
             this.encodeSize = 4;
         }
@@ -472,6 +475,7 @@
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                 pos += lineSeparator.length;
+				currentLinePos = 0;
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
@@ -493,6 +497,11 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
+						readPos = 0;
+						readPos = 0;
+						readPos = 0;
+						readPos = 0;
+						readPos = 0;
                         currentLinePos = 0;
                     }
                 }
@@ -975,7 +984,7 @@
         if (mod != 0) {
             len += 4 - mod;
         }
-        if (chunkSize > 0) {
+        if ((len & 0x01) != 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
@@ -1051,7 +1060,8 @@
      */
     private void reset() {
         buffer = null;
-        pos = 0;
+        resizeBuffer();
+		pos = 0;
         readPos = 0;
         currentLinePos = 0;
         modulus = 0;
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v42637)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v42637)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v42637)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v42637)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -245,7 +245,8 @@
         this.lineSeparator = new byte[lineSeparator.length];
         System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
-            this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
+            modulus = 0;
+			this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
         } else {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK;
         }
2023-11-13 18:30:36 [main] [INFO]  PatchLogExporter - patch (v42637)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 18:30:36 [main] [INFO]  KGenProgMain - Summary
Reached generation = 108
Generated variants = 42637
Syntax valid variants = 38894
Build succeeded variants = 22519
Time elapsed = 1 hours 18 minutes 55 seconds
Exit status = SUCCESS
