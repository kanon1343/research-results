2023-11-13 18:30:39 [main] [WARN]  Configuration$Builder - The directory where kGenProg is running is different from the root directory of the given target project.
2023-11-13 18:30:39 [main] [WARN]  Configuration$Builder - If the target project includes test cases with file I/O, such test cases won't run correctly.
2023-11-13 18:30:39 [main] [WARN]  Configuration$Builder - We recommend you running kGenProg with the root directory of the target project as the current directory.
2023-11-13 18:30:39 [main] [INFO]  KGenProgMain - 
==================== kGenProg Configuration ====================
configPath = /Users/haradakanon/Downloads/kGenProg-1.8.2/example/codec9/kgenprog-9.toml (set by command line)
rootDir = /Users/haradakanon/Downloads/kGenProg-1.8.2/example/codec9 (set in config file)
productPaths = [/Users/haradakanon/Downloads/kGenProg-1.8.2/example/codec9/src/java] (set in config file)
testPaths = [/Users/haradakanon/Downloads/kGenProg-1.8.2/example/codec9/src/test] (set in config file)
classPaths = []
executionTests = [org.apache.commons.codec.binary.Base64Test] (set in config file)
outDir = kgenprog-out
logLevel = INFO (set in config file)
mutationGeneratingCount = 200 (set in config file)
crossoverGeneratingCount = 200 (set in config file)
headcount = 100
maxGeneration = 500 (set in config file)
timeLimit = PT24H (set in config file)
testTimeLimit = PT3M (set in config file)
requiredSolutionsCount = 100 (set in config file)
randomSeed = 3 (set by command line)
scope = PACKAGE (set in config file)
faultLocalization = Zoltar (set in config file)
mutationType = Simple
crossoverType = Random
firstVariantSelectionStrategy = Random
secondVariantSelectionStrategy = Random
isPatchOutput = true (set in config file)
isHistoryRecord = false
currentDirectory = /Users/haradakanon/Downloads/research
version = 1.8.2
================================================================
2023-11-13 18:30:47 [main] [INFO]  KGenProgMain - initial failed tests (1/51)
org.apache.commons.codec.binary.Base64Test.testCodec112: null

2023-11-13 18:30:47 [main] [INFO]  KGenProgMain - GA started
2023-11-13 18:30:47 [main] [INFO]  KGenProgMain - entered the era of 1st generation.
2023-11-13 18:30:59 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 seconds
Variants: generated 200, build-succeeded 18, build-failed 101, syntax-invalid 7, redundant 74
Fitness: max 0.98(7), min 0.353(1), ave 0.773
Test execution time: sum 2645 ms, max 318 ms, min 78 ms
----------------------------------------------------------------

2023-11-13 18:30:59 [main] [INFO]  KGenProgMain - entered the era of 2nd generation.
2023-11-13 18:31:11 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 23 seconds
Variants: generated 200, build-succeeded 39, build-failed 109, syntax-invalid 17, redundant 35
Fitness: max 0.98(7), min 0.157(1), ave 0.658
Test execution time: sum 3628 ms, max 175 ms, min 59 ms
----------------------------------------------------------------

2023-11-13 18:31:11 [main] [INFO]  KGenProgMain - entered the era of 3rd generation.
2023-11-13 18:31:31 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 43 seconds
Variants: generated 400, build-succeeded 133, build-failed 104, syntax-invalid 30, redundant 133
Fitness: max 0.98(15), min 0.333(1), ave 0.673
Test execution time: sum 9755 ms, max 186 ms, min 52 ms
----------------------------------------------------------------

2023-11-13 18:31:31 [main] [INFO]  KGenProgMain - entered the era of 4th generation.
2023-11-13 18:31:48 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 minutes 1 seconds
Variants: generated 400, build-succeeded 117, build-failed 117, syntax-invalid 21, redundant 145
Fitness: max 0.98(23), min 0.275(1), ave 0.834
Test execution time: sum 9267 ms, max 105 ms, min 52 ms
----------------------------------------------------------------

2023-11-13 18:31:48 [main] [INFO]  KGenProgMain - entered the era of 5th generation.
2023-11-13 18:32:17 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 minutes 29 seconds
Variants: generated 400, build-succeeded 134, build-failed 127, syntax-invalid 19, redundant 120
Fitness: max 0.98(40), min 0.353(1), ave 0.908
Test execution time: sum 16201 ms, max 4138 ms, min 53 ms
----------------------------------------------------------------

2023-11-13 18:32:17 [main] [INFO]  KGenProgMain - entered the era of 6th generation.
2023-11-13 18:32:38 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 minutes 50 seconds
Variants: generated 400, build-succeeded 109, build-failed 116, syntax-invalid 26, redundant 149
Fitness: max 1(2), min 0.49(2), ave 0.933
Test execution time: sum 11007 ms, max 359 ms, min 71 ms
----------------------------------------------------------------

2023-11-13 18:32:38 [main] [INFO]  KGenProgMain - entered the era of 7th generation.
2023-11-13 18:33:01 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 minutes 14 seconds
Variants: generated 400, build-succeeded 131, build-failed 111, syntax-invalid 33, redundant 125
Fitness: max 1(1), min 0.49(3), ave 0.931
Test execution time: sum 12048 ms, max 350 ms, min 70 ms
----------------------------------------------------------------

2023-11-13 18:33:01 [main] [INFO]  KGenProgMain - entered the era of 8th generation.
2023-11-13 18:33:29 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 minutes 42 seconds
Variants: generated 400, build-succeeded 117, build-failed 119, syntax-invalid 49, redundant 115
Fitness: max 1(3), min 0.49(3), ave 0.939
Test execution time: sum 15015 ms, max 2129 ms, min 57 ms
----------------------------------------------------------------

2023-11-13 18:33:29 [main] [INFO]  KGenProgMain - entered the era of 9th generation.
2023-11-13 18:33:57 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 minutes 10 seconds
Variants: generated 400, build-succeeded 143, build-failed 123, syntax-invalid 36, redundant 98
Fitness: max 1(1), min 0.49(2), ave 0.944
Test execution time: sum 15701 ms, max 454 ms, min 58 ms
----------------------------------------------------------------

2023-11-13 18:33:57 [main] [INFO]  KGenProgMain - entered the era of 10th generation.
2023-11-13 18:34:25 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 minutes 38 seconds
Variants: generated 400, build-succeeded 149, build-failed 125, syntax-invalid 37, redundant 89
Fitness: max 0.98(112), min 0.471(1), ave 0.932
Test execution time: sum 14605 ms, max 229 ms, min 62 ms
----------------------------------------------------------------

2023-11-13 18:34:25 [main] [INFO]  KGenProgMain - entered the era of 11th generation.
2023-11-13 18:34:52 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 minutes 5 seconds
Variants: generated 400, build-succeeded 164, build-failed 121, syntax-invalid 31, redundant 84
Fitness: max 0.98(133), min 0.49(1), ave 0.953
Test execution time: sum 14634 ms, max 412 ms, min 58 ms
----------------------------------------------------------------

2023-11-13 18:34:52 [main] [INFO]  KGenProgMain - entered the era of 12th generation.
2023-11-13 18:35:22 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 minutes 35 seconds
Variants: generated 400, build-succeeded 175, build-failed 117, syntax-invalid 35, redundant 73
Fitness: max 1(1), min 0.235(1), ave 0.934
Test execution time: sum 17138 ms, max 1653 ms, min 54 ms
----------------------------------------------------------------

2023-11-13 18:35:22 [main] [INFO]  KGenProgMain - entered the era of 13th generation.
2023-11-13 18:35:48 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 minutes 1 seconds
Variants: generated 400, build-succeeded 165, build-failed 129, syntax-invalid 34, redundant 72
Fitness: max 1(2), min 0.49(1), ave 0.962
Test execution time: sum 14592 ms, max 332 ms, min 55 ms
----------------------------------------------------------------

2023-11-13 18:35:48 [main] [INFO]  KGenProgMain - entered the era of 14th generation.
2023-11-13 18:36:22 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 minutes 35 seconds
Variants: generated 400, build-succeeded 172, build-failed 126, syntax-invalid 22, redundant 80
Fitness: max 1(1), min 0.49(3), ave 0.95
Test execution time: sum 19739 ms, max 575 ms, min 63 ms
----------------------------------------------------------------

2023-11-13 18:36:22 [main] [INFO]  KGenProgMain - entered the era of 15th generation.
2023-11-13 18:36:56 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 minutes 9 seconds
Variants: generated 400, build-succeeded 166, build-failed 119, syntax-invalid 41, redundant 74
Fitness: max 1(1), min 0.353(1), ave 0.948
Test execution time: sum 19907 ms, max 591 ms, min 72 ms
----------------------------------------------------------------

2023-11-13 18:36:56 [main] [INFO]  KGenProgMain - entered the era of 16th generation.
2023-11-13 18:37:33 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 minutes 45 seconds
Variants: generated 400, build-succeeded 175, build-failed 121, syntax-invalid 40, redundant 64
Fitness: max 1(1), min 0.333(1), ave 0.95
Test execution time: sum 21358 ms, max 3245 ms, min 57 ms
----------------------------------------------------------------

2023-11-13 18:37:33 [main] [INFO]  KGenProgMain - entered the era of 17th generation.
2023-11-13 18:38:04 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 minutes 16 seconds
Variants: generated 400, build-succeeded 188, build-failed 117, syntax-invalid 34, redundant 61
Fitness: max 1(2), min 0.49(2), ave 0.951
Test execution time: sum 17850 ms, max 382 ms, min 56 ms
----------------------------------------------------------------

2023-11-13 18:38:04 [main] [INFO]  KGenProgMain - entered the era of 18th generation.
2023-11-13 18:38:39 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 minutes 51 seconds
Variants: generated 400, build-succeeded 189, build-failed 126, syntax-invalid 39, redundant 46
Fitness: max 1(1), min 0.353(1), ave 0.961
Test execution time: sum 20108 ms, max 2088 ms, min 58 ms
----------------------------------------------------------------

2023-11-13 18:38:39 [main] [INFO]  KGenProgMain - entered the era of 19th generation.
2023-11-13 18:39:13 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 minutes 26 seconds
Variants: generated 400, build-succeeded 197, build-failed 131, syntax-invalid 32, redundant 40
Fitness: max 1(2), min 0.314(1), ave 0.95
Test execution time: sum 19855 ms, max 435 ms, min 55 ms
----------------------------------------------------------------

2023-11-13 18:39:13 [main] [INFO]  KGenProgMain - entered the era of 20th generation.
2023-11-13 18:39:52 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 minutes 4 seconds
Variants: generated 400, build-succeeded 217, build-failed 105, syntax-invalid 31, redundant 47
Fitness: max 0.98(164), min 0.275(1), ave 0.937
Test execution time: sum 22048 ms, max 386 ms, min 61 ms
----------------------------------------------------------------

2023-11-13 18:39:52 [main] [INFO]  KGenProgMain - entered the era of 21st generation.
2023-11-13 18:40:28 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 minutes 40 seconds
Variants: generated 400, build-succeeded 198, build-failed 127, syntax-invalid 36, redundant 39
Fitness: max 0.98(166), min 0.235(1), ave 0.952
Test execution time: sum 20884 ms, max 433 ms, min 60 ms
----------------------------------------------------------------

2023-11-13 18:40:28 [main] [INFO]  KGenProgMain - entered the era of 22nd generation.
2023-11-13 18:41:05 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 10 minutes 18 seconds
Variants: generated 400, build-succeeded 201, build-failed 116, syntax-invalid 30, redundant 53
Fitness: max 1(1), min 0.294(1), ave 0.949
Test execution time: sum 20910 ms, max 270 ms, min 58 ms
----------------------------------------------------------------

2023-11-13 18:41:05 [main] [INFO]  KGenProgMain - entered the era of 23rd generation.
2023-11-13 18:41:48 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 minutes 1 seconds
Variants: generated 400, build-succeeded 207, build-failed 125, syntax-invalid 42, redundant 26
Fitness: max 0.98(165), min 0.275(1), ave 0.938
Test execution time: sum 23048 ms, max 366 ms, min 62 ms
----------------------------------------------------------------

2023-11-13 18:41:48 [main] [INFO]  KGenProgMain - entered the era of 24th generation.
2023-11-13 18:42:22 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 minutes 34 seconds
Variants: generated 400, build-succeeded 206, build-failed 113, syntax-invalid 48, redundant 33
Fitness: max 1(1), min 0.49(3), ave 0.954
Test execution time: sum 19330 ms, max 418 ms, min 56 ms
----------------------------------------------------------------

2023-11-13 18:42:22 [main] [INFO]  KGenProgMain - entered the era of 25th generation.
2023-11-13 18:42:55 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 minutes 8 seconds
Variants: generated 400, build-succeeded 222, build-failed 120, syntax-invalid 33, redundant 25
Fitness: max 0.98(179), min 0.49(2), ave 0.953
Test execution time: sum 20032 ms, max 478 ms, min 56 ms
----------------------------------------------------------------

2023-11-13 18:42:55 [main] [INFO]  KGenProgMain - entered the era of 26th generation.
2023-11-13 18:43:32 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 minutes 45 seconds
Variants: generated 400, build-succeeded 206, build-failed 123, syntax-invalid 38, redundant 33
Fitness: max 0.98(171), min 0.216(1), ave 0.954
Test execution time: sum 21660 ms, max 293 ms, min 55 ms
----------------------------------------------------------------

2023-11-13 18:43:32 [main] [INFO]  KGenProgMain - entered the era of 27th generation.
2023-11-13 18:44:07 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 13 minutes 20 seconds
Variants: generated 400, build-succeeded 215, build-failed 118, syntax-invalid 40, redundant 27
Fitness: max 1(1), min 0.471(1), ave 0.948
Test execution time: sum 20107 ms, max 249 ms, min 63 ms
----------------------------------------------------------------

2023-11-13 18:44:07 [main] [INFO]  KGenProgMain - entered the era of 28th generation.
2023-11-13 18:44:37 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 13 minutes 49 seconds
Variants: generated 400, build-succeeded 196, build-failed 117, syntax-invalid 49, redundant 38
Fitness: max 1(3), min 0.49(2), ave 0.954
Test execution time: sum 16828 ms, max 401 ms, min 52 ms
----------------------------------------------------------------

2023-11-13 18:44:37 [main] [INFO]  KGenProgMain - entered the era of 29th generation.
2023-11-13 18:45:14 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 14 minutes 26 seconds
Variants: generated 400, build-succeeded 211, build-failed 123, syntax-invalid 38, redundant 28
Fitness: max 1(2), min 0.49(2), ave 0.955
Test execution time: sum 20734 ms, max 1308 ms, min 54 ms
----------------------------------------------------------------

2023-11-13 18:45:14 [main] [INFO]  KGenProgMain - entered the era of 30th generation.
2023-11-13 18:45:52 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 15 minutes 5 seconds
Variants: generated 400, build-succeeded 214, build-failed 118, syntax-invalid 36, redundant 32
Fitness: max 1(3), min 0.255(1), ave 0.954
Test execution time: sum 22269 ms, max 2141 ms, min 53 ms
----------------------------------------------------------------

2023-11-13 18:45:52 [main] [INFO]  KGenProgMain - entered the era of 31st generation.
2023-11-13 18:46:33 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 15 minutes 46 seconds
Variants: generated 400, build-succeeded 217, build-failed 119, syntax-invalid 45, redundant 19
Fitness: max 1(4), min 0.275(1), ave 0.947
Test execution time: sum 22388 ms, max 340 ms, min 55 ms
----------------------------------------------------------------

2023-11-13 18:46:33 [main] [INFO]  KGenProgMain - entered the era of 32nd generation.
2023-11-13 18:47:10 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 16 minutes 22 seconds
Variants: generated 400, build-succeeded 224, build-failed 122, syntax-invalid 32, redundant 22
Fitness: max 1(1), min 0.275(1), ave 0.945
Test execution time: sum 20148 ms, max 256 ms, min 55 ms
----------------------------------------------------------------

2023-11-13 18:47:10 [main] [INFO]  KGenProgMain - entered the era of 33rd generation.
2023-11-13 18:47:52 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 17 minutes 4 seconds
Variants: generated 400, build-succeeded 216, build-failed 120, syntax-invalid 37, redundant 27
Fitness: max 1(1), min 0.431(1), ave 0.954
Test execution time: sum 25498 ms, max 4360 ms, min 66 ms
----------------------------------------------------------------

2023-11-13 18:47:52 [main] [INFO]  KGenProgMain - entered the era of 34th generation.
2023-11-13 18:48:32 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 17 minutes 44 seconds
Variants: generated 400, build-succeeded 219, build-failed 128, syntax-invalid 26, redundant 27
Fitness: max 0.98(185), min 0.471(2), ave 0.952
Test execution time: sum 21631 ms, max 247 ms, min 59 ms
----------------------------------------------------------------

2023-11-13 18:48:32 [main] [INFO]  KGenProgMain - entered the era of 35th generation.
2023-11-13 18:49:15 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 18 minutes 27 seconds
Variants: generated 400, build-succeeded 229, build-failed 129, syntax-invalid 19, redundant 23
Fitness: max 0.98(194), min 0.353(2), ave 0.955
Test execution time: sum 24549 ms, max 625 ms, min 60 ms
----------------------------------------------------------------

2023-11-13 18:49:15 [main] [INFO]  KGenProgMain - entered the era of 36th generation.
2023-11-13 18:49:57 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 19 minutes 10 seconds
Variants: generated 400, build-succeeded 208, build-failed 132, syntax-invalid 31, redundant 29
Fitness: max 0.98(185), min 0.353(1), ave 0.961
Test execution time: sum 23524 ms, max 312 ms, min 65 ms
----------------------------------------------------------------

2023-11-13 18:49:57 [main] [INFO]  KGenProgMain - entered the era of 37th generation.
2023-11-13 18:50:35 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 19 minutes 48 seconds
Variants: generated 400, build-succeeded 202, build-failed 126, syntax-invalid 43, redundant 29
Fitness: max 1(2), min 0.49(3), ave 0.954
Test execution time: sum 19957 ms, max 343 ms, min 58 ms
----------------------------------------------------------------

2023-11-13 18:50:35 [main] [INFO]  KGenProgMain - entered the era of 38th generation.
2023-11-13 18:51:14 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 20 minutes 27 seconds
Variants: generated 400, build-succeeded 198, build-failed 133, syntax-invalid 47, redundant 22
Fitness: max 1(2), min 0.49(2), ave 0.958
Test execution time: sum 21674 ms, max 1871 ms, min 57 ms
----------------------------------------------------------------

2023-11-13 18:51:14 [main] [INFO]  KGenProgMain - entered the era of 39th generation.
2023-11-13 18:51:59 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 21 minutes 11 seconds
Variants: generated 400, build-succeeded 219, build-failed 118, syntax-invalid 37, redundant 26
Fitness: max 0.98(185), min 0.275(1), ave 0.951
Test execution time: sum 24330 ms, max 280 ms, min 70 ms
----------------------------------------------------------------

2023-11-13 18:51:59 [main] [INFO]  KGenProgMain - entered the era of 40th generation.
2023-11-13 18:52:43 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 21 minutes 56 seconds
Variants: generated 400, build-succeeded 218, build-failed 123, syntax-invalid 31, redundant 28
Fitness: max 1(1), min 0.235(1), ave 0.952
Test execution time: sum 23562 ms, max 298 ms, min 57 ms
----------------------------------------------------------------

2023-11-13 18:52:43 [main] [INFO]  KGenProgMain - entered the era of 41st generation.
2023-11-13 18:53:25 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 22 minutes 37 seconds
Variants: generated 400, build-succeeded 234, build-failed 118, syntax-invalid 28, redundant 20
Fitness: max 0.98(198), min 0.275(1), ave 0.958
Test execution time: sum 22976 ms, max 265 ms, min 61 ms
----------------------------------------------------------------

2023-11-13 18:53:25 [main] [INFO]  KGenProgMain - entered the era of 42nd generation.
2023-11-13 18:54:04 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 23 minutes 17 seconds
Variants: generated 400, build-succeeded 222, build-failed 117, syntax-invalid 44, redundant 17
Fitness: max 0.98(185), min 0.157(1), ave 0.953
Test execution time: sum 21518 ms, max 305 ms, min 60 ms
----------------------------------------------------------------

2023-11-13 18:54:04 [main] [INFO]  KGenProgMain - entered the era of 43rd generation.
2023-11-13 18:54:49 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 24 minutes 1 seconds
Variants: generated 400, build-succeeded 225, build-failed 115, syntax-invalid 30, redundant 30
Fitness: max 0.98(190), min 0.49(2), ave 0.954
Test execution time: sum 25377 ms, max 363 ms, min 67 ms
----------------------------------------------------------------

2023-11-13 18:54:49 [main] [INFO]  KGenProgMain - entered the era of 44th generation.
2023-11-13 18:55:27 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 24 minutes 40 seconds
Variants: generated 400, build-succeeded 215, build-failed 122, syntax-invalid 43, redundant 20
Fitness: max 0.98(187), min 0.157(1), ave 0.957
Test execution time: sum 21873 ms, max 1497 ms, min 57 ms
----------------------------------------------------------------

2023-11-13 18:55:27 [main] [INFO]  KGenProgMain - entered the era of 45th generation.
2023-11-13 18:56:09 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 25 minutes 21 seconds
Variants: generated 400, build-succeeded 217, build-failed 116, syntax-invalid 27, redundant 40
Fitness: max 1(1), min 0.314(1), ave 0.961
Test execution time: sum 23396 ms, max 402 ms, min 61 ms
----------------------------------------------------------------

2023-11-13 18:56:09 [main] [INFO]  KGenProgMain - entered the era of 46th generation.
2023-11-13 18:56:52 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 26 minutes 4 seconds
Variants: generated 400, build-succeeded 231, build-failed 125, syntax-invalid 29, redundant 15
Fitness: max 1(1), min 0.235(1), ave 0.951
Test execution time: sum 24100 ms, max 318 ms, min 60 ms
----------------------------------------------------------------

2023-11-13 18:56:52 [main] [INFO]  KGenProgMain - entered the era of 47th generation.
2023-11-13 18:57:32 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 26 minutes 44 seconds
Variants: generated 400, build-succeeded 226, build-failed 125, syntax-invalid 33, redundant 16
Fitness: max 1(1), min 0.333(1), ave 0.957
Test execution time: sum 22061 ms, max 254 ms, min 57 ms
----------------------------------------------------------------

2023-11-13 18:57:32 [main] [INFO]  KGenProgMain - entered the era of 48th generation.
2023-11-13 18:58:11 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 27 minutes 24 seconds
Variants: generated 400, build-succeeded 219, build-failed 118, syntax-invalid 40, redundant 23
Fitness: max 0.98(184), min 0.49(3), ave 0.951
Test execution time: sum 21854 ms, max 317 ms, min 63 ms
----------------------------------------------------------------

2023-11-13 18:58:11 [main] [INFO]  KGenProgMain - entered the era of 49th generation.
2023-11-13 18:58:55 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 28 minutes 8 seconds
Variants: generated 400, build-succeeded 237, build-failed 116, syntax-invalid 24, redundant 23
Fitness: max 1(1), min 0.471(1), ave 0.956
Test execution time: sum 23953 ms, max 242 ms, min 62 ms
----------------------------------------------------------------

2023-11-13 18:58:55 [main] [INFO]  KGenProgMain - entered the era of 50th generation.
2023-11-13 18:59:37 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 28 minutes 50 seconds
Variants: generated 400, build-succeeded 219, build-failed 121, syntax-invalid 34, redundant 26
Fitness: max 0.98(191), min 0.314(1), ave 0.95
Test execution time: sum 23886 ms, max 520 ms, min 65 ms
----------------------------------------------------------------

2023-11-13 18:59:37 [main] [INFO]  KGenProgMain - entered the era of 51st generation.
2023-11-13 19:00:18 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 29 minutes 31 seconds
Variants: generated 400, build-succeeded 214, build-failed 129, syntax-invalid 37, redundant 20
Fitness: max 1(1), min 0.333(1), ave 0.968
Test execution time: sum 23695 ms, max 351 ms, min 65 ms
----------------------------------------------------------------

2023-11-13 19:00:18 [main] [INFO]  KGenProgMain - entered the era of 52nd generation.
2023-11-13 19:00:58 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 30 minutes 10 seconds
Variants: generated 400, build-succeeded 227, build-failed 121, syntax-invalid 37, redundant 15
Fitness: max 1(1), min 0.216(1), ave 0.955
Test execution time: sum 21752 ms, max 262 ms, min 69 ms
----------------------------------------------------------------

2023-11-13 19:00:58 [main] [INFO]  KGenProgMain - entered the era of 53rd generation.
2023-11-13 19:01:50 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 31 minutes 2 seconds
Variants: generated 400, build-succeeded 222, build-failed 128, syntax-invalid 35, redundant 15
Fitness: max 1(4), min 0.275(1), ave 0.958
Test execution time: sum 30881 ms, max 6235 ms, min 64 ms
----------------------------------------------------------------

2023-11-13 19:01:50 [main] [INFO]  KGenProgMain - entered the era of 54th generation.
2023-11-13 19:02:49 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 32 minutes 2 seconds
Variants: generated 400, build-succeeded 233, build-failed 119, syntax-invalid 25, redundant 23
Fitness: max 1(1), min 0.49(2), ave 0.955
Test execution time: sum 35396 ms, max 7275 ms, min 58 ms
----------------------------------------------------------------

2023-11-13 19:02:49 [main] [INFO]  KGenProgMain - entered the era of 55th generation.
2023-11-13 19:03:33 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 32 minutes 46 seconds
Variants: generated 400, build-succeeded 201, build-failed 134, syntax-invalid 44, redundant 21
Fitness: max 0.98(170), min 0.353(1), ave 0.949
Test execution time: sum 22715 ms, max 422 ms, min 62 ms
----------------------------------------------------------------

2023-11-13 19:03:33 [main] [INFO]  KGenProgMain - entered the era of 56th generation.
2023-11-13 19:04:19 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 33 minutes 32 seconds
Variants: generated 400, build-succeeded 226, build-failed 106, syntax-invalid 47, redundant 21
Fitness: max 0.98(184), min 0.235(1), ave 0.952
Test execution time: sum 24876 ms, max 287 ms, min 75 ms
----------------------------------------------------------------

2023-11-13 19:04:19 [main] [INFO]  KGenProgMain - entered the era of 57th generation.
2023-11-13 19:05:10 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 34 minutes 22 seconds
Variants: generated 400, build-succeeded 229, build-failed 118, syntax-invalid 32, redundant 21
Fitness: max 0.98(197), min 0.353(1), ave 0.961
Test execution time: sum 26406 ms, max 307 ms, min 78 ms
----------------------------------------------------------------

2023-11-13 19:05:10 [main] [INFO]  KGenProgMain - entered the era of 58th generation.
2023-11-13 19:05:51 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 35 minutes 4 seconds
Variants: generated 400, build-succeeded 223, build-failed 127, syntax-invalid 29, redundant 21
Fitness: max 0.98(190), min 0.49(2), ave 0.958
Test execution time: sum 21248 ms, max 228 ms, min 63 ms
----------------------------------------------------------------

2023-11-13 19:05:51 [main] [INFO]  KGenProgMain - entered the era of 59th generation.
2023-11-13 19:06:37 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 35 minutes 50 seconds
Variants: generated 400, build-succeeded 223, build-failed 122, syntax-invalid 31, redundant 24
Fitness: max 0.98(197), min 0.549(1), ave 0.965
Test execution time: sum 23067 ms, max 344 ms, min 66 ms
----------------------------------------------------------------

2023-11-13 19:06:37 [main] [INFO]  KGenProgMain - entered the era of 60th generation.
2023-11-13 19:07:26 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 36 minutes 39 seconds
Variants: generated 400, build-succeeded 224, build-failed 121, syntax-invalid 26, redundant 29
Fitness: max 0.98(198), min 0.314(1), ave 0.961
Test execution time: sum 25795 ms, max 515 ms, min 73 ms
----------------------------------------------------------------

2023-11-13 19:07:26 [main] [INFO]  KGenProgMain - entered the era of 61st generation.
2023-11-13 19:08:12 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 37 minutes 24 seconds
Variants: generated 400, build-succeeded 221, build-failed 119, syntax-invalid 29, redundant 31
Fitness: max 1(1), min 0.235(1), ave 0.963
Test execution time: sum 24131 ms, max 241 ms, min 72 ms
----------------------------------------------------------------

2023-11-13 19:08:12 [main] [INFO]  KGenProgMain - entered the era of 62nd generation.
2023-11-13 19:09:01 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 38 minutes 14 seconds
Variants: generated 400, build-succeeded 243, build-failed 110, syntax-invalid 23, redundant 24
Fitness: max 1(1), min 0.353(1), ave 0.959
Test execution time: sum 26670 ms, max 355 ms, min 71 ms
----------------------------------------------------------------

2023-11-13 19:09:01 [main] [INFO]  KGenProgMain - entered the era of 63rd generation.
2023-11-13 19:09:47 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 39 minutes 0 seconds
Variants: generated 400, build-succeeded 216, build-failed 129, syntax-invalid 37, redundant 18
Fitness: max 0.98(188), min 0.549(3), ave 0.958
Test execution time: sum 24678 ms, max 364 ms, min 90 ms
----------------------------------------------------------------

2023-11-13 19:09:47 [main] [INFO]  KGenProgMain - entered the era of 64th generation.
2023-11-13 19:10:35 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 39 minutes 48 seconds
Variants: generated 400, build-succeeded 229, build-failed 127, syntax-invalid 27, redundant 17
Fitness: max 0.98(203), min 0.471(1), ave 0.96
Test execution time: sum 25147 ms, max 351 ms, min 74 ms
----------------------------------------------------------------

2023-11-13 19:10:35 [main] [INFO]  KGenProgMain - entered the era of 65th generation.
2023-11-13 19:11:24 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 40 minutes 37 seconds
Variants: generated 400, build-succeeded 222, build-failed 116, syntax-invalid 35, redundant 27
Fitness: max 1(3), min 0.49(2), ave 0.959
Test execution time: sum 24969 ms, max 1121 ms, min 72 ms
----------------------------------------------------------------

2023-11-13 19:11:24 [main] [INFO]  KGenProgMain - entered the era of 66th generation.
2023-11-13 19:12:12 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 41 minutes 25 seconds
Variants: generated 400, build-succeeded 223, build-failed 120, syntax-invalid 34, redundant 23
Fitness: max 0.98(197), min 0.49(4), ave 0.956
Test execution time: sum 24294 ms, max 246 ms, min 65 ms
----------------------------------------------------------------

2023-11-13 19:12:12 [main] [INFO]  KGenProgMain - entered the era of 67th generation.
2023-11-13 19:13:03 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 42 minutes 15 seconds
Variants: generated 400, build-succeeded 234, build-failed 114, syntax-invalid 30, redundant 22
Fitness: max 1(1), min 0.471(1), ave 0.962
Test execution time: sum 25577 ms, max 244 ms, min 74 ms
----------------------------------------------------------------

2023-11-13 19:13:03 [main] [INFO]  KGenProgMain - entered the era of 68th generation.
2023-11-13 19:13:50 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 43 minutes 3 seconds
Variants: generated 400, build-succeeded 216, build-failed 122, syntax-invalid 33, redundant 29
Fitness: max 1(1), min 0.333(1), ave 0.962
Test execution time: sum 23492 ms, max 225 ms, min 71 ms
----------------------------------------------------------------

2023-11-13 19:13:50 [main] [INFO]  KGenProgMain - entered the era of 69th generation.
2023-11-13 19:14:39 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 43 minutes 52 seconds
Variants: generated 400, build-succeeded 230, build-failed 119, syntax-invalid 30, redundant 21
Fitness: max 0.98(197), min 0.49(3), ave 0.955
Test execution time: sum 24747 ms, max 226 ms, min 69 ms
----------------------------------------------------------------

2023-11-13 19:14:39 [main] [INFO]  KGenProgMain - entered the era of 70th generation.
2023-11-13 19:15:25 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 44 minutes 37 seconds
Variants: generated 400, build-succeeded 215, build-failed 126, syntax-invalid 39, redundant 20
Fitness: max 1(1), min 0.549(1), ave 0.958
Test execution time: sum 23639 ms, max 301 ms, min 81 ms
----------------------------------------------------------------

2023-11-13 19:15:25 [main] [INFO]  KGenProgMain - entered the era of 71st generation.
2023-11-13 19:16:10 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 45 minutes 22 seconds
Variants: generated 400, build-succeeded 218, build-failed 125, syntax-invalid 38, redundant 19
Fitness: max 0.98(189), min 0.549(1), ave 0.965
Test execution time: sum 23539 ms, max 233 ms, min 84 ms
----------------------------------------------------------------

2023-11-13 19:16:10 [main] [INFO]  KGenProgMain - entered the era of 72nd generation.
2023-11-13 19:17:00 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 46 minutes 13 seconds
Variants: generated 400, build-succeeded 217, build-failed 119, syntax-invalid 37, redundant 27
Fitness: max 0.98(186), min 0.49(2), ave 0.959
Test execution time: sum 24821 ms, max 1036 ms, min 73 ms
----------------------------------------------------------------

2023-11-13 19:17:00 [main] [INFO]  KGenProgMain - entered the era of 73rd generation.
2023-11-13 19:17:47 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 47 minutes 0 seconds
Variants: generated 400, build-succeeded 214, build-failed 123, syntax-invalid 39, redundant 24
Fitness: max 1(3), min 0.49(1), ave 0.962
Test execution time: sum 23412 ms, max 261 ms, min 77 ms
----------------------------------------------------------------

2023-11-13 19:17:47 [main] [INFO]  KGenProgMain - entered the era of 74th generation.
2023-11-13 19:18:39 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 47 minutes 52 seconds
Variants: generated 400, build-succeeded 242, build-failed 111, syntax-invalid 30, redundant 17
Fitness: max 1(3), min 0.255(1), ave 0.954
Test execution time: sum 26535 ms, max 272 ms, min 68 ms
----------------------------------------------------------------

2023-11-13 19:18:39 [main] [INFO]  KGenProgMain - entered the era of 75th generation.
2023-11-13 19:19:31 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 48 minutes 44 seconds
Variants: generated 400, build-succeeded 228, build-failed 110, syntax-invalid 34, redundant 28
Fitness: max 1(3), min 0.49(3), ave 0.958
Test execution time: sum 26266 ms, max 1098 ms, min 82 ms
----------------------------------------------------------------

2023-11-13 19:19:31 [main] [INFO]  KGenProgMain - entered the era of 76th generation.
2023-11-13 19:20:22 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 49 minutes 35 seconds
Variants: generated 400, build-succeeded 225, build-failed 107, syntax-invalid 33, redundant 35
Fitness: max 1(2), min 0.255(1), ave 0.962
Test execution time: sum 25013 ms, max 236 ms, min 70 ms
----------------------------------------------------------------

2023-11-13 19:20:22 [main] [INFO]  KGenProgMain - entered the era of 77th generation.
2023-11-13 19:21:13 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 50 minutes 26 seconds
Variants: generated 400, build-succeeded 232, build-failed 121, syntax-invalid 22, redundant 25
Fitness: max 0.98(208), min 0.549(1), ave 0.965
Test execution time: sum 25916 ms, max 264 ms, min 79 ms
----------------------------------------------------------------

2023-11-13 19:21:13 [main] [INFO]  KGenProgMain - entered the era of 78th generation.
2023-11-13 19:22:07 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 51 minutes 20 seconds
Variants: generated 400, build-succeeded 218, build-failed 127, syntax-invalid 34, redundant 21
Fitness: max 1(4), min 0.49(2), ave 0.966
Test execution time: sum 25950 ms, max 1030 ms, min 69 ms
----------------------------------------------------------------

2023-11-13 19:22:07 [main] [INFO]  KGenProgMain - entered the era of 79th generation.
2023-11-13 19:22:58 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 52 minutes 11 seconds
Variants: generated 400, build-succeeded 220, build-failed 131, syntax-invalid 36, redundant 13
Fitness: max 0.98(192), min 0.49(2), ave 0.958
Test execution time: sum 24253 ms, max 241 ms, min 72 ms
----------------------------------------------------------------

2023-11-13 19:22:58 [main] [INFO]  KGenProgMain - entered the era of 80th generation.
2023-11-13 19:23:51 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 53 minutes 4 seconds
Variants: generated 400, build-succeeded 234, build-failed 113, syntax-invalid 30, redundant 23
Fitness: max 1(1), min 0.353(1), ave 0.964
Test execution time: sum 26744 ms, max 264 ms, min 81 ms
----------------------------------------------------------------

2023-11-13 19:23:51 [main] [INFO]  KGenProgMain - entered the era of 81st generation.
2023-11-13 19:24:46 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 53 minutes 59 seconds
Variants: generated 400, build-succeeded 224, build-failed 117, syntax-invalid 36, redundant 23
Fitness: max 1(1), min 0.431(1), ave 0.959
Test execution time: sum 26813 ms, max 1577 ms, min 80 ms
----------------------------------------------------------------

2023-11-13 19:24:46 [main] [INFO]  KGenProgMain - entered the era of 82nd generation.
2023-11-13 19:25:37 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 54 minutes 50 seconds
Variants: generated 400, build-succeeded 226, build-failed 115, syntax-invalid 33, redundant 26
Fitness: max 0.98(195), min 0.353(1), ave 0.955
Test execution time: sum 25026 ms, max 222 ms, min 77 ms
----------------------------------------------------------------

2023-11-13 19:25:37 [main] [INFO]  KGenProgMain - entered the era of 83rd generation.
2023-11-13 19:26:28 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 55 minutes 40 seconds
Variants: generated 400, build-succeeded 216, build-failed 114, syntax-invalid 50, redundant 20
Fitness: max 0.98(183), min 0.471(1), ave 0.954
Test execution time: sum 24190 ms, max 242 ms, min 71 ms
----------------------------------------------------------------

2023-11-13 19:26:28 [main] [INFO]  KGenProgMain - entered the era of 84th generation.
2023-11-13 19:27:20 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 56 minutes 33 seconds
Variants: generated 400, build-succeeded 233, build-failed 119, syntax-invalid 32, redundant 16
Fitness: max 0.98(196), min 0.333(1), ave 0.953
Test execution time: sum 25882 ms, max 223 ms, min 69 ms
----------------------------------------------------------------

2023-11-13 19:27:20 [main] [INFO]  KGenProgMain - entered the era of 85th generation.
2023-11-13 19:28:16 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 57 minutes 28 seconds
Variants: generated 400, build-succeeded 233, build-failed 116, syntax-invalid 30, redundant 21
Fitness: max 1(1), min 0.549(1), ave 0.965
Test execution time: sum 27082 ms, max 1196 ms, min 84 ms
----------------------------------------------------------------

2023-11-13 19:28:16 [main] [INFO]  KGenProgMain - entered the era of 86th generation.
2023-11-13 19:29:09 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 58 minutes 22 seconds
Variants: generated 400, build-succeeded 234, build-failed 109, syntax-invalid 23, redundant 34
Fitness: max 1(1), min 0.49(2), ave 0.96
Test execution time: sum 26375 ms, max 255 ms, min 86 ms
----------------------------------------------------------------

2023-11-13 19:29:09 [main] [INFO]  KGenProgMain - entered the era of 87th generation.
2023-11-13 19:30:05 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 59 minutes 18 seconds
Variants: generated 400, build-succeeded 254, build-failed 94, syntax-invalid 22, redundant 30
Fitness: max 0.98(213), min 0.471(1), ave 0.954
Test execution time: sum 28338 ms, max 225 ms, min 79 ms
----------------------------------------------------------------

2023-11-13 19:30:05 [main] [INFO]  KGenProgMain - entered the era of 88th generation.
2023-11-13 19:31:00 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 13 seconds
Variants: generated 400, build-succeeded 240, build-failed 120, syntax-invalid 16, redundant 24
Fitness: max 1(1), min 0.49(1), ave 0.961
Test execution time: sum 27051 ms, max 244 ms, min 76 ms
----------------------------------------------------------------

2023-11-13 19:31:00 [main] [INFO]  KGenProgMain - entered the era of 89th generation.
2023-11-13 19:31:56 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 1 minutes 9 seconds
Variants: generated 400, build-succeeded 238, build-failed 107, syntax-invalid 35, redundant 20
Fitness: max 0.98(201), min 0.49(1), ave 0.962
Test execution time: sum 28106 ms, max 1949 ms, min 80 ms
----------------------------------------------------------------

2023-11-13 19:31:56 [main] [INFO]  KGenProgMain - entered the era of 90th generation.
2023-11-13 19:32:59 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 2 minutes 11 seconds
Variants: generated 400, build-succeeded 231, build-failed 106, syntax-invalid 41, redundant 22
Fitness: max 0.98(200), min 0.49(1), ave 0.964
Test execution time: sum 33171 ms, max 3048 ms, min 77 ms
----------------------------------------------------------------

2023-11-13 19:32:59 [main] [INFO]  KGenProgMain - entered the era of 91st generation.
2023-11-13 19:33:55 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 3 minutes 8 seconds
Variants: generated 400, build-succeeded 244, build-failed 108, syntax-invalid 27, redundant 21
Fitness: max 0.98(202), min 0.49(1), ave 0.961
Test execution time: sum 27367 ms, max 406 ms, min 74 ms
----------------------------------------------------------------

2023-11-13 19:33:55 [main] [INFO]  KGenProgMain - entered the era of 92nd generation.
2023-11-13 19:34:50 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 4 minutes 3 seconds
Variants: generated 400, build-succeeded 241, build-failed 106, syntax-invalid 25, redundant 28
Fitness: max 0.98(208), min 0.275(1), ave 0.957
Test execution time: sum 26584 ms, max 220 ms, min 71 ms
----------------------------------------------------------------

2023-11-13 19:34:50 [main] [INFO]  KGenProgMain - entered the era of 93rd generation.
2023-11-13 19:35:46 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 4 minutes 58 seconds
Variants: generated 400, build-succeeded 244, build-failed 115, syntax-invalid 23, redundant 18
Fitness: max 0.98(212), min 0.353(1), ave 0.962
Test execution time: sum 27237 ms, max 239 ms, min 78 ms
----------------------------------------------------------------

2023-11-13 19:35:46 [main] [INFO]  KGenProgMain - entered the era of 94th generation.
2023-11-13 19:36:39 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 5 minutes 52 seconds
Variants: generated 400, build-succeeded 230, build-failed 114, syntax-invalid 32, redundant 24
Fitness: max 0.98(203), min 0.471(1), ave 0.963
Test execution time: sum 25349 ms, max 243 ms, min 66 ms
----------------------------------------------------------------

2023-11-13 19:36:39 [main] [INFO]  KGenProgMain - entered the era of 95th generation.
2023-11-13 19:37:35 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 6 minutes 48 seconds
Variants: generated 400, build-succeeded 244, build-failed 119, syntax-invalid 23, redundant 14
Fitness: max 1(2), min 0.137(1), ave 0.952
Test execution time: sum 27006 ms, max 237 ms, min 69 ms
----------------------------------------------------------------

2023-11-13 19:37:35 [main] [INFO]  KGenProgMain - entered the era of 96th generation.
2023-11-13 19:38:33 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 7 minutes 46 seconds
Variants: generated 400, build-succeeded 233, build-failed 109, syntax-invalid 37, redundant 21
Fitness: max 1(1), min 0.49(2), ave 0.958
Test execution time: sum 27966 ms, max 2372 ms, min 78 ms
----------------------------------------------------------------

2023-11-13 19:38:33 [main] [INFO]  KGenProgMain - entered the era of 97th generation.
2023-11-13 19:39:30 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 8 minutes 43 seconds
Variants: generated 400, build-succeeded 249, build-failed 106, syntax-invalid 30, redundant 15
Fitness: max 1(1), min 0.353(1), ave 0.956
Test execution time: sum 27572 ms, max 228 ms, min 71 ms
----------------------------------------------------------------

2023-11-13 19:39:30 [main] [INFO]  KGenProgMain - entered the era of 98th generation.
2023-11-13 19:40:22 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 9 minutes 34 seconds
Variants: generated 400, build-succeeded 220, build-failed 111, syntax-invalid 38, redundant 31
Fitness: max 0.98(189), min 0.216(1), ave 0.953
Test execution time: sum 24463 ms, max 235 ms, min 69 ms
----------------------------------------------------------------

2023-11-13 19:40:22 [main] [INFO]  KGenProgMain - entered the era of 99th generation.
2023-11-13 19:41:14 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 10 minutes 27 seconds
Variants: generated 400, build-succeeded 223, build-failed 118, syntax-invalid 43, redundant 16
Fitness: max 1(1), min 0.216(1), ave 0.962
Test execution time: sum 24971 ms, max 257 ms, min 74 ms
----------------------------------------------------------------

2023-11-13 19:41:14 [main] [INFO]  KGenProgMain - entered the era of 100th generation.
2023-11-13 19:42:14 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 11 minutes 26 seconds
Variants: generated 400, build-succeeded 231, build-failed 105, syntax-invalid 37, redundant 27
Fitness: max 0.98(196), min 0.549(2), ave 0.959
Test execution time: sum 27946 ms, max 941 ms, min 89 ms
----------------------------------------------------------------

2023-11-13 19:42:14 [main] [INFO]  KGenProgMain - entered the era of 101st generation.
2023-11-13 19:43:11 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 12 minutes 24 seconds
Variants: generated 400, build-succeeded 239, build-failed 105, syntax-invalid 32, redundant 24
Fitness: max 0.98(201), min 0.275(1), ave 0.954
Test execution time: sum 27687 ms, max 732 ms, min 80 ms
----------------------------------------------------------------

2023-11-13 19:43:11 [main] [INFO]  KGenProgMain - entered the era of 102nd generation.
2023-11-13 19:44:03 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 13 minutes 16 seconds
Variants: generated 400, build-succeeded 218, build-failed 115, syntax-invalid 40, redundant 27
Fitness: max 0.98(188), min 0.471(1), ave 0.959
Test execution time: sum 24750 ms, max 252 ms, min 71 ms
----------------------------------------------------------------

2023-11-13 19:44:03 [main] [INFO]  KGenProgMain - entered the era of 103rd generation.
2023-11-13 19:45:00 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 14 minutes 12 seconds
Variants: generated 400, build-succeeded 232, build-failed 130, syntax-invalid 17, redundant 21
Fitness: max 0.98(209), min 0.549(2), ave 0.965
Test execution time: sum 26654 ms, max 233 ms, min 73 ms
----------------------------------------------------------------

2023-11-13 19:45:00 [main] [INFO]  KGenProgMain - entered the era of 104th generation.
2023-11-13 19:46:01 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 15 minutes 14 seconds
Variants: generated 400, build-succeeded 230, build-failed 127, syntax-invalid 30, redundant 13
Fitness: max 0.98(204), min 0.333(1), ave 0.963
Test execution time: sum 29293 ms, max 1879 ms, min 89 ms
----------------------------------------------------------------

2023-11-13 19:46:01 [main] [INFO]  KGenProgMain - entered the era of 105th generation.
2023-11-13 19:46:56 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 16 minutes 9 seconds
Variants: generated 400, build-succeeded 231, build-failed 121, syntax-invalid 20, redundant 28
Fitness: max 1(1), min 0.49(3), ave 0.966
Test execution time: sum 26187 ms, max 217 ms, min 74 ms
----------------------------------------------------------------

2023-11-13 19:46:57 [main] [INFO]  KGenProgMain - entered the era of 106th generation.
2023-11-13 19:47:50 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 17 minutes 3 seconds
Variants: generated 400, build-succeeded 219, build-failed 120, syntax-invalid 35, redundant 26
Fitness: max 0.98(194), min 0.49(2), ave 0.962
Test execution time: sum 24815 ms, max 231 ms, min 71 ms
----------------------------------------------------------------

2023-11-13 19:47:50 [main] [INFO]  KGenProgMain - entered the era of 107th generation.
2023-11-13 19:48:49 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 18 minutes 2 seconds
Variants: generated 400, build-succeeded 245, build-failed 123, syntax-invalid 17, redundant 15
Fitness: max 0.98(216), min 0.471(1), ave 0.96
Test execution time: sum 27581 ms, max 222 ms, min 71 ms
----------------------------------------------------------------

2023-11-13 19:48:49 [main] [INFO]  KGenProgMain - entered the era of 108th generation.
2023-11-13 19:49:45 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 18 minutes 57 seconds
Variants: generated 400, build-succeeded 227, build-failed 128, syntax-invalid 22, redundant 23
Fitness: max 0.98(190), min 0.216(1), ave 0.948
Test execution time: sum 26581 ms, max 1488 ms, min 73 ms
----------------------------------------------------------------

2023-11-13 19:49:45 [main] [INFO]  KGenProgMain - entered the era of 109th generation.
2023-11-13 19:50:40 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 19 minutes 53 seconds
Variants: generated 400, build-succeeded 230, build-failed 123, syntax-invalid 23, redundant 24
Fitness: max 0.98(205), min 0.275(1), ave 0.966
Test execution time: sum 25951 ms, max 247 ms, min 85 ms
----------------------------------------------------------------

2023-11-13 19:50:40 [main] [INFO]  KGenProgMain - entered the era of 110th generation.
2023-11-13 19:51:35 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 20 minutes 48 seconds
Variants: generated 400, build-succeeded 234, build-failed 114, syntax-invalid 30, redundant 22
Fitness: max 0.98(208), min 0.49(4), ave 0.958
Test execution time: sum 25949 ms, max 245 ms, min 70 ms
----------------------------------------------------------------

2023-11-13 19:51:35 [main] [INFO]  KGenProgMain - entered the era of 111th generation.
2023-11-13 19:52:37 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 21 minutes 50 seconds
Variants: generated 400, build-succeeded 251, build-failed 104, syntax-invalid 22, redundant 23
Fitness: max 0.98(208), min 0.216(1), ave 0.949
Test execution time: sum 29587 ms, max 1200 ms, min 72 ms
----------------------------------------------------------------

2023-11-13 19:52:37 [main] [INFO]  KGenProgMain - entered the era of 112th generation.
2023-11-13 19:53:33 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 22 minutes 46 seconds
Variants: generated 400, build-succeeded 232, build-failed 112, syntax-invalid 27, redundant 29
Fitness: max 0.98(199), min 0.353(1), ave 0.957
Test execution time: sum 26142 ms, max 224 ms, min 82 ms
----------------------------------------------------------------

2023-11-13 19:53:33 [main] [INFO]  KGenProgMain - entered the era of 113th generation.
2023-11-13 19:54:31 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 23 minutes 43 seconds
Variants: generated 400, build-succeeded 224, build-failed 113, syntax-invalid 40, redundant 23
Fitness: max 1(1), min 0.275(1), ave 0.959
Test execution time: sum 26791 ms, max 886 ms, min 70 ms
----------------------------------------------------------------

2023-11-13 19:54:31 [main] [INFO]  KGenProgMain - entered the era of 114th generation.
2023-11-13 19:55:32 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 24 minutes 45 seconds
Variants: generated 400, build-succeeded 251, build-failed 117, syntax-invalid 19, redundant 13
Fitness: max 1(2), min 0.49(1), ave 0.962
Test execution time: sum 30790 ms, max 1855 ms, min 81 ms
----------------------------------------------------------------

2023-11-13 19:55:32 [main] [INFO]  KGenProgMain - entered the era of 115th generation.
2023-11-13 19:56:31 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 25 minutes 44 seconds
Variants: generated 400, build-succeeded 240, build-failed 113, syntax-invalid 28, redundant 19
Fitness: max 1(1), min 0.353(1), ave 0.961
Test execution time: sum 27426 ms, max 287 ms, min 71 ms
----------------------------------------------------------------

2023-11-13 19:56:31 [main] [INFO]  KGenProgMain - entered the era of 116th generation.
2023-11-13 19:57:30 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 26 minutes 42 seconds
Variants: generated 400, build-succeeded 230, build-failed 125, syntax-invalid 27, redundant 18
Fitness: max 1(1), min 0.431(1), ave 0.959
Test execution time: sum 26538 ms, max 227 ms, min 77 ms
----------------------------------------------------------------

2023-11-13 19:57:30 [main] [INFO]  KGenProgMain - entered the era of 117th generation.
2023-11-13 19:58:32 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 27 minutes 45 seconds
Variants: generated 400, build-succeeded 245, build-failed 108, syntax-invalid 17, redundant 30
Fitness: max 0.98(216), min 0.275(1), ave 0.958
Test execution time: sum 29608 ms, max 1264 ms, min 73 ms
----------------------------------------------------------------

2023-11-13 19:58:32 [main] [INFO]  KGenProgMain - entered the era of 118th generation.
2023-11-13 19:59:35 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 28 minutes 48 seconds
Variants: generated 400, build-succeeded 244, build-failed 114, syntax-invalid 19, redundant 23
Fitness: max 1(1), min 0.49(2), ave 0.957
Test execution time: sum 29949 ms, max 1910 ms, min 79 ms
----------------------------------------------------------------

2023-11-13 19:59:35 [main] [INFO]  KGenProgMain - entered the era of 119th generation.
2023-11-13 20:00:32 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 29 minutes 45 seconds
Variants: generated 400, build-succeeded 216, build-failed 131, syntax-invalid 28, redundant 25
Fitness: max 1(1), min 0.49(1), ave 0.971
Test execution time: sum 25012 ms, max 236 ms, min 81 ms
----------------------------------------------------------------

2023-11-13 20:00:32 [main] [INFO]  KGenProgMain - entered the era of 120th generation.
2023-11-13 20:01:32 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 30 minutes 45 seconds
Variants: generated 400, build-succeeded 231, build-failed 124, syntax-invalid 27, redundant 18
Fitness: max 0.98(207), min 0.549(2), ave 0.962
Test execution time: sum 27085 ms, max 222 ms, min 87 ms
----------------------------------------------------------------

2023-11-13 20:01:32 [main] [INFO]  KGenProgMain - entered the era of 121st generation.
2023-11-13 20:02:32 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 31 minutes 45 seconds
Variants: generated 400, build-succeeded 238, build-failed 128, syntax-invalid 18, redundant 16
Fitness: max 1(1), min 0.353(1), ave 0.956
Test execution time: sum 27803 ms, max 362 ms, min 82 ms
----------------------------------------------------------------

2023-11-13 20:02:32 [main] [INFO]  KGenProgMain - entered the era of 122nd generation.
2023-11-13 20:03:35 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 32 minutes 47 seconds
Variants: generated 400, build-succeeded 248, build-failed 112, syntax-invalid 20, redundant 20
Fitness: max 0.98(220), min 0.235(1), ave 0.955
Test execution time: sum 28749 ms, max 227 ms, min 77 ms
----------------------------------------------------------------

2023-11-13 20:03:35 [main] [INFO]  KGenProgMain - entered the era of 123rd generation.
2023-11-13 20:04:35 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 33 minutes 48 seconds
Variants: generated 400, build-succeeded 238, build-failed 109, syntax-invalid 25, redundant 28
Fitness: max 1(2), min 0.49(1), ave 0.961
Test execution time: sum 27895 ms, max 233 ms, min 77 ms
----------------------------------------------------------------

2023-11-13 20:04:35 [main] [INFO]  KGenProgMain - entered the era of 124th generation.
2023-11-13 20:05:38 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 34 minutes 51 seconds
Variants: generated 400, build-succeeded 236, build-failed 109, syntax-invalid 29, redundant 26
Fitness: max 1(1), min 0.549(1), ave 0.971
Test execution time: sum 29963 ms, max 2356 ms, min 93 ms
----------------------------------------------------------------

2023-11-13 20:05:38 [main] [INFO]  KGenProgMain - entered the era of 125th generation.
2023-11-13 20:06:38 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 35 minutes 51 seconds
Variants: generated 400, build-succeeded 239, build-failed 111, syntax-invalid 28, redundant 22
Fitness: max 1(2), min 0.353(2), ave 0.957
Test execution time: sum 27970 ms, max 236 ms, min 77 ms
----------------------------------------------------------------

2023-11-13 20:06:38 [main] [INFO]  KGenProgMain - entered the era of 126th generation.
2023-11-13 20:07:43 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 36 minutes 56 seconds
Variants: generated 400, build-succeeded 249, build-failed 105, syntax-invalid 21, redundant 25
Fitness: max 0.98(222), min 0.314(1), ave 0.958
Test execution time: sum 30055 ms, max 316 ms, min 76 ms
----------------------------------------------------------------

2023-11-13 20:07:43 [main] [INFO]  KGenProgMain - entered the era of 127th generation.
2023-11-13 20:08:46 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 37 minutes 59 seconds
Variants: generated 400, build-succeeded 238, build-failed 123, syntax-invalid 26, redundant 13
Fitness: max 0.98(208), min 0.137(1), ave 0.949
Test execution time: sum 28286 ms, max 245 ms, min 82 ms
----------------------------------------------------------------

2023-11-13 20:08:46 [main] [INFO]  KGenProgMain - entered the era of 128th generation.
2023-11-13 20:09:48 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 39 minutes 1 seconds
Variants: generated 400, build-succeeded 230, build-failed 118, syntax-invalid 25, redundant 27
Fitness: max 0.98(207), min 0.49(2), ave 0.964
Test execution time: sum 27565 ms, max 263 ms, min 82 ms
----------------------------------------------------------------

2023-11-13 20:09:48 [main] [INFO]  KGenProgMain - entered the era of 129th generation.
2023-11-13 20:10:49 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 40 minutes 2 seconds
Variants: generated 400, build-succeeded 220, build-failed 135, syntax-invalid 25, redundant 20
Fitness: max 1(1), min 0.314(1), ave 0.96
Test execution time: sum 26475 ms, max 222 ms, min 78 ms
----------------------------------------------------------------

2023-11-13 20:10:49 [main] [INFO]  KGenProgMain - entered the era of 130th generation.
2023-11-13 20:11:52 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 41 minutes 5 seconds
Variants: generated 400, build-succeeded 235, build-failed 120, syntax-invalid 22, redundant 23
Fitness: max 0.98(210), min 0.333(1), ave 0.962
Test execution time: sum 28519 ms, max 281 ms, min 92 ms
----------------------------------------------------------------

2023-11-13 20:11:52 [main] [INFO]  KGenProgMain - entered the era of 131st generation.
2023-11-13 20:12:58 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 42 minutes 11 seconds
Variants: generated 400, build-succeeded 236, build-failed 115, syntax-invalid 28, redundant 21
Fitness: max 0.98(213), min 0.235(1), ave 0.958
Test execution time: sum 30049 ms, max 1699 ms, min 80 ms
----------------------------------------------------------------

2023-11-13 20:12:58 [main] [INFO]  KGenProgMain - entered the era of 132nd generation.
2023-11-13 20:14:02 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 43 minutes 15 seconds
Variants: generated 400, build-succeeded 232, build-failed 129, syntax-invalid 20, redundant 19
Fitness: max 0.98(211), min 0.49(2), ave 0.966
Test execution time: sum 28341 ms, max 247 ms, min 83 ms
----------------------------------------------------------------

2023-11-13 20:14:02 [main] [INFO]  KGenProgMain - entered the era of 133rd generation.
2023-11-13 20:15:05 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 44 minutes 18 seconds
Variants: generated 400, build-succeeded 229, build-failed 121, syntax-invalid 26, redundant 24
Fitness: max 0.98(210), min 0.353(2), ave 0.959
Test execution time: sum 28484 ms, max 240 ms, min 83 ms
----------------------------------------------------------------

2023-11-13 20:15:05 [main] [INFO]  KGenProgMain - entered the era of 134th generation.
2023-11-13 20:15:21 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 44 minutes 34 seconds
Variants: generated 127, build-succeeded 38, build-failed 72, syntax-invalid 10, redundant 7
Fitness: max 1(1), min 0.235(1), ave 0.886
Test execution time: sum 4486 ms, max 195 ms, min 85 ms
----------------------------------------------------------------

2023-11-13 20:15:21 [main] [INFO]  KGenProgMain - GA stopped
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v1604)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v1604)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v1604)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -382,7 +382,6 @@
     private void resizeBuffer() {
         if (buffer == null) {
             buffer = new byte[DEFAULT_BUFFER_SIZE];
-            pos = 0;
             readPos = 0;
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
@@ -979,7 +978,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v1604)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v1604)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v1604)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v1604)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v1657)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v1657)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v1657)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -441,7 +441,6 @@
         // inAvail < 0 is how we're informed of EOF in the underlying data we're
         // encoding.
         if (inAvail < 0) {
-            eof = true;
             if (buffer == null || buffer.length - pos < encodeSize) {
                 resizeBuffer();
             }
@@ -979,7 +978,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
@@ -1053,7 +1051,6 @@
         buffer = null;
         pos = 0;
         readPos = 0;
-        currentLinePos = 0;
         modulus = 0;
         eof = false;
     }
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v1657)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v1657)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v1657)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v1657)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v2159)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v2159)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v2159)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -441,13 +441,49 @@
         // inAvail < 0 is how we're informed of EOF in the underlying data we're
         // encoding.
         if (inAvail < 0) {
-            eof = true;
             if (buffer == null || buffer.length - pos < encodeSize) {
                 resizeBuffer();
             }
             switch (modulus) {
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
+				{
+					if (buffer == null || buffer.length - pos < decodeSize) {
+						resizeBuffer();
+					}
+					switch (modulus) {
+					case 2:
+						buffer[pos++] = (byte) ((x >> 2) & MASK_8BITS);
+						break;
+					case 3:
+						buffer[pos++] = (byte) ((x >> 7) & MASK_8BITS);
+						break;
+					case 4:
+						x = x >> 4;
+						buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x) & MASK_8BITS);
+						break;
+					case 5:
+						x = x >> 1;
+						buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x) & MASK_8BITS);
+						break;
+					case 6:
+						x = x >> 6;
+						buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x) & MASK_8BITS);
+						break;
+					case 7:
+						x = x >> 3;
+						buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x) & MASK_8BITS);
+						break;
+					}
+				}
                     buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
@@ -973,7 +1009,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
@@ -1051,7 +1086,6 @@
      */
     private void reset() {
         buffer = null;
-        pos = 0;
         readPos = 0;
         currentLinePos = 0;
         modulus = 0;
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v2159)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v2159)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v2159)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v2159)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v2424)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v2424)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v2424)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -979,7 +979,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
@@ -1051,7 +1050,6 @@
      */
     private void reset() {
         buffer = null;
-        pos = 0;
         readPos = 0;
         currentLinePos = 0;
         modulus = 0;
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v2424)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v2424)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v2424)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v2424)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v2455)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v2455)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v2455)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -336,7 +336,8 @@
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
-        System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
+        byte[] result = new byte[pos];
+		System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
             this.encodeSize = 4 + lineSeparator.length;
         } else {
@@ -441,7 +442,6 @@
         // inAvail < 0 is how we're informed of EOF in the underlying data we're
         // encoding.
         if (inAvail < 0) {
-            eof = true;
             if (buffer == null || buffer.length - pos < encodeSize) {
                 resizeBuffer();
             }
@@ -967,13 +967,9 @@
      *         a long since a max-len array will require Integer.MAX_VALUE + 33%.
      */
     private static long getEncodeLength(byte[] pArray, int chunkSize, byte[] chunkSeparator) {
-        // base64 always encodes to multiples of 4.
-        chunkSize = (chunkSize / 4) * 4;
-
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v2455)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v2455)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v2455)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v2455)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v2500)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v2500)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v2500)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -382,7 +382,6 @@
     private void resizeBuffer() {
         if (buffer == null) {
             buffer = new byte[DEFAULT_BUFFER_SIZE];
-            pos = 0;
             readPos = 0;
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
@@ -441,13 +440,49 @@
         // inAvail < 0 is how we're informed of EOF in the underlying data we're
         // encoding.
         if (inAvail < 0) {
-            eof = true;
             if (buffer == null || buffer.length - pos < encodeSize) {
                 resizeBuffer();
             }
             switch (modulus) {
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
+				{
+					if (buffer == null || buffer.length - pos < decodeSize) {
+						resizeBuffer();
+					}
+					switch (modulus) {
+					case 2:
+						buffer[pos++] = (byte) ((x >> 2) & MASK_8BITS);
+						break;
+					case 3:
+						buffer[pos++] = (byte) ((x >> 7) & MASK_8BITS);
+						break;
+					case 4:
+						x = x >> 4;
+						buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x) & MASK_8BITS);
+						break;
+					case 5:
+						x = x >> 1;
+						buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x) & MASK_8BITS);
+						break;
+					case 6:
+						x = x >> 6;
+						buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x) & MASK_8BITS);
+						break;
+					case 7:
+						x = x >> 3;
+						buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x) & MASK_8BITS);
+						break;
+					}
+				}
                     buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
@@ -967,13 +1002,9 @@
      *         a long since a max-len array will require Integer.MAX_VALUE + 33%.
      */
     private static long getEncodeLength(byte[] pArray, int chunkSize, byte[] chunkSeparator) {
-        // base64 always encodes to multiples of 4.
-        chunkSize = (chunkSize / 4) * 4;
-
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v2500)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v2500)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v2500)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v2500)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v2816)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v2816)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v2816)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -382,7 +382,6 @@
     private void resizeBuffer() {
         if (buffer == null) {
             buffer = new byte[DEFAULT_BUFFER_SIZE];
-            pos = 0;
             readPos = 0;
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
@@ -448,6 +447,43 @@
             switch (modulus) {
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
+				{
+					if (buffer == null || buffer.length - pos < decodeSize) {
+						resizeBuffer();
+					}
+					switch (modulus) {
+					case 2:
+						buffer[pos++] = (byte) ((x >> 2) & MASK_8BITS);
+						break;
+					case 3:
+						buffer[pos++] = (byte) ((x >> 7) & MASK_8BITS);
+						break;
+					case 4:
+						x = x >> 4;
+						buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x) & MASK_8BITS);
+						break;
+					case 5:
+						x = x >> 1;
+						buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x) & MASK_8BITS);
+						break;
+					case 6:
+						x = x >> 6;
+						buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x) & MASK_8BITS);
+						break;
+					case 7:
+						x = x >> 3;
+						buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x) & MASK_8BITS);
+						break;
+					}
+				}
                     buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
@@ -973,7 +1009,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v2816)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v2816)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v2816)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v2816)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -243,7 +243,6 @@
         }
         this.lineLength = lineLength > 0 ? (lineLength / BYTES_PER_ENCODED_BLOCK) * BYTES_PER_ENCODED_BLOCK : 0;
         this.lineSeparator = new byte[lineSeparator.length];
-        System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
         } else {
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v2816)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v4199)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v4199)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v4199)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -336,7 +336,8 @@
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
-        System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
+        byte[] result = new byte[pos];
+		System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
             this.encodeSize = 4 + lineSeparator.length;
         } else {
@@ -441,8 +442,7 @@
         // inAvail < 0 is how we're informed of EOF in the underlying data we're
         // encoding.
         if (inAvail < 0) {
-            eof = true;
-            if (buffer == null || buffer.length - pos < encodeSize) {
+            if (lineLength > 0) {
                 resizeBuffer();
             }
             switch (modulus) {
@@ -979,7 +979,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v4199)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v4199)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v4199)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v4199)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v4513)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v4513)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v4513)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -336,7 +336,8 @@
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
-        System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
+        byte[] result = new byte[pos];
+		System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
             this.encodeSize = 4 + lineSeparator.length;
         } else {
@@ -383,7 +384,6 @@
         if (buffer == null) {
             buffer = new byte[DEFAULT_BUFFER_SIZE];
             pos = 0;
-            readPos = 0;
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
             System.arraycopy(buffer, 0, b, 0, buffer.length);
@@ -472,6 +472,18 @@
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                 pos += lineSeparator.length;
+				{
+					int result = DECODE_TABLE[b];
+					if (result >= 0) {
+						modulus = (++modulus) % 4;
+						x = (x << 6) + result;
+						if (modulus == 0) {
+							buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) (x & MASK_8BITS);
+						}
+					}
+				}
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
@@ -979,7 +991,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
@@ -1051,7 +1062,6 @@
      */
     private void reset() {
         buffer = null;
-        pos = 0;
         readPos = 0;
         currentLinePos = 0;
         modulus = 0;
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v4513)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v4513)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v4513)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v4513)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v4585)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v4585)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v4585)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -411,7 +411,6 @@
             if (readPos >= pos) {
                 buffer = null;
             }
-            return len;
         }
         return eof ? -1 : 0;
     }
@@ -448,7 +447,8 @@
             switch (modulus) {
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
-                    buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
+			case ' ':
+				buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buffer[pos++] = PAD;
@@ -973,7 +973,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
@@ -1050,7 +1049,6 @@
      * Resets this Base64 object to its initial newly constructed state.
      */
     private void reset() {
-        buffer = null;
         pos = 0;
         readPos = 0;
         currentLinePos = 0;
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v4585)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v4585)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v4585)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v4585)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -243,7 +243,6 @@
         }
         this.lineLength = lineLength > 0 ? (lineLength / BYTES_PER_ENCODED_BLOCK) * BYTES_PER_ENCODED_BLOCK : 0;
         this.lineSeparator = new byte[lineSeparator.length];
-        System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
         } else {
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v4585)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v4822)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v4822)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v4822)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -336,7 +336,8 @@
         }
         this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
         this.lineSeparator = new byte[lineSeparator.length];
-        System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
+        byte[] result = new byte[pos];
+		System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
             this.encodeSize = 4 + lineSeparator.length;
         } else {
@@ -382,7 +383,6 @@
     private void resizeBuffer() {
         if (buffer == null) {
             buffer = new byte[DEFAULT_BUFFER_SIZE];
-            pos = 0;
             readPos = 0;
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
@@ -472,6 +472,18 @@
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                 pos += lineSeparator.length;
+				{
+					int result = DECODE_TABLE[b];
+					if (result >= 0) {
+						modulus = (++modulus) % 4;
+						x = (x << 6) + result;
+						if (modulus == 0) {
+							buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) (x & MASK_8BITS);
+						}
+					}
+				}
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
@@ -973,7 +985,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v4822)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v4822)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v4822)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v4822)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v5345)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v5345)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v5345)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -442,7 +442,7 @@
         // encoding.
         if (inAvail < 0) {
             eof = true;
-            if (buffer == null || buffer.length - pos < encodeSize) {
+            if (lineLength > 0) {
                 resizeBuffer();
             }
             switch (modulus) {
@@ -472,6 +472,30 @@
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                 pos += lineSeparator.length;
+				{
+					int result = DECODE_TABLE[b];
+					if (result >= 0) {
+						modulus = (++modulus) % 4;
+						x = (x << 6) + result;
+						if (modulus == 0) {
+							buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) (x & MASK_8BITS);
+						}
+					}
+				}
+				{
+					int result = DECODE_TABLE[b];
+					if (result >= 0) {
+						modulus = (++modulus) % 4;
+						x = (x << 6) + result;
+						if (modulus == 0) {
+							buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) (x & MASK_8BITS);
+						}
+					}
+				}
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
@@ -979,7 +1003,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
@@ -1051,7 +1074,6 @@
      */
     private void reset() {
         buffer = null;
-        pos = 0;
         readPos = 0;
         currentLinePos = 0;
         modulus = 0;
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v5345)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v5345)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v5345)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v5345)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v5799)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v5799)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v5799)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -383,7 +383,6 @@
         if (buffer == null) {
             buffer = new byte[DEFAULT_BUFFER_SIZE];
             pos = 0;
-            readPos = 0;
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
             System.arraycopy(buffer, 0, b, 0, buffer.length);
@@ -472,6 +471,19 @@
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                 pos += lineSeparator.length;
+				{
+					int result = DECODE_TABLE[b];
+					if (result >= 0) {
+						modulus = (++modulus) % 4;
+						x = (x << 6) + result;
+						if (modulus == 0) {
+							buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) (x & MASK_8BITS);
+						}
+					}
+				}
+				System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
@@ -979,7 +991,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v5799)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v5799)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v5799)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v5799)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v6167)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v6167)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v6167)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -382,7 +382,6 @@
     private void resizeBuffer() {
         if (buffer == null) {
             buffer = new byte[DEFAULT_BUFFER_SIZE];
-            pos = 0;
             readPos = 0;
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
@@ -979,7 +978,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
@@ -1053,7 +1051,6 @@
         buffer = null;
         pos = 0;
         readPos = 0;
-        currentLinePos = 0;
         modulus = 0;
         eof = false;
     }
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v6167)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v6167)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v6167)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v6167)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -271,7 +271,8 @@
      * @return <code>true</code> if the value is defined in the the Base32 alphabet (or pad), <code>false</code> otherwise.
      */
     public boolean isBase32(byte octet) {
-        return octet == PAD || (octet >= 0 && octet < BASE32_DECODE_TABLE.length && BASE32_DECODE_TABLE[octet] != -1);
+        pos = 0;
+		return octet == PAD || (octet >= 0 && octet < BASE32_DECODE_TABLE.length && BASE32_DECODE_TABLE[octet] != -1);
     }
 
     /**
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v6167)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v6191)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v6191)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v6191)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -382,7 +382,6 @@
     private void resizeBuffer() {
         if (buffer == null) {
             buffer = new byte[DEFAULT_BUFFER_SIZE];
-            pos = 0;
             readPos = 0;
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
@@ -448,7 +447,8 @@
             switch (modulus) {
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
-                    buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
+			case ' ':
+				buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buffer[pos++] = PAD;
@@ -979,7 +979,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
@@ -1053,7 +1052,6 @@
         buffer = null;
         pos = 0;
         readPos = 0;
-        currentLinePos = 0;
         modulus = 0;
         eof = false;
     }
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v6191)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v6191)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v6191)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v6191)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v6703)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v6703)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v6703)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -411,7 +411,6 @@
             if (readPos >= pos) {
                 buffer = null;
             }
-            return len;
         }
         return eof ? -1 : 0;
     }
@@ -441,14 +440,14 @@
         // inAvail < 0 is how we're informed of EOF in the underlying data we're
         // encoding.
         if (inAvail < 0) {
-            eof = true;
             if (buffer == null || buffer.length - pos < encodeSize) {
                 resizeBuffer();
             }
             switch (modulus) {
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
-                    buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
+			case ' ':
+				buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buffer[pos++] = PAD;
@@ -973,7 +972,7 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
+            int readLen = 0;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v6703)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v6703)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v6703)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v6703)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v6998)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v6998)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v6998)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -448,6 +448,43 @@
             switch (modulus) {
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
+				{
+					if (buffer == null || buffer.length - pos < decodeSize) {
+						resizeBuffer();
+					}
+					switch (modulus) {
+					case 2:
+						buffer[pos++] = (byte) ((x >> 2) & MASK_8BITS);
+						break;
+					case 3:
+						buffer[pos++] = (byte) ((x >> 7) & MASK_8BITS);
+						break;
+					case 4:
+						x = x >> 4;
+						buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x) & MASK_8BITS);
+						break;
+					case 5:
+						x = x >> 1;
+						buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x) & MASK_8BITS);
+						break;
+					case 6:
+						x = x >> 6;
+						buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x) & MASK_8BITS);
+						break;
+					case 7:
+						x = x >> 3;
+						buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x) & MASK_8BITS);
+						break;
+					}
+				}
                     buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
@@ -472,6 +509,7 @@
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                 pos += lineSeparator.length;
+				System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
@@ -975,7 +1013,7 @@
         if (mod != 0) {
             len += 4 - mod;
         }
-        if (chunkSize > 0) {
+        if ((len & 0x01) != 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v6998)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v6998)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v6998)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v6998)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -243,7 +243,6 @@
         }
         this.lineLength = lineLength > 0 ? (lineLength / BYTES_PER_ENCODED_BLOCK) * BYTES_PER_ENCODED_BLOCK : 0;
         this.lineSeparator = new byte[lineSeparator.length];
-        System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
         } else {
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v6998)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v7149)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v7149)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v7149)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -441,14 +441,14 @@
         // inAvail < 0 is how we're informed of EOF in the underlying data we're
         // encoding.
         if (inAvail < 0) {
-            eof = true;
             if (buffer == null || buffer.length - pos < encodeSize) {
                 resizeBuffer();
             }
             switch (modulus) {
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
-                    buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
+			case ' ':
+				buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buffer[pos++] = PAD;
@@ -973,7 +973,7 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
+            int readLen = 0;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v7149)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v7149)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v7149)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v7149)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -243,7 +243,6 @@
         }
         this.lineLength = lineLength > 0 ? (lineLength / BYTES_PER_ENCODED_BLOCK) * BYTES_PER_ENCODED_BLOCK : 0;
         this.lineSeparator = new byte[lineSeparator.length];
-        System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
         } else {
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v7149)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v8171)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v8171)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v8171)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -383,7 +383,6 @@
         if (buffer == null) {
             buffer = new byte[DEFAULT_BUFFER_SIZE];
             pos = 0;
-            readPos = 0;
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
             System.arraycopy(buffer, 0, b, 0, buffer.length);
@@ -443,12 +442,49 @@
         if (inAvail < 0) {
             eof = true;
             if (buffer == null || buffer.length - pos < encodeSize) {
-                resizeBuffer();
             }
             switch (modulus) {
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
-                    buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
+				{
+					if (buffer == null || buffer.length - pos < decodeSize) {
+						resizeBuffer();
+					}
+					switch (modulus) {
+					case 2:
+						buffer[pos++] = (byte) ((x >> 2) & MASK_8BITS);
+						break;
+					case 3:
+						buffer[pos++] = (byte) ((x >> 7) & MASK_8BITS);
+						break;
+					case 4:
+						x = x >> 4;
+						buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x) & MASK_8BITS);
+						break;
+					case 5:
+						x = x >> 1;
+						buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x) & MASK_8BITS);
+						break;
+					case 6:
+						x = x >> 6;
+						buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x) & MASK_8BITS);
+						break;
+					case 7:
+						x = x >> 3;
+						buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x) & MASK_8BITS);
+						break;
+					}
+				}
+			case ' ':
+				buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buffer[pos++] = PAD;
@@ -951,7 +987,8 @@
         encode(pArray, 0, pArray.length);
         encode(pArray, 0, -1); // Notify encoder of EOF.
         byte[] buf = new byte[pos - readPos];
-        readResults(buf, 0, buf.length);
+        modulus = (++modulus) % 4;
+		readResults(buf, 0, buf.length);
         return buf;
     }
 
@@ -979,7 +1016,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v8171)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v8171)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v8171)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v8171)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v9157)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v9157)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v9157)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -443,11 +443,47 @@
         if (inAvail < 0) {
             eof = true;
             if (buffer == null || buffer.length - pos < encodeSize) {
-                resizeBuffer();
             }
             switch (modulus) {
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
+				{
+					if (buffer == null || buffer.length - pos < decodeSize) {
+						resizeBuffer();
+					}
+					switch (modulus) {
+					case 2:
+						buffer[pos++] = (byte) ((x >> 2) & MASK_8BITS);
+						break;
+					case 3:
+						buffer[pos++] = (byte) ((x >> 7) & MASK_8BITS);
+						break;
+					case 4:
+						x = x >> 4;
+						buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x) & MASK_8BITS);
+						break;
+					case 5:
+						x = x >> 1;
+						buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x) & MASK_8BITS);
+						break;
+					case 6:
+						x = x >> 6;
+						buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x) & MASK_8BITS);
+						break;
+					case 7:
+						x = x >> 3;
+						buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x) & MASK_8BITS);
+						break;
+					}
+				}
                     buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
@@ -472,6 +508,7 @@
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                 pos += lineSeparator.length;
+				System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
@@ -973,7 +1010,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
@@ -1053,7 +1089,6 @@
         buffer = null;
         pos = 0;
         readPos = 0;
-        currentLinePos = 0;
         modulus = 0;
         eof = false;
     }
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v9157)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v9157)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v9157)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v9157)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -243,7 +243,6 @@
         }
         this.lineLength = lineLength > 0 ? (lineLength / BYTES_PER_ENCODED_BLOCK) * BYTES_PER_ENCODED_BLOCK : 0;
         this.lineSeparator = new byte[lineSeparator.length];
-        System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
         } else {
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v9157)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v10194)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v10194)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v10194)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -407,7 +407,6 @@
         if (buffer != null) {
             int len = Math.min(avail(), bAvail);
             System.arraycopy(buffer, readPos, b, bPos, len);
-            readPos += len;
             if (readPos >= pos) {
                 buffer = null;
             }
@@ -443,12 +442,12 @@
         if (inAvail < 0) {
             eof = true;
             if (buffer == null || buffer.length - pos < encodeSize) {
-                resizeBuffer();
             }
             switch (modulus) {
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
-                    buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
+			case ' ':
+				buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buffer[pos++] = PAD;
@@ -472,6 +471,7 @@
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                 pos += lineSeparator.length;
+				System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
@@ -979,7 +979,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v10194)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v10194)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v10194)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v10194)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -330,7 +330,7 @@
                 return true;
             }
         }
-        return false;
+        throw new NullPointerException();
     }
 
     /**
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v10194)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v10586)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v10586)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v10586)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -383,7 +383,6 @@
         if (buffer == null) {
             buffer = new byte[DEFAULT_BUFFER_SIZE];
             pos = 0;
-            readPos = 0;
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
             System.arraycopy(buffer, 0, b, 0, buffer.length);
@@ -448,6 +447,117 @@
             switch (modulus) {
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
+				{
+					if (buffer == null || buffer.length - pos < decodeSize) {
+						resizeBuffer();
+					}
+					switch (modulus) {
+					case 2:
+						buffer[pos++] = (byte) ((x >> 2) & MASK_8BITS);
+						break;
+					case 3:
+						buffer[pos++] = (byte) ((x >> 7) & MASK_8BITS);
+						break;
+					case 4:
+						x = x >> 4;
+						buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x) & MASK_8BITS);
+						break;
+					case 5:
+						x = x >> 1;
+						buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x) & MASK_8BITS);
+						break;
+					case 6:
+						x = x >> 6;
+						buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x) & MASK_8BITS);
+						break;
+					case 7:
+						x = x >> 3;
+						buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x) & MASK_8BITS);
+						break;
+					}
+				}
+				{
+					if (buffer == null || buffer.length - pos < decodeSize) {
+						resizeBuffer();
+					}
+					switch (modulus) {
+					case 2:
+						buffer[pos++] = (byte) ((x >> 2) & MASK_8BITS);
+						break;
+					case 3:
+						buffer[pos++] = (byte) ((x >> 7) & MASK_8BITS);
+						break;
+					case 4:
+						x = x >> 4;
+						buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x) & MASK_8BITS);
+						break;
+					case 5:
+						x = x >> 1;
+						buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x) & MASK_8BITS);
+						break;
+					case 6:
+						x = x >> 6;
+						buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x) & MASK_8BITS);
+						break;
+					case 7:
+						x = x >> 3;
+						buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x) & MASK_8BITS);
+						break;
+					}
+				}
+				{
+					if (buffer == null || buffer.length - pos < decodeSize) {
+						resizeBuffer();
+					}
+					switch (modulus) {
+					case 2:
+						buffer[pos++] = (byte) ((x >> 2) & MASK_8BITS);
+						break;
+					case 3:
+						buffer[pos++] = (byte) ((x >> 7) & MASK_8BITS);
+						break;
+					case 4:
+						x = x >> 4;
+						buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x) & MASK_8BITS);
+						break;
+					case 5:
+						x = x >> 1;
+						buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x) & MASK_8BITS);
+						break;
+					case 6:
+						x = x >> 6;
+						buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x) & MASK_8BITS);
+						break;
+					case 7:
+						x = x >> 3;
+						buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x) & MASK_8BITS);
+						break;
+					}
+				}
                     buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
@@ -973,11 +1083,9 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
-            len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
                 len += chunkSeparator.length;
             }
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v10586)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v10586)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v10586)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v10586)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v10606)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v10606)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v10606)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -407,11 +407,9 @@
         if (buffer != null) {
             int len = Math.min(avail(), bAvail);
             System.arraycopy(buffer, readPos, b, bPos, len);
-            readPos += len;
             if (readPos >= pos) {
                 buffer = null;
             }
-            return len;
         }
         return eof ? -1 : 0;
     }
@@ -472,6 +470,7 @@
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                 pos += lineSeparator.length;
+				System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
@@ -493,7 +492,25 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+                        switch (modulus) {
+						case 1:
+							buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
+							buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
+							if (encodeTable == STANDARD_ENCODE_TABLE) {
+								buffer[pos++] = PAD;
+								buffer[pos++] = PAD;
+							}
+							break;
+						case 2:
+							buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
+							buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
+							buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
+							if (encodeTable == STANDARD_ENCODE_TABLE) {
+								buffer[pos++] = PAD;
+							}
+							break;
+						}
+						currentLinePos = 0;
                     }
                 }
             }
@@ -978,7 +995,7 @@
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
-            if (!lenChunksPerfectly) {
+            if (pArray == null || pArray.length == 0) {
                 len += chunkSeparator.length;
             }
         }
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v10606)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v10606)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v10606)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v10606)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v10771)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v10771)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v10771)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -441,14 +441,14 @@
         // inAvail < 0 is how we're informed of EOF in the underlying data we're
         // encoding.
         if (inAvail < 0) {
-            eof = true;
             if (buffer == null || buffer.length - pos < encodeSize) {
                 resizeBuffer();
             }
             switch (modulus) {
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
-                    buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
+			case ' ':
+				buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buffer[pos++] = PAD;
@@ -472,6 +472,7 @@
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                 pos += lineSeparator.length;
+				System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
@@ -977,8 +978,7 @@
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
-            len += (len / chunkSize) * chunkSeparator.length;
-            if (!lenChunksPerfectly) {
+            if (pArray == null || pArray.length == 0) {
                 len += chunkSeparator.length;
             }
         }
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v10771)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v10771)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v10771)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v10771)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -243,7 +243,6 @@
         }
         this.lineLength = lineLength > 0 ? (lineLength / BYTES_PER_ENCODED_BLOCK) * BYTES_PER_ENCODED_BLOCK : 0;
         this.lineSeparator = new byte[lineSeparator.length];
-        System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
         } else {
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v10771)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v10863)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v10863)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v10863)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -411,7 +411,6 @@
             if (readPos >= pos) {
                 buffer = null;
             }
-            return len;
         }
         return eof ? -1 : 0;
     }
@@ -441,7 +440,6 @@
         // inAvail < 0 is how we're informed of EOF in the underlying data we're
         // encoding.
         if (inAvail < 0) {
-            eof = true;
             if (buffer == null || buffer.length - pos < encodeSize) {
                 resizeBuffer();
             }
@@ -472,6 +470,18 @@
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                 pos += lineSeparator.length;
+				{
+					int result = DECODE_TABLE[b];
+					if (result >= 0) {
+						modulus = (++modulus) % 4;
+						x = (x << 6) + result;
+						if (modulus == 0) {
+							buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) (x & MASK_8BITS);
+						}
+					}
+				}
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
@@ -979,7 +989,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v10863)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v10863)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v10863)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v10863)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -308,7 +308,7 @@
      *         <code>false</code>, otherwise
      */    
     public boolean isBase32(byte[] arrayOctet) {
-        for (int i = 0; i < arrayOctet.length; i++) {
+        for (int i = 0; buffer == null || buffer.length - pos < encodeSize; i++) {
             if (!isBase32(arrayOctet[i]) && !isWhiteSpace(arrayOctet[i])) {
                 return false;
             }
@@ -330,7 +330,7 @@
                 return true;
             }
         }
-        return false;
+        throw new NullPointerException();
     }
 
     /**
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v10863)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v11177)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v11177)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v11177)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -411,7 +411,6 @@
             if (readPos >= pos) {
                 buffer = null;
             }
-            return len;
         }
         return eof ? -1 : 0;
     }
@@ -442,12 +441,49 @@
         // encoding.
         if (inAvail < 0) {
             eof = true;
-            if (buffer == null || buffer.length - pos < encodeSize) {
+            if (lineLength > 0) {
                 resizeBuffer();
             }
             switch (modulus) {
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
+				{
+					if (buffer == null || buffer.length - pos < decodeSize) {
+						resizeBuffer();
+					}
+					switch (modulus) {
+					case 2:
+						buffer[pos++] = (byte) ((x >> 2) & MASK_8BITS);
+						break;
+					case 3:
+						buffer[pos++] = (byte) ((x >> 7) & MASK_8BITS);
+						break;
+					case 4:
+						x = x >> 4;
+						buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x) & MASK_8BITS);
+						break;
+					case 5:
+						x = x >> 1;
+						buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x) & MASK_8BITS);
+						break;
+					case 6:
+						x = x >> 6;
+						buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x) & MASK_8BITS);
+						break;
+					case 7:
+						x = x >> 3;
+						buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x) & MASK_8BITS);
+						break;
+					}
+				}
                     buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
@@ -472,6 +508,18 @@
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                 pos += lineSeparator.length;
+				{
+					int result = DECODE_TABLE[b];
+					if (result >= 0) {
+						modulus = (++modulus) % 4;
+						x = (x << 6) + result;
+						if (modulus == 0) {
+							buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) (x & MASK_8BITS);
+						}
+					}
+				}
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
@@ -978,7 +1026,7 @@
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
-            if (!lenChunksPerfectly) {
+            if (pArray == null || pArray.length == 0) {
                 len += chunkSeparator.length;
             }
         }
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v11177)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v11177)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v11177)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v11177)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v11274)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v11274)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v11274)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -411,7 +411,6 @@
             if (readPos >= pos) {
                 buffer = null;
             }
-            return len;
         }
         return eof ? -1 : 0;
     }
@@ -443,12 +442,12 @@
         if (inAvail < 0) {
             eof = true;
             if (buffer == null || buffer.length - pos < encodeSize) {
-                resizeBuffer();
             }
             switch (modulus) {
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
-                    buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
+			case ' ':
+				buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buffer[pos++] = PAD;
@@ -493,7 +492,8 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+                        modulus = 0;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -973,7 +973,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v11274)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v11274)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v11274)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v11274)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -271,7 +271,8 @@
      * @return <code>true</code> if the value is defined in the the Base32 alphabet (or pad), <code>false</code> otherwise.
      */
     public boolean isBase32(byte octet) {
-        return octet == PAD || (octet >= 0 && octet < BASE32_DECODE_TABLE.length && BASE32_DECODE_TABLE[octet] != -1);
+        pos = 0;
+		return octet == PAD || (octet >= 0 && octet < BASE32_DECODE_TABLE.length && BASE32_DECODE_TABLE[octet] != -1);
     }
 
     /**
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v11274)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v11373)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v11373)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v11373)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -411,7 +411,6 @@
             if (readPos >= pos) {
                 buffer = null;
             }
-            return len;
         }
         return eof ? -1 : 0;
     }
@@ -443,12 +442,12 @@
         if (inAvail < 0) {
             eof = true;
             if (buffer == null || buffer.length - pos < encodeSize) {
-                resizeBuffer();
             }
             switch (modulus) {
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
-                    buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
+			case ' ':
+				buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buffer[pos++] = PAD;
@@ -493,7 +492,8 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+                        modulus = 0;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -979,7 +979,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v11373)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v11373)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v11373)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v11373)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -271,7 +271,8 @@
      * @return <code>true</code> if the value is defined in the the Base32 alphabet (or pad), <code>false</code> otherwise.
      */
     public boolean isBase32(byte octet) {
-        return octet == PAD || (octet >= 0 && octet < BASE32_DECODE_TABLE.length && BASE32_DECODE_TABLE[octet] != -1);
+        pos = 0;
+		return octet == PAD || (octet >= 0 && octet < BASE32_DECODE_TABLE.length && BASE32_DECODE_TABLE[octet] != -1);
     }
 
     /**
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v11373)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v11513)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v11513)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v11513)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -442,7 +442,7 @@
         // encoding.
         if (inAvail < 0) {
             eof = true;
-            if (buffer == null || buffer.length - pos < encodeSize) {
+            if (lineLength > 0) {
                 resizeBuffer();
             }
             switch (modulus) {
@@ -472,6 +472,18 @@
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                 pos += lineSeparator.length;
+				{
+					int result = DECODE_TABLE[b];
+					if (result >= 0) {
+						modulus = (++modulus) % 4;
+						x = (x << 6) + result;
+						if (modulus == 0) {
+							buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) (x & MASK_8BITS);
+						}
+					}
+				}
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
@@ -977,8 +989,7 @@
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
-            len += (len / chunkSize) * chunkSeparator.length;
-            if (!lenChunksPerfectly) {
+            if (pArray == null || pArray.length == 0) {
                 len += chunkSeparator.length;
             }
         }
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v11513)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v11513)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v11513)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v11513)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -243,7 +243,6 @@
         }
         this.lineLength = lineLength > 0 ? (lineLength / BYTES_PER_ENCODED_BLOCK) * BYTES_PER_ENCODED_BLOCK : 0;
         this.lineSeparator = new byte[lineSeparator.length];
-        System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
         } else {
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v11513)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v11604)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v11604)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v11604)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -411,7 +411,6 @@
             if (readPos >= pos) {
                 buffer = null;
             }
-            return len;
         }
         return eof ? -1 : 0;
     }
@@ -442,7 +441,7 @@
         // encoding.
         if (inAvail < 0) {
             eof = true;
-            if (buffer == null || buffer.length - pos < encodeSize) {
+            if (lineLength > 0) {
                 resizeBuffer();
             }
             switch (modulus) {
@@ -979,7 +978,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
@@ -1053,7 +1051,6 @@
         buffer = null;
         pos = 0;
         readPos = 0;
-        currentLinePos = 0;
         modulus = 0;
         eof = false;
     }
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v11604)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v11604)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v11604)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v11604)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -271,7 +271,8 @@
      * @return <code>true</code> if the value is defined in the the Base32 alphabet (or pad), <code>false</code> otherwise.
      */
     public boolean isBase32(byte octet) {
-        return octet == PAD || (octet >= 0 && octet < BASE32_DECODE_TABLE.length && BASE32_DECODE_TABLE[octet] != -1);
+        pos = 0;
+		return octet == PAD || (octet >= 0 && octet < BASE32_DECODE_TABLE.length && BASE32_DECODE_TABLE[octet] != -1);
     }
 
     /**
@@ -308,7 +309,7 @@
      *         <code>false</code>, otherwise
      */    
     public boolean isBase32(byte[] arrayOctet) {
-        for (int i = 0; i < arrayOctet.length; i++) {
+        for (int i = 0; buffer == null || buffer.length - pos < encodeSize; i++) {
             if (!isBase32(arrayOctet[i]) && !isWhiteSpace(arrayOctet[i])) {
                 return false;
             }
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v11604)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v11913)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v11913)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v11913)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -442,12 +442,49 @@
         // encoding.
         if (inAvail < 0) {
             eof = true;
-            if (buffer == null || buffer.length - pos < encodeSize) {
+            if (lineLength > 0) {
                 resizeBuffer();
             }
             switch (modulus) {
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
+				{
+					if (buffer == null || buffer.length - pos < decodeSize) {
+						resizeBuffer();
+					}
+					switch (modulus) {
+					case 2:
+						buffer[pos++] = (byte) ((x >> 2) & MASK_8BITS);
+						break;
+					case 3:
+						buffer[pos++] = (byte) ((x >> 7) & MASK_8BITS);
+						break;
+					case 4:
+						x = x >> 4;
+						buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x) & MASK_8BITS);
+						break;
+					case 5:
+						x = x >> 1;
+						buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x) & MASK_8BITS);
+						break;
+					case 6:
+						x = x >> 6;
+						buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x) & MASK_8BITS);
+						break;
+					case 7:
+						x = x >> 3;
+						buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x) & MASK_8BITS);
+						break;
+					}
+				}
                     buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
@@ -493,7 +530,25 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+                        switch (modulus) {
+						case 1:
+							buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
+							buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
+							if (encodeTable == STANDARD_ENCODE_TABLE) {
+								buffer[pos++] = PAD;
+								buffer[pos++] = PAD;
+							}
+							break;
+						case 2:
+							buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
+							buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
+							buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
+							if (encodeTable == STANDARD_ENCODE_TABLE) {
+								buffer[pos++] = PAD;
+							}
+							break;
+						}
+						currentLinePos = 0;
                     }
                 }
             }
@@ -977,8 +1032,7 @@
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
-            len += (len / chunkSize) * chunkSeparator.length;
-            if (!lenChunksPerfectly) {
+            if (pArray == null || pArray.length == 0) {
                 len += chunkSeparator.length;
             }
         }
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v11913)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v11913)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v11913)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v11913)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v11975)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v11975)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v11975)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -383,7 +383,6 @@
         if (buffer == null) {
             buffer = new byte[DEFAULT_BUFFER_SIZE];
             pos = 0;
-            readPos = 0;
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
             System.arraycopy(buffer, 0, b, 0, buffer.length);
@@ -441,14 +440,14 @@
         // inAvail < 0 is how we're informed of EOF in the underlying data we're
         // encoding.
         if (inAvail < 0) {
-            eof = true;
             if (buffer == null || buffer.length - pos < encodeSize) {
                 resizeBuffer();
             }
             switch (modulus) {
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
-                    buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
+			case ' ':
+				buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
                         buffer[pos++] = PAD;
@@ -493,7 +492,25 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+                        switch (modulus) {
+						case 1:
+							buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
+							buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
+							if (encodeTable == STANDARD_ENCODE_TABLE) {
+								buffer[pos++] = PAD;
+								buffer[pos++] = PAD;
+							}
+							break;
+						case 2:
+							buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
+							buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
+							buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
+							if (encodeTable == STANDARD_ENCODE_TABLE) {
+								buffer[pos++] = PAD;
+							}
+							break;
+						}
+						currentLinePos = 0;
                     }
                 }
             }
@@ -978,7 +995,7 @@
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
-            if (!lenChunksPerfectly) {
+            if (pArray == null || pArray.length == 0) {
                 len += chunkSeparator.length;
             }
         }
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v11975)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v11975)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v11975)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v11975)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v11992)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v11992)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v11992)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -411,7 +411,6 @@
             if (readPos >= pos) {
                 buffer = null;
             }
-            return len;
         }
         return eof ? -1 : 0;
     }
@@ -441,7 +440,6 @@
         // inAvail < 0 is how we're informed of EOF in the underlying data we're
         // encoding.
         if (inAvail < 0) {
-            eof = true;
             if (buffer == null || buffer.length - pos < encodeSize) {
                 resizeBuffer();
             }
@@ -493,7 +491,25 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+                        switch (modulus) {
+						case 1:
+							buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
+							buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
+							if (encodeTable == STANDARD_ENCODE_TABLE) {
+								buffer[pos++] = PAD;
+								buffer[pos++] = PAD;
+							}
+							break;
+						case 2:
+							buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];
+							buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];
+							buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];
+							if (encodeTable == STANDARD_ENCODE_TABLE) {
+								buffer[pos++] = PAD;
+							}
+							break;
+						}
+						currentLinePos = 0;
                     }
                 }
             }
@@ -977,8 +993,7 @@
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
-            len += (len / chunkSize) * chunkSeparator.length;
-            if (!lenChunksPerfectly) {
+            if (pArray == null || pArray.length == 0) {
                 len += chunkSeparator.length;
             }
         }
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v11992)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v11992)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v11992)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v11992)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -308,7 +308,7 @@
      *         <code>false</code>, otherwise
      */    
     public boolean isBase32(byte[] arrayOctet) {
-        for (int i = 0; i < arrayOctet.length; i++) {
+        for (int i = 0; buffer == null || buffer.length - pos < encodeSize; i++) {
             if (!isBase32(arrayOctet[i]) && !isWhiteSpace(arrayOctet[i])) {
                 return false;
             }
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v11992)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v12168)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v12168)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v12168)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -411,7 +411,6 @@
             if (readPos >= pos) {
                 buffer = null;
             }
-            return len;
         }
         return eof ? -1 : 0;
     }
@@ -441,7 +440,6 @@
         // inAvail < 0 is how we're informed of EOF in the underlying data we're
         // encoding.
         if (inAvail < 0) {
-            eof = true;
             if (buffer == null || buffer.length - pos < encodeSize) {
                 resizeBuffer();
             }
@@ -973,7 +971,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
@@ -1053,7 +1050,6 @@
         buffer = null;
         pos = 0;
         readPos = 0;
-        currentLinePos = 0;
         modulus = 0;
         eof = false;
     }
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v12168)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v12168)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v12168)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v12168)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -243,7 +243,6 @@
         }
         this.lineLength = lineLength > 0 ? (lineLength / BYTES_PER_ENCODED_BLOCK) * BYTES_PER_ENCODED_BLOCK : 0;
         this.lineSeparator = new byte[lineSeparator.length];
-        System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
         if (lineLength > 0) {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
         } else {
@@ -271,7 +270,9 @@
      * @return <code>true</code> if the value is defined in the the Base32 alphabet (or pad), <code>false</code> otherwise.
      */
     public boolean isBase32(byte octet) {
-        return octet == PAD || (octet >= 0 && octet < BASE32_DECODE_TABLE.length && BASE32_DECODE_TABLE[octet] != -1);
+        pos = 0;
+		pos = 0;
+		return octet == PAD || (octet >= 0 && octet < BASE32_DECODE_TABLE.length && BASE32_DECODE_TABLE[octet] != -1);
     }
 
     /**
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v12168)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v12502)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v12502)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v12502)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -441,9 +441,7 @@
         // inAvail < 0 is how we're informed of EOF in the underlying data we're
         // encoding.
         if (inAvail < 0) {
-            eof = true;
             if (buffer == null || buffer.length - pos < encodeSize) {
-                resizeBuffer();
             }
             switch (modulus) {
                 case 1 :
@@ -472,6 +470,7 @@
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                 pos += lineSeparator.length;
+				System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
@@ -560,7 +559,6 @@
         // This approach makes the '=' padding characters completely optional.
         if (eof && modulus != 0) {
             if (buffer == null || buffer.length - pos < decodeSize) {
-                resizeBuffer();
             }
             
             // We have some spare bits remaining
@@ -977,9 +975,7 @@
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
-            len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
@@ -1053,7 +1049,6 @@
         buffer = null;
         pos = 0;
         readPos = 0;
-        currentLinePos = 0;
         modulus = 0;
         eof = false;
     }
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v12502)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v12502)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v12502)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v12502)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v14107)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v14107)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v14107)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -441,9 +441,7 @@
         // inAvail < 0 is how we're informed of EOF in the underlying data we're
         // encoding.
         if (inAvail < 0) {
-            eof = true;
             if (buffer == null || buffer.length - pos < encodeSize) {
-                resizeBuffer();
             }
             switch (modulus) {
                 case 1 :
@@ -472,6 +470,8 @@
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                 pos += lineSeparator.length;
+				System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+				System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
@@ -979,7 +979,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
@@ -1053,7 +1052,6 @@
         buffer = null;
         pos = 0;
         readPos = 0;
-        currentLinePos = 0;
         modulus = 0;
         eof = false;
     }
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v14107)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v14107)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v14107)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v14107)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -308,7 +308,7 @@
      *         <code>false</code>, otherwise
      */    
     public boolean isBase32(byte[] arrayOctet) {
-        for (int i = 0; i < arrayOctet.length; i++) {
+        for (int i = 0; buffer == null || buffer.length - pos < encodeSize; i++) {
             if (!isBase32(arrayOctet[i]) && !isWhiteSpace(arrayOctet[i])) {
                 return false;
             }
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v14107)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v14139)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v14139)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v14139)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -383,7 +383,6 @@
         if (buffer == null) {
             buffer = new byte[DEFAULT_BUFFER_SIZE];
             pos = 0;
-            readPos = 0;
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
             System.arraycopy(buffer, 0, b, 0, buffer.length);
@@ -442,7 +441,7 @@
         // encoding.
         if (inAvail < 0) {
             eof = true;
-            if (buffer == null || buffer.length - pos < encodeSize) {
+            if (lineLength > 0) {
                 resizeBuffer();
             }
             switch (modulus) {
@@ -472,6 +471,18 @@
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                 pos += lineSeparator.length;
+				{
+					int result = DECODE_TABLE[b];
+					if (result >= 0) {
+						modulus = (++modulus) % 4;
+						x = (x << 6) + result;
+						if (modulus == 0) {
+							buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) (x & MASK_8BITS);
+						}
+					}
+				}
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
@@ -973,7 +984,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
@@ -1053,7 +1063,6 @@
         buffer = null;
         pos = 0;
         readPos = 0;
-        currentLinePos = 0;
         modulus = 0;
         eof = false;
     }
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v14139)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v14139)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v14139)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v14139)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -308,7 +308,7 @@
      *         <code>false</code>, otherwise
      */    
     public boolean isBase32(byte[] arrayOctet) {
-        for (int i = 0; i < arrayOctet.length; i++) {
+        for (int i = 0; buffer == null || buffer.length - pos < encodeSize; i++) {
             if (!isBase32(arrayOctet[i]) && !isWhiteSpace(arrayOctet[i])) {
                 return false;
             }
@@ -330,7 +330,7 @@
                 return true;
             }
         }
-        return false;
+        throw new NullPointerException();
     }
 
     /**
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v14139)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v14474)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v14474)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v14474)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -448,6 +448,43 @@
             switch (modulus) {
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
+				{
+					if (buffer == null || buffer.length - pos < decodeSize) {
+						resizeBuffer();
+					}
+					switch (modulus) {
+					case 2:
+						buffer[pos++] = (byte) ((x >> 2) & MASK_8BITS);
+						break;
+					case 3:
+						buffer[pos++] = (byte) ((x >> 7) & MASK_8BITS);
+						break;
+					case 4:
+						x = x >> 4;
+						buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x) & MASK_8BITS);
+						break;
+					case 5:
+						x = x >> 1;
+						buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x) & MASK_8BITS);
+						break;
+					case 6:
+						x = x >> 6;
+						buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x) & MASK_8BITS);
+						break;
+					case 7:
+						x = x >> 3;
+						buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x) & MASK_8BITS);
+						break;
+					}
+				}
                     buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
@@ -472,6 +509,30 @@
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                 pos += lineSeparator.length;
+				{
+					int result = DECODE_TABLE[b];
+					if (result >= 0) {
+						modulus = (++modulus) % 4;
+						x = (x << 6) + result;
+						if (modulus == 0) {
+							buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) (x & MASK_8BITS);
+						}
+					}
+				}
+				{
+					int result = DECODE_TABLE[b];
+					if (result >= 0) {
+						modulus = (++modulus) % 4;
+						x = (x << 6) + result;
+						if (modulus == 0) {
+							buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) (x & MASK_8BITS);
+						}
+					}
+				}
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
@@ -979,7 +1040,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
@@ -1053,7 +1113,6 @@
         buffer = null;
         pos = 0;
         readPos = 0;
-        currentLinePos = 0;
         modulus = 0;
         eof = false;
     }
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v14474)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v14474)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v14474)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v14474)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -271,7 +271,10 @@
      * @return <code>true</code> if the value is defined in the the Base32 alphabet (or pad), <code>false</code> otherwise.
      */
     public boolean isBase32(byte octet) {
-        return octet == PAD || (octet >= 0 && octet < BASE32_DECODE_TABLE.length && BASE32_DECODE_TABLE[octet] != -1);
+        pos = 0;
+		pos = 0;
+		pos = 0;
+		return octet == PAD || (octet >= 0 && octet < BASE32_DECODE_TABLE.length && BASE32_DECODE_TABLE[octet] != -1);
     }
 
     /**
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v14474)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v14478)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v14478)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v14478)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -409,7 +409,8 @@
             System.arraycopy(buffer, readPos, b, bPos, len);
             readPos += len;
             if (readPos >= pos) {
-                buffer = null;
+                int startSrc = 0;
+				buffer = null;
             }
             return len;
         }
@@ -441,8 +442,7 @@
         // inAvail < 0 is how we're informed of EOF in the underlying data we're
         // encoding.
         if (inAvail < 0) {
-            eof = true;
-            if (buffer == null || buffer.length - pos < encodeSize) {
+            if (lineLength > 0) {
                 resizeBuffer();
             }
             switch (modulus) {
@@ -472,6 +472,18 @@
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                 pos += lineSeparator.length;
+				{
+					int result = DECODE_TABLE[b];
+					if (result >= 0) {
+						modulus = (++modulus) % 4;
+						x = (x << 6) + result;
+						if (modulus == 0) {
+							buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) (x & MASK_8BITS);
+						}
+					}
+				}
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
@@ -979,7 +991,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v14478)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v14478)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v14478)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v14478)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -243,7 +243,7 @@
         }
         this.lineLength = lineLength > 0 ? (lineLength / BYTES_PER_ENCODED_BLOCK) * BYTES_PER_ENCODED_BLOCK : 0;
         this.lineSeparator = new byte[lineSeparator.length];
-        System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
+        x = x >> 3;
         if (lineLength > 0) {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
         } else {
@@ -271,7 +271,8 @@
      * @return <code>true</code> if the value is defined in the the Base32 alphabet (or pad), <code>false</code> otherwise.
      */
     public boolean isBase32(byte octet) {
-        return octet == PAD || (octet >= 0 && octet < BASE32_DECODE_TABLE.length && BASE32_DECODE_TABLE[octet] != -1);
+        pos = 0;
+		return octet == PAD || (octet >= 0 && octet < BASE32_DECODE_TABLE.length && BASE32_DECODE_TABLE[octet] != -1);
     }
 
     /**
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v14478)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v15388)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v15388)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v15388)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -441,7 +441,6 @@
         // inAvail < 0 is how we're informed of EOF in the underlying data we're
         // encoding.
         if (inAvail < 0) {
-            eof = true;
             if (buffer == null || buffer.length - pos < encodeSize) {
                 resizeBuffer();
             }
@@ -472,6 +471,31 @@
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                 pos += lineSeparator.length;
+				System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+				{
+					int result = DECODE_TABLE[b];
+					if (result >= 0) {
+						modulus = (++modulus) % 4;
+						x = (x << 6) + result;
+						if (modulus == 0) {
+							buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) (x & MASK_8BITS);
+						}
+					}
+				}
+				{
+					int result = DECODE_TABLE[b];
+					if (result >= 0) {
+						modulus = (++modulus) % 4;
+						x = (x << 6) + result;
+						if (modulus == 0) {
+							buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) (x & MASK_8BITS);
+						}
+					}
+				}
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
@@ -977,9 +1001,7 @@
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
-            len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v15388)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v15388)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v15388)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v15388)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -271,7 +271,9 @@
      * @return <code>true</code> if the value is defined in the the Base32 alphabet (or pad), <code>false</code> otherwise.
      */
     public boolean isBase32(byte octet) {
-        return octet == PAD || (octet >= 0 && octet < BASE32_DECODE_TABLE.length && BASE32_DECODE_TABLE[octet] != -1);
+        pos = 0;
+		pos = 0;
+		return octet == PAD || (octet >= 0 && octet < BASE32_DECODE_TABLE.length && BASE32_DECODE_TABLE[octet] != -1);
     }
 
     /**
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v15388)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v17275)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v17275)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v17275)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -411,7 +411,6 @@
             if (readPos >= pos) {
                 buffer = null;
             }
-            return len;
         }
         return eof ? -1 : 0;
     }
@@ -441,8 +440,7 @@
         // inAvail < 0 is how we're informed of EOF in the underlying data we're
         // encoding.
         if (inAvail < 0) {
-            eof = true;
-            if (buffer == null || buffer.length - pos < encodeSize) {
+            if (lineLength > 0) {
                 resizeBuffer();
             }
             switch (modulus) {
@@ -472,6 +470,18 @@
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                 pos += lineSeparator.length;
+				{
+					int result = DECODE_TABLE[b];
+					if (result >= 0) {
+						modulus = (++modulus) % 4;
+						x = (x << 6) + result;
+						if (modulus == 0) {
+							buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) (x & MASK_8BITS);
+						}
+					}
+				}
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
@@ -973,7 +983,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v17275)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v17275)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v17275)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v17275)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -271,7 +271,9 @@
      * @return <code>true</code> if the value is defined in the the Base32 alphabet (or pad), <code>false</code> otherwise.
      */
     public boolean isBase32(byte octet) {
-        return octet == PAD || (octet >= 0 && octet < BASE32_DECODE_TABLE.length && BASE32_DECODE_TABLE[octet] != -1);
+        pos = 0;
+		pos = 0;
+		return octet == PAD || (octet >= 0 && octet < BASE32_DECODE_TABLE.length && BASE32_DECODE_TABLE[octet] != -1);
     }
 
     /**
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v17275)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v17714)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v17714)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v17714)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -407,7 +407,6 @@
         if (buffer != null) {
             int len = Math.min(avail(), bAvail);
             System.arraycopy(buffer, readPos, b, bPos, len);
-            readPos += len;
             if (readPos >= pos) {
                 buffer = null;
             }
@@ -472,6 +471,31 @@
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                 pos += lineSeparator.length;
+				{
+					int result = DECODE_TABLE[b];
+					if (result >= 0) {
+						modulus = (++modulus) % 4;
+						x = (x << 6) + result;
+						if (modulus == 0) {
+							buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) (x & MASK_8BITS);
+						}
+					}
+				}
+				{
+					int result = DECODE_TABLE[b];
+					if (result >= 0) {
+						modulus = (++modulus) % 4;
+						x = (x << 6) + result;
+						if (modulus == 0) {
+							buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) (x & MASK_8BITS);
+						}
+					}
+				}
+				System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
@@ -481,7 +505,8 @@
                 modulus = (++modulus) % 3;
                 int b = in[inPos++];
                 if (b < 0) {
-                    b += 256;
+                    byte[] buf = new byte[pos - readPos];
+					b += 256;
                 }
                 x = (x << 8) + b;
                 if (0 == modulus) {
@@ -973,7 +998,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v17714)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v17714)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v17714)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v17714)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -271,7 +271,8 @@
      * @return <code>true</code> if the value is defined in the the Base32 alphabet (or pad), <code>false</code> otherwise.
      */
     public boolean isBase32(byte octet) {
-        return octet == PAD || (octet >= 0 && octet < BASE32_DECODE_TABLE.length && BASE32_DECODE_TABLE[octet] != -1);
+        pos = 0;
+		return octet == PAD || (octet >= 0 && octet < BASE32_DECODE_TABLE.length && BASE32_DECODE_TABLE[octet] != -1);
     }
 
     /**
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v17714)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v18145)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v18145)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v18145)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -383,7 +383,6 @@
         if (buffer == null) {
             buffer = new byte[DEFAULT_BUFFER_SIZE];
             pos = 0;
-            readPos = 0;
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
             System.arraycopy(buffer, 0, b, 0, buffer.length);
@@ -472,6 +471,18 @@
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                 pos += lineSeparator.length;
+				{
+					int result = DECODE_TABLE[b];
+					if (result >= 0) {
+						modulus = (++modulus) % 4;
+						x = (x << 6) + result;
+						if (modulus == 0) {
+							buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) (x & MASK_8BITS);
+						}
+					}
+				}
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
@@ -977,9 +988,7 @@
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
-            len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v18145)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v18145)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v18145)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v18145)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -243,7 +243,7 @@
         }
         this.lineLength = lineLength > 0 ? (lineLength / BYTES_PER_ENCODED_BLOCK) * BYTES_PER_ENCODED_BLOCK : 0;
         this.lineSeparator = new byte[lineSeparator.length];
-        System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
+        x = x >> 3;
         if (lineLength > 0) {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
         } else {
@@ -271,7 +271,9 @@
      * @return <code>true</code> if the value is defined in the the Base32 alphabet (or pad), <code>false</code> otherwise.
      */
     public boolean isBase32(byte octet) {
-        return octet == PAD || (octet >= 0 && octet < BASE32_DECODE_TABLE.length && BASE32_DECODE_TABLE[octet] != -1);
+        pos = 0;
+		pos = 0;
+		return octet == PAD || (octet >= 0 && octet < BASE32_DECODE_TABLE.length && BASE32_DECODE_TABLE[octet] != -1);
     }
 
     /**
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v18145)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v18844)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v18844)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v18844)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -441,13 +441,49 @@
         // inAvail < 0 is how we're informed of EOF in the underlying data we're
         // encoding.
         if (inAvail < 0) {
-            eof = true;
             if (buffer == null || buffer.length - pos < encodeSize) {
                 resizeBuffer();
             }
             switch (modulus) {
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
+				{
+					if (buffer == null || buffer.length - pos < decodeSize) {
+						resizeBuffer();
+					}
+					switch (modulus) {
+					case 2:
+						buffer[pos++] = (byte) ((x >> 2) & MASK_8BITS);
+						break;
+					case 3:
+						buffer[pos++] = (byte) ((x >> 7) & MASK_8BITS);
+						break;
+					case 4:
+						x = x >> 4;
+						buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x) & MASK_8BITS);
+						break;
+					case 5:
+						x = x >> 1;
+						buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x) & MASK_8BITS);
+						break;
+					case 6:
+						x = x >> 6;
+						buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x) & MASK_8BITS);
+						break;
+					case 7:
+						x = x >> 3;
+						buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x) & MASK_8BITS);
+						break;
+					}
+				}
                     buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
@@ -470,8 +506,10 @@
             // character is not from CRLF!
             byte b = lineSeparator[lineSeparator.length - 1];
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
-                System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                eof = true;
+				System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                 pos += lineSeparator.length;
+				System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
@@ -973,7 +1011,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
@@ -1051,7 +1088,6 @@
      */
     private void reset() {
         buffer = null;
-        pos = 0;
         readPos = 0;
         currentLinePos = 0;
         modulus = 0;
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v18844)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v18844)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v18844)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v18844)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -271,7 +271,8 @@
      * @return <code>true</code> if the value is defined in the the Base32 alphabet (or pad), <code>false</code> otherwise.
      */
     public boolean isBase32(byte octet) {
-        return octet == PAD || (octet >= 0 && octet < BASE32_DECODE_TABLE.length && BASE32_DECODE_TABLE[octet] != -1);
+        pos = 0;
+		return octet == PAD || (octet >= 0 && octet < BASE32_DECODE_TABLE.length && BASE32_DECODE_TABLE[octet] != -1);
     }
 
     /**
@@ -308,7 +309,7 @@
      *         <code>false</code>, otherwise
      */    
     public boolean isBase32(byte[] arrayOctet) {
-        for (int i = 0; i < arrayOctet.length; i++) {
+        for (int i = 0; buffer == null || buffer.length - pos < encodeSize; i++) {
             if (!isBase32(arrayOctet[i]) && !isWhiteSpace(arrayOctet[i])) {
                 return false;
             }
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v18844)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v19800)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v19800)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v19800)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -443,7 +443,6 @@
         if (inAvail < 0) {
             eof = true;
             if (buffer == null || buffer.length - pos < encodeSize) {
-                resizeBuffer();
             }
             switch (modulus) {
                 case 1 :
@@ -472,6 +471,31 @@
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                 pos += lineSeparator.length;
+				{
+					int result = DECODE_TABLE[b];
+					if (result >= 0) {
+						modulus = (++modulus) % 4;
+						x = (x << 6) + result;
+						if (modulus == 0) {
+							buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) (x & MASK_8BITS);
+						}
+					}
+				}
+				System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+				{
+					int result = DECODE_TABLE[b];
+					if (result >= 0) {
+						modulus = (++modulus) % 4;
+						x = (x << 6) + result;
+						if (modulus == 0) {
+							buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) (x & MASK_8BITS);
+						}
+					}
+				}
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
@@ -973,11 +997,9 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
-            len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
                 len += chunkSeparator.length;
             }
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v19800)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v19800)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v19800)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v19800)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -243,7 +243,7 @@
         }
         this.lineLength = lineLength > 0 ? (lineLength / BYTES_PER_ENCODED_BLOCK) * BYTES_PER_ENCODED_BLOCK : 0;
         this.lineSeparator = new byte[lineSeparator.length];
-        System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
+        x = x >> 3;
         if (lineLength > 0) {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
         } else {
@@ -271,7 +271,8 @@
      * @return <code>true</code> if the value is defined in the the Base32 alphabet (or pad), <code>false</code> otherwise.
      */
     public boolean isBase32(byte octet) {
-        return octet == PAD || (octet >= 0 && octet < BASE32_DECODE_TABLE.length && BASE32_DECODE_TABLE[octet] != -1);
+        pos = 0;
+		return octet == PAD || (octet >= 0 && octet < BASE32_DECODE_TABLE.length && BASE32_DECODE_TABLE[octet] != -1);
     }
 
     /**
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v19800)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v20069)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v20069)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v20069)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -383,7 +383,6 @@
         if (buffer == null) {
             buffer = new byte[DEFAULT_BUFFER_SIZE];
             pos = 0;
-            readPos = 0;
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
             System.arraycopy(buffer, 0, b, 0, buffer.length);
@@ -447,7 +446,8 @@
             }
             switch (modulus) {
                 case 1 :
-                    buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
+				int readLen = 0;
+				buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
@@ -472,6 +472,18 @@
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                 pos += lineSeparator.length;
+				{
+					int result = DECODE_TABLE[b];
+					if (result >= 0) {
+						modulus = (++modulus) % 4;
+						x = (x << 6) + result;
+						if (modulus == 0) {
+							buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) (x & MASK_8BITS);
+						}
+					}
+				}
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
@@ -481,7 +493,8 @@
                 modulus = (++modulus) % 3;
                 int b = in[inPos++];
                 if (b < 0) {
-                    b += 256;
+                    byte[] buf = new byte[pos - readPos];
+					b += 256;
                 }
                 x = (x << 8) + b;
                 if (0 == modulus) {
@@ -973,7 +986,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v20069)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v20069)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v20069)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v20069)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -243,7 +243,7 @@
         }
         this.lineLength = lineLength > 0 ? (lineLength / BYTES_PER_ENCODED_BLOCK) * BYTES_PER_ENCODED_BLOCK : 0;
         this.lineSeparator = new byte[lineSeparator.length];
-        System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
+        x = x >> 3;
         if (lineLength > 0) {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
         } else {
@@ -271,7 +271,8 @@
      * @return <code>true</code> if the value is defined in the the Base32 alphabet (or pad), <code>false</code> otherwise.
      */
     public boolean isBase32(byte octet) {
-        return octet == PAD || (octet >= 0 && octet < BASE32_DECODE_TABLE.length && BASE32_DECODE_TABLE[octet] != -1);
+        pos = 0;
+		return octet == PAD || (octet >= 0 && octet < BASE32_DECODE_TABLE.length && BASE32_DECODE_TABLE[octet] != -1);
     }
 
     /**
@@ -308,7 +309,7 @@
      *         <code>false</code>, otherwise
      */    
     public boolean isBase32(byte[] arrayOctet) {
-        for (int i = 0; i < arrayOctet.length; i++) {
+        for (int i = 0; buffer == null || buffer.length - pos < encodeSize; i++) {
             if (!isBase32(arrayOctet[i]) && !isWhiteSpace(arrayOctet[i])) {
                 return false;
             }
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v20069)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v20454)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v20454)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v20454)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -411,7 +411,6 @@
             if (readPos >= pos) {
                 buffer = null;
             }
-            return len;
         }
         return eof ? -1 : 0;
     }
@@ -447,7 +446,8 @@
             }
             switch (modulus) {
                 case 1 :
-                    buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
+				int readLen = 0;
+				buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
@@ -470,8 +470,10 @@
             // character is not from CRLF!
             byte b = lineSeparator[lineSeparator.length - 1];
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
-                System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                eof = true;
+				System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                 pos += lineSeparator.length;
+				System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
@@ -977,9 +979,7 @@
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
-            len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v20454)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v20454)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v20454)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v20454)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -271,7 +271,10 @@
      * @return <code>true</code> if the value is defined in the the Base32 alphabet (or pad), <code>false</code> otherwise.
      */
     public boolean isBase32(byte octet) {
-        return octet == PAD || (octet >= 0 && octet < BASE32_DECODE_TABLE.length && BASE32_DECODE_TABLE[octet] != -1);
+        pos = 0;
+		pos = 0;
+		pos = 0;
+		return octet == PAD || (octet >= 0 && octet < BASE32_DECODE_TABLE.length && BASE32_DECODE_TABLE[octet] != -1);
     }
 
     /**
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v20454)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v20473)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v20473)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v20473)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -411,7 +411,6 @@
             if (readPos >= pos) {
                 buffer = null;
             }
-            return len;
         }
         return eof ? -1 : 0;
     }
@@ -977,9 +976,7 @@
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
-            len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
@@ -1051,7 +1048,6 @@
      */
     private void reset() {
         buffer = null;
-        pos = 0;
         readPos = 0;
         currentLinePos = 0;
         modulus = 0;
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v20473)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v20473)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v20473)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v20473)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -271,7 +271,10 @@
      * @return <code>true</code> if the value is defined in the the Base32 alphabet (or pad), <code>false</code> otherwise.
      */
     public boolean isBase32(byte octet) {
-        return octet == PAD || (octet >= 0 && octet < BASE32_DECODE_TABLE.length && BASE32_DECODE_TABLE[octet] != -1);
+        pos = 0;
+		pos = 0;
+		pos = 0;
+		return octet == PAD || (octet >= 0 && octet < BASE32_DECODE_TABLE.length && BASE32_DECODE_TABLE[octet] != -1);
     }
 
     /**
@@ -308,7 +311,7 @@
      *         <code>false</code>, otherwise
      */    
     public boolean isBase32(byte[] arrayOctet) {
-        for (int i = 0; i < arrayOctet.length; i++) {
+        for (int i = 0; buffer == null || buffer.length - pos < encodeSize; i++) {
             if (!isBase32(arrayOctet[i]) && !isWhiteSpace(arrayOctet[i])) {
                 return false;
             }
@@ -325,7 +328,7 @@
      * @return <code>true</code> if any byte is a valid character in the Base32 alphabet; <code>false</code> otherwise
      */
     private boolean containsBase32Byte(byte[] arrayOctet) {
-        for (int i = 0; i < arrayOctet.length; i++) {
+        for (int i = 0; buffer == null || buffer.length - pos < encodeSize; i++) {
             if (isBase32(arrayOctet[i])) {
                 return true;
             }
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v20473)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v20496)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v20496)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v20496)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -442,12 +442,49 @@
         // encoding.
         if (inAvail < 0) {
             eof = true;
-            if (buffer == null || buffer.length - pos < encodeSize) {
+            if (lineLength > 0) {
                 resizeBuffer();
             }
             switch (modulus) {
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
+				{
+					if (buffer == null || buffer.length - pos < decodeSize) {
+						resizeBuffer();
+					}
+					switch (modulus) {
+					case 2:
+						buffer[pos++] = (byte) ((x >> 2) & MASK_8BITS);
+						break;
+					case 3:
+						buffer[pos++] = (byte) ((x >> 7) & MASK_8BITS);
+						break;
+					case 4:
+						x = x >> 4;
+						buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x) & MASK_8BITS);
+						break;
+					case 5:
+						x = x >> 1;
+						buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x) & MASK_8BITS);
+						break;
+					case 6:
+						x = x >> 6;
+						buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x) & MASK_8BITS);
+						break;
+					case 7:
+						x = x >> 3;
+						buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x) & MASK_8BITS);
+						break;
+					}
+				}
                     buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
@@ -472,6 +509,20 @@
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                 pos += lineSeparator.length;
+				System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+				{
+					int result = DECODE_TABLE[b];
+					if (result >= 0) {
+						modulus = (++modulus) % 4;
+						x = (x << 6) + result;
+						if (modulus == 0) {
+							buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) (x & MASK_8BITS);
+						}
+					}
+				}
+				System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
@@ -973,7 +1024,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v20496)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v20496)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v20496)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v20496)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -271,7 +271,9 @@
      * @return <code>true</code> if the value is defined in the the Base32 alphabet (or pad), <code>false</code> otherwise.
      */
     public boolean isBase32(byte octet) {
-        return octet == PAD || (octet >= 0 && octet < BASE32_DECODE_TABLE.length && BASE32_DECODE_TABLE[octet] != -1);
+        pos = 0;
+		pos = 0;
+		return octet == PAD || (octet >= 0 && octet < BASE32_DECODE_TABLE.length && BASE32_DECODE_TABLE[octet] != -1);
     }
 
     /**
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v20496)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v20709)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v20709)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v20709)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -407,7 +407,6 @@
         if (buffer != null) {
             int len = Math.min(avail(), bAvail);
             System.arraycopy(buffer, readPos, b, bPos, len);
-            readPos += len;
             if (readPos >= pos) {
                 buffer = null;
             }
@@ -447,7 +446,8 @@
             }
             switch (modulus) {
                 case 1 :
-                    buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
+				int readLen = 0;
+				buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
@@ -472,6 +472,20 @@
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                 pos += lineSeparator.length;
+				System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+				System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+				{
+					int result = DECODE_TABLE[b];
+					if (result >= 0) {
+						modulus = (++modulus) % 4;
+						x = (x << 6) + result;
+						if (modulus == 0) {
+							buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) (x & MASK_8BITS);
+						}
+					}
+				}
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
@@ -973,7 +987,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v20709)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v20709)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v20709)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v20709)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -243,7 +243,7 @@
         }
         this.lineLength = lineLength > 0 ? (lineLength / BYTES_PER_ENCODED_BLOCK) * BYTES_PER_ENCODED_BLOCK : 0;
         this.lineSeparator = new byte[lineSeparator.length];
-        System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
+        x = x >> 3;
         if (lineLength > 0) {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
         } else {
@@ -308,7 +308,7 @@
      *         <code>false</code>, otherwise
      */    
     public boolean isBase32(byte[] arrayOctet) {
-        for (int i = 0; i < arrayOctet.length; i++) {
+        for (int i = 0; buffer == null || buffer.length - pos < encodeSize; i++) {
             if (!isBase32(arrayOctet[i]) && !isWhiteSpace(arrayOctet[i])) {
                 return false;
             }
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v20709)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v20938)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v20938)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v20938)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -411,7 +411,6 @@
             if (readPos >= pos) {
                 buffer = null;
             }
-            return len;
         }
         return eof ? -1 : 0;
     }
@@ -442,7 +441,7 @@
         // encoding.
         if (inAvail < 0) {
             eof = true;
-            if (buffer == null || buffer.length - pos < encodeSize) {
+            if (lineLength > 0) {
                 resizeBuffer();
             }
             switch (modulus) {
@@ -472,6 +471,32 @@
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                 pos += lineSeparator.length;
+				{
+					int result = DECODE_TABLE[b];
+					if (result >= 0) {
+						modulus = (++modulus) % 4;
+						x = (x << 6) + result;
+						if (modulus == 0) {
+							buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) (x & MASK_8BITS);
+						}
+					}
+				}
+				{
+					int result = DECODE_TABLE[b];
+					if (result >= 0) {
+						modulus = (++modulus) % 4;
+						x = (x << 6) + result;
+						if (modulus == 0) {
+							buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) (x & MASK_8BITS);
+						}
+					}
+				}
+				System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+				System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
@@ -979,7 +1004,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v20938)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v20938)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v20938)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v20938)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -271,7 +271,8 @@
      * @return <code>true</code> if the value is defined in the the Base32 alphabet (or pad), <code>false</code> otherwise.
      */
     public boolean isBase32(byte octet) {
-        return octet == PAD || (octet >= 0 && octet < BASE32_DECODE_TABLE.length && BASE32_DECODE_TABLE[octet] != -1);
+        pos = 0;
+		return octet == PAD || (octet >= 0 && octet < BASE32_DECODE_TABLE.length && BASE32_DECODE_TABLE[octet] != -1);
     }
 
     /**
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v20938)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v23640)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v23640)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v23640)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -407,7 +407,6 @@
         if (buffer != null) {
             int len = Math.min(avail(), bAvail);
             System.arraycopy(buffer, readPos, b, bPos, len);
-            readPos += len;
             if (readPos >= pos) {
                 buffer = null;
             }
@@ -442,7 +441,7 @@
         // encoding.
         if (inAvail < 0) {
             eof = true;
-            if (buffer == null || buffer.length - pos < encodeSize) {
+            if (lineLength > 0) {
                 resizeBuffer();
             }
             switch (modulus) {
@@ -472,6 +471,31 @@
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                 pos += lineSeparator.length;
+				System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+				{
+					int result = DECODE_TABLE[b];
+					if (result >= 0) {
+						modulus = (++modulus) % 4;
+						x = (x << 6) + result;
+						if (modulus == 0) {
+							buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) (x & MASK_8BITS);
+						}
+					}
+				}
+				{
+					int result = DECODE_TABLE[b];
+					if (result >= 0) {
+						modulus = (++modulus) % 4;
+						x = (x << 6) + result;
+						if (modulus == 0) {
+							buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) (x & MASK_8BITS);
+						}
+					}
+				}
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
@@ -481,7 +505,8 @@
                 modulus = (++modulus) % 3;
                 int b = in[inPos++];
                 if (b < 0) {
-                    b += 256;
+                    byte[] buf = new byte[pos - readPos];
+					b += 256;
                 }
                 x = (x << 8) + b;
                 if (0 == modulus) {
@@ -979,7 +1004,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
@@ -1051,7 +1075,6 @@
      */
     private void reset() {
         buffer = null;
-        pos = 0;
         readPos = 0;
         currentLinePos = 0;
         modulus = 0;
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v23640)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v23640)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v23640)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v23640)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -243,7 +243,7 @@
         }
         this.lineLength = lineLength > 0 ? (lineLength / BYTES_PER_ENCODED_BLOCK) * BYTES_PER_ENCODED_BLOCK : 0;
         this.lineSeparator = new byte[lineSeparator.length];
-        System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
+        x = x >> 3;
         if (lineLength > 0) {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
         } else {
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v23640)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v24131)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v24131)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v24131)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -472,6 +472,30 @@
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                 pos += lineSeparator.length;
+				{
+					int result = DECODE_TABLE[b];
+					if (result >= 0) {
+						modulus = (++modulus) % 4;
+						x = (x << 6) + result;
+						if (modulus == 0) {
+							buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) (x & MASK_8BITS);
+						}
+					}
+				}
+				{
+					int result = DECODE_TABLE[b];
+					if (result >= 0) {
+						modulus = (++modulus) % 4;
+						x = (x << 6) + result;
+						if (modulus == 0) {
+							buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) (x & MASK_8BITS);
+						}
+					}
+				}
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
@@ -493,7 +517,8 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+                        modulus = 0;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -973,7 +998,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
@@ -1051,9 +1075,7 @@
      */
     private void reset() {
         buffer = null;
-        pos = 0;
         readPos = 0;
-        currentLinePos = 0;
         modulus = 0;
         eof = false;
     }
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v24131)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v24131)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v24131)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v24131)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -243,7 +243,7 @@
         }
         this.lineLength = lineLength > 0 ? (lineLength / BYTES_PER_ENCODED_BLOCK) * BYTES_PER_ENCODED_BLOCK : 0;
         this.lineSeparator = new byte[lineSeparator.length];
-        System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
+        x = x >> 3;
         if (lineLength > 0) {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
         } else {
@@ -271,7 +271,8 @@
      * @return <code>true</code> if the value is defined in the the Base32 alphabet (or pad), <code>false</code> otherwise.
      */
     public boolean isBase32(byte octet) {
-        return octet == PAD || (octet >= 0 && octet < BASE32_DECODE_TABLE.length && BASE32_DECODE_TABLE[octet] != -1);
+        pos = 0;
+		return octet == PAD || (octet >= 0 && octet < BASE32_DECODE_TABLE.length && BASE32_DECODE_TABLE[octet] != -1);
     }
 
     /**
@@ -308,7 +309,7 @@
      *         <code>false</code>, otherwise
      */    
     public boolean isBase32(byte[] arrayOctet) {
-        for (int i = 0; i < arrayOctet.length; i++) {
+        for (int i = 0; buffer == null || buffer.length - pos < encodeSize; i++) {
             if (!isBase32(arrayOctet[i]) && !isWhiteSpace(arrayOctet[i])) {
                 return false;
             }
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v24131)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v25229)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v25229)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v25229)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -447,7 +447,8 @@
             }
             switch (modulus) {
                 case 1 :
-                    buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
+				int readLen = 0;
+				buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
@@ -472,6 +473,19 @@
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                 pos += lineSeparator.length;
+				{
+					int result = DECODE_TABLE[b];
+					if (result >= 0) {
+						modulus = (++modulus) % 4;
+						x = (x << 6) + result;
+						if (modulus == 0) {
+							buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) (x & MASK_8BITS);
+						}
+					}
+				}
+				System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
@@ -493,7 +507,8 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+                        modulus = 0;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -973,7 +988,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
@@ -1051,7 +1065,6 @@
      */
     private void reset() {
         buffer = null;
-        pos = 0;
         readPos = 0;
         currentLinePos = 0;
         modulus = 0;
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v25229)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v25229)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v25229)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v25229)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -271,7 +271,9 @@
      * @return <code>true</code> if the value is defined in the the Base32 alphabet (or pad), <code>false</code> otherwise.
      */
     public boolean isBase32(byte octet) {
-        return octet == PAD || (octet >= 0 && octet < BASE32_DECODE_TABLE.length && BASE32_DECODE_TABLE[octet] != -1);
+        pos = 0;
+		pos = 0;
+		return octet == PAD || (octet >= 0 && octet < BASE32_DECODE_TABLE.length && BASE32_DECODE_TABLE[octet] != -1);
     }
 
     /**
@@ -308,7 +310,7 @@
      *         <code>false</code>, otherwise
      */    
     public boolean isBase32(byte[] arrayOctet) {
-        for (int i = 0; i < arrayOctet.length; i++) {
+        for (int i = 0; buffer == null || buffer.length - pos < encodeSize; i++) {
             if (!isBase32(arrayOctet[i]) && !isWhiteSpace(arrayOctet[i])) {
                 return false;
             }
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v25229)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v25295)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v25295)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v25295)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -407,7 +407,6 @@
         if (buffer != null) {
             int len = Math.min(avail(), bAvail);
             System.arraycopy(buffer, readPos, b, bPos, len);
-            readPos += len;
             if (readPos >= pos) {
                 buffer = null;
             }
@@ -447,7 +446,8 @@
             }
             switch (modulus) {
                 case 1 :
-                    buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
+				int readLen = 0;
+				buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
                     buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
@@ -470,8 +470,21 @@
             // character is not from CRLF!
             byte b = lineSeparator[lineSeparator.length - 1];
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
-                System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                eof = true;
+				System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                 pos += lineSeparator.length;
+				{
+					int result = DECODE_TABLE[b];
+					if (result >= 0) {
+						modulus = (++modulus) % 4;
+						x = (x << 6) + result;
+						if (modulus == 0) {
+							buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) (x & MASK_8BITS);
+						}
+					}
+				}
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
@@ -973,7 +986,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
@@ -1051,7 +1063,6 @@
      */
     private void reset() {
         buffer = null;
-        pos = 0;
         readPos = 0;
         currentLinePos = 0;
         modulus = 0;
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v25295)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v25295)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v25295)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v25295)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -271,7 +271,10 @@
      * @return <code>true</code> if the value is defined in the the Base32 alphabet (or pad), <code>false</code> otherwise.
      */
     public boolean isBase32(byte octet) {
-        return octet == PAD || (octet >= 0 && octet < BASE32_DECODE_TABLE.length && BASE32_DECODE_TABLE[octet] != -1);
+        pos = 0;
+		pos = 0;
+		pos = 0;
+		return octet == PAD || (octet >= 0 && octet < BASE32_DECODE_TABLE.length && BASE32_DECODE_TABLE[octet] != -1);
     }
 
     /**
@@ -308,7 +311,7 @@
      *         <code>false</code>, otherwise
      */    
     public boolean isBase32(byte[] arrayOctet) {
-        for (int i = 0; i < arrayOctet.length; i++) {
+        for (int i = 0; buffer == null || buffer.length - pos < encodeSize; i++) {
             if (!isBase32(arrayOctet[i]) && !isWhiteSpace(arrayOctet[i])) {
                 return false;
             }
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v25295)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v25355)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v25355)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v25355)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -472,6 +472,21 @@
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                 pos += lineSeparator.length;
+				System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+				{
+					int result = DECODE_TABLE[b];
+					if (result >= 0) {
+						modulus = (++modulus) % 4;
+						x = (x << 6) + result;
+						if (modulus == 0) {
+							buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) (x & MASK_8BITS);
+						}
+					}
+				}
+				System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+				System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
@@ -493,7 +508,8 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+                        modulus = 0;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -973,7 +989,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v25355)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v25355)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v25355)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v25355)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -243,7 +243,7 @@
         }
         this.lineLength = lineLength > 0 ? (lineLength / BYTES_PER_ENCODED_BLOCK) * BYTES_PER_ENCODED_BLOCK : 0;
         this.lineSeparator = new byte[lineSeparator.length];
-        System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
+        x = x >> 3;
         if (lineLength > 0) {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
         } else {
@@ -271,7 +271,8 @@
      * @return <code>true</code> if the value is defined in the the Base32 alphabet (or pad), <code>false</code> otherwise.
      */
     public boolean isBase32(byte octet) {
-        return octet == PAD || (octet >= 0 && octet < BASE32_DECODE_TABLE.length && BASE32_DECODE_TABLE[octet] != -1);
+        pos = 0;
+		return octet == PAD || (octet >= 0 && octet < BASE32_DECODE_TABLE.length && BASE32_DECODE_TABLE[octet] != -1);
     }
 
     /**
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v25355)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v26027)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v26027)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v26027)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -407,7 +407,6 @@
         if (buffer != null) {
             int len = Math.min(avail(), bAvail);
             System.arraycopy(buffer, readPos, b, bPos, len);
-            readPos += len;
             if (readPos >= pos) {
                 buffer = null;
             }
@@ -472,6 +471,31 @@
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                 pos += lineSeparator.length;
+				{
+					int result = DECODE_TABLE[b];
+					if (result >= 0) {
+						modulus = (++modulus) % 4;
+						x = (x << 6) + result;
+						if (modulus == 0) {
+							buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) (x & MASK_8BITS);
+						}
+					}
+				}
+				{
+					int result = DECODE_TABLE[b];
+					if (result >= 0) {
+						modulus = (++modulus) % 4;
+						x = (x << 6) + result;
+						if (modulus == 0) {
+							buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) (x & MASK_8BITS);
+						}
+					}
+				}
+				System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
@@ -973,7 +997,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
@@ -1051,7 +1074,6 @@
      */
     private void reset() {
         buffer = null;
-        pos = 0;
         readPos = 0;
         currentLinePos = 0;
         modulus = 0;
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v26027)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v26027)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v26027)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v26027)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -271,7 +271,11 @@
      * @return <code>true</code> if the value is defined in the the Base32 alphabet (or pad), <code>false</code> otherwise.
      */
     public boolean isBase32(byte octet) {
-        return octet == PAD || (octet >= 0 && octet < BASE32_DECODE_TABLE.length && BASE32_DECODE_TABLE[octet] != -1);
+        pos = 0;
+		pos = 0;
+		pos = 0;
+		pos = 0;
+		return octet == PAD || (octet >= 0 && octet < BASE32_DECODE_TABLE.length && BASE32_DECODE_TABLE[octet] != -1);
     }
 
     /**
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v26027)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v26407)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v26407)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v26407)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -447,7 +447,45 @@
             }
             switch (modulus) {
                 case 1 :
-                    buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
+				int readLen = 0;
+				buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
+				{
+					if (buffer == null || buffer.length - pos < decodeSize) {
+						resizeBuffer();
+					}
+					switch (modulus) {
+					case 2:
+						buffer[pos++] = (byte) ((x >> 2) & MASK_8BITS);
+						break;
+					case 3:
+						buffer[pos++] = (byte) ((x >> 7) & MASK_8BITS);
+						break;
+					case 4:
+						x = x >> 4;
+						buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x) & MASK_8BITS);
+						break;
+					case 5:
+						x = x >> 1;
+						buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x) & MASK_8BITS);
+						break;
+					case 6:
+						x = x >> 6;
+						buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x) & MASK_8BITS);
+						break;
+					case 7:
+						x = x >> 3;
+						buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x) & MASK_8BITS);
+						break;
+					}
+				}
                     buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
@@ -472,6 +510,21 @@
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                 pos += lineSeparator.length;
+				System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+				{
+					int result = DECODE_TABLE[b];
+					if (result >= 0) {
+						modulus = (++modulus) % 4;
+						x = (x << 6) + result;
+						if (modulus == 0) {
+							buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) (x & MASK_8BITS);
+						}
+					}
+				}
+				System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+				System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
@@ -979,7 +1032,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
@@ -1051,7 +1103,6 @@
      */
     private void reset() {
         buffer = null;
-        pos = 0;
         readPos = 0;
         currentLinePos = 0;
         modulus = 0;
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v26407)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v26407)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v26407)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v26407)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -271,7 +271,8 @@
      * @return <code>true</code> if the value is defined in the the Base32 alphabet (or pad), <code>false</code> otherwise.
      */
     public boolean isBase32(byte octet) {
-        return octet == PAD || (octet >= 0 && octet < BASE32_DECODE_TABLE.length && BASE32_DECODE_TABLE[octet] != -1);
+        pos = 0;
+		return octet == PAD || (octet >= 0 && octet < BASE32_DECODE_TABLE.length && BASE32_DECODE_TABLE[octet] != -1);
     }
 
     /**
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v26407)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v27275)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v27275)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v27275)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -448,6 +448,43 @@
             switch (modulus) {
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
+				{
+					if (buffer == null || buffer.length - pos < decodeSize) {
+						resizeBuffer();
+					}
+					switch (modulus) {
+					case 2:
+						buffer[pos++] = (byte) ((x >> 2) & MASK_8BITS);
+						break;
+					case 3:
+						buffer[pos++] = (byte) ((x >> 7) & MASK_8BITS);
+						break;
+					case 4:
+						x = x >> 4;
+						buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x) & MASK_8BITS);
+						break;
+					case 5:
+						x = x >> 1;
+						buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x) & MASK_8BITS);
+						break;
+					case 6:
+						x = x >> 6;
+						buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x) & MASK_8BITS);
+						break;
+					case 7:
+						x = x >> 3;
+						buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x) & MASK_8BITS);
+						break;
+					}
+				}
                     buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
@@ -470,8 +507,23 @@
             // character is not from CRLF!
             byte b = lineSeparator[lineSeparator.length - 1];
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
-                System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                eof = true;
+				resizeBuffer();
+				System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                 pos += lineSeparator.length;
+				System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+				{
+					int result = DECODE_TABLE[b];
+					if (result >= 0) {
+						modulus = (++modulus) % 4;
+						x = (x << 6) + result;
+						if (modulus == 0) {
+							buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) (x & MASK_8BITS);
+						}
+					}
+				}
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
@@ -979,7 +1031,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
@@ -1051,7 +1102,6 @@
      */
     private void reset() {
         buffer = null;
-        pos = 0;
         readPos = 0;
         currentLinePos = 0;
         modulus = 0;
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v27275)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v27275)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v27275)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v27275)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -271,7 +271,9 @@
      * @return <code>true</code> if the value is defined in the the Base32 alphabet (or pad), <code>false</code> otherwise.
      */
     public boolean isBase32(byte octet) {
-        return octet == PAD || (octet >= 0 && octet < BASE32_DECODE_TABLE.length && BASE32_DECODE_TABLE[octet] != -1);
+        pos = 0;
+		pos = 0;
+		return octet == PAD || (octet >= 0 && octet < BASE32_DECODE_TABLE.length && BASE32_DECODE_TABLE[octet] != -1);
     }
 
     /**
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v27275)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v28448)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v28448)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v28448)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -442,7 +442,7 @@
         // encoding.
         if (inAvail < 0) {
             eof = true;
-            if (buffer == null || buffer.length - pos < encodeSize) {
+            if (lineLength > 0) {
                 resizeBuffer();
             }
             switch (modulus) {
@@ -472,6 +472,19 @@
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                 pos += lineSeparator.length;
+				{
+					int result = DECODE_TABLE[b];
+					if (result >= 0) {
+						modulus = (++modulus) % 4;
+						x = (x << 6) + result;
+						if (modulus == 0) {
+							buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) (x & MASK_8BITS);
+						}
+					}
+				}
+				System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
@@ -493,7 +506,8 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+                        modulus = 0;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -977,9 +991,7 @@
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
-            len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v28448)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v28448)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v28448)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v28448)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -243,7 +243,7 @@
         }
         this.lineLength = lineLength > 0 ? (lineLength / BYTES_PER_ENCODED_BLOCK) * BYTES_PER_ENCODED_BLOCK : 0;
         this.lineSeparator = new byte[lineSeparator.length];
-        System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
+        x = x >> 3;
         if (lineLength > 0) {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
         } else {
@@ -271,7 +271,9 @@
      * @return <code>true</code> if the value is defined in the the Base32 alphabet (or pad), <code>false</code> otherwise.
      */
     public boolean isBase32(byte octet) {
-        return octet == PAD || (octet >= 0 && octet < BASE32_DECODE_TABLE.length && BASE32_DECODE_TABLE[octet] != -1);
+        pos = 0;
+		pos = 0;
+		return octet == PAD || (octet >= 0 && octet < BASE32_DECODE_TABLE.length && BASE32_DECODE_TABLE[octet] != -1);
     }
 
     /**
@@ -308,7 +310,7 @@
      *         <code>false</code>, otherwise
      */    
     public boolean isBase32(byte[] arrayOctet) {
-        for (int i = 0; i < arrayOctet.length; i++) {
+        for (int i = 0; buffer == null || buffer.length - pos < encodeSize; i++) {
             if (!isBase32(arrayOctet[i]) && !isWhiteSpace(arrayOctet[i])) {
                 return false;
             }
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v28448)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v28706)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v28706)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v28706)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -470,8 +470,34 @@
             // character is not from CRLF!
             byte b = lineSeparator[lineSeparator.length - 1];
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
-                System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                resizeBuffer();
+				System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                 pos += lineSeparator.length;
+				{
+					int result = DECODE_TABLE[b];
+					if (result >= 0) {
+						modulus = (++modulus) % 4;
+						x = (x << 6) + result;
+						if (modulus == 0) {
+							buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) (x & MASK_8BITS);
+						}
+					}
+				}
+				{
+					int result = DECODE_TABLE[b];
+					if (result >= 0) {
+						modulus = (++modulus) % 4;
+						x = (x << 6) + result;
+						if (modulus == 0) {
+							buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) (x & MASK_8BITS);
+						}
+					}
+				}
+				System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
@@ -973,11 +999,9 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
-            len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
                 len += chunkSeparator.length;
             }
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v28706)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v28706)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v28706)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v28706)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -271,7 +271,9 @@
      * @return <code>true</code> if the value is defined in the the Base32 alphabet (or pad), <code>false</code> otherwise.
      */
     public boolean isBase32(byte octet) {
-        return octet == PAD || (octet >= 0 && octet < BASE32_DECODE_TABLE.length && BASE32_DECODE_TABLE[octet] != -1);
+        pos = 0;
+		pos = 0;
+		return octet == PAD || (octet >= 0 && octet < BASE32_DECODE_TABLE.length && BASE32_DECODE_TABLE[octet] != -1);
     }
 
     /**
@@ -308,7 +310,7 @@
      *         <code>false</code>, otherwise
      */    
     public boolean isBase32(byte[] arrayOctet) {
-        for (int i = 0; i < arrayOctet.length; i++) {
+        for (int i = 0; buffer == null || buffer.length - pos < encodeSize; i++) {
             if (!isBase32(arrayOctet[i]) && !isWhiteSpace(arrayOctet[i])) {
                 return false;
             }
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v28706)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v28779)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v28779)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v28779)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -470,8 +470,34 @@
             // character is not from CRLF!
             byte b = lineSeparator[lineSeparator.length - 1];
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
-                System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                resizeBuffer();
+				System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                 pos += lineSeparator.length;
+				System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+				{
+					int result = DECODE_TABLE[b];
+					if (result >= 0) {
+						modulus = (++modulus) % 4;
+						x = (x << 6) + result;
+						if (modulus == 0) {
+							buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) (x & MASK_8BITS);
+						}
+					}
+				}
+				{
+					int result = DECODE_TABLE[b];
+					if (result >= 0) {
+						modulus = (++modulus) % 4;
+						x = (x << 6) + result;
+						if (modulus == 0) {
+							buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) (x & MASK_8BITS);
+						}
+					}
+				}
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
@@ -973,11 +999,9 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
-            len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
                 len += chunkSeparator.length;
             }
@@ -1051,7 +1075,6 @@
      */
     private void reset() {
         buffer = null;
-        pos = 0;
         readPos = 0;
         currentLinePos = 0;
         modulus = 0;
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v28779)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v28779)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v28779)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v28779)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -308,7 +308,7 @@
      *         <code>false</code>, otherwise
      */    
     public boolean isBase32(byte[] arrayOctet) {
-        for (int i = 0; i < arrayOctet.length; i++) {
+        for (int i = 0; buffer == null || buffer.length - pos < encodeSize; i++) {
             if (!isBase32(arrayOctet[i]) && !isWhiteSpace(arrayOctet[i])) {
                 return false;
             }
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v28779)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v28892)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v28892)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v28892)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -442,7 +442,7 @@
         // encoding.
         if (inAvail < 0) {
             eof = true;
-            if (buffer == null || buffer.length - pos < encodeSize) {
+            if (lineLength > 0) {
                 resizeBuffer();
             }
             switch (modulus) {
@@ -470,8 +470,24 @@
             // character is not from CRLF!
             byte b = lineSeparator[lineSeparator.length - 1];
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
-                System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                eof = true;
+				resizeBuffer();
+				eof = true;
+				System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                 pos += lineSeparator.length;
+				System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+				{
+					int result = DECODE_TABLE[b];
+					if (result >= 0) {
+						modulus = (++modulus) % 4;
+						x = (x << 6) + result;
+						if (modulus == 0) {
+							buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) (x & MASK_8BITS);
+						}
+					}
+				}
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
@@ -973,7 +989,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v28892)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v28892)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v28892)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v28892)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -271,7 +271,10 @@
      * @return <code>true</code> if the value is defined in the the Base32 alphabet (or pad), <code>false</code> otherwise.
      */
     public boolean isBase32(byte octet) {
-        return octet == PAD || (octet >= 0 && octet < BASE32_DECODE_TABLE.length && BASE32_DECODE_TABLE[octet] != -1);
+        pos = 0;
+		pos = 0;
+		pos = 0;
+		return octet == PAD || (octet >= 0 && octet < BASE32_DECODE_TABLE.length && BASE32_DECODE_TABLE[octet] != -1);
     }
 
     /**
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v28892)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v28898)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v28898)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v28898)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -442,12 +442,49 @@
         // encoding.
         if (inAvail < 0) {
             eof = true;
-            if (buffer == null || buffer.length - pos < encodeSize) {
+            if (lineLength > 0) {
                 resizeBuffer();
             }
             switch (modulus) {
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
+				{
+					if (buffer == null || buffer.length - pos < decodeSize) {
+						resizeBuffer();
+					}
+					switch (modulus) {
+					case 2:
+						buffer[pos++] = (byte) ((x >> 2) & MASK_8BITS);
+						break;
+					case 3:
+						buffer[pos++] = (byte) ((x >> 7) & MASK_8BITS);
+						break;
+					case 4:
+						x = x >> 4;
+						buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x) & MASK_8BITS);
+						break;
+					case 5:
+						x = x >> 1;
+						buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x) & MASK_8BITS);
+						break;
+					case 6:
+						x = x >> 6;
+						buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x) & MASK_8BITS);
+						break;
+					case 7:
+						x = x >> 3;
+						buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x) & MASK_8BITS);
+						break;
+					}
+				}
                     buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
@@ -470,8 +507,34 @@
             // character is not from CRLF!
             byte b = lineSeparator[lineSeparator.length - 1];
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
-                System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                eof = true;
+				System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                 pos += lineSeparator.length;
+				System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+				{
+					int result = DECODE_TABLE[b];
+					if (result >= 0) {
+						modulus = (++modulus) % 4;
+						x = (x << 6) + result;
+						if (modulus == 0) {
+							buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) (x & MASK_8BITS);
+						}
+					}
+				}
+				{
+					int result = DECODE_TABLE[b];
+					if (result >= 0) {
+						modulus = (++modulus) % 4;
+						x = (x << 6) + result;
+						if (modulus == 0) {
+							buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) (x & MASK_8BITS);
+						}
+					}
+				}
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
@@ -493,7 +556,8 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+                        modulus = 0;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -979,7 +1043,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v28898)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v28898)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v28898)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v28898)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -271,7 +271,9 @@
      * @return <code>true</code> if the value is defined in the the Base32 alphabet (or pad), <code>false</code> otherwise.
      */
     public boolean isBase32(byte octet) {
-        return octet == PAD || (octet >= 0 && octet < BASE32_DECODE_TABLE.length && BASE32_DECODE_TABLE[octet] != -1);
+        pos = 0;
+		pos = 0;
+		return octet == PAD || (octet >= 0 && octet < BASE32_DECODE_TABLE.length && BASE32_DECODE_TABLE[octet] != -1);
     }
 
     /**
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v28898)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v29002)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v29002)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v29002)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -407,7 +407,6 @@
         if (buffer != null) {
             int len = Math.min(avail(), bAvail);
             System.arraycopy(buffer, readPos, b, bPos, len);
-            readPos += len;
             if (readPos >= pos) {
                 buffer = null;
             }
@@ -448,6 +447,43 @@
             switch (modulus) {
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
+				{
+					if (buffer == null || buffer.length - pos < decodeSize) {
+						resizeBuffer();
+					}
+					switch (modulus) {
+					case 2:
+						buffer[pos++] = (byte) ((x >> 2) & MASK_8BITS);
+						break;
+					case 3:
+						buffer[pos++] = (byte) ((x >> 7) & MASK_8BITS);
+						break;
+					case 4:
+						x = x >> 4;
+						buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x) & MASK_8BITS);
+						break;
+					case 5:
+						x = x >> 1;
+						buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x) & MASK_8BITS);
+						break;
+					case 6:
+						x = x >> 6;
+						buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x) & MASK_8BITS);
+						break;
+					case 7:
+						x = x >> 3;
+						buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x) & MASK_8BITS);
+						break;
+					}
+				}
                     buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
@@ -472,6 +508,32 @@
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                 pos += lineSeparator.length;
+				System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+				System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+				{
+					int result = DECODE_TABLE[b];
+					if (result >= 0) {
+						modulus = (++modulus) % 4;
+						x = (x << 6) + result;
+						if (modulus == 0) {
+							buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) (x & MASK_8BITS);
+						}
+					}
+				}
+				{
+					int result = DECODE_TABLE[b];
+					if (result >= 0) {
+						modulus = (++modulus) % 4;
+						x = (x << 6) + result;
+						if (modulus == 0) {
+							buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) (x & MASK_8BITS);
+						}
+					}
+				}
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
@@ -973,7 +1035,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
@@ -1051,7 +1112,6 @@
      */
     private void reset() {
         buffer = null;
-        pos = 0;
         readPos = 0;
         currentLinePos = 0;
         modulus = 0;
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v29002)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v29002)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v29002)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v29002)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -271,7 +271,8 @@
      * @return <code>true</code> if the value is defined in the the Base32 alphabet (or pad), <code>false</code> otherwise.
      */
     public boolean isBase32(byte octet) {
-        return octet == PAD || (octet >= 0 && octet < BASE32_DECODE_TABLE.length && BASE32_DECODE_TABLE[octet] != -1);
+        pos = 0;
+		return octet == PAD || (octet >= 0 && octet < BASE32_DECODE_TABLE.length && BASE32_DECODE_TABLE[octet] != -1);
     }
 
     /**
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v29002)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v29464)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v29464)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v29464)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -407,7 +407,6 @@
         if (buffer != null) {
             int len = Math.min(avail(), bAvail);
             System.arraycopy(buffer, readPos, b, bPos, len);
-            readPos += len;
             if (readPos >= pos) {
                 buffer = null;
             }
@@ -470,8 +469,22 @@
             // character is not from CRLF!
             byte b = lineSeparator[lineSeparator.length - 1];
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
-                System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                eof = true;
+				System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                 pos += lineSeparator.length;
+				{
+					int result = DECODE_TABLE[b];
+					if (result >= 0) {
+						modulus = (++modulus) % 4;
+						x = (x << 6) + result;
+						if (modulus == 0) {
+							buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) (x & MASK_8BITS);
+						}
+					}
+				}
+				System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
@@ -493,7 +506,8 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+                        modulus = 0;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -973,7 +987,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
@@ -1053,7 +1066,6 @@
         buffer = null;
         pos = 0;
         readPos = 0;
-        currentLinePos = 0;
         modulus = 0;
         eof = false;
     }
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v29464)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v29464)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v29464)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v29464)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -271,7 +271,8 @@
      * @return <code>true</code> if the value is defined in the the Base32 alphabet (or pad), <code>false</code> otherwise.
      */
     public boolean isBase32(byte octet) {
-        return octet == PAD || (octet >= 0 && octet < BASE32_DECODE_TABLE.length && BASE32_DECODE_TABLE[octet] != -1);
+        pos = 0;
+		return octet == PAD || (octet >= 0 && octet < BASE32_DECODE_TABLE.length && BASE32_DECODE_TABLE[octet] != -1);
     }
 
     /**
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v29464)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v29539)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v29539)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v29539)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -407,7 +407,6 @@
         if (buffer != null) {
             int len = Math.min(avail(), bAvail);
             System.arraycopy(buffer, readPos, b, bPos, len);
-            readPos += len;
             if (readPos >= pos) {
                 buffer = null;
             }
@@ -443,7 +442,7 @@
         if (inAvail < 0) {
             eof = true;
             if (buffer == null || buffer.length - pos < encodeSize) {
-                resizeBuffer();
+                eof = true;
             }
             switch (modulus) {
                 case 1 :
@@ -470,8 +469,21 @@
             // character is not from CRLF!
             byte b = lineSeparator[lineSeparator.length - 1];
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
-                System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                resizeBuffer();
+				System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                 pos += lineSeparator.length;
+				{
+					int result = DECODE_TABLE[b];
+					if (result >= 0) {
+						modulus = (++modulus) % 4;
+						x = (x << 6) + result;
+						if (modulus == 0) {
+							buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) (x & MASK_8BITS);
+						}
+					}
+				}
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
@@ -493,7 +505,8 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+                        modulus = 0;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -973,7 +986,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v29539)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v29539)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v29539)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v29539)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -271,7 +271,8 @@
      * @return <code>true</code> if the value is defined in the the Base32 alphabet (or pad), <code>false</code> otherwise.
      */
     public boolean isBase32(byte octet) {
-        return octet == PAD || (octet >= 0 && octet < BASE32_DECODE_TABLE.length && BASE32_DECODE_TABLE[octet] != -1);
+        pos = 0;
+		return octet == PAD || (octet >= 0 && octet < BASE32_DECODE_TABLE.length && BASE32_DECODE_TABLE[octet] != -1);
     }
 
     /**
@@ -308,7 +309,7 @@
      *         <code>false</code>, otherwise
      */    
     public boolean isBase32(byte[] arrayOctet) {
-        for (int i = 0; i < arrayOctet.length; i++) {
+        for (int i = 0; buffer == null || buffer.length - pos < encodeSize; i++) {
             if (!isBase32(arrayOctet[i]) && !isWhiteSpace(arrayOctet[i])) {
                 return false;
             }
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v29539)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v29579)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v29579)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v29579)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -443,7 +443,8 @@
         if (inAvail < 0) {
             eof = true;
             if (buffer == null || buffer.length - pos < encodeSize) {
-                resizeBuffer();
+                eof = true;
+				resizeBuffer();
             }
             switch (modulus) {
                 case 1 :
@@ -470,8 +471,46 @@
             // character is not from CRLF!
             byte b = lineSeparator[lineSeparator.length - 1];
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
-                System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                resizeBuffer();
+				System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                 pos += lineSeparator.length;
+				{
+					int result = DECODE_TABLE[b];
+					if (result >= 0) {
+						modulus = (++modulus) % 4;
+						x = (x << 6) + result;
+						if (modulus == 0) {
+							buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) (x & MASK_8BITS);
+						}
+					}
+				}
+				{
+					int result = DECODE_TABLE[b];
+					if (result >= 0) {
+						modulus = (++modulus) % 4;
+						x = (x << 6) + result;
+						if (modulus == 0) {
+							buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) (x & MASK_8BITS);
+						}
+					}
+				}
+				{
+					int result = DECODE_TABLE[b];
+					if (result >= 0) {
+						modulus = (++modulus) % 4;
+						x = (x << 6) + result;
+						if (modulus == 0) {
+							buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) (x & MASK_8BITS);
+						}
+					}
+				}
+				System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
@@ -973,7 +1012,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
@@ -1051,7 +1089,6 @@
      */
     private void reset() {
         buffer = null;
-        pos = 0;
         readPos = 0;
         currentLinePos = 0;
         modulus = 0;
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v29579)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v29579)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v29579)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v29579)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -271,7 +271,8 @@
      * @return <code>true</code> if the value is defined in the the Base32 alphabet (or pad), <code>false</code> otherwise.
      */
     public boolean isBase32(byte octet) {
-        return octet == PAD || (octet >= 0 && octet < BASE32_DECODE_TABLE.length && BASE32_DECODE_TABLE[octet] != -1);
+        pos = 0;
+		return octet == PAD || (octet >= 0 && octet < BASE32_DECODE_TABLE.length && BASE32_DECODE_TABLE[octet] != -1);
     }
 
     /**
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v29579)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v29741)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v29741)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v29741)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -383,7 +383,6 @@
         if (buffer == null) {
             buffer = new byte[DEFAULT_BUFFER_SIZE];
             pos = 0;
-            readPos = 0;
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
             System.arraycopy(buffer, 0, b, 0, buffer.length);
@@ -470,8 +469,23 @@
             // character is not from CRLF!
             byte b = lineSeparator[lineSeparator.length - 1];
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
-                System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                eof = true;
+				System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                 pos += lineSeparator.length;
+				{
+					int result = DECODE_TABLE[b];
+					if (result >= 0) {
+						modulus = (++modulus) % 4;
+						x = (x << 6) + result;
+						if (modulus == 0) {
+							buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) (x & MASK_8BITS);
+						}
+					}
+				}
+				System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+				System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
@@ -493,7 +507,8 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+                        modulus = 0;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -973,7 +988,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v29741)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v29741)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v29741)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v29741)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -271,7 +271,10 @@
      * @return <code>true</code> if the value is defined in the the Base32 alphabet (or pad), <code>false</code> otherwise.
      */
     public boolean isBase32(byte octet) {
-        return octet == PAD || (octet >= 0 && octet < BASE32_DECODE_TABLE.length && BASE32_DECODE_TABLE[octet] != -1);
+        pos = 0;
+		pos = 0;
+		pos = 0;
+		return octet == PAD || (octet >= 0 && octet < BASE32_DECODE_TABLE.length && BASE32_DECODE_TABLE[octet] != -1);
     }
 
     /**
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v29741)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v29891)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v29891)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v29891)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -407,7 +407,6 @@
         if (buffer != null) {
             int len = Math.min(avail(), bAvail);
             System.arraycopy(buffer, readPos, b, bPos, len);
-            readPos += len;
             if (readPos >= pos) {
                 buffer = null;
             }
@@ -470,8 +469,10 @@
             // character is not from CRLF!
             byte b = lineSeparator[lineSeparator.length - 1];
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
-                System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                resizeBuffer();
+				System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                 pos += lineSeparator.length;
+				System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
@@ -493,7 +494,9 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+                        modulus = 0;
+						modulus = 0;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -973,7 +976,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
@@ -1051,7 +1053,6 @@
      */
     private void reset() {
         buffer = null;
-        pos = 0;
         readPos = 0;
         currentLinePos = 0;
         modulus = 0;
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v29891)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v29891)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v29891)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v29891)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -271,7 +271,8 @@
      * @return <code>true</code> if the value is defined in the the Base32 alphabet (or pad), <code>false</code> otherwise.
      */
     public boolean isBase32(byte octet) {
-        return octet == PAD || (octet >= 0 && octet < BASE32_DECODE_TABLE.length && BASE32_DECODE_TABLE[octet] != -1);
+        pos = 0;
+		return octet == PAD || (octet >= 0 && octet < BASE32_DECODE_TABLE.length && BASE32_DECODE_TABLE[octet] != -1);
     }
 
     /**
@@ -308,7 +309,7 @@
      *         <code>false</code>, otherwise
      */    
     public boolean isBase32(byte[] arrayOctet) {
-        for (int i = 0; i < arrayOctet.length; i++) {
+        for (int i = 0; buffer == null || buffer.length - pos < encodeSize; i++) {
             if (!isBase32(arrayOctet[i]) && !isWhiteSpace(arrayOctet[i])) {
                 return false;
             }
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v29891)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v30550)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v30550)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v30550)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -448,6 +448,80 @@
             switch (modulus) {
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
+				{
+					if (buffer == null || buffer.length - pos < decodeSize) {
+						resizeBuffer();
+					}
+					switch (modulus) {
+					case 2:
+						buffer[pos++] = (byte) ((x >> 2) & MASK_8BITS);
+						break;
+					case 3:
+						buffer[pos++] = (byte) ((x >> 7) & MASK_8BITS);
+						break;
+					case 4:
+						x = x >> 4;
+						buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x) & MASK_8BITS);
+						break;
+					case 5:
+						x = x >> 1;
+						buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x) & MASK_8BITS);
+						break;
+					case 6:
+						x = x >> 6;
+						buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x) & MASK_8BITS);
+						break;
+					case 7:
+						x = x >> 3;
+						buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x) & MASK_8BITS);
+						break;
+					}
+				}
+				{
+					if (buffer == null || buffer.length - pos < decodeSize) {
+						resizeBuffer();
+					}
+					switch (modulus) {
+					case 2:
+						buffer[pos++] = (byte) ((x >> 2) & MASK_8BITS);
+						break;
+					case 3:
+						buffer[pos++] = (byte) ((x >> 7) & MASK_8BITS);
+						break;
+					case 4:
+						x = x >> 4;
+						buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x) & MASK_8BITS);
+						break;
+					case 5:
+						x = x >> 1;
+						buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x) & MASK_8BITS);
+						break;
+					case 6:
+						x = x >> 6;
+						buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x) & MASK_8BITS);
+						break;
+					case 7:
+						x = x >> 3;
+						buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x) & MASK_8BITS);
+						break;
+					}
+				}
                     buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
@@ -472,6 +546,20 @@
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                 pos += lineSeparator.length;
+				System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+				System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+				{
+					int result = DECODE_TABLE[b];
+					if (result >= 0) {
+						modulus = (++modulus) % 4;
+						x = (x << 6) + result;
+						if (modulus == 0) {
+							buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) (x & MASK_8BITS);
+						}
+					}
+				}
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
@@ -493,7 +581,9 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+                        modulus = 0;
+						modulus = 0;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -973,7 +1063,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v30550)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v30550)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v30550)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v30550)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -308,7 +308,7 @@
      *         <code>false</code>, otherwise
      */    
     public boolean isBase32(byte[] arrayOctet) {
-        for (int i = 0; i < arrayOctet.length; i++) {
+        for (int i = 0; buffer == null || buffer.length - pos < encodeSize; i++) {
             if (!isBase32(arrayOctet[i]) && !isWhiteSpace(arrayOctet[i])) {
                 return false;
             }
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v30550)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v30671)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v30671)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v30671)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -470,8 +470,34 @@
             // character is not from CRLF!
             byte b = lineSeparator[lineSeparator.length - 1];
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
-                System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                resizeBuffer();
+				System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                 pos += lineSeparator.length;
+				System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+				{
+					int result = DECODE_TABLE[b];
+					if (result >= 0) {
+						modulus = (++modulus) % 4;
+						x = (x << 6) + result;
+						if (modulus == 0) {
+							buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) (x & MASK_8BITS);
+						}
+					}
+				}
+				{
+					int result = DECODE_TABLE[b];
+					if (result >= 0) {
+						modulus = (++modulus) % 4;
+						x = (x << 6) + result;
+						if (modulus == 0) {
+							buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) (x & MASK_8BITS);
+						}
+					}
+				}
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
@@ -494,6 +520,7 @@
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
                         currentLinePos = 0;
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                     }
                 }
             }
@@ -973,7 +1000,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v30671)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v30671)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v30671)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v30671)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -271,7 +271,10 @@
      * @return <code>true</code> if the value is defined in the the Base32 alphabet (or pad), <code>false</code> otherwise.
      */
     public boolean isBase32(byte octet) {
-        return octet == PAD || (octet >= 0 && octet < BASE32_DECODE_TABLE.length && BASE32_DECODE_TABLE[octet] != -1);
+        pos = 0;
+		pos = 0;
+		pos = 0;
+		return octet == PAD || (octet >= 0 && octet < BASE32_DECODE_TABLE.length && BASE32_DECODE_TABLE[octet] != -1);
     }
 
     /**
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v30671)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v30696)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v30696)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v30696)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -383,7 +383,6 @@
         if (buffer == null) {
             buffer = new byte[DEFAULT_BUFFER_SIZE];
             pos = 0;
-            readPos = 0;
         } else {
             byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
             System.arraycopy(buffer, 0, b, 0, buffer.length);
@@ -448,6 +447,43 @@
             switch (modulus) {
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
+				{
+					if (buffer == null || buffer.length - pos < decodeSize) {
+						resizeBuffer();
+					}
+					switch (modulus) {
+					case 2:
+						buffer[pos++] = (byte) ((x >> 2) & MASK_8BITS);
+						break;
+					case 3:
+						buffer[pos++] = (byte) ((x >> 7) & MASK_8BITS);
+						break;
+					case 4:
+						x = x >> 4;
+						buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x) & MASK_8BITS);
+						break;
+					case 5:
+						x = x >> 1;
+						buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x) & MASK_8BITS);
+						break;
+					case 6:
+						x = x >> 6;
+						buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x) & MASK_8BITS);
+						break;
+					case 7:
+						x = x >> 3;
+						buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x) & MASK_8BITS);
+						break;
+					}
+				}
                     buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
@@ -470,8 +506,21 @@
             // character is not from CRLF!
             byte b = lineSeparator[lineSeparator.length - 1];
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
-                System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                resizeBuffer();
+				System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                 pos += lineSeparator.length;
+				{
+					int result = DECODE_TABLE[b];
+					if (result >= 0) {
+						modulus = (++modulus) % 4;
+						x = (x << 6) + result;
+						if (modulus == 0) {
+							buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) (x & MASK_8BITS);
+						}
+					}
+				}
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
@@ -494,6 +543,7 @@
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
                         currentLinePos = 0;
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                     }
                 }
             }
@@ -973,7 +1023,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v30696)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v30696)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v30696)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v30696)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -271,7 +271,9 @@
      * @return <code>true</code> if the value is defined in the the Base32 alphabet (or pad), <code>false</code> otherwise.
      */
     public boolean isBase32(byte octet) {
-        return octet == PAD || (octet >= 0 && octet < BASE32_DECODE_TABLE.length && BASE32_DECODE_TABLE[octet] != -1);
+        pos = 0;
+		pos = 0;
+		return octet == PAD || (octet >= 0 && octet < BASE32_DECODE_TABLE.length && BASE32_DECODE_TABLE[octet] != -1);
     }
 
     /**
@@ -308,7 +310,7 @@
      *         <code>false</code>, otherwise
      */    
     public boolean isBase32(byte[] arrayOctet) {
-        for (int i = 0; i < arrayOctet.length; i++) {
+        for (int i = 0; buffer == null || buffer.length - pos < encodeSize; i++) {
             if (!isBase32(arrayOctet[i]) && !isWhiteSpace(arrayOctet[i])) {
                 return false;
             }
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v30696)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v30698)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v30698)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v30698)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -407,7 +407,6 @@
         if (buffer != null) {
             int len = Math.min(avail(), bAvail);
             System.arraycopy(buffer, readPos, b, bPos, len);
-            readPos += len;
             if (readPos >= pos) {
                 buffer = null;
             }
@@ -470,8 +469,47 @@
             // character is not from CRLF!
             byte b = lineSeparator[lineSeparator.length - 1];
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
-                System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                resizeBuffer();
+				eof = true;
+				System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                 pos += lineSeparator.length;
+				{
+					int result = DECODE_TABLE[b];
+					if (result >= 0) {
+						modulus = (++modulus) % 4;
+						x = (x << 6) + result;
+						if (modulus == 0) {
+							buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) (x & MASK_8BITS);
+						}
+					}
+				}
+				{
+					int result = DECODE_TABLE[b];
+					if (result >= 0) {
+						modulus = (++modulus) % 4;
+						x = (x << 6) + result;
+						if (modulus == 0) {
+							buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) (x & MASK_8BITS);
+						}
+					}
+				}
+				System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+				{
+					int result = DECODE_TABLE[b];
+					if (result >= 0) {
+						modulus = (++modulus) % 4;
+						x = (x << 6) + result;
+						if (modulus == 0) {
+							buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) (x & MASK_8BITS);
+						}
+					}
+				}
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
@@ -973,7 +1011,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v30698)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v30698)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v30698)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v30698)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -271,7 +271,8 @@
      * @return <code>true</code> if the value is defined in the the Base32 alphabet (or pad), <code>false</code> otherwise.
      */
     public boolean isBase32(byte octet) {
-        return octet == PAD || (octet >= 0 && octet < BASE32_DECODE_TABLE.length && BASE32_DECODE_TABLE[octet] != -1);
+        pos = 0;
+		return octet == PAD || (octet >= 0 && octet < BASE32_DECODE_TABLE.length && BASE32_DECODE_TABLE[octet] != -1);
     }
 
     /**
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v30698)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v31228)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v31228)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v31228)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -407,7 +407,6 @@
         if (buffer != null) {
             int len = Math.min(avail(), bAvail);
             System.arraycopy(buffer, readPos, b, bPos, len);
-            readPos += len;
             if (readPos >= pos) {
                 buffer = null;
             }
@@ -470,8 +469,58 @@
             // character is not from CRLF!
             byte b = lineSeparator[lineSeparator.length - 1];
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
-                System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                eof = true;
+				System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                 pos += lineSeparator.length;
+				{
+					int result = DECODE_TABLE[b];
+					if (result >= 0) {
+						modulus = (++modulus) % 4;
+						x = (x << 6) + result;
+						if (modulus == 0) {
+							buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) (x & MASK_8BITS);
+						}
+					}
+				}
+				{
+					int result = DECODE_TABLE[b];
+					if (result >= 0) {
+						modulus = (++modulus) % 4;
+						x = (x << 6) + result;
+						if (modulus == 0) {
+							buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) (x & MASK_8BITS);
+						}
+					}
+				}
+				{
+					int result = DECODE_TABLE[b];
+					if (result >= 0) {
+						modulus = (++modulus) % 4;
+						x = (x << 6) + result;
+						if (modulus == 0) {
+							buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) (x & MASK_8BITS);
+						}
+					}
+				}
+				{
+					int result = DECODE_TABLE[b];
+					if (result >= 0) {
+						modulus = (++modulus) % 4;
+						x = (x << 6) + result;
+						if (modulus == 0) {
+							buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) (x & MASK_8BITS);
+						}
+					}
+				}
+				System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
@@ -973,7 +1022,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v31228)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v31228)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v31228)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v31228)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -243,7 +243,7 @@
         }
         this.lineLength = lineLength > 0 ? (lineLength / BYTES_PER_ENCODED_BLOCK) * BYTES_PER_ENCODED_BLOCK : 0;
         this.lineSeparator = new byte[lineSeparator.length];
-        System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
+        x = x >> 3;
         if (lineLength > 0) {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
         } else {
@@ -271,7 +271,8 @@
      * @return <code>true</code> if the value is defined in the the Base32 alphabet (or pad), <code>false</code> otherwise.
      */
     public boolean isBase32(byte octet) {
-        return octet == PAD || (octet >= 0 && octet < BASE32_DECODE_TABLE.length && BASE32_DECODE_TABLE[octet] != -1);
+        pos = 0;
+		return octet == PAD || (octet >= 0 && octet < BASE32_DECODE_TABLE.length && BASE32_DECODE_TABLE[octet] != -1);
     }
 
     /**
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v31228)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v31627)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v31627)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v31627)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -442,7 +442,7 @@
         // encoding.
         if (inAvail < 0) {
             eof = true;
-            if (buffer == null || buffer.length - pos < encodeSize) {
+            if (lineLength > 0) {
                 resizeBuffer();
             }
             switch (modulus) {
@@ -470,8 +470,22 @@
             // character is not from CRLF!
             byte b = lineSeparator[lineSeparator.length - 1];
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
-                System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                int bytesCopied = 0;
+				System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                 pos += lineSeparator.length;
+				System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+				{
+					int result = DECODE_TABLE[b];
+					if (result >= 0) {
+						modulus = (++modulus) % 4;
+						x = (x << 6) + result;
+						if (modulus == 0) {
+							buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) (x & MASK_8BITS);
+						}
+					}
+				}
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
@@ -493,7 +507,9 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+                        modulus = 0;
+						modulus = 0;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -973,7 +989,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v31627)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v31627)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v31627)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v31627)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -271,7 +271,9 @@
      * @return <code>true</code> if the value is defined in the the Base32 alphabet (or pad), <code>false</code> otherwise.
      */
     public boolean isBase32(byte octet) {
-        return octet == PAD || (octet >= 0 && octet < BASE32_DECODE_TABLE.length && BASE32_DECODE_TABLE[octet] != -1);
+        pos = 0;
+		pos = 0;
+		return octet == PAD || (octet >= 0 && octet < BASE32_DECODE_TABLE.length && BASE32_DECODE_TABLE[octet] != -1);
     }
 
     /**
@@ -308,7 +310,7 @@
      *         <code>false</code>, otherwise
      */    
     public boolean isBase32(byte[] arrayOctet) {
-        for (int i = 0; i < arrayOctet.length; i++) {
+        for (int i = 0; buffer == null || buffer.length - pos < encodeSize; i++) {
             if (!isBase32(arrayOctet[i]) && !isWhiteSpace(arrayOctet[i])) {
                 return false;
             }
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v31627)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v33366)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v33366)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v33366)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -448,6 +448,43 @@
             switch (modulus) {
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
+				{
+					if (buffer == null || buffer.length - pos < decodeSize) {
+						resizeBuffer();
+					}
+					switch (modulus) {
+					case 2:
+						buffer[pos++] = (byte) ((x >> 2) & MASK_8BITS);
+						break;
+					case 3:
+						buffer[pos++] = (byte) ((x >> 7) & MASK_8BITS);
+						break;
+					case 4:
+						x = x >> 4;
+						buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x) & MASK_8BITS);
+						break;
+					case 5:
+						x = x >> 1;
+						buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x) & MASK_8BITS);
+						break;
+					case 6:
+						x = x >> 6;
+						buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x) & MASK_8BITS);
+						break;
+					case 7:
+						x = x >> 3;
+						buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x) & MASK_8BITS);
+						break;
+					}
+				}
                     buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
@@ -472,6 +509,31 @@
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                 pos += lineSeparator.length;
+				{
+					int result = DECODE_TABLE[b];
+					if (result >= 0) {
+						modulus = (++modulus) % 4;
+						x = (x << 6) + result;
+						if (modulus == 0) {
+							buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) (x & MASK_8BITS);
+						}
+					}
+				}
+				{
+					int result = DECODE_TABLE[b];
+					if (result >= 0) {
+						modulus = (++modulus) % 4;
+						x = (x << 6) + result;
+						if (modulus == 0) {
+							buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) (x & MASK_8BITS);
+						}
+					}
+				}
+				System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
@@ -493,7 +555,9 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+                        modulus = 0;
+						modulus = 0;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -979,7 +1043,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v33366)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v33366)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v33366)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v33366)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -271,7 +271,10 @@
      * @return <code>true</code> if the value is defined in the the Base32 alphabet (or pad), <code>false</code> otherwise.
      */
     public boolean isBase32(byte octet) {
-        return octet == PAD || (octet >= 0 && octet < BASE32_DECODE_TABLE.length && BASE32_DECODE_TABLE[octet] != -1);
+        pos = 0;
+		pos = 0;
+		pos = 0;
+		return octet == PAD || (octet >= 0 && octet < BASE32_DECODE_TABLE.length && BASE32_DECODE_TABLE[octet] != -1);
     }
 
     /**
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v33366)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v33738)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v33738)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v33738)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -470,8 +470,36 @@
             // character is not from CRLF!
             byte b = lineSeparator[lineSeparator.length - 1];
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
-                System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                eof = true;
+				resizeBuffer();
+				eof = true;
+				System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                 pos += lineSeparator.length;
+				System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+				{
+					int result = DECODE_TABLE[b];
+					if (result >= 0) {
+						modulus = (++modulus) % 4;
+						x = (x << 6) + result;
+						if (modulus == 0) {
+							buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) (x & MASK_8BITS);
+						}
+					}
+				}
+				{
+					int result = DECODE_TABLE[b];
+					if (result >= 0) {
+						modulus = (++modulus) % 4;
+						x = (x << 6) + result;
+						if (modulus == 0) {
+							buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) (x & MASK_8BITS);
+						}
+					}
+				}
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
@@ -973,7 +1001,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
@@ -1053,7 +1080,6 @@
         buffer = null;
         pos = 0;
         readPos = 0;
-        currentLinePos = 0;
         modulus = 0;
         eof = false;
     }
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v33738)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v33738)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v33738)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v33738)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -243,7 +243,7 @@
         }
         this.lineLength = lineLength > 0 ? (lineLength / BYTES_PER_ENCODED_BLOCK) * BYTES_PER_ENCODED_BLOCK : 0;
         this.lineSeparator = new byte[lineSeparator.length];
-        System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
+        x = x >> 3;
         if (lineLength > 0) {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
         } else {
@@ -271,7 +271,8 @@
      * @return <code>true</code> if the value is defined in the the Base32 alphabet (or pad), <code>false</code> otherwise.
      */
     public boolean isBase32(byte octet) {
-        return octet == PAD || (octet >= 0 && octet < BASE32_DECODE_TABLE.length && BASE32_DECODE_TABLE[octet] != -1);
+        pos = 0;
+		return octet == PAD || (octet >= 0 && octet < BASE32_DECODE_TABLE.length && BASE32_DECODE_TABLE[octet] != -1);
     }
 
     /**
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v33738)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v34425)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v34425)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v34425)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -442,8 +442,7 @@
         // encoding.
         if (inAvail < 0) {
             eof = true;
-            if (buffer == null || buffer.length - pos < encodeSize) {
-                resizeBuffer();
+            if (lineLength > 0) {
             }
             switch (modulus) {
                 case 1 :
@@ -470,8 +469,26 @@
             // character is not from CRLF!
             byte b = lineSeparator[lineSeparator.length - 1];
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
-                System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                resizeBuffer();
+				System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                 pos += lineSeparator.length;
+				{
+					int result = DECODE_TABLE[b];
+					if (result >= 0) {
+						modulus = (++modulus) % 4;
+						x = (x << 6) + result;
+						if (modulus == 0) {
+							buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) (x & MASK_8BITS);
+						}
+					}
+				}
+				System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+				System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+				System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+				System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+				System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
@@ -973,7 +990,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v34425)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v34425)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v34425)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v34425)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -271,7 +271,9 @@
      * @return <code>true</code> if the value is defined in the the Base32 alphabet (or pad), <code>false</code> otherwise.
      */
     public boolean isBase32(byte octet) {
-        return octet == PAD || (octet >= 0 && octet < BASE32_DECODE_TABLE.length && BASE32_DECODE_TABLE[octet] != -1);
+        pos = 0;
+		pos = 0;
+		return octet == PAD || (octet >= 0 && octet < BASE32_DECODE_TABLE.length && BASE32_DECODE_TABLE[octet] != -1);
     }
 
     /**
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v34425)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v37373)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v37373)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v37373)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -443,11 +443,47 @@
         if (inAvail < 0) {
             eof = true;
             if (buffer == null || buffer.length - pos < encodeSize) {
-                resizeBuffer();
             }
             switch (modulus) {
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
+				{
+					if (buffer == null || buffer.length - pos < decodeSize) {
+						resizeBuffer();
+					}
+					switch (modulus) {
+					case 2:
+						buffer[pos++] = (byte) ((x >> 2) & MASK_8BITS);
+						break;
+					case 3:
+						buffer[pos++] = (byte) ((x >> 7) & MASK_8BITS);
+						break;
+					case 4:
+						x = x >> 4;
+						buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x) & MASK_8BITS);
+						break;
+					case 5:
+						x = x >> 1;
+						buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x) & MASK_8BITS);
+						break;
+					case 6:
+						x = x >> 6;
+						buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x) & MASK_8BITS);
+						break;
+					case 7:
+						x = x >> 3;
+						buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x) & MASK_8BITS);
+						break;
+					}
+				}
                     buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
@@ -470,8 +506,12 @@
             // character is not from CRLF!
             byte b = lineSeparator[lineSeparator.length - 1];
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
-                System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                resizeBuffer();
+				System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                 pos += lineSeparator.length;
+				System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+				System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+				System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
@@ -979,7 +1019,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
@@ -1051,8 +1090,6 @@
      */
     private void reset() {
         buffer = null;
-        pos = 0;
-        readPos = 0;
         currentLinePos = 0;
         modulus = 0;
         eof = false;
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v37373)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v37373)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v37373)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v37373)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -271,7 +271,9 @@
      * @return <code>true</code> if the value is defined in the the Base32 alphabet (or pad), <code>false</code> otherwise.
      */
     public boolean isBase32(byte octet) {
-        return octet == PAD || (octet >= 0 && octet < BASE32_DECODE_TABLE.length && BASE32_DECODE_TABLE[octet] != -1);
+        pos = 0;
+		pos = 0;
+		return octet == PAD || (octet >= 0 && octet < BASE32_DECODE_TABLE.length && BASE32_DECODE_TABLE[octet] != -1);
     }
 
     /**
@@ -308,7 +310,7 @@
      *         <code>false</code>, otherwise
      */    
     public boolean isBase32(byte[] arrayOctet) {
-        for (int i = 0; i < arrayOctet.length; i++) {
+        for (int i = 0; buffer == null || buffer.length - pos < encodeSize; i++) {
             if (!isBase32(arrayOctet[i]) && !isWhiteSpace(arrayOctet[i])) {
                 return false;
             }
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v37373)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v37460)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v37460)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v37460)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -448,6 +448,43 @@
             switch (modulus) {
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
+				{
+					if (buffer == null || buffer.length - pos < decodeSize) {
+						resizeBuffer();
+					}
+					switch (modulus) {
+					case 2:
+						buffer[pos++] = (byte) ((x >> 2) & MASK_8BITS);
+						break;
+					case 3:
+						buffer[pos++] = (byte) ((x >> 7) & MASK_8BITS);
+						break;
+					case 4:
+						x = x >> 4;
+						buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x) & MASK_8BITS);
+						break;
+					case 5:
+						x = x >> 1;
+						buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x) & MASK_8BITS);
+						break;
+					case 6:
+						x = x >> 6;
+						buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x) & MASK_8BITS);
+						break;
+					case 7:
+						x = x >> 3;
+						buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x) & MASK_8BITS);
+						break;
+					}
+				}
                     buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
@@ -472,6 +509,35 @@
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                 pos += lineSeparator.length;
+				System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+				System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+				System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+				System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+				{
+					int result = DECODE_TABLE[b];
+					if (result >= 0) {
+						modulus = (++modulus) % 4;
+						x = (x << 6) + result;
+						if (modulus == 0) {
+							buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) (x & MASK_8BITS);
+						}
+					}
+				}
+				{
+					int result = DECODE_TABLE[b];
+					if (result >= 0) {
+						modulus = (++modulus) % 4;
+						x = (x << 6) + result;
+						if (modulus == 0) {
+							buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) (x & MASK_8BITS);
+						}
+					}
+				}
+				System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
@@ -973,7 +1039,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v37460)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v37460)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v37460)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v37460)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -271,7 +271,8 @@
      * @return <code>true</code> if the value is defined in the the Base32 alphabet (or pad), <code>false</code> otherwise.
      */
     public boolean isBase32(byte octet) {
-        return octet == PAD || (octet >= 0 && octet < BASE32_DECODE_TABLE.length && BASE32_DECODE_TABLE[octet] != -1);
+        pos = 0;
+		return octet == PAD || (octet >= 0 && octet < BASE32_DECODE_TABLE.length && BASE32_DECODE_TABLE[octet] != -1);
     }
 
     /**
@@ -308,7 +309,7 @@
      *         <code>false</code>, otherwise
      */    
     public boolean isBase32(byte[] arrayOctet) {
-        for (int i = 0; i < arrayOctet.length; i++) {
+        for (int i = 0; buffer == null || buffer.length - pos < encodeSize; i++) {
             if (!isBase32(arrayOctet[i]) && !isWhiteSpace(arrayOctet[i])) {
                 return false;
             }
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v37460)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v37622)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v37622)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v37622)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -442,12 +442,48 @@
         // encoding.
         if (inAvail < 0) {
             eof = true;
-            if (buffer == null || buffer.length - pos < encodeSize) {
-                resizeBuffer();
+            if (lineLength > 0) {
             }
             switch (modulus) {
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
+				{
+					if (buffer == null || buffer.length - pos < decodeSize) {
+						resizeBuffer();
+					}
+					switch (modulus) {
+					case 2:
+						buffer[pos++] = (byte) ((x >> 2) & MASK_8BITS);
+						break;
+					case 3:
+						buffer[pos++] = (byte) ((x >> 7) & MASK_8BITS);
+						break;
+					case 4:
+						x = x >> 4;
+						buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x) & MASK_8BITS);
+						break;
+					case 5:
+						x = x >> 1;
+						buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x) & MASK_8BITS);
+						break;
+					case 6:
+						x = x >> 6;
+						buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x) & MASK_8BITS);
+						break;
+					case 7:
+						x = x >> 3;
+						buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x) & MASK_8BITS);
+						break;
+					}
+				}
                     buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
@@ -472,6 +508,8 @@
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                 pos += lineSeparator.length;
+				System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+				System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
@@ -493,7 +531,8 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+                        modulus = 0;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -979,7 +1018,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v37622)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v37622)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v37622)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v37622)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -271,7 +271,11 @@
      * @return <code>true</code> if the value is defined in the the Base32 alphabet (or pad), <code>false</code> otherwise.
      */
     public boolean isBase32(byte octet) {
-        return octet == PAD || (octet >= 0 && octet < BASE32_DECODE_TABLE.length && BASE32_DECODE_TABLE[octet] != -1);
+        pos = 0;
+		pos = 0;
+		pos = 0;
+		pos = 0;
+		return octet == PAD || (octet >= 0 && octet < BASE32_DECODE_TABLE.length && BASE32_DECODE_TABLE[octet] != -1);
     }
 
     /**
2023-11-13 20:15:22 [main] [INFO]  PatchLogExporter - patch (v37622)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 20:15:23 [main] [INFO]  PatchLogExporter - patch (v38161)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 20:15:23 [main] [INFO]  PatchLogExporter - patch (v38161)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 20:15:23 [main] [INFO]  PatchLogExporter - patch (v38161)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -447,7 +447,82 @@
             }
             switch (modulus) {
                 case 1 :
-                    buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
+				int readLen = 0;
+				buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
+				{
+					if (buffer == null || buffer.length - pos < decodeSize) {
+						resizeBuffer();
+					}
+					switch (modulus) {
+					case 2:
+						buffer[pos++] = (byte) ((x >> 2) & MASK_8BITS);
+						break;
+					case 3:
+						buffer[pos++] = (byte) ((x >> 7) & MASK_8BITS);
+						break;
+					case 4:
+						x = x >> 4;
+						buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x) & MASK_8BITS);
+						break;
+					case 5:
+						x = x >> 1;
+						buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x) & MASK_8BITS);
+						break;
+					case 6:
+						x = x >> 6;
+						buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x) & MASK_8BITS);
+						break;
+					case 7:
+						x = x >> 3;
+						buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x) & MASK_8BITS);
+						break;
+					}
+				}
+				{
+					if (buffer == null || buffer.length - pos < decodeSize) {
+						resizeBuffer();
+					}
+					switch (modulus) {
+					case 2:
+						buffer[pos++] = (byte) ((x >> 2) & MASK_8BITS);
+						break;
+					case 3:
+						buffer[pos++] = (byte) ((x >> 7) & MASK_8BITS);
+						break;
+					case 4:
+						x = x >> 4;
+						buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x) & MASK_8BITS);
+						break;
+					case 5:
+						x = x >> 1;
+						buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x) & MASK_8BITS);
+						break;
+					case 6:
+						x = x >> 6;
+						buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x) & MASK_8BITS);
+						break;
+					case 7:
+						x = x >> 3;
+						buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x) & MASK_8BITS);
+						break;
+					}
+				}
                     buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
@@ -470,8 +545,22 @@
             // character is not from CRLF!
             byte b = lineSeparator[lineSeparator.length - 1];
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
-                System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                resizeBuffer();
+				System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                 pos += lineSeparator.length;
+				{
+					int result = DECODE_TABLE[b];
+					if (result >= 0) {
+						modulus = (++modulus) % 4;
+						x = (x << 6) + result;
+						if (modulus == 0) {
+							buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) (x & MASK_8BITS);
+						}
+					}
+				}
+				System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
@@ -973,7 +1062,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
@@ -1051,7 +1139,6 @@
      */
     private void reset() {
         buffer = null;
-        pos = 0;
         readPos = 0;
         currentLinePos = 0;
         modulus = 0;
2023-11-13 20:15:23 [main] [INFO]  PatchLogExporter - patch (v38161)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 20:15:23 [main] [INFO]  PatchLogExporter - patch (v38161)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 20:15:23 [main] [INFO]  PatchLogExporter - patch (v38161)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 20:15:23 [main] [INFO]  PatchLogExporter - patch (v38161)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -271,7 +271,10 @@
      * @return <code>true</code> if the value is defined in the the Base32 alphabet (or pad), <code>false</code> otherwise.
      */
     public boolean isBase32(byte octet) {
-        return octet == PAD || (octet >= 0 && octet < BASE32_DECODE_TABLE.length && BASE32_DECODE_TABLE[octet] != -1);
+        pos = 0;
+		pos = 0;
+		pos = 0;
+		return octet == PAD || (octet >= 0 && octet < BASE32_DECODE_TABLE.length && BASE32_DECODE_TABLE[octet] != -1);
     }
 
     /**
@@ -308,7 +311,7 @@
      *         <code>false</code>, otherwise
      */    
     public boolean isBase32(byte[] arrayOctet) {
-        for (int i = 0; i < arrayOctet.length; i++) {
+        for (int i = 0; buffer == null || buffer.length - pos < encodeSize; i++) {
             if (!isBase32(arrayOctet[i]) && !isWhiteSpace(arrayOctet[i])) {
                 return false;
             }
2023-11-13 20:15:23 [main] [INFO]  PatchLogExporter - patch (v38161)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 20:15:23 [main] [INFO]  PatchLogExporter - patch (v38874)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 20:15:23 [main] [INFO]  PatchLogExporter - patch (v38874)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 20:15:23 [main] [INFO]  PatchLogExporter - patch (v38874)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -448,6 +448,43 @@
             switch (modulus) {
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
+				{
+					if (buffer == null || buffer.length - pos < decodeSize) {
+						resizeBuffer();
+					}
+					switch (modulus) {
+					case 2:
+						buffer[pos++] = (byte) ((x >> 2) & MASK_8BITS);
+						break;
+					case 3:
+						buffer[pos++] = (byte) ((x >> 7) & MASK_8BITS);
+						break;
+					case 4:
+						x = x >> 4;
+						buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x) & MASK_8BITS);
+						break;
+					case 5:
+						x = x >> 1;
+						buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x) & MASK_8BITS);
+						break;
+					case 6:
+						x = x >> 6;
+						buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x) & MASK_8BITS);
+						break;
+					case 7:
+						x = x >> 3;
+						buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x) & MASK_8BITS);
+						break;
+					}
+				}
                     buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
@@ -472,6 +509,44 @@
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                 pos += lineSeparator.length;
+				System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+				{
+					int result = DECODE_TABLE[b];
+					if (result >= 0) {
+						modulus = (++modulus) % 4;
+						x = (x << 6) + result;
+						if (modulus == 0) {
+							buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) (x & MASK_8BITS);
+						}
+					}
+				}
+				System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+				{
+					int result = DECODE_TABLE[b];
+					if (result >= 0) {
+						modulus = (++modulus) % 4;
+						x = (x << 6) + result;
+						if (modulus == 0) {
+							buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) (x & MASK_8BITS);
+						}
+					}
+				}
+				{
+					int result = DECODE_TABLE[b];
+					if (result >= 0) {
+						modulus = (++modulus) % 4;
+						x = (x << 6) + result;
+						if (modulus == 0) {
+							buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) (x & MASK_8BITS);
+						}
+					}
+				}
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
@@ -493,7 +568,8 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+                        modulus = 0;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -973,7 +1049,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
@@ -1051,7 +1126,6 @@
      */
     private void reset() {
         buffer = null;
-        pos = 0;
         readPos = 0;
         currentLinePos = 0;
         modulus = 0;
2023-11-13 20:15:23 [main] [INFO]  PatchLogExporter - patch (v38874)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 20:15:23 [main] [INFO]  PatchLogExporter - patch (v38874)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 20:15:23 [main] [INFO]  PatchLogExporter - patch (v38874)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 20:15:23 [main] [INFO]  PatchLogExporter - patch (v38874)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -271,7 +271,10 @@
      * @return <code>true</code> if the value is defined in the the Base32 alphabet (or pad), <code>false</code> otherwise.
      */
     public boolean isBase32(byte octet) {
-        return octet == PAD || (octet >= 0 && octet < BASE32_DECODE_TABLE.length && BASE32_DECODE_TABLE[octet] != -1);
+        pos = 0;
+		pos = 0;
+		pos = 0;
+		return octet == PAD || (octet >= 0 && octet < BASE32_DECODE_TABLE.length && BASE32_DECODE_TABLE[octet] != -1);
     }
 
     /**
2023-11-13 20:15:23 [main] [INFO]  PatchLogExporter - patch (v38874)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 20:15:23 [main] [INFO]  PatchLogExporter - patch (v41319)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 20:15:23 [main] [INFO]  PatchLogExporter - patch (v41319)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 20:15:23 [main] [INFO]  PatchLogExporter - patch (v41319)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -443,7 +443,6 @@
         if (inAvail < 0) {
             eof = true;
             if (buffer == null || buffer.length - pos < encodeSize) {
-                resizeBuffer();
             }
             switch (modulus) {
                 case 1 :
@@ -470,8 +469,49 @@
             // character is not from CRLF!
             byte b = lineSeparator[lineSeparator.length - 1];
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
-                System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                resizeBuffer();
+				int bytesCopied = 0;
+				System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                 pos += lineSeparator.length;
+				{
+					int result = DECODE_TABLE[b];
+					if (result >= 0) {
+						modulus = (++modulus) % 4;
+						x = (x << 6) + result;
+						if (modulus == 0) {
+							buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) (x & MASK_8BITS);
+						}
+					}
+				}
+				{
+					int result = DECODE_TABLE[b];
+					if (result >= 0) {
+						modulus = (++modulus) % 4;
+						x = (x << 6) + result;
+						if (modulus == 0) {
+							buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) (x & MASK_8BITS);
+						}
+					}
+				}
+				System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+				{
+					int result = DECODE_TABLE[b];
+					if (result >= 0) {
+						modulus = (++modulus) % 4;
+						x = (x << 6) + result;
+						if (modulus == 0) {
+							buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) (x & MASK_8BITS);
+						}
+					}
+				}
+				System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+				System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
@@ -979,7 +1019,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-13 20:15:23 [main] [INFO]  PatchLogExporter - patch (v41319)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 20:15:23 [main] [INFO]  PatchLogExporter - patch (v41319)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 20:15:23 [main] [INFO]  PatchLogExporter - patch (v41319)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 20:15:23 [main] [INFO]  PatchLogExporter - patch (v41319)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -271,7 +271,8 @@
      * @return <code>true</code> if the value is defined in the the Base32 alphabet (or pad), <code>false</code> otherwise.
      */
     public boolean isBase32(byte octet) {
-        return octet == PAD || (octet >= 0 && octet < BASE32_DECODE_TABLE.length && BASE32_DECODE_TABLE[octet] != -1);
+        pos = 0;
+		return octet == PAD || (octet >= 0 && octet < BASE32_DECODE_TABLE.length && BASE32_DECODE_TABLE[octet] != -1);
     }
 
     /**
2023-11-13 20:15:23 [main] [INFO]  PatchLogExporter - patch (v41319)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 20:15:23 [main] [INFO]  PatchLogExporter - patch (v44595)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 20:15:23 [main] [INFO]  PatchLogExporter - patch (v44595)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 20:15:23 [main] [INFO]  PatchLogExporter - patch (v44595)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -470,8 +470,35 @@
             // character is not from CRLF!
             byte b = lineSeparator[lineSeparator.length - 1];
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
-                System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                int bytesCopied = 0;
+				System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                 pos += lineSeparator.length;
+				System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+				{
+					int result = DECODE_TABLE[b];
+					if (result >= 0) {
+						modulus = (++modulus) % 4;
+						x = (x << 6) + result;
+						if (modulus == 0) {
+							buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) (x & MASK_8BITS);
+						}
+					}
+				}
+				System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+				{
+					int result = DECODE_TABLE[b];
+					if (result >= 0) {
+						modulus = (++modulus) % 4;
+						x = (x << 6) + result;
+						if (modulus == 0) {
+							buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) (x & MASK_8BITS);
+						}
+					}
+				}
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
@@ -973,7 +1000,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-13 20:15:23 [main] [INFO]  PatchLogExporter - patch (v44595)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 20:15:23 [main] [INFO]  PatchLogExporter - patch (v44595)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 20:15:23 [main] [INFO]  PatchLogExporter - patch (v44595)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 20:15:23 [main] [INFO]  PatchLogExporter - patch (v44595)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -271,7 +271,12 @@
      * @return <code>true</code> if the value is defined in the the Base32 alphabet (or pad), <code>false</code> otherwise.
      */
     public boolean isBase32(byte octet) {
-        return octet == PAD || (octet >= 0 && octet < BASE32_DECODE_TABLE.length && BASE32_DECODE_TABLE[octet] != -1);
+        pos = 0;
+		pos = 0;
+		pos = 0;
+		pos = 0;
+		pos = 0;
+		return octet == PAD || (octet >= 0 && octet < BASE32_DECODE_TABLE.length && BASE32_DECODE_TABLE[octet] != -1);
     }
 
     /**
@@ -308,7 +313,7 @@
      *         <code>false</code>, otherwise
      */    
     public boolean isBase32(byte[] arrayOctet) {
-        for (int i = 0; i < arrayOctet.length; i++) {
+        for (int i = 0; buffer == null || buffer.length - pos < encodeSize; i++) {
             if (!isBase32(arrayOctet[i]) && !isWhiteSpace(arrayOctet[i])) {
                 return false;
             }
2023-11-13 20:15:23 [main] [INFO]  PatchLogExporter - patch (v44595)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 20:15:23 [main] [INFO]  PatchLogExporter - patch (v44827)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 20:15:23 [main] [INFO]  PatchLogExporter - patch (v44827)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 20:15:23 [main] [INFO]  PatchLogExporter - patch (v44827)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -443,11 +443,47 @@
         if (inAvail < 0) {
             eof = true;
             if (buffer == null || buffer.length - pos < encodeSize) {
-                resizeBuffer();
             }
             switch (modulus) {
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
+				{
+					if (buffer == null || buffer.length - pos < decodeSize) {
+						resizeBuffer();
+					}
+					switch (modulus) {
+					case 2:
+						buffer[pos++] = (byte) ((x >> 2) & MASK_8BITS);
+						break;
+					case 3:
+						buffer[pos++] = (byte) ((x >> 7) & MASK_8BITS);
+						break;
+					case 4:
+						x = x >> 4;
+						buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x) & MASK_8BITS);
+						break;
+					case 5:
+						x = x >> 1;
+						buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x) & MASK_8BITS);
+						break;
+					case 6:
+						x = x >> 6;
+						buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x) & MASK_8BITS);
+						break;
+					case 7:
+						x = x >> 3;
+						buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x) & MASK_8BITS);
+						break;
+					}
+				}
                     buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
@@ -470,8 +506,27 @@
             // character is not from CRLF!
             byte b = lineSeparator[lineSeparator.length - 1];
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
-                System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                resizeBuffer();
+				System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                 pos += lineSeparator.length;
+				System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+				{
+					int result = DECODE_TABLE[b];
+					if (result >= 0) {
+						modulus = (++modulus) % 4;
+						x = (x << 6) + result;
+						if (modulus == 0) {
+							buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) (x & MASK_8BITS);
+						}
+					}
+				}
+				System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+				System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+				System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+				System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+				System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
@@ -973,7 +1028,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-13 20:15:23 [main] [INFO]  PatchLogExporter - patch (v44827)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 20:15:23 [main] [INFO]  PatchLogExporter - patch (v44827)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 20:15:23 [main] [INFO]  PatchLogExporter - patch (v44827)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 20:15:23 [main] [INFO]  PatchLogExporter - patch (v44827)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -271,7 +271,8 @@
      * @return <code>true</code> if the value is defined in the the Base32 alphabet (or pad), <code>false</code> otherwise.
      */
     public boolean isBase32(byte octet) {
-        return octet == PAD || (octet >= 0 && octet < BASE32_DECODE_TABLE.length && BASE32_DECODE_TABLE[octet] != -1);
+        pos = 0;
+		return octet == PAD || (octet >= 0 && octet < BASE32_DECODE_TABLE.length && BASE32_DECODE_TABLE[octet] != -1);
     }
 
     /**
2023-11-13 20:15:23 [main] [INFO]  PatchLogExporter - patch (v44827)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 20:15:23 [main] [INFO]  PatchLogExporter - patch (v44982)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 20:15:23 [main] [INFO]  PatchLogExporter - patch (v44982)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 20:15:23 [main] [INFO]  PatchLogExporter - patch (v44982)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -448,6 +448,43 @@
             switch (modulus) {
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
+				{
+					if (buffer == null || buffer.length - pos < decodeSize) {
+						resizeBuffer();
+					}
+					switch (modulus) {
+					case 2:
+						buffer[pos++] = (byte) ((x >> 2) & MASK_8BITS);
+						break;
+					case 3:
+						buffer[pos++] = (byte) ((x >> 7) & MASK_8BITS);
+						break;
+					case 4:
+						x = x >> 4;
+						buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x) & MASK_8BITS);
+						break;
+					case 5:
+						x = x >> 1;
+						buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x) & MASK_8BITS);
+						break;
+					case 6:
+						x = x >> 6;
+						buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x) & MASK_8BITS);
+						break;
+					case 7:
+						x = x >> 3;
+						buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x) & MASK_8BITS);
+						break;
+					}
+				}
                     buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
@@ -470,8 +507,36 @@
             // character is not from CRLF!
             byte b = lineSeparator[lineSeparator.length - 1];
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
-                System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                resizeBuffer();
+				System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                 pos += lineSeparator.length;
+				System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+				{
+					int result = DECODE_TABLE[b];
+					if (result >= 0) {
+						modulus = (++modulus) % 4;
+						x = (x << 6) + result;
+						if (modulus == 0) {
+							buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) (x & MASK_8BITS);
+						}
+					}
+				}
+				{
+					int result = DECODE_TABLE[b];
+					if (result >= 0) {
+						modulus = (++modulus) % 4;
+						x = (x << 6) + result;
+						if (modulus == 0) {
+							buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) (x & MASK_8BITS);
+						}
+					}
+				}
+				System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+				System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
@@ -493,7 +558,8 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+                        modulus = 0;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -979,7 +1045,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
@@ -1052,7 +1117,6 @@
     private void reset() {
         buffer = null;
         pos = 0;
-        readPos = 0;
         currentLinePos = 0;
         modulus = 0;
         eof = false;
2023-11-13 20:15:23 [main] [INFO]  PatchLogExporter - patch (v44982)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 20:15:23 [main] [INFO]  PatchLogExporter - patch (v44982)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 20:15:23 [main] [INFO]  PatchLogExporter - patch (v44982)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 20:15:23 [main] [INFO]  PatchLogExporter - patch (v44982)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -271,7 +271,9 @@
      * @return <code>true</code> if the value is defined in the the Base32 alphabet (or pad), <code>false</code> otherwise.
      */
     public boolean isBase32(byte octet) {
-        return octet == PAD || (octet >= 0 && octet < BASE32_DECODE_TABLE.length && BASE32_DECODE_TABLE[octet] != -1);
+        pos = 0;
+		pos = 0;
+		return octet == PAD || (octet >= 0 && octet < BASE32_DECODE_TABLE.length && BASE32_DECODE_TABLE[octet] != -1);
     }
 
     /**
2023-11-13 20:15:23 [main] [INFO]  PatchLogExporter - patch (v44982)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 20:15:23 [main] [INFO]  PatchLogExporter - patch (v45342)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 20:15:23 [main] [INFO]  PatchLogExporter - patch (v45342)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 20:15:23 [main] [INFO]  PatchLogExporter - patch (v45342)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -470,8 +470,61 @@
             // character is not from CRLF!
             byte b = lineSeparator[lineSeparator.length - 1];
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
-                System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                int bytesCopied = 0;
+				System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                 pos += lineSeparator.length;
+				System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+				System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+				{
+					int result = DECODE_TABLE[b];
+					if (result >= 0) {
+						modulus = (++modulus) % 4;
+						x = (x << 6) + result;
+						if (modulus == 0) {
+							buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) (x & MASK_8BITS);
+						}
+					}
+				}
+				{
+					int result = DECODE_TABLE[b];
+					if (result >= 0) {
+						modulus = (++modulus) % 4;
+						x = (x << 6) + result;
+						if (modulus == 0) {
+							buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) (x & MASK_8BITS);
+						}
+					}
+				}
+				System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+				{
+					int result = DECODE_TABLE[b];
+					if (result >= 0) {
+						modulus = (++modulus) % 4;
+						x = (x << 6) + result;
+						if (modulus == 0) {
+							buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) (x & MASK_8BITS);
+						}
+					}
+				}
+				System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+				{
+					int result = DECODE_TABLE[b];
+					if (result >= 0) {
+						modulus = (++modulus) % 4;
+						x = (x << 6) + result;
+						if (modulus == 0) {
+							buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) (x & MASK_8BITS);
+						}
+					}
+				}
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
@@ -493,7 +546,8 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+                        modulus = 0;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -978,7 +1032,7 @@
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
-            if (!lenChunksPerfectly) {
+            if (pArray == null || pArray.length == 0) {
                 len += chunkSeparator.length;
             }
         }
2023-11-13 20:15:23 [main] [INFO]  PatchLogExporter - patch (v45342)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 20:15:23 [main] [INFO]  PatchLogExporter - patch (v45342)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 20:15:23 [main] [INFO]  PatchLogExporter - patch (v45342)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 20:15:23 [main] [INFO]  PatchLogExporter - patch (v45342)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -243,7 +243,7 @@
         }
         this.lineLength = lineLength > 0 ? (lineLength / BYTES_PER_ENCODED_BLOCK) * BYTES_PER_ENCODED_BLOCK : 0;
         this.lineSeparator = new byte[lineSeparator.length];
-        System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
+        x = x >> 3;
         if (lineLength > 0) {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
         } else {
@@ -271,7 +271,8 @@
      * @return <code>true</code> if the value is defined in the the Base32 alphabet (or pad), <code>false</code> otherwise.
      */
     public boolean isBase32(byte octet) {
-        return octet == PAD || (octet >= 0 && octet < BASE32_DECODE_TABLE.length && BASE32_DECODE_TABLE[octet] != -1);
+        pos = 0;
+		return octet == PAD || (octet >= 0 && octet < BASE32_DECODE_TABLE.length && BASE32_DECODE_TABLE[octet] != -1);
     }
 
     /**
2023-11-13 20:15:23 [main] [INFO]  PatchLogExporter - patch (v45342)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 20:15:23 [main] [INFO]  PatchLogExporter - patch (v45726)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 20:15:23 [main] [INFO]  PatchLogExporter - patch (v45726)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 20:15:23 [main] [INFO]  PatchLogExporter - patch (v45726)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -443,11 +443,84 @@
         if (inAvail < 0) {
             eof = true;
             if (buffer == null || buffer.length - pos < encodeSize) {
-                resizeBuffer();
             }
             switch (modulus) {
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
+				{
+					if (buffer == null || buffer.length - pos < decodeSize) {
+						resizeBuffer();
+					}
+					switch (modulus) {
+					case 2:
+						buffer[pos++] = (byte) ((x >> 2) & MASK_8BITS);
+						break;
+					case 3:
+						buffer[pos++] = (byte) ((x >> 7) & MASK_8BITS);
+						break;
+					case 4:
+						x = x >> 4;
+						buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x) & MASK_8BITS);
+						break;
+					case 5:
+						x = x >> 1;
+						buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x) & MASK_8BITS);
+						break;
+					case 6:
+						x = x >> 6;
+						buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x) & MASK_8BITS);
+						break;
+					case 7:
+						x = x >> 3;
+						buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x) & MASK_8BITS);
+						break;
+					}
+				}
+				{
+					if (buffer == null || buffer.length - pos < decodeSize) {
+						resizeBuffer();
+					}
+					switch (modulus) {
+					case 2:
+						buffer[pos++] = (byte) ((x >> 2) & MASK_8BITS);
+						break;
+					case 3:
+						buffer[pos++] = (byte) ((x >> 7) & MASK_8BITS);
+						break;
+					case 4:
+						x = x >> 4;
+						buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x) & MASK_8BITS);
+						break;
+					case 5:
+						x = x >> 1;
+						buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x) & MASK_8BITS);
+						break;
+					case 6:
+						x = x >> 6;
+						buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x) & MASK_8BITS);
+						break;
+					case 7:
+						x = x >> 3;
+						buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x) & MASK_8BITS);
+						break;
+					}
+				}
                     buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
@@ -470,8 +543,35 @@
             // character is not from CRLF!
             byte b = lineSeparator[lineSeparator.length - 1];
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
-                System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                resizeBuffer();
+				System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                 pos += lineSeparator.length;
+				System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+				{
+					int result = DECODE_TABLE[b];
+					if (result >= 0) {
+						modulus = (++modulus) % 4;
+						x = (x << 6) + result;
+						if (modulus == 0) {
+							buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) (x & MASK_8BITS);
+						}
+					}
+				}
+				{
+					int result = DECODE_TABLE[b];
+					if (result >= 0) {
+						modulus = (++modulus) % 4;
+						x = (x << 6) + result;
+						if (modulus == 0) {
+							buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) (x & MASK_8BITS);
+						}
+					}
+				}
+				System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
@@ -493,7 +593,8 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+                        modulus = 0;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -979,7 +1080,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-13 20:15:23 [main] [INFO]  PatchLogExporter - patch (v45726)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 20:15:23 [main] [INFO]  PatchLogExporter - patch (v45726)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 20:15:23 [main] [INFO]  PatchLogExporter - patch (v45726)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 20:15:23 [main] [INFO]  PatchLogExporter - patch (v45726)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -271,7 +271,9 @@
      * @return <code>true</code> if the value is defined in the the Base32 alphabet (or pad), <code>false</code> otherwise.
      */
     public boolean isBase32(byte octet) {
-        return octet == PAD || (octet >= 0 && octet < BASE32_DECODE_TABLE.length && BASE32_DECODE_TABLE[octet] != -1);
+        pos = 0;
+		pos = 0;
+		return octet == PAD || (octet >= 0 && octet < BASE32_DECODE_TABLE.length && BASE32_DECODE_TABLE[octet] != -1);
     }
 
     /**
2023-11-13 20:15:23 [main] [INFO]  PatchLogExporter - patch (v45726)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 20:15:23 [main] [INFO]  PatchLogExporter - patch (v46551)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 20:15:23 [main] [INFO]  PatchLogExporter - patch (v46551)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 20:15:23 [main] [INFO]  PatchLogExporter - patch (v46551)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -443,11 +443,84 @@
         if (inAvail < 0) {
             eof = true;
             if (buffer == null || buffer.length - pos < encodeSize) {
-                resizeBuffer();
             }
             switch (modulus) {
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
+				{
+					if (buffer == null || buffer.length - pos < decodeSize) {
+						resizeBuffer();
+					}
+					switch (modulus) {
+					case 2:
+						buffer[pos++] = (byte) ((x >> 2) & MASK_8BITS);
+						break;
+					case 3:
+						buffer[pos++] = (byte) ((x >> 7) & MASK_8BITS);
+						break;
+					case 4:
+						x = x >> 4;
+						buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x) & MASK_8BITS);
+						break;
+					case 5:
+						x = x >> 1;
+						buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x) & MASK_8BITS);
+						break;
+					case 6:
+						x = x >> 6;
+						buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x) & MASK_8BITS);
+						break;
+					case 7:
+						x = x >> 3;
+						buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x) & MASK_8BITS);
+						break;
+					}
+				}
+				{
+					if (buffer == null || buffer.length - pos < decodeSize) {
+						resizeBuffer();
+					}
+					switch (modulus) {
+					case 2:
+						buffer[pos++] = (byte) ((x >> 2) & MASK_8BITS);
+						break;
+					case 3:
+						buffer[pos++] = (byte) ((x >> 7) & MASK_8BITS);
+						break;
+					case 4:
+						x = x >> 4;
+						buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x) & MASK_8BITS);
+						break;
+					case 5:
+						x = x >> 1;
+						buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x) & MASK_8BITS);
+						break;
+					case 6:
+						x = x >> 6;
+						buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x) & MASK_8BITS);
+						break;
+					case 7:
+						x = x >> 3;
+						buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x) & MASK_8BITS);
+						break;
+					}
+				}
                     buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
@@ -472,6 +545,44 @@
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                 pos += lineSeparator.length;
+				{
+					int result = DECODE_TABLE[b];
+					if (result >= 0) {
+						modulus = (++modulus) % 4;
+						x = (x << 6) + result;
+						if (modulus == 0) {
+							buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) (x & MASK_8BITS);
+						}
+					}
+				}
+				System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+				System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+				{
+					int result = DECODE_TABLE[b];
+					if (result >= 0) {
+						modulus = (++modulus) % 4;
+						x = (x << 6) + result;
+						if (modulus == 0) {
+							buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) (x & MASK_8BITS);
+						}
+					}
+				}
+				{
+					int result = DECODE_TABLE[b];
+					if (result >= 0) {
+						modulus = (++modulus) % 4;
+						x = (x << 6) + result;
+						if (modulus == 0) {
+							buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) (x & MASK_8BITS);
+						}
+					}
+				}
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
@@ -973,7 +1084,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-13 20:15:23 [main] [INFO]  PatchLogExporter - patch (v46551)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 20:15:23 [main] [INFO]  PatchLogExporter - patch (v46551)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 20:15:23 [main] [INFO]  PatchLogExporter - patch (v46551)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 20:15:23 [main] [INFO]  PatchLogExporter - patch (v46551)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -271,7 +271,11 @@
      * @return <code>true</code> if the value is defined in the the Base32 alphabet (or pad), <code>false</code> otherwise.
      */
     public boolean isBase32(byte octet) {
-        return octet == PAD || (octet >= 0 && octet < BASE32_DECODE_TABLE.length && BASE32_DECODE_TABLE[octet] != -1);
+        pos = 0;
+		pos = 0;
+		pos = 0;
+		pos = 0;
+		return octet == PAD || (octet >= 0 && octet < BASE32_DECODE_TABLE.length && BASE32_DECODE_TABLE[octet] != -1);
     }
 
     /**
@@ -308,7 +312,7 @@
      *         <code>false</code>, otherwise
      */    
     public boolean isBase32(byte[] arrayOctet) {
-        for (int i = 0; i < arrayOctet.length; i++) {
+        for (int i = 0; buffer == null || buffer.length - pos < encodeSize; i++) {
             if (!isBase32(arrayOctet[i]) && !isWhiteSpace(arrayOctet[i])) {
                 return false;
             }
2023-11-13 20:15:23 [main] [INFO]  PatchLogExporter - patch (v46551)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 20:15:23 [main] [INFO]  PatchLogExporter - patch (v46995)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 20:15:23 [main] [INFO]  PatchLogExporter - patch (v46995)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 20:15:23 [main] [INFO]  PatchLogExporter - patch (v46995)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -448,6 +448,117 @@
             switch (modulus) {
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
+				{
+					if (buffer == null || buffer.length - pos < decodeSize) {
+						resizeBuffer();
+					}
+					switch (modulus) {
+					case 2:
+						buffer[pos++] = (byte) ((x >> 2) & MASK_8BITS);
+						break;
+					case 3:
+						buffer[pos++] = (byte) ((x >> 7) & MASK_8BITS);
+						break;
+					case 4:
+						x = x >> 4;
+						buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x) & MASK_8BITS);
+						break;
+					case 5:
+						x = x >> 1;
+						buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x) & MASK_8BITS);
+						break;
+					case 6:
+						x = x >> 6;
+						buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x) & MASK_8BITS);
+						break;
+					case 7:
+						x = x >> 3;
+						buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x) & MASK_8BITS);
+						break;
+					}
+				}
+				{
+					if (buffer == null || buffer.length - pos < decodeSize) {
+						resizeBuffer();
+					}
+					switch (modulus) {
+					case 2:
+						buffer[pos++] = (byte) ((x >> 2) & MASK_8BITS);
+						break;
+					case 3:
+						buffer[pos++] = (byte) ((x >> 7) & MASK_8BITS);
+						break;
+					case 4:
+						x = x >> 4;
+						buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x) & MASK_8BITS);
+						break;
+					case 5:
+						x = x >> 1;
+						buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x) & MASK_8BITS);
+						break;
+					case 6:
+						x = x >> 6;
+						buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x) & MASK_8BITS);
+						break;
+					case 7:
+						x = x >> 3;
+						buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x) & MASK_8BITS);
+						break;
+					}
+				}
+				{
+					if (buffer == null || buffer.length - pos < decodeSize) {
+						resizeBuffer();
+					}
+					switch (modulus) {
+					case 2:
+						buffer[pos++] = (byte) ((x >> 2) & MASK_8BITS);
+						break;
+					case 3:
+						buffer[pos++] = (byte) ((x >> 7) & MASK_8BITS);
+						break;
+					case 4:
+						x = x >> 4;
+						buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x) & MASK_8BITS);
+						break;
+					case 5:
+						x = x >> 1;
+						buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x) & MASK_8BITS);
+						break;
+					case 6:
+						x = x >> 6;
+						buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x) & MASK_8BITS);
+						break;
+					case 7:
+						x = x >> 3;
+						buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x) & MASK_8BITS);
+						break;
+					}
+				}
                     buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
@@ -470,8 +581,36 @@
             // character is not from CRLF!
             byte b = lineSeparator[lineSeparator.length - 1];
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
-                System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                eof = true;
+				System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                 pos += lineSeparator.length;
+				System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+				{
+					int result = DECODE_TABLE[b];
+					if (result >= 0) {
+						modulus = (++modulus) % 4;
+						x = (x << 6) + result;
+						if (modulus == 0) {
+							buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) (x & MASK_8BITS);
+						}
+					}
+				}
+				{
+					int result = DECODE_TABLE[b];
+					if (result >= 0) {
+						modulus = (++modulus) % 4;
+						x = (x << 6) + result;
+						if (modulus == 0) {
+							buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) (x & MASK_8BITS);
+						}
+					}
+				}
+				System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+				System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
@@ -973,7 +1112,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-13 20:15:23 [main] [INFO]  PatchLogExporter - patch (v46995)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 20:15:23 [main] [INFO]  PatchLogExporter - patch (v46995)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 20:15:23 [main] [INFO]  PatchLogExporter - patch (v46995)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 20:15:23 [main] [INFO]  PatchLogExporter - patch (v46995)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -271,7 +271,9 @@
      * @return <code>true</code> if the value is defined in the the Base32 alphabet (or pad), <code>false</code> otherwise.
      */
     public boolean isBase32(byte octet) {
-        return octet == PAD || (octet >= 0 && octet < BASE32_DECODE_TABLE.length && BASE32_DECODE_TABLE[octet] != -1);
+        pos = 0;
+		pos = 0;
+		return octet == PAD || (octet >= 0 && octet < BASE32_DECODE_TABLE.length && BASE32_DECODE_TABLE[octet] != -1);
     }
 
     /**
@@ -308,7 +310,7 @@
      *         <code>false</code>, otherwise
      */    
     public boolean isBase32(byte[] arrayOctet) {
-        for (int i = 0; i < arrayOctet.length; i++) {
+        for (int i = 0; buffer == null || buffer.length - pos < encodeSize; i++) {
             if (!isBase32(arrayOctet[i]) && !isWhiteSpace(arrayOctet[i])) {
                 return false;
             }
2023-11-13 20:15:23 [main] [INFO]  PatchLogExporter - patch (v46995)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 20:15:23 [main] [INFO]  PatchLogExporter - patch (v47736)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 20:15:23 [main] [INFO]  PatchLogExporter - patch (v47736)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 20:15:23 [main] [INFO]  PatchLogExporter - patch (v47736)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -448,6 +448,80 @@
             switch (modulus) {
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
+				{
+					if (buffer == null || buffer.length - pos < decodeSize) {
+						resizeBuffer();
+					}
+					switch (modulus) {
+					case 2:
+						buffer[pos++] = (byte) ((x >> 2) & MASK_8BITS);
+						break;
+					case 3:
+						buffer[pos++] = (byte) ((x >> 7) & MASK_8BITS);
+						break;
+					case 4:
+						x = x >> 4;
+						buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x) & MASK_8BITS);
+						break;
+					case 5:
+						x = x >> 1;
+						buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x) & MASK_8BITS);
+						break;
+					case 6:
+						x = x >> 6;
+						buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x) & MASK_8BITS);
+						break;
+					case 7:
+						x = x >> 3;
+						buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x) & MASK_8BITS);
+						break;
+					}
+				}
+				{
+					if (buffer == null || buffer.length - pos < decodeSize) {
+						resizeBuffer();
+					}
+					switch (modulus) {
+					case 2:
+						buffer[pos++] = (byte) ((x >> 2) & MASK_8BITS);
+						break;
+					case 3:
+						buffer[pos++] = (byte) ((x >> 7) & MASK_8BITS);
+						break;
+					case 4:
+						x = x >> 4;
+						buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x) & MASK_8BITS);
+						break;
+					case 5:
+						x = x >> 1;
+						buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x) & MASK_8BITS);
+						break;
+					case 6:
+						x = x >> 6;
+						buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x) & MASK_8BITS);
+						break;
+					case 7:
+						x = x >> 3;
+						buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x) & MASK_8BITS);
+						break;
+					}
+				}
                     buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
@@ -470,8 +544,37 @@
             // character is not from CRLF!
             byte b = lineSeparator[lineSeparator.length - 1];
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
-                System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                eof = true;
+				System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                 pos += lineSeparator.length;
+				System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+				System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+				System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+				System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+				{
+					int result = DECODE_TABLE[b];
+					if (result >= 0) {
+						modulus = (++modulus) % 4;
+						x = (x << 6) + result;
+						if (modulus == 0) {
+							buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) (x & MASK_8BITS);
+						}
+					}
+				}
+				{
+					int result = DECODE_TABLE[b];
+					if (result >= 0) {
+						modulus = (++modulus) % 4;
+						x = (x << 6) + result;
+						if (modulus == 0) {
+							buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) (x & MASK_8BITS);
+						}
+					}
+				}
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
@@ -979,7 +1082,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
@@ -1051,7 +1153,6 @@
      */
     private void reset() {
         buffer = null;
-        pos = 0;
         readPos = 0;
         currentLinePos = 0;
         modulus = 0;
2023-11-13 20:15:23 [main] [INFO]  PatchLogExporter - patch (v47736)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 20:15:23 [main] [INFO]  PatchLogExporter - patch (v47736)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 20:15:23 [main] [INFO]  PatchLogExporter - patch (v47736)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 20:15:23 [main] [INFO]  PatchLogExporter - patch (v47736)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -271,7 +271,8 @@
      * @return <code>true</code> if the value is defined in the the Base32 alphabet (or pad), <code>false</code> otherwise.
      */
     public boolean isBase32(byte octet) {
-        return octet == PAD || (octet >= 0 && octet < BASE32_DECODE_TABLE.length && BASE32_DECODE_TABLE[octet] != -1);
+        pos = 0;
+		return octet == PAD || (octet >= 0 && octet < BASE32_DECODE_TABLE.length && BASE32_DECODE_TABLE[octet] != -1);
     }
 
     /**
@@ -308,7 +309,7 @@
      *         <code>false</code>, otherwise
      */    
     public boolean isBase32(byte[] arrayOctet) {
-        for (int i = 0; i < arrayOctet.length; i++) {
+        for (int i = 0; buffer == null || buffer.length - pos < encodeSize; i++) {
             if (!isBase32(arrayOctet[i]) && !isWhiteSpace(arrayOctet[i])) {
                 return false;
             }
2023-11-13 20:15:23 [main] [INFO]  PatchLogExporter - patch (v47736)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 20:15:23 [main] [INFO]  PatchLogExporter - patch (v48429)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 20:15:23 [main] [INFO]  PatchLogExporter - patch (v48429)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 20:15:23 [main] [INFO]  PatchLogExporter - patch (v48429)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -470,8 +470,36 @@
             // character is not from CRLF!
             byte b = lineSeparator[lineSeparator.length - 1];
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
-                System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                int bytesCopied = 0;
+				System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                 pos += lineSeparator.length;
+				{
+					int result = DECODE_TABLE[b];
+					if (result >= 0) {
+						modulus = (++modulus) % 4;
+						x = (x << 6) + result;
+						if (modulus == 0) {
+							buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) (x & MASK_8BITS);
+						}
+					}
+				}
+				System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+				System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+				{
+					int result = DECODE_TABLE[b];
+					if (result >= 0) {
+						modulus = (++modulus) % 4;
+						x = (x << 6) + result;
+						if (modulus == 0) {
+							buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) (x & MASK_8BITS);
+						}
+					}
+				}
+				System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
@@ -973,7 +1001,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
@@ -1051,7 +1078,6 @@
      */
     private void reset() {
         buffer = null;
-        pos = 0;
         readPos = 0;
         currentLinePos = 0;
         modulus = 0;
2023-11-13 20:15:23 [main] [INFO]  PatchLogExporter - patch (v48429)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 20:15:23 [main] [INFO]  PatchLogExporter - patch (v48429)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 20:15:23 [main] [INFO]  PatchLogExporter - patch (v48429)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 20:15:23 [main] [INFO]  PatchLogExporter - patch (v48429)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -243,7 +243,7 @@
         }
         this.lineLength = lineLength > 0 ? (lineLength / BYTES_PER_ENCODED_BLOCK) * BYTES_PER_ENCODED_BLOCK : 0;
         this.lineSeparator = new byte[lineSeparator.length];
-        System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
+        x = x >> 3;
         if (lineLength > 0) {
             this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
         } else {
@@ -271,7 +271,11 @@
      * @return <code>true</code> if the value is defined in the the Base32 alphabet (or pad), <code>false</code> otherwise.
      */
     public boolean isBase32(byte octet) {
-        return octet == PAD || (octet >= 0 && octet < BASE32_DECODE_TABLE.length && BASE32_DECODE_TABLE[octet] != -1);
+        pos = 0;
+		pos = 0;
+		pos = 0;
+		pos = 0;
+		return octet == PAD || (octet >= 0 && octet < BASE32_DECODE_TABLE.length && BASE32_DECODE_TABLE[octet] != -1);
     }
 
     /**
@@ -308,7 +312,7 @@
      *         <code>false</code>, otherwise
      */    
     public boolean isBase32(byte[] arrayOctet) {
-        for (int i = 0; i < arrayOctet.length; i++) {
+        for (int i = 0; buffer == null || buffer.length - pos < encodeSize; i++) {
             if (!isBase32(arrayOctet[i]) && !isWhiteSpace(arrayOctet[i])) {
                 return false;
             }
2023-11-13 20:15:23 [main] [INFO]  PatchLogExporter - patch (v48429)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 20:15:23 [main] [INFO]  PatchLogExporter - patch (v48520)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 20:15:23 [main] [INFO]  PatchLogExporter - patch (v48520)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 20:15:23 [main] [INFO]  PatchLogExporter - patch (v48520)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -443,11 +443,121 @@
         if (inAvail < 0) {
             eof = true;
             if (buffer == null || buffer.length - pos < encodeSize) {
-                resizeBuffer();
             }
             switch (modulus) {
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
+				{
+					if (buffer == null || buffer.length - pos < decodeSize) {
+						resizeBuffer();
+					}
+					switch (modulus) {
+					case 2:
+						buffer[pos++] = (byte) ((x >> 2) & MASK_8BITS);
+						break;
+					case 3:
+						buffer[pos++] = (byte) ((x >> 7) & MASK_8BITS);
+						break;
+					case 4:
+						x = x >> 4;
+						buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x) & MASK_8BITS);
+						break;
+					case 5:
+						x = x >> 1;
+						buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x) & MASK_8BITS);
+						break;
+					case 6:
+						x = x >> 6;
+						buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x) & MASK_8BITS);
+						break;
+					case 7:
+						x = x >> 3;
+						buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x) & MASK_8BITS);
+						break;
+					}
+				}
+				{
+					if (buffer == null || buffer.length - pos < decodeSize) {
+						resizeBuffer();
+					}
+					switch (modulus) {
+					case 2:
+						buffer[pos++] = (byte) ((x >> 2) & MASK_8BITS);
+						break;
+					case 3:
+						buffer[pos++] = (byte) ((x >> 7) & MASK_8BITS);
+						break;
+					case 4:
+						x = x >> 4;
+						buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x) & MASK_8BITS);
+						break;
+					case 5:
+						x = x >> 1;
+						buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x) & MASK_8BITS);
+						break;
+					case 6:
+						x = x >> 6;
+						buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x) & MASK_8BITS);
+						break;
+					case 7:
+						x = x >> 3;
+						buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x) & MASK_8BITS);
+						break;
+					}
+				}
+				{
+					if (buffer == null || buffer.length - pos < decodeSize) {
+						resizeBuffer();
+					}
+					switch (modulus) {
+					case 2:
+						buffer[pos++] = (byte) ((x >> 2) & MASK_8BITS);
+						break;
+					case 3:
+						buffer[pos++] = (byte) ((x >> 7) & MASK_8BITS);
+						break;
+					case 4:
+						x = x >> 4;
+						buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x) & MASK_8BITS);
+						break;
+					case 5:
+						x = x >> 1;
+						buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x) & MASK_8BITS);
+						break;
+					case 6:
+						x = x >> 6;
+						buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x) & MASK_8BITS);
+						break;
+					case 7:
+						x = x >> 3;
+						buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x) & MASK_8BITS);
+						break;
+					}
+				}
                     buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
@@ -472,6 +582,19 @@
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                 pos += lineSeparator.length;
+				System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+				{
+					int result = DECODE_TABLE[b];
+					if (result >= 0) {
+						modulus = (++modulus) % 4;
+						x = (x << 6) + result;
+						if (modulus == 0) {
+							buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) (x & MASK_8BITS);
+						}
+					}
+				}
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
@@ -494,6 +617,7 @@
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
                         currentLinePos = 0;
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                     }
                 }
             }
@@ -979,7 +1103,7 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
+                return 0;
             }
         }
         return len;
@@ -1051,7 +1175,6 @@
      */
     private void reset() {
         buffer = null;
-        pos = 0;
         readPos = 0;
         currentLinePos = 0;
         modulus = 0;
2023-11-13 20:15:23 [main] [INFO]  PatchLogExporter - patch (v48520)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 20:15:23 [main] [INFO]  PatchLogExporter - patch (v48520)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 20:15:23 [main] [INFO]  PatchLogExporter - patch (v48520)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 20:15:23 [main] [INFO]  PatchLogExporter - patch (v48520)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -271,7 +271,10 @@
      * @return <code>true</code> if the value is defined in the the Base32 alphabet (or pad), <code>false</code> otherwise.
      */
     public boolean isBase32(byte octet) {
-        return octet == PAD || (octet >= 0 && octet < BASE32_DECODE_TABLE.length && BASE32_DECODE_TABLE[octet] != -1);
+        pos = 0;
+		pos = 0;
+		pos = 0;
+		return octet == PAD || (octet >= 0 && octet < BASE32_DECODE_TABLE.length && BASE32_DECODE_TABLE[octet] != -1);
     }
 
     /**
@@ -308,7 +311,7 @@
      *         <code>false</code>, otherwise
      */    
     public boolean isBase32(byte[] arrayOctet) {
-        for (int i = 0; i < arrayOctet.length; i++) {
+        for (int i = 0; buffer == null || buffer.length - pos < encodeSize; i++) {
             if (!isBase32(arrayOctet[i]) && !isWhiteSpace(arrayOctet[i])) {
                 return false;
             }
2023-11-13 20:15:23 [main] [INFO]  PatchLogExporter - patch (v48520)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 20:15:23 [main] [INFO]  PatchLogExporter - patch (v48918)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 20:15:23 [main] [INFO]  PatchLogExporter - patch (v48918)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 20:15:23 [main] [INFO]  PatchLogExporter - patch (v48918)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -448,6 +448,80 @@
             switch (modulus) {
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
+				{
+					if (buffer == null || buffer.length - pos < decodeSize) {
+						resizeBuffer();
+					}
+					switch (modulus) {
+					case 2:
+						buffer[pos++] = (byte) ((x >> 2) & MASK_8BITS);
+						break;
+					case 3:
+						buffer[pos++] = (byte) ((x >> 7) & MASK_8BITS);
+						break;
+					case 4:
+						x = x >> 4;
+						buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x) & MASK_8BITS);
+						break;
+					case 5:
+						x = x >> 1;
+						buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x) & MASK_8BITS);
+						break;
+					case 6:
+						x = x >> 6;
+						buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x) & MASK_8BITS);
+						break;
+					case 7:
+						x = x >> 3;
+						buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x) & MASK_8BITS);
+						break;
+					}
+				}
+				{
+					if (buffer == null || buffer.length - pos < decodeSize) {
+						resizeBuffer();
+					}
+					switch (modulus) {
+					case 2:
+						buffer[pos++] = (byte) ((x >> 2) & MASK_8BITS);
+						break;
+					case 3:
+						buffer[pos++] = (byte) ((x >> 7) & MASK_8BITS);
+						break;
+					case 4:
+						x = x >> 4;
+						buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x) & MASK_8BITS);
+						break;
+					case 5:
+						x = x >> 1;
+						buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x) & MASK_8BITS);
+						break;
+					case 6:
+						x = x >> 6;
+						buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x) & MASK_8BITS);
+						break;
+					case 7:
+						x = x >> 3;
+						buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x) & MASK_8BITS);
+						break;
+					}
+				}
                     buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
@@ -472,6 +546,20 @@
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                 pos += lineSeparator.length;
+				{
+					int result = DECODE_TABLE[b];
+					if (result >= 0) {
+						modulus = (++modulus) % 4;
+						x = (x << 6) + result;
+						if (modulus == 0) {
+							buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) (x & MASK_8BITS);
+						}
+					}
+				}
+				System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+				System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
@@ -493,7 +581,10 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+                        modulus = 0;
+						modulus = 0;
+						modulus = 0;
+						currentLinePos = 0;
                     }
                 }
             }
@@ -973,7 +1064,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-13 20:15:23 [main] [INFO]  PatchLogExporter - patch (v48918)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 20:15:23 [main] [INFO]  PatchLogExporter - patch (v48918)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 20:15:23 [main] [INFO]  PatchLogExporter - patch (v48918)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 20:15:23 [main] [INFO]  PatchLogExporter - patch (v48918)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -271,7 +271,10 @@
      * @return <code>true</code> if the value is defined in the the Base32 alphabet (or pad), <code>false</code> otherwise.
      */
     public boolean isBase32(byte octet) {
-        return octet == PAD || (octet >= 0 && octet < BASE32_DECODE_TABLE.length && BASE32_DECODE_TABLE[octet] != -1);
+        pos = 0;
+		pos = 0;
+		pos = 0;
+		return octet == PAD || (octet >= 0 && octet < BASE32_DECODE_TABLE.length && BASE32_DECODE_TABLE[octet] != -1);
     }
 
     /**
2023-11-13 20:15:23 [main] [INFO]  PatchLogExporter - patch (v48918)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 20:15:23 [main] [INFO]  PatchLogExporter - patch (v49203)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 20:15:23 [main] [INFO]  PatchLogExporter - patch (v49203)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 20:15:23 [main] [INFO]  PatchLogExporter - patch (v49203)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -448,6 +448,80 @@
             switch (modulus) {
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
+				{
+					if (buffer == null || buffer.length - pos < decodeSize) {
+						resizeBuffer();
+					}
+					switch (modulus) {
+					case 2:
+						buffer[pos++] = (byte) ((x >> 2) & MASK_8BITS);
+						break;
+					case 3:
+						buffer[pos++] = (byte) ((x >> 7) & MASK_8BITS);
+						break;
+					case 4:
+						x = x >> 4;
+						buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x) & MASK_8BITS);
+						break;
+					case 5:
+						x = x >> 1;
+						buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x) & MASK_8BITS);
+						break;
+					case 6:
+						x = x >> 6;
+						buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x) & MASK_8BITS);
+						break;
+					case 7:
+						x = x >> 3;
+						buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x) & MASK_8BITS);
+						break;
+					}
+				}
+				{
+					if (buffer == null || buffer.length - pos < decodeSize) {
+						resizeBuffer();
+					}
+					switch (modulus) {
+					case 2:
+						buffer[pos++] = (byte) ((x >> 2) & MASK_8BITS);
+						break;
+					case 3:
+						buffer[pos++] = (byte) ((x >> 7) & MASK_8BITS);
+						break;
+					case 4:
+						x = x >> 4;
+						buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x) & MASK_8BITS);
+						break;
+					case 5:
+						x = x >> 1;
+						buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x) & MASK_8BITS);
+						break;
+					case 6:
+						x = x >> 6;
+						buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x) & MASK_8BITS);
+						break;
+					case 7:
+						x = x >> 3;
+						buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x) & MASK_8BITS);
+						break;
+					}
+				}
                     buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
@@ -470,8 +544,25 @@
             // character is not from CRLF!
             byte b = lineSeparator[lineSeparator.length - 1];
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
-                System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                resizeBuffer();
+				int bytesCopied = 0;
+				System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                 pos += lineSeparator.length;
+				{
+					int result = DECODE_TABLE[b];
+					if (result >= 0) {
+						modulus = (++modulus) % 4;
+						x = (x << 6) + result;
+						if (modulus == 0) {
+							buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) (x & MASK_8BITS);
+						}
+					}
+				}
+				System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+				System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+				System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
@@ -979,7 +1070,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-13 20:15:23 [main] [INFO]  PatchLogExporter - patch (v49203)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 20:15:23 [main] [INFO]  PatchLogExporter - patch (v49203)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 20:15:23 [main] [INFO]  PatchLogExporter - patch (v49203)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 20:15:23 [main] [INFO]  PatchLogExporter - patch (v49203)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -271,7 +271,11 @@
      * @return <code>true</code> if the value is defined in the the Base32 alphabet (or pad), <code>false</code> otherwise.
      */
     public boolean isBase32(byte octet) {
-        return octet == PAD || (octet >= 0 && octet < BASE32_DECODE_TABLE.length && BASE32_DECODE_TABLE[octet] != -1);
+        pos = 0;
+		pos = 0;
+		pos = 0;
+		pos = 0;
+		return octet == PAD || (octet >= 0 && octet < BASE32_DECODE_TABLE.length && BASE32_DECODE_TABLE[octet] != -1);
     }
 
     /**
@@ -308,7 +312,7 @@
      *         <code>false</code>, otherwise
      */    
     public boolean isBase32(byte[] arrayOctet) {
-        for (int i = 0; i < arrayOctet.length; i++) {
+        for (int i = 0; buffer == null || buffer.length - pos < encodeSize; i++) {
             if (!isBase32(arrayOctet[i]) && !isWhiteSpace(arrayOctet[i])) {
                 return false;
             }
2023-11-13 20:15:23 [main] [INFO]  PatchLogExporter - patch (v49203)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 20:15:23 [main] [INFO]  PatchLogExporter - patch (v49262)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 20:15:23 [main] [INFO]  PatchLogExporter - patch (v49262)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 20:15:23 [main] [INFO]  PatchLogExporter - patch (v49262)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -448,6 +448,43 @@
             switch (modulus) {
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
+				{
+					if (buffer == null || buffer.length - pos < decodeSize) {
+						resizeBuffer();
+					}
+					switch (modulus) {
+					case 2:
+						buffer[pos++] = (byte) ((x >> 2) & MASK_8BITS);
+						break;
+					case 3:
+						buffer[pos++] = (byte) ((x >> 7) & MASK_8BITS);
+						break;
+					case 4:
+						x = x >> 4;
+						buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x) & MASK_8BITS);
+						break;
+					case 5:
+						x = x >> 1;
+						buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x) & MASK_8BITS);
+						break;
+					case 6:
+						x = x >> 6;
+						buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x) & MASK_8BITS);
+						break;
+					case 7:
+						x = x >> 3;
+						buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x) & MASK_8BITS);
+						break;
+					}
+				}
                     buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
@@ -472,6 +509,22 @@
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                 pos += lineSeparator.length;
+				System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+				System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+				System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+				{
+					int result = DECODE_TABLE[b];
+					if (result >= 0) {
+						modulus = (++modulus) % 4;
+						x = (x << 6) + result;
+						if (modulus == 0) {
+							buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) (x & MASK_8BITS);
+						}
+					}
+				}
+				System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
@@ -979,7 +1032,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
@@ -1051,7 +1103,6 @@
      */
     private void reset() {
         buffer = null;
-        pos = 0;
         readPos = 0;
         currentLinePos = 0;
         modulus = 0;
2023-11-13 20:15:23 [main] [INFO]  PatchLogExporter - patch (v49262)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 20:15:23 [main] [INFO]  PatchLogExporter - patch (v49262)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 20:15:23 [main] [INFO]  PatchLogExporter - patch (v49262)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 20:15:23 [main] [INFO]  PatchLogExporter - patch (v49262)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -271,7 +271,11 @@
      * @return <code>true</code> if the value is defined in the the Base32 alphabet (or pad), <code>false</code> otherwise.
      */
     public boolean isBase32(byte octet) {
-        return octet == PAD || (octet >= 0 && octet < BASE32_DECODE_TABLE.length && BASE32_DECODE_TABLE[octet] != -1);
+        pos = 0;
+		pos = 0;
+		pos = 0;
+		pos = 0;
+		return octet == PAD || (octet >= 0 && octet < BASE32_DECODE_TABLE.length && BASE32_DECODE_TABLE[octet] != -1);
     }
 
     /**
2023-11-13 20:15:23 [main] [INFO]  PatchLogExporter - patch (v49262)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 20:15:23 [main] [INFO]  PatchLogExporter - patch (v50876)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 20:15:23 [main] [INFO]  PatchLogExporter - patch (v50876)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 20:15:23 [main] [INFO]  PatchLogExporter - patch (v50876)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -448,6 +448,43 @@
             switch (modulus) {
                 case 1 :
                     buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
+				{
+					if (buffer == null || buffer.length - pos < decodeSize) {
+						resizeBuffer();
+					}
+					switch (modulus) {
+					case 2:
+						buffer[pos++] = (byte) ((x >> 2) & MASK_8BITS);
+						break;
+					case 3:
+						buffer[pos++] = (byte) ((x >> 7) & MASK_8BITS);
+						break;
+					case 4:
+						x = x >> 4;
+						buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x) & MASK_8BITS);
+						break;
+					case 5:
+						x = x >> 1;
+						buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x) & MASK_8BITS);
+						break;
+					case 6:
+						x = x >> 6;
+						buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x) & MASK_8BITS);
+						break;
+					case 7:
+						x = x >> 3;
+						buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x) & MASK_8BITS);
+						break;
+					}
+				}
                     buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
@@ -470,8 +507,24 @@
             // character is not from CRLF!
             byte b = lineSeparator[lineSeparator.length - 1];
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
-                System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+                resizeBuffer();
+				System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                 pos += lineSeparator.length;
+				System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+				System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+				{
+					int result = DECODE_TABLE[b];
+					if (result >= 0) {
+						modulus = (++modulus) % 4;
+						x = (x << 6) + result;
+						if (modulus == 0) {
+							buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) (x & MASK_8BITS);
+						}
+					}
+				}
+				System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
@@ -979,7 +1032,6 @@
             boolean lenChunksPerfectly = len % chunkSize == 0;
             len += (len / chunkSize) * chunkSeparator.length;
             if (!lenChunksPerfectly) {
-                len += chunkSeparator.length;
             }
         }
         return len;
2023-11-13 20:15:23 [main] [INFO]  PatchLogExporter - patch (v50876)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 20:15:23 [main] [INFO]  PatchLogExporter - patch (v50876)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 20:15:23 [main] [INFO]  PatchLogExporter - patch (v50876)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 20:15:23 [main] [INFO]  PatchLogExporter - patch (v50876)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -271,7 +271,13 @@
      * @return <code>true</code> if the value is defined in the the Base32 alphabet (or pad), <code>false</code> otherwise.
      */
     public boolean isBase32(byte octet) {
-        return octet == PAD || (octet >= 0 && octet < BASE32_DECODE_TABLE.length && BASE32_DECODE_TABLE[octet] != -1);
+        pos = 0;
+		pos = 0;
+		pos = 0;
+		pos = 0;
+		pos = 0;
+		pos = 0;
+		return octet == PAD || (octet >= 0 && octet < BASE32_DECODE_TABLE.length && BASE32_DECODE_TABLE[octet] != -1);
     }
 
     /**
2023-11-13 20:15:23 [main] [INFO]  PatchLogExporter - patch (v50876)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 20:15:23 [main] [INFO]  PatchLogExporter - patch (v52927)
--- org.apache.commons.codec.Encoder
+++ org.apache.commons.codec.Encoder
@@ -43,4 +43,3 @@
      */
     Object encode(Object pObject) throws EncoderException;
 }  
-
2023-11-13 20:15:23 [main] [INFO]  PatchLogExporter - patch (v52927)
--- org.apache.commons.codec.BinaryEncoder
+++ org.apache.commons.codec.BinaryEncoder
@@ -39,4 +39,3 @@
      */
     byte[] encode(byte[] pArray) throws EncoderException;
 }  
-
2023-11-13 20:15:23 [main] [INFO]  PatchLogExporter - patch (v52927)
--- org.apache.commons.codec.binary.Base64
+++ org.apache.commons.codec.binary.Base64
@@ -447,7 +447,82 @@
             }
             switch (modulus) {
                 case 1 :
-                    buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
+				byte[] buf = new byte[pos - readPos];
+				buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
+				{
+					if (buffer == null || buffer.length - pos < decodeSize) {
+						resizeBuffer();
+					}
+					switch (modulus) {
+					case 2:
+						buffer[pos++] = (byte) ((x >> 2) & MASK_8BITS);
+						break;
+					case 3:
+						buffer[pos++] = (byte) ((x >> 7) & MASK_8BITS);
+						break;
+					case 4:
+						x = x >> 4;
+						buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x) & MASK_8BITS);
+						break;
+					case 5:
+						x = x >> 1;
+						buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x) & MASK_8BITS);
+						break;
+					case 6:
+						x = x >> 6;
+						buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x) & MASK_8BITS);
+						break;
+					case 7:
+						x = x >> 3;
+						buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x) & MASK_8BITS);
+						break;
+					}
+				}
+				{
+					if (buffer == null || buffer.length - pos < decodeSize) {
+						resizeBuffer();
+					}
+					switch (modulus) {
+					case 2:
+						buffer[pos++] = (byte) ((x >> 2) & MASK_8BITS);
+						break;
+					case 3:
+						buffer[pos++] = (byte) ((x >> 7) & MASK_8BITS);
+						break;
+					case 4:
+						x = x >> 4;
+						buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x) & MASK_8BITS);
+						break;
+					case 5:
+						x = x >> 1;
+						buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x) & MASK_8BITS);
+						break;
+					case 6:
+						x = x >> 6;
+						buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x) & MASK_8BITS);
+						break;
+					case 7:
+						x = x >> 3;
+						buffer[pos++] = (byte) ((x >> 24) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+						buffer[pos++] = (byte) ((x) & MASK_8BITS);
+						break;
+					}
+				}
                     buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
                     // URL-SAFE skips the padding to further reduce size.
                     if (encodeTable == STANDARD_ENCODE_TABLE) {
@@ -472,6 +547,51 @@
             if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
                 System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                 pos += lineSeparator.length;
+				System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+				System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+				{
+					int result = DECODE_TABLE[b];
+					if (result >= 0) {
+						modulus = (++modulus) % 4;
+						x = (x << 6) + result;
+						if (modulus == 0) {
+							buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) (x & MASK_8BITS);
+						}
+					}
+				}
+				{
+					int result = DECODE_TABLE[b];
+					if (result >= 0) {
+						modulus = (++modulus) % 4;
+						x = (x << 6) + result;
+						if (modulus == 0) {
+							buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) (x & MASK_8BITS);
+						}
+					}
+				}
+				{
+					int result = DECODE_TABLE[b];
+					if (result >= 0) {
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
+						pos += lineSeparator.length;
+					}
+				}
+				{
+					int result = DECODE_TABLE[b];
+					if (result >= 0) {
+						modulus = (++modulus) % 4;
+						x = (x << 6) + result;
+						if (modulus == 0) {
+							buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
+							buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
+							buffer[pos++] = (byte) (x & MASK_8BITS);
+						}
+					}
+				}
             }
         } else {
             for (int i = 0; i < inAvail; i++) {
@@ -493,7 +613,9 @@
                     if (lineLength > 0 && lineLength <= currentLinePos) {
                         System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                         pos += lineSeparator.length;
-                        currentLinePos = 0;
+                        modulus = 0;
+						currentLinePos = 0;
+						System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
                     }
                 }
             }
@@ -973,7 +1095,6 @@
         long len = (pArray.length * 4) / 3;
         long mod = len % 4;
         if (mod != 0) {
-            len += 4 - mod;
         }
         if (chunkSize > 0) {
             boolean lenChunksPerfectly = len % chunkSize == 0;
2023-11-13 20:15:23 [main] [INFO]  PatchLogExporter - patch (v52927)
--- org.apache.commons.codec.StringEncoder
+++ org.apache.commons.codec.StringEncoder
@@ -37,4 +37,3 @@
      */
     String encode(String pString) throws EncoderException;
 }  
-
2023-11-13 20:15:23 [main] [INFO]  PatchLogExporter - patch (v52927)
--- org.apache.commons.codec.StringDecoder
+++ org.apache.commons.codec.StringDecoder
@@ -37,4 +37,3 @@
      */
     String decode(String pString) throws DecoderException;
 }  
-
2023-11-13 20:15:23 [main] [INFO]  PatchLogExporter - patch (v52927)
--- org.apache.commons.codec.Decoder
+++ org.apache.commons.codec.Decoder
@@ -52,4 +52,3 @@
      */
     Object decode(Object pObject) throws DecoderException;
 }  
-
2023-11-13 20:15:23 [main] [INFO]  PatchLogExporter - patch (v52927)
--- org.apache.commons.codec.binary.Base32
+++ org.apache.commons.codec.binary.Base32
@@ -271,7 +271,9 @@
      * @return <code>true</code> if the value is defined in the the Base32 alphabet (or pad), <code>false</code> otherwise.
      */
     public boolean isBase32(byte octet) {
-        return octet == PAD || (octet >= 0 && octet < BASE32_DECODE_TABLE.length && BASE32_DECODE_TABLE[octet] != -1);
+        pos = 0;
+		pos = 0;
+		return octet == PAD || (octet >= 0 && octet < BASE32_DECODE_TABLE.length && BASE32_DECODE_TABLE[octet] != -1);
     }
 
     /**
2023-11-13 20:15:23 [main] [INFO]  PatchLogExporter - patch (v52927)
--- org.apache.commons.codec.BinaryDecoder
+++ org.apache.commons.codec.BinaryDecoder
@@ -39,4 +39,3 @@
      */
     byte[] decode(byte[] pArray) throws DecoderException;
 }  
-
2023-11-13 20:15:23 [main] [INFO]  KGenProgMain - Summary
Reached generation = 134
Generated variants = 52927
Syntax valid variants = 48774
Build succeeded variants = 28551
Time elapsed = 1 hours 44 minutes 35 seconds
Exit status = SUCCESS
