2023-07-02 15:00:05 [main] [WARN]  Configuration$Builder - The directory where kGenProg is running is different from the root directory of the given target project.
2023-07-02 15:00:05 [main] [WARN]  Configuration$Builder - If the target project includes test cases with file I/O, such test cases won't run correctly.
2023-07-02 15:00:05 [main] [WARN]  Configuration$Builder - We recommend you running kGenProg with the root directory of the target project as the current directory.
2023-07-02 15:00:05 [main] [INFO]  KGenProgMain - 
==================== kGenProg Configuration ====================
configPath = /Users/haradakanon/Downloads/kGenProg-1.8.2/example/math72/kgenprog-72.toml (set by command line)
rootDir = /Users/haradakanon/Downloads/kGenProg-1.8.2/example/math72 (set in config file)
productPaths = [/Users/haradakanon/Downloads/kGenProg-1.8.2/example/math72/src/main] (set in config file)
testPaths = [/Users/haradakanon/Downloads/kGenProg-1.8.2/example/math72/src/test] (set in config file)
classPaths = []
executionTests = [org.apache.commons.math.analysis.solvers.BrentSolverTest] (set in config file)
outDir = kgenprog-out
logLevel = INFO (set in config file)
mutationGeneratingCount = 200 (set in config file)
crossoverGeneratingCount = 200 (set in config file)
headcount = 100
maxGeneration = 1000 (set in config file)
timeLimit = PT24H (set in config file)
testTimeLimit = PT3M (set in config file)
requiredSolutionsCount = 100 (set in config file)
randomSeed = 6 (set by command line)
scope = PACKAGE (set in config file)
faultLocalization = Zoltar (set in config file)
mutationType = Simple
crossoverType = Random
firstVariantSelectionStrategy = Random
secondVariantSelectionStrategy = Random
isPatchOutput = true (set in config file)
isHistoryRecord = false
currentDirectory = /Users/haradakanon/Desktop/研究/実験データ/research
version = 1.8.2
================================================================
2023-07-02 15:00:22 [main] [INFO]  KGenProgMain - initial failed tests (1/6)
org.apache.commons.math.analysis.solvers.BrentSolverTest.testRootEndpoints: null

2023-07-02 15:00:23 [main] [INFO]  KGenProgMain - GA started
2023-07-02 15:00:23 [main] [INFO]  KGenProgMain - entered the era of 1st generation.
2023-07-02 15:00:35 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 seconds
Variants: generated 200, build-succeeded 26, build-failed 93, syntax-invalid 16, redundant 65
Fitness: max 0.833(20), min 0.167(3), ave 0.737
Test execution time: sum 3076 ms, max 369 ms, min 73 ms
----------------------------------------------------------------

2023-07-02 15:00:35 [main] [INFO]  KGenProgMain - entered the era of 2nd generation.
2023-07-02 15:00:45 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 22 seconds
Variants: generated 200, build-succeeded 38, build-failed 126, syntax-invalid 13, redundant 23
Fitness: max 1(1), min 0.167(5), ave 0.684
Test execution time: sum 2730 ms, max 160 ms, min 54 ms
----------------------------------------------------------------

2023-07-02 15:00:45 [main] [INFO]  KGenProgMain - entered the era of 3rd generation.
2023-07-02 15:01:05 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 42 seconds
Variants: generated 400, build-succeeded 140, build-failed 116, syntax-invalid 19, redundant 125
Fitness: max 1(2), min 0(2), ave 0.665
Test execution time: sum 8453 ms, max 199 ms, min 51 ms
----------------------------------------------------------------

2023-07-02 15:01:05 [main] [INFO]  KGenProgMain - entered the era of 4th generation.
2023-07-02 15:01:22 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 59 seconds
Variants: generated 400, build-succeeded 123, build-failed 102, syntax-invalid 45, redundant 130
Fitness: max 0.833(101), min 0.167(11), ave 0.756
Test execution time: sum 7413 ms, max 209 ms, min 51 ms
----------------------------------------------------------------

2023-07-02 15:01:22 [main] [INFO]  KGenProgMain - entered the era of 5th generation.
2023-07-02 15:01:42 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 minutes 19 seconds
Variants: generated 400, build-succeeded 138, build-failed 103, syntax-invalid 41, redundant 118
Fitness: max 1(1), min 0.167(4), ave 0.802
Test execution time: sum 8163 ms, max 120 ms, min 52 ms
----------------------------------------------------------------

2023-07-02 15:01:42 [main] [INFO]  KGenProgMain - entered the era of 6th generation.
2023-07-02 15:02:02 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 minutes 39 seconds
Variants: generated 400, build-succeeded 154, build-failed 106, syntax-invalid 55, redundant 85
Fitness: max 1(2), min 0.167(8), ave 0.792
Test execution time: sum 9033 ms, max 197 ms, min 51 ms
----------------------------------------------------------------

2023-07-02 15:02:02 [main] [INFO]  KGenProgMain - entered the era of 7th generation.
2023-07-02 15:17:24 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 17 minutes 1 seconds
Variants: generated 400, build-succeeded 153, build-failed 118, syntax-invalid 43, redundant 86
Fitness: max 1(2), min 0.167(10), ave 0.784
Test execution time: sum 909270 ms, max 900101 ms, min 50 ms
----------------------------------------------------------------

2023-07-02 15:17:24 [main] [INFO]  KGenProgMain - entered the era of 8th generation.
2023-07-02 15:17:48 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 17 minutes 24 seconds
Variants: generated 400, build-succeeded 178, build-failed 115, syntax-invalid 52, redundant 55
Fitness: max 1(2), min 0.167(7), ave 0.797
Test execution time: sum 10464 ms, max 192 ms, min 51 ms
----------------------------------------------------------------

2023-07-02 15:17:48 [main] [INFO]  KGenProgMain - entered the era of 9th generation.
2023-07-02 15:18:09 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 17 minutes 46 seconds
Variants: generated 400, build-succeeded 173, build-failed 115, syntax-invalid 47, redundant 65
Fitness: max 1(1), min 0.167(6), ave 0.797
Test execution time: sum 9768 ms, max 130 ms, min 51 ms
----------------------------------------------------------------

2023-07-02 15:18:09 [main] [INFO]  KGenProgMain - entered the era of 10th generation.
2023-07-02 15:18:33 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 18 minutes 10 seconds
Variants: generated 400, build-succeeded 184, build-failed 119, syntax-invalid 48, redundant 49
Fitness: max 1(1), min 0.167(5), ave 0.807
Test execution time: sum 10454 ms, max 225 ms, min 49 ms
----------------------------------------------------------------

2023-07-02 15:18:33 [main] [INFO]  KGenProgMain - entered the era of 11th generation.
2023-07-02 15:18:58 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 18 minutes 35 seconds
Variants: generated 400, build-succeeded 206, build-failed 112, syntax-invalid 41, redundant 41
Fitness: max 1(1), min 0.167(5), ave 0.804
Test execution time: sum 11598 ms, max 185 ms, min 50 ms
----------------------------------------------------------------

2023-07-02 15:18:58 [main] [INFO]  KGenProgMain - entered the era of 12th generation.
2023-07-02 15:19:23 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 19 minutes 0 seconds
Variants: generated 400, build-succeeded 209, build-failed 104, syntax-invalid 40, redundant 47
Fitness: max 0.833(195), min 0.167(4), ave 0.809
Test execution time: sum 11707 ms, max 119 ms, min 50 ms
----------------------------------------------------------------

2023-07-02 15:19:23 [main] [INFO]  KGenProgMain - entered the era of 13th generation.
2023-07-02 15:34:50 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 34 minutes 27 seconds
Variants: generated 400, build-succeeded 199, build-failed 116, syntax-invalid 48, redundant 37
Fitness: max 1(2), min 0.167(8), ave 0.786
Test execution time: sum 911713 ms, max 900094 ms, min 51 ms
----------------------------------------------------------------

2023-07-02 15:34:50 [main] [INFO]  KGenProgMain - entered the era of 14th generation.
2023-07-02 15:35:17 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 34 minutes 54 seconds
Variants: generated 400, build-succeeded 204, build-failed 116, syntax-invalid 48, redundant 32
Fitness: max 0.833(179), min 0.167(9), ave 0.784
Test execution time: sum 11878 ms, max 120 ms, min 51 ms
----------------------------------------------------------------

2023-07-02 15:35:17 [main] [INFO]  KGenProgMain - entered the era of 15th generation.
2023-07-02 15:35:45 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 35 minutes 21 seconds
Variants: generated 400, build-succeeded 209, build-failed 114, syntax-invalid 43, redundant 34
Fitness: max 1(1), min 0.167(9), ave 0.778
Test execution time: sum 12251 ms, max 133 ms, min 51 ms
----------------------------------------------------------------

2023-07-02 15:35:45 [main] [INFO]  KGenProgMain - entered the era of 16th generation.
2023-07-02 16:06:13 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 5 minutes 50 seconds
Variants: generated 400, build-succeeded 211, build-failed 116, syntax-invalid 43, redundant 30
Fitness: max 1(1), min 0.167(8), ave 0.795
Test execution time: sum 1812744 ms, max 900102 ms, min 51 ms
----------------------------------------------------------------

2023-07-02 16:06:13 [main] [INFO]  KGenProgMain - entered the era of 17th generation.
2023-07-02 16:21:43 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 21 minutes 20 seconds
Variants: generated 400, build-succeeded 221, build-failed 107, syntax-invalid 39, redundant 33
Fitness: max 0.833(198), min 0.167(8), ave 0.795
Test execution time: sum 913475 ms, max 900092 ms, min 51 ms
----------------------------------------------------------------

2023-07-02 16:21:43 [main] [INFO]  KGenProgMain - entered the era of 18th generation.
2023-07-02 16:22:09 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 21 minutes 45 seconds
Variants: generated 400, build-succeeded 202, build-failed 112, syntax-invalid 57, redundant 29
Fitness: max 1(2), min 0.167(8), ave 0.8
Test execution time: sum 11517 ms, max 158 ms, min 51 ms
----------------------------------------------------------------

2023-07-02 16:22:09 [main] [INFO]  KGenProgMain - entered the era of 19th generation.
2023-07-02 16:22:36 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 22 minutes 12 seconds
Variants: generated 400, build-succeeded 215, build-failed 112, syntax-invalid 46, redundant 27
Fitness: max 1(4), min 0.167(6), ave 0.805
Test execution time: sum 12332 ms, max 127 ms, min 50 ms
----------------------------------------------------------------

2023-07-02 16:22:36 [main] [INFO]  KGenProgMain - entered the era of 20th generation.
2023-07-02 16:23:03 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 22 minutes 39 seconds
Variants: generated 400, build-succeeded 205, build-failed 123, syntax-invalid 47, redundant 25
Fitness: max 1(1), min 0.167(3), ave 0.812
Test execution time: sum 11842 ms, max 175 ms, min 52 ms
----------------------------------------------------------------

2023-07-02 16:23:03 [main] [INFO]  KGenProgMain - entered the era of 21st generation.
2023-07-02 16:23:30 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 23 minutes 7 seconds
Variants: generated 400, build-succeeded 218, build-failed 110, syntax-invalid 43, redundant 29
Fitness: max 1(4), min 0.167(9), ave 0.798
Test execution time: sum 12286 ms, max 137 ms, min 51 ms
----------------------------------------------------------------

2023-07-02 16:23:30 [main] [INFO]  KGenProgMain - entered the era of 22nd generation.
2023-07-02 16:23:58 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 23 minutes 35 seconds
Variants: generated 400, build-succeeded 203, build-failed 116, syntax-invalid 56, redundant 25
Fitness: max 1(3), min 0.167(7), ave 0.805
Test execution time: sum 11853 ms, max 121 ms, min 52 ms
----------------------------------------------------------------

2023-07-02 16:23:58 [main] [INFO]  KGenProgMain - entered the era of 23rd generation.
2023-07-02 16:39:27 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 39 minutes 4 seconds
Variants: generated 400, build-succeeded 213, build-failed 124, syntax-invalid 37, redundant 26
Fitness: max 1(3), min 0.167(7), ave 0.803
Test execution time: sum 912732 ms, max 900094 ms, min 52 ms
----------------------------------------------------------------

2023-07-02 16:39:27 [main] [INFO]  KGenProgMain - entered the era of 24th generation.
2023-07-02 16:39:56 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 39 minutes 32 seconds
Variants: generated 400, build-succeeded 216, build-failed 110, syntax-invalid 51, redundant 23
Fitness: max 0.833(194), min 0.167(7), ave 0.798
Test execution time: sum 12547 ms, max 127 ms, min 51 ms
----------------------------------------------------------------

2023-07-02 16:39:56 [main] [INFO]  KGenProgMain - entered the era of 25th generation.
2023-07-02 16:40:23 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 39 minutes 59 seconds
Variants: generated 400, build-succeeded 191, build-failed 121, syntax-invalid 62, redundant 26
Fitness: max 1(2), min 0.167(3), ave 0.813
Test execution time: sum 11104 ms, max 128 ms, min 52 ms
----------------------------------------------------------------

2023-07-02 16:40:23 [main] [INFO]  KGenProgMain - entered the era of 26th generation.
2023-07-02 16:40:49 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 40 minutes 26 seconds
Variants: generated 400, build-succeeded 195, build-failed 115, syntax-invalid 65, redundant 25
Fitness: max 0.833(174), min 0.167(8), ave 0.793
Test execution time: sum 11187 ms, max 199 ms, min 52 ms
----------------------------------------------------------------

2023-07-02 16:40:49 [main] [INFO]  KGenProgMain - entered the era of 27th generation.
2023-07-02 16:41:16 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 40 minutes 53 seconds
Variants: generated 400, build-succeeded 199, build-failed 107, syntax-invalid 72, redundant 22
Fitness: max 0.833(176), min 0.167(15), ave 0.776
Test execution time: sum 11063 ms, max 128 ms, min 51 ms
----------------------------------------------------------------

2023-07-02 16:41:16 [main] [INFO]  KGenProgMain - entered the era of 28th generation.
2023-07-02 16:41:43 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 41 minutes 20 seconds
Variants: generated 400, build-succeeded 198, build-failed 107, syntax-invalid 73, redundant 22
Fitness: max 0.833(181), min 0.167(7), ave 0.8
Test execution time: sum 11118 ms, max 125 ms, min 50 ms
----------------------------------------------------------------

2023-07-02 16:41:43 [main] [INFO]  KGenProgMain - entered the era of 29th generation.
2023-07-02 16:42:10 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 41 minutes 47 seconds
Variants: generated 400, build-succeeded 191, build-failed 124, syntax-invalid 64, redundant 21
Fitness: max 1(1), min 0.167(7), ave 0.798
Test execution time: sum 10809 ms, max 192 ms, min 52 ms
----------------------------------------------------------------

2023-07-02 16:42:10 [main] [INFO]  KGenProgMain - entered the era of 30th generation.
2023-07-02 16:42:39 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 42 minutes 16 seconds
Variants: generated 400, build-succeeded 215, build-failed 115, syntax-invalid 50, redundant 20
Fitness: max 1(2), min 0.167(6), ave 0.802
Test execution time: sum 12208 ms, max 182 ms, min 51 ms
----------------------------------------------------------------

2023-07-02 16:42:39 [main] [INFO]  KGenProgMain - entered the era of 31st generation.
2023-07-02 16:43:07 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 42 minutes 44 seconds
Variants: generated 400, build-succeeded 203, build-failed 118, syntax-invalid 66, redundant 13
Fitness: max 1(1), min 0.167(5), ave 0.803
Test execution time: sum 11586 ms, max 106 ms, min 51 ms
----------------------------------------------------------------

2023-07-02 16:43:07 [main] [INFO]  KGenProgMain - entered the era of 32nd generation.
2023-07-02 17:13:44 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 13 minutes 21 seconds
Variants: generated 400, build-succeeded 223, build-failed 106, syntax-invalid 50, redundant 21
Fitness: max 0.833(197), min 0.167(16), ave 0.777
Test execution time: sum 1816173 ms, max 900111 ms, min 53 ms
----------------------------------------------------------------

2023-07-02 17:13:44 [main] [INFO]  KGenProgMain - entered the era of 33rd generation.
2023-07-02 17:14:19 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 13 minutes 55 seconds
Variants: generated 400, build-succeeded 189, build-failed 120, syntax-invalid 72, redundant 19
Fitness: max 1(1), min 0.167(9), ave 0.795
Test execution time: sum 13723 ms, max 137 ms, min 65 ms
----------------------------------------------------------------

2023-07-02 17:14:19 [main] [INFO]  KGenProgMain - entered the era of 34th generation.
2023-07-02 17:14:54 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 14 minutes 31 seconds
Variants: generated 400, build-succeeded 199, build-failed 112, syntax-invalid 68, redundant 21
Fitness: max 1(2), min 0.167(7), ave 0.796
Test execution time: sum 14370 ms, max 156 ms, min 66 ms
----------------------------------------------------------------

2023-07-02 17:14:54 [main] [INFO]  KGenProgMain - entered the era of 35th generation.
2023-07-02 17:15:30 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 15 minutes 7 seconds
Variants: generated 400, build-succeeded 209, build-failed 109, syntax-invalid 57, redundant 25
Fitness: max 0.833(189), min 0.167(9), ave 0.794
Test execution time: sum 14897 ms, max 153 ms, min 66 ms
----------------------------------------------------------------

2023-07-02 17:15:30 [main] [INFO]  KGenProgMain - entered the era of 36th generation.
2023-07-02 17:16:08 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 15 minutes 45 seconds
Variants: generated 400, build-succeeded 220, build-failed 110, syntax-invalid 51, redundant 19
Fitness: max 1(1), min 0.167(11), ave 0.788
Test execution time: sum 15927 ms, max 170 ms, min 66 ms
----------------------------------------------------------------

2023-07-02 17:16:08 [main] [INFO]  KGenProgMain - entered the era of 37th generation.
2023-07-02 17:16:45 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 16 minutes 22 seconds
Variants: generated 400, build-succeeded 207, build-failed 133, syntax-invalid 47, redundant 13
Fitness: max 0.833(181), min 0.167(12), ave 0.783
Test execution time: sum 14967 ms, max 143 ms, min 65 ms
----------------------------------------------------------------

2023-07-02 17:16:45 [main] [INFO]  KGenProgMain - entered the era of 38th generation.
2023-07-02 17:17:23 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 17 minutes 0 seconds
Variants: generated 400, build-succeeded 223, build-failed 114, syntax-invalid 44, redundant 19
Fitness: max 1(2), min 0.167(13), ave 0.783
Test execution time: sum 16308 ms, max 126 ms, min 66 ms
----------------------------------------------------------------

2023-07-02 17:17:23 [main] [INFO]  KGenProgMain - entered the era of 39th generation.
2023-07-02 17:18:01 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 17 minutes 38 seconds
Variants: generated 400, build-succeeded 221, build-failed 104, syntax-invalid 56, redundant 19
Fitness: max 0.833(187), min 0.167(11), ave 0.777
Test execution time: sum 16044 ms, max 150 ms, min 66 ms
----------------------------------------------------------------

2023-07-02 17:18:01 [main] [INFO]  KGenProgMain - entered the era of 40th generation.
2023-07-02 17:18:40 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 18 minutes 17 seconds
Variants: generated 400, build-succeeded 228, build-failed 109, syntax-invalid 44, redundant 19
Fitness: max 1(2), min 0.167(10), ave 0.788
Test execution time: sum 16585 ms, max 138 ms, min 65 ms
----------------------------------------------------------------

2023-07-02 17:18:40 [main] [INFO]  KGenProgMain - entered the era of 41st generation.
2023-07-02 17:19:18 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 18 minutes 55 seconds
Variants: generated 400, build-succeeded 214, build-failed 113, syntax-invalid 59, redundant 14
Fitness: max 0.833(187), min 0.167(8), ave 0.789
Test execution time: sum 15528 ms, max 179 ms, min 65 ms
----------------------------------------------------------------

2023-07-02 17:19:18 [main] [INFO]  KGenProgMain - entered the era of 42nd generation.
2023-07-02 17:19:55 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 19 minutes 32 seconds
Variants: generated 400, build-succeeded 211, build-failed 114, syntax-invalid 58, redundant 17
Fitness: max 1(2), min 0.167(8), ave 0.798
Test execution time: sum 15656 ms, max 155 ms, min 67 ms
----------------------------------------------------------------

2023-07-02 17:19:55 [main] [INFO]  KGenProgMain - entered the era of 43rd generation.
2023-07-02 17:20:34 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 20 minutes 11 seconds
Variants: generated 400, build-succeeded 219, build-failed 118, syntax-invalid 44, redundant 19
Fitness: max 1(1), min 0.167(7), ave 0.799
Test execution time: sum 16083 ms, max 144 ms, min 66 ms
----------------------------------------------------------------

2023-07-02 17:20:34 [main] [INFO]  KGenProgMain - entered the era of 44th generation.
2023-07-02 17:21:12 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 20 minutes 48 seconds
Variants: generated 400, build-succeeded 209, build-failed 116, syntax-invalid 55, redundant 20
Fitness: max 1(1), min 0.167(9), ave 0.792
Test execution time: sum 15525 ms, max 219 ms, min 67 ms
----------------------------------------------------------------

2023-07-02 17:21:12 [main] [INFO]  KGenProgMain - entered the era of 45th generation.
2023-07-02 17:21:52 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 21 minutes 29 seconds
Variants: generated 400, build-succeeded 221, build-failed 108, syntax-invalid 52, redundant 19
Fitness: max 0.833(186), min 0.167(15), ave 0.771
Test execution time: sum 17671 ms, max 934 ms, min 65 ms
----------------------------------------------------------------

2023-07-02 17:21:52 [main] [INFO]  KGenProgMain - entered the era of 46th generation.
2023-07-02 17:22:28 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 22 minutes 5 seconds
Variants: generated 400, build-succeeded 193, build-failed 107, syntax-invalid 78, redundant 22
Fitness: max 1(2), min 0.167(10), ave 0.783
Test execution time: sum 14356 ms, max 195 ms, min 66 ms
----------------------------------------------------------------

2023-07-02 17:22:28 [main] [INFO]  KGenProgMain - entered the era of 47th generation.
2023-07-02 17:23:06 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 22 minutes 42 seconds
Variants: generated 400, build-succeeded 197, build-failed 109, syntax-invalid 75, redundant 19
Fitness: max 1(2), min 0.167(12), ave 0.781
Test execution time: sum 14513 ms, max 164 ms, min 66 ms
----------------------------------------------------------------

2023-07-02 17:23:06 [main] [INFO]  KGenProgMain - entered the era of 48th generation.
2023-07-02 17:23:45 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 23 minutes 22 seconds
Variants: generated 400, build-succeeded 219, build-failed 111, syntax-invalid 54, redundant 16
Fitness: max 1(1), min 0.167(12), ave 0.784
Test execution time: sum 16146 ms, max 142 ms, min 66 ms
----------------------------------------------------------------

2023-07-02 17:23:45 [main] [INFO]  KGenProgMain - entered the era of 49th generation.
2023-07-02 17:24:22 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 23 minutes 59 seconds
Variants: generated 400, build-succeeded 204, build-failed 103, syntax-invalid 77, redundant 16
Fitness: max 1(2), min 0.167(12), ave 0.782
Test execution time: sum 14944 ms, max 145 ms, min 67 ms
----------------------------------------------------------------

2023-07-02 17:24:23 [main] [INFO]  KGenProgMain - entered the era of 50th generation.
2023-07-02 17:24:59 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 24 minutes 36 seconds
Variants: generated 400, build-succeeded 183, build-failed 114, syntax-invalid 89, redundant 14
Fitness: max 0.833(165), min 0.167(10), ave 0.789
Test execution time: sum 13772 ms, max 158 ms, min 67 ms
----------------------------------------------------------------

2023-07-02 17:24:59 [main] [INFO]  KGenProgMain - entered the era of 51st generation.
2023-07-02 17:25:38 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 25 minutes 15 seconds
Variants: generated 400, build-succeeded 199, build-failed 110, syntax-invalid 76, redundant 15
Fitness: max 1(2), min 0.167(12), ave 0.778
Test execution time: sum 15008 ms, max 319 ms, min 68 ms
----------------------------------------------------------------

2023-07-02 17:25:38 [main] [INFO]  KGenProgMain - entered the era of 52nd generation.
2023-07-02 17:26:18 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 25 minutes 55 seconds
Variants: generated 400, build-succeeded 215, build-failed 95, syntax-invalid 70, redundant 20
Fitness: max 1(1), min 0.167(6), ave 0.803
Test execution time: sum 16118 ms, max 168 ms, min 69 ms
----------------------------------------------------------------

2023-07-02 17:26:18 [main] [INFO]  KGenProgMain - entered the era of 53rd generation.
2023-07-02 17:26:56 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 26 minutes 33 seconds
Variants: generated 400, build-succeeded 189, build-failed 114, syntax-invalid 74, redundant 23
Fitness: max 1(3), min 0.167(7), ave 0.798
Test execution time: sum 14101 ms, max 254 ms, min 68 ms
----------------------------------------------------------------

2023-07-02 17:26:56 [main] [INFO]  KGenProgMain - entered the era of 54th generation.
2023-07-02 17:27:35 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 27 minutes 11 seconds
Variants: generated 400, build-succeeded 191, build-failed 112, syntax-invalid 81, redundant 16
Fitness: max 0.833(168), min 0.167(10), ave 0.782
Test execution time: sum 14367 ms, max 232 ms, min 67 ms
----------------------------------------------------------------

2023-07-02 17:27:35 [main] [INFO]  KGenProgMain - entered the era of 55th generation.
2023-07-02 17:28:16 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 27 minutes 53 seconds
Variants: generated 400, build-succeeded 219, build-failed 113, syntax-invalid 56, redundant 12
Fitness: max 1(2), min 0.167(11), ave 0.789
Test execution time: sum 16766 ms, max 226 ms, min 67 ms
----------------------------------------------------------------

2023-07-02 17:28:16 [main] [INFO]  KGenProgMain - entered the era of 56th generation.
2023-07-02 17:28:59 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 28 minutes 36 seconds
Variants: generated 400, build-succeeded 216, build-failed 109, syntax-invalid 58, redundant 17
Fitness: max 0.833(190), min 0.167(8), ave 0.792
Test execution time: sum 16807 ms, max 166 ms, min 68 ms
----------------------------------------------------------------

2023-07-02 17:28:59 [main] [INFO]  KGenProgMain - entered the era of 57th generation.
2023-07-02 17:29:43 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 29 minutes 19 seconds
Variants: generated 400, build-succeeded 209, build-failed 113, syntax-invalid 60, redundant 18
Fitness: max 0.833(178), min 0.167(15), ave 0.768
Test execution time: sum 16394 ms, max 166 ms, min 69 ms
----------------------------------------------------------------

2023-07-02 17:29:43 [main] [INFO]  KGenProgMain - entered the era of 58th generation.
2023-07-02 17:30:25 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 30 minutes 2 seconds
Variants: generated 400, build-succeeded 214, build-failed 117, syntax-invalid 57, redundant 12
Fitness: max 1(1), min 0.167(9), ave 0.786
Test execution time: sum 16392 ms, max 146 ms, min 68 ms
----------------------------------------------------------------

2023-07-02 17:30:25 [main] [INFO]  KGenProgMain - entered the era of 59th generation.
2023-07-02 17:31:07 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 30 minutes 44 seconds
Variants: generated 400, build-succeeded 210, build-failed 113, syntax-invalid 60, redundant 17
Fitness: max 0.833(183), min 0.167(9), ave 0.787
Test execution time: sum 16090 ms, max 196 ms, min 68 ms
----------------------------------------------------------------

2023-07-02 17:31:07 [main] [INFO]  KGenProgMain - entered the era of 60th generation.
2023-07-02 17:31:50 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 31 minutes 27 seconds
Variants: generated 400, build-succeeded 222, build-failed 103, syntax-invalid 60, redundant 15
Fitness: max 1(2), min 0.167(13), ave 0.784
Test execution time: sum 16752 ms, max 239 ms, min 66 ms
----------------------------------------------------------------

2023-07-02 17:31:50 [main] [INFO]  KGenProgMain - entered the era of 61st generation.
2023-07-02 17:32:34 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 32 minutes 11 seconds
Variants: generated 400, build-succeeded 211, build-failed 106, syntax-invalid 59, redundant 24
Fitness: max 1(1), min 0.167(8), ave 0.796
Test execution time: sum 16365 ms, max 231 ms, min 68 ms
----------------------------------------------------------------

2023-07-02 17:32:34 [main] [INFO]  KGenProgMain - entered the era of 62nd generation.
2023-07-02 17:33:18 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 32 minutes 55 seconds
Variants: generated 400, build-succeeded 214, build-failed 104, syntax-invalid 61, redundant 21
Fitness: max 1(1), min 0.167(6), ave 0.803
Test execution time: sum 16472 ms, max 145 ms, min 69 ms
----------------------------------------------------------------

2023-07-02 17:33:18 [main] [INFO]  KGenProgMain - entered the era of 63rd generation.
2023-07-02 17:34:03 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 33 minutes 40 seconds
Variants: generated 400, build-succeeded 212, build-failed 118, syntax-invalid 53, redundant 17
Fitness: max 0.833(195), min 0.167(8), ave 0.797
Test execution time: sum 16519 ms, max 221 ms, min 68 ms
----------------------------------------------------------------

2023-07-02 17:34:03 [main] [INFO]  KGenProgMain - entered the era of 64th generation.
2023-07-02 17:34:50 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 34 minutes 27 seconds
Variants: generated 400, build-succeeded 227, build-failed 116, syntax-invalid 44, redundant 13
Fitness: max 1(1), min 0.167(8), ave 0.791
Test execution time: sum 17579 ms, max 158 ms, min 69 ms
----------------------------------------------------------------

2023-07-02 17:34:50 [main] [INFO]  KGenProgMain - entered the era of 65th generation.
2023-07-02 17:35:36 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 35 minutes 13 seconds
Variants: generated 400, build-succeeded 217, build-failed 111, syntax-invalid 47, redundant 25
Fitness: max 0.833(195), min 0.167(6), ave 0.8
Test execution time: sum 16876 ms, max 166 ms, min 68 ms
----------------------------------------------------------------

2023-07-02 17:35:36 [main] [INFO]  KGenProgMain - entered the era of 66th generation.
2023-07-02 17:36:22 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 35 minutes 59 seconds
Variants: generated 400, build-succeeded 214, build-failed 119, syntax-invalid 54, redundant 13
Fitness: max 0.833(197), min 0.167(8), ave 0.798
Test execution time: sum 16509 ms, max 156 ms, min 68 ms
----------------------------------------------------------------

2023-07-02 17:36:22 [main] [INFO]  KGenProgMain - entered the era of 67th generation.
2023-07-02 17:37:10 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 36 minutes 47 seconds
Variants: generated 400, build-succeeded 219, build-failed 120, syntax-invalid 45, redundant 16
Fitness: max 1(2), min 0.167(6), ave 0.807
Test execution time: sum 17325 ms, max 165 ms, min 69 ms
----------------------------------------------------------------

2023-07-02 17:37:10 [main] [INFO]  KGenProgMain - entered the era of 68th generation.
2023-07-02 17:37:57 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 37 minutes 33 seconds
Variants: generated 400, build-succeeded 221, build-failed 118, syntax-invalid 51, redundant 10
Fitness: max 0.833(201), min 0.167(11), ave 0.792
Test execution time: sum 17114 ms, max 150 ms, min 68 ms
----------------------------------------------------------------

2023-07-02 17:37:57 [main] [INFO]  KGenProgMain - entered the era of 69th generation.
2023-07-02 17:38:43 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 38 minutes 20 seconds
Variants: generated 400, build-succeeded 224, build-failed 99, syntax-invalid 62, redundant 15
Fitness: max 1(1), min 0.167(12), ave 0.786
Test execution time: sum 17028 ms, max 161 ms, min 68 ms
----------------------------------------------------------------

2023-07-02 17:38:43 [main] [INFO]  KGenProgMain - entered the era of 70th generation.
2023-07-02 17:39:32 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 39 minutes 9 seconds
Variants: generated 400, build-succeeded 238, build-failed 111, syntax-invalid 39, redundant 12
Fitness: max 1(1), min 0.167(11), ave 0.793
Test execution time: sum 18469 ms, max 242 ms, min 69 ms
----------------------------------------------------------------

2023-07-02 17:39:32 [main] [INFO]  KGenProgMain - entered the era of 71st generation.
2023-07-02 17:40:22 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 39 minutes 58 seconds
Variants: generated 400, build-succeeded 229, build-failed 113, syntax-invalid 45, redundant 13
Fitness: max 0.833(207), min 0.167(8), ave 0.798
Test execution time: sum 18014 ms, max 165 ms, min 68 ms
----------------------------------------------------------------

2023-07-02 17:40:22 [main] [INFO]  KGenProgMain - entered the era of 72nd generation.
2023-07-02 17:41:12 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 40 minutes 49 seconds
Variants: generated 400, build-succeeded 236, build-failed 113, syntax-invalid 39, redundant 12
Fitness: max 0.833(217), min 0.167(11), ave 0.795
Test execution time: sum 18911 ms, max 180 ms, min 69 ms
----------------------------------------------------------------

2023-07-02 17:41:12 [main] [INFO]  KGenProgMain - entered the era of 73rd generation.
2023-07-02 17:42:00 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 41 minutes 36 seconds
Variants: generated 400, build-succeeded 211, build-failed 115, syntax-invalid 56, redundant 18
Fitness: max 1(2), min 0.167(3), ave 0.812
Test execution time: sum 16543 ms, max 154 ms, min 69 ms
----------------------------------------------------------------

2023-07-02 17:42:00 [main] [INFO]  KGenProgMain - entered the era of 74th generation.
2023-07-02 17:42:47 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 42 minutes 24 seconds
Variants: generated 400, build-succeeded 218, build-failed 120, syntax-invalid 48, redundant 14
Fitness: max 0.833(190), min 0.167(11), ave 0.779
Test execution time: sum 16972 ms, max 209 ms, min 68 ms
----------------------------------------------------------------

2023-07-02 17:42:47 [main] [INFO]  KGenProgMain - entered the era of 75th generation.
2023-07-02 17:43:38 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 43 minutes 15 seconds
Variants: generated 400, build-succeeded 240, build-failed 108, syntax-invalid 31, redundant 21
Fitness: max 1(1), min 0.167(6), ave 0.804
Test execution time: sum 18875 ms, max 221 ms, min 67 ms
----------------------------------------------------------------

2023-07-02 17:43:38 [main] [INFO]  KGenProgMain - entered the era of 76th generation.
2023-07-02 17:44:28 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 44 minutes 5 seconds
Variants: generated 400, build-succeeded 226, build-failed 115, syntax-invalid 44, redundant 15
Fitness: max 0.833(203), min 0.167(9), ave 0.794
Test execution time: sum 17682 ms, max 161 ms, min 69 ms
----------------------------------------------------------------

2023-07-02 17:44:28 [main] [INFO]  KGenProgMain - entered the era of 77th generation.
2023-07-02 17:45:20 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 44 minutes 57 seconds
Variants: generated 400, build-succeeded 221, build-failed 111, syntax-invalid 51, redundant 17
Fitness: max 0.833(207), min 0.167(7), ave 0.805
Test execution time: sum 18309 ms, max 235 ms, min 70 ms
----------------------------------------------------------------

2023-07-02 17:45:20 [main] [INFO]  KGenProgMain - entered the era of 78th generation.
2023-07-02 17:46:11 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 45 minutes 48 seconds
Variants: generated 400, build-succeeded 230, build-failed 115, syntax-invalid 40, redundant 15
Fitness: max 0.833(207), min 0.167(13), ave 0.788
Test execution time: sum 18351 ms, max 157 ms, min 69 ms
----------------------------------------------------------------

2023-07-02 17:46:11 [main] [INFO]  KGenProgMain - entered the era of 79th generation.
2023-07-02 17:47:03 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 46 minutes 40 seconds
Variants: generated 400, build-succeeded 222, build-failed 119, syntax-invalid 47, redundant 12
Fitness: max 0.833(195), min 0.167(10), ave 0.789
Test execution time: sum 17972 ms, max 158 ms, min 69 ms
----------------------------------------------------------------

2023-07-02 17:47:03 [main] [INFO]  KGenProgMain - entered the era of 80th generation.
2023-07-02 17:47:54 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 47 minutes 31 seconds
Variants: generated 400, build-succeeded 221, build-failed 126, syntax-invalid 43, redundant 10
Fitness: max 0.833(211), min 0.167(6), ave 0.811
Test execution time: sum 17295 ms, max 179 ms, min 70 ms
----------------------------------------------------------------

2023-07-02 17:47:54 [main] [INFO]  KGenProgMain - entered the era of 81st generation.
2023-07-02 17:48:44 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 48 minutes 21 seconds
Variants: generated 400, build-succeeded 212, build-failed 125, syntax-invalid 49, redundant 14
Fitness: max 1(2), min 0.167(5), ave 0.807
Test execution time: sum 16778 ms, max 230 ms, min 69 ms
----------------------------------------------------------------

2023-07-02 17:48:44 [main] [INFO]  KGenProgMain - entered the era of 82nd generation.
2023-07-02 18:04:38 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 4 minutes 15 seconds
Variants: generated 400, build-succeeded 240, build-failed 114, syntax-invalid 34, redundant 12
Fitness: max 0.833(217), min 0.167(8), ave 0.799
Test execution time: sum 919219 ms, max 900117 ms, min 69 ms
----------------------------------------------------------------

2023-07-02 18:04:38 [main] [INFO]  KGenProgMain - entered the era of 83rd generation.
2023-07-02 18:05:32 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 5 minutes 9 seconds
Variants: generated 400, build-succeeded 227, build-failed 116, syntax-invalid 44, redundant 13
Fitness: max 1(1), min 0.167(6), ave 0.804
Test execution time: sum 18210 ms, max 166 ms, min 70 ms
----------------------------------------------------------------

2023-07-02 18:05:32 [main] [INFO]  KGenProgMain - entered the era of 84th generation.
2023-07-02 18:06:27 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 6 minutes 3 seconds
Variants: generated 400, build-succeeded 237, build-failed 103, syntax-invalid 48, redundant 12
Fitness: max 0.833(217), min 0.167(9), ave 0.798
Test execution time: sum 19351 ms, max 165 ms, min 69 ms
----------------------------------------------------------------

2023-07-02 18:06:27 [main] [INFO]  KGenProgMain - entered the era of 85th generation.
2023-07-02 18:07:19 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 6 minutes 55 seconds
Variants: generated 400, build-succeeded 228, build-failed 112, syntax-invalid 45, redundant 15
Fitness: max 1(1), min 0.167(6), ave 0.805
Test execution time: sum 18095 ms, max 223 ms, min 69 ms
----------------------------------------------------------------

2023-07-02 18:07:19 [main] [INFO]  KGenProgMain - entered the era of 86th generation.
2023-07-02 18:08:12 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 7 minutes 48 seconds
Variants: generated 400, build-succeeded 225, build-failed 118, syntax-invalid 33, redundant 24
Fitness: max 0.833(210), min 0.167(9), ave 0.801
Test execution time: sum 17912 ms, max 231 ms, min 69 ms
----------------------------------------------------------------

2023-07-02 18:08:12 [main] [INFO]  KGenProgMain - entered the era of 87th generation.
2023-07-02 18:09:04 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 8 minutes 41 seconds
Variants: generated 400, build-succeeded 219, build-failed 121, syntax-invalid 46, redundant 14
Fitness: max 0.833(205), min 0.167(6), ave 0.807
Test execution time: sum 17576 ms, max 170 ms, min 69 ms
----------------------------------------------------------------

2023-07-02 18:09:04 [main] [INFO]  KGenProgMain - entered the era of 88th generation.
2023-07-02 18:09:57 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 9 minutes 34 seconds
Variants: generated 400, build-succeeded 227, build-failed 98, syntax-invalid 56, redundant 19
Fitness: max 0.833(207), min 0.167(8), ave 0.8
Test execution time: sum 18192 ms, max 155 ms, min 71 ms
----------------------------------------------------------------

2023-07-02 18:09:57 [main] [INFO]  KGenProgMain - entered the era of 89th generation.
2023-07-02 18:10:50 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 10 minutes 26 seconds
Variants: generated 400, build-succeeded 216, build-failed 124, syntax-invalid 48, redundant 12
Fitness: max 1(1), min 0.167(11), ave 0.795
Test execution time: sum 17266 ms, max 239 ms, min 69 ms
----------------------------------------------------------------

2023-07-02 18:10:50 [main] [INFO]  KGenProgMain - entered the era of 90th generation.
2023-07-02 18:11:47 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 11 minutes 23 seconds
Variants: generated 400, build-succeeded 241, build-failed 109, syntax-invalid 36, redundant 14
Fitness: max 1(1), min 0.167(7), ave 0.802
Test execution time: sum 19683 ms, max 252 ms, min 70 ms
----------------------------------------------------------------

2023-07-02 18:11:47 [main] [INFO]  KGenProgMain - entered the era of 91st generation.
2023-07-02 18:12:41 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 12 minutes 18 seconds
Variants: generated 400, build-succeeded 232, build-failed 118, syntax-invalid 44, redundant 6
Fitness: max 1(1), min 0.167(10), ave 0.797
Test execution time: sum 18134 ms, max 169 ms, min 69 ms
----------------------------------------------------------------

2023-07-02 18:12:41 [main] [INFO]  KGenProgMain - entered the era of 92nd generation.
2023-07-02 18:13:35 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 13 minutes 12 seconds
Variants: generated 400, build-succeeded 225, build-failed 111, syntax-invalid 50, redundant 14
Fitness: max 1(1), min 0.167(13), ave 0.784
Test execution time: sum 18144 ms, max 243 ms, min 69 ms
----------------------------------------------------------------

2023-07-02 18:13:35 [main] [INFO]  KGenProgMain - entered the era of 93rd generation.
2023-07-02 18:14:30 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 14 minutes 7 seconds
Variants: generated 400, build-succeeded 224, build-failed 123, syntax-invalid 40, redundant 13
Fitness: max 0.833(204), min 0.167(5), ave 0.802
Test execution time: sum 18157 ms, max 161 ms, min 71 ms
----------------------------------------------------------------

2023-07-02 18:14:30 [main] [INFO]  KGenProgMain - entered the era of 94th generation.
2023-07-02 18:15:28 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 15 minutes 5 seconds
Variants: generated 400, build-succeeded 233, build-failed 112, syntax-invalid 38, redundant 17
Fitness: max 1(1), min 0.167(11), ave 0.79
Test execution time: sum 19179 ms, max 294 ms, min 69 ms
----------------------------------------------------------------

2023-07-02 18:15:28 [main] [INFO]  KGenProgMain - entered the era of 95th generation.
2023-07-02 18:31:25 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 31 minutes 2 seconds
Variants: generated 400, build-succeeded 225, build-failed 124, syntax-invalid 36, redundant 15
Fitness: max 0.833(207), min 0.167(5), ave 0.804
Test execution time: sum 918707 ms, max 900128 ms, min 72 ms
----------------------------------------------------------------

2023-07-02 18:31:26 [main] [INFO]  KGenProgMain - entered the era of 96th generation.
2023-07-02 18:32:23 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 32 minutes 0 seconds
Variants: generated 400, build-succeeded 222, build-failed 118, syntax-invalid 40, redundant 20
Fitness: max 1(1), min 0.167(8), ave 0.8
Test execution time: sum 18470 ms, max 274 ms, min 71 ms
----------------------------------------------------------------

2023-07-02 18:32:23 [main] [INFO]  KGenProgMain - entered the era of 97th generation.
2023-07-02 18:33:22 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 32 minutes 59 seconds
Variants: generated 400, build-succeeded 238, build-failed 114, syntax-invalid 34, redundant 14
Fitness: max 1(1), min 0.167(9), ave 0.8
Test execution time: sum 19783 ms, max 161 ms, min 71 ms
----------------------------------------------------------------

2023-07-02 18:33:22 [main] [INFO]  KGenProgMain - entered the era of 98th generation.
2023-07-02 18:34:19 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 33 minutes 56 seconds
Variants: generated 400, build-succeeded 224, build-failed 115, syntax-invalid 47, redundant 14
Fitness: max 0.833(199), min 0.167(7), ave 0.793
Test execution time: sum 18592 ms, max 162 ms, min 73 ms
----------------------------------------------------------------

2023-07-02 18:34:19 [main] [INFO]  KGenProgMain - entered the era of 99th generation.
2023-07-02 18:50:19 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 49 minutes 56 seconds
Variants: generated 400, build-succeeded 230, build-failed 108, syntax-invalid 51, redundant 11
Fitness: max 1(1), min 0.167(10), ave 0.801
Test execution time: sum 919477 ms, max 900119 ms, min 71 ms
----------------------------------------------------------------

2023-07-02 18:50:19 [main] [INFO]  KGenProgMain - entered the era of 100th generation.
2023-07-02 18:51:14 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 50 minutes 51 seconds
Variants: generated 400, build-succeeded 212, build-failed 115, syntax-invalid 59, redundant 14
Fitness: max 1(1), min 0.167(4), ave 0.811
Test execution time: sum 17439 ms, max 182 ms, min 72 ms
----------------------------------------------------------------

2023-07-02 18:51:14 [main] [INFO]  KGenProgMain - entered the era of 101st generation.
2023-07-02 19:07:12 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 6 minutes 49 seconds
Variants: generated 400, build-succeeded 215, build-failed 110, syntax-invalid 58, redundant 17
Fitness: max 1(1), min 0(1), ave 0.791
Test execution time: sum 918453 ms, max 900119 ms, min 71 ms
----------------------------------------------------------------

2023-07-02 19:07:12 [main] [INFO]  KGenProgMain - entered the era of 102nd generation.
2023-07-02 19:08:09 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 7 minutes 46 seconds
Variants: generated 400, build-succeeded 213, build-failed 109, syntax-invalid 60, redundant 18
Fitness: max 0.833(194), min 0.167(11), ave 0.792
Test execution time: sum 18050 ms, max 160 ms, min 71 ms
----------------------------------------------------------------

2023-07-02 19:08:09 [main] [INFO]  KGenProgMain - entered the era of 103rd generation.
2023-07-02 19:09:05 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 8 minutes 41 seconds
Variants: generated 400, build-succeeded 218, build-failed 106, syntax-invalid 55, redundant 21
Fitness: max 1(1), min 0.167(4), ave 0.816
Test execution time: sum 17848 ms, max 220 ms, min 71 ms
----------------------------------------------------------------

2023-07-02 19:09:05 [main] [INFO]  KGenProgMain - entered the era of 104th generation.
2023-07-02 19:10:03 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 9 minutes 40 seconds
Variants: generated 400, build-succeeded 231, build-failed 117, syntax-invalid 46, redundant 6
Fitness: max 0.833(214), min 0.167(11), ave 0.796
Test execution time: sum 18794 ms, max 235 ms, min 71 ms
----------------------------------------------------------------

2023-07-02 19:10:03 [main] [INFO]  KGenProgMain - entered the era of 105th generation.
2023-07-02 19:11:02 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 10 minutes 39 seconds
Variants: generated 400, build-succeeded 233, build-failed 106, syntax-invalid 47, redundant 14
Fitness: max 0.833(211), min 0.167(10), ave 0.794
Test execution time: sum 19145 ms, max 162 ms, min 70 ms
----------------------------------------------------------------

2023-07-02 19:11:02 [main] [INFO]  KGenProgMain - entered the era of 106th generation.
2023-07-02 19:12:00 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 11 minutes 36 seconds
Variants: generated 400, build-succeeded 222, build-failed 101, syntax-invalid 65, redundant 12
Fitness: max 1(1), min 0.167(8), ave 0.806
Test execution time: sum 18622 ms, max 226 ms, min 70 ms
----------------------------------------------------------------

2023-07-02 19:12:00 [main] [INFO]  KGenProgMain - entered the era of 107th generation.
2023-07-02 19:12:58 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 12 minutes 35 seconds
Variants: generated 400, build-succeeded 224, build-failed 112, syntax-invalid 53, redundant 11
Fitness: max 1(3), min 0.167(13), ave 0.79
Test execution time: sum 18472 ms, max 166 ms, min 71 ms
----------------------------------------------------------------

2023-07-02 19:12:58 [main] [INFO]  KGenProgMain - entered the era of 108th generation.
2023-07-02 19:13:59 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 13 minutes 35 seconds
Variants: generated 400, build-succeeded 235, build-failed 109, syntax-invalid 41, redundant 15
Fitness: max 0.833(217), min 0.167(10), ave 0.799
Test execution time: sum 19304 ms, max 166 ms, min 72 ms
----------------------------------------------------------------

2023-07-02 19:13:59 [main] [INFO]  KGenProgMain - entered the era of 109th generation.
2023-07-02 19:14:58 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 14 minutes 35 seconds
Variants: generated 400, build-succeeded 230, build-failed 99, syntax-invalid 61, redundant 10
Fitness: max 0.833(214), min 0.167(7), ave 0.804
Test execution time: sum 19164 ms, max 171 ms, min 74 ms
----------------------------------------------------------------

2023-07-02 19:14:58 [main] [INFO]  KGenProgMain - entered the era of 110th generation.
2023-07-02 19:15:55 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 15 minutes 32 seconds
Variants: generated 400, build-succeeded 208, build-failed 111, syntax-invalid 61, redundant 20
Fitness: max 0.833(195), min 0.167(9), ave 0.801
Test execution time: sum 17569 ms, max 253 ms, min 71 ms
----------------------------------------------------------------

2023-07-02 19:15:55 [main] [INFO]  KGenProgMain - entered the era of 111th generation.
2023-07-02 19:16:56 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 16 minutes 33 seconds
Variants: generated 400, build-succeeded 226, build-failed 110, syntax-invalid 53, redundant 11
Fitness: max 0.833(209), min 0.167(9), ave 0.8
Test execution time: sum 19485 ms, max 188 ms, min 72 ms
----------------------------------------------------------------

2023-07-02 19:16:56 [main] [INFO]  KGenProgMain - entered the era of 112th generation.
2023-07-02 19:17:15 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 16 minutes 52 seconds
Variants: generated 128, build-succeeded 37, build-failed 70, syntax-invalid 10, redundant 11
Fitness: max 1(1), min 0.167(5), ave 0.734
Test execution time: sum 3421 ms, max 160 ms, min 73 ms
----------------------------------------------------------------

2023-07-02 19:17:15 [main] [INFO]  KGenProgMain - GA stopped
2023-07-02 19:17:20 [main] [INFO]  PatchLogExporter - patch (v268)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-02 19:17:20 [main] [INFO]  PatchLogExporter - patch (v268)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-02 19:17:20 [main] [INFO]  PatchLogExporter - patch (v268)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-02 19:17:20 [main] [INFO]  PatchLogExporter - patch (v268)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +123,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
2023-07-02 19:17:20 [main] [INFO]  PatchLogExporter - patch (v430)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-02 19:17:20 [main] [INFO]  PatchLogExporter - patch (v430)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-02 19:17:20 [main] [INFO]  PatchLogExporter - patch (v430)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-02 19:17:20 [main] [INFO]  PatchLogExporter - patch (v430)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,7 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
+            double x2 = max;
             return result;
         }
 
@@ -124,7 +124,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
2023-07-02 19:17:20 [main] [INFO]  PatchLogExporter - patch (v450)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -77,7 +77,6 @@
         }
         this.f = f;
         this.defaultFunctionValueAccuracy = 1.0e-15;
-        this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
     /**
2023-07-02 19:17:20 [main] [INFO]  PatchLogExporter - patch (v450)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-02 19:17:20 [main] [INFO]  PatchLogExporter - patch (v450)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-02 19:17:20 [main] [INFO]  PatchLogExporter - patch (v450)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-02 19:17:20 [main] [INFO]  PatchLogExporter - patch (v450)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +123,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
2023-07-02 19:17:20 [main] [INFO]  PatchLogExporter - patch (v1225)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-02 19:17:20 [main] [INFO]  PatchLogExporter - patch (v1225)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-02 19:17:20 [main] [INFO]  PatchLogExporter - patch (v1225)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -65,7 +65,6 @@
         this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
-        this.iterationCount = 0;
     }
 
     /** {@inheritDoc} */
2023-07-02 19:17:20 [main] [INFO]  PatchLogExporter - patch (v1225)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-02 19:17:20 [main] [INFO]  PatchLogExporter - patch (v1225)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -111,10 +111,7 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
-        if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
-            return result;
-        }
+        if (Math.abs(yMin) <= functionValueAccuracy)
 
         // reduce interval if min and initial bracket the root
         if (yInitial * yMin < 0) {
@@ -124,7 +121,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
2023-07-02 19:17:20 [main] [INFO]  PatchLogExporter - patch (v1714)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-02 19:17:20 [main] [INFO]  PatchLogExporter - patch (v1714)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-02 19:17:20 [main] [INFO]  PatchLogExporter - patch (v1714)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-02 19:17:20 [main] [INFO]  PatchLogExporter - patch (v1714)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -111,10 +111,7 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
-        if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
-            return result;
-        }
+        if (Math.abs(yMin) <= functionValueAccuracy)
 
         // reduce interval if min and initial bracket the root
         if (yInitial * yMin < 0) {
@@ -124,7 +121,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,8 +177,9 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
                 ret = max;
+				setResult(max, 0);
+                ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
2023-07-02 19:17:20 [main] [INFO]  PatchLogExporter - patch (v1741)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-02 19:17:20 [main] [INFO]  PatchLogExporter - patch (v1741)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-02 19:17:20 [main] [INFO]  PatchLogExporter - patch (v1741)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-02 19:17:20 [main] [INFO]  PatchLogExporter - patch (v1741)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,7 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
+            verifySequence(min, initial, max);
             return result;
         }
 
@@ -124,7 +124,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,8 +180,9 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
                 ret = max;
+				setResult(max, 0);
+                functionValueAccuracy = defaultFunctionValueAccuracy;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
2023-07-02 19:17:20 [main] [INFO]  PatchLogExporter - patch (v2016)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-02 19:17:20 [main] [INFO]  PatchLogExporter - patch (v2016)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-02 19:17:20 [main] [INFO]  PatchLogExporter - patch (v2016)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-02 19:17:20 [main] [INFO]  PatchLogExporter - patch (v2016)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -100,6 +100,7 @@
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
         clearResult();
+		double fm;
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
@@ -112,7 +113,7 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
+            double x1 = min;
             return result;
         }
 
@@ -124,7 +125,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -241,7 +241,8 @@
                 y2 = y0;
             }
             if (Math.abs(y1) <= functionValueAccuracy) {
-                // Avoid division by very small values. Assume
+                oldDelta = delta;
+				// Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
2023-07-02 19:17:20 [main] [INFO]  PatchLogExporter - patch (v2071)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-02 19:17:20 [main] [INFO]  PatchLogExporter - patch (v2071)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-02 19:17:20 [main] [INFO]  PatchLogExporter - patch (v2071)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-02 19:17:20 [main] [INFO]  PatchLogExporter - patch (v2071)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,7 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
+            double x1 = min;
             return result;
         }
 
@@ -124,7 +124,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,8 +180,9 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
                 ret = max;
+				setResult(max, 0);
+                ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
2023-07-02 19:17:20 [main] [INFO]  PatchLogExporter - patch (v2412)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-02 19:17:20 [main] [INFO]  PatchLogExporter - patch (v2412)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-02 19:17:20 [main] [INFO]  PatchLogExporter - patch (v2412)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -59,13 +59,11 @@
      */
     protected ConvergingAlgorithmImpl(final int defaultMaximalIterationCount,
                                       final double defaultAbsoluteAccuracy) {
-        this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
-        this.iterationCount = 0;
     }
 
     /** {@inheritDoc} */
2023-07-02 19:17:20 [main] [INFO]  PatchLogExporter - patch (v2412)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-02 19:17:20 [main] [INFO]  PatchLogExporter - patch (v2412)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,7 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
+            iterationCount += this.iterationCount;
             return result;
         }
 
@@ -124,7 +124,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
2023-07-02 19:17:20 [main] [INFO]  PatchLogExporter - patch (v2422)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-02 19:17:20 [main] [INFO]  PatchLogExporter - patch (v2422)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-02 19:17:20 [main] [INFO]  PatchLogExporter - patch (v2422)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-02 19:17:20 [main] [INFO]  PatchLogExporter - patch (v2422)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,7 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
+            verifySequence(min, initial, max);
             return result;
         }
 
@@ -124,7 +124,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,8 +180,9 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
                 ret = max;
+				setResult(max, 0);
+                ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
2023-07-02 19:17:20 [main] [INFO]  PatchLogExporter - patch (v2878)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -77,7 +77,6 @@
         }
         this.f = f;
         this.defaultFunctionValueAccuracy = 1.0e-15;
-        this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
     /**
2023-07-02 19:17:20 [main] [INFO]  PatchLogExporter - patch (v2878)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-02 19:17:20 [main] [INFO]  PatchLogExporter - patch (v2878)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-02 19:17:20 [main] [INFO]  PatchLogExporter - patch (v2878)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-02 19:17:20 [main] [INFO]  PatchLogExporter - patch (v2878)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -99,7 +99,7 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
+        functionValueAccuracy = defaultFunctionValueAccuracy;
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
@@ -111,10 +111,7 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
-        if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
-            return result;
-        }
+        if (Math.abs(yMin) <= functionValueAccuracy)
 
         // reduce interval if min and initial bracket the root
         if (yInitial * yMin < 0) {
@@ -124,7 +121,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
2023-07-02 19:17:20 [main] [INFO]  PatchLogExporter - patch (v3301)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-02 19:17:20 [main] [INFO]  PatchLogExporter - patch (v3301)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-02 19:17:20 [main] [INFO]  PatchLogExporter - patch (v3301)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-02 19:17:20 [main] [INFO]  PatchLogExporter - patch (v3301)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,7 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
+            verifySequence(min, initial, max);
             return result;
         }
 
@@ -124,7 +124,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,8 +180,8 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
                 ret = max;
+				ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
2023-07-02 19:17:20 [main] [INFO]  PatchLogExporter - patch (v3663)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-02 19:17:20 [main] [INFO]  PatchLogExporter - patch (v3663)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-02 19:17:20 [main] [INFO]  PatchLogExporter - patch (v3663)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-02 19:17:20 [main] [INFO]  PatchLogExporter - patch (v3663)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -99,7 +99,7 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
+        functionValueAccuracy = defaultFunctionValueAccuracy;
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
@@ -112,7 +112,7 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
+            double x1 = min;
             return result;
         }
 
@@ -124,7 +124,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -245,6 +244,7 @@
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
+				x1 = x2;
                 return result;
             }
             double dx = x2 - x1;
2023-07-02 19:17:20 [main] [INFO]  PatchLogExporter - patch (v4461)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-02 19:17:20 [main] [INFO]  PatchLogExporter - patch (v4461)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-02 19:17:20 [main] [INFO]  PatchLogExporter - patch (v4461)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -65,7 +65,6 @@
         this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
-        this.iterationCount = 0;
     }
 
     /** {@inheritDoc} */
2023-07-02 19:17:20 [main] [INFO]  PatchLogExporter - patch (v4461)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-02 19:17:20 [main] [INFO]  PatchLogExporter - patch (v4461)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +123,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -177,7 +175,7 @@
         double sign = yMin * yMax;
         if (sign > 0) {
             // check if either value is close to a zero
-            if (Math.abs(yMin) <= functionValueAccuracy) {
+            if (sign < 0) {
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
@@ -235,6 +233,7 @@
                 // use the bracket point if is better than last approximation
                 x0 = x1;
                 x1 = x2;
+				y2 = y0;
                 x2 = x0;
                 y0 = y1;
                 y1 = y2;
2023-07-02 19:17:20 [main] [INFO]  PatchLogExporter - patch (v4521)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-02 19:17:20 [main] [INFO]  PatchLogExporter - patch (v4521)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-02 19:17:20 [main] [INFO]  PatchLogExporter - patch (v4521)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-02 19:17:20 [main] [INFO]  PatchLogExporter - patch (v4521)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +123,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,7 +179,9 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
+                ret = min;
+				ret = max;
+				setResult(max, 0);
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -241,11 +241,12 @@
                 y2 = y0;
             }
             if (Math.abs(y1) <= functionValueAccuracy) {
-                // Avoid division by very small values. Assume
+                double fmin;
+				// Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
-                return result;
+                int numIterations = 0;
             }
             double dx = x2 - x1;
             double tolerance =
2023-07-02 19:17:20 [main] [INFO]  PatchLogExporter - patch (v5226)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-02 19:17:20 [main] [INFO]  PatchLogExporter - patch (v5226)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-02 19:17:20 [main] [INFO]  PatchLogExporter - patch (v5226)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -65,7 +65,6 @@
         this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
-        this.iterationCount = 0;
     }
 
     /** {@inheritDoc} */
2023-07-02 19:17:20 [main] [INFO]  PatchLogExporter - patch (v5226)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-02 19:17:20 [main] [INFO]  PatchLogExporter - patch (v5226)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -111,10 +111,7 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
-        if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
-            return result;
-        }
+        if (Math.abs(yMin) <= functionValueAccuracy)
 
         // reduce interval if min and initial bracket the root
         if (yInitial * yMin < 0) {
@@ -124,7 +121,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -235,6 +231,7 @@
                 // use the bracket point if is better than last approximation
                 x0 = x1;
                 x1 = x2;
+				y2 = y0;
                 x2 = x0;
                 y0 = y1;
                 y1 = y2;
2023-07-02 19:17:20 [main] [INFO]  PatchLogExporter - patch (v5777)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -77,7 +77,6 @@
         }
         this.f = f;
         this.defaultFunctionValueAccuracy = 1.0e-15;
-        this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
     /**
2023-07-02 19:17:20 [main] [INFO]  PatchLogExporter - patch (v5777)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-02 19:17:20 [main] [INFO]  PatchLogExporter - patch (v5777)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-02 19:17:20 [main] [INFO]  PatchLogExporter - patch (v5777)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-02 19:17:20 [main] [INFO]  PatchLogExporter - patch (v5777)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +123,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,8 +179,11 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
                 ret = max;
+				setResult(max, 0);
+				ret = solve(f, min, yMin, max, yMax, min, yMin);
+				ret = solve(f, min, yMin, max, yMax, min, yMin);
+                ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
2023-07-02 19:17:20 [main] [INFO]  PatchLogExporter - patch (v6449)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -77,7 +77,6 @@
         }
         this.f = f;
         this.defaultFunctionValueAccuracy = 1.0e-15;
-        this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
     /**
2023-07-02 19:17:20 [main] [INFO]  PatchLogExporter - patch (v6449)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-02 19:17:20 [main] [INFO]  PatchLogExporter - patch (v6449)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-02 19:17:20 [main] [INFO]  PatchLogExporter - patch (v6449)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-02 19:17:20 [main] [INFO]  PatchLogExporter - patch (v6449)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -99,7 +99,7 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
+        this.functionValueAccuracy = defaultFunctionValueAccuracy;
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
@@ -112,7 +112,7 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
+            double x1 = min;
             return result;
         }
 
@@ -124,7 +124,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -165,7 +164,7 @@
         throws MaxIterationsExceededException,
         FunctionEvaluationException {
 
-        clearResult();
+        this.functionValueAccuracy = defaultFunctionValueAccuracy;
         verifyInterval(min, max);
 
         double ret = Double.NaN;
2023-07-02 19:17:20 [main] [INFO]  PatchLogExporter - patch (v6565)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -77,7 +77,6 @@
         }
         this.f = f;
         this.defaultFunctionValueAccuracy = 1.0e-15;
-        this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
     /**
2023-07-02 19:17:20 [main] [INFO]  PatchLogExporter - patch (v6565)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-02 19:17:20 [main] [INFO]  PatchLogExporter - patch (v6565)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-02 19:17:20 [main] [INFO]  PatchLogExporter - patch (v6565)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-02 19:17:20 [main] [INFO]  PatchLogExporter - patch (v6565)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,7 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
+            double x1 = min;
             return result;
         }
 
@@ -124,7 +124,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -182,7 +181,7 @@
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
                 setResult(max, 0);
-                ret = max;
+                return result;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
2023-07-02 19:17:20 [main] [INFO]  PatchLogExporter - patch (v6837)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-02 19:17:20 [main] [INFO]  PatchLogExporter - patch (v6837)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-02 19:17:20 [main] [INFO]  PatchLogExporter - patch (v6837)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -59,13 +59,11 @@
      */
     protected ConvergingAlgorithmImpl(final int defaultMaximalIterationCount,
                                       final double defaultAbsoluteAccuracy) {
-        this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
-        this.iterationCount = 0;
     }
 
     /** {@inheritDoc} */
2023-07-02 19:17:20 [main] [INFO]  PatchLogExporter - patch (v6837)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-02 19:17:20 [main] [INFO]  PatchLogExporter - patch (v6837)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,7 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
+            double fb;
             return result;
         }
 
@@ -124,7 +124,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -245,7 +244,7 @@
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
-                return result;
+                int numIterations = 0;
             }
             double dx = x2 - x1;
             double tolerance =
2023-07-02 19:17:20 [main] [INFO]  PatchLogExporter - patch (v6903)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-02 19:17:20 [main] [INFO]  PatchLogExporter - patch (v6903)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-02 19:17:20 [main] [INFO]  PatchLogExporter - patch (v6903)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-02 19:17:20 [main] [INFO]  PatchLogExporter - patch (v6903)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,7 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
+            double x1 = min;
             return result;
         }
 
@@ -124,7 +124,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -182,7 +181,8 @@
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
                 setResult(max, 0);
-                ret = max;
+				ret = solve(f, min, yMin, max, yMax, min, yMin);
+				ret = solve(f, min, yMin, max, yMax, min, yMin);
             } else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
2023-07-02 19:17:20 [main] [INFO]  PatchLogExporter - patch (v6971)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-02 19:17:20 [main] [INFO]  PatchLogExporter - patch (v6971)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-02 19:17:20 [main] [INFO]  PatchLogExporter - patch (v6971)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -65,7 +65,6 @@
         this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
-        this.iterationCount = 0;
     }
 
     /** {@inheritDoc} */
2023-07-02 19:17:20 [main] [INFO]  PatchLogExporter - patch (v6971)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-02 19:17:20 [main] [INFO]  PatchLogExporter - patch (v6971)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +123,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -241,10 +239,12 @@
                 y2 = y0;
             }
             if (Math.abs(y1) <= functionValueAccuracy) {
-                // Avoid division by very small values. Assume
+                oldDelta = delta;
+				// Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
+				x1 = x2;
                 return result;
             }
             double dx = x2 - x1;
2023-07-02 19:17:20 [main] [INFO]  PatchLogExporter - patch (v6997)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-02 19:17:20 [main] [INFO]  PatchLogExporter - patch (v6997)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-02 19:17:20 [main] [INFO]  PatchLogExporter - patch (v6997)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -65,7 +65,6 @@
         this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
-        this.iterationCount = 0;
     }
 
     /** {@inheritDoc} */
2023-07-02 19:17:20 [main] [INFO]  PatchLogExporter - patch (v6997)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-02 19:17:20 [main] [INFO]  PatchLogExporter - patch (v6997)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -99,7 +99,7 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
+        this.functionValueAccuracy = defaultFunctionValueAccuracy;
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
@@ -111,10 +111,7 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
-        if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
-            return result;
-        }
+        if (Math.abs(yMin) <= functionValueAccuracy)
 
         // reduce interval if min and initial bracket the root
         if (yInitial * yMin < 0) {
@@ -124,7 +121,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -177,7 +173,7 @@
         double sign = yMin * yMax;
         if (sign > 0) {
             // check if either value is close to a zero
-            if (Math.abs(yMin) <= functionValueAccuracy) {
+            if (sign < 0) {
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
2023-07-02 19:17:20 [main] [INFO]  PatchLogExporter - patch (v7209)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-02 19:17:20 [main] [INFO]  PatchLogExporter - patch (v7209)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-02 19:17:20 [main] [INFO]  PatchLogExporter - patch (v7209)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-02 19:17:20 [main] [INFO]  PatchLogExporter - patch (v7209)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -99,7 +99,7 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
+        this.functionValueAccuracy = defaultFunctionValueAccuracy;
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
@@ -112,7 +112,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +123,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,8 +179,10 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
                 ret = max;
+				setResult(max, 0);
+				ret = solve(f, min, yMin, max, yMax, min, yMin);
+                ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
@@ -245,7 +245,7 @@
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
-                return result;
+                int numIterations = 0;
             }
             double dx = x2 - x1;
             double tolerance =
2023-07-02 19:17:20 [main] [INFO]  PatchLogExporter - patch (v7687)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-02 19:17:20 [main] [INFO]  PatchLogExporter - patch (v7687)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-02 19:17:20 [main] [INFO]  PatchLogExporter - patch (v7687)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -65,7 +65,6 @@
         this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
-        this.iterationCount = 0;
     }
 
     /** {@inheritDoc} */
2023-07-02 19:17:20 [main] [INFO]  PatchLogExporter - patch (v7687)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-02 19:17:20 [main] [INFO]  PatchLogExporter - patch (v7687)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -99,7 +99,7 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
+        this.functionValueAccuracy = defaultFunctionValueAccuracy;
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
@@ -112,7 +112,7 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
+            verifyInterval(min, max);
             return result;
         }
 
@@ -124,7 +124,7 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
+            double x0 = min;
             return result;
         }
 
@@ -181,7 +181,6 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
2023-07-02 19:17:20 [main] [INFO]  PatchLogExporter - patch (v7700)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-02 19:17:20 [main] [INFO]  PatchLogExporter - patch (v7700)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-02 19:17:20 [main] [INFO]  PatchLogExporter - patch (v7700)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-02 19:17:20 [main] [INFO]  PatchLogExporter - patch (v7700)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -99,7 +99,7 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
+        functionValueAccuracy = defaultFunctionValueAccuracy;
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
@@ -112,7 +112,7 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
+            double x0 = min;
             return result;
         }
 
@@ -124,7 +124,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -177,12 +176,13 @@
         double sign = yMin * yMax;
         if (sign > 0) {
             // check if either value is close to a zero
-            if (Math.abs(yMin) <= functionValueAccuracy) {
+            if (sign < 0) {
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
                 ret = max;
+				setResult(max, 0);
+                ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
2023-07-02 19:17:20 [main] [INFO]  PatchLogExporter - patch (v7702)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -139,7 +139,6 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
-        this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
 
2023-07-02 19:17:20 [main] [INFO]  PatchLogExporter - patch (v7702)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-02 19:17:20 [main] [INFO]  PatchLogExporter - patch (v7702)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-02 19:17:20 [main] [INFO]  PatchLogExporter - patch (v7702)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -65,7 +65,6 @@
         this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
-        this.iterationCount = 0;
     }
 
     /** {@inheritDoc} */
2023-07-02 19:17:20 [main] [INFO]  PatchLogExporter - patch (v7702)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-02 19:17:20 [main] [INFO]  PatchLogExporter - patch (v7702)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,7 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
+            double x1 = min;
             return result;
         }
 
@@ -124,7 +124,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -241,7 +240,8 @@
                 y2 = y0;
             }
             if (Math.abs(y1) <= functionValueAccuracy) {
-                // Avoid division by very small values. Assume
+                oldDelta = delta;
+				// Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
2023-07-02 19:17:20 [main] [INFO]  PatchLogExporter - patch (v7729)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-02 19:17:20 [main] [INFO]  PatchLogExporter - patch (v7729)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-02 19:17:20 [main] [INFO]  PatchLogExporter - patch (v7729)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-02 19:17:20 [main] [INFO]  PatchLogExporter - patch (v7729)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -99,7 +99,7 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
+        this.functionValueAccuracy = defaultFunctionValueAccuracy;
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
@@ -112,7 +112,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +123,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,7 +179,6 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -241,7 +238,8 @@
                 y2 = y0;
             }
             if (Math.abs(y1) <= functionValueAccuracy) {
-                // Avoid division by very small values. Assume
+                this.iterationCount = iterationCount;
+				// Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
2023-07-02 19:17:20 [main] [INFO]  PatchLogExporter - patch (v8027)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-02 19:17:20 [main] [INFO]  PatchLogExporter - patch (v8027)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-02 19:17:20 [main] [INFO]  PatchLogExporter - patch (v8027)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -65,7 +65,6 @@
         this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
-        this.iterationCount = 0;
     }
 
     /** {@inheritDoc} */
2023-07-02 19:17:20 [main] [INFO]  PatchLogExporter - patch (v8027)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-02 19:17:20 [main] [INFO]  PatchLogExporter - patch (v8027)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -99,7 +99,7 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
+        this.functionValueAccuracy = defaultFunctionValueAccuracy;
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
@@ -112,7 +112,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +123,7 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
+            final double denominator;
             return result;
         }
 
@@ -181,7 +180,6 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
2023-07-02 19:17:21 [main] [INFO]  PatchLogExporter - patch (v8061)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -77,7 +77,6 @@
         }
         this.f = f;
         this.defaultFunctionValueAccuracy = 1.0e-15;
-        this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
     /**
2023-07-02 19:17:21 [main] [INFO]  PatchLogExporter - patch (v8061)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-02 19:17:21 [main] [INFO]  PatchLogExporter - patch (v8061)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-02 19:17:21 [main] [INFO]  PatchLogExporter - patch (v8061)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-02 19:17:21 [main] [INFO]  PatchLogExporter - patch (v8061)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,7 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
+            double x0 = min;
             return result;
         }
 
@@ -124,7 +124,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -182,7 +181,9 @@
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
                 setResult(max, 0);
-                ret = max;
+				ret = solve(f, min, yMin, max, yMax, min, yMin);
+                setResult(max, 0);
+				ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
2023-07-02 19:17:21 [main] [INFO]  PatchLogExporter - patch (v8127)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-02 19:17:21 [main] [INFO]  PatchLogExporter - patch (v8127)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-02 19:17:21 [main] [INFO]  PatchLogExporter - patch (v8127)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-02 19:17:21 [main] [INFO]  PatchLogExporter - patch (v8127)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -99,7 +99,7 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
+        this.functionValueAccuracy = defaultFunctionValueAccuracy;
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
@@ -112,7 +112,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +123,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -165,7 +163,7 @@
         throws MaxIterationsExceededException,
         FunctionEvaluationException {
 
-        clearResult();
+        this.functionValueAccuracy = defaultFunctionValueAccuracy;
         verifyInterval(min, max);
 
         double ret = Double.NaN;
@@ -181,8 +179,9 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
                 ret = max;
+				setResult(max, 0);
+                ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
@@ -290,7 +289,6 @@
                     delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
-                    oldDelta = delta;
                     delta = p / p1;
                 }
             }
2023-07-02 19:17:21 [main] [INFO]  PatchLogExporter - patch (v8471)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -77,7 +77,6 @@
         }
         this.f = f;
         this.defaultFunctionValueAccuracy = 1.0e-15;
-        this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
     /**
@@ -141,6 +140,7 @@
         this.result         = newResult;
         this.iterationCount = iterationCount;
         this.resultComputed = true;
+		double ret = Double.NaN;
     }
 
     /**
2023-07-02 19:17:21 [main] [INFO]  PatchLogExporter - patch (v8471)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-02 19:17:21 [main] [INFO]  PatchLogExporter - patch (v8471)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-02 19:17:21 [main] [INFO]  PatchLogExporter - patch (v8471)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-02 19:17:21 [main] [INFO]  PatchLogExporter - patch (v8471)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,7 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
+            double x1 = min;
             return result;
         }
 
@@ -124,7 +124,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -182,7 +181,7 @@
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
                 setResult(max, 0);
-                ret = max;
+				ret = solve(f, min, yMin, max, yMax, min, yMin);
             } else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
2023-07-02 19:17:21 [main] [INFO]  PatchLogExporter - patch (v8485)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-02 19:17:21 [main] [INFO]  PatchLogExporter - patch (v8485)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-02 19:17:21 [main] [INFO]  PatchLogExporter - patch (v8485)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -65,7 +65,6 @@
         this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
-        this.iterationCount = 0;
     }
 
     /** {@inheritDoc} */
2023-07-02 19:17:21 [main] [INFO]  PatchLogExporter - patch (v8485)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-02 19:17:21 [main] [INFO]  PatchLogExporter - patch (v8485)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -99,7 +99,7 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
+        functionValueAccuracy = defaultFunctionValueAccuracy;
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
@@ -112,7 +112,7 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
+            double x0 = min;
             return result;
         }
 
@@ -124,7 +124,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -165,7 +164,7 @@
         throws MaxIterationsExceededException,
         FunctionEvaluationException {
 
-        clearResult();
+        this.functionValueAccuracy = defaultFunctionValueAccuracy;
         verifyInterval(min, max);
 
         double ret = Double.NaN;
2023-07-02 19:17:21 [main] [INFO]  PatchLogExporter - patch (v8598)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-02 19:17:21 [main] [INFO]  PatchLogExporter - patch (v8598)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-02 19:17:21 [main] [INFO]  PatchLogExporter - patch (v8598)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -65,7 +65,6 @@
         this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
-        this.iterationCount = 0;
     }
 
     /** {@inheritDoc} */
2023-07-02 19:17:21 [main] [INFO]  PatchLogExporter - patch (v8598)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-02 19:17:21 [main] [INFO]  PatchLogExporter - patch (v8598)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -99,7 +99,7 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
+        this.functionValueAccuracy = defaultFunctionValueAccuracy;
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
@@ -112,7 +112,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +123,7 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
+            int numIterations = 0;
             return result;
         }
 
@@ -177,7 +176,7 @@
         double sign = yMin * yMax;
         if (sign > 0) {
             // check if either value is close to a zero
-            if (Math.abs(yMin) <= functionValueAccuracy) {
+            if (sign < 0) {
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
@@ -241,7 +240,8 @@
                 y2 = y0;
             }
             if (Math.abs(y1) <= functionValueAccuracy) {
-                // Avoid division by very small values. Assume
+                oldDelta = delta;
+				// Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
2023-07-02 19:17:21 [main] [INFO]  PatchLogExporter - patch (v9282)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-02 19:17:21 [main] [INFO]  PatchLogExporter - patch (v9282)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-02 19:17:21 [main] [INFO]  PatchLogExporter - patch (v9282)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-02 19:17:21 [main] [INFO]  PatchLogExporter - patch (v9282)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,7 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
+            double x1 = min;
             return result;
         }
 
@@ -124,7 +124,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -177,11 +176,10 @@
         double sign = yMin * yMax;
         if (sign > 0) {
             // check if either value is close to a zero
-            if (Math.abs(yMin) <= functionValueAccuracy) {
+            if (sign < 0) {
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -241,7 +239,9 @@
                 y2 = y0;
             }
             if (Math.abs(y1) <= functionValueAccuracy) {
-                // Avoid division by very small values. Assume
+                this.iterationCount = iterationCount;
+				oldDelta = delta;
+				// Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
2023-07-02 19:17:21 [main] [INFO]  PatchLogExporter - patch (v9283)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-02 19:17:21 [main] [INFO]  PatchLogExporter - patch (v9283)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-02 19:17:21 [main] [INFO]  PatchLogExporter - patch (v9283)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -63,9 +63,7 @@
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
-        this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
-        this.iterationCount = 0;
     }
 
     /** {@inheritDoc} */
2023-07-02 19:17:21 [main] [INFO]  PatchLogExporter - patch (v9283)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-02 19:17:21 [main] [INFO]  PatchLogExporter - patch (v9283)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,7 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
+            double x1 = min;
             return result;
         }
 
@@ -124,7 +124,8 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
+            double x1 = max;
+			int i = 1;
             return result;
         }
 
@@ -241,7 +242,8 @@
                 y2 = y0;
             }
             if (Math.abs(y1) <= functionValueAccuracy) {
-                // Avoid division by very small values. Assume
+                this.iterationCount = iterationCount;
+				// Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
2023-07-02 19:17:21 [main] [INFO]  PatchLogExporter - patch (v10903)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -139,8 +139,8 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
-        this.iterationCount = iterationCount;
         this.resultComputed = true;
+		double ret = Double.NaN;
     }
 
     /**
2023-07-02 19:17:21 [main] [INFO]  PatchLogExporter - patch (v10903)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-02 19:17:21 [main] [INFO]  PatchLogExporter - patch (v10903)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-02 19:17:21 [main] [INFO]  PatchLogExporter - patch (v10903)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-02 19:17:21 [main] [INFO]  PatchLogExporter - patch (v10903)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -99,7 +99,6 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
@@ -112,7 +111,7 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
+            double x;
             return result;
         }
 
@@ -124,7 +123,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -182,7 +180,7 @@
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
                 setResult(max, 0);
-                ret = max;
+				ret = solve(f, min, yMin, max, yMax, min, yMin);
             } else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
@@ -241,7 +239,8 @@
                 y2 = y0;
             }
             if (Math.abs(y1) <= functionValueAccuracy) {
-                // Avoid division by very small values. Assume
+                this.iterationCount = iterationCount;
+				// Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
2023-07-02 19:17:21 [main] [INFO]  PatchLogExporter - patch (v11235)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -246,10 +246,6 @@
 
         verifyInterval(lower, upper);
         if (!isBracketing(lower, upper, function)) {
-            throw MathRuntimeException.createIllegalArgumentException(
-                    "function values at endpoints do not have different signs.  " +
-                    "Endpoints: [{0}, {1}], Values: [{2}, {3}]",
-                    lower, upper, function.value(lower), function.value(upper));
         }
     }
 }
2023-07-02 19:17:21 [main] [INFO]  PatchLogExporter - patch (v11235)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-02 19:17:21 [main] [INFO]  PatchLogExporter - patch (v11235)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-02 19:17:21 [main] [INFO]  PatchLogExporter - patch (v11235)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-02 19:17:21 [main] [INFO]  PatchLogExporter - patch (v11235)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -99,7 +99,7 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
+        this.functionValueAccuracy = defaultFunctionValueAccuracy;
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
@@ -112,7 +112,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +123,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,7 +179,8 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
+                double x1 = min;
+				setResult(max, 0);
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
2023-07-02 19:17:21 [main] [INFO]  PatchLogExporter - patch (v11347)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -139,7 +139,6 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
-        this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
 
2023-07-02 19:17:21 [main] [INFO]  PatchLogExporter - patch (v11347)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-02 19:17:21 [main] [INFO]  PatchLogExporter - patch (v11347)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-02 19:17:21 [main] [INFO]  PatchLogExporter - patch (v11347)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-02 19:17:21 [main] [INFO]  PatchLogExporter - patch (v11347)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,7 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
+            double x;
             return result;
         }
 
@@ -124,7 +124,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,8 +180,8 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
                 ret = max;
+				setResult(max, 0);
             } else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
@@ -241,10 +240,12 @@
                 y2 = y0;
             }
             if (Math.abs(y1) <= functionValueAccuracy) {
-                // Avoid division by very small values. Assume
+                this.iterationCount = iterationCount;
+				// Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
+				x1 = x2;
                 return result;
             }
             double dx = x2 - x1;
2023-07-02 19:17:21 [main] [INFO]  PatchLogExporter - patch (v11742)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -139,7 +139,6 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
-        this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
 
2023-07-02 19:17:21 [main] [INFO]  PatchLogExporter - patch (v11742)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-02 19:17:21 [main] [INFO]  PatchLogExporter - patch (v11742)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-02 19:17:21 [main] [INFO]  PatchLogExporter - patch (v11742)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-02 19:17:21 [main] [INFO]  PatchLogExporter - patch (v11742)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -99,7 +99,6 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
@@ -112,7 +111,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +122,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -165,7 +162,7 @@
         throws MaxIterationsExceededException,
         FunctionEvaluationException {
 
-        clearResult();
+        this.functionValueAccuracy = defaultFunctionValueAccuracy;
         verifyInterval(min, max);
 
         double ret = Double.NaN;
@@ -181,8 +178,10 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
                 ret = max;
+				setResult(max, 0);
+				ret = solve(f, min, yMin, max, yMax, min, yMin);
+                double x1 = min;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
2023-07-02 19:17:21 [main] [INFO]  PatchLogExporter - patch (v12599)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-02 19:17:21 [main] [INFO]  PatchLogExporter - patch (v12599)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-02 19:17:21 [main] [INFO]  PatchLogExporter - patch (v12599)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -65,7 +65,6 @@
         this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
-        this.iterationCount = 0;
     }
 
     /** {@inheritDoc} */
2023-07-02 19:17:21 [main] [INFO]  PatchLogExporter - patch (v12599)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-02 19:17:21 [main] [INFO]  PatchLogExporter - patch (v12599)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -99,7 +99,7 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
+        functionValueAccuracy = defaultFunctionValueAccuracy;
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
@@ -112,7 +112,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +123,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -165,7 +163,7 @@
         throws MaxIterationsExceededException,
         FunctionEvaluationException {
 
-        clearResult();
+        this.functionValueAccuracy = defaultFunctionValueAccuracy;
         verifyInterval(min, max);
 
         double ret = Double.NaN;
@@ -241,7 +239,8 @@
                 y2 = y0;
             }
             if (Math.abs(y1) <= functionValueAccuracy) {
-                // Avoid division by very small values. Assume
+                this.iterationCount = iterationCount;
+				// Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
2023-07-02 19:17:21 [main] [INFO]  PatchLogExporter - patch (v12829)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-02 19:17:21 [main] [INFO]  PatchLogExporter - patch (v12829)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-02 19:17:21 [main] [INFO]  PatchLogExporter - patch (v12829)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -65,7 +65,6 @@
         this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
-        this.iterationCount = 0;
     }
 
     /** {@inheritDoc} */
2023-07-02 19:17:21 [main] [INFO]  PatchLogExporter - patch (v12829)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-02 19:17:21 [main] [INFO]  PatchLogExporter - patch (v12829)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -99,7 +99,7 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
+        this.functionValueAccuracy = defaultFunctionValueAccuracy;
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
@@ -112,7 +112,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +123,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,8 +179,9 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
                 ret = max;
+				setResult(max, 0);
+                ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
@@ -245,6 +244,7 @@
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
+				x1 = x2;
                 return result;
             }
             double dx = x2 - x1;
@@ -290,7 +290,6 @@
                     delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
-                    oldDelta = delta;
                     delta = p / p1;
                 }
             }
2023-07-02 19:17:21 [main] [INFO]  PatchLogExporter - patch (v12996)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-02 19:17:21 [main] [INFO]  PatchLogExporter - patch (v12996)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-02 19:17:21 [main] [INFO]  PatchLogExporter - patch (v12996)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -63,9 +63,7 @@
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
-        this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
-        this.iterationCount = 0;
     }
 
     /** {@inheritDoc} */
2023-07-02 19:17:21 [main] [INFO]  PatchLogExporter - patch (v12996)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-02 19:17:21 [main] [INFO]  PatchLogExporter - patch (v12996)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -99,7 +99,7 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
+        this.functionValueAccuracy = defaultFunctionValueAccuracy;
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
@@ -111,10 +111,7 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
-        if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
-            return result;
-        }
+        if (Math.abs(yMin) <= functionValueAccuracy)
 
         // reduce interval if min and initial bracket the root
         if (yInitial * yMin < 0) {
@@ -124,7 +121,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,7 +177,6 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
2023-07-02 19:17:21 [main] [INFO]  PatchLogExporter - patch (v13719)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -163,7 +163,6 @@
      */
     protected final void clearResult() {
         this.iterationCount = 0;
-        this.resultComputed = false;
     }
 
     /**
2023-07-02 19:17:21 [main] [INFO]  PatchLogExporter - patch (v13719)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-02 19:17:21 [main] [INFO]  PatchLogExporter - patch (v13719)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-02 19:17:21 [main] [INFO]  PatchLogExporter - patch (v13719)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -63,7 +63,6 @@
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
-        this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
         this.iterationCount = 0;
     }
2023-07-02 19:17:21 [main] [INFO]  PatchLogExporter - patch (v13719)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-02 19:17:21 [main] [INFO]  PatchLogExporter - patch (v13719)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -99,7 +99,7 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
+        this.functionValueAccuracy = defaultFunctionValueAccuracy;
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
@@ -112,7 +112,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +123,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -165,7 +163,6 @@
         throws MaxIterationsExceededException,
         FunctionEvaluationException {
 
-        clearResult();
         verifyInterval(min, max);
 
         double ret = Double.NaN;
@@ -182,7 +179,8 @@
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
                 setResult(max, 0);
-                ret = max;
+                setResult(max, 0);
+				ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
@@ -241,7 +239,8 @@
                 y2 = y0;
             }
             if (Math.abs(y1) <= functionValueAccuracy) {
-                // Avoid division by very small values. Assume
+                oldDelta = delta;
+				// Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
2023-07-02 19:17:21 [main] [INFO]  PatchLogExporter - patch (v14480)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -77,7 +77,6 @@
         }
         this.f = f;
         this.defaultFunctionValueAccuracy = 1.0e-15;
-        this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
     /**
@@ -163,7 +162,6 @@
      */
     protected final void clearResult() {
         this.iterationCount = 0;
-        this.resultComputed = false;
     }
 
     /**
2023-07-02 19:17:21 [main] [INFO]  PatchLogExporter - patch (v14480)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-02 19:17:21 [main] [INFO]  PatchLogExporter - patch (v14480)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-02 19:17:21 [main] [INFO]  PatchLogExporter - patch (v14480)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -65,7 +65,6 @@
         this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
-        this.iterationCount = 0;
     }
 
     /** {@inheritDoc} */
2023-07-02 19:17:21 [main] [INFO]  PatchLogExporter - patch (v14480)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-02 19:17:21 [main] [INFO]  PatchLogExporter - patch (v14480)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -99,7 +99,7 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
+        this.functionValueAccuracy = defaultFunctionValueAccuracy;
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
@@ -112,7 +112,7 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
+            double x1 = min;
             return result;
         }
 
@@ -124,7 +124,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,7 +180,6 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
2023-07-02 19:17:21 [main] [INFO]  PatchLogExporter - patch (v14553)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -77,7 +77,6 @@
         }
         this.f = f;
         this.defaultFunctionValueAccuracy = 1.0e-15;
-        this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
     /**
2023-07-02 19:17:21 [main] [INFO]  PatchLogExporter - patch (v14553)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-02 19:17:21 [main] [INFO]  PatchLogExporter - patch (v14553)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-02 19:17:21 [main] [INFO]  PatchLogExporter - patch (v14553)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-02 19:17:21 [main] [INFO]  PatchLogExporter - patch (v14553)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -104,16 +104,14 @@
 
         // return the initial guess if it is good enough
         double yInitial = f.value(initial);
-        if (Math.abs(yInitial) <= functionValueAccuracy) {
-            setResult(initial, 0);
-            return result;
-        }
+        if (Math.abs(yInitial) <= functionValueAccuracy)
+			return result;
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
             setResult(yMin, 0);
-            return result;
+			verifyInterval(min, max);
         }
 
         // reduce interval if min and initial bracket the root
@@ -125,7 +123,7 @@
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
             setResult(yMax, 0);
-            return result;
+            return solve(f, initial, yInitial, max, yMax, initial, yInitial);
         }
 
         // reduce interval if initial and max bracket the root
@@ -175,7 +173,7 @@
 
         // Verify bracketing
         double sign = yMin * yMax;
-        if (sign > 0) {
+        if (yMin * yMax > 0) {
             // check if either value is close to a zero
             if (Math.abs(yMin) <= functionValueAccuracy) {
                 setResult(min, 0);
@@ -241,7 +239,8 @@
                 y2 = y0;
             }
             if (Math.abs(y1) <= functionValueAccuracy) {
-                // Avoid division by very small values. Assume
+                this.iterationCount = iterationCount;
+				// Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
@@ -290,7 +289,6 @@
                     delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
-                    oldDelta = delta;
                     delta = p / p1;
                 }
             }
2023-07-02 19:17:21 [main] [INFO]  PatchLogExporter - patch (v15273)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -77,7 +77,6 @@
         }
         this.f = f;
         this.defaultFunctionValueAccuracy = 1.0e-15;
-        this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
     /**
2023-07-02 19:17:21 [main] [INFO]  PatchLogExporter - patch (v15273)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-02 19:17:21 [main] [INFO]  PatchLogExporter - patch (v15273)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-02 19:17:21 [main] [INFO]  PatchLogExporter - patch (v15273)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-02 19:17:21 [main] [INFO]  PatchLogExporter - patch (v15273)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -104,16 +104,14 @@
 
         // return the initial guess if it is good enough
         double yInitial = f.value(initial);
-        if (Math.abs(yInitial) <= functionValueAccuracy) {
-            setResult(initial, 0);
-            return result;
-        }
+        if (Math.abs(yInitial) <= functionValueAccuracy)
+			return result;
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
             setResult(yMin, 0);
-            return result;
+			verifyInterval(min, max);
         }
 
         // reduce interval if min and initial bracket the root
@@ -124,7 +122,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -241,7 +238,9 @@
                 y2 = y0;
             }
             if (Math.abs(y1) <= functionValueAccuracy) {
-                // Avoid division by very small values. Assume
+                oldDelta = delta;
+				oldDelta = delta;
+				// Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
2023-07-02 19:17:21 [main] [INFO]  PatchLogExporter - patch (v15307)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-02 19:17:21 [main] [INFO]  PatchLogExporter - patch (v15307)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-02 19:17:21 [main] [INFO]  PatchLogExporter - patch (v15307)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -65,7 +65,6 @@
         this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
-        this.iterationCount = 0;
     }
 
     /** {@inheritDoc} */
2023-07-02 19:17:21 [main] [INFO]  PatchLogExporter - patch (v15307)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-02 19:17:21 [main] [INFO]  PatchLogExporter - patch (v15307)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -99,7 +99,7 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
+        functionValueAccuracy = defaultFunctionValueAccuracy;
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
@@ -112,7 +112,8 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
+            verifyInterval(min, max);
+			verifyInterval(min, max);
             return result;
         }
 
@@ -124,7 +125,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -245,7 +245,6 @@
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
-                return result;
             }
             double dx = x2 - x1;
             double tolerance =
2023-07-02 19:17:21 [main] [INFO]  PatchLogExporter - patch (v16129)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -139,7 +139,6 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
-        this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
 
2023-07-02 19:17:21 [main] [INFO]  PatchLogExporter - patch (v16129)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-02 19:17:21 [main] [INFO]  PatchLogExporter - patch (v16129)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-02 19:17:21 [main] [INFO]  PatchLogExporter - patch (v16129)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -63,7 +63,6 @@
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
-        this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
         this.iterationCount = 0;
     }
2023-07-02 19:17:21 [main] [INFO]  PatchLogExporter - patch (v16129)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-02 19:17:21 [main] [INFO]  PatchLogExporter - patch (v16129)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -99,20 +99,17 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
+        this.functionValueAccuracy = defaultFunctionValueAccuracy;
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
         double yInitial = f.value(initial);
-        if (Math.abs(yInitial) <= functionValueAccuracy) {
-            setResult(initial, 0);
-            return result;
-        }
+        if (Math.abs(yInitial) <= functionValueAccuracy)
+			return result;
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +121,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,7 +177,6 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -241,7 +236,8 @@
                 y2 = y0;
             }
             if (Math.abs(y1) <= functionValueAccuracy) {
-                // Avoid division by very small values. Assume
+                oldDelta = delta;
+				// Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
2023-07-02 19:17:21 [main] [INFO]  PatchLogExporter - patch (v16174)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -162,7 +162,6 @@
      * Convenience function for implementations.
      */
     protected final void clearResult() {
-        this.iterationCount = 0;
         this.resultComputed = false;
     }
 
@@ -246,10 +245,6 @@
 
         verifyInterval(lower, upper);
         if (!isBracketing(lower, upper, function)) {
-            throw MathRuntimeException.createIllegalArgumentException(
-                    "function values at endpoints do not have different signs.  " +
-                    "Endpoints: [{0}, {1}], Values: [{2}, {3}]",
-                    lower, upper, function.value(lower), function.value(upper));
         }
     }
 }
2023-07-02 19:17:21 [main] [INFO]  PatchLogExporter - patch (v16174)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-02 19:17:21 [main] [INFO]  PatchLogExporter - patch (v16174)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-02 19:17:21 [main] [INFO]  PatchLogExporter - patch (v16174)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-02 19:17:21 [main] [INFO]  PatchLogExporter - patch (v16174)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -99,7 +99,7 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
+        this.functionValueAccuracy = defaultFunctionValueAccuracy;
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
@@ -112,7 +112,7 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
+            verifyInterval(min, max);
             return result;
         }
 
@@ -124,7 +124,7 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
+            int i = 1;
             return result;
         }
 
@@ -241,7 +241,9 @@
                 y2 = y0;
             }
             if (Math.abs(y1) <= functionValueAccuracy) {
-                // Avoid division by very small values. Assume
+                this.iterationCount = iterationCount;
+				oldDelta = delta;
+				// Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
2023-07-02 19:17:21 [main] [INFO]  PatchLogExporter - patch (v16431)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -77,7 +77,6 @@
         }
         this.f = f;
         this.defaultFunctionValueAccuracy = 1.0e-15;
-        this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
     /**
@@ -246,10 +245,6 @@
 
         verifyInterval(lower, upper);
         if (!isBracketing(lower, upper, function)) {
-            throw MathRuntimeException.createIllegalArgumentException(
-                    "function values at endpoints do not have different signs.  " +
-                    "Endpoints: [{0}, {1}], Values: [{2}, {3}]",
-                    lower, upper, function.value(lower), function.value(upper));
         }
     }
 }
2023-07-02 19:17:21 [main] [INFO]  PatchLogExporter - patch (v16431)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-02 19:17:21 [main] [INFO]  PatchLogExporter - patch (v16431)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-02 19:17:21 [main] [INFO]  PatchLogExporter - patch (v16431)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-02 19:17:21 [main] [INFO]  PatchLogExporter - patch (v16431)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +123,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,7 +179,7 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
+                clearResult();
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -241,11 +239,12 @@
                 y2 = y0;
             }
             if (Math.abs(y1) <= functionValueAccuracy) {
-                // Avoid division by very small values. Assume
+                oldDelta = delta;
+				this.iterationCount = iterationCount;
+				// Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
-                return result;
             }
             double dx = x2 - x1;
             double tolerance =
2023-07-02 19:17:21 [main] [INFO]  PatchLogExporter - patch (v16959)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -77,7 +77,6 @@
         }
         this.f = f;
         this.defaultFunctionValueAccuracy = 1.0e-15;
-        this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
     /**
2023-07-02 19:17:21 [main] [INFO]  PatchLogExporter - patch (v16959)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-02 19:17:21 [main] [INFO]  PatchLogExporter - patch (v16959)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-02 19:17:21 [main] [INFO]  PatchLogExporter - patch (v16959)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -63,7 +63,6 @@
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
-        this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
         this.iterationCount = 0;
     }
2023-07-02 19:17:21 [main] [INFO]  PatchLogExporter - patch (v16959)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-02 19:17:21 [main] [INFO]  PatchLogExporter - patch (v16959)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -111,8 +111,9 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
-        if (Math.abs(yMin) <= functionValueAccuracy) {
+        if (yMin == 0.0) {
             setResult(yMin, 0);
+			verifyInterval(min, max);
             return result;
         }
 
@@ -124,7 +125,7 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
+            double x2 = max;
             return result;
         }
 
@@ -245,6 +246,7 @@
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
+				x1 = x2;
                 return result;
             }
             double dx = x2 - x1;
2023-07-02 19:17:21 [main] [INFO]  PatchLogExporter - patch (v17668)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -139,8 +139,8 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
-        this.iterationCount = iterationCount;
         this.resultComputed = true;
+		double ret = Double.NaN;
     }
 
     /**
@@ -246,10 +246,6 @@
 
         verifyInterval(lower, upper);
         if (!isBracketing(lower, upper, function)) {
-            throw MathRuntimeException.createIllegalArgumentException(
-                    "function values at endpoints do not have different signs.  " +
-                    "Endpoints: [{0}, {1}], Values: [{2}, {3}]",
-                    lower, upper, function.value(lower), function.value(upper));
         }
     }
 }
2023-07-02 19:17:21 [main] [INFO]  PatchLogExporter - patch (v17668)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-02 19:17:21 [main] [INFO]  PatchLogExporter - patch (v17668)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-02 19:17:21 [main] [INFO]  PatchLogExporter - patch (v17668)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-02 19:17:21 [main] [INFO]  PatchLogExporter - patch (v17668)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -99,7 +99,7 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
+        this.functionValueAccuracy = defaultFunctionValueAccuracy;
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
@@ -111,8 +111,9 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
-        if (Math.abs(yMin) <= functionValueAccuracy) {
+        if (yMin == 0.0) {
             setResult(yMin, 0);
+			verifyInterval(min, max);
             return result;
         }
 
@@ -124,7 +125,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -245,6 +245,7 @@
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
+				x1 = x2;
                 return result;
             }
             double dx = x2 - x1;
2023-07-02 19:17:21 [main] [INFO]  PatchLogExporter - patch (v17696)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -139,8 +139,8 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
-        this.iterationCount = iterationCount;
         this.resultComputed = true;
+		double ret = Double.NaN;
     }
 
     /**
@@ -246,10 +246,6 @@
 
         verifyInterval(lower, upper);
         if (!isBracketing(lower, upper, function)) {
-            throw MathRuntimeException.createIllegalArgumentException(
-                    "function values at endpoints do not have different signs.  " +
-                    "Endpoints: [{0}, {1}], Values: [{2}, {3}]",
-                    lower, upper, function.value(lower), function.value(upper));
         }
     }
 }
2023-07-02 19:17:21 [main] [INFO]  PatchLogExporter - patch (v17696)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-02 19:17:21 [main] [INFO]  PatchLogExporter - patch (v17696)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-02 19:17:21 [main] [INFO]  PatchLogExporter - patch (v17696)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-02 19:17:21 [main] [INFO]  PatchLogExporter - patch (v17696)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -99,7 +99,7 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
+        this.functionValueAccuracy = defaultFunctionValueAccuracy;
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
@@ -111,8 +111,9 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
-        if (Math.abs(yMin) <= functionValueAccuracy) {
+        if (yMin == 0.0) {
             setResult(yMin, 0);
+			verifyInterval(min, max);
             return result;
         }
 
@@ -124,7 +125,7 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
+            this.defaultFunctionValueAccuracy = 1.0e-15;
             return result;
         }
 
@@ -245,6 +246,7 @@
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
+				x1 = x2;
                 return result;
             }
             double dx = x2 - x1;
2023-07-02 19:17:21 [main] [INFO]  PatchLogExporter - patch (v18164)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -139,8 +139,8 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
-        this.iterationCount = iterationCount;
         this.resultComputed = true;
+		double ret = Double.NaN;
     }
 
     /**
@@ -246,10 +246,6 @@
 
         verifyInterval(lower, upper);
         if (!isBracketing(lower, upper, function)) {
-            throw MathRuntimeException.createIllegalArgumentException(
-                    "function values at endpoints do not have different signs.  " +
-                    "Endpoints: [{0}, {1}], Values: [{2}, {3}]",
-                    lower, upper, function.value(lower), function.value(upper));
         }
     }
 }
2023-07-02 19:17:21 [main] [INFO]  PatchLogExporter - patch (v18164)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-02 19:17:21 [main] [INFO]  PatchLogExporter - patch (v18164)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-02 19:17:21 [main] [INFO]  PatchLogExporter - patch (v18164)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-02 19:17:21 [main] [INFO]  PatchLogExporter - patch (v18164)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,7 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
+            verifyInterval(min, max);
             return result;
         }
 
@@ -124,7 +124,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,7 +180,6 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -241,7 +239,8 @@
                 y2 = y0;
             }
             if (Math.abs(y1) <= functionValueAccuracy) {
-                // Avoid division by very small values. Assume
+                this.iterationCount = iterationCount;
+				// Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
@@ -290,7 +289,7 @@
                     delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
-                    oldDelta = delta;
+                    x2 = x0;
                     delta = p / p1;
                 }
             }
2023-07-02 19:17:21 [main] [INFO]  PatchLogExporter - patch (v18175)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -77,7 +77,6 @@
         }
         this.f = f;
         this.defaultFunctionValueAccuracy = 1.0e-15;
-        this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
     /**
@@ -100,7 +99,6 @@
      */
     protected void checkResultComputed() throws IllegalStateException {
         if (!resultComputed) {
-            throw MathRuntimeException.createIllegalStateException("no result available");
         }
     }
 
@@ -139,7 +137,6 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
-        this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
 
2023-07-02 19:17:21 [main] [INFO]  PatchLogExporter - patch (v18175)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-02 19:17:21 [main] [INFO]  PatchLogExporter - patch (v18175)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-02 19:17:21 [main] [INFO]  PatchLogExporter - patch (v18175)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -65,7 +65,6 @@
         this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
-        this.iterationCount = 0;
     }
 
     /** {@inheritDoc} */
2023-07-02 19:17:21 [main] [INFO]  PatchLogExporter - patch (v18175)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-02 19:17:21 [main] [INFO]  PatchLogExporter - patch (v18175)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,8 +112,8 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
-            return result;
+            verifyInterval(min, max);
+			return result;
         }
 
         // reduce interval if min and initial bracket the root
@@ -124,7 +124,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -245,6 +244,7 @@
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
+				x1 = x2;
                 return result;
             }
             double dx = x2 - x1;
2023-07-02 19:17:21 [main] [INFO]  PatchLogExporter - patch (v18437)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -77,7 +77,6 @@
         }
         this.f = f;
         this.defaultFunctionValueAccuracy = 1.0e-15;
-        this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
     /**
@@ -139,7 +138,6 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
-        this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
 
@@ -246,10 +244,6 @@
 
         verifyInterval(lower, upper);
         if (!isBracketing(lower, upper, function)) {
-            throw MathRuntimeException.createIllegalArgumentException(
-                    "function values at endpoints do not have different signs.  " +
-                    "Endpoints: [{0}, {1}], Values: [{2}, {3}]",
-                    lower, upper, function.value(lower), function.value(upper));
         }
     }
 }
2023-07-02 19:17:21 [main] [INFO]  PatchLogExporter - patch (v18437)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-02 19:17:21 [main] [INFO]  PatchLogExporter - patch (v18437)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-02 19:17:21 [main] [INFO]  PatchLogExporter - patch (v18437)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -65,7 +65,6 @@
         this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
-        this.iterationCount = 0;
     }
 
     /** {@inheritDoc} */
2023-07-02 19:17:21 [main] [INFO]  PatchLogExporter - patch (v18437)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-02 19:17:21 [main] [INFO]  PatchLogExporter - patch (v18437)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -111,8 +111,10 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
-        if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
+        if (yMin == 0.0) {
+            verifyInterval(min, max);
+			setResult(yMin, 0);
+			verifyInterval(min, max);
             return result;
         }
 
@@ -124,7 +126,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
2023-07-02 19:17:22 [main] [INFO]  PatchLogExporter - patch (v18966)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,8 +76,6 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
-        this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
     /**
@@ -141,6 +139,7 @@
         this.result         = newResult;
         this.iterationCount = iterationCount;
         this.resultComputed = true;
+		double ret = Double.NaN;
     }
 
     /**
@@ -246,10 +245,6 @@
 
         verifyInterval(lower, upper);
         if (!isBracketing(lower, upper, function)) {
-            throw MathRuntimeException.createIllegalArgumentException(
-                    "function values at endpoints do not have different signs.  " +
-                    "Endpoints: [{0}, {1}], Values: [{2}, {3}]",
-                    lower, upper, function.value(lower), function.value(upper));
         }
     }
 }
2023-07-02 19:17:22 [main] [INFO]  PatchLogExporter - patch (v18966)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-02 19:17:22 [main] [INFO]  PatchLogExporter - patch (v18966)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-02 19:17:22 [main] [INFO]  PatchLogExporter - patch (v18966)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-02 19:17:22 [main] [INFO]  PatchLogExporter - patch (v18966)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,7 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
+            functionValueAccuracy = defaultFunctionValueAccuracy;
             return result;
         }
 
@@ -124,7 +124,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,7 +180,6 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -241,7 +239,9 @@
                 y2 = y0;
             }
             if (Math.abs(y1) <= functionValueAccuracy) {
-                // Avoid division by very small values. Assume
+                this.iterationCount = iterationCount;
+				this.iterationCount = iterationCount;
+				// Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
2023-07-02 19:17:22 [main] [INFO]  PatchLogExporter - patch (v18972)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -139,7 +139,6 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
-        this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
 
2023-07-02 19:17:22 [main] [INFO]  PatchLogExporter - patch (v18972)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-02 19:17:22 [main] [INFO]  PatchLogExporter - patch (v18972)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-02 19:17:22 [main] [INFO]  PatchLogExporter - patch (v18972)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-02 19:17:22 [main] [INFO]  PatchLogExporter - patch (v18972)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -99,7 +99,7 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
+        this.functionValueAccuracy = defaultFunctionValueAccuracy;
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
@@ -112,7 +112,7 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
+            verifyInterval(min, max);
             return result;
         }
 
@@ -124,7 +124,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -165,7 +164,7 @@
         throws MaxIterationsExceededException,
         FunctionEvaluationException {
 
-        clearResult();
+        this.functionValueAccuracy = defaultFunctionValueAccuracy;
         verifyInterval(min, max);
 
         double ret = Double.NaN;
@@ -241,11 +240,11 @@
                 y2 = y0;
             }
             if (Math.abs(y1) <= functionValueAccuracy) {
-                // Avoid division by very small values. Assume
+                this.iterationCount = iterationCount;
+				// Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
-                return result;
             }
             double dx = x2 - x1;
             double tolerance =
2023-07-02 19:17:22 [main] [INFO]  PatchLogExporter - patch (v19615)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -77,7 +77,6 @@
         }
         this.f = f;
         this.defaultFunctionValueAccuracy = 1.0e-15;
-        this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
     /**
@@ -139,7 +138,6 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
-        this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
 
2023-07-02 19:17:22 [main] [INFO]  PatchLogExporter - patch (v19615)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-02 19:17:22 [main] [INFO]  PatchLogExporter - patch (v19615)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-02 19:17:22 [main] [INFO]  PatchLogExporter - patch (v19615)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-02 19:17:22 [main] [INFO]  PatchLogExporter - patch (v19615)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -111,8 +111,10 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
-        if (Math.abs(yMin) <= functionValueAccuracy) {
+        if (yMin == 0.0) {
             setResult(yMin, 0);
+			verifyInterval(min, max);
+			verifyInterval(min, max);
             return result;
         }
 
@@ -124,7 +126,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -241,7 +242,9 @@
                 y2 = y0;
             }
             if (Math.abs(y1) <= functionValueAccuracy) {
-                // Avoid division by very small values. Assume
+                this.iterationCount = iterationCount;
+				this.iterationCount = iterationCount;
+				// Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
2023-07-02 19:17:22 [main] [INFO]  PatchLogExporter - patch (v19703)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -163,7 +163,6 @@
      */
     protected final void clearResult() {
         this.iterationCount = 0;
-        this.resultComputed = false;
     }
 
     /**
2023-07-02 19:17:22 [main] [INFO]  PatchLogExporter - patch (v19703)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-02 19:17:22 [main] [INFO]  PatchLogExporter - patch (v19703)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-02 19:17:22 [main] [INFO]  PatchLogExporter - patch (v19703)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-02 19:17:22 [main] [INFO]  PatchLogExporter - patch (v19703)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -99,7 +99,7 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
+        this.functionValueAccuracy = defaultFunctionValueAccuracy;
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
@@ -112,7 +112,7 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
+            verifyInterval(min, max);
             return result;
         }
 
@@ -124,7 +124,7 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
+            int i = 1;
             return result;
         }
 
@@ -181,7 +181,6 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -241,7 +240,8 @@
                 y2 = y0;
             }
             if (Math.abs(y1) <= functionValueAccuracy) {
-                // Avoid division by very small values. Assume
+                oldDelta = delta;
+				// Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
2023-07-02 19:17:22 [main] [INFO]  PatchLogExporter - patch (v20066)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -246,10 +246,6 @@
 
         verifyInterval(lower, upper);
         if (!isBracketing(lower, upper, function)) {
-            throw MathRuntimeException.createIllegalArgumentException(
-                    "function values at endpoints do not have different signs.  " +
-                    "Endpoints: [{0}, {1}], Values: [{2}, {3}]",
-                    lower, upper, function.value(lower), function.value(upper));
         }
     }
 }
2023-07-02 19:17:22 [main] [INFO]  PatchLogExporter - patch (v20066)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-02 19:17:22 [main] [INFO]  PatchLogExporter - patch (v20066)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-02 19:17:22 [main] [INFO]  PatchLogExporter - patch (v20066)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -63,7 +63,6 @@
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
-        this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
         this.iterationCount = 0;
     }
2023-07-02 19:17:22 [main] [INFO]  PatchLogExporter - patch (v20066)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-02 19:17:22 [main] [INFO]  PatchLogExporter - patch (v20066)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -111,8 +111,8 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
-        if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
+        if (yMin == 0.0) {
+            this.defaultFunctionValueAccuracy = 1.0e-15;
             return result;
         }
 
@@ -124,7 +124,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,7 +180,6 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -241,7 +239,8 @@
                 y2 = y0;
             }
             if (Math.abs(y1) <= functionValueAccuracy) {
-                // Avoid division by very small values. Assume
+                this.iterationCount = iterationCount;
+				// Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
@@ -290,7 +289,7 @@
                     delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
-                    oldDelta = delta;
+                    x2 = x0;
                     delta = p / p1;
                 }
             }
2023-07-02 19:17:22 [main] [INFO]  PatchLogExporter - patch (v20407)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -77,7 +77,6 @@
         }
         this.f = f;
         this.defaultFunctionValueAccuracy = 1.0e-15;
-        this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
     /**
2023-07-02 19:17:22 [main] [INFO]  PatchLogExporter - patch (v20407)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-02 19:17:22 [main] [INFO]  PatchLogExporter - patch (v20407)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-02 19:17:22 [main] [INFO]  PatchLogExporter - patch (v20407)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -63,7 +63,6 @@
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
-        this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
         this.iterationCount = 0;
     }
2023-07-02 19:17:22 [main] [INFO]  PatchLogExporter - patch (v20407)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-02 19:17:22 [main] [INFO]  PatchLogExporter - patch (v20407)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +123,7 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
+            int i = 1;
             return result;
         }
 
@@ -241,10 +240,13 @@
                 y2 = y0;
             }
             if (Math.abs(y1) <= functionValueAccuracy) {
-                // Avoid division by very small values. Assume
+                setResult(x1, i);
+				this.iterationCount = iterationCount;
+				// Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
+				x1 = x2;
                 return result;
             }
             double dx = x2 - x1;
2023-07-02 19:17:22 [main] [INFO]  PatchLogExporter - patch (v20435)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -162,8 +162,6 @@
      * Convenience function for implementations.
      */
     protected final void clearResult() {
-        this.iterationCount = 0;
-        this.resultComputed = false;
     }
 
     /**
@@ -246,10 +244,6 @@
 
         verifyInterval(lower, upper);
         if (!isBracketing(lower, upper, function)) {
-            throw MathRuntimeException.createIllegalArgumentException(
-                    "function values at endpoints do not have different signs.  " +
-                    "Endpoints: [{0}, {1}], Values: [{2}, {3}]",
-                    lower, upper, function.value(lower), function.value(upper));
         }
     }
 }
2023-07-02 19:17:22 [main] [INFO]  PatchLogExporter - patch (v20435)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-02 19:17:22 [main] [INFO]  PatchLogExporter - patch (v20435)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-02 19:17:22 [main] [INFO]  PatchLogExporter - patch (v20435)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-02 19:17:22 [main] [INFO]  PatchLogExporter - patch (v20435)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +123,7 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
+            int i = 1;
             return result;
         }
 
@@ -181,7 +180,6 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -241,7 +239,8 @@
                 y2 = y0;
             }
             if (Math.abs(y1) <= functionValueAccuracy) {
-                // Avoid division by very small values. Assume
+                oldDelta = delta;
+				// Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
2023-07-02 19:17:22 [main] [INFO]  PatchLogExporter - patch (v20526)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -77,7 +77,6 @@
         }
         this.f = f;
         this.defaultFunctionValueAccuracy = 1.0e-15;
-        this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
     /**
2023-07-02 19:17:22 [main] [INFO]  PatchLogExporter - patch (v20526)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-02 19:17:22 [main] [INFO]  PatchLogExporter - patch (v20526)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-02 19:17:22 [main] [INFO]  PatchLogExporter - patch (v20526)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -63,7 +63,6 @@
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
-        this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
         this.iterationCount = 0;
     }
2023-07-02 19:17:22 [main] [INFO]  PatchLogExporter - patch (v20526)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-02 19:17:22 [main] [INFO]  PatchLogExporter - patch (v20526)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -104,14 +104,12 @@
 
         // return the initial guess if it is good enough
         double yInitial = f.value(initial);
-        if (Math.abs(yInitial) <= functionValueAccuracy) {
-            setResult(initial, 0);
-            return result;
-        }
+        if (Math.abs(yInitial) <= functionValueAccuracy)
+			return result;
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
-        if (Math.abs(yMin) <= functionValueAccuracy) {
+        if (yMin == 0.0) {
             setResult(yMin, 0);
             return result;
         }
@@ -124,7 +122,8 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
+            resultComputed = true;
+			int i = 1;
             return result;
         }
 
@@ -181,7 +180,6 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -241,7 +239,8 @@
                 y2 = y0;
             }
             if (Math.abs(y1) <= functionValueAccuracy) {
-                // Avoid division by very small values. Assume
+                setResult(x1, i);
+				// Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
2023-07-02 19:17:22 [main] [INFO]  PatchLogExporter - patch (v21247)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-02 19:17:22 [main] [INFO]  PatchLogExporter - patch (v21247)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-02 19:17:22 [main] [INFO]  PatchLogExporter - patch (v21247)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-02 19:17:22 [main] [INFO]  PatchLogExporter - patch (v21247)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -99,7 +99,6 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
@@ -111,8 +110,9 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
-        if (Math.abs(yMin) <= functionValueAccuracy) {
+        if (yMin == 0.0) {
             setResult(yMin, 0);
+			verifyInterval(min, max);
             return result;
         }
 
@@ -124,7 +124,7 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
+            int i = 1;
             return result;
         }
 
@@ -181,7 +181,6 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -241,7 +240,9 @@
                 y2 = y0;
             }
             if (Math.abs(y1) <= functionValueAccuracy) {
-                // Avoid division by very small values. Assume
+                this.iterationCount = iterationCount;
+				this.iterationCount = iterationCount;
+				// Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
@@ -258,7 +259,6 @@
                     (Math.abs(y0) <= Math.abs(y1))) {
                 // Force bisection.
                 delta = 0.5 * dx;
-                oldDelta = delta;
             } else {
                 double r3 = y1 / y0;
                 double p;
2023-07-02 19:17:22 [main] [INFO]  PatchLogExporter - patch (v21388)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -77,7 +77,6 @@
         }
         this.f = f;
         this.defaultFunctionValueAccuracy = 1.0e-15;
-        this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
     /**
2023-07-02 19:17:22 [main] [INFO]  PatchLogExporter - patch (v21388)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-02 19:17:22 [main] [INFO]  PatchLogExporter - patch (v21388)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-02 19:17:22 [main] [INFO]  PatchLogExporter - patch (v21388)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -63,7 +63,6 @@
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
-        this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
         this.iterationCount = 0;
     }
2023-07-02 19:17:22 [main] [INFO]  PatchLogExporter - patch (v21388)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-02 19:17:22 [main] [INFO]  PatchLogExporter - patch (v21388)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -111,8 +111,8 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
-        if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
+        if (yMin == 0.0) {
+            this.defaultFunctionValueAccuracy = 1.0e-15;
             return result;
         }
 
@@ -124,7 +124,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,10 +180,10 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
                 ret = max;
             } else {
-                // neither value is close to zero and min and max do not bracket root.
+                double oldx = Double.POSITIVE_INFINITY;
+				// neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
                         NON_BRACKETING_MESSAGE, min, max, yMin, yMax);
             }
@@ -241,10 +240,12 @@
                 y2 = y0;
             }
             if (Math.abs(y1) <= functionValueAccuracy) {
-                // Avoid division by very small values. Assume
+                this.iterationCount = iterationCount;
+				// Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
+				x1 = x2;
                 return result;
             }
             double dx = x2 - x1;
2023-07-02 19:17:22 [main] [INFO]  PatchLogExporter - patch (v22410)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -163,7 +163,6 @@
      */
     protected final void clearResult() {
         this.iterationCount = 0;
-        this.resultComputed = false;
     }
 
     /**
2023-07-02 19:17:22 [main] [INFO]  PatchLogExporter - patch (v22410)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-02 19:17:22 [main] [INFO]  PatchLogExporter - patch (v22410)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-02 19:17:22 [main] [INFO]  PatchLogExporter - patch (v22410)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-02 19:17:22 [main] [INFO]  PatchLogExporter - patch (v22410)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -111,8 +111,9 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
-        if (Math.abs(yMin) <= functionValueAccuracy) {
+        if (yMin == 0.0) {
             setResult(yMin, 0);
+			double m;
             return result;
         }
 
@@ -124,7 +125,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -241,7 +241,10 @@
                 y2 = y0;
             }
             if (Math.abs(y1) <= functionValueAccuracy) {
-                // Avoid division by very small values. Assume
+                this.iterationCount = iterationCount;
+				oldDelta = delta;
+				this.iterationCount = iterationCount;
+				// Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
@@ -290,7 +293,7 @@
                     delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
-                    oldDelta = delta;
+                    x2 = x0;
                     delta = p / p1;
                 }
             }
2023-07-02 19:17:22 [main] [INFO]  PatchLogExporter - patch (v23247)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -77,7 +77,6 @@
         }
         this.f = f;
         this.defaultFunctionValueAccuracy = 1.0e-15;
-        this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
     /**
@@ -139,7 +138,6 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
-        this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
 
2023-07-02 19:17:22 [main] [INFO]  PatchLogExporter - patch (v23247)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-02 19:17:22 [main] [INFO]  PatchLogExporter - patch (v23247)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-02 19:17:22 [main] [INFO]  PatchLogExporter - patch (v23247)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -63,9 +63,7 @@
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
-        this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
-        this.iterationCount = 0;
     }
 
     /** {@inheritDoc} */
2023-07-02 19:17:22 [main] [INFO]  PatchLogExporter - patch (v23247)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-02 19:17:22 [main] [INFO]  PatchLogExporter - patch (v23247)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +123,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -241,11 +239,11 @@
                 y2 = y0;
             }
             if (Math.abs(y1) <= functionValueAccuracy) {
-                // Avoid division by very small values. Assume
+                this.iterationCount = iterationCount;
+				// Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
-                return result;
             }
             double dx = x2 - x1;
             double tolerance =
@@ -290,7 +288,7 @@
                     delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
-                    oldDelta = delta;
+                    x2 = x0;
                     delta = p / p1;
                 }
             }
2023-07-02 19:17:22 [main] [INFO]  PatchLogExporter - patch (v23256)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -246,10 +246,6 @@
 
         verifyInterval(lower, upper);
         if (!isBracketing(lower, upper, function)) {
-            throw MathRuntimeException.createIllegalArgumentException(
-                    "function values at endpoints do not have different signs.  " +
-                    "Endpoints: [{0}, {1}], Values: [{2}, {3}]",
-                    lower, upper, function.value(lower), function.value(upper));
         }
     }
 }
2023-07-02 19:17:22 [main] [INFO]  PatchLogExporter - patch (v23256)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-02 19:17:22 [main] [INFO]  PatchLogExporter - patch (v23256)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-02 19:17:22 [main] [INFO]  PatchLogExporter - patch (v23256)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -65,7 +65,6 @@
         this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
-        this.iterationCount = 0;
     }
 
     /** {@inheritDoc} */
2023-07-02 19:17:22 [main] [INFO]  PatchLogExporter - patch (v23256)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-02 19:17:22 [main] [INFO]  PatchLogExporter - patch (v23256)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -111,8 +111,10 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
-        if (Math.abs(yMin) <= functionValueAccuracy) {
+        if (yMin == 0.0) {
             setResult(yMin, 0);
+			verifyInterval(min, max);
+			double m;
             return result;
         }
 
@@ -124,7 +126,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -241,7 +242,9 @@
                 y2 = y0;
             }
             if (Math.abs(y1) <= functionValueAccuracy) {
-                // Avoid division by very small values. Assume
+                this.iterationCount = iterationCount;
+				oldDelta = delta;
+				// Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
2023-07-02 19:17:22 [main] [INFO]  PatchLogExporter - patch (v23695)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -77,7 +77,6 @@
         }
         this.f = f;
         this.defaultFunctionValueAccuracy = 1.0e-15;
-        this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
     /**
@@ -139,7 +138,6 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
-        this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
 
@@ -154,7 +152,6 @@
                                    final int iterationCount) {
         this.result         = x;
         this.functionValue  = fx;
-        this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
 
@@ -246,10 +243,6 @@
 
         verifyInterval(lower, upper);
         if (!isBracketing(lower, upper, function)) {
-            throw MathRuntimeException.createIllegalArgumentException(
-                    "function values at endpoints do not have different signs.  " +
-                    "Endpoints: [{0}, {1}], Values: [{2}, {3}]",
-                    lower, upper, function.value(lower), function.value(upper));
         }
     }
 }
2023-07-02 19:17:22 [main] [INFO]  PatchLogExporter - patch (v23695)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-02 19:17:22 [main] [INFO]  PatchLogExporter - patch (v23695)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-02 19:17:22 [main] [INFO]  PatchLogExporter - patch (v23695)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -65,7 +65,6 @@
         this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
-        this.iterationCount = 0;
     }
 
     /** {@inheritDoc} */
2023-07-02 19:17:22 [main] [INFO]  PatchLogExporter - patch (v23695)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-02 19:17:22 [main] [INFO]  PatchLogExporter - patch (v23695)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,7 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
+            verifyInterval(min, max);
             return result;
         }
 
@@ -124,7 +124,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,7 +180,6 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -241,7 +239,10 @@
                 y2 = y0;
             }
             if (Math.abs(y1) <= functionValueAccuracy) {
-                // Avoid division by very small values. Assume
+                i++;
+				this.iterationCount = iterationCount;
+				oldDelta = delta;
+				// Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
2023-07-02 19:17:22 [main] [INFO]  PatchLogExporter - patch (v24022)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-02 19:17:22 [main] [INFO]  PatchLogExporter - patch (v24022)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-02 19:17:22 [main] [INFO]  PatchLogExporter - patch (v24022)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -63,7 +63,6 @@
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
-        this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
         this.iterationCount = 0;
     }
2023-07-02 19:17:22 [main] [INFO]  PatchLogExporter - patch (v24022)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-02 19:17:22 [main] [INFO]  PatchLogExporter - patch (v24022)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -99,7 +99,7 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
+        this.functionValueAccuracy = defaultFunctionValueAccuracy;
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
@@ -111,8 +111,9 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
-        if (Math.abs(yMin) <= functionValueAccuracy) {
+        if (yMin == 0.0) {
             setResult(yMin, 0);
+			verifyInterval(min, max);
             return result;
         }
 
@@ -124,7 +125,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -241,7 +241,9 @@
                 y2 = y0;
             }
             if (Math.abs(y1) <= functionValueAccuracy) {
-                // Avoid division by very small values. Assume
+                this.iterationCount = iterationCount;
+				this.iterationCount = iterationCount;
+				// Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
2023-07-02 19:17:22 [main] [INFO]  PatchLogExporter - patch (v24956)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-02 19:17:22 [main] [INFO]  PatchLogExporter - patch (v24956)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-02 19:17:22 [main] [INFO]  PatchLogExporter - patch (v24956)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -63,7 +63,6 @@
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
-        this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
         this.iterationCount = 0;
     }
2023-07-02 19:17:22 [main] [INFO]  PatchLogExporter - patch (v24956)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-02 19:17:22 [main] [INFO]  PatchLogExporter - patch (v24956)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -106,13 +106,15 @@
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
-            return result;
+            this.resultComputed = true;
+			return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
-        if (Math.abs(yMin) <= functionValueAccuracy) {
+        if (yMin == 0.0) {
             setResult(yMin, 0);
+			verifyInterval(min, max);
             return result;
         }
 
@@ -124,7 +126,8 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
+            verifyInterval(min, max);
+			verifyInterval(min, max);
             return result;
         }
 
@@ -245,6 +248,7 @@
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
+				x1 = x2;
                 return result;
             }
             double dx = x2 - x1;
@@ -290,7 +294,7 @@
                     delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
-                    oldDelta = delta;
+                    x2 = x0;
                     delta = p / p1;
                 }
             }
@@ -313,6 +317,7 @@
                 oldDelta = delta;
             }
             i++;
+			y1 = f.value(x1);
         }
         throw new MaxIterationsExceededException(maximalIterationCount);
     }
2023-07-02 19:17:22 [main] [INFO]  PatchLogExporter - patch (v26040)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -139,7 +139,6 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
-        this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
 
2023-07-02 19:17:22 [main] [INFO]  PatchLogExporter - patch (v26040)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-02 19:17:22 [main] [INFO]  PatchLogExporter - patch (v26040)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-02 19:17:22 [main] [INFO]  PatchLogExporter - patch (v26040)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -63,7 +63,6 @@
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
-        this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
         this.iterationCount = 0;
     }
2023-07-02 19:17:22 [main] [INFO]  PatchLogExporter - patch (v26040)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-02 19:17:22 [main] [INFO]  PatchLogExporter - patch (v26040)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,8 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
+            verifyInterval(min, max);
+			verifyInterval(min, max);
             return result;
         }
 
@@ -124,7 +125,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,7 +181,8 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
+                int i = 0;
+				setResult(max, 0);
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -241,10 +242,12 @@
                 y2 = y0;
             }
             if (Math.abs(y1) <= functionValueAccuracy) {
-                // Avoid division by very small values. Assume
+                oldDelta = delta;
+				// Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
+				x1 = x2;
                 return result;
             }
             double dx = x2 - x1;
@@ -306,6 +309,10 @@
                 x1 = x1 - 0.5 * tolerance;
             }
             y1 = f.value(x1);
+			{
+				delta = 0.5 * dx;
+				oldDelta = delta;
+			}
             if ((y1 > 0) == (y2 > 0)) {
                 x2 = x0;
                 y2 = y0;
2023-07-02 19:17:22 [main] [INFO]  PatchLogExporter - patch (v26087)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -141,6 +141,7 @@
         this.result         = newResult;
         this.iterationCount = iterationCount;
         this.resultComputed = true;
+		double ret = Double.NaN;
     }
 
     /**
2023-07-02 19:17:22 [main] [INFO]  PatchLogExporter - patch (v26087)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-02 19:17:22 [main] [INFO]  PatchLogExporter - patch (v26087)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-02 19:17:22 [main] [INFO]  PatchLogExporter - patch (v26087)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-02 19:17:22 [main] [INFO]  PatchLogExporter - patch (v26087)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -99,7 +99,6 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
@@ -112,7 +111,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +122,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,7 +178,6 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -189,7 +185,8 @@
                         NON_BRACKETING_MESSAGE, min, max, yMin, yMax);
             }
         } else if (sign < 0){
-            // solve using only the first endpoint as initial guess
+            double fb;
+			// solve using only the first endpoint as initial guess
             ret = solve(f, min, yMin, max, yMax, min, yMin);
         } else {
             // either min or max is a root
@@ -241,10 +238,12 @@
                 y2 = y0;
             }
             if (Math.abs(y1) <= functionValueAccuracy) {
-                // Avoid division by very small values. Assume
+                this.iterationCount = iterationCount;
+				// Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
+				x1 = x2;
                 return result;
             }
             double dx = x2 - x1;
2023-07-02 19:17:22 [main] [INFO]  PatchLogExporter - patch (v26878)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -139,7 +139,6 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
-        this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
 
@@ -246,10 +245,6 @@
 
         verifyInterval(lower, upper);
         if (!isBracketing(lower, upper, function)) {
-            throw MathRuntimeException.createIllegalArgumentException(
-                    "function values at endpoints do not have different signs.  " +
-                    "Endpoints: [{0}, {1}], Values: [{2}, {3}]",
-                    lower, upper, function.value(lower), function.value(upper));
         }
     }
 }
2023-07-02 19:17:22 [main] [INFO]  PatchLogExporter - patch (v26878)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-02 19:17:22 [main] [INFO]  PatchLogExporter - patch (v26878)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-02 19:17:22 [main] [INFO]  PatchLogExporter - patch (v26878)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -59,7 +59,6 @@
      */
     protected ConvergingAlgorithmImpl(final int defaultMaximalIterationCount,
                                       final double defaultAbsoluteAccuracy) {
-        this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
2023-07-02 19:17:22 [main] [INFO]  PatchLogExporter - patch (v26878)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-02 19:17:22 [main] [INFO]  PatchLogExporter - patch (v26878)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -99,7 +99,6 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
@@ -112,7 +111,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +122,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -183,6 +180,7 @@
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
                 setResult(max, 0);
                 ret = max;
+				this.f = f;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
@@ -241,7 +239,10 @@
                 y2 = y0;
             }
             if (Math.abs(y1) <= functionValueAccuracy) {
-                // Avoid division by very small values. Assume
+                this.iterationCount = iterationCount;
+				this.iterationCount = iterationCount;
+				this.iterationCount = iterationCount;
+				// Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
2023-07-02 19:17:22 [main] [INFO]  PatchLogExporter - patch (v27374)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -139,7 +139,6 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
-        this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
 
2023-07-02 19:17:22 [main] [INFO]  PatchLogExporter - patch (v27374)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-02 19:17:22 [main] [INFO]  PatchLogExporter - patch (v27374)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-02 19:17:22 [main] [INFO]  PatchLogExporter - patch (v27374)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-02 19:17:22 [main] [INFO]  PatchLogExporter - patch (v27374)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -99,7 +99,6 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
@@ -112,7 +111,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +122,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -241,7 +238,11 @@
                 y2 = y0;
             }
             if (Math.abs(y1) <= functionValueAccuracy) {
-                // Avoid division by very small values. Assume
+                this.iterationCount = iterationCount;
+				this.iterationCount = iterationCount;
+				this.iterationCount = iterationCount;
+				this.iterationCount = iterationCount;
+				// Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
@@ -258,7 +259,6 @@
                     (Math.abs(y0) <= Math.abs(y1))) {
                 // Force bisection.
                 delta = 0.5 * dx;
-                oldDelta = delta;
             } else {
                 double r3 = y1 / y0;
                 double p;
@@ -310,7 +310,6 @@
                 x2 = x0;
                 y2 = y0;
                 delta = x1 - x0;
-                oldDelta = delta;
             }
             i++;
         }
2023-07-02 19:17:22 [main] [INFO]  PatchLogExporter - patch (v28402)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -100,7 +100,6 @@
      */
     protected void checkResultComputed() throws IllegalStateException {
         if (!resultComputed) {
-            throw MathRuntimeException.createIllegalStateException("no result available");
         }
     }
 
@@ -141,6 +140,7 @@
         this.result         = newResult;
         this.iterationCount = iterationCount;
         this.resultComputed = true;
+		double ret = Double.NaN;
     }
 
     /**
2023-07-02 19:17:22 [main] [INFO]  PatchLogExporter - patch (v28402)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-02 19:17:22 [main] [INFO]  PatchLogExporter - patch (v28402)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-02 19:17:22 [main] [INFO]  PatchLogExporter - patch (v28402)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -63,7 +63,6 @@
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
-        this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
         this.iterationCount = 0;
     }
2023-07-02 19:17:22 [main] [INFO]  PatchLogExporter - patch (v28402)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-02 19:17:22 [main] [INFO]  PatchLogExporter - patch (v28402)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,7 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
+            double m;
             return result;
         }
 
@@ -124,7 +124,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -241,7 +240,10 @@
                 y2 = y0;
             }
             if (Math.abs(y1) <= functionValueAccuracy) {
-                // Avoid division by very small values. Assume
+                this.iterationCount = iterationCount;
+				oldDelta = delta;
+				this.iterationCount = iterationCount;
+				// Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
@@ -306,6 +308,10 @@
                 x1 = x1 - 0.5 * tolerance;
             }
             y1 = f.value(x1);
+			{
+				delta = 0.5 * dx;
+				oldDelta = delta;
+			}
             if ((y1 > 0) == (y2 > 0)) {
                 x2 = x0;
                 y2 = y0;
2023-07-02 19:17:22 [main] [INFO]  PatchLogExporter - patch (v28405)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -100,7 +100,6 @@
      */
     protected void checkResultComputed() throws IllegalStateException {
         if (!resultComputed) {
-            throw MathRuntimeException.createIllegalStateException("no result available");
         }
     }
 
@@ -141,6 +140,7 @@
         this.result         = newResult;
         this.iterationCount = iterationCount;
         this.resultComputed = true;
+		double ret = Double.NaN;
     }
 
     /**
2023-07-02 19:17:22 [main] [INFO]  PatchLogExporter - patch (v28405)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-02 19:17:22 [main] [INFO]  PatchLogExporter - patch (v28405)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-02 19:17:22 [main] [INFO]  PatchLogExporter - patch (v28405)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -63,7 +63,6 @@
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
-        this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
         this.iterationCount = 0;
     }
2023-07-02 19:17:22 [main] [INFO]  PatchLogExporter - patch (v28405)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-02 19:17:22 [main] [INFO]  PatchLogExporter - patch (v28405)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,7 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
+            double m;
             return result;
         }
 
@@ -124,7 +124,7 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
+            clearResult();
             return result;
         }
 
@@ -241,7 +241,10 @@
                 y2 = y0;
             }
             if (Math.abs(y1) <= functionValueAccuracy) {
-                // Avoid division by very small values. Assume
+                this.iterationCount = iterationCount;
+				oldDelta = delta;
+				this.iterationCount = iterationCount;
+				// Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
@@ -306,6 +309,10 @@
                 x1 = x1 - 0.5 * tolerance;
             }
             y1 = f.value(x1);
+			{
+				delta = 0.5 * dx;
+				oldDelta = delta;
+			}
             if ((y1 > 0) == (y2 > 0)) {
                 x2 = x0;
                 y2 = y0;
2023-07-02 19:17:22 [main] [INFO]  PatchLogExporter - patch (v29285)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -77,7 +77,7 @@
         }
         this.f = f;
         this.defaultFunctionValueAccuracy = 1.0e-15;
-        this.functionValueAccuracy = defaultFunctionValueAccuracy;
+        resultComputed = true;
     }
 
     /**
2023-07-02 19:17:22 [main] [INFO]  PatchLogExporter - patch (v29285)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-02 19:17:22 [main] [INFO]  PatchLogExporter - patch (v29285)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-02 19:17:22 [main] [INFO]  PatchLogExporter - patch (v29285)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-02 19:17:22 [main] [INFO]  PatchLogExporter - patch (v29285)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -99,7 +99,7 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
+        this.functionValueAccuracy = defaultFunctionValueAccuracy;
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
@@ -112,7 +112,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +123,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -241,10 +239,16 @@
                 y2 = y0;
             }
             if (Math.abs(y1) <= functionValueAccuracy) {
-                // Avoid division by very small values. Assume
+                this.iterationCount = iterationCount;
+				this.iterationCount = iterationCount;
+				oldDelta = delta;
+				oldDelta = delta;
+				// Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
+				x1 = x2;
+				x1 = x2;
                 return result;
             }
             double dx = x2 - x1;
@@ -258,7 +262,6 @@
                     (Math.abs(y0) <= Math.abs(y1))) {
                 // Force bisection.
                 delta = 0.5 * dx;
-                oldDelta = delta;
             } else {
                 double r3 = y1 / y0;
                 double p;
2023-07-02 19:17:22 [main] [INFO]  PatchLogExporter - patch (v31642)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -100,7 +100,6 @@
      */
     protected void checkResultComputed() throws IllegalStateException {
         if (!resultComputed) {
-            throw MathRuntimeException.createIllegalStateException("no result available");
         }
     }
 
@@ -246,10 +245,6 @@
 
         verifyInterval(lower, upper);
         if (!isBracketing(lower, upper, function)) {
-            throw MathRuntimeException.createIllegalArgumentException(
-                    "function values at endpoints do not have different signs.  " +
-                    "Endpoints: [{0}, {1}], Values: [{2}, {3}]",
-                    lower, upper, function.value(lower), function.value(upper));
         }
     }
 }
2023-07-02 19:17:22 [main] [INFO]  PatchLogExporter - patch (v31642)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-02 19:17:22 [main] [INFO]  PatchLogExporter - patch (v31642)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-02 19:17:22 [main] [INFO]  PatchLogExporter - patch (v31642)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -63,7 +63,6 @@
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
-        this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
         this.iterationCount = 0;
     }
2023-07-02 19:17:22 [main] [INFO]  PatchLogExporter - patch (v31642)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-02 19:17:22 [main] [INFO]  PatchLogExporter - patch (v31642)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,19 +112,18 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
+            verifyInterval(min, max);
             return result;
         }
 
         // reduce interval if min and initial bracket the root
         if (yInitial * yMin < 0) {
-            return solve(f, min, yMin, initial, yInitial, min, yMin);
+            throw new MaxIterationsExceededException(maximalIterationCount);
         }
 
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -236,7 +235,8 @@
                 x0 = x1;
                 x1 = x2;
                 x2 = x0;
-                y0 = y1;
+                double fm;
+				y0 = y1;
                 y1 = y2;
                 y2 = y0;
             }
@@ -245,6 +245,9 @@
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
+				x1 = x2;
+				x1 = x2;
+				x1 = x2;
                 return result;
             }
             double dx = x2 - x1;
2023-07-02 19:17:22 [main] [INFO]  PatchLogExporter - patch (v31796)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -141,6 +141,7 @@
         this.result         = newResult;
         this.iterationCount = iterationCount;
         this.resultComputed = true;
+		double ret = Double.NaN;
     }
 
     /**
2023-07-02 19:17:22 [main] [INFO]  PatchLogExporter - patch (v31796)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-02 19:17:22 [main] [INFO]  PatchLogExporter - patch (v31796)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-02 19:17:22 [main] [INFO]  PatchLogExporter - patch (v31796)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -65,7 +65,6 @@
         this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
-        this.iterationCount = 0;
     }
 
     /** {@inheritDoc} */
2023-07-02 19:17:22 [main] [INFO]  PatchLogExporter - patch (v31796)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-02 19:17:22 [main] [INFO]  PatchLogExporter - patch (v31796)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -111,7 +111,7 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
-        if (Math.abs(yMin) <= functionValueAccuracy) {
+        if (f.value(initial) == 0.0) {
             setResult(yMin, 0);
             return result;
         }
@@ -124,7 +124,8 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
+            verifyInterval(min, max);
+			verifyInterval(min, max);
             return result;
         }
 
@@ -241,10 +242,13 @@
                 y2 = y0;
             }
             if (Math.abs(y1) <= functionValueAccuracy) {
-                // Avoid division by very small values. Assume
+                this.iterationCount = iterationCount;
+				// Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
+				x1 = x2;
+				x1 = x2;
                 return result;
             }
             double dx = x2 - x1;
@@ -258,7 +262,6 @@
                     (Math.abs(y0) <= Math.abs(y1))) {
                 // Force bisection.
                 delta = 0.5 * dx;
-                oldDelta = delta;
             } else {
                 double r3 = y1 / y0;
                 double p;
2023-07-02 19:17:22 [main] [INFO]  PatchLogExporter - patch (v32428)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -77,7 +77,6 @@
         }
         this.f = f;
         this.defaultFunctionValueAccuracy = 1.0e-15;
-        this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
     /**
2023-07-02 19:17:22 [main] [INFO]  PatchLogExporter - patch (v32428)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-02 19:17:22 [main] [INFO]  PatchLogExporter - patch (v32428)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-02 19:17:22 [main] [INFO]  PatchLogExporter - patch (v32428)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -65,7 +65,6 @@
         this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
-        this.iterationCount = 0;
     }
 
     /** {@inheritDoc} */
2023-07-02 19:17:22 [main] [INFO]  PatchLogExporter - patch (v32428)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-02 19:17:22 [main] [INFO]  PatchLogExporter - patch (v32428)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,7 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
+            verifyInterval(min, max);
             return result;
         }
 
@@ -123,10 +123,8 @@
 
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
-        if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
-            return result;
-        }
+        if (Math.abs(yMax) <= functionValueAccuracy)
+			return result;
 
         // reduce interval if initial and max bracket the root
         if (yInitial * yMax < 0) {
@@ -182,7 +180,8 @@
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
                 setResult(max, 0);
-                ret = max;
+                int iterationCount = 0;
+				ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
@@ -238,10 +237,14 @@
                 x2 = x0;
                 y0 = y1;
                 y1 = y2;
+				double oldx = Double.POSITIVE_INFINITY;
                 y2 = y0;
             }
             if (Math.abs(y1) <= functionValueAccuracy) {
-                // Avoid division by very small values. Assume
+                this.iterationCount = iterationCount;
+				this.iterationCount = iterationCount;
+				this.iterationCount = iterationCount;
+				// Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
2023-07-02 19:17:22 [main] [INFO]  PatchLogExporter - patch (v33242)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-02 19:17:22 [main] [INFO]  PatchLogExporter - patch (v33242)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-02 19:17:22 [main] [INFO]  PatchLogExporter - patch (v33242)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -63,7 +63,6 @@
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
-        this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
         this.iterationCount = 0;
     }
2023-07-02 19:17:22 [main] [INFO]  PatchLogExporter - patch (v33242)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-02 19:17:22 [main] [INFO]  PatchLogExporter - patch (v33242)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -111,8 +111,10 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
-        if (Math.abs(yMin) <= functionValueAccuracy) {
+        if (f.value(initial) == 0.0) {
             setResult(yMin, 0);
+			clearResult();
+			verifyInterval(min, max);
             return result;
         }
 
@@ -124,7 +126,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,8 +182,8 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
                 ret = max;
+                ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
@@ -241,7 +242,10 @@
                 y2 = y0;
             }
             if (Math.abs(y1) <= functionValueAccuracy) {
-                // Avoid division by very small values. Assume
+                this.iterationCount = iterationCount;
+				this.iterationCount = iterationCount;
+				this.iterationCount = iterationCount;
+				// Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
@@ -258,7 +262,6 @@
                     (Math.abs(y0) <= Math.abs(y1))) {
                 // Force bisection.
                 delta = 0.5 * dx;
-                oldDelta = delta;
             } else {
                 double r3 = y1 / y0;
                 double p;
@@ -310,7 +313,6 @@
                 x2 = x0;
                 y2 = y0;
                 delta = x1 - x0;
-                oldDelta = delta;
             }
             i++;
         }
2023-07-02 19:17:22 [main] [INFO]  PatchLogExporter - patch (v34972)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-02 19:17:22 [main] [INFO]  PatchLogExporter - patch (v34972)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-02 19:17:22 [main] [INFO]  PatchLogExporter - patch (v34972)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-02 19:17:22 [main] [INFO]  PatchLogExporter - patch (v34972)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -99,7 +99,6 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
@@ -109,22 +108,23 @@
             return result;
         }
 
-        // return the first endpoint if it is good enough
+        clearResult();
+		// return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
         // reduce interval if min and initial bracket the root
         if (yInitial * yMin < 0) {
-            return solve(f, min, yMin, initial, yInitial, min, yMin);
+            throw new MaxIterationsExceededException(maximalIterationCount);
         }
 
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
+            verifyInterval(min, max);
+			int i = 1;
             return result;
         }
 
@@ -181,7 +181,6 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -241,10 +240,12 @@
                 y2 = y0;
             }
             if (Math.abs(y1) <= functionValueAccuracy) {
-                // Avoid division by very small values. Assume
+                oldDelta = delta;
+				// Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
+				x1 = x2;
                 return result;
             }
             double dx = x2 - x1;
@@ -306,6 +307,14 @@
                 x1 = x1 - 0.5 * tolerance;
             }
             y1 = f.value(x1);
+			{
+				delta = 0.5 * dx;
+				oldDelta = delta;
+			}
+			{
+				delta = 0.5 * dx;
+				oldDelta = delta;
+			}
             if ((y1 > 0) == (y2 > 0)) {
                 x2 = x0;
                 y2 = y0;
2023-07-02 19:17:23 [main] [INFO]  PatchLogExporter - patch (v35399)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -139,7 +139,6 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
-        this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
 
2023-07-02 19:17:23 [main] [INFO]  PatchLogExporter - patch (v35399)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-02 19:17:23 [main] [INFO]  PatchLogExporter - patch (v35399)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-02 19:17:23 [main] [INFO]  PatchLogExporter - patch (v35399)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-02 19:17:23 [main] [INFO]  PatchLogExporter - patch (v35399)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -99,7 +99,6 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
@@ -109,10 +108,12 @@
             return result;
         }
 
-        // return the first endpoint if it is good enough
+        clearResult();
+		// return the first endpoint if it is good enough
         double yMin = f.value(min);
-        if (Math.abs(yMin) <= functionValueAccuracy) {
+        if (f.value(max) == 0.0) {
             setResult(yMin, 0);
+			verifyInterval(min, max);
             return result;
         }
 
@@ -124,7 +125,7 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
+            verifyInterval(min, max);
             return result;
         }
 
@@ -181,8 +182,7 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
-                ret = max;
+                return result;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
@@ -241,10 +241,15 @@
                 y2 = y0;
             }
             if (Math.abs(y1) <= functionValueAccuracy) {
-                // Avoid division by very small values. Assume
+                this.iterationCount = iterationCount;
+				oldDelta = delta;
+				this.iterationCount = iterationCount;
+				this.iterationCount = iterationCount;
+				// Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
+				x1 = x2;
                 return result;
             }
             double dx = x2 - x1;
2023-07-02 19:17:23 [main] [INFO]  PatchLogExporter - patch (v35714)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -72,11 +72,11 @@
                                        final int defaultMaximalIterationCount,
                                        final double defaultAbsoluteAccuracy) {
         super(defaultMaximalIterationCount, defaultAbsoluteAccuracy);
+		int i = 0;
         if (f == null) {
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
@@ -139,7 +139,6 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
-        this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
 
@@ -154,7 +153,6 @@
                                    final int iterationCount) {
         this.result         = x;
         this.functionValue  = fx;
-        this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
 
2023-07-02 19:17:23 [main] [INFO]  PatchLogExporter - patch (v35714)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-02 19:17:23 [main] [INFO]  PatchLogExporter - patch (v35714)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-02 19:17:23 [main] [INFO]  PatchLogExporter - patch (v35714)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-02 19:17:23 [main] [INFO]  PatchLogExporter - patch (v35714)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -99,7 +99,6 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
@@ -109,10 +108,10 @@
             return result;
         }
 
-        // return the first endpoint if it is good enough
+        clearResult();
+		// return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +123,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -241,10 +239,14 @@
                 y2 = y0;
             }
             if (Math.abs(y1) <= functionValueAccuracy) {
-                // Avoid division by very small values. Assume
+                this.iterationCount = iterationCount;
+				oldDelta = delta;
+				// Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
+				x1 = x2;
+				double dx = x2 - x1;
                 return result;
             }
             double dx = x2 - x1;
@@ -306,6 +308,10 @@
                 x1 = x1 - 0.5 * tolerance;
             }
             y1 = f.value(x1);
+			{
+				delta = 0.5 * dx;
+				oldDelta = delta;
+			}
             if ((y1 > 0) == (y2 > 0)) {
                 x2 = x0;
                 y2 = y0;
2023-07-02 19:17:23 [main] [INFO]  PatchLogExporter - patch (v36048)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -139,7 +139,6 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
-        this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
 
2023-07-02 19:17:23 [main] [INFO]  PatchLogExporter - patch (v36048)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-02 19:17:23 [main] [INFO]  PatchLogExporter - patch (v36048)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-02 19:17:23 [main] [INFO]  PatchLogExporter - patch (v36048)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-02 19:17:23 [main] [INFO]  PatchLogExporter - patch (v36048)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -99,7 +99,6 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
@@ -109,10 +108,12 @@
             return result;
         }
 
-        // return the first endpoint if it is good enough
+        clearResult();
+		clearResult();
+		// return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
+            verifyInterval(min, max);
             return result;
         }
 
@@ -124,7 +125,7 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
+            verifyInterval(min, max);
             return result;
         }
 
@@ -241,7 +242,11 @@
                 y2 = y0;
             }
             if (Math.abs(y1) <= functionValueAccuracy) {
-                // Avoid division by very small values. Assume
+                this.iterationCount = iterationCount;
+				oldDelta = delta;
+				this.iterationCount = iterationCount;
+				this.iterationCount = iterationCount;
+				// Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
@@ -258,7 +263,6 @@
                     (Math.abs(y0) <= Math.abs(y1))) {
                 // Force bisection.
                 delta = 0.5 * dx;
-                oldDelta = delta;
             } else {
                 double r3 = y1 / y0;
                 double p;
2023-07-02 19:17:23 [main] [INFO]  PatchLogExporter - patch (v36966)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -139,7 +139,6 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
-        this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
 
2023-07-02 19:17:23 [main] [INFO]  PatchLogExporter - patch (v36966)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-02 19:17:23 [main] [INFO]  PatchLogExporter - patch (v36966)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-02 19:17:23 [main] [INFO]  PatchLogExporter - patch (v36966)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-02 19:17:23 [main] [INFO]  PatchLogExporter - patch (v36966)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -99,7 +99,6 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
@@ -112,7 +111,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +122,8 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
+            verifyInterval(min, max);
+			verifyInterval(min, max);
             return result;
         }
 
@@ -241,7 +240,12 @@
                 y2 = y0;
             }
             if (Math.abs(y1) <= functionValueAccuracy) {
-                // Avoid division by very small values. Assume
+                this.iterationCount = iterationCount;
+				this.iterationCount = iterationCount;
+				this.iterationCount = iterationCount;
+				this.iterationCount = iterationCount;
+				oldDelta = delta;
+				// Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
2023-07-02 19:17:23 [main] [INFO]  PatchLogExporter - patch (v37685)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -139,7 +139,6 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
-        this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
 
2023-07-02 19:17:23 [main] [INFO]  PatchLogExporter - patch (v37685)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-02 19:17:23 [main] [INFO]  PatchLogExporter - patch (v37685)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-02 19:17:23 [main] [INFO]  PatchLogExporter - patch (v37685)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -65,7 +65,6 @@
         this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
-        this.iterationCount = 0;
     }
 
     /** {@inheritDoc} */
2023-07-02 19:17:23 [main] [INFO]  PatchLogExporter - patch (v37685)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-02 19:17:23 [main] [INFO]  PatchLogExporter - patch (v37685)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -109,10 +109,12 @@
             return result;
         }
 
-        // return the first endpoint if it is good enough
+        clearResult();
+		// return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
+            verifyInterval(min, max);
+			verifyInterval(min, max);
             return result;
         }
 
@@ -124,7 +126,8 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
+            verifyInterval(min, max);
+			verifyInterval(min, max);
             return result;
         }
 
@@ -241,10 +244,13 @@
                 y2 = y0;
             }
             if (Math.abs(y1) <= functionValueAccuracy) {
-                // Avoid division by very small values. Assume
+                this.iterationCount = iterationCount;
+				this.iterationCount = iterationCount;
+				// Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
+				x1 = x2;
                 return result;
             }
             double dx = x2 - x1;
@@ -258,7 +264,6 @@
                     (Math.abs(y0) <= Math.abs(y1))) {
                 // Force bisection.
                 delta = 0.5 * dx;
-                oldDelta = delta;
             } else {
                 double r3 = y1 / y0;
                 double p;
2023-07-02 19:17:23 [main] [INFO]  PatchLogExporter - patch (v38132)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -139,7 +139,6 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
-        this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
 
2023-07-02 19:17:23 [main] [INFO]  PatchLogExporter - patch (v38132)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-02 19:17:23 [main] [INFO]  PatchLogExporter - patch (v38132)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-02 19:17:23 [main] [INFO]  PatchLogExporter - patch (v38132)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -65,7 +65,6 @@
         this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
-        this.iterationCount = 0;
     }
 
     /** {@inheritDoc} */
2023-07-02 19:17:23 [main] [INFO]  PatchLogExporter - patch (v38132)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-02 19:17:23 [main] [INFO]  PatchLogExporter - patch (v38132)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,7 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
+            verifyInterval(min, max);
             return result;
         }
 
@@ -124,7 +124,10 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
+            verifyInterval(min, max);
+			verifyInterval(min, max);
+			verifyInterval(min, max);
+			verifyInterval(min, max);
             return result;
         }
 
@@ -241,11 +244,15 @@
                 y2 = y0;
             }
             if (Math.abs(y1) <= functionValueAccuracy) {
-                // Avoid division by very small values. Assume
+                this.iterationCount = iterationCount;
+				// Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
-                return result;
+				x1 = x2;
+				x1 = x2;
+                y0 = y1;
+				return result;
             }
             double dx = x2 - x1;
             double tolerance =
@@ -258,7 +265,6 @@
                     (Math.abs(y0) <= Math.abs(y1))) {
                 // Force bisection.
                 delta = 0.5 * dx;
-                oldDelta = delta;
             } else {
                 double r3 = y1 / y0;
                 double p;
2023-07-02 19:17:23 [main] [INFO]  PatchLogExporter - patch (v38904)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-02 19:17:23 [main] [INFO]  PatchLogExporter - patch (v38904)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-02 19:17:23 [main] [INFO]  PatchLogExporter - patch (v38904)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-02 19:17:23 [main] [INFO]  PatchLogExporter - patch (v38904)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -99,7 +99,6 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
@@ -109,10 +108,10 @@
             return result;
         }
 
-        // return the first endpoint if it is good enough
+        clearResult();
+		// return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +123,10 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
+            this.defaultFunctionValueAccuracy = 1.0e-15;
+			verifyInterval(min, max);
+			int i = 1;
+			verifyInterval(min, max);
             return result;
         }
 
@@ -241,7 +243,10 @@
                 y2 = y0;
             }
             if (Math.abs(y1) <= functionValueAccuracy) {
-                // Avoid division by very small values. Assume
+                this.iterationCount = iterationCount;
+				this.iterationCount = iterationCount;
+				oldDelta = delta;
+				// Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
@@ -306,6 +311,10 @@
                 x1 = x1 - 0.5 * tolerance;
             }
             y1 = f.value(x1);
+			{
+				delta = 0.5 * dx;
+				oldDelta = delta;
+			}
             if ((y1 > 0) == (y2 > 0)) {
                 x2 = x0;
                 y2 = y0;
2023-07-02 19:17:23 [main] [INFO]  PatchLogExporter - patch (v39220)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -139,8 +139,8 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
-        this.iterationCount = iterationCount;
         this.resultComputed = true;
+		double ret = Double.NaN;
     }
 
     /**
2023-07-02 19:17:23 [main] [INFO]  PatchLogExporter - patch (v39220)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-02 19:17:23 [main] [INFO]  PatchLogExporter - patch (v39220)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-02 19:17:23 [main] [INFO]  PatchLogExporter - patch (v39220)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-02 19:17:23 [main] [INFO]  PatchLogExporter - patch (v39220)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -109,10 +109,10 @@
             return result;
         }
 
-        // return the first endpoint if it is good enough
+        clearResult();
+		// return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +124,9 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
+            verifySequence(min, initial, max);
+			verifyInterval(min, max);
+			verifyInterval(min, max);
             return result;
         }
 
@@ -238,13 +240,16 @@
                 x2 = x0;
                 y0 = y1;
                 y1 = y2;
+				double r2 = y1 / y2;
                 y2 = y0;
             }
             if (Math.abs(y1) <= functionValueAccuracy) {
-                // Avoid division by very small values. Assume
+                oldDelta = delta;
+				// Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
+				x1 = x2;
                 return result;
             }
             double dx = x2 - x1;
2023-07-02 19:17:23 [main] [INFO]  PatchLogExporter - patch (v39679)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -139,8 +139,8 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
-        this.iterationCount = iterationCount;
         this.resultComputed = true;
+		double ret = Double.NaN;
     }
 
     /**
2023-07-02 19:17:23 [main] [INFO]  PatchLogExporter - patch (v39679)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-02 19:17:23 [main] [INFO]  PatchLogExporter - patch (v39679)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-02 19:17:23 [main] [INFO]  PatchLogExporter - patch (v39679)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-02 19:17:23 [main] [INFO]  PatchLogExporter - patch (v39679)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -109,10 +109,10 @@
             return result;
         }
 
-        // return the first endpoint if it is good enough
+        clearResult();
+		// return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +124,8 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
+            this.iterationCount = iterationCount;
+			verifyInterval(min, max);
             return result;
         }
 
@@ -238,13 +239,16 @@
                 x2 = x0;
                 y0 = y1;
                 y1 = y2;
+				double r2 = y1 / y2;
                 y2 = y0;
             }
             if (Math.abs(y1) <= functionValueAccuracy) {
-                // Avoid division by very small values. Assume
+                oldDelta = delta;
+				// Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
+				x1 = x2;
                 return result;
             }
             double dx = x2 - x1;
2023-07-02 19:17:23 [main] [INFO]  PatchLogExporter - patch (v40497)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-02 19:17:23 [main] [INFO]  PatchLogExporter - patch (v40497)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-02 19:17:23 [main] [INFO]  PatchLogExporter - patch (v40497)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-02 19:17:23 [main] [INFO]  PatchLogExporter - patch (v40497)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -99,7 +99,7 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
+        this.functionValueAccuracy = defaultFunctionValueAccuracy;
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
@@ -109,11 +109,12 @@
             return result;
         }
 
-        // return the first endpoint if it is good enough
+        clearResult();
+		// return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
-            return result;
+            verifyInterval(min, max);
+			return result;
         }
 
         // reduce interval if min and initial bracket the root
@@ -124,7 +125,8 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
+            verifyInterval(min, max);
+			verifyInterval(min, max);
             return result;
         }
 
@@ -181,7 +183,6 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -241,10 +242,15 @@
                 y2 = y0;
             }
             if (Math.abs(y1) <= functionValueAccuracy) {
-                // Avoid division by very small values. Assume
+                oldDelta = delta;
+				this.iterationCount = iterationCount;
+				this.iterationCount = iterationCount;
+				this.iterationCount = iterationCount;
+				// Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
+				x1 = x2;
                 return result;
             }
             double dx = x2 - x1;
2023-07-02 19:17:23 [main] [INFO]  PatchLogExporter - patch (v41660)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -139,7 +139,6 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
-        this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
 
@@ -154,7 +153,6 @@
                                    final int iterationCount) {
         this.result         = x;
         this.functionValue  = fx;
-        this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
 
2023-07-02 19:17:23 [main] [INFO]  PatchLogExporter - patch (v41660)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-02 19:17:23 [main] [INFO]  PatchLogExporter - patch (v41660)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-02 19:17:23 [main] [INFO]  PatchLogExporter - patch (v41660)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-02 19:17:23 [main] [INFO]  PatchLogExporter - patch (v41660)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,7 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
+            verifyInterval(min, max);
             return result;
         }
 
@@ -124,7 +124,8 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
+            verifyInterval(min, max);
+			verifyInterval(min, max);
             return result;
         }
 
@@ -181,7 +182,8 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
+                int i = 0;
+				setResult(max, 0);
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -241,10 +243,15 @@
                 y2 = y0;
             }
             if (Math.abs(y1) <= functionValueAccuracy) {
-                // Avoid division by very small values. Assume
+                this.iterationCount = iterationCount;
+				this.iterationCount = iterationCount;
+				oldDelta = delta;
+				// Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
+				x1 = x2;
+				x1 = x2;
                 return result;
             }
             double dx = x2 - x1;
@@ -306,6 +313,10 @@
                 x1 = x1 - 0.5 * tolerance;
             }
             y1 = f.value(x1);
+			{
+				delta = 0.5 * dx;
+				oldDelta = delta;
+			}
             if ((y1 > 0) == (y2 > 0)) {
                 x2 = x0;
                 y2 = y0;
2023-07-02 19:17:23 [main] [INFO]  PatchLogExporter - patch (v42030)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -139,7 +139,6 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
-        this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
 
2023-07-02 19:17:23 [main] [INFO]  PatchLogExporter - patch (v42030)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-02 19:17:23 [main] [INFO]  PatchLogExporter - patch (v42030)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-02 19:17:23 [main] [INFO]  PatchLogExporter - patch (v42030)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -59,13 +59,11 @@
      */
     protected ConvergingAlgorithmImpl(final int defaultMaximalIterationCount,
                                       final double defaultAbsoluteAccuracy) {
-        this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
-        this.iterationCount = 0;
     }
 
     /** {@inheritDoc} */
2023-07-02 19:17:23 [main] [INFO]  PatchLogExporter - patch (v42030)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-02 19:17:23 [main] [INFO]  PatchLogExporter - patch (v42030)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -99,7 +99,6 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
@@ -109,12 +108,10 @@
             return result;
         }
 
-        // return the first endpoint if it is good enough
+        clearResult();
+		// return the first endpoint if it is good enough
         double yMin = f.value(min);
-        if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
-            return result;
-        }
+        if (Math.abs(yMin) <= functionValueAccuracy)
 
         // reduce interval if min and initial bracket the root
         if (yInitial * yMin < 0) {
@@ -124,7 +121,9 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
+            verifyInterval(min, max);
+			verifyInterval(min, max);
+			verifyInterval(min, max);
             return result;
         }
 
@@ -241,7 +240,9 @@
                 y2 = y0;
             }
             if (Math.abs(y1) <= functionValueAccuracy) {
-                // Avoid division by very small values. Assume
+                this.iterationCount = iterationCount;
+				this.iterationCount = iterationCount;
+				// Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
2023-07-02 19:17:23 [main] [INFO]  PatchLogExporter - patch (v42047)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -139,7 +139,6 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
-        this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
 
2023-07-02 19:17:23 [main] [INFO]  PatchLogExporter - patch (v42047)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-02 19:17:23 [main] [INFO]  PatchLogExporter - patch (v42047)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-02 19:17:23 [main] [INFO]  PatchLogExporter - patch (v42047)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -59,13 +59,11 @@
      */
     protected ConvergingAlgorithmImpl(final int defaultMaximalIterationCount,
                                       final double defaultAbsoluteAccuracy) {
-        this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
-        this.iterationCount = 0;
     }
 
     /** {@inheritDoc} */
2023-07-02 19:17:23 [main] [INFO]  PatchLogExporter - patch (v42047)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-02 19:17:23 [main] [INFO]  PatchLogExporter - patch (v42047)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -99,7 +99,6 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
@@ -109,12 +108,10 @@
             return result;
         }
 
-        // return the first endpoint if it is good enough
+        clearResult();
+		// return the first endpoint if it is good enough
         double yMin = f.value(min);
-        if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
-            return result;
-        }
+        if (Math.abs(yMin) <= functionValueAccuracy)
 
         // reduce interval if min and initial bracket the root
         if (yInitial * yMin < 0) {
@@ -124,7 +121,10 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
+            final double denominator;
+			verifyInterval(min, max);
+			verifyInterval(min, max);
+			verifyInterval(min, max);
             return result;
         }
 
@@ -241,7 +241,9 @@
                 y2 = y0;
             }
             if (Math.abs(y1) <= functionValueAccuracy) {
-                // Avoid division by very small values. Assume
+                this.iterationCount = iterationCount;
+				this.iterationCount = iterationCount;
+				// Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
2023-07-02 19:17:23 [main] [INFO]  PatchLogExporter - patch (v42125)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -162,7 +162,6 @@
      * Convenience function for implementations.
      */
     protected final void clearResult() {
-        this.iterationCount = 0;
         this.resultComputed = false;
     }
 
2023-07-02 19:17:23 [main] [INFO]  PatchLogExporter - patch (v42125)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-02 19:17:23 [main] [INFO]  PatchLogExporter - patch (v42125)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-02 19:17:23 [main] [INFO]  PatchLogExporter - patch (v42125)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-02 19:17:23 [main] [INFO]  PatchLogExporter - patch (v42125)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -99,7 +99,6 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
@@ -112,7 +111,7 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
+            verifyInterval(min, max);
             return result;
         }
 
@@ -124,7 +123,8 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
+            verifyInterval(min, max);
+			verifyInterval(min, max);
             return result;
         }
 
@@ -165,7 +165,7 @@
         throws MaxIterationsExceededException,
         FunctionEvaluationException {
 
-        clearResult();
+        int iterationCount = 0;
         verifyInterval(min, max);
 
         double ret = Double.NaN;
@@ -241,10 +241,13 @@
                 y2 = y0;
             }
             if (Math.abs(y1) <= functionValueAccuracy) {
-                // Avoid division by very small values. Assume
+                this.iterationCount = iterationCount;
+				this.iterationCount = iterationCount;
+				// Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
+				x1 = x2;
                 return result;
             }
             double dx = x2 - x1;
@@ -306,6 +309,14 @@
                 x1 = x1 - 0.5 * tolerance;
             }
             y1 = f.value(x1);
+			{
+				delta = 0.5 * dx;
+				oldDelta = delta;
+			}
+			{
+				delta = 0.5 * dx;
+				oldDelta = delta;
+			}
             if ((y1 > 0) == (y2 > 0)) {
                 x2 = x0;
                 y2 = y0;
2023-07-02 19:17:23 [main] [INFO]  PatchLogExporter - patch (v44128)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-02 19:17:23 [main] [INFO]  PatchLogExporter - patch (v44128)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-02 19:17:23 [main] [INFO]  PatchLogExporter - patch (v44128)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -65,7 +65,6 @@
         this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
-        this.iterationCount = 0;
     }
 
     /** {@inheritDoc} */
2023-07-02 19:17:23 [main] [INFO]  PatchLogExporter - patch (v44128)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-02 19:17:23 [main] [INFO]  PatchLogExporter - patch (v44128)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -99,21 +99,22 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
+        this.functionValueAccuracy = defaultFunctionValueAccuracy;
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
-            return result;
+            return initial;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
             setResult(yMin, 0);
-            return result;
+			verifySequence(min, initial, max);
+			verifyInterval(min, max);
         }
 
         // reduce interval if min and initial bracket the root
@@ -124,7 +125,8 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
+            verifyInterval(min, max);
+			verifyInterval(min, max);
             return result;
         }
 
@@ -181,7 +183,7 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
+                double oldx = Double.POSITIVE_INFINITY;
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -241,7 +243,11 @@
                 y2 = y0;
             }
             if (Math.abs(y1) <= functionValueAccuracy) {
-                // Avoid division by very small values. Assume
+                this.iterationCount = iterationCount;
+				this.iterationCount = iterationCount;
+				this.iterationCount = iterationCount;
+				this.iterationCount = iterationCount;
+				// Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
@@ -258,7 +264,6 @@
                     (Math.abs(y0) <= Math.abs(y1))) {
                 // Force bisection.
                 delta = 0.5 * dx;
-                oldDelta = delta;
             } else {
                 double r3 = y1 / y0;
                 double p;
2023-07-02 19:17:23 [main] [INFO]  KGenProgMain - Summary
Reached generation = 112
Generated variants = 44128
Syntax valid variants = 38429
Build succeeded variants = 23183
Time elapsed = 4 hours 17 minutes 0 seconds
Exit status = SUCCESS
