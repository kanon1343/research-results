2023-06-27 11:47:17 [main] [WARN]  Configuration$Builder - The directory where kGenProg is running is different from the root directory of the given target project.
2023-06-27 11:47:17 [main] [WARN]  Configuration$Builder - If the target project includes test cases with file I/O, such test cases won't run correctly.
2023-06-27 11:47:17 [main] [WARN]  Configuration$Builder - We recommend you running kGenProg with the root directory of the target project as the current directory.
2023-06-27 11:47:18 [main] [INFO]  KGenProgMain - 
==================== kGenProg Configuration ====================
configPath = /Users/haradakanon/Downloads/kGenProg-1.8.2/example/math72/kgenprog-72.toml (set by command line)
rootDir = /Users/haradakanon/Downloads/kGenProg-1.8.2/example/math72 (set in config file)
productPaths = [/Users/haradakanon/Downloads/kGenProg-1.8.2/example/math72/src/main] (set in config file)
testPaths = [/Users/haradakanon/Downloads/kGenProg-1.8.2/example/math72/src/test] (set in config file)
classPaths = []
executionTests = [org.apache.commons.math.analysis.solvers.BrentSolverTest] (set in config file)
outDir = kgenprog-out
logLevel = INFO (set in config file)
mutationGeneratingCount = 200 (set in config file)
crossoverGeneratingCount = 200 (set in config file)
headcount = 100
maxGeneration = 1000 (set in config file)
timeLimit = PT277H46M40S (set in config file)
testTimeLimit = PT3M (set in config file)
requiredSolutionsCount = 100 (set in config file)
randomSeed = 4 (set by command line)
scope = PACKAGE (set in config file)
faultLocalization = Zoltar (set in config file)
mutationType = Simple
crossoverType = Random
firstVariantSelectionStrategy = Random
secondVariantSelectionStrategy = Random
isPatchOutput = true (set in config file)
isHistoryRecord = false
currentDirectory = /Users/haradakanon/Desktop/研究/実験データ/research
version = 1.8.2
================================================================
2023-06-27 11:47:36 [main] [INFO]  KGenProgMain - initial failed tests (1/6)
org.apache.commons.math.analysis.solvers.BrentSolverTest.testRootEndpoints: null

2023-06-27 11:47:36 [main] [INFO]  KGenProgMain - GA started
2023-06-27 11:47:36 [main] [INFO]  KGenProgMain - entered the era of 1st generation.
2023-06-27 11:47:49 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 13 seconds
Variants: generated 200, build-succeeded 30, build-failed 109, syntax-invalid 8, redundant 53
Fitness: max 0.833(25), min 0.167(1), ave 0.789
Test execution time: sum 3465 ms, max 287 ms, min 64 ms
----------------------------------------------------------------

2023-06-27 11:47:49 [main] [INFO]  KGenProgMain - entered the era of 2nd generation.
2023-06-27 11:48:01 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 24 seconds
Variants: generated 200, build-succeeded 63, build-failed 93, syntax-invalid 19, redundant 25
Fitness: max 1(2), min 0.167(6), ave 0.746
Test execution time: sum 4206 ms, max 148 ms, min 56 ms
----------------------------------------------------------------

2023-06-27 11:48:01 [main] [INFO]  KGenProgMain - entered the era of 3rd generation.
2023-06-27 11:48:21 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 45 seconds
Variants: generated 400, build-succeeded 131, build-failed 122, syntax-invalid 39, redundant 108
Fitness: max 0.833(79), min 0.167(18), ave 0.695
Test execution time: sum 8696 ms, max 213 ms, min 54 ms
----------------------------------------------------------------

2023-06-27 11:48:22 [main] [INFO]  KGenProgMain - entered the era of 4th generation.
2023-06-27 11:48:43 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 minutes 7 seconds
Variants: generated 400, build-succeeded 154, build-failed 110, syntax-invalid 29, redundant 107
Fitness: max 0.833(137), min 0.167(10), ave 0.78
Test execution time: sum 9540 ms, max 177 ms, min 53 ms
----------------------------------------------------------------

2023-06-27 11:48:43 [main] [INFO]  KGenProgMain - entered the era of 5th generation.
2023-06-27 11:49:04 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 minutes 28 seconds
Variants: generated 400, build-succeeded 151, build-failed 113, syntax-invalid 43, redundant 93
Fitness: max 1(2), min 0.167(9), ave 0.781
Test execution time: sum 9379 ms, max 178 ms, min 53 ms
----------------------------------------------------------------

2023-06-27 11:49:04 [main] [INFO]  KGenProgMain - entered the era of 6th generation.
2023-06-27 11:49:24 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 minutes 47 seconds
Variants: generated 400, build-succeeded 140, build-failed 113, syntax-invalid 49, redundant 98
Fitness: max 1(1), min 0.167(9), ave 0.781
Test execution time: sum 8446 ms, max 141 ms, min 52 ms
----------------------------------------------------------------

2023-06-27 11:49:24 [main] [INFO]  KGenProgMain - entered the era of 7th generation.
2023-06-27 11:49:47 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 minutes 11 seconds
Variants: generated 400, build-succeeded 176, build-failed 113, syntax-invalid 33, redundant 78
Fitness: max 1(1), min 0.167(7), ave 0.793
Test execution time: sum 10680 ms, max 199 ms, min 52 ms
----------------------------------------------------------------

2023-06-27 11:49:47 [main] [INFO]  KGenProgMain - entered the era of 8th generation.
2023-06-27 12:05:09 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 17 minutes 33 seconds
Variants: generated 400, build-succeeded 166, build-failed 119, syntax-invalid 38, redundant 77
Fitness: max 1(1), min 0.167(14), ave 0.766
Test execution time: sum 909742 ms, max 900109 ms, min 52 ms
----------------------------------------------------------------

2023-06-27 12:05:09 [main] [INFO]  KGenProgMain - entered the era of 9th generation.
2023-06-27 12:05:33 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 17 minutes 57 seconds
Variants: generated 400, build-succeeded 190, build-failed 108, syntax-invalid 43, redundant 59
Fitness: max 1(2), min 0.167(11), ave 0.786
Test execution time: sum 11290 ms, max 132 ms, min 53 ms
----------------------------------------------------------------

2023-06-27 12:05:33 [main] [INFO]  KGenProgMain - entered the era of 10th generation.
2023-06-27 12:05:58 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 18 minutes 22 seconds
Variants: generated 400, build-succeeded 192, build-failed 121, syntax-invalid 43, redundant 44
Fitness: max 1(1), min 0.167(13), ave 0.782
Test execution time: sum 11584 ms, max 198 ms, min 53 ms
----------------------------------------------------------------

2023-06-27 12:05:58 [main] [INFO]  KGenProgMain - entered the era of 11th generation.
2023-06-27 12:06:24 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 18 minutes 48 seconds
Variants: generated 400, build-succeeded 200, build-failed 113, syntax-invalid 39, redundant 48
Fitness: max 0.833(181), min 0.167(9), ave 0.795
Test execution time: sum 12034 ms, max 213 ms, min 52 ms
----------------------------------------------------------------

2023-06-27 12:06:24 [main] [INFO]  KGenProgMain - entered the era of 12th generation.
2023-06-27 12:21:50 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 34 minutes 14 seconds
Variants: generated 400, build-succeeded 196, build-failed 107, syntax-invalid 44, redundant 53
Fitness: max 0.833(178), min 0.167(9), ave 0.795
Test execution time: sum 911760 ms, max 900101 ms, min 52 ms
----------------------------------------------------------------

2023-06-27 12:21:50 [main] [INFO]  KGenProgMain - entered the era of 13th generation.
2023-06-27 12:22:16 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 34 minutes 40 seconds
Variants: generated 400, build-succeeded 190, build-failed 121, syntax-invalid 47, redundant 42
Fitness: max 0.833(167), min 0.167(10), ave 0.787
Test execution time: sum 11408 ms, max 138 ms, min 52 ms
----------------------------------------------------------------

2023-06-27 12:22:16 [main] [INFO]  KGenProgMain - entered the era of 14th generation.
2023-06-27 12:22:43 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 35 minutes 6 seconds
Variants: generated 400, build-succeeded 200, build-failed 109, syntax-invalid 52, redundant 39
Fitness: max 0.833(180), min 0.167(8), ave 0.795
Test execution time: sum 12005 ms, max 220 ms, min 53 ms
----------------------------------------------------------------

2023-06-27 12:22:43 [main] [INFO]  KGenProgMain - entered the era of 15th generation.
2023-06-27 12:23:08 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 35 minutes 32 seconds
Variants: generated 400, build-succeeded 177, build-failed 119, syntax-invalid 66, redundant 38
Fitness: max 0.833(156), min 0.167(10), ave 0.785
Test execution time: sum 10624 ms, max 199 ms, min 52 ms
----------------------------------------------------------------

2023-06-27 12:23:08 [main] [INFO]  KGenProgMain - entered the era of 16th generation.
2023-06-27 12:23:35 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 35 minutes 59 seconds
Variants: generated 400, build-succeeded 196, build-failed 108, syntax-invalid 67, redundant 29
Fitness: max 1(2), min 0.167(10), ave 0.789
Test execution time: sum 11803 ms, max 190 ms, min 52 ms
----------------------------------------------------------------

2023-06-27 12:23:35 [main] [INFO]  KGenProgMain - entered the era of 17th generation.
2023-06-27 12:24:03 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 36 minutes 27 seconds
Variants: generated 400, build-succeeded 207, build-failed 109, syntax-invalid 59, redundant 25
Fitness: max 1(1), min 0.167(9), ave 0.793
Test execution time: sum 12481 ms, max 187 ms, min 52 ms
----------------------------------------------------------------

2023-06-27 12:24:03 [main] [INFO]  KGenProgMain - entered the era of 18th generation.
2023-06-27 12:39:31 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 51 minutes 55 seconds
Variants: generated 400, build-succeeded 206, build-failed 113, syntax-invalid 56, redundant 25
Fitness: max 0.833(189), min 0.167(10), ave 0.794
Test execution time: sum 912415 ms, max 900103 ms, min 53 ms
----------------------------------------------------------------

2023-06-27 12:39:31 [main] [INFO]  KGenProgMain - entered the era of 19th generation.
2023-06-27 12:39:59 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 52 minutes 23 seconds
Variants: generated 400, build-succeeded 203, build-failed 109, syntax-invalid 55, redundant 33
Fitness: max 1(1), min 0.167(8), ave 0.803
Test execution time: sum 12060 ms, max 152 ms, min 52 ms
----------------------------------------------------------------

2023-06-27 12:39:59 [main] [INFO]  KGenProgMain - entered the era of 20th generation.
2023-06-27 12:40:29 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 52 minutes 53 seconds
Variants: generated 400, build-succeeded 222, build-failed 102, syntax-invalid 51, redundant 25
Fitness: max 1(2), min 0.167(8), ave 0.803
Test execution time: sum 13215 ms, max 184 ms, min 52 ms
----------------------------------------------------------------

2023-06-27 12:40:29 [main] [INFO]  KGenProgMain - entered the era of 21st generation.
2023-06-27 12:40:59 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 53 minutes 23 seconds
Variants: generated 400, build-succeeded 210, build-failed 122, syntax-invalid 48, redundant 20
Fitness: max 0.833(197), min 0.167(7), ave 0.804
Test execution time: sum 12609 ms, max 123 ms, min 53 ms
----------------------------------------------------------------

2023-06-27 12:40:59 [main] [INFO]  KGenProgMain - entered the era of 22nd generation.
2023-06-27 12:41:29 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 53 minutes 53 seconds
Variants: generated 400, build-succeeded 208, build-failed 113, syntax-invalid 55, redundant 24
Fitness: max 0.833(188), min 0.167(11), ave 0.788
Test execution time: sum 12334 ms, max 121 ms, min 53 ms
----------------------------------------------------------------

2023-06-27 12:41:29 [main] [INFO]  KGenProgMain - entered the era of 23rd generation.
2023-06-27 12:41:59 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 54 minutes 23 seconds
Variants: generated 400, build-succeeded 208, build-failed 104, syntax-invalid 67, redundant 21
Fitness: max 1(1), min 0.167(11), ave 0.784
Test execution time: sum 12536 ms, max 199 ms, min 53 ms
----------------------------------------------------------------

2023-06-27 12:41:59 [main] [INFO]  KGenProgMain - entered the era of 24th generation.
2023-06-27 12:42:30 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 54 minutes 53 seconds
Variants: generated 400, build-succeeded 218, build-failed 124, syntax-invalid 41, redundant 17
Fitness: max 1(2), min 0.167(6), ave 0.8
Test execution time: sum 12966 ms, max 123 ms, min 54 ms
----------------------------------------------------------------

2023-06-27 12:42:30 [main] [INFO]  KGenProgMain - entered the era of 25th generation.
2023-06-27 12:58:02 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 10 minutes 25 seconds
Variants: generated 400, build-succeeded 225, build-failed 111, syntax-invalid 41, redundant 23
Fitness: max 1(1), min 0.167(10), ave 0.796
Test execution time: sum 913588 ms, max 900109 ms, min 53 ms
----------------------------------------------------------------

2023-06-27 12:58:02 [main] [INFO]  KGenProgMain - entered the era of 26th generation.
2023-06-27 12:58:34 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 10 minutes 58 seconds
Variants: generated 400, build-succeeded 233, build-failed 111, syntax-invalid 35, redundant 21
Fitness: max 1(1), min 0.167(14), ave 0.78
Test execution time: sum 14018 ms, max 195 ms, min 52 ms
----------------------------------------------------------------

2023-06-27 12:58:34 [main] [INFO]  KGenProgMain - entered the era of 27th generation.
2023-06-27 12:59:07 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 11 minutes 31 seconds
Variants: generated 400, build-succeeded 242, build-failed 91, syntax-invalid 42, redundant 25
Fitness: max 1(3), min 0.167(15), ave 0.787
Test execution time: sum 14283 ms, max 124 ms, min 53 ms
----------------------------------------------------------------

2023-06-27 12:59:07 [main] [INFO]  KGenProgMain - entered the era of 28th generation.
2023-06-27 12:59:39 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 12 minutes 3 seconds
Variants: generated 400, build-succeeded 218, build-failed 112, syntax-invalid 48, redundant 22
Fitness: max 1(3), min 0.167(9), ave 0.8
Test execution time: sum 13210 ms, max 200 ms, min 53 ms
----------------------------------------------------------------

2023-06-27 12:59:39 [main] [INFO]  KGenProgMain - entered the era of 29th generation.
2023-06-27 13:00:09 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 12 minutes 33 seconds
Variants: generated 400, build-succeeded 207, build-failed 109, syntax-invalid 65, redundant 19
Fitness: max 0.833(184), min 0.167(14), ave 0.779
Test execution time: sum 12411 ms, max 124 ms, min 53 ms
----------------------------------------------------------------

2023-06-27 13:00:09 [main] [INFO]  KGenProgMain - entered the era of 30th generation.
2023-06-27 13:00:41 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 13 minutes 4 seconds
Variants: generated 400, build-succeeded 208, build-failed 107, syntax-invalid 66, redundant 19
Fitness: max 1(1), min 0.167(10), ave 0.792
Test execution time: sum 12605 ms, max 123 ms, min 53 ms
----------------------------------------------------------------

2023-06-27 13:00:41 [main] [INFO]  KGenProgMain - entered the era of 31st generation.
2023-06-27 13:01:12 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 13 minutes 36 seconds
Variants: generated 400, build-succeeded 210, build-failed 111, syntax-invalid 60, redundant 19
Fitness: max 1(2), min 0.167(3), ave 0.817
Test execution time: sum 12697 ms, max 193 ms, min 53 ms
----------------------------------------------------------------

2023-06-27 13:01:12 [main] [INFO]  KGenProgMain - entered the era of 32nd generation.
2023-06-27 13:01:46 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 14 minutes 10 seconds
Variants: generated 400, build-succeeded 228, build-failed 115, syntax-invalid 38, redundant 19
Fitness: max 0.833(204), min 0.167(13), ave 0.787
Test execution time: sum 13863 ms, max 198 ms, min 53 ms
----------------------------------------------------------------

2023-06-27 13:01:46 [main] [INFO]  KGenProgMain - entered the era of 33rd generation.
2023-06-27 13:02:19 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 14 minutes 43 seconds
Variants: generated 400, build-succeeded 215, build-failed 129, syntax-invalid 44, redundant 12
Fitness: max 1(1), min 0.167(11), ave 0.796
Test execution time: sum 13240 ms, max 187 ms, min 53 ms
----------------------------------------------------------------

2023-06-27 13:02:19 [main] [INFO]  KGenProgMain - entered the era of 34th generation.
2023-06-27 13:02:54 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 15 minutes 18 seconds
Variants: generated 400, build-succeeded 232, build-failed 115, syntax-invalid 41, redundant 12
Fitness: max 0.833(207), min 0.167(14), ave 0.782
Test execution time: sum 14288 ms, max 193 ms, min 53 ms
----------------------------------------------------------------

2023-06-27 13:02:54 [main] [INFO]  KGenProgMain - entered the era of 35th generation.
2023-06-27 13:03:29 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 15 minutes 53 seconds
Variants: generated 400, build-succeeded 235, build-failed 113, syntax-invalid 37, redundant 15
Fitness: max 0.833(211), min 0.167(14), ave 0.785
Test execution time: sum 14585 ms, max 130 ms, min 53 ms
----------------------------------------------------------------

2023-06-27 13:03:29 [main] [INFO]  KGenProgMain - entered the era of 36th generation.
2023-06-27 13:04:04 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 16 minutes 28 seconds
Variants: generated 400, build-succeeded 226, build-failed 115, syntax-invalid 48, redundant 11
Fitness: max 0.833(200), min 0.167(13), ave 0.781
Test execution time: sum 13832 ms, max 180 ms, min 53 ms
----------------------------------------------------------------

2023-06-27 13:04:04 [main] [INFO]  KGenProgMain - entered the era of 37th generation.
2023-06-27 13:04:40 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 17 minutes 4 seconds
Variants: generated 400, build-succeeded 230, build-failed 119, syntax-invalid 37, redundant 14
Fitness: max 0.833(199), min 0.167(13), ave 0.78
Test execution time: sum 14228 ms, max 169 ms, min 52 ms
----------------------------------------------------------------

2023-06-27 13:04:40 [main] [INFO]  KGenProgMain - entered the era of 38th generation.
2023-06-27 13:05:16 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 17 minutes 40 seconds
Variants: generated 400, build-succeeded 222, build-failed 122, syntax-invalid 42, redundant 14
Fitness: max 0.833(198), min 0.167(14), ave 0.78
Test execution time: sum 13903 ms, max 233 ms, min 53 ms
----------------------------------------------------------------

2023-06-27 13:05:16 [main] [INFO]  KGenProgMain - entered the era of 39th generation.
2023-06-27 13:05:53 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 18 minutes 17 seconds
Variants: generated 400, build-succeeded 228, build-failed 122, syntax-invalid 37, redundant 13
Fitness: max 0.833(210), min 0.167(8), ave 0.799
Test execution time: sum 14650 ms, max 190 ms, min 54 ms
----------------------------------------------------------------

2023-06-27 13:05:53 [main] [INFO]  KGenProgMain - entered the era of 40th generation.
2023-06-27 13:06:30 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 18 minutes 54 seconds
Variants: generated 400, build-succeeded 220, build-failed 114, syntax-invalid 44, redundant 22
Fitness: max 0.833(198), min 0.167(14), ave 0.783
Test execution time: sum 13909 ms, max 183 ms, min 54 ms
----------------------------------------------------------------

2023-06-27 13:06:30 [main] [INFO]  KGenProgMain - entered the era of 41st generation.
2023-06-27 13:07:08 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 19 minutes 32 seconds
Variants: generated 400, build-succeeded 229, build-failed 125, syntax-invalid 34, redundant 12
Fitness: max 0.833(203), min 0.167(13), ave 0.783
Test execution time: sum 14642 ms, max 148 ms, min 54 ms
----------------------------------------------------------------

2023-06-27 13:07:08 [main] [INFO]  KGenProgMain - entered the era of 42nd generation.
2023-06-27 13:22:45 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 35 minutes 9 seconds
Variants: generated 400, build-succeeded 228, build-failed 113, syntax-invalid 40, redundant 19
Fitness: max 0.833(204), min 0.167(12), ave 0.786
Test execution time: sum 914177 ms, max 900117 ms, min 54 ms
----------------------------------------------------------------

2023-06-27 13:22:45 [main] [INFO]  KGenProgMain - entered the era of 43rd generation.
2023-06-27 13:23:24 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 35 minutes 48 seconds
Variants: generated 400, build-succeeded 232, build-failed 116, syntax-invalid 40, redundant 12
Fitness: max 0.833(206), min 0.167(15), ave 0.782
Test execution time: sum 14882 ms, max 190 ms, min 53 ms
----------------------------------------------------------------

2023-06-27 13:23:24 [main] [INFO]  KGenProgMain - entered the era of 44th generation.
2023-06-27 13:24:02 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 36 minutes 26 seconds
Variants: generated 400, build-succeeded 228, build-failed 108, syntax-invalid 45, redundant 19
Fitness: max 0.833(202), min 0.167(13), ave 0.784
Test execution time: sum 14420 ms, max 209 ms, min 53 ms
----------------------------------------------------------------

2023-06-27 13:24:02 [main] [INFO]  KGenProgMain - entered the era of 45th generation.
2023-06-27 13:24:41 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 37 minutes 4 seconds
Variants: generated 400, build-succeeded 230, build-failed 111, syntax-invalid 40, redundant 19
Fitness: max 0.833(199), min 0.167(11), ave 0.781
Test execution time: sum 14701 ms, max 191 ms, min 52 ms
----------------------------------------------------------------

2023-06-27 13:24:41 [main] [INFO]  KGenProgMain - entered the era of 46th generation.
2023-06-27 13:25:19 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 37 minutes 43 seconds
Variants: generated 400, build-succeeded 234, build-failed 116, syntax-invalid 34, redundant 16
Fitness: max 1(1), min 0.167(7), ave 0.796
Test execution time: sum 14825 ms, max 190 ms, min 54 ms
----------------------------------------------------------------

2023-06-27 13:25:19 [main] [INFO]  KGenProgMain - entered the era of 47th generation.
2023-06-27 13:26:00 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 38 minutes 24 seconds
Variants: generated 400, build-succeeded 238, build-failed 119, syntax-invalid 28, redundant 15
Fitness: max 0.833(213), min 0.167(11), ave 0.79
Test execution time: sum 15240 ms, max 186 ms, min 53 ms
----------------------------------------------------------------

2023-06-27 13:26:00 [main] [INFO]  KGenProgMain - entered the era of 48th generation.
2023-06-27 13:26:39 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 39 minutes 3 seconds
Variants: generated 400, build-succeeded 232, build-failed 118, syntax-invalid 42, redundant 8
Fitness: max 0.833(203), min 0.167(13), ave 0.777
Test execution time: sum 14984 ms, max 177 ms, min 54 ms
----------------------------------------------------------------

2023-06-27 13:26:39 [main] [INFO]  KGenProgMain - entered the era of 49th generation.
2023-06-27 13:27:18 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 39 minutes 42 seconds
Variants: generated 400, build-succeeded 228, build-failed 117, syntax-invalid 39, redundant 16
Fitness: max 0.833(213), min 0.167(5), ave 0.807
Test execution time: sum 14879 ms, max 193 ms, min 53 ms
----------------------------------------------------------------

2023-06-27 13:27:18 [main] [INFO]  KGenProgMain - entered the era of 50th generation.
2023-06-27 13:28:01 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 40 minutes 25 seconds
Variants: generated 400, build-succeeded 239, build-failed 121, syntax-invalid 26, redundant 14
Fitness: max 1(2), min 0.167(9), ave 0.796
Test execution time: sum 16017 ms, max 184 ms, min 53 ms
----------------------------------------------------------------

2023-06-27 13:28:01 [main] [INFO]  KGenProgMain - entered the era of 51st generation.
2023-06-27 13:28:43 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 41 minutes 7 seconds
Variants: generated 400, build-succeeded 251, build-failed 104, syntax-invalid 32, redundant 13
Fitness: max 0.833(219), min 0.167(17), ave 0.774
Test execution time: sum 16306 ms, max 187 ms, min 53 ms
----------------------------------------------------------------

2023-06-27 13:28:43 [main] [INFO]  KGenProgMain - entered the era of 52nd generation.
2023-06-27 13:29:25 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 41 minutes 48 seconds
Variants: generated 400, build-succeeded 225, build-failed 119, syntax-invalid 40, redundant 16
Fitness: max 0.833(204), min 0.167(6), ave 0.799
Test execution time: sum 15065 ms, max 186 ms, min 53 ms
----------------------------------------------------------------

2023-06-27 13:29:25 [main] [INFO]  KGenProgMain - entered the era of 53rd generation.
2023-06-27 13:30:05 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 42 minutes 28 seconds
Variants: generated 400, build-succeeded 231, build-failed 120, syntax-invalid 36, redundant 13
Fitness: max 0.833(211), min 0.167(6), ave 0.799
Test execution time: sum 14573 ms, max 189 ms, min 54 ms
----------------------------------------------------------------

2023-06-27 13:30:05 [main] [INFO]  KGenProgMain - entered the era of 54th generation.
2023-06-27 13:30:42 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 43 minutes 6 seconds
Variants: generated 400, build-succeeded 225, build-failed 108, syntax-invalid 51, redundant 16
Fitness: max 0.833(203), min 0.167(10), ave 0.79
Test execution time: sum 14108 ms, max 124 ms, min 55 ms
----------------------------------------------------------------

2023-06-27 13:30:42 [main] [INFO]  KGenProgMain - entered the era of 55th generation.
2023-06-27 13:31:22 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 43 minutes 45 seconds
Variants: generated 400, build-succeeded 235, build-failed 122, syntax-invalid 31, redundant 12
Fitness: max 0.833(220), min 0.167(5), ave 0.809
Test execution time: sum 14608 ms, max 121 ms, min 55 ms
----------------------------------------------------------------

2023-06-27 13:31:22 [main] [INFO]  KGenProgMain - entered the era of 56th generation.
2023-06-27 13:46:59 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 59 minutes 23 seconds
Variants: generated 400, build-succeeded 210, build-failed 131, syntax-invalid 44, redundant 15
Fitness: max 1(1), min 0.167(7), ave 0.797
Test execution time: sum 913392 ms, max 900115 ms, min 56 ms
----------------------------------------------------------------

2023-06-27 13:46:59 [main] [INFO]  KGenProgMain - entered the era of 57th generation.
2023-06-27 13:47:38 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 1 seconds
Variants: generated 400, build-succeeded 216, build-failed 132, syntax-invalid 42, redundant 10
Fitness: max 0.833(195), min 0.167(12), ave 0.787
Test execution time: sum 13548 ms, max 197 ms, min 53 ms
----------------------------------------------------------------

2023-06-27 13:47:38 [main] [INFO]  KGenProgMain - entered the era of 58th generation.
2023-06-27 13:48:17 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 41 seconds
Variants: generated 400, build-succeeded 235, build-failed 112, syntax-invalid 43, redundant 10
Fitness: max 0.833(207), min 0.167(10), ave 0.786
Test execution time: sum 14603 ms, max 150 ms, min 55 ms
----------------------------------------------------------------

2023-06-27 13:48:17 [main] [INFO]  KGenProgMain - entered the era of 59th generation.
2023-06-27 13:48:55 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 1 minutes 19 seconds
Variants: generated 400, build-succeeded 219, build-failed 124, syntax-invalid 46, redundant 11
Fitness: max 1(1), min 0.167(10), ave 0.797
Test execution time: sum 13643 ms, max 201 ms, min 53 ms
----------------------------------------------------------------

2023-06-27 13:48:55 [main] [INFO]  KGenProgMain - entered the era of 60th generation.
2023-06-27 13:49:33 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 1 minutes 56 seconds
Variants: generated 400, build-succeeded 213, build-failed 126, syntax-invalid 51, redundant 10
Fitness: max 1(1), min 0.167(5), ave 0.8
Test execution time: sum 13218 ms, max 117 ms, min 54 ms
----------------------------------------------------------------

2023-06-27 13:49:33 [main] [INFO]  KGenProgMain - entered the era of 61st generation.
2023-06-27 13:50:12 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 2 minutes 36 seconds
Variants: generated 400, build-succeeded 232, build-failed 115, syntax-invalid 43, redundant 10
Fitness: max 1(2), min 0.167(5), ave 0.805
Test execution time: sum 14648 ms, max 191 ms, min 55 ms
----------------------------------------------------------------

2023-06-27 13:50:12 [main] [INFO]  KGenProgMain - entered the era of 62nd generation.
2023-06-27 13:50:51 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 3 minutes 15 seconds
Variants: generated 400, build-succeeded 227, build-failed 120, syntax-invalid 35, redundant 18
Fitness: max 0.833(202), min 0.167(12), ave 0.784
Test execution time: sum 14138 ms, max 133 ms, min 54 ms
----------------------------------------------------------------

2023-06-27 13:50:51 [main] [INFO]  KGenProgMain - entered the era of 63rd generation.
2023-06-27 13:51:31 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 3 minutes 55 seconds
Variants: generated 400, build-succeeded 227, build-failed 117, syntax-invalid 43, redundant 13
Fitness: max 1(3), min 0.167(16), ave 0.767
Test execution time: sum 14419 ms, max 118 ms, min 55 ms
----------------------------------------------------------------

2023-06-27 13:51:31 [main] [INFO]  KGenProgMain - entered the era of 64th generation.
2023-06-27 14:22:11 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 34 minutes 34 seconds
Variants: generated 400, build-succeeded 219, build-failed 111, syntax-invalid 53, redundant 17
Fitness: max 1(1), min 0.167(13), ave 0.779
Test execution time: sum 1814059 ms, max 900116 ms, min 54 ms
----------------------------------------------------------------

2023-06-27 14:22:11 [main] [INFO]  KGenProgMain - entered the era of 65th generation.
2023-06-27 14:22:49 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 35 minutes 13 seconds
Variants: generated 400, build-succeeded 209, build-failed 123, syntax-invalid 58, redundant 10
Fitness: max 1(1), min 0.167(8), ave 0.794
Test execution time: sum 13024 ms, max 120 ms, min 54 ms
----------------------------------------------------------------

2023-06-27 14:22:49 [main] [INFO]  KGenProgMain - entered the era of 66th generation.
2023-06-27 14:23:29 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 35 minutes 52 seconds
Variants: generated 400, build-succeeded 223, build-failed 116, syntax-invalid 53, redundant 8
Fitness: max 0.833(202), min 0.167(13), ave 0.787
Test execution time: sum 14037 ms, max 121 ms, min 55 ms
----------------------------------------------------------------

2023-06-27 14:23:29 [main] [INFO]  KGenProgMain - entered the era of 67th generation.
2023-06-27 14:24:09 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 36 minutes 33 seconds
Variants: generated 400, build-succeeded 222, build-failed 116, syntax-invalid 54, redundant 8
Fitness: max 1(1), min 0.167(4), ave 0.809
Test execution time: sum 13943 ms, max 138 ms, min 54 ms
----------------------------------------------------------------

2023-06-27 14:24:09 [main] [INFO]  KGenProgMain - entered the era of 68th generation.
2023-06-27 14:24:50 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 37 minutes 14 seconds
Variants: generated 400, build-succeeded 230, build-failed 118, syntax-invalid 38, redundant 14
Fitness: max 0.833(213), min 0.167(5), ave 0.809
Test execution time: sum 14526 ms, max 144 ms, min 54 ms
----------------------------------------------------------------

2023-06-27 14:24:50 [main] [INFO]  KGenProgMain - entered the era of 69th generation.
2023-06-27 14:25:31 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 37 minutes 55 seconds
Variants: generated 400, build-succeeded 236, build-failed 99, syntax-invalid 49, redundant 16
Fitness: max 0.833(209), min 0.167(11), ave 0.789
Test execution time: sum 15019 ms, max 188 ms, min 55 ms
----------------------------------------------------------------

2023-06-27 14:25:31 [main] [INFO]  KGenProgMain - entered the era of 70th generation.
2023-06-27 14:26:11 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 38 minutes 35 seconds
Variants: generated 400, build-succeeded 214, build-failed 132, syntax-invalid 43, redundant 11
Fitness: max 0.833(192), min 0.167(8), ave 0.793
Test execution time: sum 13613 ms, max 189 ms, min 56 ms
----------------------------------------------------------------

2023-06-27 14:26:11 [main] [INFO]  KGenProgMain - entered the era of 71st generation.
2023-06-27 14:26:53 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 39 minutes 16 seconds
Variants: generated 400, build-succeeded 233, build-failed 102, syntax-invalid 48, redundant 17
Fitness: max 0.833(201), min 0.167(10), ave 0.78
Test execution time: sum 14631 ms, max 186 ms, min 54 ms
----------------------------------------------------------------

2023-06-27 14:26:53 [main] [INFO]  KGenProgMain - entered the era of 72nd generation.
2023-06-27 14:57:44 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 10 minutes 8 seconds
Variants: generated 400, build-succeeded 223, build-failed 108, syntax-invalid 51, redundant 18
Fitness: max 1(3), min 0.167(11), ave 0.789
Test execution time: sum 1818289 ms, max 900121 ms, min 56 ms
----------------------------------------------------------------

2023-06-27 14:57:44 [main] [INFO]  KGenProgMain - entered the era of 73rd generation.
2023-06-27 14:58:37 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 11 minutes 1 seconds
Variants: generated 400, build-succeeded 224, build-failed 105, syntax-invalid 55, redundant 16
Fitness: max 1(1), min 0.167(12), ave 0.783
Test execution time: sum 18323 ms, max 162 ms, min 71 ms
----------------------------------------------------------------

2023-06-27 14:58:37 [main] [INFO]  KGenProgMain - entered the era of 74th generation.
2023-06-27 14:59:32 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 11 minutes 55 seconds
Variants: generated 400, build-succeeded 238, build-failed 98, syntax-invalid 52, redundant 12
Fitness: max 0.833(206), min 0.167(7), ave 0.793
Test execution time: sum 19255 ms, max 160 ms, min 70 ms
----------------------------------------------------------------

2023-06-27 14:59:32 [main] [INFO]  KGenProgMain - entered the era of 75th generation.
2023-06-27 15:00:27 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 12 minutes 50 seconds
Variants: generated 400, build-succeeded 222, build-failed 122, syntax-invalid 45, redundant 11
Fitness: max 0.833(196), min 0.167(7), ave 0.794
Test execution time: sum 18301 ms, max 168 ms, min 70 ms
----------------------------------------------------------------

2023-06-27 15:00:27 [main] [INFO]  KGenProgMain - entered the era of 76th generation.
2023-06-27 15:01:25 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 13 minutes 48 seconds
Variants: generated 400, build-succeeded 245, build-failed 115, syntax-invalid 28, redundant 12
Fitness: max 0.833(221), min 0.167(10), ave 0.793
Test execution time: sum 20239 ms, max 171 ms, min 70 ms
----------------------------------------------------------------

2023-06-27 15:01:25 [main] [INFO]  KGenProgMain - entered the era of 77th generation.
2023-06-27 15:02:20 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 14 minutes 43 seconds
Variants: generated 400, build-succeeded 230, build-failed 106, syntax-invalid 49, redundant 15
Fitness: max 0.833(213), min 0.167(11), ave 0.796
Test execution time: sum 18811 ms, max 162 ms, min 72 ms
----------------------------------------------------------------

2023-06-27 15:02:20 [main] [INFO]  KGenProgMain - entered the era of 78th generation.
2023-06-27 15:03:13 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 15 minutes 37 seconds
Variants: generated 400, build-succeeded 222, build-failed 105, syntax-invalid 53, redundant 20
Fitness: max 1(2), min 0.167(10), ave 0.795
Test execution time: sum 18030 ms, max 161 ms, min 71 ms
----------------------------------------------------------------

2023-06-27 15:03:13 [main] [INFO]  KGenProgMain - entered the era of 79th generation.
2023-06-27 15:04:07 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 16 minutes 31 seconds
Variants: generated 400, build-succeeded 226, build-failed 104, syntax-invalid 57, redundant 13
Fitness: max 0.833(203), min 0.167(11), ave 0.788
Test execution time: sum 18429 ms, max 180 ms, min 70 ms
----------------------------------------------------------------

2023-06-27 15:04:07 [main] [INFO]  KGenProgMain - entered the era of 80th generation.
2023-06-27 15:05:00 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 17 minutes 24 seconds
Variants: generated 400, build-succeeded 210, build-failed 108, syntax-invalid 70, redundant 12
Fitness: max 0.833(192), min 0.167(7), ave 0.802
Test execution time: sum 17131 ms, max 251 ms, min 71 ms
----------------------------------------------------------------

2023-06-27 15:05:00 [main] [INFO]  KGenProgMain - entered the era of 81st generation.
2023-06-27 15:05:56 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 18 minutes 20 seconds
Variants: generated 400, build-succeeded 235, build-failed 102, syntax-invalid 51, redundant 12
Fitness: max 1(1), min 0.167(9), ave 0.796
Test execution time: sum 19266 ms, max 161 ms, min 70 ms
----------------------------------------------------------------

2023-06-27 15:05:56 [main] [INFO]  KGenProgMain - entered the era of 82nd generation.
2023-06-27 15:06:53 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 19 minutes 17 seconds
Variants: generated 400, build-succeeded 221, build-failed 103, syntax-invalid 62, redundant 14
Fitness: max 1(1), min 0.167(9), ave 0.8
Test execution time: sum 18471 ms, max 166 ms, min 71 ms
----------------------------------------------------------------

2023-06-27 15:06:53 [main] [INFO]  KGenProgMain - entered the era of 83rd generation.
2023-06-27 15:07:49 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 20 minutes 12 seconds
Variants: generated 400, build-succeeded 213, build-failed 110, syntax-invalid 67, redundant 10
Fitness: max 1(1), min 0.167(7), ave 0.8
Test execution time: sum 17734 ms, max 226 ms, min 71 ms
----------------------------------------------------------------

2023-06-27 15:07:49 [main] [INFO]  KGenProgMain - entered the era of 84th generation.
2023-06-27 15:08:48 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 21 minutes 11 seconds
Variants: generated 400, build-succeeded 232, build-failed 104, syntax-invalid 49, redundant 15
Fitness: max 0.833(213), min 0.167(6), ave 0.805
Test execution time: sum 19599 ms, max 180 ms, min 72 ms
----------------------------------------------------------------

2023-06-27 15:08:48 [main] [INFO]  KGenProgMain - entered the era of 85th generation.
2023-06-27 15:09:43 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 22 minutes 6 seconds
Variants: generated 400, build-succeeded 209, build-failed 110, syntax-invalid 65, redundant 16
Fitness: max 1(2), min 0.167(4), ave 0.811
Test execution time: sum 17288 ms, max 243 ms, min 72 ms
----------------------------------------------------------------

2023-06-27 15:09:43 [main] [INFO]  KGenProgMain - entered the era of 86th generation.
2023-06-27 15:10:38 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 23 minutes 1 seconds
Variants: generated 400, build-succeeded 209, build-failed 118, syntax-invalid 58, redundant 15
Fitness: max 1(4), min 0.167(6), ave 0.814
Test execution time: sum 17236 ms, max 235 ms, min 72 ms
----------------------------------------------------------------

2023-06-27 15:10:38 [main] [INFO]  KGenProgMain - entered the era of 87th generation.
2023-06-27 15:11:34 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 23 minutes 58 seconds
Variants: generated 400, build-succeeded 216, build-failed 115, syntax-invalid 58, redundant 11
Fitness: max 1(2), min 0.167(7), ave 0.804
Test execution time: sum 17836 ms, max 165 ms, min 71 ms
----------------------------------------------------------------

2023-06-27 15:11:34 [main] [INFO]  KGenProgMain - entered the era of 88th generation.
2023-06-27 15:12:32 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 24 minutes 56 seconds
Variants: generated 400, build-succeeded 225, build-failed 119, syntax-invalid 42, redundant 14
Fitness: max 1(2), min 0.167(6), ave 0.806
Test execution time: sum 18570 ms, max 217 ms, min 71 ms
----------------------------------------------------------------

2023-06-27 15:12:32 [main] [INFO]  KGenProgMain - entered the era of 89th generation.
2023-06-27 15:13:33 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 25 minutes 57 seconds
Variants: generated 400, build-succeeded 231, build-failed 117, syntax-invalid 38, redundant 14
Fitness: max 1(3), min 0.167(7), ave 0.809
Test execution time: sum 19503 ms, max 225 ms, min 71 ms
----------------------------------------------------------------

2023-06-27 15:13:33 [main] [INFO]  KGenProgMain - entered the era of 90th generation.
2023-06-27 15:14:32 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 26 minutes 56 seconds
Variants: generated 400, build-succeeded 221, build-failed 115, syntax-invalid 50, redundant 14
Fitness: max 1(2), min 0.167(7), ave 0.805
Test execution time: sum 18563 ms, max 239 ms, min 71 ms
----------------------------------------------------------------

2023-06-27 15:14:32 [main] [INFO]  KGenProgMain - entered the era of 91st generation.
2023-06-27 15:15:33 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 27 minutes 56 seconds
Variants: generated 400, build-succeeded 232, build-failed 109, syntax-invalid 48, redundant 11
Fitness: max 0.833(211), min 0.167(7), ave 0.802
Test execution time: sum 19468 ms, max 181 ms, min 71 ms
----------------------------------------------------------------

2023-06-27 15:15:33 [main] [INFO]  KGenProgMain - entered the era of 92nd generation.
2023-06-27 15:16:31 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 28 minutes 54 seconds
Variants: generated 400, build-succeeded 225, build-failed 101, syntax-invalid 58, redundant 16
Fitness: max 1(1), min 0.167(5), ave 0.81
Test execution time: sum 18644 ms, max 186 ms, min 71 ms
----------------------------------------------------------------

2023-06-27 15:16:31 [main] [INFO]  KGenProgMain - entered the era of 93rd generation.
2023-06-27 15:17:29 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 29 minutes 53 seconds
Variants: generated 400, build-succeeded 216, build-failed 110, syntax-invalid 62, redundant 12
Fitness: max 1(1), min 0.167(6), ave 0.799
Test execution time: sum 18319 ms, max 231 ms, min 72 ms
----------------------------------------------------------------

2023-06-27 15:17:29 [main] [INFO]  KGenProgMain - entered the era of 94th generation.
2023-06-27 15:18:28 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 30 minutes 52 seconds
Variants: generated 400, build-succeeded 207, build-failed 116, syntax-invalid 66, redundant 11
Fitness: max 1(1), min 0.167(2), ave 0.813
Test execution time: sum 17618 ms, max 213 ms, min 71 ms
----------------------------------------------------------------

2023-06-27 15:18:28 [main] [INFO]  KGenProgMain - entered the era of 95th generation.
2023-06-27 15:19:29 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 31 minutes 53 seconds
Variants: generated 400, build-succeeded 222, build-failed 113, syntax-invalid 48, redundant 17
Fitness: max 1(2), min 0.167(8), ave 0.802
Test execution time: sum 19460 ms, max 231 ms, min 71 ms
----------------------------------------------------------------

2023-06-27 15:19:29 [main] [INFO]  KGenProgMain - entered the era of 96th generation.
2023-06-27 15:20:35 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 32 minutes 58 seconds
Variants: generated 400, build-succeeded 238, build-failed 107, syntax-invalid 44, redundant 11
Fitness: max 1(3), min 0.167(7), ave 0.803
Test execution time: sum 20949 ms, max 201 ms, min 73 ms
----------------------------------------------------------------

2023-06-27 15:20:35 [main] [INFO]  KGenProgMain - entered the era of 97th generation.
2023-06-27 15:21:41 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 34 minutes 4 seconds
Variants: generated 400, build-succeeded 243, build-failed 109, syntax-invalid 40, redundant 8
Fitness: max 0.833(220), min 0.167(11), ave 0.794
Test execution time: sum 21143 ms, max 242 ms, min 73 ms
----------------------------------------------------------------

2023-06-27 15:21:41 [main] [INFO]  KGenProgMain - entered the era of 98th generation.
2023-06-27 15:22:44 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 35 minutes 8 seconds
Variants: generated 400, build-succeeded 228, build-failed 107, syntax-invalid 50, redundant 15
Fitness: max 1(1), min 0.167(7), ave 0.804
Test execution time: sum 19904 ms, max 228 ms, min 73 ms
----------------------------------------------------------------

2023-06-27 15:22:44 [main] [INFO]  KGenProgMain - entered the era of 99th generation.
2023-06-27 15:23:49 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 36 minutes 13 seconds
Variants: generated 400, build-succeeded 235, build-failed 112, syntax-invalid 36, redundant 17
Fitness: max 1(1), min 0.167(10), ave 0.796
Test execution time: sum 20768 ms, max 187 ms, min 72 ms
----------------------------------------------------------------

2023-06-27 15:23:49 [main] [INFO]  KGenProgMain - entered the era of 100th generation.
2023-06-27 15:24:53 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 37 minutes 17 seconds
Variants: generated 400, build-succeeded 243, build-failed 97, syntax-invalid 40, redundant 20
Fitness: max 0.833(223), min 0.167(6), ave 0.806
Test execution time: sum 20645 ms, max 237 ms, min 73 ms
----------------------------------------------------------------

2023-06-27 15:24:53 [main] [INFO]  KGenProgMain - entered the era of 101st generation.
2023-06-27 15:26:00 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 38 minutes 23 seconds
Variants: generated 400, build-succeeded 240, build-failed 109, syntax-invalid 41, redundant 10
Fitness: max 1(1), min 0.167(8), ave 0.805
Test execution time: sum 20823 ms, max 190 ms, min 73 ms
----------------------------------------------------------------

2023-06-27 15:26:00 [main] [INFO]  KGenProgMain - entered the era of 102nd generation.
2023-06-27 15:27:05 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 39 minutes 29 seconds
Variants: generated 400, build-succeeded 237, build-failed 115, syntax-invalid 37, redundant 11
Fitness: max 1(2), min 0.167(11), ave 0.793
Test execution time: sum 20693 ms, max 234 ms, min 72 ms
----------------------------------------------------------------

2023-06-27 15:27:05 [main] [INFO]  KGenProgMain - entered the era of 103rd generation.
2023-06-27 15:43:09 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 55 minutes 33 seconds
Variants: generated 400, build-succeeded 230, build-failed 109, syntax-invalid 45, redundant 16
Fitness: max 1(2), min 0.167(12), ave 0.791
Test execution time: sum 919869 ms, max 900121 ms, min 73 ms
----------------------------------------------------------------

2023-06-27 15:43:09 [main] [INFO]  KGenProgMain - entered the era of 104th generation.
2023-06-27 15:44:13 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 56 minutes 37 seconds
Variants: generated 400, build-succeeded 230, build-failed 110, syntax-invalid 48, redundant 12
Fitness: max 0.833(209), min 0.167(14), ave 0.786
Test execution time: sum 19846 ms, max 232 ms, min 72 ms
----------------------------------------------------------------

2023-06-27 15:44:13 [main] [INFO]  KGenProgMain - entered the era of 105th generation.
2023-06-27 15:45:16 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 57 minutes 39 seconds
Variants: generated 400, build-succeeded 220, build-failed 117, syntax-invalid 46, redundant 17
Fitness: max 0.833(202), min 0.167(6), ave 0.805
Test execution time: sum 19037 ms, max 244 ms, min 71 ms
----------------------------------------------------------------

2023-06-27 15:45:16 [main] [INFO]  KGenProgMain - entered the era of 106th generation.
2023-06-27 15:46:21 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 58 minutes 45 seconds
Variants: generated 400, build-succeeded 236, build-failed 116, syntax-invalid 35, redundant 13
Fitness: max 1(1), min 0.167(11), ave 0.799
Test execution time: sum 20539 ms, max 230 ms, min 74 ms
----------------------------------------------------------------

2023-06-27 15:46:21 [main] [INFO]  KGenProgMain - entered the era of 107th generation.
2023-06-27 15:47:25 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 59 minutes 49 seconds
Variants: generated 400, build-succeeded 223, build-failed 110, syntax-invalid 44, redundant 23
Fitness: max 0.833(195), min 0.167(19), ave 0.767
Test execution time: sum 19298 ms, max 180 ms, min 73 ms
----------------------------------------------------------------

2023-06-27 15:47:25 [main] [INFO]  KGenProgMain - entered the era of 108th generation.
2023-06-27 15:48:32 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 55 seconds
Variants: generated 400, build-succeeded 239, build-failed 115, syntax-invalid 36, redundant 10
Fitness: max 1(1), min 0.167(10), ave 0.793
Test execution time: sum 21057 ms, max 233 ms, min 73 ms
----------------------------------------------------------------

2023-06-27 15:48:32 [main] [INFO]  KGenProgMain - entered the era of 109th generation.
2023-06-27 15:49:38 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 2 minutes 1 seconds
Variants: generated 400, build-succeeded 226, build-failed 118, syntax-invalid 36, redundant 20
Fitness: max 1(1), min 0(1), ave 0.796
Test execution time: sum 20159 ms, max 238 ms, min 72 ms
----------------------------------------------------------------

2023-06-27 15:49:38 [main] [INFO]  KGenProgMain - entered the era of 110th generation.
2023-06-27 15:50:45 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 3 minutes 8 seconds
Variants: generated 400, build-succeeded 235, build-failed 116, syntax-invalid 38, redundant 11
Fitness: max 1(2), min 0.167(10), ave 0.802
Test execution time: sum 20662 ms, max 234 ms, min 72 ms
----------------------------------------------------------------

2023-06-27 15:50:45 [main] [INFO]  KGenProgMain - entered the era of 111th generation.
2023-06-27 15:51:53 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 4 minutes 17 seconds
Variants: generated 400, build-succeeded 228, build-failed 120, syntax-invalid 35, redundant 17
Fitness: max 0.833(206), min 0.167(12), ave 0.788
Test execution time: sum 20422 ms, max 242 ms, min 71 ms
----------------------------------------------------------------

2023-06-27 15:51:53 [main] [INFO]  KGenProgMain - entered the era of 112th generation.
2023-06-27 15:53:06 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 5 minutes 29 seconds
Variants: generated 400, build-succeeded 223, build-failed 133, syntax-invalid 34, redundant 10
Fitness: max 0.833(211), min 0.167(7), ave 0.808
Test execution time: sum 21086 ms, max 230 ms, min 73 ms
----------------------------------------------------------------

2023-06-27 15:53:06 [main] [INFO]  KGenProgMain - entered the era of 113th generation.
2023-06-27 15:54:16 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 6 minutes 39 seconds
Variants: generated 400, build-succeeded 237, build-failed 106, syntax-invalid 40, redundant 17
Fitness: max 0.833(216), min 0(1), ave 0.795
Test execution time: sum 21563 ms, max 243 ms, min 71 ms
----------------------------------------------------------------

2023-06-27 15:54:16 [main] [INFO]  KGenProgMain - entered the era of 114th generation.
2023-06-27 15:55:24 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 7 minutes 48 seconds
Variants: generated 400, build-succeeded 205, build-failed 128, syntax-invalid 53, redundant 14
Fitness: max 1(1), min 0.167(6), ave 0.806
Test execution time: sum 19004 ms, max 232 ms, min 73 ms
----------------------------------------------------------------

2023-06-27 15:55:24 [main] [INFO]  KGenProgMain - entered the era of 115th generation.
2023-06-27 15:56:40 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 9 minutes 3 seconds
Variants: generated 400, build-succeeded 228, build-failed 127, syntax-invalid 33, redundant 12
Fitness: max 0.833(204), min 0.167(9), ave 0.792
Test execution time: sum 21983 ms, max 245 ms, min 72 ms
----------------------------------------------------------------

2023-06-27 15:56:40 [main] [INFO]  KGenProgMain - entered the era of 116th generation.
2023-06-27 15:57:56 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 10 minutes 20 seconds
Variants: generated 400, build-succeeded 237, build-failed 124, syntax-invalid 29, redundant 10
Fitness: max 1(1), min 0.167(14), ave 0.79
Test execution time: sum 23043 ms, max 239 ms, min 72 ms
----------------------------------------------------------------

2023-06-27 15:57:56 [main] [INFO]  KGenProgMain - entered the era of 117th generation.
2023-06-27 15:59:11 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 11 minutes 34 seconds
Variants: generated 400, build-succeeded 237, build-failed 120, syntax-invalid 29, redundant 14
Fitness: max 0.833(221), min 0.167(9), ave 0.802
Test execution time: sum 22078 ms, max 218 ms, min 73 ms
----------------------------------------------------------------

2023-06-27 15:59:11 [main] [INFO]  KGenProgMain - entered the era of 118th generation.
2023-06-27 16:00:29 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 12 minutes 52 seconds
Variants: generated 400, build-succeeded 237, build-failed 122, syntax-invalid 30, redundant 11
Fitness: max 0.833(217), min 0.167(13), ave 0.79
Test execution time: sum 22797 ms, max 258 ms, min 74 ms
----------------------------------------------------------------

2023-06-27 16:00:29 [main] [INFO]  KGenProgMain - entered the era of 119th generation.
2023-06-27 16:01:42 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 14 minutes 5 seconds
Variants: generated 400, build-succeeded 224, build-failed 125, syntax-invalid 36, redundant 15
Fitness: max 0.833(209), min 0(1), ave 0.794
Test execution time: sum 21051 ms, max 186 ms, min 73 ms
----------------------------------------------------------------

2023-06-27 16:01:42 [main] [INFO]  KGenProgMain - entered the era of 120th generation.
2023-06-27 16:02:58 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 15 minutes 21 seconds
Variants: generated 400, build-succeeded 240, build-failed 109, syntax-invalid 37, redundant 14
Fitness: max 0.833(218), min 0.167(13), ave 0.79
Test execution time: sum 22615 ms, max 225 ms, min 72 ms
----------------------------------------------------------------

2023-06-27 16:02:58 [main] [INFO]  KGenProgMain - entered the era of 121st generation.
2023-06-27 16:04:11 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 16 minutes 34 seconds
Variants: generated 400, build-succeeded 224, build-failed 116, syntax-invalid 44, redundant 16
Fitness: max 0.833(199), min 0.167(12), ave 0.786
Test execution time: sum 21055 ms, max 227 ms, min 73 ms
----------------------------------------------------------------

2023-06-27 16:04:11 [main] [INFO]  KGenProgMain - entered the era of 122nd generation.
2023-06-27 16:05:28 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 17 minutes 52 seconds
Variants: generated 400, build-succeeded 232, build-failed 113, syntax-invalid 42, redundant 13
Fitness: max 0.833(214), min 0.167(11), ave 0.795
Test execution time: sum 22497 ms, max 245 ms, min 75 ms
----------------------------------------------------------------

2023-06-27 16:05:28 [main] [INFO]  KGenProgMain - entered the era of 123rd generation.
2023-06-27 16:06:47 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 19 minutes 11 seconds
Variants: generated 400, build-succeeded 237, build-failed 104, syntax-invalid 50, redundant 9
Fitness: max 1(1), min 0.167(15), ave 0.782
Test execution time: sum 23216 ms, max 227 ms, min 73 ms
----------------------------------------------------------------

2023-06-27 16:06:47 [main] [INFO]  KGenProgMain - entered the era of 124th generation.
2023-06-27 16:08:03 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 20 minutes 27 seconds
Variants: generated 400, build-succeeded 223, build-failed 126, syntax-invalid 41, redundant 10
Fitness: max 0.833(197), min 0.167(8), ave 0.791
Test execution time: sum 21546 ms, max 236 ms, min 75 ms
----------------------------------------------------------------

2023-06-27 16:08:03 [main] [INFO]  KGenProgMain - entered the era of 125th generation.
2023-06-27 16:09:20 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 21 minutes 43 seconds
Variants: generated 400, build-succeeded 216, build-failed 123, syntax-invalid 47, redundant 14
Fitness: max 0.833(196), min 0.167(13), ave 0.785
Test execution time: sum 21120 ms, max 230 ms, min 73 ms
----------------------------------------------------------------

2023-06-27 16:09:20 [main] [INFO]  KGenProgMain - entered the era of 126th generation.
2023-06-27 16:10:35 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 22 minutes 59 seconds
Variants: generated 400, build-succeeded 228, build-failed 121, syntax-invalid 42, redundant 9
Fitness: max 0.833(208), min 0.167(8), ave 0.798
Test execution time: sum 21872 ms, max 234 ms, min 73 ms
----------------------------------------------------------------

2023-06-27 16:10:35 [main] [INFO]  KGenProgMain - entered the era of 127th generation.
2023-06-27 16:11:50 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 24 minutes 14 seconds
Variants: generated 400, build-succeeded 223, build-failed 128, syntax-invalid 37, redundant 12
Fitness: max 1(2), min 0.167(6), ave 0.81
Test execution time: sum 21341 ms, max 232 ms, min 74 ms
----------------------------------------------------------------

2023-06-27 16:11:50 [main] [INFO]  KGenProgMain - entered the era of 128th generation.
2023-06-27 16:13:04 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 25 minutes 27 seconds
Variants: generated 400, build-succeeded 211, build-failed 126, syntax-invalid 47, redundant 16
Fitness: max 1(2), min 0.167(5), ave 0.811
Test execution time: sum 20331 ms, max 246 ms, min 75 ms
----------------------------------------------------------------

2023-06-27 16:13:04 [main] [INFO]  KGenProgMain - entered the era of 129th generation.
2023-06-27 16:14:19 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 26 minutes 43 seconds
Variants: generated 400, build-succeeded 227, build-failed 121, syntax-invalid 48, redundant 4
Fitness: max 1(2), min 0.167(12), ave 0.793
Test execution time: sum 21703 ms, max 227 ms, min 75 ms
----------------------------------------------------------------

2023-06-27 16:14:19 [main] [INFO]  KGenProgMain - entered the era of 130th generation.
2023-06-27 16:15:36 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 28 minutes 0 seconds
Variants: generated 400, build-succeeded 224, build-failed 117, syntax-invalid 43, redundant 16
Fitness: max 0.833(210), min 0.167(4), ave 0.812
Test execution time: sum 21869 ms, max 229 ms, min 74 ms
----------------------------------------------------------------

2023-06-27 16:15:36 [main] [INFO]  KGenProgMain - entered the era of 131st generation.
2023-06-27 16:16:08 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 28 minutes 31 seconds
Variants: generated 200, build-succeeded 59, build-failed 117, syntax-invalid 12, redundant 12
Fitness: max 1(2), min 0.167(6), ave 0.76
Test execution time: sum 5468 ms, max 216 ms, min 75 ms
----------------------------------------------------------------

2023-06-27 16:16:08 [main] [INFO]  KGenProgMain - GA stopped
2023-06-27 16:16:12 [main] [INFO]  PatchLogExporter - patch (v230)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-27 16:16:12 [main] [INFO]  PatchLogExporter - patch (v230)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-27 16:16:12 [main] [INFO]  PatchLogExporter - patch (v230)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-27 16:16:12 [main] [INFO]  PatchLogExporter - patch (v230)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +123,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
2023-06-27 16:16:12 [main] [INFO]  PatchLogExporter - patch (v370)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-27 16:16:12 [main] [INFO]  PatchLogExporter - patch (v370)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-27 16:16:12 [main] [INFO]  PatchLogExporter - patch (v370)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-27 16:16:12 [main] [INFO]  PatchLogExporter - patch (v370)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,7 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
+            double x1 = min;
             return result;
         }
 
@@ -124,7 +124,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
2023-06-27 16:16:12 [main] [INFO]  PatchLogExporter - patch (v1215)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-27 16:16:12 [main] [INFO]  PatchLogExporter - patch (v1215)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-27 16:16:12 [main] [INFO]  PatchLogExporter - patch (v1215)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-27 16:16:12 [main] [INFO]  PatchLogExporter - patch (v1215)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -111,20 +111,17 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
-        if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
-            return result;
-        }
+        if (Math.abs(yMin) <= functionValueAccuracy)
 
         // reduce interval if min and initial bracket the root
-        if (yInitial * yMin < 0) {
+        if (Math.abs(yMin) <= functionValueAccuracy) {
             return solve(f, min, yMin, initial, yInitial, min, yMin);
         }
 
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
+            this.defaultFunctionValueAccuracy = 1.0e-15;
             return result;
         }
 
2023-06-27 16:16:12 [main] [INFO]  PatchLogExporter - patch (v1288)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-27 16:16:12 [main] [INFO]  PatchLogExporter - patch (v1288)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-27 16:16:12 [main] [INFO]  PatchLogExporter - patch (v1288)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-27 16:16:12 [main] [INFO]  PatchLogExporter - patch (v1288)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -111,20 +111,16 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
-        if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
-            return result;
-        }
+        if (Math.abs(yMin) <= functionValueAccuracy)
 
         // reduce interval if min and initial bracket the root
-        if (yInitial * yMin < 0) {
+        if (Math.abs(yMin) <= functionValueAccuracy) {
             return solve(f, min, yMin, initial, yInitial, min, yMin);
         }
 
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
2023-06-27 16:16:12 [main] [INFO]  PatchLogExporter - patch (v1623)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-27 16:16:12 [main] [INFO]  PatchLogExporter - patch (v1623)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-27 16:16:12 [main] [INFO]  PatchLogExporter - patch (v1623)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-27 16:16:12 [main] [INFO]  PatchLogExporter - patch (v1623)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +123,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,7 +179,6 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
2023-06-27 16:16:12 [main] [INFO]  PatchLogExporter - patch (v2118)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -77,7 +77,6 @@
         }
         this.f = f;
         this.defaultFunctionValueAccuracy = 1.0e-15;
-        this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
     /**
2023-06-27 16:16:12 [main] [INFO]  PatchLogExporter - patch (v2118)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-27 16:16:12 [main] [INFO]  PatchLogExporter - patch (v2118)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-27 16:16:12 [main] [INFO]  PatchLogExporter - patch (v2118)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-27 16:16:12 [main] [INFO]  PatchLogExporter - patch (v2118)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -111,10 +111,7 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
-        if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
-            return result;
-        }
+        if (Math.abs(yMin) <= functionValueAccuracy)
 
         // reduce interval if min and initial bracket the root
         if (yInitial * yMin < 0) {
@@ -124,7 +121,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
2023-06-27 16:16:12 [main] [INFO]  PatchLogExporter - patch (v2570)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -77,7 +77,6 @@
         }
         this.f = f;
         this.defaultFunctionValueAccuracy = 1.0e-15;
-        this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
     /**
2023-06-27 16:16:12 [main] [INFO]  PatchLogExporter - patch (v2570)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-27 16:16:12 [main] [INFO]  PatchLogExporter - patch (v2570)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-27 16:16:12 [main] [INFO]  PatchLogExporter - patch (v2570)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-27 16:16:12 [main] [INFO]  PatchLogExporter - patch (v2570)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -111,20 +111,16 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
-        if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
-            return result;
-        }
+        if (Math.abs(yMin) <= functionValueAccuracy)
 
         // reduce interval if min and initial bracket the root
-        if (yInitial * yMin < 0) {
+        if (Math.abs(yMin) <= functionValueAccuracy) {
             return solve(f, min, yMin, initial, yInitial, min, yMin);
         }
 
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
2023-06-27 16:16:12 [main] [INFO]  PatchLogExporter - patch (v2850)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,6 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
2023-06-27 16:16:12 [main] [INFO]  PatchLogExporter - patch (v2850)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-27 16:16:12 [main] [INFO]  PatchLogExporter - patch (v2850)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-27 16:16:12 [main] [INFO]  PatchLogExporter - patch (v2850)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-27 16:16:12 [main] [INFO]  PatchLogExporter - patch (v2850)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -111,10 +111,7 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
-        if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
-            return result;
-        }
+        if (Math.abs(yMin) <= functionValueAccuracy)
 
         // reduce interval if min and initial bracket the root
         if (yInitial * yMin < 0) {
@@ -124,7 +121,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -200,7 +196,8 @@
             }
         }
 
-        return ret;
+        int numIterations = 0;
+		return ret;
     }
 
     /**
2023-06-27 16:16:12 [main] [INFO]  PatchLogExporter - patch (v2917)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,6 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
2023-06-27 16:16:12 [main] [INFO]  PatchLogExporter - patch (v2917)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-27 16:16:12 [main] [INFO]  PatchLogExporter - patch (v2917)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-27 16:16:12 [main] [INFO]  PatchLogExporter - patch (v2917)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-27 16:16:12 [main] [INFO]  PatchLogExporter - patch (v2917)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -59,6 +59,7 @@
      */
     public BrentSolver() {
         super(100, 1E-6);
+		this.defaultFunctionValueAccuracy = 1.0e-15;
     }
 
     /** {@inheritDoc} */
@@ -112,7 +113,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +124,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,7 +180,7 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
+                int numIterations = 0;
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
2023-06-27 16:16:12 [main] [INFO]  PatchLogExporter - patch (v3223)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-27 16:16:12 [main] [INFO]  PatchLogExporter - patch (v3223)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-27 16:16:12 [main] [INFO]  PatchLogExporter - patch (v3223)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -65,7 +65,6 @@
         this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
-        this.iterationCount = 0;
     }
 
     /** {@inheritDoc} */
2023-06-27 16:16:12 [main] [INFO]  PatchLogExporter - patch (v3223)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-27 16:16:12 [main] [INFO]  PatchLogExporter - patch (v3223)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -111,10 +111,7 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
-        if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
-            return result;
-        }
+        if (Math.abs(yMin) <= functionValueAccuracy)
 
         // reduce interval if min and initial bracket the root
         if (yInitial * yMin < 0) {
@@ -124,7 +121,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,7 +177,6 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
2023-06-27 16:16:12 [main] [INFO]  PatchLogExporter - patch (v5608)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-27 16:16:12 [main] [INFO]  PatchLogExporter - patch (v5608)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-27 16:16:12 [main] [INFO]  PatchLogExporter - patch (v5608)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-27 16:16:12 [main] [INFO]  PatchLogExporter - patch (v5608)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -59,6 +59,7 @@
      */
     public BrentSolver() {
         super(100, 1E-6);
+		this.defaultFunctionValueAccuracy = 1.0e-15;
     }
 
     /** {@inheritDoc} */
@@ -112,7 +113,7 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
+            double m;
             return result;
         }
 
@@ -124,7 +125,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -177,7 +177,7 @@
         double sign = yMin * yMax;
         if (sign > 0) {
             // check if either value is close to a zero
-            if (Math.abs(yMin) <= functionValueAccuracy) {
+            if (yMin == 0.0) {
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
2023-06-27 16:16:12 [main] [INFO]  PatchLogExporter - patch (v5797)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -139,6 +139,7 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
+		resultComputed = true;
         this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
2023-06-27 16:16:12 [main] [INFO]  PatchLogExporter - patch (v5797)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-27 16:16:12 [main] [INFO]  PatchLogExporter - patch (v5797)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-27 16:16:12 [main] [INFO]  PatchLogExporter - patch (v5797)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-27 16:16:12 [main] [INFO]  PatchLogExporter - patch (v5797)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -106,15 +106,14 @@
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
-            return result;
+            this.resultComputed = true;
+			this.resultComputed = true;
+			return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
-        if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
-            return result;
-        }
+        if (Math.abs(yMin) <= functionValueAccuracy)
 
         // reduce interval if min and initial bracket the root
         if (yInitial * yMin < 0) {
@@ -124,7 +123,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
2023-06-27 16:16:12 [main] [INFO]  PatchLogExporter - patch (v6180)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-27 16:16:12 [main] [INFO]  PatchLogExporter - patch (v6180)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-27 16:16:12 [main] [INFO]  PatchLogExporter - patch (v6180)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-27 16:16:12 [main] [INFO]  PatchLogExporter - patch (v6180)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -59,6 +59,7 @@
      */
     public BrentSolver() {
         super(100, 1E-6);
+		this.defaultFunctionValueAccuracy = 1.0e-15;
     }
 
     /** {@inheritDoc} */
@@ -112,7 +113,7 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
+            this.iterationCount = 0;
             return result;
         }
 
@@ -124,7 +125,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,7 +181,6 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -237,7 +236,8 @@
                 x1 = x2;
                 x2 = x0;
                 y0 = y1;
-                y1 = y2;
+                final double d12 = (y2 - y1) / (x2 - x1);
+				y1 = y2;
                 y2 = y0;
             }
             if (Math.abs(y1) <= functionValueAccuracy) {
2023-06-27 16:16:12 [main] [INFO]  PatchLogExporter - patch (v6808)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-27 16:16:12 [main] [INFO]  PatchLogExporter - patch (v6808)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-27 16:16:12 [main] [INFO]  PatchLogExporter - patch (v6808)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -62,10 +62,8 @@
         this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
-        this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
-        this.iterationCount = 0;
     }
 
     /** {@inheritDoc} */
2023-06-27 16:16:12 [main] [INFO]  PatchLogExporter - patch (v6808)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-27 16:16:12 [main] [INFO]  PatchLogExporter - patch (v6808)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -59,6 +59,7 @@
      */
     public BrentSolver() {
         super(100, 1E-6);
+		this.defaultFunctionValueAccuracy = 1.0e-15;
     }
 
     /** {@inheritDoc} */
@@ -112,7 +113,7 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
+            setResult(min, 0);
             return result;
         }
 
@@ -124,7 +125,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
2023-06-27 16:16:12 [main] [INFO]  PatchLogExporter - patch (v7314)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-27 16:16:12 [main] [INFO]  PatchLogExporter - patch (v7314)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-27 16:16:12 [main] [INFO]  PatchLogExporter - patch (v7314)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-27 16:16:12 [main] [INFO]  PatchLogExporter - patch (v7314)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -59,6 +59,8 @@
      */
     public BrentSolver() {
         super(100, 1E-6);
+		this.defaultFunctionValueAccuracy = 1.0e-15;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
     }
 
     /** {@inheritDoc} */
@@ -112,8 +114,8 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
-            return result;
+            double yMax = f.value(max);
+			return result;
         }
 
         // reduce interval if min and initial bracket the root
@@ -124,7 +126,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -245,7 +246,6 @@
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
-                return result;
             }
             double dx = x2 - x1;
             double tolerance =
2023-06-27 16:16:12 [main] [INFO]  PatchLogExporter - patch (v7351)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-27 16:16:12 [main] [INFO]  PatchLogExporter - patch (v7351)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-27 16:16:12 [main] [INFO]  PatchLogExporter - patch (v7351)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-27 16:16:12 [main] [INFO]  PatchLogExporter - patch (v7351)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -59,6 +59,8 @@
      */
     public BrentSolver() {
         super(100, 1E-6);
+		this.defaultFunctionValueAccuracy = 1.0e-15;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
     }
 
     /** {@inheritDoc} */
@@ -112,7 +114,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +125,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -290,7 +290,7 @@
                     delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
-                    oldDelta = delta;
+                    x0 = x1;
                     delta = p / p1;
                 }
             }
2023-06-27 16:16:12 [main] [INFO]  PatchLogExporter - patch (v8443)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -77,7 +77,6 @@
         }
         this.f = f;
         this.defaultFunctionValueAccuracy = 1.0e-15;
-        this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
     /**
2023-06-27 16:16:12 [main] [INFO]  PatchLogExporter - patch (v8443)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-27 16:16:12 [main] [INFO]  PatchLogExporter - patch (v8443)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-27 16:16:12 [main] [INFO]  PatchLogExporter - patch (v8443)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-27 16:16:12 [main] [INFO]  PatchLogExporter - patch (v8443)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -106,15 +106,13 @@
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
-            return result;
+            this.resultComputed = true;
+			return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
-        if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
-            return result;
-        }
+        if (Math.abs(yMin) <= functionValueAccuracy)
 
         // reduce interval if min and initial bracket the root
         if (yInitial * yMin < 0) {
@@ -124,7 +122,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,7 +178,6 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -245,7 +241,6 @@
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
-                return result;
             }
             double dx = x2 - x1;
             double tolerance =
2023-06-27 16:16:12 [main] [INFO]  PatchLogExporter - patch (v8837)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-27 16:16:12 [main] [INFO]  PatchLogExporter - patch (v8837)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-27 16:16:12 [main] [INFO]  PatchLogExporter - patch (v8837)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -63,7 +63,6 @@
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
-        this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
         this.iterationCount = 0;
     }
2023-06-27 16:16:12 [main] [INFO]  PatchLogExporter - patch (v8837)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-27 16:16:12 [main] [INFO]  PatchLogExporter - patch (v8837)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +123,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,7 +179,6 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -237,7 +234,8 @@
                 x1 = x2;
                 x2 = x0;
                 y0 = y1;
-                y1 = y2;
+                final double d12 = (y2 - y1) / (x2 - x1);
+				y1 = y2;
                 y2 = y0;
             }
             if (Math.abs(y1) <= functionValueAccuracy) {
2023-06-27 16:16:13 [main] [INFO]  PatchLogExporter - patch (v8910)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-27 16:16:13 [main] [INFO]  PatchLogExporter - patch (v8910)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-27 16:16:13 [main] [INFO]  PatchLogExporter - patch (v8910)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-27 16:16:13 [main] [INFO]  PatchLogExporter - patch (v8910)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -59,6 +59,7 @@
      */
     public BrentSolver() {
         super(100, 1E-6);
+		this.defaultFunctionValueAccuracy = 1.0e-15;
     }
 
     /** {@inheritDoc} */
@@ -99,7 +100,6 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
@@ -112,7 +112,9 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
+            double yMax = f.value(max);
+			verifyInterval(min, max);
+			setResult(min, 0);
             return result;
         }
 
@@ -124,7 +126,7 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
+            double fb;
             return result;
         }
 
2023-06-27 16:16:13 [main] [INFO]  PatchLogExporter - patch (v9353)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-27 16:16:13 [main] [INFO]  PatchLogExporter - patch (v9353)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-27 16:16:13 [main] [INFO]  PatchLogExporter - patch (v9353)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -62,10 +62,8 @@
         this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
-        this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
-        this.iterationCount = 0;
     }
 
     /** {@inheritDoc} */
2023-06-27 16:16:13 [main] [INFO]  PatchLogExporter - patch (v9353)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-27 16:16:13 [main] [INFO]  PatchLogExporter - patch (v9353)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -59,6 +59,7 @@
      */
     public BrentSolver() {
         super(100, 1E-6);
+		this.defaultFunctionValueAccuracy = 1.0e-15;
     }
 
     /** {@inheritDoc} */
@@ -112,7 +113,7 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
+            setResult(min, 0);
             return result;
         }
 
@@ -124,7 +125,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -240,7 +240,7 @@
                 y1 = y2;
                 y2 = y0;
             }
-            if (Math.abs(y1) <= functionValueAccuracy) {
+            if (y1 == 0.0) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
2023-06-27 16:16:13 [main] [INFO]  PatchLogExporter - patch (v9788)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -77,7 +77,6 @@
         }
         this.f = f;
         this.defaultFunctionValueAccuracy = 1.0e-15;
-        this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
     /**
2023-06-27 16:16:13 [main] [INFO]  PatchLogExporter - patch (v9788)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-27 16:16:13 [main] [INFO]  PatchLogExporter - patch (v9788)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-27 16:16:13 [main] [INFO]  PatchLogExporter - patch (v9788)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-27 16:16:13 [main] [INFO]  PatchLogExporter - patch (v9788)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -59,6 +59,7 @@
      */
     public BrentSolver() {
         super(100, 1E-6);
+		this.defaultFunctionValueAccuracy = 1.0e-15;
     }
 
     /** {@inheritDoc} */
@@ -112,7 +113,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +124,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,8 +180,9 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
-                ret = max;
+                int numIterations = 0;
+                int i = 0;
+				ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
2023-06-27 16:16:13 [main] [INFO]  PatchLogExporter - patch (v10001)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-27 16:16:13 [main] [INFO]  PatchLogExporter - patch (v10001)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-27 16:16:13 [main] [INFO]  PatchLogExporter - patch (v10001)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -62,10 +62,8 @@
         this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
-        this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
-        this.iterationCount = 0;
     }
 
     /** {@inheritDoc} */
2023-06-27 16:16:13 [main] [INFO]  PatchLogExporter - patch (v10001)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-27 16:16:13 [main] [INFO]  PatchLogExporter - patch (v10001)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -59,6 +59,7 @@
      */
     public BrentSolver() {
         super(100, 1E-6);
+		this.defaultFunctionValueAccuracy = 1.0e-15;
     }
 
     /** {@inheritDoc} */
@@ -112,7 +113,7 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
+            this.defaultFunctionValueAccuracy = 1.0e-15;
             return result;
         }
 
@@ -124,7 +125,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,7 +181,6 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -226,7 +225,8 @@
                          double x2, double y2)
     throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        double delta = x1 - x0;
+        clearResult();
+		double delta = x1 - x0;
         double oldDelta = delta;
 
         int i = 0;
2023-06-27 16:16:13 [main] [INFO]  PatchLogExporter - patch (v10002)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,6 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
2023-06-27 16:16:13 [main] [INFO]  PatchLogExporter - patch (v10002)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-27 16:16:13 [main] [INFO]  PatchLogExporter - patch (v10002)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-27 16:16:13 [main] [INFO]  PatchLogExporter - patch (v10002)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-27 16:16:13 [main] [INFO]  PatchLogExporter - patch (v10002)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -59,6 +59,8 @@
      */
     public BrentSolver() {
         super(100, 1E-6);
+		this.defaultFunctionValueAccuracy = 1.0e-15;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
     }
 
     /** {@inheritDoc} */
@@ -112,8 +114,8 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
-            return result;
+            double yMax = f.value(max);
+			return result;
         }
 
         // reduce interval if min and initial bracket the root
@@ -124,7 +126,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,7 +182,6 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -245,6 +245,7 @@
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
+				y0 = y1;
                 return result;
             }
             double dx = x2 - x1;
2023-06-27 16:16:13 [main] [INFO]  PatchLogExporter - patch (v10066)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -77,7 +77,7 @@
         }
         this.f = f;
         this.defaultFunctionValueAccuracy = 1.0e-15;
-        this.functionValueAccuracy = defaultFunctionValueAccuracy;
+        clearResult();
     }
 
     /**
2023-06-27 16:16:13 [main] [INFO]  PatchLogExporter - patch (v10066)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-27 16:16:13 [main] [INFO]  PatchLogExporter - patch (v10066)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-27 16:16:13 [main] [INFO]  PatchLogExporter - patch (v10066)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -63,7 +63,6 @@
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
-        this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
         this.iterationCount = 0;
     }
2023-06-27 16:16:13 [main] [INFO]  PatchLogExporter - patch (v10066)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-27 16:16:13 [main] [INFO]  PatchLogExporter - patch (v10066)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -104,15 +104,12 @@
 
         // return the initial guess if it is good enough
         double yInitial = f.value(initial);
-        if (Math.abs(yInitial) <= functionValueAccuracy) {
-            setResult(initial, 0);
-            return result;
-        }
+        if (Math.abs(yInitial) <= functionValueAccuracy)
+			return result;
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +121,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -245,6 +241,7 @@
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
+				y0 = y1;
                 return result;
             }
             double dx = x2 - x1;
2023-06-27 16:16:13 [main] [INFO]  PatchLogExporter - patch (v10459)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-27 16:16:13 [main] [INFO]  PatchLogExporter - patch (v10459)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-27 16:16:13 [main] [INFO]  PatchLogExporter - patch (v10459)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-27 16:16:13 [main] [INFO]  PatchLogExporter - patch (v10459)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -59,6 +59,8 @@
      */
     public BrentSolver() {
         super(100, 1E-6);
+		this.defaultFunctionValueAccuracy = 1.0e-15;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
     }
 
     /** {@inheritDoc} */
@@ -106,13 +108,13 @@
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
-            return result;
+            this.resultComputed = true;
+			return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +126,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,7 +182,6 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -240,7 +240,7 @@
                 y1 = y2;
                 y2 = y0;
             }
-            if (Math.abs(y1) <= functionValueAccuracy) {
+            if (y1 == 0.0) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
2023-06-27 16:16:13 [main] [INFO]  PatchLogExporter - patch (v10513)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -139,6 +139,7 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
+		resultComputed = true;
         this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
2023-06-27 16:16:13 [main] [INFO]  PatchLogExporter - patch (v10513)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-27 16:16:13 [main] [INFO]  PatchLogExporter - patch (v10513)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-27 16:16:13 [main] [INFO]  PatchLogExporter - patch (v10513)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-27 16:16:13 [main] [INFO]  PatchLogExporter - patch (v10513)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -59,6 +59,8 @@
      */
     public BrentSolver() {
         super(100, 1E-6);
+		this.defaultFunctionValueAccuracy = 1.0e-15;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
     }
 
     /** {@inheritDoc} */
@@ -106,14 +108,15 @@
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
-            return result;
+            this.resultComputed = true;
+			return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
-            return result;
+            double yMax = f.value(max);
+			return result;
         }
 
         // reduce interval if min and initial bracket the root
@@ -124,7 +127,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -226,7 +228,8 @@
                          double x2, double y2)
     throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        double delta = x1 - x0;
+        clearResult();
+		double delta = x1 - x0;
         double oldDelta = delta;
 
         int i = 0;
2023-06-27 16:16:13 [main] [INFO]  PatchLogExporter - patch (v10546)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-27 16:16:13 [main] [INFO]  PatchLogExporter - patch (v10546)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-27 16:16:13 [main] [INFO]  PatchLogExporter - patch (v10546)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -65,7 +65,6 @@
         this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
-        this.iterationCount = 0;
     }
 
     /** {@inheritDoc} */
2023-06-27 16:16:13 [main] [INFO]  PatchLogExporter - patch (v10546)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-27 16:16:13 [main] [INFO]  PatchLogExporter - patch (v10546)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -106,13 +106,15 @@
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
-            return result;
+            functionValueAccuracy = defaultFunctionValueAccuracy;
+			return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
+            setResult(min, 0);
+			double m;
             return result;
         }
 
@@ -124,7 +126,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -226,7 +227,8 @@
                          double x2, double y2)
     throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        double delta = x1 - x0;
+        clearResult();
+		double delta = x1 - x0;
         double oldDelta = delta;
 
         int i = 0;
@@ -237,7 +239,8 @@
                 x1 = x2;
                 x2 = x0;
                 y0 = y1;
-                y1 = y2;
+                final double d12 = (y2 - y1) / (x2 - x1);
+				y1 = y2;
                 y2 = y0;
             }
             if (Math.abs(y1) <= functionValueAccuracy) {
2023-06-27 16:16:13 [main] [INFO]  PatchLogExporter - patch (v11356)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-27 16:16:13 [main] [INFO]  PatchLogExporter - patch (v11356)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-27 16:16:13 [main] [INFO]  PatchLogExporter - patch (v11356)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -62,10 +62,7 @@
         this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
-        this.relativeAccuracy = defaultRelativeAccuracy;
-        this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
-        this.iterationCount = 0;
     }
 
     /** {@inheritDoc} */
2023-06-27 16:16:13 [main] [INFO]  PatchLogExporter - patch (v11356)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-27 16:16:13 [main] [INFO]  PatchLogExporter - patch (v11356)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -59,6 +59,7 @@
      */
     public BrentSolver() {
         super(100, 1E-6);
+		this.defaultFunctionValueAccuracy = 1.0e-15;
     }
 
     /** {@inheritDoc} */
@@ -104,15 +105,13 @@
 
         // return the initial guess if it is good enough
         double yInitial = f.value(initial);
-        if (Math.abs(yInitial) <= functionValueAccuracy) {
-            setResult(initial, 0);
-            return result;
-        }
+        if (Math.abs(yInitial) <= functionValueAccuracy)
+			return result;
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
+            setResult(min, 0);
             return result;
         }
 
@@ -124,7 +123,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
2023-06-27 16:16:13 [main] [INFO]  PatchLogExporter - patch (v11640)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -77,7 +77,7 @@
         }
         this.f = f;
         this.defaultFunctionValueAccuracy = 1.0e-15;
-        this.functionValueAccuracy = defaultFunctionValueAccuracy;
+        clearResult();
     }
 
     /**
2023-06-27 16:16:13 [main] [INFO]  PatchLogExporter - patch (v11640)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-27 16:16:13 [main] [INFO]  PatchLogExporter - patch (v11640)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-27 16:16:13 [main] [INFO]  PatchLogExporter - patch (v11640)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-27 16:16:13 [main] [INFO]  PatchLogExporter - patch (v11640)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -59,6 +59,7 @@
      */
     public BrentSolver() {
         super(100, 1E-6);
+		this.defaultFunctionValueAccuracy = 1.0e-15;
     }
 
     /** {@inheritDoc} */
@@ -100,19 +101,18 @@
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
         clearResult();
-        verifySequence(min, initial, max);
+        int i = 0;
+		verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
         double yInitial = f.value(initial);
-        if (Math.abs(yInitial) <= functionValueAccuracy) {
-            setResult(initial, 0);
-            return result;
-        }
+        if (Math.abs(yInitial) <= functionValueAccuracy)
+			return result;
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
+            setResult(min, 0);
             return result;
         }
 
@@ -124,7 +124,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -237,7 +236,8 @@
                 x1 = x2;
                 x2 = x0;
                 y0 = y1;
-                y1 = y2;
+                final double d12 = (y2 - y1) / (x2 - x1);
+				y1 = y2;
                 y2 = y0;
             }
             if (Math.abs(y1) <= functionValueAccuracy) {
2023-06-27 16:16:13 [main] [INFO]  PatchLogExporter - patch (v11740)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-27 16:16:13 [main] [INFO]  PatchLogExporter - patch (v11740)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-27 16:16:13 [main] [INFO]  PatchLogExporter - patch (v11740)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -62,10 +62,7 @@
         this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
-        this.relativeAccuracy = defaultRelativeAccuracy;
-        this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
-        this.iterationCount = 0;
     }
 
     /** {@inheritDoc} */
2023-06-27 16:16:13 [main] [INFO]  PatchLogExporter - patch (v11740)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-27 16:16:13 [main] [INFO]  PatchLogExporter - patch (v11740)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -59,6 +59,7 @@
      */
     public BrentSolver() {
         super(100, 1E-6);
+		this.defaultFunctionValueAccuracy = 1.0e-15;
     }
 
     /** {@inheritDoc} */
@@ -112,7 +113,7 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
+            setResult(min, 0);
             return result;
         }
 
@@ -124,7 +125,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,7 +181,6 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
2023-06-27 16:16:13 [main] [INFO]  PatchLogExporter - patch (v12536)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -77,7 +77,6 @@
         }
         this.f = f;
         this.defaultFunctionValueAccuracy = 1.0e-15;
-        this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
     /**
2023-06-27 16:16:13 [main] [INFO]  PatchLogExporter - patch (v12536)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-27 16:16:13 [main] [INFO]  PatchLogExporter - patch (v12536)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-27 16:16:13 [main] [INFO]  PatchLogExporter - patch (v12536)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -63,7 +63,6 @@
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
-        this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
         this.iterationCount = 0;
     }
2023-06-27 16:16:13 [main] [INFO]  PatchLogExporter - patch (v12536)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-27 16:16:13 [main] [INFO]  PatchLogExporter - patch (v12536)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -59,6 +59,7 @@
      */
     public BrentSolver() {
         super(100, 1E-6);
+		this.defaultFunctionValueAccuracy = 1.0e-15;
     }
 
     /** {@inheritDoc} */
@@ -112,7 +113,7 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
+            setResult(min, 0);
             return result;
         }
 
@@ -124,7 +125,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -226,7 +226,8 @@
                          double x2, double y2)
     throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        double delta = x1 - x0;
+        clearResult();
+		double delta = x1 - x0;
         double oldDelta = delta;
 
         int i = 0;
@@ -240,7 +241,7 @@
                 y1 = y2;
                 y2 = y0;
             }
-            if (Math.abs(y1) <= functionValueAccuracy) {
+            if (y1 == 0.0) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
2023-06-27 16:16:13 [main] [INFO]  PatchLogExporter - patch (v17664)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-27 16:16:13 [main] [INFO]  PatchLogExporter - patch (v17664)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-27 16:16:13 [main] [INFO]  PatchLogExporter - patch (v17664)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-27 16:16:13 [main] [INFO]  PatchLogExporter - patch (v17664)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -59,6 +59,10 @@
      */
     public BrentSolver() {
         super(100, 1E-6);
+		this.defaultFunctionValueAccuracy = 1.0e-15;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
     }
 
     /** {@inheritDoc} */
@@ -112,7 +116,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +127,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -226,7 +228,8 @@
                          double x2, double y2)
     throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        double delta = x1 - x0;
+        clearResult();
+		double delta = x1 - x0;
         double oldDelta = delta;
 
         int i = 0;
@@ -245,6 +248,7 @@
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
+				y0 = y1;
                 return result;
             }
             double dx = x2 - x1;
2023-06-27 16:16:13 [main] [INFO]  PatchLogExporter - patch (v19292)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-27 16:16:13 [main] [INFO]  PatchLogExporter - patch (v19292)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-27 16:16:13 [main] [INFO]  PatchLogExporter - patch (v19292)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-27 16:16:13 [main] [INFO]  PatchLogExporter - patch (v19292)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -59,6 +59,10 @@
      */
     public BrentSolver() {
         super(100, 1E-6);
+		this.defaultFunctionValueAccuracy = 1.0e-15;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
     }
 
     /** {@inheritDoc} */
@@ -112,7 +116,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +127,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,8 +183,10 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
-                ret = max;
+                this.f = f;
+				setResult(max, 0);
+                double oldx = Double.POSITIVE_INFINITY;
+				ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
@@ -226,7 +230,8 @@
                          double x2, double y2)
     throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        double delta = x1 - x0;
+        clearResult();
+		double delta = x1 - x0;
         double oldDelta = delta;
 
         int i = 0;
@@ -245,6 +250,7 @@
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
+				y0 = y1;
                 return result;
             }
             double dx = x2 - x1;
2023-06-27 16:16:13 [main] [INFO]  PatchLogExporter - patch (v19332)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -139,6 +139,7 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
+		resultComputed = true;
         this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
2023-06-27 16:16:13 [main] [INFO]  PatchLogExporter - patch (v19332)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-27 16:16:13 [main] [INFO]  PatchLogExporter - patch (v19332)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-27 16:16:13 [main] [INFO]  PatchLogExporter - patch (v19332)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-27 16:16:13 [main] [INFO]  PatchLogExporter - patch (v19332)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -106,14 +106,15 @@
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
-            return result;
+            this.defaultFunctionValueAccuracy = 1.0e-15;
+			return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
-            return result;
+            verifyInterval(min, max);
+			return result;
         }
 
         // reduce interval if min and initial bracket the root
@@ -124,7 +125,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -189,7 +189,8 @@
                         NON_BRACKETING_MESSAGE, min, max, yMin, yMax);
             }
         } else if (sign < 0){
-            // solve using only the first endpoint as initial guess
+            int iterationCount = 0;
+			// solve using only the first endpoint as initial guess
             ret = solve(f, min, yMin, max, yMax, min, yMin);
         } else {
             // either min or max is a root
@@ -226,7 +227,9 @@
                          double x2, double y2)
     throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        double delta = x1 - x0;
+        clearResult();
+		clearResult();
+		double delta = x1 - x0;
         double oldDelta = delta;
 
         int i = 0;
@@ -245,6 +248,7 @@
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
+				y0 = y1;
                 return result;
             }
             double dx = x2 - x1;
2023-06-27 16:16:13 [main] [INFO]  PatchLogExporter - patch (v21645)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,6 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
@@ -139,6 +138,7 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
+		resultComputed = true;
         this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
@@ -162,7 +162,6 @@
      * Convenience function for implementations.
      */
     protected final void clearResult() {
-        this.iterationCount = 0;
         this.resultComputed = false;
     }
 
2023-06-27 16:16:13 [main] [INFO]  PatchLogExporter - patch (v21645)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-27 16:16:13 [main] [INFO]  PatchLogExporter - patch (v21645)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-27 16:16:13 [main] [INFO]  PatchLogExporter - patch (v21645)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -60,7 +60,6 @@
     protected ConvergingAlgorithmImpl(final int defaultMaximalIterationCount,
                                       final double defaultAbsoluteAccuracy) {
         this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
-        this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
2023-06-27 16:16:13 [main] [INFO]  PatchLogExporter - patch (v21645)
--- org.apache.commons.math.ConvergenceException
+++ org.apache.commons.math.ConvergenceException
@@ -42,7 +42,6 @@
      * @since 1.2
      */
     public ConvergenceException(String pattern, Object ... arguments) {
-        super(pattern, arguments);
     }
 
     /**
2023-06-27 16:16:13 [main] [INFO]  PatchLogExporter - patch (v21645)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-27 16:16:13 [main] [INFO]  PatchLogExporter - patch (v21645)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -59,6 +59,7 @@
      */
     public BrentSolver() {
         super(100, 1E-6);
+		this.defaultFunctionValueAccuracy = 1.0e-15;
     }
 
     /** {@inheritDoc} */
@@ -112,7 +113,7 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
+            double fmin;
             return result;
         }
 
@@ -124,7 +125,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -226,7 +226,8 @@
                          double x2, double y2)
     throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        double delta = x1 - x0;
+        clearResult();
+		double delta = x1 - x0;
         double oldDelta = delta;
 
         int i = 0;
2023-06-27 16:16:13 [main] [INFO]  PatchLogExporter - patch (v22993)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,6 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
@@ -139,7 +138,7 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
-        this.iterationCount = iterationCount;
+		resultComputed = true;
         this.resultComputed = true;
     }
 
2023-06-27 16:16:13 [main] [INFO]  PatchLogExporter - patch (v22993)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-27 16:16:13 [main] [INFO]  PatchLogExporter - patch (v22993)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-27 16:16:13 [main] [INFO]  PatchLogExporter - patch (v22993)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-27 16:16:13 [main] [INFO]  PatchLogExporter - patch (v22993)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -106,13 +106,14 @@
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
-            return result;
+            this.defaultFunctionValueAccuracy = 1.0e-15;
+			return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
+            double fmin;
             return result;
         }
 
@@ -124,7 +125,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,7 +181,6 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -189,7 +188,8 @@
                         NON_BRACKETING_MESSAGE, min, max, yMin, yMax);
             }
         } else if (sign < 0){
-            // solve using only the first endpoint as initial guess
+            int iterationCount = 0;
+			// solve using only the first endpoint as initial guess
             ret = solve(f, min, yMin, max, yMax, min, yMin);
         } else {
             // either min or max is a root
@@ -226,7 +226,10 @@
                          double x2, double y2)
     throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        double delta = x1 - x0;
+        clearResult();
+		clearResult();
+		clearResult();
+		double delta = x1 - x0;
         double oldDelta = delta;
 
         int i = 0;
2023-06-27 16:16:13 [main] [INFO]  PatchLogExporter - patch (v23328)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,6 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
@@ -139,7 +138,6 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
-        this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
 
2023-06-27 16:16:13 [main] [INFO]  PatchLogExporter - patch (v23328)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-27 16:16:13 [main] [INFO]  PatchLogExporter - patch (v23328)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-27 16:16:13 [main] [INFO]  PatchLogExporter - patch (v23328)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -60,7 +60,6 @@
     protected ConvergingAlgorithmImpl(final int defaultMaximalIterationCount,
                                       final double defaultAbsoluteAccuracy) {
         this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
-        this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
2023-06-27 16:16:13 [main] [INFO]  PatchLogExporter - patch (v23328)
--- org.apache.commons.math.ConvergenceException
+++ org.apache.commons.math.ConvergenceException
@@ -42,7 +42,6 @@
      * @since 1.2
      */
     public ConvergenceException(String pattern, Object ... arguments) {
-        super(pattern, arguments);
     }
 
     /**
2023-06-27 16:16:13 [main] [INFO]  PatchLogExporter - patch (v23328)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-27 16:16:13 [main] [INFO]  PatchLogExporter - patch (v23328)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -59,6 +59,7 @@
      */
     public BrentSolver() {
         super(100, 1E-6);
+		this.defaultFunctionValueAccuracy = 1.0e-15;
     }
 
     /** {@inheritDoc} */
@@ -112,7 +113,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +124,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,7 +180,8 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
+                this.f = f;
+				setResult(max, 0);
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -226,7 +226,8 @@
                          double x2, double y2)
     throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        double delta = x1 - x0;
+        clearResult();
+		double delta = x1 - x0;
         double oldDelta = delta;
 
         int i = 0;
@@ -245,6 +246,7 @@
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
+				y0 = y1;
                 return result;
             }
             double dx = x2 - x1;
2023-06-27 16:16:13 [main] [INFO]  PatchLogExporter - patch (v23711)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -139,6 +139,7 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
+		resultComputed = true;
         this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
2023-06-27 16:16:13 [main] [INFO]  PatchLogExporter - patch (v23711)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-27 16:16:13 [main] [INFO]  PatchLogExporter - patch (v23711)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-27 16:16:13 [main] [INFO]  PatchLogExporter - patch (v23711)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-27 16:16:13 [main] [INFO]  PatchLogExporter - patch (v23711)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -59,6 +59,9 @@
      */
     public BrentSolver() {
         super(100, 1E-6);
+		this.defaultFunctionValueAccuracy = 1.0e-15;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
     }
 
     /** {@inheritDoc} */
@@ -99,7 +102,6 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
@@ -112,7 +114,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +125,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -178,11 +178,11 @@
         if (sign > 0) {
             // check if either value is close to a zero
             if (Math.abs(yMin) <= functionValueAccuracy) {
-                setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
                 setResult(max, 0);
-                ret = max;
+				int i = 0;
+                return result;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
@@ -226,7 +226,8 @@
                          double x2, double y2)
     throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        double delta = x1 - x0;
+        clearResult();
+		double delta = x1 - x0;
         double oldDelta = delta;
 
         int i = 0;
2023-06-27 16:16:13 [main] [INFO]  PatchLogExporter - patch (v23747)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -139,7 +139,7 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
-        this.iterationCount = iterationCount;
+		this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
 
2023-06-27 16:16:13 [main] [INFO]  PatchLogExporter - patch (v23747)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-27 16:16:13 [main] [INFO]  PatchLogExporter - patch (v23747)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-27 16:16:13 [main] [INFO]  PatchLogExporter - patch (v23747)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-27 16:16:13 [main] [INFO]  PatchLogExporter - patch (v23747)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -59,6 +59,9 @@
      */
     public BrentSolver() {
         super(100, 1E-6);
+		this.defaultFunctionValueAccuracy = 1.0e-15;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
     }
 
     /** {@inheritDoc} */
@@ -99,7 +102,6 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
@@ -112,7 +114,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +125,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -178,11 +178,11 @@
         if (sign > 0) {
             // check if either value is close to a zero
             if (Math.abs(yMin) <= functionValueAccuracy) {
-                setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
                 setResult(max, 0);
-                ret = max;
+				int i = 0;
+                return result;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
@@ -226,7 +226,8 @@
                          double x2, double y2)
     throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        double delta = x1 - x0;
+        clearResult();
+		double delta = x1 - x0;
         double oldDelta = delta;
 
         int i = 0;
2023-06-27 16:16:13 [main] [INFO]  PatchLogExporter - patch (v24508)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,6 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
2023-06-27 16:16:13 [main] [INFO]  PatchLogExporter - patch (v24508)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-27 16:16:13 [main] [INFO]  PatchLogExporter - patch (v24508)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-27 16:16:13 [main] [INFO]  PatchLogExporter - patch (v24508)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-27 16:16:13 [main] [INFO]  PatchLogExporter - patch (v24508)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -59,6 +59,8 @@
      */
     public BrentSolver() {
         super(100, 1E-6);
+		this.defaultFunctionValueAccuracy = 1.0e-15;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
     }
 
     /** {@inheritDoc} */
@@ -106,13 +108,14 @@
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
-            return result;
+            this.defaultFunctionValueAccuracy = 1.0e-15;
+			return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
+            double fmin;
             return result;
         }
 
@@ -124,7 +127,7 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
+            this.functionValueAccuracy = defaultFunctionValueAccuracy;
             return result;
         }
 
@@ -226,7 +229,8 @@
                          double x2, double y2)
     throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        double delta = x1 - x0;
+        clearResult();
+		double delta = x1 - x0;
         double oldDelta = delta;
 
         int i = 0;
@@ -240,11 +244,12 @@
                 y1 = y2;
                 y2 = y0;
             }
-            if (Math.abs(y1) <= functionValueAccuracy) {
+            if (y1 == 0.0) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
+				y0 = y1;
                 return result;
             }
             double dx = x2 - x1;
2023-06-27 16:16:13 [main] [INFO]  PatchLogExporter - patch (v24514)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-27 16:16:13 [main] [INFO]  PatchLogExporter - patch (v24514)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-27 16:16:13 [main] [INFO]  PatchLogExporter - patch (v24514)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-27 16:16:13 [main] [INFO]  PatchLogExporter - patch (v24514)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -59,6 +59,8 @@
      */
     public BrentSolver() {
         super(100, 1E-6);
+		this.defaultFunctionValueAccuracy = 1.0e-15;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
     }
 
     /** {@inheritDoc} */
@@ -106,13 +108,14 @@
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
-            return result;
+            this.defaultFunctionValueAccuracy = 1.0e-15;
+			return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
+            double fmin;
             return result;
         }
 
@@ -124,7 +127,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,7 +183,8 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
+                this.f = f;
+				setResult(max, 0);
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -226,7 +229,8 @@
                          double x2, double y2)
     throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        double delta = x1 - x0;
+        clearResult();
+		double delta = x1 - x0;
         double oldDelta = delta;
 
         int i = 0;
@@ -245,6 +249,8 @@
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
+				y0 = y1;
+				y0 = y1;
                 return result;
             }
             double dx = x2 - x1;
2023-06-27 16:16:13 [main] [INFO]  PatchLogExporter - patch (v24543)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -139,7 +139,6 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
-        this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
 
2023-06-27 16:16:13 [main] [INFO]  PatchLogExporter - patch (v24543)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-27 16:16:13 [main] [INFO]  PatchLogExporter - patch (v24543)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-27 16:16:13 [main] [INFO]  PatchLogExporter - patch (v24543)
--- org.apache.commons.math.ConvergenceException
+++ org.apache.commons.math.ConvergenceException
@@ -42,7 +42,6 @@
      * @since 1.2
      */
     public ConvergenceException(String pattern, Object ... arguments) {
-        super(pattern, arguments);
     }
 
     /**
2023-06-27 16:16:13 [main] [INFO]  PatchLogExporter - patch (v24543)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-27 16:16:13 [main] [INFO]  PatchLogExporter - patch (v24543)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -59,6 +59,9 @@
      */
     public BrentSolver() {
         super(100, 1E-6);
+		this.defaultFunctionValueAccuracy = 1.0e-15;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
     }
 
     /** {@inheritDoc} */
@@ -106,13 +109,13 @@
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
-            return result;
+            this.defaultFunctionValueAccuracy = 1.0e-15;
+			return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +127,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -182,6 +184,7 @@
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
                 setResult(max, 0);
+				clearResult();
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -189,7 +192,8 @@
                         NON_BRACKETING_MESSAGE, min, max, yMin, yMax);
             }
         } else if (sign < 0){
-            // solve using only the first endpoint as initial guess
+            int iterationCount = 0;
+			// solve using only the first endpoint as initial guess
             ret = solve(f, min, yMin, max, yMax, min, yMin);
         } else {
             // either min or max is a root
@@ -245,7 +249,8 @@
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
-                return result;
+                x1 = x2;
+				return result;
             }
             double dx = x2 - x1;
             double tolerance =
2023-06-27 16:16:13 [main] [INFO]  PatchLogExporter - patch (v24917)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -77,7 +77,6 @@
         }
         this.f = f;
         this.defaultFunctionValueAccuracy = 1.0e-15;
-        this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
     /**
@@ -139,6 +138,7 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
+		resultComputed = true;
         this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
2023-06-27 16:16:13 [main] [INFO]  PatchLogExporter - patch (v24917)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-27 16:16:13 [main] [INFO]  PatchLogExporter - patch (v24917)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-27 16:16:13 [main] [INFO]  PatchLogExporter - patch (v24917)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-27 16:16:13 [main] [INFO]  PatchLogExporter - patch (v24917)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -59,6 +59,7 @@
      */
     public BrentSolver() {
         super(100, 1E-6);
+		this.defaultFunctionValueAccuracy = 1.0e-15;
     }
 
     /** {@inheritDoc} */
@@ -112,7 +113,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +124,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -226,7 +225,9 @@
                          double x2, double y2)
     throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        double delta = x1 - x0;
+        clearResult();
+		clearResult();
+		double delta = x1 - x0;
         double oldDelta = delta;
 
         int i = 0;
@@ -245,6 +246,8 @@
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
+				y0 = y1;
+				y0 = y1;
                 return result;
             }
             double dx = x2 - x1;
2023-06-27 16:16:13 [main] [INFO]  PatchLogExporter - patch (v25311)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,6 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
@@ -139,7 +138,7 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
-        this.iterationCount = iterationCount;
+		resultComputed = true;
         this.resultComputed = true;
     }
 
@@ -154,7 +153,6 @@
                                    final int iterationCount) {
         this.result         = x;
         this.functionValue  = fx;
-        this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
 
2023-06-27 16:16:13 [main] [INFO]  PatchLogExporter - patch (v25311)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-27 16:16:13 [main] [INFO]  PatchLogExporter - patch (v25311)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-27 16:16:13 [main] [INFO]  PatchLogExporter - patch (v25311)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-27 16:16:13 [main] [INFO]  PatchLogExporter - patch (v25311)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -59,6 +59,7 @@
      */
     public BrentSolver() {
         super(100, 1E-6);
+		this.defaultFunctionValueAccuracy = 1.0e-15;
     }
 
     /** {@inheritDoc} */
@@ -112,7 +113,7 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
+            double fmin;
             return result;
         }
 
@@ -124,7 +125,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,7 +181,8 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
+                this.f = f;
+				setResult(max, 0);
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -245,6 +246,8 @@
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
+				y0 = y1;
+				y0 = y1;
                 return result;
             }
             double dx = x2 - x1;
2023-06-27 16:16:13 [main] [INFO]  PatchLogExporter - patch (v26197)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -77,7 +77,6 @@
         }
         this.f = f;
         this.defaultFunctionValueAccuracy = 1.0e-15;
-        this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
     /**
2023-06-27 16:16:13 [main] [INFO]  PatchLogExporter - patch (v26197)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-27 16:16:13 [main] [INFO]  PatchLogExporter - patch (v26197)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-27 16:16:13 [main] [INFO]  PatchLogExporter - patch (v26197)
--- org.apache.commons.math.ConvergenceException
+++ org.apache.commons.math.ConvergenceException
@@ -42,7 +42,6 @@
      * @since 1.2
      */
     public ConvergenceException(String pattern, Object ... arguments) {
-        super(pattern, arguments);
     }
 
     /**
2023-06-27 16:16:13 [main] [INFO]  PatchLogExporter - patch (v26197)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-27 16:16:13 [main] [INFO]  PatchLogExporter - patch (v26197)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -59,6 +59,7 @@
      */
     public BrentSolver() {
         super(100, 1E-6);
+		this.defaultFunctionValueAccuracy = 1.0e-15;
     }
 
     /** {@inheritDoc} */
@@ -106,13 +107,13 @@
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
-            return result;
+            this.defaultFunctionValueAccuracy = 1.0e-15;
+			return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +125,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,7 +181,8 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
+                this.f = f;
+				setResult(max, 0);
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -226,10 +227,13 @@
                          double x2, double y2)
     throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        double delta = x1 - x0;
+        clearResult();
+		clearResult();
+		double delta = x1 - x0;
         double oldDelta = delta;
 
-        int i = 0;
+        this.iterationCount = iterationCount;
+		int i = 0;
         while (i < maximalIterationCount) {
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
@@ -245,7 +249,8 @@
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
-                return result;
+                x1 = x2;
+				return result;
             }
             double dx = x2 - x1;
             double tolerance =
2023-06-27 16:16:13 [main] [INFO]  PatchLogExporter - patch (v28161)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -139,6 +139,7 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
+		resultComputed = true;
         this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
@@ -162,7 +163,6 @@
      * Convenience function for implementations.
      */
     protected final void clearResult() {
-        this.iterationCount = 0;
         this.resultComputed = false;
     }
 
2023-06-27 16:16:13 [main] [INFO]  PatchLogExporter - patch (v28161)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-27 16:16:13 [main] [INFO]  PatchLogExporter - patch (v28161)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-27 16:16:13 [main] [INFO]  PatchLogExporter - patch (v28161)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-27 16:16:13 [main] [INFO]  PatchLogExporter - patch (v28161)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -59,6 +59,7 @@
      */
     public BrentSolver() {
         super(100, 1E-6);
+		this.defaultFunctionValueAccuracy = 1.0e-15;
     }
 
     /** {@inheritDoc} */
@@ -99,7 +100,6 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
@@ -112,7 +112,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +123,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -177,7 +175,7 @@
         double sign = yMin * yMax;
         if (sign > 0) {
             // check if either value is close to a zero
-            if (Math.abs(yMin) <= functionValueAccuracy) {
+            if (f == null) {
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
@@ -226,7 +224,10 @@
                          double x2, double y2)
     throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        double delta = x1 - x0;
+        clearResult();
+		clearResult();
+		clearResult();
+		double delta = x1 - x0;
         double oldDelta = delta;
 
         int i = 0;
@@ -245,7 +246,8 @@
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
-                return result;
+                x1 = x2;
+				return result;
             }
             double dx = x2 - x1;
             double tolerance =
2023-06-27 16:16:13 [main] [INFO]  PatchLogExporter - patch (v28199)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -77,7 +77,6 @@
         }
         this.f = f;
         this.defaultFunctionValueAccuracy = 1.0e-15;
-        this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
     /**
@@ -139,6 +138,8 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
+		resultComputed = true;
+		resultComputed = true;
         this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
2023-06-27 16:16:13 [main] [INFO]  PatchLogExporter - patch (v28199)
--- org.apache.commons.math.MaxIterationsExceededException
+++ org.apache.commons.math.MaxIterationsExceededException
@@ -41,7 +41,9 @@
      */
     public MaxIterationsExceededException(final int maxIterations) {
         super("Maximal number of iterations ({0}) exceeded", maxIterations);
-        this.maxIterations = maxIterations;
+        printStackTrace(System.err);
+		printStackTrace(System.err);
+		this.maxIterations = maxIterations;
     }
 
     /**
2023-06-27 16:16:13 [main] [INFO]  PatchLogExporter - patch (v28199)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-27 16:16:13 [main] [INFO]  PatchLogExporter - patch (v28199)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-27 16:16:13 [main] [INFO]  PatchLogExporter - patch (v28199)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-27 16:16:13 [main] [INFO]  PatchLogExporter - patch (v28199)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -59,6 +59,7 @@
      */
     public BrentSolver() {
         super(100, 1E-6);
+		this.defaultFunctionValueAccuracy = 1.0e-15;
     }
 
     /** {@inheritDoc} */
@@ -106,14 +107,15 @@
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
-            return result;
+            this.defaultFunctionValueAccuracy = 1.0e-15;
+			return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
-            return result;
+            verifyInterval(min, max);
+			return result;
         }
 
         // reduce interval if min and initial bracket the root
@@ -124,7 +126,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,7 +182,6 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -245,6 +245,7 @@
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
+				y0 = y1;
                 return result;
             }
             double dx = x2 - x1;
2023-06-27 16:16:13 [main] [INFO]  PatchLogExporter - patch (v28200)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,6 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
@@ -139,7 +138,6 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
-        this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
 
@@ -154,7 +152,6 @@
                                    final int iterationCount) {
         this.result         = x;
         this.functionValue  = fx;
-        this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
 
2023-06-27 16:16:13 [main] [INFO]  PatchLogExporter - patch (v28200)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-27 16:16:13 [main] [INFO]  PatchLogExporter - patch (v28200)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-27 16:16:13 [main] [INFO]  PatchLogExporter - patch (v28200)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-27 16:16:13 [main] [INFO]  PatchLogExporter - patch (v28200)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -59,6 +59,7 @@
      */
     public BrentSolver() {
         super(100, 1E-6);
+		this.defaultFunctionValueAccuracy = 1.0e-15;
     }
 
     /** {@inheritDoc} */
@@ -112,8 +113,8 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
-            return result;
+            verifyInterval(min, max);
+			return result;
         }
 
         // reduce interval if min and initial bracket the root
@@ -124,7 +125,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -177,12 +177,12 @@
         double sign = yMin * yMax;
         if (sign > 0) {
             // check if either value is close to a zero
-            if (Math.abs(yMin) <= functionValueAccuracy) {
+            if (f == null) {
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
                 setResult(max, 0);
-                ret = max;
+                return result;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
@@ -226,7 +226,12 @@
                          double x2, double y2)
     throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        double delta = x1 - x0;
+        clearResult();
+		clearResult();
+		clearResult();
+		clearResult();
+		clearResult();
+		double delta = x1 - x0;
         double oldDelta = delta;
 
         int i = 0;
2023-06-27 16:16:13 [main] [INFO]  PatchLogExporter - patch (v28551)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -77,7 +77,6 @@
         }
         this.f = f;
         this.defaultFunctionValueAccuracy = 1.0e-15;
-        this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
     /**
@@ -139,6 +138,7 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
+		resultComputed = true;
         this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
2023-06-27 16:16:13 [main] [INFO]  PatchLogExporter - patch (v28551)
--- org.apache.commons.math.MaxIterationsExceededException
+++ org.apache.commons.math.MaxIterationsExceededException
@@ -41,7 +41,9 @@
      */
     public MaxIterationsExceededException(final int maxIterations) {
         super("Maximal number of iterations ({0}) exceeded", maxIterations);
-        this.maxIterations = maxIterations;
+        printStackTrace(System.err);
+		printStackTrace(System.err);
+		this.maxIterations = maxIterations;
     }
 
     /**
2023-06-27 16:16:13 [main] [INFO]  PatchLogExporter - patch (v28551)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-27 16:16:13 [main] [INFO]  PatchLogExporter - patch (v28551)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-27 16:16:13 [main] [INFO]  PatchLogExporter - patch (v28551)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-27 16:16:13 [main] [INFO]  PatchLogExporter - patch (v28551)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -59,6 +59,7 @@
      */
     public BrentSolver() {
         super(100, 1E-6);
+		this.defaultFunctionValueAccuracy = 1.0e-15;
     }
 
     /** {@inheritDoc} */
@@ -106,14 +107,15 @@
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
-            return result;
+            this.defaultFunctionValueAccuracy = 1.0e-15;
+			return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
-            return result;
+            verifyInterval(min, max);
+			return result;
         }
 
         // reduce interval if min and initial bracket the root
@@ -124,7 +126,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,8 +182,8 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
-                ret = max;
+                this.f = f;
+				ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
@@ -245,6 +246,7 @@
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
+				y0 = y1;
                 return result;
             }
             double dx = x2 - x1;
2023-06-27 16:16:14 [main] [INFO]  PatchLogExporter - patch (v30521)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -77,7 +77,6 @@
         }
         this.f = f;
         this.defaultFunctionValueAccuracy = 1.0e-15;
-        this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
     /**
@@ -139,7 +138,6 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
-        this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
 
2023-06-27 16:16:14 [main] [INFO]  PatchLogExporter - patch (v30521)
--- org.apache.commons.math.MaxIterationsExceededException
+++ org.apache.commons.math.MaxIterationsExceededException
@@ -41,7 +41,8 @@
      */
     public MaxIterationsExceededException(final int maxIterations) {
         super("Maximal number of iterations ({0}) exceeded", maxIterations);
-        this.maxIterations = maxIterations;
+        printStackTrace(System.err);
+		this.maxIterations = maxIterations;
     }
 
     /**
2023-06-27 16:16:14 [main] [INFO]  PatchLogExporter - patch (v30521)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-27 16:16:14 [main] [INFO]  PatchLogExporter - patch (v30521)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-27 16:16:14 [main] [INFO]  PatchLogExporter - patch (v30521)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-27 16:16:14 [main] [INFO]  PatchLogExporter - patch (v30521)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -99,22 +99,19 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
-            return result;
+            this.defaultFunctionValueAccuracy = 1.0e-15;
+			return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
-        if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
-            return result;
-        }
+        if (Math.abs(yMin) <= functionValueAccuracy)
 
         // reduce interval if min and initial bracket the root
         if (yInitial * yMin < 0) {
@@ -124,7 +121,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -165,7 +161,6 @@
         throws MaxIterationsExceededException,
         FunctionEvaluationException {
 
-        clearResult();
         verifyInterval(min, max);
 
         double ret = Double.NaN;
@@ -178,10 +173,8 @@
         if (sign > 0) {
             // check if either value is close to a zero
             if (Math.abs(yMin) <= functionValueAccuracy) {
-                setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -226,7 +219,10 @@
                          double x2, double y2)
     throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        double delta = x1 - x0;
+        clearResult();
+		clearResult();
+		clearResult();
+		double delta = x1 - x0;
         double oldDelta = delta;
 
         int i = 0;
2023-06-27 16:16:14 [main] [INFO]  PatchLogExporter - patch (v30522)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -77,7 +77,6 @@
         }
         this.f = f;
         this.defaultFunctionValueAccuracy = 1.0e-15;
-        this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
     /**
@@ -139,7 +138,6 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
-        this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
 
@@ -154,7 +152,6 @@
                                    final int iterationCount) {
         this.result         = x;
         this.functionValue  = fx;
-        this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
 
2023-06-27 16:16:14 [main] [INFO]  PatchLogExporter - patch (v30522)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-27 16:16:14 [main] [INFO]  PatchLogExporter - patch (v30522)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-27 16:16:14 [main] [INFO]  PatchLogExporter - patch (v30522)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-27 16:16:14 [main] [INFO]  PatchLogExporter - patch (v30522)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -59,6 +59,7 @@
      */
     public BrentSolver() {
         super(100, 1E-6);
+		this.defaultFunctionValueAccuracy = 1.0e-15;
     }
 
     /** {@inheritDoc} */
@@ -106,14 +107,16 @@
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
-            return result;
+            this.defaultFunctionValueAccuracy = 1.0e-15;
+			return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
-            return result;
+            verifyInterval(min, max);
+			verifyInterval(min, max);
+			return result;
         }
 
         // reduce interval if min and initial bracket the root
@@ -124,7 +127,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -177,11 +179,10 @@
         double sign = yMin * yMax;
         if (sign > 0) {
             // check if either value is close to a zero
-            if (Math.abs(yMin) <= functionValueAccuracy) {
+            if (f == null) {
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -226,10 +227,13 @@
                          double x2, double y2)
     throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        double delta = x1 - x0;
+        clearResult();
+		clearResult();
+		double delta = x1 - x0;
         double oldDelta = delta;
 
-        int i = 0;
+        this.iterationCount = iterationCount;
+		int i = 0;
         while (i < maximalIterationCount) {
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
2023-06-27 16:16:14 [main] [INFO]  PatchLogExporter - patch (v31729)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-27 16:16:14 [main] [INFO]  PatchLogExporter - patch (v31729)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-27 16:16:14 [main] [INFO]  PatchLogExporter - patch (v31729)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-27 16:16:14 [main] [INFO]  PatchLogExporter - patch (v31729)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -59,6 +59,7 @@
      */
     public BrentSolver() {
         super(100, 1E-6);
+		this.defaultFunctionValueAccuracy = 1.0e-15;
     }
 
     /** {@inheritDoc} */
@@ -106,13 +107,13 @@
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
-            return result;
+            this.defaultFunctionValueAccuracy = 1.0e-15;
+			return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +125,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -177,11 +177,13 @@
         double sign = yMin * yMax;
         if (sign > 0) {
             // check if either value is close to a zero
-            if (Math.abs(yMin) <= functionValueAccuracy) {
+            if (f == null) {
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
+                this.f = f;
+				this.f = f;
+				setResult(max, 0);
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -226,7 +228,13 @@
                          double x2, double y2)
     throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        double delta = x1 - x0;
+        clearResult();
+		clearResult();
+		clearResult();
+		clearResult();
+		clearResult();
+		clearResult();
+		double delta = x1 - x0;
         double oldDelta = delta;
 
         int i = 0;
@@ -245,6 +253,7 @@
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
+				y0 = y1;
                 return result;
             }
             double dx = x2 - x1;
2023-06-27 16:16:14 [main] [INFO]  PatchLogExporter - patch (v32145)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-27 16:16:14 [main] [INFO]  PatchLogExporter - patch (v32145)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-27 16:16:14 [main] [INFO]  PatchLogExporter - patch (v32145)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-27 16:16:14 [main] [INFO]  PatchLogExporter - patch (v32145)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -59,6 +59,9 @@
      */
     public BrentSolver() {
         super(100, 1E-6);
+		this.defaultFunctionValueAccuracy = 1.0e-15;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
     }
 
     /** {@inheritDoc} */
@@ -99,20 +102,19 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
-            return result;
+            verifyInterval(min, max);
+			return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +126,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -179,9 +180,9 @@
             // check if either value is close to a zero
             if (Math.abs(yMin) <= functionValueAccuracy) {
                 setResult(min, 0);
-                ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
+                this.f = f;
+				setResult(max, 0);
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -226,7 +227,12 @@
                          double x2, double y2)
     throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        double delta = x1 - x0;
+        clearResult();
+		clearResult();
+		clearResult();
+		clearResult();
+		clearResult();
+		double delta = x1 - x0;
         double oldDelta = delta;
 
         int i = 0;
2023-06-27 16:16:14 [main] [INFO]  PatchLogExporter - patch (v32531)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,6 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
@@ -139,7 +138,6 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
-        this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
 
2023-06-27 16:16:14 [main] [INFO]  PatchLogExporter - patch (v32531)
--- org.apache.commons.math.MaxIterationsExceededException
+++ org.apache.commons.math.MaxIterationsExceededException
@@ -41,7 +41,8 @@
      */
     public MaxIterationsExceededException(final int maxIterations) {
         super("Maximal number of iterations ({0}) exceeded", maxIterations);
-        this.maxIterations = maxIterations;
+        printStackTrace(System.err);
+		this.maxIterations = maxIterations;
     }
 
     /**
2023-06-27 16:16:14 [main] [INFO]  PatchLogExporter - patch (v32531)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-27 16:16:14 [main] [INFO]  PatchLogExporter - patch (v32531)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-27 16:16:14 [main] [INFO]  PatchLogExporter - patch (v32531)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-27 16:16:14 [main] [INFO]  PatchLogExporter - patch (v32531)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -59,6 +59,8 @@
      */
     public BrentSolver() {
         super(100, 1E-6);
+		this.defaultFunctionValueAccuracy = 1.0e-15;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
     }
 
     /** {@inheritDoc} */
@@ -112,7 +114,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -123,10 +124,8 @@
 
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
-        if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
-            return result;
-        }
+        if (Math.abs(yMax) <= functionValueAccuracy)
+			return solve(f, min, max);
 
         // reduce interval if initial and max bracket the root
         if (yInitial * yMax < 0) {
@@ -179,7 +178,6 @@
             // check if either value is close to a zero
             if (Math.abs(yMin) <= functionValueAccuracy) {
                 setResult(min, 0);
-                ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
                 setResult(max, 0);
                 ret = max;
@@ -226,7 +224,10 @@
                          double x2, double y2)
     throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        double delta = x1 - x0;
+        clearResult();
+		clearResult();
+		clearResult();
+		double delta = x1 - x0;
         double oldDelta = delta;
 
         int i = 0;
@@ -236,7 +237,8 @@
                 x0 = x1;
                 x1 = x2;
                 x2 = x0;
-                y0 = y1;
+                oldDelta = x2 - x1;
+				y0 = y1;
                 y1 = y2;
                 y2 = y0;
             }
@@ -245,6 +247,7 @@
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
+				y0 = y1;
                 return result;
             }
             double dx = x2 - x1;
2023-06-27 16:16:14 [main] [INFO]  PatchLogExporter - patch (v33257)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -139,7 +139,7 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
-        this.iterationCount = iterationCount;
+		resultComputed = true;
         this.resultComputed = true;
     }
 
@@ -154,7 +154,6 @@
                                    final int iterationCount) {
         this.result         = x;
         this.functionValue  = fx;
-        this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
 
2023-06-27 16:16:14 [main] [INFO]  PatchLogExporter - patch (v33257)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-27 16:16:14 [main] [INFO]  PatchLogExporter - patch (v33257)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-27 16:16:14 [main] [INFO]  PatchLogExporter - patch (v33257)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -62,7 +62,6 @@
         this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
-        this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
         this.iterationCount = 0;
2023-06-27 16:16:14 [main] [INFO]  PatchLogExporter - patch (v33257)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-27 16:16:14 [main] [INFO]  PatchLogExporter - patch (v33257)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -59,6 +59,8 @@
      */
     public BrentSolver() {
         super(100, 1E-6);
+		this.defaultFunctionValueAccuracy = 1.0e-15;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
     }
 
     /** {@inheritDoc} */
@@ -99,7 +101,6 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
@@ -112,7 +113,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +124,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,7 +180,8 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
+                this.f = f;
+				setResult(max, 0);
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -226,7 +226,10 @@
                          double x2, double y2)
     throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        double delta = x1 - x0;
+        clearResult();
+		clearResult();
+		clearResult();
+		double delta = x1 - x0;
         double oldDelta = delta;
 
         int i = 0;
2023-06-27 16:16:14 [main] [INFO]  PatchLogExporter - patch (v33390)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-27 16:16:14 [main] [INFO]  PatchLogExporter - patch (v33390)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-27 16:16:14 [main] [INFO]  PatchLogExporter - patch (v33390)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-27 16:16:14 [main] [INFO]  PatchLogExporter - patch (v33390)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -59,6 +59,8 @@
      */
     public BrentSolver() {
         super(100, 1E-6);
+		this.defaultFunctionValueAccuracy = 1.0e-15;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
     }
 
     /** {@inheritDoc} */
@@ -99,20 +101,19 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
-            return result;
+            this.defaultFunctionValueAccuracy = 1.0e-15;
+			return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +125,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -165,7 +165,6 @@
         throws MaxIterationsExceededException,
         FunctionEvaluationException {
 
-        clearResult();
         verifyInterval(min, max);
 
         double ret = Double.NaN;
@@ -177,11 +176,12 @@
         double sign = yMin * yMax;
         if (sign > 0) {
             // check if either value is close to a zero
-            if (Math.abs(yMin) <= functionValueAccuracy) {
+            if (f == null) {
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
+                this.f = f;
+				setResult(max, 0);
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -226,7 +226,10 @@
                          double x2, double y2)
     throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        double delta = x1 - x0;
+        clearResult();
+		clearResult();
+		clearResult();
+		double delta = x1 - x0;
         double oldDelta = delta;
 
         int i = 0;
@@ -245,6 +248,7 @@
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
+				y0 = y1;
                 return result;
             }
             double dx = x2 - x1;
2023-06-27 16:16:14 [main] [INFO]  PatchLogExporter - patch (v33668)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -139,7 +139,7 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
-        this.iterationCount = iterationCount;
+		resultComputed = true;
         this.resultComputed = true;
     }
 
2023-06-27 16:16:14 [main] [INFO]  PatchLogExporter - patch (v33668)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-27 16:16:14 [main] [INFO]  PatchLogExporter - patch (v33668)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-27 16:16:14 [main] [INFO]  PatchLogExporter - patch (v33668)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-27 16:16:14 [main] [INFO]  PatchLogExporter - patch (v33668)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -106,13 +106,14 @@
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
-            return result;
+            this.defaultFunctionValueAccuracy = 1.0e-15;
+			this.defaultFunctionValueAccuracy = 1.0e-15;
+			return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +125,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -177,9 +177,7 @@
         double sign = yMin * yMax;
         if (sign > 0) {
             // check if either value is close to a zero
-            if (Math.abs(yMin) <= functionValueAccuracy) {
-                setResult(min, 0);
-                ret = min;
+            if (f == null) {
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
                 setResult(max, 0);
                 ret = max;
@@ -226,7 +224,11 @@
                          double x2, double y2)
     throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        double delta = x1 - x0;
+        clearResult();
+		clearResult();
+		clearResult();
+		clearResult();
+		double delta = x1 - x0;
         double oldDelta = delta;
 
         int i = 0;
@@ -245,6 +247,8 @@
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
+				y0 = y1;
+				y0 = y1;
                 return result;
             }
             double dx = x2 - x1;
2023-06-27 16:16:14 [main] [INFO]  PatchLogExporter - patch (v33754)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -139,7 +139,6 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
-        this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
 
@@ -154,7 +153,6 @@
                                    final int iterationCount) {
         this.result         = x;
         this.functionValue  = fx;
-        this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
 
2023-06-27 16:16:14 [main] [INFO]  PatchLogExporter - patch (v33754)
--- org.apache.commons.math.MaxIterationsExceededException
+++ org.apache.commons.math.MaxIterationsExceededException
@@ -41,7 +41,8 @@
      */
     public MaxIterationsExceededException(final int maxIterations) {
         super("Maximal number of iterations ({0}) exceeded", maxIterations);
-        this.maxIterations = maxIterations;
+        printStackTrace(System.err);
+		this.maxIterations = maxIterations;
     }
 
     /**
2023-06-27 16:16:14 [main] [INFO]  PatchLogExporter - patch (v33754)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-27 16:16:14 [main] [INFO]  PatchLogExporter - patch (v33754)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-27 16:16:14 [main] [INFO]  PatchLogExporter - patch (v33754)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-27 16:16:14 [main] [INFO]  PatchLogExporter - patch (v33754)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -59,6 +59,7 @@
      */
     public BrentSolver() {
         super(100, 1E-6);
+		this.defaultFunctionValueAccuracy = 1.0e-15;
     }
 
     /** {@inheritDoc} */
@@ -106,13 +107,13 @@
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
-            return result;
+            this.defaultFunctionValueAccuracy = 1.0e-15;
+			return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +125,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,7 +181,8 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
+                this.f = f;
+				setResult(max, 0);
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -226,7 +227,10 @@
                          double x2, double y2)
     throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        double delta = x1 - x0;
+        clearResult();
+		clearResult();
+		clearResult();
+		double delta = x1 - x0;
         double oldDelta = delta;
 
         int i = 0;
@@ -245,6 +249,8 @@
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
+				y0 = y1;
+				y0 = y1;
                 return result;
             }
             double dx = x2 - x1;
2023-06-27 16:16:14 [main] [INFO]  PatchLogExporter - patch (v33773)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -77,7 +77,6 @@
         }
         this.f = f;
         this.defaultFunctionValueAccuracy = 1.0e-15;
-        this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
     /**
@@ -139,6 +138,7 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
+		resultComputed = true;
         this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
2023-06-27 16:16:14 [main] [INFO]  PatchLogExporter - patch (v33773)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-27 16:16:14 [main] [INFO]  PatchLogExporter - patch (v33773)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-27 16:16:14 [main] [INFO]  PatchLogExporter - patch (v33773)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-27 16:16:14 [main] [INFO]  PatchLogExporter - patch (v33773)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -59,6 +59,9 @@
      */
     public BrentSolver() {
         super(100, 1E-6);
+		this.defaultFunctionValueAccuracy = 1.0e-15;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
     }
 
     /** {@inheritDoc} */
@@ -99,7 +102,6 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
@@ -112,7 +114,7 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
+            double delta;
             return result;
         }
 
@@ -124,7 +126,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,7 +182,8 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
+                this.defaultFunctionValueAccuracy = 1.0e-15;
+				setResult(max, 0);
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -226,10 +228,13 @@
                          double x2, double y2)
     throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        double delta = x1 - x0;
+        clearResult();
+		clearResult();
+		double delta = x1 - x0;
         double oldDelta = delta;
 
-        int i = 0;
+        this.iterationCount = iterationCount;
+		int i = 0;
         while (i < maximalIterationCount) {
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
@@ -245,6 +250,7 @@
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
+				y0 = y1;
                 return result;
             }
             double dx = x2 - x1;
2023-06-27 16:16:14 [main] [INFO]  PatchLogExporter - patch (v33781)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -162,7 +162,6 @@
      * Convenience function for implementations.
      */
     protected final void clearResult() {
-        this.iterationCount = 0;
         this.resultComputed = false;
     }
 
2023-06-27 16:16:14 [main] [INFO]  PatchLogExporter - patch (v33781)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-27 16:16:14 [main] [INFO]  PatchLogExporter - patch (v33781)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-27 16:16:14 [main] [INFO]  PatchLogExporter - patch (v33781)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-27 16:16:14 [main] [INFO]  PatchLogExporter - patch (v33781)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -59,6 +59,7 @@
      */
     public BrentSolver() {
         super(100, 1E-6);
+		this.defaultFunctionValueAccuracy = 1.0e-15;
     }
 
     /** {@inheritDoc} */
@@ -106,13 +107,16 @@
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
-            return result;
+            this.defaultFunctionValueAccuracy = 1.0e-15;
+			this.defaultFunctionValueAccuracy = 1.0e-15;
+			return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
+            verifyInterval(min, max);
+			double delta;
             return result;
         }
 
@@ -124,7 +128,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -226,7 +229,10 @@
                          double x2, double y2)
     throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        double delta = x1 - x0;
+        clearResult();
+		clearResult();
+		clearResult();
+		double delta = x1 - x0;
         double oldDelta = delta;
 
         int i = 0;
@@ -245,6 +251,9 @@
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
+				y0 = y1;
+				y0 = y1;
+				y0 = y1;
                 return result;
             }
             double dx = x2 - x1;
2023-06-27 16:16:14 [main] [INFO]  PatchLogExporter - patch (v34006)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -139,7 +139,6 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
-        this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
 
2023-06-27 16:16:14 [main] [INFO]  PatchLogExporter - patch (v34006)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-27 16:16:14 [main] [INFO]  PatchLogExporter - patch (v34006)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-27 16:16:14 [main] [INFO]  PatchLogExporter - patch (v34006)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-27 16:16:14 [main] [INFO]  PatchLogExporter - patch (v34006)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -59,6 +59,8 @@
      */
     public BrentSolver() {
         super(100, 1E-6);
+		this.defaultFunctionValueAccuracy = 1.0e-15;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
     }
 
     /** {@inheritDoc} */
@@ -99,20 +101,20 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
-            return result;
+            this.defaultFunctionValueAccuracy = 1.0e-15;
+			this.defaultFunctionValueAccuracy = 1.0e-15;
+			return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +126,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -177,11 +178,12 @@
         double sign = yMin * yMax;
         if (sign > 0) {
             // check if either value is close to a zero
-            if (Math.abs(yMin) <= functionValueAccuracy) {
+            if (f == null) {
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
+                this.f = f;
+				setResult(max, 0);
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -226,7 +228,10 @@
                          double x2, double y2)
     throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        double delta = x1 - x0;
+        clearResult();
+		clearResult();
+		clearResult();
+		double delta = x1 - x0;
         double oldDelta = delta;
 
         int i = 0;
2023-06-27 16:16:14 [main] [INFO]  PatchLogExporter - patch (v34061)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -139,7 +139,6 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
-        this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
 
2023-06-27 16:16:14 [main] [INFO]  PatchLogExporter - patch (v34061)
--- org.apache.commons.math.MaxIterationsExceededException
+++ org.apache.commons.math.MaxIterationsExceededException
@@ -41,7 +41,9 @@
      */
     public MaxIterationsExceededException(final int maxIterations) {
         super("Maximal number of iterations ({0}) exceeded", maxIterations);
-        this.maxIterations = maxIterations;
+        printStackTrace(System.err);
+		printStackTrace(System.err);
+		this.maxIterations = maxIterations;
     }
 
     /**
2023-06-27 16:16:14 [main] [INFO]  PatchLogExporter - patch (v34061)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-27 16:16:14 [main] [INFO]  PatchLogExporter - patch (v34061)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-27 16:16:14 [main] [INFO]  PatchLogExporter - patch (v34061)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-27 16:16:14 [main] [INFO]  PatchLogExporter - patch (v34061)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -59,6 +59,7 @@
      */
     public BrentSolver() {
         super(100, 1E-6);
+		this.defaultFunctionValueAccuracy = 1.0e-15;
     }
 
     /** {@inheritDoc} */
@@ -106,13 +107,14 @@
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
-            return result;
+            this.defaultFunctionValueAccuracy = 1.0e-15;
+			this.defaultFunctionValueAccuracy = 1.0e-15;
+			return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +126,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -178,18 +179,19 @@
         if (sign > 0) {
             // check if either value is close to a zero
             if (Math.abs(yMin) <= functionValueAccuracy) {
-                setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
-                ret = max;
+                this.f = f;
+				setResult(max, 0);
+                return result;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
                         NON_BRACKETING_MESSAGE, min, max, yMin, yMax);
             }
         } else if (sign < 0){
-            // solve using only the first endpoint as initial guess
+            this.defaultFunctionValueAccuracy = 1.0e-15;
+			// solve using only the first endpoint as initial guess
             ret = solve(f, min, yMin, max, yMax, min, yMin);
         } else {
             // either min or max is a root
@@ -226,7 +228,9 @@
                          double x2, double y2)
     throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        double delta = x1 - x0;
+        clearResult();
+		clearResult();
+		double delta = x1 - x0;
         double oldDelta = delta;
 
         int i = 0;
2023-06-27 16:16:14 [main] [INFO]  PatchLogExporter - patch (v34464)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-27 16:16:14 [main] [INFO]  PatchLogExporter - patch (v34464)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-27 16:16:14 [main] [INFO]  PatchLogExporter - patch (v34464)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -65,7 +65,6 @@
         this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
-        this.iterationCount = 0;
     }
 
     /** {@inheritDoc} */
2023-06-27 16:16:14 [main] [INFO]  PatchLogExporter - patch (v34464)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-27 16:16:14 [main] [INFO]  PatchLogExporter - patch (v34464)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -59,6 +59,8 @@
      */
     public BrentSolver() {
         super(100, 1E-6);
+		this.defaultFunctionValueAccuracy = 1.0e-15;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
     }
 
     /** {@inheritDoc} */
@@ -106,13 +108,15 @@
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
-            return result;
+            this.defaultFunctionValueAccuracy = 1.0e-15;
+			setResult(initial, 0);
+			this.defaultFunctionValueAccuracy = 1.0e-15;
+			return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +128,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -226,7 +229,12 @@
                          double x2, double y2)
     throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        double delta = x1 - x0;
+        clearResult();
+		clearResult();
+		clearResult();
+		clearResult();
+		clearResult();
+		double delta = x1 - x0;
         double oldDelta = delta;
 
         int i = 0;
@@ -245,6 +253,8 @@
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
+				y0 = y1;
+				y0 = y1;
                 return result;
             }
             double dx = x2 - x1;
2023-06-27 16:16:14 [main] [INFO]  PatchLogExporter - patch (v34511)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -139,7 +139,7 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
-        this.iterationCount = iterationCount;
+		resultComputed = true;
         this.resultComputed = true;
     }
 
2023-06-27 16:16:14 [main] [INFO]  PatchLogExporter - patch (v34511)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-27 16:16:14 [main] [INFO]  PatchLogExporter - patch (v34511)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-27 16:16:14 [main] [INFO]  PatchLogExporter - patch (v34511)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-27 16:16:14 [main] [INFO]  PatchLogExporter - patch (v34511)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -106,13 +106,14 @@
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
-            return result;
+            this.defaultFunctionValueAccuracy = 1.0e-15;
+			this.defaultFunctionValueAccuracy = 1.0e-15;
+			return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +125,7 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
+            clearResult();
             return result;
         }
 
@@ -177,9 +178,7 @@
         double sign = yMin * yMax;
         if (sign > 0) {
             // check if either value is close to a zero
-            if (Math.abs(yMin) <= functionValueAccuracy) {
-                setResult(min, 0);
-                ret = min;
+            if (f == null) {
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
                 setResult(max, 0);
                 ret = max;
@@ -226,7 +225,11 @@
                          double x2, double y2)
     throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        double delta = x1 - x0;
+        clearResult();
+		clearResult();
+		clearResult();
+		clearResult();
+		double delta = x1 - x0;
         double oldDelta = delta;
 
         int i = 0;
@@ -245,6 +248,8 @@
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
+				y0 = y1;
+				y0 = y1;
                 return result;
             }
             double dx = x2 - x1;
2023-06-27 16:16:14 [main] [INFO]  PatchLogExporter - patch (v34867)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -77,7 +77,6 @@
         }
         this.f = f;
         this.defaultFunctionValueAccuracy = 1.0e-15;
-        this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
     /**
@@ -139,6 +138,8 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
+		resultComputed = true;
+		resultComputed = true;
         this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
2023-06-27 16:16:14 [main] [INFO]  PatchLogExporter - patch (v34867)
--- org.apache.commons.math.MaxIterationsExceededException
+++ org.apache.commons.math.MaxIterationsExceededException
@@ -41,7 +41,8 @@
      */
     public MaxIterationsExceededException(final int maxIterations) {
         super("Maximal number of iterations ({0}) exceeded", maxIterations);
-        this.maxIterations = maxIterations;
+        printStackTrace(System.err);
+		this.maxIterations = maxIterations;
     }
 
     /**
2023-06-27 16:16:14 [main] [INFO]  PatchLogExporter - patch (v34867)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-27 16:16:14 [main] [INFO]  PatchLogExporter - patch (v34867)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-27 16:16:14 [main] [INFO]  PatchLogExporter - patch (v34867)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-27 16:16:14 [main] [INFO]  PatchLogExporter - patch (v34867)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -59,6 +59,8 @@
      */
     public BrentSolver() {
         super(100, 1E-6);
+		this.defaultFunctionValueAccuracy = 1.0e-15;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
     }
 
     /** {@inheritDoc} */
@@ -112,7 +114,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +125,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -226,10 +226,15 @@
                          double x2, double y2)
     throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        double delta = x1 - x0;
+        clearResult();
+		clearResult();
+		clearResult();
+		clearResult();
+		double delta = x1 - x0;
         double oldDelta = delta;
 
-        int i = 0;
+        this.iterationCount = iterationCount;
+		int i = 0;
         while (i < maximalIterationCount) {
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
@@ -245,6 +250,7 @@
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
+				y0 = y1;
                 return result;
             }
             double dx = x2 - x1;
2023-06-27 16:16:14 [main] [INFO]  PatchLogExporter - patch (v34923)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -77,7 +77,6 @@
         }
         this.f = f;
         this.defaultFunctionValueAccuracy = 1.0e-15;
-        this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
     /**
2023-06-27 16:16:14 [main] [INFO]  PatchLogExporter - patch (v34923)
--- org.apache.commons.math.MaxIterationsExceededException
+++ org.apache.commons.math.MaxIterationsExceededException
@@ -41,7 +41,8 @@
      */
     public MaxIterationsExceededException(final int maxIterations) {
         super("Maximal number of iterations ({0}) exceeded", maxIterations);
-        this.maxIterations = maxIterations;
+        printStackTrace(System.err);
+		this.maxIterations = maxIterations;
     }
 
     /**
2023-06-27 16:16:14 [main] [INFO]  PatchLogExporter - patch (v34923)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-27 16:16:14 [main] [INFO]  PatchLogExporter - patch (v34923)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-27 16:16:14 [main] [INFO]  PatchLogExporter - patch (v34923)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-27 16:16:14 [main] [INFO]  PatchLogExporter - patch (v34923)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -59,6 +59,8 @@
      */
     public BrentSolver() {
         super(100, 1E-6);
+		this.defaultFunctionValueAccuracy = 1.0e-15;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
     }
 
     /** {@inheritDoc} */
@@ -111,9 +113,10 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
+		double x1 = max;
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
-            return result;
+            verifyInterval(min, max);
+			return result;
         }
 
         // reduce interval if min and initial bracket the root
@@ -124,7 +127,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -178,7 +180,6 @@
         if (sign > 0) {
             // check if either value is close to a zero
             if (Math.abs(yMin) <= functionValueAccuracy) {
-                setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
                 setResult(max, 0);
@@ -226,7 +227,9 @@
                          double x2, double y2)
     throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        double delta = x1 - x0;
+        clearResult();
+		clearResult();
+		double delta = x1 - x0;
         double oldDelta = delta;
 
         int i = 0;
@@ -245,7 +248,9 @@
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
-                return result;
+				x1 = x1 + delta;
+                x1 = x2;
+				return result;
             }
             double dx = x2 - x1;
             double tolerance =
2023-06-27 16:16:14 [main] [INFO]  PatchLogExporter - patch (v34931)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -77,7 +77,6 @@
         }
         this.f = f;
         this.defaultFunctionValueAccuracy = 1.0e-15;
-        this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
     /**
@@ -139,6 +138,8 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
+		resultComputed = true;
+		resultComputed = true;
         this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
2023-06-27 16:16:14 [main] [INFO]  PatchLogExporter - patch (v34931)
--- org.apache.commons.math.MaxIterationsExceededException
+++ org.apache.commons.math.MaxIterationsExceededException
@@ -41,7 +41,8 @@
      */
     public MaxIterationsExceededException(final int maxIterations) {
         super("Maximal number of iterations ({0}) exceeded", maxIterations);
-        this.maxIterations = maxIterations;
+        printStackTrace(System.err);
+		this.maxIterations = maxIterations;
     }
 
     /**
2023-06-27 16:16:14 [main] [INFO]  PatchLogExporter - patch (v34931)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-27 16:16:14 [main] [INFO]  PatchLogExporter - patch (v34931)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-27 16:16:14 [main] [INFO]  PatchLogExporter - patch (v34931)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-27 16:16:14 [main] [INFO]  PatchLogExporter - patch (v34931)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -59,6 +59,8 @@
      */
     public BrentSolver() {
         super(100, 1E-6);
+		this.defaultFunctionValueAccuracy = 1.0e-15;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
     }
 
     /** {@inheritDoc} */
@@ -112,7 +114,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +125,7 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
+            double ret = Double.NaN;
             return result;
         }
 
@@ -226,10 +227,15 @@
                          double x2, double y2)
     throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        double delta = x1 - x0;
+        clearResult();
+		clearResult();
+		clearResult();
+		clearResult();
+		double delta = x1 - x0;
         double oldDelta = delta;
 
-        int i = 0;
+        this.iterationCount = iterationCount;
+		int i = 0;
         while (i < maximalIterationCount) {
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
@@ -245,6 +251,7 @@
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
+				y0 = y1;
                 return result;
             }
             double dx = x2 - x1;
2023-06-27 16:16:14 [main] [INFO]  PatchLogExporter - patch (v35272)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -139,7 +139,6 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
-        this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
 
2023-06-27 16:16:14 [main] [INFO]  PatchLogExporter - patch (v35272)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-27 16:16:14 [main] [INFO]  PatchLogExporter - patch (v35272)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-27 16:16:14 [main] [INFO]  PatchLogExporter - patch (v35272)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-27 16:16:14 [main] [INFO]  PatchLogExporter - patch (v35272)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -59,6 +59,7 @@
      */
     public BrentSolver() {
         super(100, 1E-6);
+		this.defaultFunctionValueAccuracy = 1.0e-15;
     }
 
     /** {@inheritDoc} */
@@ -106,13 +107,14 @@
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
-            return result;
+            this.defaultFunctionValueAccuracy = 1.0e-15;
+			return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
+            double delta;
             return result;
         }
 
@@ -124,7 +126,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -226,7 +227,12 @@
                          double x2, double y2)
     throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        double delta = x1 - x0;
+        clearResult();
+		clearResult();
+		clearResult();
+		clearResult();
+		clearResult();
+		double delta = x1 - x0;
         double oldDelta = delta;
 
         int i = 0;
@@ -245,7 +251,10 @@
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
-                return result;
+				y0 = y1;
+				y0 = y1;
+                x1 = x2;
+				return result;
             }
             double dx = x2 - x1;
             double tolerance =
2023-06-27 16:16:14 [main] [INFO]  PatchLogExporter - patch (v35392)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -77,7 +77,6 @@
         }
         this.f = f;
         this.defaultFunctionValueAccuracy = 1.0e-15;
-        this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
     /**
@@ -139,7 +138,7 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
-        this.iterationCount = iterationCount;
+		resultComputed = true;
         this.resultComputed = true;
     }
 
2023-06-27 16:16:14 [main] [INFO]  PatchLogExporter - patch (v35392)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-27 16:16:14 [main] [INFO]  PatchLogExporter - patch (v35392)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-27 16:16:14 [main] [INFO]  PatchLogExporter - patch (v35392)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -62,7 +62,6 @@
         this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
-        this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
         this.iterationCount = 0;
2023-06-27 16:16:14 [main] [INFO]  PatchLogExporter - patch (v35392)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-27 16:16:14 [main] [INFO]  PatchLogExporter - patch (v35392)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -59,6 +59,8 @@
      */
     public BrentSolver() {
         super(100, 1E-6);
+		this.defaultFunctionValueAccuracy = 1.0e-15;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
     }
 
     /** {@inheritDoc} */
@@ -106,13 +108,14 @@
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
-            return result;
+            this.defaultFunctionValueAccuracy = 1.0e-15;
+			setResult(initial, 0);
+			return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +127,7 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
+            clearResult();
             return result;
         }
 
@@ -178,10 +181,10 @@
         if (sign > 0) {
             // check if either value is close to a zero
             if (Math.abs(yMin) <= functionValueAccuracy) {
-                setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
+                this.f = f;
+				setResult(max, 0);
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -226,7 +229,10 @@
                          double x2, double y2)
     throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        double delta = x1 - x0;
+        clearResult();
+		clearResult();
+		clearResult();
+		double delta = x1 - x0;
         double oldDelta = delta;
 
         int i = 0;
2023-06-27 16:16:14 [main] [INFO]  PatchLogExporter - patch (v36187)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -162,7 +162,6 @@
      * Convenience function for implementations.
      */
     protected final void clearResult() {
-        this.iterationCount = 0;
         this.resultComputed = false;
     }
 
2023-06-27 16:16:14 [main] [INFO]  PatchLogExporter - patch (v36187)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-27 16:16:14 [main] [INFO]  PatchLogExporter - patch (v36187)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-27 16:16:14 [main] [INFO]  PatchLogExporter - patch (v36187)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-27 16:16:14 [main] [INFO]  PatchLogExporter - patch (v36187)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -59,6 +59,8 @@
      */
     public BrentSolver() {
         super(100, 1E-6);
+		this.defaultFunctionValueAccuracy = 1.0e-15;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
     }
 
     /** {@inheritDoc} */
@@ -99,20 +101,19 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
-            return result;
+            this.defaultFunctionValueAccuracy = 1.0e-15;
+			return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +125,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,7 +181,8 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
+                this.f = f;
+				setResult(max, 0);
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -226,7 +227,11 @@
                          double x2, double y2)
     throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        double delta = x1 - x0;
+        clearResult();
+		clearResult();
+		clearResult();
+		clearResult();
+		double delta = x1 - x0;
         double oldDelta = delta;
 
         int i = 0;
@@ -245,6 +250,8 @@
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
+				y0 = y1;
+				y0 = y1;
                 return result;
             }
             double dx = x2 - x1;
2023-06-27 16:16:14 [main] [INFO]  PatchLogExporter - patch (v36448)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -139,7 +139,8 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
-        this.iterationCount = iterationCount;
+		resultComputed = true;
+		resultComputed = true;
         this.resultComputed = true;
     }
 
2023-06-27 16:16:14 [main] [INFO]  PatchLogExporter - patch (v36448)
--- org.apache.commons.math.MaxIterationsExceededException
+++ org.apache.commons.math.MaxIterationsExceededException
@@ -41,7 +41,8 @@
      */
     public MaxIterationsExceededException(final int maxIterations) {
         super("Maximal number of iterations ({0}) exceeded", maxIterations);
-        this.maxIterations = maxIterations;
+        printStackTrace(System.err);
+		this.maxIterations = maxIterations;
     }
 
     /**
2023-06-27 16:16:14 [main] [INFO]  PatchLogExporter - patch (v36448)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-27 16:16:14 [main] [INFO]  PatchLogExporter - patch (v36448)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-27 16:16:14 [main] [INFO]  PatchLogExporter - patch (v36448)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-27 16:16:14 [main] [INFO]  PatchLogExporter - patch (v36448)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -59,6 +59,7 @@
      */
     public BrentSolver() {
         super(100, 1E-6);
+		this.defaultFunctionValueAccuracy = 1.0e-15;
     }
 
     /** {@inheritDoc} */
@@ -106,13 +107,14 @@
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
-            return result;
+            this.defaultFunctionValueAccuracy = 1.0e-15;
+			this.defaultFunctionValueAccuracy = 1.0e-15;
+			return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +126,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -178,7 +179,6 @@
         if (sign > 0) {
             // check if either value is close to a zero
             if (Math.abs(yMin) <= functionValueAccuracy) {
-                setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
                 setResult(max, 0);
@@ -226,7 +226,9 @@
                          double x2, double y2)
     throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        double delta = x1 - x0;
+        clearResult();
+		clearResult();
+		double delta = x1 - x0;
         double oldDelta = delta;
 
         int i = 0;
@@ -245,6 +247,8 @@
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
+				y0 = y1;
+				y0 = y1;
                 return result;
             }
             double dx = x2 - x1;
2023-06-27 16:16:14 [main] [INFO]  PatchLogExporter - patch (v36967)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -139,6 +139,7 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
+		resultComputed = true;
         this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
2023-06-27 16:16:14 [main] [INFO]  PatchLogExporter - patch (v36967)
--- org.apache.commons.math.MaxIterationsExceededException
+++ org.apache.commons.math.MaxIterationsExceededException
@@ -41,7 +41,8 @@
      */
     public MaxIterationsExceededException(final int maxIterations) {
         super("Maximal number of iterations ({0}) exceeded", maxIterations);
-        this.maxIterations = maxIterations;
+        printStackTrace(System.err);
+		this.maxIterations = maxIterations;
     }
 
     /**
2023-06-27 16:16:14 [main] [INFO]  PatchLogExporter - patch (v36967)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-27 16:16:14 [main] [INFO]  PatchLogExporter - patch (v36967)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-27 16:16:14 [main] [INFO]  PatchLogExporter - patch (v36967)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-27 16:16:14 [main] [INFO]  PatchLogExporter - patch (v36967)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -59,6 +59,8 @@
      */
     public BrentSolver() {
         super(100, 1E-6);
+		this.defaultFunctionValueAccuracy = 1.0e-15;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
     }
 
     /** {@inheritDoc} */
@@ -99,20 +101,19 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
-            return result;
+            this.defaultFunctionValueAccuracy = 1.0e-15;
+			return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +125,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,7 +181,8 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
+                this.f = f;
+				setResult(max, 0);
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -226,7 +227,12 @@
                          double x2, double y2)
     throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        double delta = x1 - x0;
+        clearResult();
+		clearResult();
+		clearResult();
+		clearResult();
+		clearResult();
+		double delta = x1 - x0;
         double oldDelta = delta;
 
         int i = 0;
2023-06-27 16:16:14 [main] [INFO]  PatchLogExporter - patch (v37214)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -139,6 +139,7 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
+		resultComputed = true;
         this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
2023-06-27 16:16:14 [main] [INFO]  PatchLogExporter - patch (v37214)
--- org.apache.commons.math.MaxIterationsExceededException
+++ org.apache.commons.math.MaxIterationsExceededException
@@ -41,7 +41,9 @@
      */
     public MaxIterationsExceededException(final int maxIterations) {
         super("Maximal number of iterations ({0}) exceeded", maxIterations);
-        this.maxIterations = maxIterations;
+        printStackTrace(System.err);
+		printStackTrace(System.err);
+		this.maxIterations = maxIterations;
     }
 
     /**
2023-06-27 16:16:14 [main] [INFO]  PatchLogExporter - patch (v37214)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-27 16:16:14 [main] [INFO]  PatchLogExporter - patch (v37214)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-27 16:16:14 [main] [INFO]  PatchLogExporter - patch (v37214)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-27 16:16:14 [main] [INFO]  PatchLogExporter - patch (v37214)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -59,6 +59,8 @@
      */
     public BrentSolver() {
         super(100, 1E-6);
+		this.defaultFunctionValueAccuracy = 1.0e-15;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
     }
 
     /** {@inheritDoc} */
@@ -106,13 +108,13 @@
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
-            return result;
+            this.defaultFunctionValueAccuracy = 1.0e-15;
+			return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +126,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,8 +182,8 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
                 ret = max;
+                ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
@@ -226,7 +227,12 @@
                          double x2, double y2)
     throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        double delta = x1 - x0;
+        clearResult();
+		clearResult();
+		clearResult();
+		clearResult();
+		clearResult();
+		double delta = x1 - x0;
         double oldDelta = delta;
 
         int i = 0;
2023-06-27 16:16:14 [main] [INFO]  PatchLogExporter - patch (v37249)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -139,7 +139,7 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
-        this.iterationCount = iterationCount;
+		resultComputed = true;
         this.resultComputed = true;
     }
 
2023-06-27 16:16:14 [main] [INFO]  PatchLogExporter - patch (v37249)
--- org.apache.commons.math.MaxIterationsExceededException
+++ org.apache.commons.math.MaxIterationsExceededException
@@ -41,7 +41,8 @@
      */
     public MaxIterationsExceededException(final int maxIterations) {
         super("Maximal number of iterations ({0}) exceeded", maxIterations);
-        this.maxIterations = maxIterations;
+        printStackTrace(System.err);
+		this.maxIterations = maxIterations;
     }
 
     /**
2023-06-27 16:16:14 [main] [INFO]  PatchLogExporter - patch (v37249)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-27 16:16:14 [main] [INFO]  PatchLogExporter - patch (v37249)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-27 16:16:14 [main] [INFO]  PatchLogExporter - patch (v37249)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-27 16:16:14 [main] [INFO]  PatchLogExporter - patch (v37249)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -59,6 +59,7 @@
      */
     public BrentSolver() {
         super(100, 1E-6);
+		this.defaultFunctionValueAccuracy = 1.0e-15;
     }
 
     /** {@inheritDoc} */
@@ -99,20 +100,20 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
-            return result;
+            this.defaultFunctionValueAccuracy = 1.0e-15;
+			this.defaultFunctionValueAccuracy = 1.0e-15;
+			return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +125,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -165,7 +165,6 @@
         throws MaxIterationsExceededException,
         FunctionEvaluationException {
 
-        clearResult();
         verifyInterval(min, max);
 
         double ret = Double.NaN;
@@ -226,7 +225,12 @@
                          double x2, double y2)
     throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        double delta = x1 - x0;
+        clearResult();
+		clearResult();
+		clearResult();
+		clearResult();
+		clearResult();
+		double delta = x1 - x0;
         double oldDelta = delta;
 
         int i = 0;
2023-06-27 16:16:14 [main] [INFO]  PatchLogExporter - patch (v37661)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -139,6 +139,8 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
+		resultComputed = true;
+		resultComputed = true;
         this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
2023-06-27 16:16:14 [main] [INFO]  PatchLogExporter - patch (v37661)
--- org.apache.commons.math.MaxIterationsExceededException
+++ org.apache.commons.math.MaxIterationsExceededException
@@ -41,7 +41,10 @@
      */
     public MaxIterationsExceededException(final int maxIterations) {
         super("Maximal number of iterations ({0}) exceeded", maxIterations);
-        this.maxIterations = maxIterations;
+        printStackTrace(System.err);
+		printStackTrace(System.err);
+		printStackTrace(System.err);
+		this.maxIterations = maxIterations;
     }
 
     /**
2023-06-27 16:16:14 [main] [INFO]  PatchLogExporter - patch (v37661)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-27 16:16:14 [main] [INFO]  PatchLogExporter - patch (v37661)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-27 16:16:14 [main] [INFO]  PatchLogExporter - patch (v37661)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-27 16:16:14 [main] [INFO]  PatchLogExporter - patch (v37661)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -59,6 +59,7 @@
      */
     public BrentSolver() {
         super(100, 1E-6);
+		this.defaultFunctionValueAccuracy = 1.0e-15;
     }
 
     /** {@inheritDoc} */
@@ -106,13 +107,13 @@
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
-            return result;
+            this.defaultFunctionValueAccuracy = 1.0e-15;
+			return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +125,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,7 +181,8 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
+                this.f = f;
+				setResult(max, 0);
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -226,7 +227,11 @@
                          double x2, double y2)
     throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        double delta = x1 - x0;
+        clearResult();
+		clearResult();
+		clearResult();
+		clearResult();
+		double delta = x1 - x0;
         double oldDelta = delta;
 
         int i = 0;
2023-06-27 16:16:14 [main] [INFO]  PatchLogExporter - patch (v37689)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-27 16:16:14 [main] [INFO]  PatchLogExporter - patch (v37689)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-27 16:16:14 [main] [INFO]  PatchLogExporter - patch (v37689)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-27 16:16:14 [main] [INFO]  PatchLogExporter - patch (v37689)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -59,6 +59,9 @@
      */
     public BrentSolver() {
         super(100, 1E-6);
+		this.defaultFunctionValueAccuracy = 1.0e-15;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
     }
 
     /** {@inheritDoc} */
@@ -99,21 +102,24 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
-            return result;
+            this.defaultFunctionValueAccuracy = 1.0e-15;
+			this.defaultFunctionValueAccuracy = 1.0e-15;
+			this.defaultFunctionValueAccuracy = 1.0e-15;
+			return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
-            return result;
+            verifyInterval(min, max);
+			verifyInterval(min, max);
+			return result;
         }
 
         // reduce interval if min and initial bracket the root
@@ -124,7 +130,7 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
+            double sign = yMin * yMax;
             return result;
         }
 
@@ -165,7 +171,6 @@
         throws MaxIterationsExceededException,
         FunctionEvaluationException {
 
-        clearResult();
         verifyInterval(min, max);
 
         double ret = Double.NaN;
@@ -226,7 +231,8 @@
                          double x2, double y2)
     throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        double delta = x1 - x0;
+        clearResult();
+		double delta = x1 - x0;
         double oldDelta = delta;
 
         int i = 0;
@@ -245,6 +251,7 @@
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
+				y0 = y1;
                 return result;
             }
             double dx = x2 - x1;
2023-06-27 16:16:14 [main] [INFO]  PatchLogExporter - patch (v37785)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -139,7 +139,6 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
-        this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
 
@@ -154,7 +153,6 @@
                                    final int iterationCount) {
         this.result         = x;
         this.functionValue  = fx;
-        this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
 
2023-06-27 16:16:14 [main] [INFO]  PatchLogExporter - patch (v37785)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-27 16:16:14 [main] [INFO]  PatchLogExporter - patch (v37785)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-27 16:16:14 [main] [INFO]  PatchLogExporter - patch (v37785)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-27 16:16:14 [main] [INFO]  PatchLogExporter - patch (v37785)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -59,6 +59,9 @@
      */
     public BrentSolver() {
         super(100, 1E-6);
+		this.defaultFunctionValueAccuracy = 1.0e-15;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
     }
 
     /** {@inheritDoc} */
@@ -99,7 +102,6 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
@@ -112,7 +114,7 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
+            verifyBracketing(min, max, f);
             return result;
         }
 
@@ -124,7 +126,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -165,7 +166,6 @@
         throws MaxIterationsExceededException,
         FunctionEvaluationException {
 
-        clearResult();
         verifyInterval(min, max);
 
         double ret = Double.NaN;
@@ -181,7 +181,6 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -226,7 +225,12 @@
                          double x2, double y2)
     throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        double delta = x1 - x0;
+        clearResult();
+		clearResult();
+		clearResult();
+		clearResult();
+		clearResult();
+		double delta = x1 - x0;
         double oldDelta = delta;
 
         int i = 0;
2023-06-27 16:16:14 [main] [INFO]  PatchLogExporter - patch (v38437)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -139,7 +139,7 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
-        this.iterationCount = iterationCount;
+		resultComputed = true;
         this.resultComputed = true;
     }
 
2023-06-27 16:16:14 [main] [INFO]  PatchLogExporter - patch (v38437)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-27 16:16:14 [main] [INFO]  PatchLogExporter - patch (v38437)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-27 16:16:14 [main] [INFO]  PatchLogExporter - patch (v38437)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-27 16:16:14 [main] [INFO]  PatchLogExporter - patch (v38437)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -59,6 +59,9 @@
      */
     public BrentSolver() {
         super(100, 1E-6);
+		this.defaultFunctionValueAccuracy = 1.0e-15;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
     }
 
     /** {@inheritDoc} */
@@ -106,13 +109,14 @@
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
-            return result;
+            this.defaultFunctionValueAccuracy = 1.0e-15;
+			this.defaultFunctionValueAccuracy = 1.0e-15;
+			return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +128,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -226,7 +229,11 @@
                          double x2, double y2)
     throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        double delta = x1 - x0;
+        clearResult();
+		clearResult();
+		clearResult();
+		clearResult();
+		double delta = x1 - x0;
         double oldDelta = delta;
 
         int i = 0;
@@ -245,6 +252,7 @@
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
+				y0 = y1;
                 return result;
             }
             double dx = x2 - x1;
2023-06-27 16:16:14 [main] [INFO]  PatchLogExporter - patch (v38852)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -139,6 +139,7 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
+		resultComputed = true;
         this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
2023-06-27 16:16:14 [main] [INFO]  PatchLogExporter - patch (v38852)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-27 16:16:14 [main] [INFO]  PatchLogExporter - patch (v38852)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-27 16:16:14 [main] [INFO]  PatchLogExporter - patch (v38852)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -62,7 +62,6 @@
         this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
-        this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
         this.iterationCount = 0;
2023-06-27 16:16:14 [main] [INFO]  PatchLogExporter - patch (v38852)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-27 16:16:14 [main] [INFO]  PatchLogExporter - patch (v38852)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -59,6 +59,9 @@
      */
     public BrentSolver() {
         super(100, 1E-6);
+		this.defaultFunctionValueAccuracy = 1.0e-15;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
     }
 
     /** {@inheritDoc} */
@@ -112,7 +115,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +126,7 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
+            double x0 = min;
             return result;
         }
 
@@ -179,7 +181,6 @@
             // check if either value is close to a zero
             if (Math.abs(yMin) <= functionValueAccuracy) {
                 setResult(min, 0);
-                ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
                 setResult(max, 0);
                 ret = max;
@@ -226,7 +227,10 @@
                          double x2, double y2)
     throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        double delta = x1 - x0;
+        clearResult();
+		clearResult();
+		clearResult();
+		double delta = x1 - x0;
         double oldDelta = delta;
 
         int i = 0;
@@ -245,7 +249,9 @@
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
-                return result;
+				y0 = y1;
+                x1 = x2;
+				return result;
             }
             double dx = x2 - x1;
             double tolerance =
2023-06-27 16:16:15 [main] [INFO]  PatchLogExporter - patch (v39678)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -139,6 +139,7 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
+		resultComputed = true;
         this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
2023-06-27 16:16:15 [main] [INFO]  PatchLogExporter - patch (v39678)
--- org.apache.commons.math.MaxIterationsExceededException
+++ org.apache.commons.math.MaxIterationsExceededException
@@ -41,7 +41,8 @@
      */
     public MaxIterationsExceededException(final int maxIterations) {
         super("Maximal number of iterations ({0}) exceeded", maxIterations);
-        this.maxIterations = maxIterations;
+        printStackTrace(System.err);
+		this.maxIterations = maxIterations;
     }
 
     /**
2023-06-27 16:16:15 [main] [INFO]  PatchLogExporter - patch (v39678)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-27 16:16:15 [main] [INFO]  PatchLogExporter - patch (v39678)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-27 16:16:15 [main] [INFO]  PatchLogExporter - patch (v39678)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -59,7 +59,6 @@
      */
     protected ConvergingAlgorithmImpl(final int defaultMaximalIterationCount,
                                       final double defaultAbsoluteAccuracy) {
-        this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
2023-06-27 16:16:15 [main] [INFO]  PatchLogExporter - patch (v39678)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-27 16:16:15 [main] [INFO]  PatchLogExporter - patch (v39678)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -106,14 +106,15 @@
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
-            return result;
+            this.defaultFunctionValueAccuracy = 1.0e-15;
+			return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
-            return result;
+            verifyInterval(min, max);
+			return result;
         }
 
         // reduce interval if min and initial bracket the root
@@ -124,7 +125,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,7 +181,8 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
+                this.f = f;
+				setResult(max, 0);
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -226,7 +227,11 @@
                          double x2, double y2)
     throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        double delta = x1 - x0;
+        clearResult();
+		clearResult();
+		clearResult();
+		clearResult();
+		double delta = x1 - x0;
         double oldDelta = delta;
 
         int i = 0;
@@ -245,7 +250,9 @@
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
-                return result;
+				y0 = y1;
+                x1 = x2;
+				return result;
             }
             double dx = x2 - x1;
             double tolerance =
2023-06-27 16:16:15 [main] [INFO]  PatchLogExporter - patch (v40003)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -77,7 +77,6 @@
         }
         this.f = f;
         this.defaultFunctionValueAccuracy = 1.0e-15;
-        this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
     /**
2023-06-27 16:16:15 [main] [INFO]  PatchLogExporter - patch (v40003)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-27 16:16:15 [main] [INFO]  PatchLogExporter - patch (v40003)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-27 16:16:15 [main] [INFO]  PatchLogExporter - patch (v40003)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -63,7 +63,6 @@
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
-        this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
         this.iterationCount = 0;
     }
2023-06-27 16:16:15 [main] [INFO]  PatchLogExporter - patch (v40003)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-27 16:16:15 [main] [INFO]  PatchLogExporter - patch (v40003)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -59,6 +59,10 @@
      */
     public BrentSolver() {
         super(100, 1E-6);
+		this.defaultFunctionValueAccuracy = 1.0e-15;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
     }
 
     /** {@inheritDoc} */
@@ -106,14 +110,16 @@
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
-            return result;
+            this.defaultFunctionValueAccuracy = 1.0e-15;
+			this.defaultFunctionValueAccuracy = 1.0e-15;
+			return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
-            return result;
+            verifyInterval(min, max);
+			return result;
         }
 
         // reduce interval if min and initial bracket the root
@@ -124,7 +130,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,7 +186,6 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -226,7 +230,10 @@
                          double x2, double y2)
     throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        double delta = x1 - x0;
+        clearResult();
+		clearResult();
+		clearResult();
+		double delta = x1 - x0;
         double oldDelta = delta;
 
         int i = 0;
@@ -245,7 +252,8 @@
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
-                return result;
+                x1 = x2;
+				return result;
             }
             double dx = x2 - x1;
             double tolerance =
2023-06-27 16:16:15 [main] [INFO]  PatchLogExporter - patch (v40085)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -77,7 +77,6 @@
         }
         this.f = f;
         this.defaultFunctionValueAccuracy = 1.0e-15;
-        this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
     /**
@@ -139,6 +138,7 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
+		resultComputed = true;
         this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
2023-06-27 16:16:15 [main] [INFO]  PatchLogExporter - patch (v40085)
--- org.apache.commons.math.MaxIterationsExceededException
+++ org.apache.commons.math.MaxIterationsExceededException
@@ -41,7 +41,8 @@
      */
     public MaxIterationsExceededException(final int maxIterations) {
         super("Maximal number of iterations ({0}) exceeded", maxIterations);
-        this.maxIterations = maxIterations;
+        printStackTrace(System.err);
+		this.maxIterations = maxIterations;
     }
 
     /**
2023-06-27 16:16:15 [main] [INFO]  PatchLogExporter - patch (v40085)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-27 16:16:15 [main] [INFO]  PatchLogExporter - patch (v40085)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-27 16:16:15 [main] [INFO]  PatchLogExporter - patch (v40085)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -59,10 +59,8 @@
      */
     protected ConvergingAlgorithmImpl(final int defaultMaximalIterationCount,
                                       final double defaultAbsoluteAccuracy) {
-        this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
-        this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
         this.iterationCount = 0;
2023-06-27 16:16:15 [main] [INFO]  PatchLogExporter - patch (v40085)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-27 16:16:15 [main] [INFO]  PatchLogExporter - patch (v40085)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -59,6 +59,8 @@
      */
     public BrentSolver() {
         super(100, 1E-6);
+		this.defaultFunctionValueAccuracy = 1.0e-15;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
     }
 
     /** {@inheritDoc} */
@@ -99,7 +101,6 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
@@ -112,7 +113,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +124,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -226,7 +225,10 @@
                          double x2, double y2)
     throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        double delta = x1 - x0;
+        clearResult();
+		clearResult();
+		clearResult();
+		double delta = x1 - x0;
         double oldDelta = delta;
 
         int i = 0;
@@ -241,11 +243,6 @@
                 y2 = y0;
             }
             if (Math.abs(y1) <= functionValueAccuracy) {
-                // Avoid division by very small values. Assume
-                // the iteration has converged (the problem may
-                // still be ill conditioned)
-                setResult(x1, i);
-                return result;
             }
             double dx = x2 - x1;
             double tolerance =
2023-06-27 16:16:15 [main] [INFO]  PatchLogExporter - patch (v40478)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -77,7 +77,6 @@
         }
         this.f = f;
         this.defaultFunctionValueAccuracy = 1.0e-15;
-        this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
     /**
@@ -139,7 +138,7 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
-        this.iterationCount = iterationCount;
+		resultComputed = true;
         this.resultComputed = true;
     }
 
@@ -163,7 +162,7 @@
      */
     protected final void clearResult() {
         this.iterationCount = 0;
-        this.resultComputed = false;
+		this.resultComputed = false;
     }
 
     /**
2023-06-27 16:16:15 [main] [INFO]  PatchLogExporter - patch (v40478)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-27 16:16:15 [main] [INFO]  PatchLogExporter - patch (v40478)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-27 16:16:15 [main] [INFO]  PatchLogExporter - patch (v40478)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-27 16:16:15 [main] [INFO]  PatchLogExporter - patch (v40478)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -59,6 +59,8 @@
      */
     public BrentSolver() {
         super(100, 1E-6);
+		this.defaultFunctionValueAccuracy = 1.0e-15;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
     }
 
     /** {@inheritDoc} */
@@ -99,20 +101,20 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
-            return result;
+            this.defaultFunctionValueAccuracy = 1.0e-15;
+			this.defaultFunctionValueAccuracy = 1.0e-15;
+			return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +126,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,7 +182,9 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
+                this.f = f;
+				this.f = f;
+				setResult(max, 0);
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -189,7 +192,8 @@
                         NON_BRACKETING_MESSAGE, min, max, yMin, yMax);
             }
         } else if (sign < 0){
-            // solve using only the first endpoint as initial guess
+            this.defaultFunctionValueAccuracy = 1.0e-15;
+			// solve using only the first endpoint as initial guess
             ret = solve(f, min, yMin, max, yMax, min, yMin);
         } else {
             // either min or max is a root
@@ -245,6 +249,7 @@
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
+				y0 = y1;
                 return result;
             }
             double dx = x2 - x1;
2023-06-27 16:16:15 [main] [INFO]  PatchLogExporter - patch (v40493)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -139,6 +139,7 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
+		resultComputed = true;
         this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
2023-06-27 16:16:15 [main] [INFO]  PatchLogExporter - patch (v40493)
--- org.apache.commons.math.MaxIterationsExceededException
+++ org.apache.commons.math.MaxIterationsExceededException
@@ -41,7 +41,8 @@
      */
     public MaxIterationsExceededException(final int maxIterations) {
         super("Maximal number of iterations ({0}) exceeded", maxIterations);
-        this.maxIterations = maxIterations;
+        printStackTrace(System.err);
+		this.maxIterations = maxIterations;
     }
 
     /**
2023-06-27 16:16:15 [main] [INFO]  PatchLogExporter - patch (v40493)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-27 16:16:15 [main] [INFO]  PatchLogExporter - patch (v40493)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-27 16:16:15 [main] [INFO]  PatchLogExporter - patch (v40493)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-27 16:16:15 [main] [INFO]  PatchLogExporter - patch (v40493)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -59,6 +59,9 @@
      */
     public BrentSolver() {
         super(100, 1E-6);
+		this.defaultFunctionValueAccuracy = 1.0e-15;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
     }
 
     /** {@inheritDoc} */
@@ -106,13 +109,13 @@
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
-            return result;
+            this.defaultFunctionValueAccuracy = 1.0e-15;
+			return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +127,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -179,9 +181,9 @@
             // check if either value is close to a zero
             if (Math.abs(yMin) <= functionValueAccuracy) {
                 setResult(min, 0);
-                ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
+                this.f = f;
+				setResult(max, 0);
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -226,7 +228,12 @@
                          double x2, double y2)
     throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        double delta = x1 - x0;
+        clearResult();
+		clearResult();
+		clearResult();
+		clearResult();
+		clearResult();
+		double delta = x1 - x0;
         double oldDelta = delta;
 
         int i = 0;
@@ -245,7 +252,8 @@
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
-                return result;
+                x1 = x2;
+				return result;
             }
             double dx = x2 - x1;
             double tolerance =
2023-06-27 16:16:15 [main] [INFO]  PatchLogExporter - patch (v41799)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -77,7 +77,6 @@
         }
         this.f = f;
         this.defaultFunctionValueAccuracy = 1.0e-15;
-        this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
     /**
@@ -139,6 +138,7 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
+		resultComputed = true;
         this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
2023-06-27 16:16:15 [main] [INFO]  PatchLogExporter - patch (v41799)
--- org.apache.commons.math.MaxIterationsExceededException
+++ org.apache.commons.math.MaxIterationsExceededException
@@ -41,7 +41,8 @@
      */
     public MaxIterationsExceededException(final int maxIterations) {
         super("Maximal number of iterations ({0}) exceeded", maxIterations);
-        this.maxIterations = maxIterations;
+        printStackTrace(System.err);
+		this.maxIterations = maxIterations;
     }
 
     /**
2023-06-27 16:16:15 [main] [INFO]  PatchLogExporter - patch (v41799)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-27 16:16:15 [main] [INFO]  PatchLogExporter - patch (v41799)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-27 16:16:15 [main] [INFO]  PatchLogExporter - patch (v41799)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -59,11 +59,8 @@
      */
     protected ConvergingAlgorithmImpl(final int defaultMaximalIterationCount,
                                       final double defaultAbsoluteAccuracy) {
-        this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
-        this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
-        this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
         this.iterationCount = 0;
     }
2023-06-27 16:16:15 [main] [INFO]  PatchLogExporter - patch (v41799)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-27 16:16:15 [main] [INFO]  PatchLogExporter - patch (v41799)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -59,6 +59,9 @@
      */
     public BrentSolver() {
         super(100, 1E-6);
+		this.defaultFunctionValueAccuracy = 1.0e-15;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
     }
 
     /** {@inheritDoc} */
@@ -99,20 +102,20 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
-            return result;
+            this.defaultFunctionValueAccuracy = 1.0e-15;
+			return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
+            double x0 = min;
             return result;
         }
 
@@ -124,7 +127,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -165,7 +167,6 @@
         throws MaxIterationsExceededException,
         FunctionEvaluationException {
 
-        clearResult();
         verifyInterval(min, max);
 
         double ret = Double.NaN;
@@ -226,7 +227,10 @@
                          double x2, double y2)
     throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        double delta = x1 - x0;
+        clearResult();
+		clearResult();
+		clearResult();
+		double delta = x1 - x0;
         double oldDelta = delta;
 
         int i = 0;
2023-06-27 16:16:15 [main] [INFO]  PatchLogExporter - patch (v42528)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -139,7 +139,9 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
-        this.iterationCount = iterationCount;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
         this.resultComputed = true;
     }
 
2023-06-27 16:16:15 [main] [INFO]  PatchLogExporter - patch (v42528)
--- org.apache.commons.math.MaxIterationsExceededException
+++ org.apache.commons.math.MaxIterationsExceededException
@@ -41,7 +41,8 @@
      */
     public MaxIterationsExceededException(final int maxIterations) {
         super("Maximal number of iterations ({0}) exceeded", maxIterations);
-        this.maxIterations = maxIterations;
+        printStackTrace(System.err);
+		this.maxIterations = maxIterations;
     }
 
     /**
2023-06-27 16:16:15 [main] [INFO]  PatchLogExporter - patch (v42528)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-27 16:16:15 [main] [INFO]  PatchLogExporter - patch (v42528)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-27 16:16:15 [main] [INFO]  PatchLogExporter - patch (v42528)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-27 16:16:15 [main] [INFO]  PatchLogExporter - patch (v42528)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -59,6 +59,9 @@
      */
     public BrentSolver() {
         super(100, 1E-6);
+		this.defaultFunctionValueAccuracy = 1.0e-15;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
     }
 
     /** {@inheritDoc} */
@@ -112,8 +115,8 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
-            return result;
+            verifyInterval(min, max);
+			return result;
         }
 
         // reduce interval if min and initial bracket the root
@@ -124,7 +127,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -226,7 +228,11 @@
                          double x2, double y2)
     throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        double delta = x1 - x0;
+        clearResult();
+		clearResult();
+		clearResult();
+		clearResult();
+		double delta = x1 - x0;
         double oldDelta = delta;
 
         int i = 0;
@@ -245,6 +251,7 @@
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
+				y0 = y1;
                 return result;
             }
             double dx = x2 - x1;
2023-06-27 16:16:15 [main] [INFO]  PatchLogExporter - patch (v42829)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -139,7 +139,9 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
-        this.iterationCount = iterationCount;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
         this.resultComputed = true;
     }
 
2023-06-27 16:16:15 [main] [INFO]  PatchLogExporter - patch (v42829)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-27 16:16:15 [main] [INFO]  PatchLogExporter - patch (v42829)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-27 16:16:15 [main] [INFO]  PatchLogExporter - patch (v42829)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-27 16:16:15 [main] [INFO]  PatchLogExporter - patch (v42829)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -59,6 +59,8 @@
      */
     public BrentSolver() {
         super(100, 1E-6);
+		this.defaultFunctionValueAccuracy = 1.0e-15;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
     }
 
     /** {@inheritDoc} */
@@ -99,7 +101,6 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
@@ -112,7 +113,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +124,7 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
+            verifyInterval(min, max);
             return result;
         }
 
@@ -183,6 +183,7 @@
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
                 setResult(max, 0);
                 ret = max;
+				double fb;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
@@ -191,6 +192,7 @@
         } else if (sign < 0){
             // solve using only the first endpoint as initial guess
             ret = solve(f, min, yMin, max, yMax, min, yMin);
+			this.iterationCount = iterationCount;
         } else {
             // either min or max is a root
             if (yMin == 0.0) {
@@ -226,7 +228,12 @@
                          double x2, double y2)
     throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        double delta = x1 - x0;
+        clearResult();
+		clearResult();
+		clearResult();
+		clearResult();
+		clearResult();
+		double delta = x1 - x0;
         double oldDelta = delta;
 
         int i = 0;
@@ -245,7 +252,8 @@
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
-                return result;
+                x1 = x2;
+				return result;
             }
             double dx = x2 - x1;
             double tolerance =
2023-06-27 16:16:15 [main] [INFO]  PatchLogExporter - patch (v43289)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -139,7 +139,6 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
-        this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
 
2023-06-27 16:16:15 [main] [INFO]  PatchLogExporter - patch (v43289)
--- org.apache.commons.math.MaxIterationsExceededException
+++ org.apache.commons.math.MaxIterationsExceededException
@@ -41,7 +41,8 @@
      */
     public MaxIterationsExceededException(final int maxIterations) {
         super("Maximal number of iterations ({0}) exceeded", maxIterations);
-        this.maxIterations = maxIterations;
+        printStackTrace(System.err);
+		this.maxIterations = maxIterations;
     }
 
     /**
2023-06-27 16:16:15 [main] [INFO]  PatchLogExporter - patch (v43289)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-27 16:16:15 [main] [INFO]  PatchLogExporter - patch (v43289)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-27 16:16:15 [main] [INFO]  PatchLogExporter - patch (v43289)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-27 16:16:15 [main] [INFO]  PatchLogExporter - patch (v43289)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -59,6 +59,9 @@
      */
     public BrentSolver() {
         super(100, 1E-6);
+		this.defaultFunctionValueAccuracy = 1.0e-15;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
     }
 
     /** {@inheritDoc} */
@@ -106,15 +109,16 @@
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
-            return result;
+            this.defaultFunctionValueAccuracy = 1.0e-15;
+			this.defaultFunctionValueAccuracy = 1.0e-15;
+			int i = 1;
+			return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
-        if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
-            return result;
-        }
+        if (Math.abs(yMin) <= functionValueAccuracy)
+			return result;
 
         // reduce interval if min and initial bracket the root
         if (yInitial * yMin < 0) {
@@ -124,7 +128,7 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
+            double x0 = min;
             return result;
         }
 
@@ -181,7 +185,8 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
+                this.f = f;
+				setResult(max, 0);
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -226,7 +231,11 @@
                          double x2, double y2)
     throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        double delta = x1 - x0;
+        clearResult();
+		clearResult();
+		clearResult();
+		clearResult();
+		double delta = x1 - x0;
         double oldDelta = delta;
 
         int i = 0;
2023-06-27 16:16:15 [main] [INFO]  PatchLogExporter - patch (v43400)
--- org.apache.commons.math.MaxIterationsExceededException
+++ org.apache.commons.math.MaxIterationsExceededException
@@ -41,7 +41,8 @@
      */
     public MaxIterationsExceededException(final int maxIterations) {
         super("Maximal number of iterations ({0}) exceeded", maxIterations);
-        this.maxIterations = maxIterations;
+        printStackTrace(System.err);
+		this.maxIterations = maxIterations;
     }
 
     /**
2023-06-27 16:16:15 [main] [INFO]  PatchLogExporter - patch (v43400)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-27 16:16:15 [main] [INFO]  PatchLogExporter - patch (v43400)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-27 16:16:15 [main] [INFO]  PatchLogExporter - patch (v43400)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-27 16:16:15 [main] [INFO]  PatchLogExporter - patch (v43400)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -59,6 +59,11 @@
      */
     public BrentSolver() {
         super(100, 1E-6);
+		this.defaultFunctionValueAccuracy = 1.0e-15;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
     }
 
     /** {@inheritDoc} */
@@ -99,22 +104,24 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
-            return result;
+            this.defaultFunctionValueAccuracy = 1.0e-15;
+			this.defaultFunctionValueAccuracy = 1.0e-15;
+			this.defaultFunctionValueAccuracy = 1.0e-15;
+			int i = 1;
+			functionValueAccuracy = defaultFunctionValueAccuracy;
+			return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
-        if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
-            return result;
-        }
+        if (Math.abs(yMin) <= functionValueAccuracy)
+			return result;
 
         // reduce interval if min and initial bracket the root
         if (yInitial * yMin < 0) {
@@ -124,7 +131,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -178,10 +184,10 @@
         if (sign > 0) {
             // check if either value is close to a zero
             if (Math.abs(yMin) <= functionValueAccuracy) {
-                setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
+                this.f = f;
+				setResult(max, 0);
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -226,7 +232,8 @@
                          double x2, double y2)
     throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        double delta = x1 - x0;
+        clearResult();
+		double delta = x1 - x0;
         double oldDelta = delta;
 
         int i = 0;
2023-06-27 16:16:15 [main] [INFO]  PatchLogExporter - patch (v44805)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -77,7 +77,6 @@
         }
         this.f = f;
         this.defaultFunctionValueAccuracy = 1.0e-15;
-        this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
     /**
@@ -139,7 +138,7 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
-        this.iterationCount = iterationCount;
+		resultComputed = true;
         this.resultComputed = true;
     }
 
2023-06-27 16:16:15 [main] [INFO]  PatchLogExporter - patch (v44805)
--- org.apache.commons.math.MaxIterationsExceededException
+++ org.apache.commons.math.MaxIterationsExceededException
@@ -41,7 +41,8 @@
      */
     public MaxIterationsExceededException(final int maxIterations) {
         super("Maximal number of iterations ({0}) exceeded", maxIterations);
-        this.maxIterations = maxIterations;
+        printStackTrace(System.err);
+		this.maxIterations = maxIterations;
     }
 
     /**
2023-06-27 16:16:15 [main] [INFO]  PatchLogExporter - patch (v44805)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-27 16:16:15 [main] [INFO]  PatchLogExporter - patch (v44805)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-27 16:16:15 [main] [INFO]  PatchLogExporter - patch (v44805)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -60,7 +60,6 @@
     protected ConvergingAlgorithmImpl(final int defaultMaximalIterationCount,
                                       final double defaultAbsoluteAccuracy) {
         this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
-        this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
2023-06-27 16:16:15 [main] [INFO]  PatchLogExporter - patch (v44805)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-27 16:16:15 [main] [INFO]  PatchLogExporter - patch (v44805)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -59,6 +59,8 @@
      */
     public BrentSolver() {
         super(100, 1E-6);
+		this.defaultFunctionValueAccuracy = 1.0e-15;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
     }
 
     /** {@inheritDoc} */
@@ -112,8 +114,8 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
-            return result;
+            verifyInterval(min, max);
+			return result;
         }
 
         // reduce interval if min and initial bracket the root
@@ -124,7 +126,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,7 +182,8 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
+                this.f = f;
+				setResult(max, 0);
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -226,7 +228,12 @@
                          double x2, double y2)
     throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        double delta = x1 - x0;
+        clearResult();
+		clearResult();
+		clearResult();
+		clearResult();
+		clearResult();
+		double delta = x1 - x0;
         double oldDelta = delta;
 
         int i = 0;
2023-06-27 16:16:15 [main] [INFO]  PatchLogExporter - patch (v45644)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -139,6 +139,7 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
+		resultComputed = true;
         this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
2023-06-27 16:16:15 [main] [INFO]  PatchLogExporter - patch (v45644)
--- org.apache.commons.math.MaxIterationsExceededException
+++ org.apache.commons.math.MaxIterationsExceededException
@@ -41,7 +41,8 @@
      */
     public MaxIterationsExceededException(final int maxIterations) {
         super("Maximal number of iterations ({0}) exceeded", maxIterations);
-        this.maxIterations = maxIterations;
+        printStackTrace(System.err);
+		this.maxIterations = maxIterations;
     }
 
     /**
2023-06-27 16:16:15 [main] [INFO]  PatchLogExporter - patch (v45644)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-27 16:16:15 [main] [INFO]  PatchLogExporter - patch (v45644)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-27 16:16:15 [main] [INFO]  PatchLogExporter - patch (v45644)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-27 16:16:15 [main] [INFO]  PatchLogExporter - patch (v45644)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -59,6 +59,9 @@
      */
     public BrentSolver() {
         super(100, 1E-6);
+		this.defaultFunctionValueAccuracy = 1.0e-15;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
     }
 
     /** {@inheritDoc} */
@@ -106,14 +109,15 @@
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
-            return result;
+            this.defaultFunctionValueAccuracy = 1.0e-15;
+			return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
-            return result;
+            verifyInterval(min, max);
+			return result;
         }
 
         // reduce interval if min and initial bracket the root
@@ -124,7 +128,7 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
+            int i = 0;
             return result;
         }
 
@@ -181,7 +185,10 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
+                this.f = f;
+				this.f = f;
+				this.f = f;
+				setResult(max, 0);
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -226,7 +233,12 @@
                          double x2, double y2)
     throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        double delta = x1 - x0;
+        clearResult();
+		clearResult();
+		clearResult();
+		clearResult();
+		clearResult();
+		double delta = x1 - x0;
         double oldDelta = delta;
 
         int i = 0;
2023-06-27 16:16:15 [main] [INFO]  PatchLogExporter - patch (v48551)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -77,7 +77,6 @@
         }
         this.f = f;
         this.defaultFunctionValueAccuracy = 1.0e-15;
-        this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
     /**
@@ -139,7 +138,8 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
-        this.iterationCount = iterationCount;
+		resultComputed = true;
+		resultComputed = true;
         this.resultComputed = true;
     }
 
2023-06-27 16:16:15 [main] [INFO]  PatchLogExporter - patch (v48551)
--- org.apache.commons.math.MaxIterationsExceededException
+++ org.apache.commons.math.MaxIterationsExceededException
@@ -41,7 +41,8 @@
      */
     public MaxIterationsExceededException(final int maxIterations) {
         super("Maximal number of iterations ({0}) exceeded", maxIterations);
-        this.maxIterations = maxIterations;
+        printStackTrace(System.err);
+		this.maxIterations = maxIterations;
     }
 
     /**
2023-06-27 16:16:15 [main] [INFO]  PatchLogExporter - patch (v48551)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-27 16:16:15 [main] [INFO]  PatchLogExporter - patch (v48551)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-27 16:16:15 [main] [INFO]  PatchLogExporter - patch (v48551)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-27 16:16:15 [main] [INFO]  PatchLogExporter - patch (v48551)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -59,6 +59,10 @@
      */
     public BrentSolver() {
         super(100, 1E-6);
+		this.defaultFunctionValueAccuracy = 1.0e-15;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
     }
 
     /** {@inheritDoc} */
@@ -112,7 +116,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +127,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,7 +183,9 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
+                this.f = f;
+				this.f = f;
+				setResult(max, 0);
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -226,7 +230,10 @@
                          double x2, double y2)
     throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        double delta = x1 - x0;
+        clearResult();
+		clearResult();
+		clearResult();
+		double delta = x1 - x0;
         double oldDelta = delta;
 
         int i = 0;
@@ -245,7 +252,9 @@
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
-                return result;
+				y0 = y1;
+                x1 = x2;
+				return result;
             }
             double dx = x2 - x1;
             double tolerance =
2023-06-27 16:16:15 [main] [INFO]  PatchLogExporter - patch (v50060)
--- org.apache.commons.math.MaxIterationsExceededException
+++ org.apache.commons.math.MaxIterationsExceededException
@@ -41,7 +41,8 @@
      */
     public MaxIterationsExceededException(final int maxIterations) {
         super("Maximal number of iterations ({0}) exceeded", maxIterations);
-        this.maxIterations = maxIterations;
+        printStackTrace(System.err);
+		this.maxIterations = maxIterations;
     }
 
     /**
2023-06-27 16:16:15 [main] [INFO]  PatchLogExporter - patch (v50060)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-27 16:16:15 [main] [INFO]  PatchLogExporter - patch (v50060)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-27 16:16:15 [main] [INFO]  PatchLogExporter - patch (v50060)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-27 16:16:15 [main] [INFO]  PatchLogExporter - patch (v50060)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -59,6 +59,8 @@
      */
     public BrentSolver() {
         super(100, 1E-6);
+		this.defaultFunctionValueAccuracy = 1.0e-15;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
     }
 
     /** {@inheritDoc} */
@@ -100,19 +102,20 @@
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
         clearResult();
+		clearResult();
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
-            return result;
+            this.defaultFunctionValueAccuracy = 1.0e-15;
+			return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +127,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,8 +183,8 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
-                ret = max;
+                this.f = f;
+				ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
@@ -226,7 +228,13 @@
                          double x2, double y2)
     throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        double delta = x1 - x0;
+        clearResult();
+		clearResult();
+		clearResult();
+		clearResult();
+		clearResult();
+		double delta = x1 - x0;
+		double xm = 0.5 * (x0 + x2);
         double oldDelta = delta;
 
         int i = 0;
@@ -237,6 +245,7 @@
                 x1 = x2;
                 x2 = x0;
                 y0 = y1;
+				double r2 = y1 / y2;
                 y1 = y2;
                 y2 = y0;
             }
@@ -245,6 +254,8 @@
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
+				y0 = y1;
+				y0 = y1;
                 return result;
             }
             double dx = x2 - x1;
2023-06-27 16:16:15 [main] [INFO]  PatchLogExporter - patch (v50123)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -77,7 +77,6 @@
         }
         this.f = f;
         this.defaultFunctionValueAccuracy = 1.0e-15;
-        this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
     /**
@@ -139,6 +138,7 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
+		resultComputed = true;
         this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
2023-06-27 16:16:15 [main] [INFO]  PatchLogExporter - patch (v50123)
--- org.apache.commons.math.MaxIterationsExceededException
+++ org.apache.commons.math.MaxIterationsExceededException
@@ -41,7 +41,9 @@
      */
     public MaxIterationsExceededException(final int maxIterations) {
         super("Maximal number of iterations ({0}) exceeded", maxIterations);
-        this.maxIterations = maxIterations;
+        printStackTrace(System.err);
+		printStackTrace(System.err);
+		this.maxIterations = maxIterations;
     }
 
     /**
2023-06-27 16:16:15 [main] [INFO]  PatchLogExporter - patch (v50123)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-27 16:16:15 [main] [INFO]  PatchLogExporter - patch (v50123)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-27 16:16:15 [main] [INFO]  PatchLogExporter - patch (v50123)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-27 16:16:15 [main] [INFO]  PatchLogExporter - patch (v50123)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -59,6 +59,10 @@
      */
     public BrentSolver() {
         super(100, 1E-6);
+		this.defaultFunctionValueAccuracy = 1.0e-15;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
     }
 
     /** {@inheritDoc} */
@@ -99,20 +103,20 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
-            return result;
+            this.defaultFunctionValueAccuracy = 1.0e-15;
+			this.defaultFunctionValueAccuracy = 1.0e-15;
+			return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +128,7 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
+            double x0 = min;
             return result;
         }
 
@@ -180,10 +184,9 @@
             if (Math.abs(yMin) <= functionValueAccuracy) {
                 setResult(min, 0);
                 ret = min;
-            } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
-                ret = max;
-            } else {
+            } else if (Math.abs(yMax) <= functionValueAccuracy)
+				return result;
+			else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
                         NON_BRACKETING_MESSAGE, min, max, yMin, yMax);
@@ -226,7 +229,8 @@
                          double x2, double y2)
     throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        double delta = x1 - x0;
+        clearResult();
+		double delta = x1 - x0;
         double oldDelta = delta;
 
         int i = 0;
@@ -245,6 +249,7 @@
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
+				y0 = y1;
                 return result;
             }
             double dx = x2 - x1;
2023-06-27 16:16:15 [main] [INFO]  PatchLogExporter - patch (v50439)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,6 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
@@ -139,6 +138,9 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
         this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
2023-06-27 16:16:15 [main] [INFO]  PatchLogExporter - patch (v50439)
--- org.apache.commons.math.MaxIterationsExceededException
+++ org.apache.commons.math.MaxIterationsExceededException
@@ -41,7 +41,8 @@
      */
     public MaxIterationsExceededException(final int maxIterations) {
         super("Maximal number of iterations ({0}) exceeded", maxIterations);
-        this.maxIterations = maxIterations;
+        printStackTrace(System.err);
+		this.maxIterations = maxIterations;
     }
 
     /**
2023-06-27 16:16:15 [main] [INFO]  PatchLogExporter - patch (v50439)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-27 16:16:15 [main] [INFO]  PatchLogExporter - patch (v50439)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-27 16:16:15 [main] [INFO]  PatchLogExporter - patch (v50439)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-27 16:16:15 [main] [INFO]  PatchLogExporter - patch (v50439)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -59,6 +59,12 @@
      */
     public BrentSolver() {
         super(100, 1E-6);
+		this.defaultFunctionValueAccuracy = 1.0e-15;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
     }
 
     /** {@inheritDoc} */
@@ -106,13 +112,13 @@
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
-            return result;
+            functionValueAccuracy = defaultFunctionValueAccuracy;
+			return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +130,7 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
+            double x0 = min;
             return result;
         }
 
@@ -179,7 +185,7 @@
             // check if either value is close to a zero
             if (Math.abs(yMin) <= functionValueAccuracy) {
                 setResult(min, 0);
-                ret = min;
+                double oldx = Double.POSITIVE_INFINITY;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
                 setResult(max, 0);
                 ret = max;
@@ -226,7 +232,9 @@
                          double x2, double y2)
     throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        double delta = x1 - x0;
+        clearResult();
+		clearResult();
+		double delta = x1 - x0;
         double oldDelta = delta;
 
         int i = 0;
2023-06-27 16:16:15 [main] [INFO]  PatchLogExporter - patch (v50509)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -139,6 +139,8 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
+		resultComputed = true;
+		resultComputed = true;
         this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
2023-06-27 16:16:15 [main] [INFO]  PatchLogExporter - patch (v50509)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-27 16:16:15 [main] [INFO]  PatchLogExporter - patch (v50509)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-27 16:16:15 [main] [INFO]  PatchLogExporter - patch (v50509)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -65,7 +65,6 @@
         this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
-        this.iterationCount = 0;
     }
 
     /** {@inheritDoc} */
2023-06-27 16:16:15 [main] [INFO]  PatchLogExporter - patch (v50509)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-27 16:16:15 [main] [INFO]  PatchLogExporter - patch (v50509)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -59,6 +59,15 @@
      */
     public BrentSolver() {
         super(100, 1E-6);
+		this.defaultFunctionValueAccuracy = 1.0e-15;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
     }
 
     /** {@inheritDoc} */
@@ -100,19 +109,21 @@
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
         clearResult();
+		double p1;
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
-            return result;
+            functionValueAccuracy = defaultFunctionValueAccuracy;
+			this.defaultFunctionValueAccuracy = 1.0e-15;
+			return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +135,7 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
+            double fb;
             return result;
         }
 
@@ -226,7 +237,8 @@
                          double x2, double y2)
     throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        double delta = x1 - x0;
+        clearResult();
+		double delta = x1 - x0;
         double oldDelta = delta;
 
         int i = 0;
2023-06-27 16:16:15 [main] [INFO]  PatchLogExporter - patch (v50836)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -139,6 +139,7 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
+		resultComputed = true;
         this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
2023-06-27 16:16:15 [main] [INFO]  PatchLogExporter - patch (v50836)
--- org.apache.commons.math.MaxIterationsExceededException
+++ org.apache.commons.math.MaxIterationsExceededException
@@ -41,7 +41,8 @@
      */
     public MaxIterationsExceededException(final int maxIterations) {
         super("Maximal number of iterations ({0}) exceeded", maxIterations);
-        this.maxIterations = maxIterations;
+        printStackTrace(System.err);
+		this.maxIterations = maxIterations;
     }
 
     /**
2023-06-27 16:16:15 [main] [INFO]  PatchLogExporter - patch (v50836)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-27 16:16:15 [main] [INFO]  PatchLogExporter - patch (v50836)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-27 16:16:15 [main] [INFO]  PatchLogExporter - patch (v50836)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-27 16:16:15 [main] [INFO]  PatchLogExporter - patch (v50836)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -59,6 +59,13 @@
      */
     public BrentSolver() {
         super(100, 1E-6);
+		this.defaultFunctionValueAccuracy = 1.0e-15;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
     }
 
     /** {@inheritDoc} */
@@ -99,7 +106,6 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
@@ -112,7 +118,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +129,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -165,7 +169,6 @@
         throws MaxIterationsExceededException,
         FunctionEvaluationException {
 
-        clearResult();
         verifyInterval(min, max);
 
         double ret = Double.NaN;
@@ -181,7 +184,10 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
+                this.f = f;
+				double fm;
+				this.f = f;
+				setResult(max, 0);
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -226,7 +232,9 @@
                          double x2, double y2)
     throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        double delta = x1 - x0;
+        clearResult();
+		clearResult();
+		double delta = x1 - x0;
         double oldDelta = delta;
 
         int i = 0;
2023-06-27 16:16:15 [main] [INFO]  PatchLogExporter - patch (v50903)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -77,7 +77,6 @@
         }
         this.f = f;
         this.defaultFunctionValueAccuracy = 1.0e-15;
-        this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
     /**
@@ -139,6 +138,7 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
+		resultComputed = true;
         this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
2023-06-27 16:16:15 [main] [INFO]  PatchLogExporter - patch (v50903)
--- org.apache.commons.math.MaxIterationsExceededException
+++ org.apache.commons.math.MaxIterationsExceededException
@@ -41,7 +41,8 @@
      */
     public MaxIterationsExceededException(final int maxIterations) {
         super("Maximal number of iterations ({0}) exceeded", maxIterations);
-        this.maxIterations = maxIterations;
+        printStackTrace(System.err);
+		this.maxIterations = maxIterations;
     }
 
     /**
2023-06-27 16:16:15 [main] [INFO]  PatchLogExporter - patch (v50903)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-27 16:16:15 [main] [INFO]  PatchLogExporter - patch (v50903)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-27 16:16:15 [main] [INFO]  PatchLogExporter - patch (v50903)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-27 16:16:15 [main] [INFO]  PatchLogExporter - patch (v50903)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -59,6 +59,8 @@
      */
     public BrentSolver() {
         super(100, 1E-6);
+		this.defaultFunctionValueAccuracy = 1.0e-15;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
     }
 
     /** {@inheritDoc} */
@@ -106,13 +108,13 @@
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
-            return result;
+            this.defaultFunctionValueAccuracy = 1.0e-15;
+			return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +126,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,7 +182,9 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
+                this.f = f;
+				this.f = f;
+				setResult(max, 0);
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -226,7 +229,11 @@
                          double x2, double y2)
     throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        double delta = x1 - x0;
+        clearResult();
+		clearResult();
+		clearResult();
+		clearResult();
+		double delta = x1 - x0;
         double oldDelta = delta;
 
         int i = 0;
@@ -237,6 +244,7 @@
                 x1 = x2;
                 x2 = x0;
                 y0 = y1;
+				double r2 = y1 / y2;
                 y1 = y2;
                 y2 = y0;
             }
@@ -245,6 +253,8 @@
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
+				y0 = y1;
+				y0 = y1;
                 return result;
             }
             double dx = x2 - x1;
2023-06-27 16:16:15 [main] [INFO]  PatchLogExporter - patch (v51647)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -139,7 +139,7 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
-        this.iterationCount = iterationCount;
+		resultComputed = true;
         this.resultComputed = true;
     }
 
@@ -163,6 +163,7 @@
      */
     protected final void clearResult() {
         this.iterationCount = 0;
+		int i = 1;
         this.resultComputed = false;
     }
 
2023-06-27 16:16:15 [main] [INFO]  PatchLogExporter - patch (v51647)
--- org.apache.commons.math.MaxIterationsExceededException
+++ org.apache.commons.math.MaxIterationsExceededException
@@ -41,7 +41,9 @@
      */
     public MaxIterationsExceededException(final int maxIterations) {
         super("Maximal number of iterations ({0}) exceeded", maxIterations);
-        this.maxIterations = maxIterations;
+        printStackTrace(System.err);
+		printStackTrace(System.err);
+		this.maxIterations = maxIterations;
     }
 
     /**
2023-06-27 16:16:15 [main] [INFO]  PatchLogExporter - patch (v51647)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-27 16:16:15 [main] [INFO]  PatchLogExporter - patch (v51647)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-27 16:16:15 [main] [INFO]  PatchLogExporter - patch (v51647)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-27 16:16:15 [main] [INFO]  PatchLogExporter - patch (v51647)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -59,6 +59,9 @@
      */
     public BrentSolver() {
         super(100, 1E-6);
+		this.defaultFunctionValueAccuracy = 1.0e-15;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
     }
 
     /** {@inheritDoc} */
@@ -99,20 +102,19 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
-            return result;
+            this.defaultFunctionValueAccuracy = 1.0e-15;
+			return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +126,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -165,7 +166,6 @@
         throws MaxIterationsExceededException,
         FunctionEvaluationException {
 
-        clearResult();
         verifyInterval(min, max);
 
         double ret = Double.NaN;
@@ -181,7 +181,11 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
+                this.f = f;
+				double fm;
+				this.f = f;
+				this.f = f;
+				setResult(max, 0);
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
2023-06-27 16:16:15 [main] [INFO]  PatchLogExporter - patch (v51800)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -139,7 +139,10 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
-        this.iterationCount = iterationCount;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
         this.resultComputed = true;
     }
 
2023-06-27 16:16:15 [main] [INFO]  PatchLogExporter - patch (v51800)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-27 16:16:15 [main] [INFO]  PatchLogExporter - patch (v51800)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-27 16:16:15 [main] [INFO]  PatchLogExporter - patch (v51800)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -65,7 +65,6 @@
         this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
-        this.iterationCount = 0;
     }
 
     /** {@inheritDoc} */
2023-06-27 16:16:15 [main] [INFO]  PatchLogExporter - patch (v51800)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-27 16:16:15 [main] [INFO]  PatchLogExporter - patch (v51800)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -59,6 +59,12 @@
      */
     public BrentSolver() {
         super(100, 1E-6);
+		this.defaultFunctionValueAccuracy = 1.0e-15;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
     }
 
     /** {@inheritDoc} */
@@ -106,13 +112,15 @@
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
-            return result;
+            this.defaultFunctionValueAccuracy = 1.0e-15;
+			this.defaultFunctionValueAccuracy = 1.0e-15;
+			this.defaultFunctionValueAccuracy = 1.0e-15;
+			return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +132,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,7 +188,6 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -226,7 +232,8 @@
                          double x2, double y2)
     throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        double delta = x1 - x0;
+        clearResult();
+		double delta = x1 - x0;
         double oldDelta = delta;
 
         int i = 0;
2023-06-27 16:16:15 [main] [INFO]  KGenProgMain - Summary
Reached generation = 131
Generated variants = 51800
Syntax valid variants = 45976
Build succeeded variants = 28320
Time elapsed = 4 hours 28 minutes 39 seconds
Exit status = SUCCESS
