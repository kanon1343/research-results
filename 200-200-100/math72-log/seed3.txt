2023-06-27 07:23:47 [main] [WARN]  Configuration$Builder - The directory where kGenProg is running is different from the root directory of the given target project.
2023-06-27 07:23:47 [main] [WARN]  Configuration$Builder - If the target project includes test cases with file I/O, such test cases won't run correctly.
2023-06-27 07:23:47 [main] [WARN]  Configuration$Builder - We recommend you running kGenProg with the root directory of the target project as the current directory.
2023-06-27 07:23:48 [main] [INFO]  KGenProgMain - 
==================== kGenProg Configuration ====================
configPath = /Users/haradakanon/Downloads/kGenProg-1.8.2/example/math72/kgenprog-72.toml (set by command line)
rootDir = /Users/haradakanon/Downloads/kGenProg-1.8.2/example/math72 (set in config file)
productPaths = [/Users/haradakanon/Downloads/kGenProg-1.8.2/example/math72/src/main] (set in config file)
testPaths = [/Users/haradakanon/Downloads/kGenProg-1.8.2/example/math72/src/test] (set in config file)
classPaths = []
executionTests = [org.apache.commons.math.analysis.solvers.BrentSolverTest] (set in config file)
outDir = kgenprog-out
logLevel = INFO (set in config file)
mutationGeneratingCount = 200 (set in config file)
crossoverGeneratingCount = 200 (set in config file)
headcount = 100
maxGeneration = 1000 (set in config file)
timeLimit = PT277H46M40S (set in config file)
testTimeLimit = PT3M (set in config file)
requiredSolutionsCount = 100 (set in config file)
randomSeed = 3 (set by command line)
scope = PACKAGE (set in config file)
faultLocalization = Zoltar (set in config file)
mutationType = Simple
crossoverType = Random
firstVariantSelectionStrategy = Random
secondVariantSelectionStrategy = Random
isPatchOutput = true (set in config file)
isHistoryRecord = false
currentDirectory = /Users/haradakanon/Desktop/研究/実験データ/research
version = 1.8.2
================================================================
2023-06-27 07:24:05 [main] [INFO]  KGenProgMain - initial failed tests (1/6)
org.apache.commons.math.analysis.solvers.BrentSolverTest.testRootEndpoints: null

2023-06-27 07:24:05 [main] [INFO]  KGenProgMain - GA started
2023-06-27 07:24:05 [main] [INFO]  KGenProgMain - entered the era of 1st generation.
2023-06-27 07:24:18 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 seconds
Variants: generated 200, build-succeeded 27, build-failed 100, syntax-invalid 15, redundant 58
Fitness: max 0.833(20), min 0.167(2), ave 0.753
Test execution time: sum 3251 ms, max 342 ms, min 70 ms
----------------------------------------------------------------

2023-06-27 07:24:18 [main] [INFO]  KGenProgMain - entered the era of 2nd generation.
2023-06-27 07:24:30 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 25 seconds
Variants: generated 200, build-succeeded 58, build-failed 104, syntax-invalid 10, redundant 28
Fitness: max 1(2), min 0(1), ave 0.632
Test execution time: sum 4199 ms, max 202 ms, min 56 ms
----------------------------------------------------------------

2023-06-27 07:24:30 [main] [INFO]  KGenProgMain - entered the era of 3rd generation.
2023-06-27 07:24:54 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 49 seconds
Variants: generated 400, build-succeeded 148, build-failed 112, syntax-invalid 23, redundant 117
Fitness: max 0.833(72), min 0.167(43), ave 0.6
Test execution time: sum 9860 ms, max 151 ms, min 54 ms
----------------------------------------------------------------

2023-06-27 07:24:54 [main] [INFO]  KGenProgMain - entered the era of 4th generation.
2023-06-27 07:25:14 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 minutes 8 seconds
Variants: generated 400, build-succeeded 125, build-failed 113, syntax-invalid 28, redundant 134
Fitness: max 0.833(113), min 0.167(6), ave 0.791
Test execution time: sum 8047 ms, max 206 ms, min 54 ms
----------------------------------------------------------------

2023-06-27 07:25:14 [main] [INFO]  KGenProgMain - entered the era of 5th generation.
2023-06-27 07:25:33 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 minutes 27 seconds
Variants: generated 400, build-succeeded 138, build-failed 100, syntax-invalid 46, redundant 116
Fitness: max 1(2), min 0.167(10), ave 0.771
Test execution time: sum 8430 ms, max 126 ms, min 55 ms
----------------------------------------------------------------

2023-06-27 07:25:33 [main] [INFO]  KGenProgMain - entered the era of 6th generation.
2023-06-27 07:25:53 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 minutes 47 seconds
Variants: generated 400, build-succeeded 144, build-failed 126, syntax-invalid 49, redundant 81
Fitness: max 0.833(133), min 0.167(6), ave 0.796
Test execution time: sum 8884 ms, max 128 ms, min 54 ms
----------------------------------------------------------------

2023-06-27 07:25:53 [main] [INFO]  KGenProgMain - entered the era of 7th generation.
2023-06-27 07:26:15 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 minutes 9 seconds
Variants: generated 400, build-succeeded 158, build-failed 115, syntax-invalid 40, redundant 87
Fitness: max 1(1), min 0.167(10), ave 0.785
Test execution time: sum 9757 ms, max 198 ms, min 54 ms
----------------------------------------------------------------

2023-06-27 07:26:15 [main] [INFO]  KGenProgMain - entered the era of 8th generation.
2023-06-27 07:26:36 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 minutes 31 seconds
Variants: generated 400, build-succeeded 170, build-failed 121, syntax-invalid 44, redundant 65
Fitness: max 0.833(154), min 0.167(7), ave 0.793
Test execution time: sum 10187 ms, max 137 ms, min 53 ms
----------------------------------------------------------------

2023-06-27 07:26:36 [main] [INFO]  KGenProgMain - entered the era of 9th generation.
2023-06-27 07:27:00 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 minutes 54 seconds
Variants: generated 400, build-succeeded 182, build-failed 108, syntax-invalid 44, redundant 66
Fitness: max 1(1), min 0.167(10), ave 0.79
Test execution time: sum 10952 ms, max 131 ms, min 53 ms
----------------------------------------------------------------

2023-06-27 07:27:00 [main] [INFO]  KGenProgMain - entered the era of 10th generation.
2023-06-27 07:27:23 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 minutes 17 seconds
Variants: generated 400, build-succeeded 174, build-failed 115, syntax-invalid 46, redundant 65
Fitness: max 1(1), min 0.167(11), ave 0.776
Test execution time: sum 10287 ms, max 117 ms, min 52 ms
----------------------------------------------------------------

2023-06-27 07:27:23 [main] [INFO]  KGenProgMain - entered the era of 11th generation.
2023-06-27 07:27:48 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 minutes 42 seconds
Variants: generated 400, build-succeeded 203, build-failed 99, syntax-invalid 32, redundant 66
Fitness: max 1(3), min 0.167(14), ave 0.776
Test execution time: sum 12085 ms, max 215 ms, min 52 ms
----------------------------------------------------------------

2023-06-27 07:27:48 [main] [INFO]  KGenProgMain - entered the era of 12th generation.
2023-06-27 07:28:11 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 minutes 5 seconds
Variants: generated 400, build-succeeded 191, build-failed 114, syntax-invalid 45, redundant 50
Fitness: max 1(3), min 0.167(9), ave 0.789
Test execution time: sum 11206 ms, max 165 ms, min 52 ms
----------------------------------------------------------------

2023-06-27 07:28:11 [main] [INFO]  KGenProgMain - entered the era of 13th generation.
2023-06-27 07:28:36 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 minutes 30 seconds
Variants: generated 400, build-succeeded 200, build-failed 125, syntax-invalid 29, redundant 46
Fitness: max 0.833(169), min 0.167(17), ave 0.763
Test execution time: sum 11553 ms, max 116 ms, min 52 ms
----------------------------------------------------------------

2023-06-27 07:28:36 [main] [INFO]  KGenProgMain - entered the era of 14th generation.
2023-06-27 07:29:02 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 minutes 56 seconds
Variants: generated 400, build-succeeded 201, build-failed 120, syntax-invalid 35, redundant 44
Fitness: max 1(1), min 0.167(11), ave 0.789
Test execution time: sum 11896 ms, max 166 ms, min 53 ms
----------------------------------------------------------------

2023-06-27 07:29:02 [main] [INFO]  KGenProgMain - entered the era of 15th generation.
2023-06-27 07:29:27 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 minutes 21 seconds
Variants: generated 400, build-succeeded 201, build-failed 114, syntax-invalid 42, redundant 43
Fitness: max 1(1), min 0.167(15), ave 0.775
Test execution time: sum 11796 ms, max 109 ms, min 53 ms
----------------------------------------------------------------

2023-06-27 07:29:27 [main] [INFO]  KGenProgMain - entered the era of 16th generation.
2023-06-27 07:29:52 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 minutes 46 seconds
Variants: generated 400, build-succeeded 196, build-failed 105, syntax-invalid 56, redundant 43
Fitness: max 1(1), min 0.167(15), ave 0.767
Test execution time: sum 11262 ms, max 188 ms, min 52 ms
----------------------------------------------------------------

2023-06-27 07:29:52 [main] [INFO]  KGenProgMain - entered the era of 17th generation.
2023-06-27 07:30:17 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 minutes 12 seconds
Variants: generated 400, build-succeeded 201, build-failed 113, syntax-invalid 51, redundant 35
Fitness: max 0.833(174), min 0.167(16), ave 0.771
Test execution time: sum 11718 ms, max 126 ms, min 52 ms
----------------------------------------------------------------

2023-06-27 07:30:17 [main] [INFO]  KGenProgMain - entered the era of 18th generation.
2023-06-27 07:30:45 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 minutes 39 seconds
Variants: generated 400, build-succeeded 207, build-failed 122, syntax-invalid 48, redundant 23
Fitness: max 0.833(172), min 0.167(23), ave 0.748
Test execution time: sum 12279 ms, max 119 ms, min 53 ms
----------------------------------------------------------------

2023-06-27 07:30:45 [main] [INFO]  KGenProgMain - entered the era of 19th generation.
2023-06-27 07:31:12 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 minutes 6 seconds
Variants: generated 400, build-succeeded 210, build-failed 117, syntax-invalid 49, redundant 24
Fitness: max 0.833(180), min 0.167(22), ave 0.755
Test execution time: sum 12262 ms, max 191 ms, min 52 ms
----------------------------------------------------------------

2023-06-27 07:31:12 [main] [INFO]  KGenProgMain - entered the era of 20th generation.
2023-06-27 07:31:41 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 minutes 35 seconds
Variants: generated 400, build-succeeded 222, build-failed 109, syntax-invalid 46, redundant 23
Fitness: max 1(2), min 0(1), ave 0.763
Test execution time: sum 13187 ms, max 180 ms, min 53 ms
----------------------------------------------------------------

2023-06-27 07:31:41 [main] [INFO]  KGenProgMain - entered the era of 21st generation.
2023-06-27 07:47:09 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 23 minutes 3 seconds
Variants: generated 400, build-succeeded 213, build-failed 112, syntax-invalid 51, redundant 24
Fitness: max 1(1), min 0.167(36), ave 0.716
Test execution time: sum 912509 ms, max 900133 ms, min 53 ms
----------------------------------------------------------------

2023-06-27 07:47:09 [main] [INFO]  KGenProgMain - entered the era of 22nd generation.
2023-06-27 08:02:39 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 38 minutes 33 seconds
Variants: generated 400, build-succeeded 207, build-failed 125, syntax-invalid 53, redundant 15
Fitness: max 1(1), min 0.167(20), ave 0.759
Test execution time: sum 912643 ms, max 900114 ms, min 53 ms
----------------------------------------------------------------

2023-06-27 08:02:39 [main] [INFO]  KGenProgMain - entered the era of 23rd generation.
2023-06-27 08:03:08 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 39 minutes 3 seconds
Variants: generated 400, build-succeeded 223, build-failed 122, syntax-invalid 34, redundant 21
Fitness: max 1(2), min 0.167(17), ave 0.777
Test execution time: sum 13230 ms, max 176 ms, min 53 ms
----------------------------------------------------------------

2023-06-27 08:03:08 [main] [INFO]  KGenProgMain - entered the era of 24th generation.
2023-06-27 08:03:38 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 39 minutes 32 seconds
Variants: generated 400, build-succeeded 209, build-failed 118, syntax-invalid 52, redundant 21
Fitness: max 0.833(176), min 0.167(15), ave 0.767
Test execution time: sum 12682 ms, max 205 ms, min 53 ms
----------------------------------------------------------------

2023-06-27 08:03:38 [main] [INFO]  KGenProgMain - entered the era of 25th generation.
2023-06-27 08:19:07 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 55 minutes 1 seconds
Variants: generated 400, build-succeeded 219, build-failed 97, syntax-invalid 61, redundant 23
Fitness: max 0.833(183), min 0.167(28), ave 0.742
Test execution time: sum 912972 ms, max 900117 ms, min 54 ms
----------------------------------------------------------------

2023-06-27 08:19:07 [main] [INFO]  KGenProgMain - entered the era of 26th generation.
2023-06-27 08:19:36 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 55 minutes 31 seconds
Variants: generated 400, build-succeeded 203, build-failed 123, syntax-invalid 57, redundant 17
Fitness: max 0.833(170), min 0.167(22), ave 0.75
Test execution time: sum 12143 ms, max 119 ms, min 53 ms
----------------------------------------------------------------

2023-06-27 08:19:36 [main] [INFO]  KGenProgMain - entered the era of 27th generation.
2023-06-27 08:20:08 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 56 minutes 2 seconds
Variants: generated 400, build-succeeded 234, build-failed 113, syntax-invalid 42, redundant 11
Fitness: max 1(1), min 0.167(13), ave 0.786
Test execution time: sum 13842 ms, max 143 ms, min 52 ms
----------------------------------------------------------------

2023-06-27 08:20:08 [main] [INFO]  KGenProgMain - entered the era of 28th generation.
2023-06-27 08:20:38 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 56 minutes 32 seconds
Variants: generated 400, build-succeeded 213, build-failed 117, syntax-invalid 48, redundant 22
Fitness: max 1(2), min 0.167(8), ave 0.801
Test execution time: sum 12725 ms, max 194 ms, min 53 ms
----------------------------------------------------------------

2023-06-27 08:20:38 [main] [INFO]  KGenProgMain - entered the era of 29th generation.
2023-06-27 08:36:09 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 12 minutes 3 seconds
Variants: generated 400, build-succeeded 223, build-failed 115, syntax-invalid 45, redundant 17
Fitness: max 0.833(197), min 0.167(13), ave 0.781
Test execution time: sum 913358 ms, max 900129 ms, min 54 ms
----------------------------------------------------------------

2023-06-27 08:36:09 [main] [INFO]  KGenProgMain - entered the era of 30th generation.
2023-06-27 08:51:40 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 27 minutes 35 seconds
Variants: generated 400, build-succeeded 222, build-failed 108, syntax-invalid 50, redundant 20
Fitness: max 0.833(196), min 0.167(16), ave 0.776
Test execution time: sum 913607 ms, max 900118 ms, min 52 ms
----------------------------------------------------------------

2023-06-27 08:51:40 [main] [INFO]  KGenProgMain - entered the era of 31st generation.
2023-06-27 08:52:10 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 28 minutes 5 seconds
Variants: generated 400, build-succeeded 208, build-failed 109, syntax-invalid 61, redundant 22
Fitness: max 1(1), min 0.167(13), ave 0.784
Test execution time: sum 12578 ms, max 209 ms, min 54 ms
----------------------------------------------------------------

2023-06-27 08:52:10 [main] [INFO]  KGenProgMain - entered the era of 32nd generation.
2023-06-27 08:52:42 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 28 minutes 36 seconds
Variants: generated 400, build-succeeded 208, build-failed 126, syntax-invalid 48, redundant 18
Fitness: max 1(2), min 0.167(8), ave 0.801
Test execution time: sum 12708 ms, max 178 ms, min 54 ms
----------------------------------------------------------------

2023-06-27 08:52:42 [main] [INFO]  KGenProgMain - entered the era of 33rd generation.
2023-06-27 09:08:14 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 44 minutes 8 seconds
Variants: generated 400, build-succeeded 230, build-failed 112, syntax-invalid 41, redundant 17
Fitness: max 0.833(207), min 0.167(8), ave 0.798
Test execution time: sum 913840 ms, max 900121 ms, min 54 ms
----------------------------------------------------------------

2023-06-27 09:08:14 [main] [INFO]  KGenProgMain - entered the era of 34th generation.
2023-06-27 09:08:46 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 44 minutes 40 seconds
Variants: generated 400, build-succeeded 217, build-failed 108, syntax-invalid 56, redundant 19
Fitness: max 0.833(198), min 0.167(9), ave 0.796
Test execution time: sum 13262 ms, max 195 ms, min 54 ms
----------------------------------------------------------------

2023-06-27 09:08:46 [main] [INFO]  KGenProgMain - entered the era of 35th generation.
2023-06-27 09:09:18 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 45 minutes 13 seconds
Variants: generated 400, build-succeeded 230, build-failed 94, syntax-invalid 50, redundant 26
Fitness: max 0.833(199), min 0.167(15), ave 0.775
Test execution time: sum 14053 ms, max 182 ms, min 54 ms
----------------------------------------------------------------

2023-06-27 09:09:18 [main] [INFO]  KGenProgMain - entered the era of 36th generation.
2023-06-27 09:09:50 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 45 minutes 44 seconds
Variants: generated 400, build-succeeded 208, build-failed 127, syntax-invalid 51, redundant 14
Fitness: max 0.833(185), min 0.167(6), ave 0.799
Test execution time: sum 12721 ms, max 183 ms, min 54 ms
----------------------------------------------------------------

2023-06-27 09:09:50 [main] [INFO]  KGenProgMain - entered the era of 37th generation.
2023-06-27 09:10:22 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 46 minutes 17 seconds
Variants: generated 400, build-succeeded 222, build-failed 120, syntax-invalid 38, redundant 20
Fitness: max 1(1), min 0.167(6), ave 0.804
Test execution time: sum 13553 ms, max 193 ms, min 54 ms
----------------------------------------------------------------

2023-06-27 09:10:22 [main] [INFO]  KGenProgMain - entered the era of 38th generation.
2023-06-27 09:10:56 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 46 minutes 50 seconds
Variants: generated 400, build-succeeded 222, build-failed 115, syntax-invalid 47, redundant 16
Fitness: max 1(1), min 0.167(10), ave 0.796
Test execution time: sum 13465 ms, max 189 ms, min 54 ms
----------------------------------------------------------------

2023-06-27 09:10:56 [main] [INFO]  KGenProgMain - entered the era of 39th generation.
2023-06-27 09:11:27 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 47 minutes 22 seconds
Variants: generated 400, build-succeeded 212, build-failed 112, syntax-invalid 58, redundant 18
Fitness: max 1(1), min 0.167(10), ave 0.791
Test execution time: sum 12860 ms, max 115 ms, min 54 ms
----------------------------------------------------------------

2023-06-27 09:11:27 [main] [INFO]  KGenProgMain - entered the era of 40th generation.
2023-06-27 09:12:00 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 47 minutes 54 seconds
Variants: generated 400, build-succeeded 210, build-failed 113, syntax-invalid 55, redundant 22
Fitness: max 0.833(190), min 0.167(7), ave 0.799
Test execution time: sum 12899 ms, max 190 ms, min 55 ms
----------------------------------------------------------------

2023-06-27 09:12:00 [main] [INFO]  KGenProgMain - entered the era of 41st generation.
2023-06-27 09:27:31 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 3 minutes 25 seconds
Variants: generated 400, build-succeeded 197, build-failed 124, syntax-invalid 64, redundant 15
Fitness: max 0.833(182), min 0.167(8), ave 0.796
Test execution time: sum 911820 ms, max 900110 ms, min 54 ms
----------------------------------------------------------------

2023-06-27 09:27:31 [main] [INFO]  KGenProgMain - entered the era of 42nd generation.
2023-06-27 09:28:03 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 3 minutes 57 seconds
Variants: generated 400, build-succeeded 199, build-failed 122, syntax-invalid 66, redundant 13
Fitness: max 0.833(182), min 0.167(9), ave 0.796
Test execution time: sum 12246 ms, max 116 ms, min 55 ms
----------------------------------------------------------------

2023-06-27 09:28:03 [main] [INFO]  KGenProgMain - entered the era of 43rd generation.
2023-06-27 10:01:34 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 37 minutes 28 seconds
Variants: generated 400, build-succeeded 190, build-failed 123, syntax-invalid 76, redundant 11
Fitness: max 1(2), min 0.167(12), ave 0.78
Test execution time: sum 1991655 ms, max 900119 ms, min 54 ms
----------------------------------------------------------------

2023-06-27 10:01:34 [main] [INFO]  KGenProgMain - entered the era of 44th generation.
2023-06-27 10:02:07 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 38 minutes 1 seconds
Variants: generated 400, build-succeeded 200, build-failed 121, syntax-invalid 69, redundant 10
Fitness: max 1(1), min 0.167(6), ave 0.802
Test execution time: sum 12342 ms, max 189 ms, min 55 ms
----------------------------------------------------------------

2023-06-27 10:02:07 [main] [INFO]  KGenProgMain - entered the era of 45th generation.
2023-06-27 10:02:37 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 38 minutes 31 seconds
Variants: generated 400, build-succeeded 184, build-failed 121, syntax-invalid 81, redundant 14
Fitness: max 0.833(170), min 0.167(5), ave 0.804
Test execution time: sum 11079 ms, max 132 ms, min 55 ms
----------------------------------------------------------------

2023-06-27 10:02:37 [main] [INFO]  KGenProgMain - entered the era of 46th generation.
2023-06-27 10:03:07 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 39 minutes 1 seconds
Variants: generated 400, build-succeeded 179, build-failed 125, syntax-invalid 81, redundant 15
Fitness: max 1(2), min 0.167(4), ave 0.812
Test execution time: sum 10867 ms, max 120 ms, min 54 ms
----------------------------------------------------------------

2023-06-27 10:03:07 [main] [INFO]  KGenProgMain - entered the era of 47th generation.
2023-06-27 10:03:39 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 39 minutes 33 seconds
Variants: generated 400, build-succeeded 200, build-failed 98, syntax-invalid 85, redundant 17
Fitness: max 0.833(175), min 0.167(10), ave 0.786
Test execution time: sum 12173 ms, max 142 ms, min 54 ms
----------------------------------------------------------------

2023-06-27 10:03:39 [main] [INFO]  KGenProgMain - entered the era of 48th generation.
2023-06-27 10:04:12 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 40 minutes 6 seconds
Variants: generated 400, build-succeeded 209, build-failed 117, syntax-invalid 60, redundant 14
Fitness: max 1(1), min 0.167(9), ave 0.792
Test execution time: sum 12691 ms, max 172 ms, min 56 ms
----------------------------------------------------------------

2023-06-27 10:04:12 [main] [INFO]  KGenProgMain - entered the era of 49th generation.
2023-06-27 10:04:46 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 40 minutes 40 seconds
Variants: generated 400, build-succeeded 204, build-failed 109, syntax-invalid 73, redundant 14
Fitness: max 0.833(184), min 0.167(5), ave 0.803
Test execution time: sum 12677 ms, max 198 ms, min 55 ms
----------------------------------------------------------------

2023-06-27 10:04:46 [main] [INFO]  KGenProgMain - entered the era of 50th generation.
2023-06-27 10:05:21 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 41 minutes 15 seconds
Variants: generated 400, build-succeeded 218, build-failed 121, syntax-invalid 54, redundant 7
Fitness: max 1(2), min 0.167(6), ave 0.809
Test execution time: sum 13505 ms, max 152 ms, min 56 ms
----------------------------------------------------------------

2023-06-27 10:05:21 [main] [INFO]  KGenProgMain - entered the era of 51st generation.
2023-06-27 10:20:54 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 56 minutes 48 seconds
Variants: generated 400, build-succeeded 193, build-failed 118, syntax-invalid 76, redundant 13
Fitness: max 0.833(170), min 0.167(7), ave 0.794
Test execution time: sum 911907 ms, max 900100 ms, min 55 ms
----------------------------------------------------------------

2023-06-27 10:20:54 [main] [INFO]  KGenProgMain - entered the era of 52nd generation.
2023-06-27 10:21:28 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 57 minutes 22 seconds
Variants: generated 400, build-succeeded 218, build-failed 104, syntax-invalid 58, redundant 20
Fitness: max 1(1), min 0.167(6), ave 0.807
Test execution time: sum 13392 ms, max 190 ms, min 55 ms
----------------------------------------------------------------

2023-06-27 10:21:28 [main] [INFO]  KGenProgMain - entered the era of 53rd generation.
2023-06-27 10:22:03 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 57 minutes 57 seconds
Variants: generated 400, build-succeeded 202, build-failed 120, syntax-invalid 66, redundant 12
Fitness: max 1(1), min 0.167(3), ave 0.814
Test execution time: sum 12879 ms, max 160 ms, min 56 ms
----------------------------------------------------------------

2023-06-27 10:22:03 [main] [INFO]  KGenProgMain - entered the era of 54th generation.
2023-06-27 10:22:38 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 58 minutes 32 seconds
Variants: generated 400, build-succeeded 209, build-failed 117, syntax-invalid 66, redundant 8
Fitness: max 1(1), min 0.167(5), ave 0.813
Test execution time: sum 12910 ms, max 120 ms, min 55 ms
----------------------------------------------------------------

2023-06-27 10:22:38 [main] [INFO]  KGenProgMain - entered the era of 55th generation.
2023-06-27 10:23:13 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 59 minutes 7 seconds
Variants: generated 400, build-succeeded 207, build-failed 114, syntax-invalid 60, redundant 19
Fitness: max 1(2), min 0.167(2), ave 0.826
Test execution time: sum 12811 ms, max 191 ms, min 56 ms
----------------------------------------------------------------

2023-06-27 10:23:13 [main] [INFO]  KGenProgMain - entered the era of 56th generation.
2023-06-27 10:23:49 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 59 minutes 43 seconds
Variants: generated 400, build-succeeded 215, build-failed 117, syntax-invalid 60, redundant 8
Fitness: max 1(2), min 0.167(6), ave 0.809
Test execution time: sum 13444 ms, max 180 ms, min 56 ms
----------------------------------------------------------------

2023-06-27 10:23:49 [main] [INFO]  KGenProgMain - entered the era of 57th generation.
2023-06-27 10:24:24 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 19 seconds
Variants: generated 400, build-succeeded 202, build-failed 126, syntax-invalid 66, redundant 6
Fitness: max 1(2), min 0.167(5), ave 0.809
Test execution time: sum 12430 ms, max 119 ms, min 55 ms
----------------------------------------------------------------

2023-06-27 10:24:24 [main] [INFO]  KGenProgMain - entered the era of 58th generation.
2023-06-27 10:24:59 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 54 seconds
Variants: generated 400, build-succeeded 195, build-failed 121, syntax-invalid 76, redundant 8
Fitness: max 1(3), min 0.167(2), ave 0.825
Test execution time: sum 12260 ms, max 121 ms, min 56 ms
----------------------------------------------------------------

2023-06-27 10:24:59 [main] [INFO]  KGenProgMain - entered the era of 59th generation.
2023-06-27 10:25:35 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 1 minutes 29 seconds
Variants: generated 400, build-succeeded 202, build-failed 107, syntax-invalid 80, redundant 11
Fitness: max 0.833(186), min 0.167(6), ave 0.805
Test execution time: sum 12761 ms, max 200 ms, min 56 ms
----------------------------------------------------------------

2023-06-27 10:25:35 [main] [INFO]  KGenProgMain - entered the era of 60th generation.
2023-06-27 10:29:12 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 5 minutes 6 seconds
Variants: generated 400, build-succeeded 217, build-failed 116, syntax-invalid 57, redundant 10
Fitness: max 1(5), min 0.167(5), ave 0.811
Test execution time: sum 193393 ms, max 180073 ms, min 56 ms
----------------------------------------------------------------

2023-06-27 10:29:12 [main] [INFO]  KGenProgMain - entered the era of 61st generation.
2023-06-27 10:29:47 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 5 minutes 41 seconds
Variants: generated 400, build-succeeded 196, build-failed 117, syntax-invalid 72, redundant 15
Fitness: max 1(1), min 0.167(5), ave 0.811
Test execution time: sum 12284 ms, max 193 ms, min 56 ms
----------------------------------------------------------------

2023-06-27 10:29:47 [main] [INFO]  KGenProgMain - entered the era of 62nd generation.
2023-06-27 10:30:22 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 6 minutes 17 seconds
Variants: generated 400, build-succeeded 202, build-failed 123, syntax-invalid 67, redundant 8
Fitness: max 1(1), min 0.167(2), ave 0.82
Test execution time: sum 12702 ms, max 129 ms, min 57 ms
----------------------------------------------------------------

2023-06-27 10:30:22 [main] [INFO]  KGenProgMain - entered the era of 63rd generation.
2023-06-27 10:30:59 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 6 minutes 53 seconds
Variants: generated 400, build-succeeded 207, build-failed 102, syntax-invalid 73, redundant 18
Fitness: max 1(1), min 0.167(5), ave 0.814
Test execution time: sum 13035 ms, max 195 ms, min 57 ms
----------------------------------------------------------------

2023-06-27 10:30:59 [main] [INFO]  KGenProgMain - entered the era of 64th generation.
2023-06-27 10:31:36 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 7 minutes 31 seconds
Variants: generated 400, build-succeeded 219, build-failed 111, syntax-invalid 60, redundant 10
Fitness: max 1(1), min 0.167(9), ave 0.796
Test execution time: sum 13907 ms, max 195 ms, min 56 ms
----------------------------------------------------------------

2023-06-27 10:31:37 [main] [INFO]  KGenProgMain - entered the era of 65th generation.
2023-06-27 10:32:14 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 8 minutes 9 seconds
Variants: generated 400, build-succeeded 214, build-failed 114, syntax-invalid 55, redundant 17
Fitness: max 1(1), min 0.167(6), ave 0.804
Test execution time: sum 13703 ms, max 124 ms, min 56 ms
----------------------------------------------------------------

2023-06-27 10:32:14 [main] [INFO]  KGenProgMain - entered the era of 66th generation.
2023-06-27 10:32:52 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 8 minutes 46 seconds
Variants: generated 400, build-succeeded 201, build-failed 132, syntax-invalid 59, redundant 8
Fitness: max 0.833(190), min 0.167(3), ave 0.816
Test execution time: sum 12844 ms, max 182 ms, min 57 ms
----------------------------------------------------------------

2023-06-27 10:32:52 [main] [INFO]  KGenProgMain - entered the era of 67th generation.
2023-06-27 10:48:27 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 24 minutes 22 seconds
Variants: generated 400, build-succeeded 199, build-failed 109, syntax-invalid 70, redundant 22
Fitness: max 1(1), min 0.167(8), ave 0.802
Test execution time: sum 912573 ms, max 900121 ms, min 56 ms
----------------------------------------------------------------

2023-06-27 10:48:27 [main] [INFO]  KGenProgMain - entered the era of 68th generation.
2023-06-27 10:49:05 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 24 minutes 59 seconds
Variants: generated 400, build-succeeded 201, build-failed 131, syntax-invalid 61, redundant 7
Fitness: max 1(2), min 0.167(2), ave 0.823
Test execution time: sum 12856 ms, max 165 ms, min 55 ms
----------------------------------------------------------------

2023-06-27 10:49:05 [main] [INFO]  KGenProgMain - entered the era of 69th generation.
2023-06-27 10:49:44 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 25 minutes 38 seconds
Variants: generated 400, build-succeeded 215, build-failed 113, syntax-invalid 59, redundant 13
Fitness: max 0.833(201), min 0.167(6), ave 0.808
Test execution time: sum 13810 ms, max 230 ms, min 55 ms
----------------------------------------------------------------

2023-06-27 10:49:44 [main] [INFO]  KGenProgMain - entered the era of 70th generation.
2023-06-27 10:50:23 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 26 minutes 17 seconds
Variants: generated 400, build-succeeded 213, build-failed 116, syntax-invalid 57, redundant 14
Fitness: max 0.833(189), min 0.167(8), ave 0.795
Test execution time: sum 13550 ms, max 126 ms, min 56 ms
----------------------------------------------------------------

2023-06-27 10:50:23 [main] [INFO]  KGenProgMain - entered the era of 71st generation.
2023-06-27 10:51:02 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 26 minutes 57 seconds
Variants: generated 400, build-succeeded 214, build-failed 112, syntax-invalid 62, redundant 12
Fitness: max 0.833(201), min 0.167(2), ave 0.818
Test execution time: sum 13763 ms, max 193 ms, min 57 ms
----------------------------------------------------------------

2023-06-27 10:51:02 [main] [INFO]  KGenProgMain - entered the era of 72nd generation.
2023-06-27 10:51:41 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 27 minutes 35 seconds
Variants: generated 400, build-succeeded 206, build-failed 116, syntax-invalid 67, redundant 11
Fitness: max 1(4), min 0.167(5), ave 0.812
Test execution time: sum 12916 ms, max 125 ms, min 56 ms
----------------------------------------------------------------

2023-06-27 10:51:41 [main] [INFO]  KGenProgMain - entered the era of 73rd generation.
2023-06-27 10:52:23 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 28 minutes 17 seconds
Variants: generated 400, build-succeeded 230, build-failed 104, syntax-invalid 53, redundant 13
Fitness: max 1(1), min 0.167(8), ave 0.801
Test execution time: sum 15031 ms, max 183 ms, min 56 ms
----------------------------------------------------------------

2023-06-27 10:52:23 [main] [INFO]  KGenProgMain - entered the era of 74th generation.
2023-06-27 10:53:02 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 28 minutes 56 seconds
Variants: generated 400, build-succeeded 197, build-failed 124, syntax-invalid 71, redundant 8
Fitness: max 1(1), min 0.167(3), ave 0.821
Test execution time: sum 12674 ms, max 182 ms, min 56 ms
----------------------------------------------------------------

2023-06-27 10:53:02 [main] [INFO]  KGenProgMain - entered the era of 75th generation.
2023-06-27 10:53:40 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 29 minutes 34 seconds
Variants: generated 400, build-succeeded 199, build-failed 111, syntax-invalid 76, redundant 14
Fitness: max 1(1), min 0.167(8), ave 0.797
Test execution time: sum 12490 ms, max 125 ms, min 56 ms
----------------------------------------------------------------

2023-06-27 10:53:40 [main] [INFO]  KGenProgMain - entered the era of 76th generation.
2023-06-27 10:54:18 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 30 minutes 12 seconds
Variants: generated 400, build-succeeded 187, build-failed 122, syntax-invalid 78, redundant 13
Fitness: max 1(2), min 0.167(6), ave 0.805
Test execution time: sum 12036 ms, max 171 ms, min 56 ms
----------------------------------------------------------------

2023-06-27 10:54:18 [main] [INFO]  KGenProgMain - entered the era of 77th generation.
2023-06-27 10:54:59 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 30 minutes 53 seconds
Variants: generated 400, build-succeeded 215, build-failed 112, syntax-invalid 58, redundant 15
Fitness: max 1(2), min 0.167(6), ave 0.805
Test execution time: sum 13763 ms, max 130 ms, min 56 ms
----------------------------------------------------------------

2023-06-27 10:54:59 [main] [INFO]  KGenProgMain - entered the era of 78th generation.
2023-06-27 10:55:40 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 31 minutes 34 seconds
Variants: generated 400, build-succeeded 206, build-failed 121, syntax-invalid 59, redundant 14
Fitness: max 0.833(199), min 0.167(3), ave 0.82
Test execution time: sum 13260 ms, max 123 ms, min 57 ms
----------------------------------------------------------------

2023-06-27 10:55:40 [main] [INFO]  KGenProgMain - entered the era of 79th generation.
2023-06-27 10:56:21 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 32 minutes 15 seconds
Variants: generated 400, build-succeeded 214, build-failed 119, syntax-invalid 57, redundant 10
Fitness: max 1(1), min 0.167(4), ave 0.815
Test execution time: sum 13819 ms, max 188 ms, min 56 ms
----------------------------------------------------------------

2023-06-27 10:56:21 [main] [INFO]  KGenProgMain - entered the era of 80th generation.
2023-06-27 10:57:02 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 32 minutes 56 seconds
Variants: generated 400, build-succeeded 214, build-failed 109, syntax-invalid 60, redundant 17
Fitness: max 1(1), min 0.167(5), ave 0.81
Test execution time: sum 13754 ms, max 127 ms, min 57 ms
----------------------------------------------------------------

2023-06-27 10:57:02 [main] [INFO]  KGenProgMain - entered the era of 81st generation.
2023-06-27 10:57:43 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 33 minutes 37 seconds
Variants: generated 400, build-succeeded 206, build-failed 120, syntax-invalid 65, redundant 9
Fitness: max 1(1), min 0.167(8), ave 0.799
Test execution time: sum 13317 ms, max 177 ms, min 56 ms
----------------------------------------------------------------

2023-06-27 10:57:43 [main] [INFO]  KGenProgMain - entered the era of 82nd generation.
2023-06-27 10:58:24 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 34 minutes 19 seconds
Variants: generated 400, build-succeeded 207, build-failed 115, syntax-invalid 60, redundant 18
Fitness: max 0.833(197), min 0.167(4), ave 0.816
Test execution time: sum 13564 ms, max 125 ms, min 57 ms
----------------------------------------------------------------

2023-06-27 10:58:24 [main] [INFO]  KGenProgMain - entered the era of 83rd generation.
2023-06-27 10:59:06 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 35 minutes 0 seconds
Variants: generated 400, build-succeeded 206, build-failed 118, syntax-invalid 65, redundant 11
Fitness: max 0.833(194), min 0.167(4), ave 0.813
Test execution time: sum 13402 ms, max 126 ms, min 58 ms
----------------------------------------------------------------

2023-06-27 10:59:06 [main] [INFO]  KGenProgMain - entered the era of 84th generation.
2023-06-27 10:59:49 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 35 minutes 43 seconds
Variants: generated 400, build-succeeded 224, build-failed 116, syntax-invalid 50, redundant 10
Fitness: max 0.833(208), min 0.167(12), ave 0.795
Test execution time: sum 14459 ms, max 161 ms, min 56 ms
----------------------------------------------------------------

2023-06-27 10:59:49 [main] [INFO]  KGenProgMain - entered the era of 85th generation.
2023-06-27 11:00:32 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 36 minutes 26 seconds
Variants: generated 400, build-succeeded 217, build-failed 109, syntax-invalid 59, redundant 15
Fitness: max 1(1), min 0.167(5), ave 0.814
Test execution time: sum 14371 ms, max 196 ms, min 58 ms
----------------------------------------------------------------

2023-06-27 11:00:32 [main] [INFO]  KGenProgMain - entered the era of 86th generation.
2023-06-27 11:01:15 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 37 minutes 9 seconds
Variants: generated 400, build-succeeded 219, build-failed 120, syntax-invalid 49, redundant 12
Fitness: max 0.833(208), min 0.167(5), ave 0.813
Test execution time: sum 14335 ms, max 127 ms, min 56 ms
----------------------------------------------------------------

2023-06-27 11:01:15 [main] [INFO]  KGenProgMain - entered the era of 87th generation.
2023-06-27 11:01:58 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 37 minutes 53 seconds
Variants: generated 400, build-succeeded 220, build-failed 115, syntax-invalid 49, redundant 16
Fitness: max 0.833(204), min 0.167(7), ave 0.805
Test execution time: sum 14522 ms, max 161 ms, min 58 ms
----------------------------------------------------------------

2023-06-27 11:01:58 [main] [INFO]  KGenProgMain - entered the era of 88th generation.
2023-06-27 11:02:41 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 38 minutes 36 seconds
Variants: generated 400, build-succeeded 218, build-failed 111, syntax-invalid 62, redundant 9
Fitness: max 0.833(202), min 0.167(3), ave 0.813
Test execution time: sum 14333 ms, max 193 ms, min 57 ms
----------------------------------------------------------------

2023-06-27 11:02:41 [main] [INFO]  KGenProgMain - entered the era of 89th generation.
2023-06-27 11:18:25 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 54 minutes 19 seconds
Variants: generated 400, build-succeeded 212, build-failed 129, syntax-invalid 53, redundant 6
Fitness: max 0.833(204), min 0.167(2), ave 0.822
Test execution time: sum 913972 ms, max 900114 ms, min 58 ms
----------------------------------------------------------------

2023-06-27 11:18:25 [main] [INFO]  KGenProgMain - entered the era of 90th generation.
2023-06-27 11:19:08 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 55 minutes 2 seconds
Variants: generated 400, build-succeeded 209, build-failed 121, syntax-invalid 58, redundant 12
Fitness: max 1(2), min 0.167(6), ave 0.813
Test execution time: sum 13889 ms, max 196 ms, min 58 ms
----------------------------------------------------------------

2023-06-27 11:19:08 [main] [INFO]  KGenProgMain - entered the era of 91st generation.
2023-06-27 11:19:51 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 55 minutes 45 seconds
Variants: generated 400, build-succeeded 210, build-failed 105, syntax-invalid 70, redundant 15
Fitness: max 1(1), min 0.167(4), ave 0.818
Test execution time: sum 13944 ms, max 192 ms, min 57 ms
----------------------------------------------------------------

2023-06-27 11:19:51 [main] [INFO]  KGenProgMain - entered the era of 92nd generation.
2023-06-27 11:20:36 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 56 minutes 30 seconds
Variants: generated 400, build-succeeded 227, build-failed 109, syntax-invalid 51, redundant 13
Fitness: max 1(2), min 0.167(4), ave 0.819
Test execution time: sum 15041 ms, max 188 ms, min 57 ms
----------------------------------------------------------------

2023-06-27 11:20:36 [main] [INFO]  KGenProgMain - entered the era of 93rd generation.
2023-06-27 11:21:21 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 57 minutes 15 seconds
Variants: generated 400, build-succeeded 216, build-failed 115, syntax-invalid 57, redundant 12
Fitness: max 1(1), min 0.167(3), ave 0.819
Test execution time: sum 14531 ms, max 185 ms, min 58 ms
----------------------------------------------------------------

2023-06-27 11:21:21 [main] [INFO]  KGenProgMain - entered the era of 94th generation.
2023-06-27 11:22:07 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 58 minutes 1 seconds
Variants: generated 400, build-succeeded 234, build-failed 107, syntax-invalid 45, redundant 14
Fitness: max 0.833(219), min 0.167(1), ave 0.819
Test execution time: sum 15780 ms, max 191 ms, min 59 ms
----------------------------------------------------------------

2023-06-27 11:22:07 [main] [INFO]  KGenProgMain - entered the era of 95th generation.
2023-06-27 11:22:51 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 58 minutes 45 seconds
Variants: generated 400, build-succeeded 208, build-failed 118, syntax-invalid 63, redundant 11
Fitness: max 1(1), min 0.167(2), ave 0.821
Test execution time: sum 13990 ms, max 136 ms, min 59 ms
----------------------------------------------------------------

2023-06-27 11:22:51 [main] [INFO]  KGenProgMain - entered the era of 96th generation.
2023-06-27 11:23:36 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 59 minutes 31 seconds
Variants: generated 400, build-succeeded 220, build-failed 103, syntax-invalid 62, redundant 15
Fitness: max 1(1), min 0.167(4), ave 0.818
Test execution time: sum 14874 ms, max 195 ms, min 59 ms
----------------------------------------------------------------

2023-06-27 11:23:36 [main] [INFO]  KGenProgMain - entered the era of 97th generation.
2023-06-27 11:24:23 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 17 seconds
Variants: generated 400, build-succeeded 227, build-failed 104, syntax-invalid 54, redundant 15
Fitness: max 1(2), min 0.167(3), ave 0.822
Test execution time: sum 15229 ms, max 186 ms, min 59 ms
----------------------------------------------------------------

2023-06-27 11:24:23 [main] [INFO]  KGenProgMain - entered the era of 98th generation.
2023-06-27 11:25:08 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 1 minutes 2 seconds
Variants: generated 400, build-succeeded 203, build-failed 124, syntax-invalid 61, redundant 12
Fitness: max 0.833(193), min 0.167(4), ave 0.814
Test execution time: sum 13707 ms, max 196 ms, min 57 ms
----------------------------------------------------------------

2023-06-27 11:25:08 [main] [INFO]  KGenProgMain - entered the era of 99th generation.
2023-06-27 11:25:54 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 1 minutes 48 seconds
Variants: generated 400, build-succeeded 213, build-failed 123, syntax-invalid 56, redundant 8
Fitness: max 0.833(206), min 0.167(5), ave 0.816
Test execution time: sum 14344 ms, max 181 ms, min 59 ms
----------------------------------------------------------------

2023-06-27 11:25:54 [main] [INFO]  KGenProgMain - entered the era of 100th generation.
2023-06-27 11:26:41 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 2 minutes 35 seconds
Variants: generated 400, build-succeeded 225, build-failed 107, syntax-invalid 56, redundant 12
Fitness: max 0.833(216), min 0.167(4), ave 0.818
Test execution time: sum 15250 ms, max 175 ms, min 59 ms
----------------------------------------------------------------

2023-06-27 11:26:41 [main] [INFO]  KGenProgMain - entered the era of 101st generation.
2023-06-27 11:27:27 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 3 minutes 22 seconds
Variants: generated 400, build-succeeded 210, build-failed 121, syntax-invalid 62, redundant 7
Fitness: max 1(1), min 0.167(6), ave 0.813
Test execution time: sum 14272 ms, max 196 ms, min 59 ms
----------------------------------------------------------------

2023-06-27 11:27:27 [main] [INFO]  KGenProgMain - entered the era of 102nd generation.
2023-06-27 11:28:14 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 4 minutes 8 seconds
Variants: generated 400, build-succeeded 210, build-failed 114, syntax-invalid 57, redundant 19
Fitness: max 0.833(202), min 0.167(6), ave 0.812
Test execution time: sum 14265 ms, max 130 ms, min 59 ms
----------------------------------------------------------------

2023-06-27 11:28:14 [main] [INFO]  KGenProgMain - entered the era of 103rd generation.
2023-06-27 11:29:02 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 4 minutes 56 seconds
Variants: generated 400, build-succeeded 224, build-failed 111, syntax-invalid 52, redundant 13
Fitness: max 1(1), min 0.167(3), ave 0.82
Test execution time: sum 15219 ms, max 193 ms, min 58 ms
----------------------------------------------------------------

2023-06-27 11:29:02 [main] [INFO]  KGenProgMain - entered the era of 104th generation.
2023-06-27 11:29:48 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 5 minutes 42 seconds
Variants: generated 400, build-succeeded 198, build-failed 111, syntax-invalid 75, redundant 16
Fitness: max 1(1), min 0.167(1), ave 0.823
Test execution time: sum 13409 ms, max 140 ms, min 61 ms
----------------------------------------------------------------

2023-06-27 11:29:48 [main] [INFO]  KGenProgMain - entered the era of 105th generation.
2023-06-27 11:30:33 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 6 minutes 28 seconds
Variants: generated 400, build-succeeded 202, build-failed 103, syntax-invalid 78, redundant 17
Fitness: max 0.833(193), min 0.667(9), ave 0.826
Test execution time: sum 13743 ms, max 143 ms, min 61 ms
----------------------------------------------------------------

2023-06-27 11:30:33 [main] [INFO]  KGenProgMain - entered the era of 106th generation.
2023-06-27 11:31:20 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 7 minutes 15 seconds
Variants: generated 400, build-succeeded 201, build-failed 116, syntax-invalid 64, redundant 19
Fitness: max 0.833(195), min 0.167(1), ave 0.826
Test execution time: sum 13998 ms, max 137 ms, min 62 ms
----------------------------------------------------------------

2023-06-27 11:31:20 [main] [INFO]  KGenProgMain - entered the era of 107th generation.
2023-06-27 11:32:11 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 8 minutes 5 seconds
Variants: generated 400, build-succeeded 235, build-failed 112, syntax-invalid 41, redundant 12
Fitness: max 0.833(223), min 0.167(3), ave 0.818
Test execution time: sum 16097 ms, max 190 ms, min 60 ms
----------------------------------------------------------------

2023-06-27 11:32:11 [main] [INFO]  KGenProgMain - entered the era of 108th generation.
2023-06-27 11:33:03 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 8 minutes 57 seconds
Variants: generated 400, build-succeeded 244, build-failed 92, syntax-invalid 44, redundant 20
Fitness: max 1(1), min 0.167(3), ave 0.82
Test execution time: sum 16864 ms, max 126 ms, min 60 ms
----------------------------------------------------------------

2023-06-27 11:33:03 [main] [INFO]  KGenProgMain - entered the era of 109th generation.
2023-06-27 11:33:52 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 9 minutes 47 seconds
Variants: generated 400, build-succeeded 219, build-failed 113, syntax-invalid 60, redundant 8
Fitness: max 0.833(207), min 0.167(2), ave 0.82
Test execution time: sum 15197 ms, max 194 ms, min 59 ms
----------------------------------------------------------------

2023-06-27 11:33:52 [main] [INFO]  KGenProgMain - entered the era of 110th generation.
2023-06-27 11:34:42 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 10 minutes 36 seconds
Variants: generated 400, build-succeeded 221, build-failed 103, syntax-invalid 65, redundant 11
Fitness: max 1(2), min 0.167(2), ave 0.817
Test execution time: sum 15297 ms, max 144 ms, min 58 ms
----------------------------------------------------------------

2023-06-27 11:34:42 [main] [INFO]  KGenProgMain - entered the era of 111th generation.
2023-06-27 11:35:32 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 11 minutes 26 seconds
Variants: generated 400, build-succeeded 217, build-failed 108, syntax-invalid 60, redundant 15
Fitness: max 0.833(211), min 0.167(1), ave 0.826
Test execution time: sum 15025 ms, max 135 ms, min 59 ms
----------------------------------------------------------------

2023-06-27 11:35:32 [main] [INFO]  KGenProgMain - entered the era of 112th generation.
2023-06-27 11:36:22 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 12 minutes 17 seconds
Variants: generated 400, build-succeeded 224, build-failed 109, syntax-invalid 58, redundant 9
Fitness: max 1(1), min 0.167(4), ave 0.818
Test execution time: sum 15507 ms, max 133 ms, min 60 ms
----------------------------------------------------------------

2023-06-27 11:36:22 [main] [INFO]  KGenProgMain - entered the era of 113th generation.
2023-06-27 11:37:12 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 13 minutes 6 seconds
Variants: generated 400, build-succeeded 201, build-failed 124, syntax-invalid 60, redundant 15
Fitness: max 0.833(189), min 0(1), ave 0.813
Test execution time: sum 13942 ms, max 130 ms, min 59 ms
----------------------------------------------------------------

2023-06-27 11:37:12 [main] [INFO]  KGenProgMain - entered the era of 114th generation.
2023-06-27 11:38:03 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 13 minutes 57 seconds
Variants: generated 400, build-succeeded 222, build-failed 112, syntax-invalid 53, redundant 13
Fitness: max 0.833(209), min 0.167(4), ave 0.814
Test execution time: sum 15491 ms, max 206 ms, min 60 ms
----------------------------------------------------------------

2023-06-27 11:38:03 [main] [INFO]  KGenProgMain - entered the era of 115th generation.
2023-06-27 11:38:56 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 14 minutes 50 seconds
Variants: generated 400, build-succeeded 230, build-failed 116, syntax-invalid 46, redundant 8
Fitness: max 1(1), min 0.167(3), ave 0.822
Test execution time: sum 15972 ms, max 189 ms, min 59 ms
----------------------------------------------------------------

2023-06-27 11:38:56 [main] [INFO]  KGenProgMain - entered the era of 116th generation.
2023-06-27 11:39:50 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 15 minutes 44 seconds
Variants: generated 400, build-succeeded 236, build-failed 111, syntax-invalid 36, redundant 17
Fitness: max 0.833(225), min 0.167(3), ave 0.819
Test execution time: sum 16583 ms, max 185 ms, min 59 ms
----------------------------------------------------------------

2023-06-27 11:39:50 [main] [INFO]  KGenProgMain - entered the era of 117th generation.
2023-06-27 11:40:45 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 16 minutes 39 seconds
Variants: generated 400, build-succeeded 234, build-failed 124, syntax-invalid 32, redundant 10
Fitness: max 1(2), min 0.167(5), ave 0.813
Test execution time: sum 16381 ms, max 229 ms, min 60 ms
----------------------------------------------------------------

2023-06-27 11:40:45 [main] [INFO]  KGenProgMain - entered the era of 118th generation.
2023-06-27 11:41:38 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 17 minutes 32 seconds
Variants: generated 400, build-succeeded 217, build-failed 123, syntax-invalid 51, redundant 9
Fitness: max 0.833(212), min 0.167(1), ave 0.827
Test execution time: sum 15196 ms, max 202 ms, min 60 ms
----------------------------------------------------------------

2023-06-27 11:41:38 [main] [INFO]  KGenProgMain - entered the era of 119th generation.
2023-06-27 11:42:31 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 18 minutes 25 seconds
Variants: generated 400, build-succeeded 221, build-failed 120, syntax-invalid 47, redundant 12
Fitness: max 0.833(210), min 0.167(3), ave 0.818
Test execution time: sum 15501 ms, max 151 ms, min 59 ms
----------------------------------------------------------------

2023-06-27 11:42:31 [main] [INFO]  KGenProgMain - entered the era of 120th generation.
2023-06-27 11:43:23 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 19 minutes 18 seconds
Variants: generated 400, build-succeeded 218, build-failed 108, syntax-invalid 62, redundant 12
Fitness: max 0.833(208), min 0.167(4), ave 0.817
Test execution time: sum 15415 ms, max 204 ms, min 61 ms
----------------------------------------------------------------

2023-06-27 11:43:23 [main] [INFO]  KGenProgMain - entered the era of 121st generation.
2023-06-27 11:44:17 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 20 minutes 12 seconds
Variants: generated 400, build-succeeded 217, build-failed 122, syntax-invalid 53, redundant 8
Fitness: max 0.833(208), min 0.167(1), ave 0.824
Test execution time: sum 15503 ms, max 204 ms, min 60 ms
----------------------------------------------------------------

2023-06-27 11:44:17 [main] [INFO]  KGenProgMain - entered the era of 122nd generation.
2023-06-27 11:45:10 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 21 minutes 4 seconds
Variants: generated 400, build-succeeded 210, build-failed 113, syntax-invalid 62, redundant 15
Fitness: max 0.833(207), min 0.167(1), ave 0.829
Test execution time: sum 14894 ms, max 136 ms, min 60 ms
----------------------------------------------------------------

2023-06-27 11:45:10 [main] [INFO]  KGenProgMain - entered the era of 123rd generation.
2023-06-27 11:46:03 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 21 minutes 57 seconds
Variants: generated 400, build-succeeded 211, build-failed 115, syntax-invalid 61, redundant 13
Fitness: max 0.833(205), min 0.167(1), ave 0.826
Test execution time: sum 14901 ms, max 131 ms, min 60 ms
----------------------------------------------------------------

2023-06-27 11:46:03 [main] [INFO]  KGenProgMain - entered the era of 124th generation.
2023-06-27 11:46:53 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 22 minutes 48 seconds
Variants: generated 400, build-succeeded 198, build-failed 115, syntax-invalid 71, redundant 16
Fitness: max 0.833(186), min 0.167(2), ave 0.818
Test execution time: sum 14093 ms, max 199 ms, min 61 ms
----------------------------------------------------------------

2023-06-27 11:46:53 [main] [INFO]  KGenProgMain - entered the era of 125th generation.
2023-06-27 11:47:10 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 23 minutes 5 seconds
Variants: generated 124, build-succeeded 45, build-failed 70, syntax-invalid 4, redundant 5
Fitness: max 1(1), min 0.167(3), ave 0.778
Test execution time: sum 3362 ms, max 203 ms, min 61 ms
----------------------------------------------------------------

2023-06-27 11:47:10 [main] [INFO]  KGenProgMain - GA stopped
2023-06-27 11:47:13 [main] [INFO]  PatchLogExporter - patch (v208)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-27 11:47:13 [main] [INFO]  PatchLogExporter - patch (v208)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-27 11:47:13 [main] [INFO]  PatchLogExporter - patch (v208)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-27 11:47:13 [main] [INFO]  PatchLogExporter - patch (v208)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +123,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
2023-06-27 11:47:13 [main] [INFO]  PatchLogExporter - patch (v283)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-27 11:47:13 [main] [INFO]  PatchLogExporter - patch (v283)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-27 11:47:13 [main] [INFO]  PatchLogExporter - patch (v283)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-27 11:47:13 [main] [INFO]  PatchLogExporter - patch (v283)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -111,10 +111,7 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
-        if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
-            return result;
-        }
+        if (Math.abs(yMin) <= functionValueAccuracy)
 
         // reduce interval if min and initial bracket the root
         if (yInitial * yMin < 0) {
@@ -124,7 +121,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
2023-06-27 11:47:13 [main] [INFO]  PatchLogExporter - patch (v1279)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -139,7 +139,7 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
-        this.iterationCount = iterationCount;
+        double fmin;
         this.resultComputed = true;
     }
 
2023-06-27 11:47:13 [main] [INFO]  PatchLogExporter - patch (v1279)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-27 11:47:13 [main] [INFO]  PatchLogExporter - patch (v1279)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-27 11:47:13 [main] [INFO]  PatchLogExporter - patch (v1279)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-27 11:47:13 [main] [INFO]  PatchLogExporter - patch (v1279)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +123,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,7 +179,8 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
+                functionValueAccuracy = defaultFunctionValueAccuracy;
+				setResult(max, 0);
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
2023-06-27 11:47:13 [main] [INFO]  PatchLogExporter - patch (v1284)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-27 11:47:13 [main] [INFO]  PatchLogExporter - patch (v1284)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-27 11:47:13 [main] [INFO]  PatchLogExporter - patch (v1284)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -59,7 +59,8 @@
      */
     protected ConvergingAlgorithmImpl(final int defaultMaximalIterationCount,
                                       final double defaultAbsoluteAccuracy) {
-        this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
+        final String pattern = "internal error, please fill a bug report at {0}";
+		this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
2023-06-27 11:47:13 [main] [INFO]  PatchLogExporter - patch (v1284)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-27 11:47:13 [main] [INFO]  PatchLogExporter - patch (v1284)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -111,10 +111,7 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
-        if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
-            return result;
-        }
+        if (Math.abs(yMin) <= functionValueAccuracy)
 
         // reduce interval if min and initial bracket the root
         if (yInitial * yMin < 0) {
@@ -124,7 +121,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
2023-06-27 11:47:13 [main] [INFO]  PatchLogExporter - patch (v2199)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-27 11:47:13 [main] [INFO]  PatchLogExporter - patch (v2199)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-27 11:47:13 [main] [INFO]  PatchLogExporter - patch (v2199)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-27 11:47:13 [main] [INFO]  PatchLogExporter - patch (v2199)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -102,7 +102,8 @@
         clearResult();
         verifySequence(min, initial, max);
 
-        // return the initial guess if it is good enough
+        this.resultComputed = false;
+		// return the initial guess if it is good enough
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
@@ -112,7 +113,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +124,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,7 +180,6 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
2023-06-27 11:47:13 [main] [INFO]  PatchLogExporter - patch (v2934)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -139,7 +139,7 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
-        this.iterationCount = iterationCount;
+        double fmin;
         this.resultComputed = true;
     }
 
2023-06-27 11:47:13 [main] [INFO]  PatchLogExporter - patch (v2934)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-27 11:47:13 [main] [INFO]  PatchLogExporter - patch (v2934)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-27 11:47:13 [main] [INFO]  PatchLogExporter - patch (v2934)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-27 11:47:13 [main] [INFO]  PatchLogExporter - patch (v2934)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -104,15 +104,12 @@
 
         // return the initial guess if it is good enough
         double yInitial = f.value(initial);
-        if (Math.abs(yInitial) <= functionValueAccuracy) {
-            setResult(initial, 0);
-            return result;
-        }
+        if (Math.abs(yInitial) <= functionValueAccuracy)
+			return result;
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +121,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,7 +177,8 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
+                functionValueAccuracy = defaultFunctionValueAccuracy;
+				setResult(max, 0);
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
2023-06-27 11:47:13 [main] [INFO]  PatchLogExporter - patch (v3369)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -139,7 +139,6 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
-        this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
 
2023-06-27 11:47:13 [main] [INFO]  PatchLogExporter - patch (v3369)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-27 11:47:13 [main] [INFO]  PatchLogExporter - patch (v3369)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-27 11:47:13 [main] [INFO]  PatchLogExporter - patch (v3369)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -61,7 +61,7 @@
                                       final double defaultAbsoluteAccuracy) {
         this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
         this.defaultRelativeAccuracy = 1.0e-14;
-        this.absoluteAccuracy = defaultAbsoluteAccuracy;
+        absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
2023-06-27 11:47:13 [main] [INFO]  PatchLogExporter - patch (v3369)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-27 11:47:13 [main] [INFO]  PatchLogExporter - patch (v3369)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +123,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
2023-06-27 11:47:13 [main] [INFO]  PatchLogExporter - patch (v3747)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -162,7 +162,6 @@
      * Convenience function for implementations.
      */
     protected final void clearResult() {
-        this.iterationCount = 0;
         this.resultComputed = false;
     }
 
2023-06-27 11:47:13 [main] [INFO]  PatchLogExporter - patch (v3747)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-27 11:47:13 [main] [INFO]  PatchLogExporter - patch (v3747)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-27 11:47:13 [main] [INFO]  PatchLogExporter - patch (v3747)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-27 11:47:13 [main] [INFO]  PatchLogExporter - patch (v3747)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +123,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -183,6 +181,7 @@
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
                 setResult(max, 0);
                 ret = max;
+				setResult(max, 0);
             } else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
2023-06-27 11:47:13 [main] [INFO]  PatchLogExporter - patch (v3763)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-27 11:47:13 [main] [INFO]  PatchLogExporter - patch (v3763)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-27 11:47:13 [main] [INFO]  PatchLogExporter - patch (v3763)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -59,7 +59,6 @@
      */
     protected ConvergingAlgorithmImpl(final int defaultMaximalIterationCount,
                                       final double defaultAbsoluteAccuracy) {
-        this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
2023-06-27 11:47:13 [main] [INFO]  PatchLogExporter - patch (v3763)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-27 11:47:13 [main] [INFO]  PatchLogExporter - patch (v3763)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -111,10 +111,7 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
-        if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
-            return result;
-        }
+        if (Math.abs(yMin) <= functionValueAccuracy)
 
         // reduce interval if min and initial bracket the root
         if (yInitial * yMin < 0) {
@@ -124,7 +121,7 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
+            double x1 = max;
             return result;
         }
 
2023-06-27 11:47:13 [main] [INFO]  PatchLogExporter - patch (v3777)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -139,7 +139,7 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
-        this.iterationCount = iterationCount;
+        double fmin;
         this.resultComputed = true;
     }
 
2023-06-27 11:47:13 [main] [INFO]  PatchLogExporter - patch (v3777)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-27 11:47:13 [main] [INFO]  PatchLogExporter - patch (v3777)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-27 11:47:13 [main] [INFO]  PatchLogExporter - patch (v3777)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-27 11:47:13 [main] [INFO]  PatchLogExporter - patch (v3777)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +123,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -182,7 +180,8 @@
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
                 setResult(max, 0);
-                ret = max;
+                clearResult();
+				ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
2023-06-27 11:47:13 [main] [INFO]  PatchLogExporter - patch (v4123)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-27 11:47:13 [main] [INFO]  PatchLogExporter - patch (v4123)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-27 11:47:13 [main] [INFO]  PatchLogExporter - patch (v4123)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -59,7 +59,6 @@
      */
     protected ConvergingAlgorithmImpl(final int defaultMaximalIterationCount,
                                       final double defaultAbsoluteAccuracy) {
-        this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
2023-06-27 11:47:13 [main] [INFO]  PatchLogExporter - patch (v4123)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-27 11:47:13 [main] [INFO]  PatchLogExporter - patch (v4123)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -106,13 +106,14 @@
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
-            return result;
+            this.resultComputed = true;
+			return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
+            double fmin;
             return result;
         }
 
@@ -124,7 +125,7 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
+            double x1 = max;
             return result;
         }
 
2023-06-27 11:47:14 [main] [INFO]  PatchLogExporter - patch (v4127)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-27 11:47:14 [main] [INFO]  PatchLogExporter - patch (v4127)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-27 11:47:14 [main] [INFO]  PatchLogExporter - patch (v4127)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-27 11:47:14 [main] [INFO]  PatchLogExporter - patch (v4127)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -99,7 +99,6 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
@@ -112,7 +111,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +122,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -245,7 +242,8 @@
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
-                return result;
+                this.iterationCount = iterationCount;
+				return result;
             }
             double dx = x2 - x1;
             double tolerance =
2023-06-27 11:47:14 [main] [INFO]  PatchLogExporter - patch (v4187)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,6 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
2023-06-27 11:47:14 [main] [INFO]  PatchLogExporter - patch (v4187)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-27 11:47:14 [main] [INFO]  PatchLogExporter - patch (v4187)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-27 11:47:14 [main] [INFO]  PatchLogExporter - patch (v4187)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -61,7 +61,7 @@
                                       final double defaultAbsoluteAccuracy) {
         this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
         this.defaultRelativeAccuracy = 1.0e-14;
-        this.absoluteAccuracy = defaultAbsoluteAccuracy;
+        absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
2023-06-27 11:47:14 [main] [INFO]  PatchLogExporter - patch (v4187)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-27 11:47:14 [main] [INFO]  PatchLogExporter - patch (v4187)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -104,6 +104,7 @@
 
         // return the initial guess if it is good enough
         double yInitial = f.value(initial);
+		double x2 = max;
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
             return result;
@@ -112,7 +113,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +124,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,7 +180,6 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
2023-06-27 11:47:14 [main] [INFO]  PatchLogExporter - patch (v4948)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-27 11:47:14 [main] [INFO]  PatchLogExporter - patch (v4948)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-27 11:47:14 [main] [INFO]  PatchLogExporter - patch (v4948)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-27 11:47:14 [main] [INFO]  PatchLogExporter - patch (v4948)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -99,10 +99,10 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
         verifySequence(min, initial, max);
 
-        // return the initial guess if it is good enough
+        this.resultComputed = false;
+		// return the initial guess if it is good enough
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
@@ -112,7 +112,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +123,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
2023-06-27 11:47:14 [main] [INFO]  PatchLogExporter - patch (v5378)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-27 11:47:14 [main] [INFO]  PatchLogExporter - patch (v5378)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-27 11:47:14 [main] [INFO]  PatchLogExporter - patch (v5378)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -59,7 +59,6 @@
      */
     protected ConvergingAlgorithmImpl(final int defaultMaximalIterationCount,
                                       final double defaultAbsoluteAccuracy) {
-        this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
2023-06-27 11:47:14 [main] [INFO]  PatchLogExporter - patch (v5378)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-27 11:47:14 [main] [INFO]  PatchLogExporter - patch (v5378)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -111,10 +111,7 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
-        if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
-            return result;
-        }
+        if (Math.abs(yMin) <= functionValueAccuracy)
 
         // reduce interval if min and initial bracket the root
         if (yInitial * yMin < 0) {
@@ -124,7 +121,7 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
+            double x2 = max;
             return result;
         }
 
@@ -181,8 +178,8 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
                 ret = max;
+                ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
2023-06-27 11:47:14 [main] [INFO]  PatchLogExporter - patch (v5699)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-27 11:47:14 [main] [INFO]  PatchLogExporter - patch (v5699)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-27 11:47:14 [main] [INFO]  PatchLogExporter - patch (v5699)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-27 11:47:14 [main] [INFO]  PatchLogExporter - patch (v5699)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -99,11 +99,11 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
         double yInitial = f.value(initial);
+		double x2 = max;
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
             return result;
@@ -112,7 +112,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +123,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -182,7 +180,7 @@
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
                 setResult(max, 0);
-                ret = max;
+                return max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
2023-06-27 11:47:14 [main] [INFO]  PatchLogExporter - patch (v7214)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -77,7 +77,6 @@
         }
         this.f = f;
         this.defaultFunctionValueAccuracy = 1.0e-15;
-        this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
     /**
2023-06-27 11:47:14 [main] [INFO]  PatchLogExporter - patch (v7214)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-27 11:47:14 [main] [INFO]  PatchLogExporter - patch (v7214)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-27 11:47:14 [main] [INFO]  PatchLogExporter - patch (v7214)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -59,7 +59,6 @@
      */
     protected ConvergingAlgorithmImpl(final int defaultMaximalIterationCount,
                                       final double defaultAbsoluteAccuracy) {
-        this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
2023-06-27 11:47:14 [main] [INFO]  PatchLogExporter - patch (v7214)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-27 11:47:14 [main] [INFO]  PatchLogExporter - patch (v7214)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -106,13 +106,13 @@
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
-            return result;
+            this.resultComputed = true;
+			return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +124,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -183,6 +182,7 @@
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
                 setResult(max, 0);
                 ret = max;
+				iterationCount += this.iterationCount;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
2023-06-27 11:47:14 [main] [INFO]  PatchLogExporter - patch (v7372)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,6 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
2023-06-27 11:47:14 [main] [INFO]  PatchLogExporter - patch (v7372)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-27 11:47:14 [main] [INFO]  PatchLogExporter - patch (v7372)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-27 11:47:14 [main] [INFO]  PatchLogExporter - patch (v7372)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-27 11:47:14 [main] [INFO]  PatchLogExporter - patch (v7372)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -100,10 +100,12 @@
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
         clearResult();
+		clearResult();
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
         double yInitial = f.value(initial);
+		double x2 = max;
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
             return result;
@@ -112,7 +114,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +125,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,8 +181,8 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
-                ret = max;
+                clearResult();
+                return max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
2023-06-27 11:47:14 [main] [INFO]  PatchLogExporter - patch (v7669)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-27 11:47:14 [main] [INFO]  PatchLogExporter - patch (v7669)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-27 11:47:14 [main] [INFO]  PatchLogExporter - patch (v7669)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-27 11:47:14 [main] [INFO]  PatchLogExporter - patch (v7669)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -106,13 +106,14 @@
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
-            return result;
+            this.resultComputed = true;
+			this.resultComputed = true;
+			return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +125,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,8 +181,8 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
                 ret = max;
+                ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
2023-06-27 11:47:14 [main] [INFO]  PatchLogExporter - patch (v8153)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-27 11:47:14 [main] [INFO]  PatchLogExporter - patch (v8153)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-27 11:47:14 [main] [INFO]  PatchLogExporter - patch (v8153)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-27 11:47:14 [main] [INFO]  PatchLogExporter - patch (v8153)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -106,13 +106,13 @@
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
-            return result;
+            this.resultComputed = true;
+			return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +124,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -183,6 +182,7 @@
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
                 setResult(max, 0);
                 ret = max;
+				clearResult();
             } else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
@@ -228,6 +228,7 @@
 
         double delta = x1 - x0;
         double oldDelta = delta;
+		x2 = x0;
 
         int i = 0;
         while (i < maximalIterationCount) {
@@ -245,7 +246,6 @@
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
-                return result;
             }
             double dx = x2 - x1;
             double tolerance =
2023-06-27 11:47:14 [main] [INFO]  PatchLogExporter - patch (v8438)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-27 11:47:14 [main] [INFO]  PatchLogExporter - patch (v8438)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-27 11:47:14 [main] [INFO]  PatchLogExporter - patch (v8438)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-27 11:47:14 [main] [INFO]  PatchLogExporter - patch (v8438)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -106,13 +106,14 @@
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
-            return result;
+            this.resultComputed = true;
+			this.resultComputed = true;
+			return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +125,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -183,6 +183,7 @@
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
                 setResult(max, 0);
                 ret = max;
+				clearResult();
             } else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
@@ -228,6 +229,7 @@
 
         double delta = x1 - x0;
         double oldDelta = delta;
+		x2 = x0;
 
         int i = 0;
         while (i < maximalIterationCount) {
2023-06-27 11:47:14 [main] [INFO]  PatchLogExporter - patch (v8509)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,6 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
2023-06-27 11:47:14 [main] [INFO]  PatchLogExporter - patch (v8509)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-27 11:47:14 [main] [INFO]  PatchLogExporter - patch (v8509)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-27 11:47:14 [main] [INFO]  PatchLogExporter - patch (v8509)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-27 11:47:14 [main] [INFO]  PatchLogExporter - patch (v8509)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +123,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,7 +179,6 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -241,11 +238,7 @@
                 y2 = y0;
             }
             if (Math.abs(y1) <= functionValueAccuracy) {
-                // Avoid division by very small values. Assume
-                // the iteration has converged (the problem may
-                // still be ill conditioned)
-                setResult(x1, i);
-                return result;
+                double xm = 0.5 * (x0 + x2);
             }
             double dx = x2 - x1;
             double tolerance =
2023-06-27 11:47:14 [main] [INFO]  PatchLogExporter - patch (v10196)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,7 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
+        resultComputed = true;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
2023-06-27 11:47:14 [main] [INFO]  PatchLogExporter - patch (v10196)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-27 11:47:14 [main] [INFO]  PatchLogExporter - patch (v10196)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-27 11:47:14 [main] [INFO]  PatchLogExporter - patch (v10196)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -63,7 +63,6 @@
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
-        this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
         this.iterationCount = 0;
     }
2023-06-27 11:47:14 [main] [INFO]  PatchLogExporter - patch (v10196)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-27 11:47:14 [main] [INFO]  PatchLogExporter - patch (v10196)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -104,6 +104,7 @@
 
         // return the initial guess if it is good enough
         double yInitial = f.value(initial);
+		double x2 = max;
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
             return result;
@@ -112,7 +113,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +124,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -182,6 +181,7 @@
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
                 setResult(max, 0);
+				ret = min;
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
2023-06-27 11:47:14 [main] [INFO]  PatchLogExporter - patch (v10551)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-27 11:47:14 [main] [INFO]  PatchLogExporter - patch (v10551)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-27 11:47:14 [main] [INFO]  PatchLogExporter - patch (v10551)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-27 11:47:14 [main] [INFO]  PatchLogExporter - patch (v10551)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -104,15 +104,16 @@
 
         // return the initial guess if it is good enough
         double yInitial = f.value(initial);
+		double x2 = max;
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
-            return result;
+            this.resultComputed = true;
+			return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +125,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -241,11 +241,6 @@
                 y2 = y0;
             }
             if (Math.abs(y1) <= functionValueAccuracy) {
-                // Avoid division by very small values. Assume
-                // the iteration has converged (the problem may
-                // still be ill conditioned)
-                setResult(x1, i);
-                return result;
             }
             double dx = x2 - x1;
             double tolerance =
2023-06-27 11:47:14 [main] [INFO]  PatchLogExporter - patch (v10577)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-27 11:47:14 [main] [INFO]  PatchLogExporter - patch (v10577)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-27 11:47:14 [main] [INFO]  PatchLogExporter - patch (v10577)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -63,7 +63,6 @@
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
-        this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
         this.iterationCount = 0;
     }
2023-06-27 11:47:14 [main] [INFO]  PatchLogExporter - patch (v10577)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-27 11:47:14 [main] [INFO]  PatchLogExporter - patch (v10577)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -106,13 +106,13 @@
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
-            return result;
+            this.resultComputed = true;
+			return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -123,10 +123,7 @@
 
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
-        if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
-            return result;
-        }
+        if (Math.abs(yMax) <= functionValueAccuracy)
 
         // reduce interval if initial and max bracket the root
         if (yInitial * yMax < 0) {
@@ -134,8 +131,7 @@
         }
 
         if (yMin * yMax > 0) {
-            throw MathRuntimeException.createIllegalArgumentException(
-                  NON_BRACKETING_MESSAGE, min, max, yMin, yMax);
+            return solve(f, min, max);
         }
 
         // full Brent algorithm starting with provided initial guess
@@ -182,6 +178,7 @@
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
                 setResult(max, 0);
+				clearResult();
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
2023-06-27 11:47:14 [main] [INFO]  PatchLogExporter - patch (v11714)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -139,7 +139,7 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
-        this.iterationCount = iterationCount;
+        double fmin;
         this.resultComputed = true;
     }
 
2023-06-27 11:47:14 [main] [INFO]  PatchLogExporter - patch (v11714)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-27 11:47:14 [main] [INFO]  PatchLogExporter - patch (v11714)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-27 11:47:14 [main] [INFO]  PatchLogExporter - patch (v11714)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-27 11:47:14 [main] [INFO]  PatchLogExporter - patch (v11714)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -102,7 +102,8 @@
         clearResult();
         verifySequence(min, initial, max);
 
-        // return the initial guess if it is good enough
+        this.resultComputed = false;
+		// return the initial guess if it is good enough
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
@@ -112,7 +113,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +124,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -183,6 +182,8 @@
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
                 setResult(max, 0);
                 ret = max;
+				clearResult();
+				iterationCount += this.iterationCount;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
@@ -245,7 +246,8 @@
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
-                return result;
+                this.iterationCount = iterationCount;
+				return result;
             }
             double dx = x2 - x1;
             double tolerance =
2023-06-27 11:47:14 [main] [INFO]  PatchLogExporter - patch (v12134)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,8 +76,6 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
-        this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
     /**
2023-06-27 11:47:14 [main] [INFO]  PatchLogExporter - patch (v12134)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-27 11:47:14 [main] [INFO]  PatchLogExporter - patch (v12134)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-27 11:47:14 [main] [INFO]  PatchLogExporter - patch (v12134)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -63,7 +63,6 @@
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
-        this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
         this.iterationCount = 0;
     }
2023-06-27 11:47:14 [main] [INFO]  PatchLogExporter - patch (v12134)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-27 11:47:14 [main] [INFO]  PatchLogExporter - patch (v12134)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -101,6 +101,7 @@
 
         clearResult();
         verifySequence(min, initial, max);
+		this.iterationCount = iterationCount;
 
         // return the initial guess if it is good enough
         double yInitial = f.value(initial);
@@ -112,7 +113,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +124,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -183,6 +182,7 @@
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
                 setResult(max, 0);
                 ret = max;
+				clearResult();
             } else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
2023-06-27 11:47:14 [main] [INFO]  PatchLogExporter - patch (v12164)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,6 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
2023-06-27 11:47:14 [main] [INFO]  PatchLogExporter - patch (v12164)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-27 11:47:14 [main] [INFO]  PatchLogExporter - patch (v12164)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-27 11:47:14 [main] [INFO]  PatchLogExporter - patch (v12164)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-27 11:47:14 [main] [INFO]  PatchLogExporter - patch (v12164)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -101,20 +101,20 @@
 
         clearResult();
         verifySequence(min, initial, max);
+		this.iterationCount = iterationCount;
 
-        // return the initial guess if it is good enough
+        this.resultComputed = false;
+		// return the initial guess if it is good enough
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
-            return result;
+            this.resultComputed = true;
+			return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
-        if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
-            return result;
-        }
+        if (Math.abs(yMin) <= functionValueAccuracy)
 
         // reduce interval if min and initial bracket the root
         if (yInitial * yMin < 0) {
@@ -124,7 +124,7 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
+            verifySequence(min, initial, max);
             return result;
         }
 
@@ -181,8 +181,9 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
-                ret = max;
+                int i = 1;
+				setResult(max, 0);
+                return max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
2023-06-27 11:47:14 [main] [INFO]  PatchLogExporter - patch (v14064)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -77,7 +77,6 @@
         }
         this.f = f;
         this.defaultFunctionValueAccuracy = 1.0e-15;
-        this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
     /**
2023-06-27 11:47:14 [main] [INFO]  PatchLogExporter - patch (v14064)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-27 11:47:14 [main] [INFO]  PatchLogExporter - patch (v14064)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-27 11:47:14 [main] [INFO]  PatchLogExporter - patch (v14064)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-27 11:47:14 [main] [INFO]  PatchLogExporter - patch (v14064)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,8 +123,8 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
-            return result;
+            double x1 = min;
+			return result;
         }
 
         // reduce interval if initial and max bracket the root
@@ -182,6 +181,8 @@
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
                 setResult(max, 0);
+				ret = max;
+				clearResult();
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -312,7 +313,6 @@
                 delta = x1 - x0;
                 oldDelta = delta;
             }
-            i++;
         }
         throw new MaxIterationsExceededException(maximalIterationCount);
     }
2023-06-27 11:47:14 [main] [INFO]  PatchLogExporter - patch (v14502)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-27 11:47:14 [main] [INFO]  PatchLogExporter - patch (v14502)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-27 11:47:14 [main] [INFO]  PatchLogExporter - patch (v14502)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -63,7 +63,6 @@
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
-        this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
         this.iterationCount = 0;
     }
2023-06-27 11:47:14 [main] [INFO]  PatchLogExporter - patch (v14502)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-27 11:47:14 [main] [INFO]  PatchLogExporter - patch (v14502)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +123,7 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
+            double x1 = max;
             return result;
         }
 
@@ -182,7 +181,11 @@
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
                 setResult(max, 0);
+				clearResult();
                 ret = max;
+				clearResult();
+				iterationCount += this.iterationCount;
+				iterationCount += this.iterationCount;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
2023-06-27 11:47:14 [main] [INFO]  PatchLogExporter - patch (v14909)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-27 11:47:14 [main] [INFO]  PatchLogExporter - patch (v14909)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-27 11:47:14 [main] [INFO]  PatchLogExporter - patch (v14909)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -63,7 +63,6 @@
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
-        this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
         this.iterationCount = 0;
     }
2023-06-27 11:47:14 [main] [INFO]  PatchLogExporter - patch (v14909)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-27 11:47:14 [main] [INFO]  PatchLogExporter - patch (v14909)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +123,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -182,7 +180,11 @@
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
                 setResult(max, 0);
+				clearResult();
                 ret = max;
+				clearResult();
+				iterationCount += this.iterationCount;
+				iterationCount += this.iterationCount;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
2023-06-27 11:47:14 [main] [INFO]  PatchLogExporter - patch (v16455)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,6 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
2023-06-27 11:47:14 [main] [INFO]  PatchLogExporter - patch (v16455)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-27 11:47:14 [main] [INFO]  PatchLogExporter - patch (v16455)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-27 11:47:14 [main] [INFO]  PatchLogExporter - patch (v16455)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-27 11:47:14 [main] [INFO]  PatchLogExporter - patch (v16455)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -106,13 +106,14 @@
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
-            return result;
+            this.resultComputed = true;
+			this.resultComputed = true;
+			return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +125,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -183,6 +183,7 @@
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
                 setResult(max, 0);
                 ret = max;
+				iterationCount += this.iterationCount;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
@@ -245,14 +246,14 @@
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
-                return result;
             }
             double dx = x2 - x1;
             double tolerance =
                 Math.max(relativeAccuracy * Math.abs(x1), absoluteAccuracy);
             if (Math.abs(dx) <= tolerance) {
                 setResult(x1, i);
-                return result;
+                this.iterationCount = iterationCount;
+				return result;
             }
             if ((Math.abs(oldDelta) < tolerance) ||
                     (Math.abs(y0) <= Math.abs(y1))) {
2023-06-27 11:47:14 [main] [INFO]  PatchLogExporter - patch (v16529)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -139,7 +139,7 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
-        this.iterationCount = iterationCount;
+        double fmin;
         this.resultComputed = true;
     }
 
2023-06-27 11:47:14 [main] [INFO]  PatchLogExporter - patch (v16529)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-27 11:47:14 [main] [INFO]  PatchLogExporter - patch (v16529)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-27 11:47:14 [main] [INFO]  PatchLogExporter - patch (v16529)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-27 11:47:14 [main] [INFO]  PatchLogExporter - patch (v16529)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -101,8 +101,11 @@
 
         clearResult();
         verifySequence(min, initial, max);
+		this.iterationCount = iterationCount;
+		this.iterationCount = iterationCount;
 
-        // return the initial guess if it is good enough
+        this.resultComputed = false;
+		// return the initial guess if it is good enough
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
@@ -112,7 +115,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +126,8 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
+            double x2 = max;
+			double m;
             return result;
         }
 
@@ -181,7 +184,7 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
+                clearResult();
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
2023-06-27 11:47:14 [main] [INFO]  PatchLogExporter - patch (v16915)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-27 11:47:14 [main] [INFO]  PatchLogExporter - patch (v16915)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-27 11:47:14 [main] [INFO]  PatchLogExporter - patch (v16915)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-27 11:47:14 [main] [INFO]  PatchLogExporter - patch (v16915)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -99,7 +99,6 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
@@ -112,7 +111,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +122,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -182,7 +179,9 @@
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
                 setResult(max, 0);
+				clearResult();
                 ret = max;
+				double x1 = min;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
@@ -245,7 +244,6 @@
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
-                return result;
             }
             double dx = x2 - x1;
             double tolerance =
@@ -269,7 +267,13 @@
                 if (x0 == x2) {
                     // Linear interpolation.
                     p = dx * r3;
-                    p1 = 1.0 - r3;
+                    {
+						x2 = x0;
+						y2 = y0;
+						delta = x1 - x0;
+						oldDelta = delta;
+					}
+					p1 = 1.0 - r3;
                 } else {
                     // Inverse quadratic interpolation.
                     double r1 = y0 / y2;
@@ -312,7 +316,6 @@
                 delta = x1 - x0;
                 oldDelta = delta;
             }
-            i++;
         }
         throw new MaxIterationsExceededException(maximalIterationCount);
     }
2023-06-27 11:47:14 [main] [INFO]  PatchLogExporter - patch (v17635)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -77,7 +77,6 @@
         }
         this.f = f;
         this.defaultFunctionValueAccuracy = 1.0e-15;
-        this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
     /**
2023-06-27 11:47:14 [main] [INFO]  PatchLogExporter - patch (v17635)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-27 11:47:14 [main] [INFO]  PatchLogExporter - patch (v17635)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-27 11:47:14 [main] [INFO]  PatchLogExporter - patch (v17635)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -65,7 +65,6 @@
         this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
-        this.iterationCount = 0;
     }
 
     /** {@inheritDoc} */
2023-06-27 11:47:14 [main] [INFO]  PatchLogExporter - patch (v17635)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-27 11:47:14 [main] [INFO]  PatchLogExporter - patch (v17635)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -99,7 +99,6 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
@@ -112,7 +111,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +122,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,8 +178,9 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
                 ret = max;
+				clearResult();
+                ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
@@ -312,7 +310,6 @@
                 delta = x1 - x0;
                 oldDelta = delta;
             }
-            i++;
         }
         throw new MaxIterationsExceededException(maximalIterationCount);
     }
2023-06-27 11:47:14 [main] [INFO]  PatchLogExporter - patch (v17662)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-27 11:47:14 [main] [INFO]  PatchLogExporter - patch (v17662)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-27 11:47:14 [main] [INFO]  PatchLogExporter - patch (v17662)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-27 11:47:14 [main] [INFO]  PatchLogExporter - patch (v17662)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -106,13 +106,14 @@
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
-            return result;
+            this.resultComputed = true;
+			this.resultComputed = true;
+			return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +125,7 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
+            double x1 = max;
             return result;
         }
 
@@ -182,6 +183,7 @@
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
                 setResult(max, 0);
+				ret = max;
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -245,7 +247,6 @@
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
-                return result;
             }
             double dx = x2 - x1;
             double tolerance =
2023-06-27 11:47:14 [main] [INFO]  PatchLogExporter - patch (v18492)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-27 11:47:14 [main] [INFO]  PatchLogExporter - patch (v18492)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-27 11:47:14 [main] [INFO]  PatchLogExporter - patch (v18492)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -59,7 +59,6 @@
      */
     protected ConvergingAlgorithmImpl(final int defaultMaximalIterationCount,
                                       final double defaultAbsoluteAccuracy) {
-        this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
2023-06-27 11:47:14 [main] [INFO]  PatchLogExporter - patch (v18492)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-27 11:47:14 [main] [INFO]  PatchLogExporter - patch (v18492)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -106,13 +106,14 @@
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
-            return result;
+            this.resultComputed = true;
+			this.resultComputed = true;
+			return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +125,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,7 +181,9 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
+                int i = 1;
+				setResult(max, 0);
+				ret = max;
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -245,7 +247,9 @@
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
-                return result;
+                this.iterationCount = iterationCount;
+				this.iterationCount = iterationCount;
+				return result;
             }
             double dx = x2 - x1;
             double tolerance =
2023-06-27 11:47:14 [main] [INFO]  PatchLogExporter - patch (v19204)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-27 11:47:14 [main] [INFO]  PatchLogExporter - patch (v19204)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-27 11:47:14 [main] [INFO]  PatchLogExporter - patch (v19204)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -65,7 +65,6 @@
         this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
-        this.iterationCount = 0;
     }
 
     /** {@inheritDoc} */
2023-06-27 11:47:14 [main] [INFO]  PatchLogExporter - patch (v19204)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-27 11:47:14 [main] [INFO]  PatchLogExporter - patch (v19204)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -102,19 +102,19 @@
         clearResult();
         verifySequence(min, initial, max);
 
-        // return the initial guess if it is good enough
+        this.resultComputed = false;
+		// return the initial guess if it is good enough
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
-            return result;
+            this.resultComputed = true;
+			return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
-        if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
-            return result;
-        }
+        if (Math.abs(yMin) <= functionValueAccuracy)
+			verifyInterval(min, max);
 
         // reduce interval if min and initial bracket the root
         if (yInitial * yMin < 0) {
@@ -124,7 +124,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -182,7 +181,11 @@
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
                 setResult(max, 0);
+				ret = min;
+				clearResult();
                 ret = max;
+				iterationCount += this.iterationCount;
+				iterationCount += this.iterationCount;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
2023-06-27 11:47:14 [main] [INFO]  PatchLogExporter - patch (v19340)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-27 11:47:14 [main] [INFO]  PatchLogExporter - patch (v19340)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-27 11:47:14 [main] [INFO]  PatchLogExporter - patch (v19340)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-27 11:47:14 [main] [INFO]  PatchLogExporter - patch (v19340)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -101,18 +101,20 @@
 
         clearResult();
         verifySequence(min, initial, max);
+		this.iterationCount = iterationCount;
 
         // return the initial guess if it is good enough
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
-            return result;
+            this.resultComputed = true;
+			this.resultComputed = true;
+			return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +126,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -182,6 +183,8 @@
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
                 setResult(max, 0);
+				ret = min;
+				clearResult();
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -245,11 +248,13 @@
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
-                return result;
+                this.iterationCount = iterationCount;
+				return result;
             }
             double dx = x2 - x1;
             double tolerance =
                 Math.max(relativeAccuracy * Math.abs(x1), absoluteAccuracy);
+			y1 = f.value(x1);
             if (Math.abs(dx) <= tolerance) {
                 setResult(x1, i);
                 return result;
2023-06-27 11:47:14 [main] [INFO]  PatchLogExporter - patch (v20094)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-27 11:47:14 [main] [INFO]  PatchLogExporter - patch (v20094)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-27 11:47:14 [main] [INFO]  PatchLogExporter - patch (v20094)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-27 11:47:14 [main] [INFO]  PatchLogExporter - patch (v20094)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -102,8 +102,10 @@
         clearResult();
         verifySequence(min, initial, max);
 
-        // return the initial guess if it is good enough
+        this.resultComputed = false;
+		// return the initial guess if it is good enough
         double yInitial = f.value(initial);
+		double x2 = max;
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
             return result;
@@ -111,10 +113,8 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
-        if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
-            return result;
-        }
+        if (Math.abs(yMin) <= functionValueAccuracy)
+			verifyInterval(min, max);
 
         // reduce interval if min and initial bracket the root
         if (yInitial * yMin < 0) {
@@ -124,7 +124,7 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
+            double m;
             return result;
         }
 
@@ -182,7 +182,11 @@
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
                 setResult(max, 0);
+				ret = min;
+				ret = min;
+				clearResult();
                 ret = max;
+				iterationCount += this.iterationCount;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
2023-06-27 11:47:14 [main] [INFO]  PatchLogExporter - patch (v20459)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -162,7 +162,7 @@
      * Convenience function for implementations.
      */
     protected final void clearResult() {
-        this.iterationCount = 0;
+        this.resultComputed = true;
         this.resultComputed = false;
     }
 
2023-06-27 11:47:14 [main] [INFO]  PatchLogExporter - patch (v20459)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-27 11:47:14 [main] [INFO]  PatchLogExporter - patch (v20459)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-27 11:47:14 [main] [INFO]  PatchLogExporter - patch (v20459)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -59,7 +59,6 @@
      */
     protected ConvergingAlgorithmImpl(final int defaultMaximalIterationCount,
                                       final double defaultAbsoluteAccuracy) {
-        this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
2023-06-27 11:47:14 [main] [INFO]  PatchLogExporter - patch (v20459)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-27 11:47:14 [main] [INFO]  PatchLogExporter - patch (v20459)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -101,6 +101,8 @@
 
         clearResult();
         verifySequence(min, initial, max);
+		this.iterationCount = iterationCount;
+		this.iterationCount = iterationCount;
 
         // return the initial guess if it is good enough
         double yInitial = f.value(initial);
@@ -112,7 +114,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +125,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,7 +181,8 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
+                double p1;
+				ret = min;
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -312,7 +313,6 @@
                 delta = x1 - x0;
                 oldDelta = delta;
             }
-            i++;
         }
         throw new MaxIterationsExceededException(maximalIterationCount);
     }
2023-06-27 11:47:14 [main] [INFO]  PatchLogExporter - patch (v20850)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -139,7 +139,6 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
-        this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
 
@@ -162,7 +161,7 @@
      * Convenience function for implementations.
      */
     protected final void clearResult() {
-        this.iterationCount = 0;
+        this.resultComputed = true;
         this.resultComputed = false;
     }
 
2023-06-27 11:47:14 [main] [INFO]  PatchLogExporter - patch (v20850)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-27 11:47:14 [main] [INFO]  PatchLogExporter - patch (v20850)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-27 11:47:14 [main] [INFO]  PatchLogExporter - patch (v20850)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-27 11:47:14 [main] [INFO]  PatchLogExporter - patch (v20850)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -102,7 +102,8 @@
         clearResult();
         verifySequence(min, initial, max);
 
-        // return the initial guess if it is good enough
+        this.resultComputed = false;
+		// return the initial guess if it is good enough
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
@@ -112,7 +113,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +124,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -182,7 +181,10 @@
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
                 setResult(max, 0);
+				clearResult();
                 ret = max;
+				iterationCount += this.iterationCount;
+				clearResult();
             } else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
@@ -245,7 +247,6 @@
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
-                return result;
             }
             double dx = x2 - x1;
             double tolerance =
2023-06-27 11:47:14 [main] [INFO]  PatchLogExporter - patch (v21292)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -162,7 +162,7 @@
      * Convenience function for implementations.
      */
     protected final void clearResult() {
-        this.iterationCount = 0;
+        this.resultComputed = true;
         this.resultComputed = false;
     }
 
2023-06-27 11:47:14 [main] [INFO]  PatchLogExporter - patch (v21292)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-27 11:47:14 [main] [INFO]  PatchLogExporter - patch (v21292)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-27 11:47:14 [main] [INFO]  PatchLogExporter - patch (v21292)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-27 11:47:14 [main] [INFO]  PatchLogExporter - patch (v21292)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +123,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,8 +179,12 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
+                double p1;
+				setResult(max, 0);
+				ret = min;
+				ret = min;
                 ret = max;
+				clearResult();
             } else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
2023-06-27 11:47:14 [main] [INFO]  PatchLogExporter - patch (v21352)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-27 11:47:14 [main] [INFO]  PatchLogExporter - patch (v21352)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-27 11:47:14 [main] [INFO]  PatchLogExporter - patch (v21352)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -65,7 +65,6 @@
         this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
-        this.iterationCount = 0;
     }
 
     /** {@inheritDoc} */
2023-06-27 11:47:14 [main] [INFO]  PatchLogExporter - patch (v21352)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-27 11:47:14 [main] [INFO]  PatchLogExporter - patch (v21352)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -99,20 +99,19 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
-            return result;
+            this.resultComputed = true;
+			return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +123,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,7 +179,9 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
+                double p1;
+				setResult(max, 0);
+				ret = min;
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -245,11 +245,14 @@
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
-                return result;
+                this.iterationCount = iterationCount;
+				this.iterationCount = iterationCount;
+				return result;
             }
             double dx = x2 - x1;
             double tolerance =
                 Math.max(relativeAccuracy * Math.abs(x1), absoluteAccuracy);
+			y1 = f.value(x1);
             if (Math.abs(dx) <= tolerance) {
                 setResult(x1, i);
                 return result;
2023-06-27 11:47:14 [main] [INFO]  PatchLogExporter - patch (v21649)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -139,7 +139,6 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
-        this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
 
@@ -162,7 +161,7 @@
      * Convenience function for implementations.
      */
     protected final void clearResult() {
-        this.iterationCount = 0;
+        this.resultComputed = true;
         this.resultComputed = false;
     }
 
2023-06-27 11:47:14 [main] [INFO]  PatchLogExporter - patch (v21649)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-27 11:47:14 [main] [INFO]  PatchLogExporter - patch (v21649)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-27 11:47:14 [main] [INFO]  PatchLogExporter - patch (v21649)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-27 11:47:14 [main] [INFO]  PatchLogExporter - patch (v21649)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -111,10 +111,7 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
-        if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
-            return result;
-        }
+        if (Math.abs(yMin) <= functionValueAccuracy)
 
         // reduce interval if min and initial bracket the root
         if (yInitial * yMin < 0) {
@@ -124,7 +121,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -183,6 +179,7 @@
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
                 setResult(max, 0);
                 ret = max;
+				iterationCount += this.iterationCount;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
@@ -245,14 +242,15 @@
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
-                return result;
             }
             double dx = x2 - x1;
             double tolerance =
                 Math.max(relativeAccuracy * Math.abs(x1), absoluteAccuracy);
+			y1 = f.value(x1);
             if (Math.abs(dx) <= tolerance) {
                 setResult(x1, i);
-                return result;
+                this.iterationCount = iterationCount;
+				return result;
             }
             if ((Math.abs(oldDelta) < tolerance) ||
                     (Math.abs(y0) <= Math.abs(y1))) {
2023-06-27 11:47:14 [main] [INFO]  PatchLogExporter - patch (v21768)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-27 11:47:14 [main] [INFO]  PatchLogExporter - patch (v21768)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-27 11:47:14 [main] [INFO]  PatchLogExporter - patch (v21768)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-27 11:47:14 [main] [INFO]  PatchLogExporter - patch (v21768)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -101,8 +101,11 @@
 
         clearResult();
         verifySequence(min, initial, max);
+		this.iterationCount = iterationCount;
 
-        // return the initial guess if it is good enough
+        this.resultComputed = false;
+		this.resultComputed = false;
+		// return the initial guess if it is good enough
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
@@ -112,7 +115,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +126,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,8 +182,8 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
                 ret = max;
+				iterationCount += this.iterationCount;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
@@ -312,7 +313,6 @@
                 delta = x1 - x0;
                 oldDelta = delta;
             }
-            i++;
         }
         throw new MaxIterationsExceededException(maximalIterationCount);
     }
2023-06-27 11:47:14 [main] [INFO]  PatchLogExporter - patch (v22013)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,6 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
2023-06-27 11:47:14 [main] [INFO]  PatchLogExporter - patch (v22013)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-27 11:47:14 [main] [INFO]  PatchLogExporter - patch (v22013)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-27 11:47:14 [main] [INFO]  PatchLogExporter - patch (v22013)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -59,8 +59,6 @@
      */
     protected ConvergingAlgorithmImpl(final int defaultMaximalIterationCount,
                                       final double defaultAbsoluteAccuracy) {
-        this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
-        this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
2023-06-27 11:47:14 [main] [INFO]  PatchLogExporter - patch (v22013)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-27 11:47:14 [main] [INFO]  PatchLogExporter - patch (v22013)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -101,6 +101,7 @@
 
         clearResult();
         verifySequence(min, initial, max);
+		this.iterationCount = iterationCount;
 
         // return the initial guess if it is good enough
         double yInitial = f.value(initial);
@@ -112,7 +113,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +124,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -182,7 +181,7 @@
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
                 setResult(max, 0);
-                ret = max;
+				ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
@@ -250,6 +249,7 @@
             double dx = x2 - x1;
             double tolerance =
                 Math.max(relativeAccuracy * Math.abs(x1), absoluteAccuracy);
+			y1 = f.value(x1);
             if (Math.abs(dx) <= tolerance) {
                 setResult(x1, i);
                 return result;
@@ -312,7 +312,6 @@
                 delta = x1 - x0;
                 oldDelta = delta;
             }
-            i++;
         }
         throw new MaxIterationsExceededException(maximalIterationCount);
     }
2023-06-27 11:47:14 [main] [INFO]  PatchLogExporter - patch (v22128)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-27 11:47:14 [main] [INFO]  PatchLogExporter - patch (v22128)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-27 11:47:14 [main] [INFO]  PatchLogExporter - patch (v22128)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-27 11:47:14 [main] [INFO]  PatchLogExporter - patch (v22128)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -106,13 +106,13 @@
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
-            return result;
+            this.resultComputed = true;
+			return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +124,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,7 +180,11 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
+                int i = 1;
+				setResult(max, 0);
+				ret = max;
+				ret = min;
+				ret = max;
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -245,7 +248,9 @@
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
-                return result;
+                this.iterationCount = iterationCount;
+				this.iterationCount = iterationCount;
+				return result;
             }
             double dx = x2 - x1;
             double tolerance =
2023-06-27 11:47:14 [main] [INFO]  PatchLogExporter - patch (v22415)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-27 11:47:14 [main] [INFO]  PatchLogExporter - patch (v22415)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-27 11:47:14 [main] [INFO]  PatchLogExporter - patch (v22415)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-27 11:47:14 [main] [INFO]  PatchLogExporter - patch (v22415)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -104,15 +104,16 @@
 
         // return the initial guess if it is good enough
         double yInitial = f.value(initial);
+		double x2 = max;
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
-            return result;
+            this.resultComputed = true;
+			return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +125,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -182,7 +182,11 @@
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
                 setResult(max, 0);
+				clearResult();
+				ret = min;
+				ret = max;
                 ret = max;
+				clearResult();
             } else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
@@ -245,7 +249,9 @@
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
-                return result;
+                this.iterationCount = iterationCount;
+				this.iterationCount = iterationCount;
+				return result;
             }
             double dx = x2 - x1;
             double tolerance =
2023-06-27 11:47:14 [main] [INFO]  PatchLogExporter - patch (v22544)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -77,7 +77,6 @@
         }
         this.f = f;
         this.defaultFunctionValueAccuracy = 1.0e-15;
-        this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
     /**
@@ -139,7 +138,6 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
-        this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
 
2023-06-27 11:47:14 [main] [INFO]  PatchLogExporter - patch (v22544)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-27 11:47:14 [main] [INFO]  PatchLogExporter - patch (v22544)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-27 11:47:14 [main] [INFO]  PatchLogExporter - patch (v22544)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-27 11:47:14 [main] [INFO]  PatchLogExporter - patch (v22544)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -106,13 +106,13 @@
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
-            return result;
+            this.resultComputed = true;
+			return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +124,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -182,7 +181,11 @@
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
                 setResult(max, 0);
+				ret = min;
+				clearResult();
                 ret = max;
+				clearResult();
+				clearResult();
             } else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
2023-06-27 11:47:14 [main] [INFO]  PatchLogExporter - patch (v22573)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-27 11:47:14 [main] [INFO]  PatchLogExporter - patch (v22573)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-27 11:47:14 [main] [INFO]  PatchLogExporter - patch (v22573)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -59,13 +59,11 @@
      */
     protected ConvergingAlgorithmImpl(final int defaultMaximalIterationCount,
                                       final double defaultAbsoluteAccuracy) {
-        this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
-        this.iterationCount = 0;
     }
 
     /** {@inheritDoc} */
2023-06-27 11:47:14 [main] [INFO]  PatchLogExporter - patch (v22573)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-27 11:47:14 [main] [INFO]  PatchLogExporter - patch (v22573)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -101,8 +101,10 @@
 
         clearResult();
         verifySequence(min, initial, max);
+		this.iterationCount = iterationCount;
 
-        // return the initial guess if it is good enough
+        this.resultComputed = false;
+		// return the initial guess if it is good enough
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
@@ -112,7 +114,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +125,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -183,6 +183,8 @@
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
                 setResult(max, 0);
                 ret = max;
+				iterationCount += this.iterationCount;
+				iterationCount += this.iterationCount;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
2023-06-27 11:47:14 [main] [INFO]  PatchLogExporter - patch (v23271)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-27 11:47:14 [main] [INFO]  PatchLogExporter - patch (v23271)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-27 11:47:14 [main] [INFO]  PatchLogExporter - patch (v23271)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-27 11:47:14 [main] [INFO]  PatchLogExporter - patch (v23271)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -102,7 +102,8 @@
         clearResult();
         verifySequence(min, initial, max);
 
-        // return the initial guess if it is good enough
+        this.resultComputed = false;
+		// return the initial guess if it is good enough
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
@@ -112,7 +113,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +124,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -182,7 +181,9 @@
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
                 setResult(max, 0);
+				ret = min;
                 ret = max;
+				clearResult();
             } else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
@@ -245,7 +246,8 @@
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
-                return result;
+                this.iterationCount = iterationCount;
+				return result;
             }
             double dx = x2 - x1;
             double tolerance =
2023-06-27 11:47:14 [main] [INFO]  PatchLogExporter - patch (v23274)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -162,7 +162,7 @@
      * Convenience function for implementations.
      */
     protected final void clearResult() {
-        this.iterationCount = 0;
+        this.resultComputed = true;
         this.resultComputed = false;
     }
 
2023-06-27 11:47:14 [main] [INFO]  PatchLogExporter - patch (v23274)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-27 11:47:14 [main] [INFO]  PatchLogExporter - patch (v23274)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-27 11:47:14 [main] [INFO]  PatchLogExporter - patch (v23274)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-27 11:47:14 [main] [INFO]  PatchLogExporter - patch (v23274)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -102,7 +102,8 @@
         clearResult();
         verifySequence(min, initial, max);
 
-        // return the initial guess if it is good enough
+        this.resultComputed = false;
+		// return the initial guess if it is good enough
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
@@ -112,7 +113,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +124,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,7 +180,12 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
+                double p1;
+				setResult(max, 0);
+				ret = max;
+				ret = max;
+				ret = max;
+				ret = max;
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -245,7 +249,8 @@
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
-                return result;
+                this.iterationCount = iterationCount;
+				return result;
             }
             double dx = x2 - x1;
             double tolerance =
@@ -312,7 +317,6 @@
                 delta = x1 - x0;
                 oldDelta = delta;
             }
-            i++;
         }
         throw new MaxIterationsExceededException(maximalIterationCount);
     }
2023-06-27 11:47:15 [main] [INFO]  PatchLogExporter - patch (v23342)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-27 11:47:15 [main] [INFO]  PatchLogExporter - patch (v23342)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-27 11:47:15 [main] [INFO]  PatchLogExporter - patch (v23342)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-27 11:47:15 [main] [INFO]  PatchLogExporter - patch (v23342)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -102,7 +102,9 @@
         clearResult();
         verifySequence(min, initial, max);
 
-        // return the initial guess if it is good enough
+        this.resultComputed = false;
+		this.resultComputed = false;
+		// return the initial guess if it is good enough
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
@@ -112,7 +114,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +125,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,8 +181,10 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
-                ret = max;
+                int i = 1;
+				ret = max;
+				clearResult();
+				iterationCount += this.iterationCount;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
@@ -245,7 +247,9 @@
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
-                return result;
+                this.iterationCount = iterationCount;
+				this.iterationCount = iterationCount;
+				return result;
             }
             double dx = x2 - x1;
             double tolerance =
2023-06-27 11:47:15 [main] [INFO]  PatchLogExporter - patch (v23372)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-27 11:47:15 [main] [INFO]  PatchLogExporter - patch (v23372)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-27 11:47:15 [main] [INFO]  PatchLogExporter - patch (v23372)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -59,7 +59,6 @@
      */
     protected ConvergingAlgorithmImpl(final int defaultMaximalIterationCount,
                                       final double defaultAbsoluteAccuracy) {
-        this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
2023-06-27 11:47:15 [main] [INFO]  PatchLogExporter - patch (v23372)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-27 11:47:15 [main] [INFO]  PatchLogExporter - patch (v23372)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -106,13 +106,13 @@
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
-            return result;
+            this.resultComputed = true;
+			return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +124,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,8 +180,12 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
+                double p1;
+				setResult(max, 0);
+				ret = max;
+				ret = min;
                 ret = max;
+				clearResult();
             } else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
@@ -245,7 +248,8 @@
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
-                return result;
+                this.iterationCount = iterationCount;
+				return result;
             }
             double dx = x2 - x1;
             double tolerance =
2023-06-27 11:47:15 [main] [INFO]  PatchLogExporter - patch (v23376)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-27 11:47:15 [main] [INFO]  PatchLogExporter - patch (v23376)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-27 11:47:15 [main] [INFO]  PatchLogExporter - patch (v23376)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-27 11:47:15 [main] [INFO]  PatchLogExporter - patch (v23376)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -101,18 +101,19 @@
 
         clearResult();
         verifySequence(min, initial, max);
+		this.iterationCount = iterationCount;
 
         // return the initial guess if it is good enough
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
-            return result;
+            this.resultComputed = true;
+			return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +125,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,7 +181,11 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
+                double p1;
+				setResult(max, 0);
+				this.functionValueAccuracy = defaultFunctionValueAccuracy;
+				ret = max;
+				iterationCount += this.iterationCount;
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -245,7 +249,9 @@
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
-                return result;
+                this.iterationCount = iterationCount;
+				this.iterationCount = iterationCount;
+				return result;
             }
             double dx = x2 - x1;
             double tolerance =
2023-06-27 11:47:15 [main] [INFO]  PatchLogExporter - patch (v23671)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,6 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
2023-06-27 11:47:15 [main] [INFO]  PatchLogExporter - patch (v23671)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-27 11:47:15 [main] [INFO]  PatchLogExporter - patch (v23671)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-27 11:47:15 [main] [INFO]  PatchLogExporter - patch (v23671)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-27 11:47:15 [main] [INFO]  PatchLogExporter - patch (v23671)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -101,6 +101,7 @@
 
         clearResult();
         verifySequence(min, initial, max);
+		this.iterationCount = iterationCount;
 
         // return the initial guess if it is good enough
         double yInitial = f.value(initial);
@@ -112,7 +113,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +124,7 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
+            clearResult();
             return result;
         }
 
@@ -182,7 +182,10 @@
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
                 setResult(max, 0);
+				ret = min;
+				ret = min;
                 ret = max;
+				clearResult();
             } else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
@@ -245,7 +248,9 @@
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
-                return result;
+                this.iterationCount = iterationCount;
+				this.iterationCount = iterationCount;
+				return result;
             }
             double dx = x2 - x1;
             double tolerance =
2023-06-27 11:47:15 [main] [INFO]  PatchLogExporter - patch (v24146)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -77,7 +77,6 @@
         }
         this.f = f;
         this.defaultFunctionValueAccuracy = 1.0e-15;
-        this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
     /**
@@ -139,7 +138,6 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
-        this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
 
2023-06-27 11:47:15 [main] [INFO]  PatchLogExporter - patch (v24146)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-27 11:47:15 [main] [INFO]  PatchLogExporter - patch (v24146)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-27 11:47:15 [main] [INFO]  PatchLogExporter - patch (v24146)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-27 11:47:15 [main] [INFO]  PatchLogExporter - patch (v24146)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -101,6 +101,7 @@
 
         clearResult();
         verifySequence(min, initial, max);
+		this.iterationCount = iterationCount;
 
         // return the initial guess if it is good enough
         double yInitial = f.value(initial);
@@ -112,7 +113,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +124,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -182,7 +181,10 @@
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
                 setResult(max, 0);
+				ret = max;
+				ret = max;
                 ret = max;
+				iterationCount += this.iterationCount;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
@@ -245,7 +247,8 @@
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
-                return result;
+                this.iterationCount = iterationCount;
+				return result;
             }
             double dx = x2 - x1;
             double tolerance =
2023-06-27 11:47:15 [main] [INFO]  PatchLogExporter - patch (v24445)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-27 11:47:15 [main] [INFO]  PatchLogExporter - patch (v24445)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-27 11:47:15 [main] [INFO]  PatchLogExporter - patch (v24445)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-27 11:47:15 [main] [INFO]  PatchLogExporter - patch (v24445)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -106,13 +106,13 @@
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
-            return result;
+            this.resultComputed = true;
+			return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +124,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -182,7 +181,11 @@
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
                 setResult(max, 0);
+				ret = min;
                 ret = max;
+				clearResult();
+				clearResult();
+				this.functionValueAccuracy = defaultFunctionValueAccuracy;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
@@ -245,11 +248,13 @@
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
-                return result;
+                this.iterationCount = iterationCount;
+				return result;
             }
             double dx = x2 - x1;
             double tolerance =
                 Math.max(relativeAccuracy * Math.abs(x1), absoluteAccuracy);
+			y1 = f.value(x1);
             if (Math.abs(dx) <= tolerance) {
                 setResult(x1, i);
                 return result;
2023-06-27 11:47:15 [main] [INFO]  PatchLogExporter - patch (v24945)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-27 11:47:15 [main] [INFO]  PatchLogExporter - patch (v24945)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-27 11:47:15 [main] [INFO]  PatchLogExporter - patch (v24945)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-27 11:47:15 [main] [INFO]  PatchLogExporter - patch (v24945)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -101,18 +101,19 @@
 
         clearResult();
         verifySequence(min, initial, max);
+		this.iterationCount = iterationCount;
 
         // return the initial guess if it is good enough
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
-            return result;
+            this.resultComputed = true;
+			return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +125,7 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
+            this.functionValueAccuracy = defaultFunctionValueAccuracy;
             return result;
         }
 
@@ -177,12 +178,17 @@
         double sign = yMin * yMax;
         if (sign > 0) {
             // check if either value is close to a zero
-            if (Math.abs(yMin) <= functionValueAccuracy) {
+            if (f == null) {
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
                 setResult(max, 0);
+				ret = max;
+				ret = min;
+				ret = max;
+				iterationCount += this.iterationCount;
                 ret = max;
+				iterationCount += this.iterationCount;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
2023-06-27 11:47:15 [main] [INFO]  PatchLogExporter - patch (v25285)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,6 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
2023-06-27 11:47:15 [main] [INFO]  PatchLogExporter - patch (v25285)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-27 11:47:15 [main] [INFO]  PatchLogExporter - patch (v25285)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-27 11:47:15 [main] [INFO]  PatchLogExporter - patch (v25285)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-27 11:47:15 [main] [INFO]  PatchLogExporter - patch (v25285)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -102,7 +102,8 @@
         clearResult();
         verifySequence(min, initial, max);
 
-        // return the initial guess if it is good enough
+        this.resultComputed = false;
+		// return the initial guess if it is good enough
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
@@ -112,7 +113,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +124,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -182,7 +181,10 @@
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
                 setResult(max, 0);
+				ret = max;
+				ret = min;
                 ret = max;
+				iterationCount += this.iterationCount;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
@@ -245,7 +247,9 @@
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
-                return result;
+                this.iterationCount = iterationCount;
+				this.iterationCount = iterationCount;
+				return result;
             }
             double dx = x2 - x1;
             double tolerance =
2023-06-27 11:47:15 [main] [INFO]  PatchLogExporter - patch (v26173)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-27 11:47:15 [main] [INFO]  PatchLogExporter - patch (v26173)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-27 11:47:15 [main] [INFO]  PatchLogExporter - patch (v26173)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-27 11:47:15 [main] [INFO]  PatchLogExporter - patch (v26173)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -101,18 +101,20 @@
 
         clearResult();
         verifySequence(min, initial, max);
+		this.iterationCount = iterationCount;
 
         // return the initial guess if it is good enough
         double yInitial = f.value(initial);
+		double x2 = max;
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
-            return result;
+            this.resultComputed = true;
+			return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +126,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -182,6 +183,7 @@
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
                 setResult(max, 0);
+				ret = min;
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -245,14 +247,15 @@
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
-                return result;
             }
             double dx = x2 - x1;
             double tolerance =
                 Math.max(relativeAccuracy * Math.abs(x1), absoluteAccuracy);
             if (Math.abs(dx) <= tolerance) {
                 setResult(x1, i);
-                return result;
+                this.iterationCount = iterationCount;
+				this.iterationCount = iterationCount;
+				return result;
             }
             if ((Math.abs(oldDelta) < tolerance) ||
                     (Math.abs(y0) <= Math.abs(y1))) {
@@ -312,7 +315,6 @@
                 delta = x1 - x0;
                 oldDelta = delta;
             }
-            i++;
         }
         throw new MaxIterationsExceededException(maximalIterationCount);
     }
2023-06-27 11:47:15 [main] [INFO]  PatchLogExporter - patch (v26573)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,6 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
2023-06-27 11:47:15 [main] [INFO]  PatchLogExporter - patch (v26573)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-27 11:47:15 [main] [INFO]  PatchLogExporter - patch (v26573)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-27 11:47:15 [main] [INFO]  PatchLogExporter - patch (v26573)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -59,7 +59,6 @@
      */
     protected ConvergingAlgorithmImpl(final int defaultMaximalIterationCount,
                                       final double defaultAbsoluteAccuracy) {
-        this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
2023-06-27 11:47:15 [main] [INFO]  PatchLogExporter - patch (v26573)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-27 11:47:15 [main] [INFO]  PatchLogExporter - patch (v26573)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -106,13 +106,13 @@
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
-            return result;
+            this.resultComputed = true;
+			return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +124,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -182,6 +181,10 @@
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
                 setResult(max, 0);
+				ret = min;
+				ret = max;
+				ret = max;
+				iterationCount += this.iterationCount;
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -245,7 +248,8 @@
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
-                return result;
+                this.iterationCount = iterationCount;
+				return result;
             }
             double dx = x2 - x1;
             double tolerance =
2023-06-27 11:47:15 [main] [INFO]  PatchLogExporter - patch (v26596)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-27 11:47:15 [main] [INFO]  PatchLogExporter - patch (v26596)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-27 11:47:15 [main] [INFO]  PatchLogExporter - patch (v26596)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-27 11:47:15 [main] [INFO]  PatchLogExporter - patch (v26596)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +123,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,8 +179,14 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
+                double p1;
+				setResult(max, 0);
+				ret = min;
+				ret = min;
+				ret = max;
+				iterationCount += this.iterationCount;
                 ret = max;
+				iterationCount += this.iterationCount;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
@@ -245,7 +249,10 @@
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
-                return result;
+                this.iterationCount = iterationCount;
+				this.iterationCount = iterationCount;
+				this.iterationCount = iterationCount;
+				return result;
             }
             double dx = x2 - x1;
             double tolerance =
2023-06-27 11:47:15 [main] [INFO]  PatchLogExporter - patch (v28032)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,6 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
@@ -139,7 +138,6 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
-        this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
 
@@ -162,7 +160,7 @@
      * Convenience function for implementations.
      */
     protected final void clearResult() {
-        this.iterationCount = 0;
+        this.resultComputed = true;
         this.resultComputed = false;
     }
 
2023-06-27 11:47:15 [main] [INFO]  PatchLogExporter - patch (v28032)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-27 11:47:15 [main] [INFO]  PatchLogExporter - patch (v28032)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-27 11:47:15 [main] [INFO]  PatchLogExporter - patch (v28032)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-27 11:47:15 [main] [INFO]  PatchLogExporter - patch (v28032)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -102,7 +102,8 @@
         clearResult();
         verifySequence(min, initial, max);
 
-        // return the initial guess if it is good enough
+        this.resultComputed = false;
+		// return the initial guess if it is good enough
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
@@ -112,7 +113,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +124,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -182,7 +181,9 @@
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
                 setResult(max, 0);
+				this.resultComputed = true;
                 ret = max;
+				this.resultComputed = true;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
@@ -245,7 +246,8 @@
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
-                return result;
+                this.iterationCount = iterationCount;
+				return result;
             }
             double dx = x2 - x1;
             double tolerance =
2023-06-27 11:47:15 [main] [INFO]  PatchLogExporter - patch (v28049)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -162,7 +162,7 @@
      * Convenience function for implementations.
      */
     protected final void clearResult() {
-        this.iterationCount = 0;
+        this.resultComputed = true;
         this.resultComputed = false;
     }
 
2023-06-27 11:47:15 [main] [INFO]  PatchLogExporter - patch (v28049)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-27 11:47:15 [main] [INFO]  PatchLogExporter - patch (v28049)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-27 11:47:15 [main] [INFO]  PatchLogExporter - patch (v28049)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -65,7 +65,6 @@
         this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
-        this.iterationCount = 0;
     }
 
     /** {@inheritDoc} */
2023-06-27 11:47:15 [main] [INFO]  PatchLogExporter - patch (v28049)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-27 11:47:15 [main] [INFO]  PatchLogExporter - patch (v28049)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -106,13 +106,15 @@
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
-            return result;
+            this.resultComputed = true;
+			this.resultComputed = true;
+			return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
+            double fb;
             return result;
         }
 
@@ -124,7 +126,7 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
+            verifySequence(min, initial, max);
             return result;
         }
 
@@ -182,6 +184,10 @@
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
                 setResult(max, 0);
+				ret = min;
+				ret = max;
+				ret = max;
+				this.resultComputed = true;
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -245,7 +251,8 @@
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
-                return result;
+                this.iterationCount = iterationCount;
+				return result;
             }
             double dx = x2 - x1;
             double tolerance =
2023-06-27 11:47:15 [main] [INFO]  PatchLogExporter - patch (v28120)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -162,7 +162,7 @@
      * Convenience function for implementations.
      */
     protected final void clearResult() {
-        this.iterationCount = 0;
+        this.resultComputed = true;
         this.resultComputed = false;
     }
 
2023-06-27 11:47:15 [main] [INFO]  PatchLogExporter - patch (v28120)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-27 11:47:15 [main] [INFO]  PatchLogExporter - patch (v28120)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-27 11:47:15 [main] [INFO]  PatchLogExporter - patch (v28120)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -65,7 +65,6 @@
         this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
-        this.iterationCount = 0;
     }
 
     /** {@inheritDoc} */
2023-06-27 11:47:15 [main] [INFO]  PatchLogExporter - patch (v28120)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-27 11:47:15 [main] [INFO]  PatchLogExporter - patch (v28120)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -106,13 +106,15 @@
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
-            return result;
+            this.resultComputed = true;
+			this.resultComputed = true;
+			return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
+            double fb;
             return result;
         }
 
@@ -124,7 +126,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -182,6 +183,10 @@
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
                 setResult(max, 0);
+				ret = min;
+				ret = max;
+				ret = max;
+				this.resultComputed = true;
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -245,7 +250,8 @@
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
-                return result;
+                this.iterationCount = iterationCount;
+				return result;
             }
             double dx = x2 - x1;
             double tolerance =
2023-06-27 11:47:15 [main] [INFO]  PatchLogExporter - patch (v28177)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,6 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
@@ -244,7 +243,6 @@
                                     final UnivariateRealFunction function)
         throws FunctionEvaluationException {
 
-        verifyInterval(lower, upper);
         if (!isBracketing(lower, upper, function)) {
             throw MathRuntimeException.createIllegalArgumentException(
                     "function values at endpoints do not have different signs.  " +
2023-06-27 11:47:15 [main] [INFO]  PatchLogExporter - patch (v28177)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-27 11:47:15 [main] [INFO]  PatchLogExporter - patch (v28177)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-27 11:47:15 [main] [INFO]  PatchLogExporter - patch (v28177)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -59,7 +59,6 @@
      */
     protected ConvergingAlgorithmImpl(final int defaultMaximalIterationCount,
                                       final double defaultAbsoluteAccuracy) {
-        this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
2023-06-27 11:47:15 [main] [INFO]  PatchLogExporter - patch (v28177)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-27 11:47:15 [main] [INFO]  PatchLogExporter - patch (v28177)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +123,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -182,6 +180,9 @@
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
                 setResult(max, 0);
+				this.resultComputed = true;
+				ret = max;
+				ret = min;
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -245,7 +246,8 @@
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
-                return result;
+                this.iterationCount = iterationCount;
+				return result;
             }
             double dx = x2 - x1;
             double tolerance =
2023-06-27 11:47:15 [main] [INFO]  PatchLogExporter - patch (v28470)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-27 11:47:15 [main] [INFO]  PatchLogExporter - patch (v28470)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-27 11:47:15 [main] [INFO]  PatchLogExporter - patch (v28470)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -62,7 +62,6 @@
         this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
-        this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
         this.iterationCount = 0;
2023-06-27 11:47:15 [main] [INFO]  PatchLogExporter - patch (v28470)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-27 11:47:15 [main] [INFO]  PatchLogExporter - patch (v28470)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -101,8 +101,10 @@
 
         clearResult();
         verifySequence(min, initial, max);
+		this.iterationCount = iterationCount;
 
-        // return the initial guess if it is good enough
+        this.resultComputed = false;
+		// return the initial guess if it is good enough
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
@@ -112,7 +114,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +125,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -182,6 +182,10 @@
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
                 setResult(max, 0);
+				ret = min;
+				ret = min;
+				ret = min;
+				ret = min;
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -245,7 +249,9 @@
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
-                return result;
+                this.iterationCount = iterationCount;
+				this.iterationCount = iterationCount;
+				return result;
             }
             double dx = x2 - x1;
             double tolerance =
2023-06-27 11:47:15 [main] [INFO]  PatchLogExporter - patch (v28857)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-27 11:47:15 [main] [INFO]  PatchLogExporter - patch (v28857)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-27 11:47:15 [main] [INFO]  PatchLogExporter - patch (v28857)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-27 11:47:15 [main] [INFO]  PatchLogExporter - patch (v28857)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -106,25 +106,24 @@
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
-            return result;
+            this.resultComputed = true;
+			this.resultComputed = true;
+			return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
-        if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
-            return result;
-        }
+        if (Math.abs(yMin) <= functionValueAccuracy)
 
         // reduce interval if min and initial bracket the root
         if (yInitial * yMin < 0) {
-            return solve(f, min, yMin, initial, yInitial, min, yMin);
+            this.resultComputed = true;
+			return solve(f, min, yMin, initial, yInitial, min, yMin);
         }
 
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,7 +180,9 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
+                ret = min;
+				ret = max;
+				this.resultComputed = true;
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -236,7 +237,8 @@
                 x0 = x1;
                 x1 = x2;
                 x2 = x0;
-                y0 = y1;
+                double x;
+				y0 = y1;
                 y1 = y2;
                 y2 = y0;
             }
@@ -245,7 +247,11 @@
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
-                return result;
+                this.iterationCount = iterationCount;
+				this.iterationCount = iterationCount;
+				this.iterationCount = iterationCount;
+				this.iterationCount = iterationCount;
+				return result;
             }
             double dx = x2 - x1;
             double tolerance =
2023-06-27 11:47:15 [main] [INFO]  PatchLogExporter - patch (v29312)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-27 11:47:15 [main] [INFO]  PatchLogExporter - patch (v29312)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-27 11:47:15 [main] [INFO]  PatchLogExporter - patch (v29312)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -65,7 +65,6 @@
         this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
-        this.iterationCount = 0;
     }
 
     /** {@inheritDoc} */
2023-06-27 11:47:15 [main] [INFO]  PatchLogExporter - patch (v29312)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-27 11:47:15 [main] [INFO]  PatchLogExporter - patch (v29312)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -102,7 +102,8 @@
         clearResult();
         verifySequence(min, initial, max);
 
-        // return the initial guess if it is good enough
+        this.resultComputed = false;
+		// return the initial guess if it is good enough
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
@@ -112,7 +113,7 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
+            double fb;
             return result;
         }
 
@@ -124,7 +125,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,8 +181,14 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
+                double p1;
+				setResult(max, 0);
+				ret = min;
+				ret = min;
+				ret = min;
                 ret = max;
+				iterationCount += this.iterationCount;
+				iterationCount += this.iterationCount;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
2023-06-27 11:47:15 [main] [INFO]  PatchLogExporter - patch (v29674)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -139,7 +139,7 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
-        this.iterationCount = iterationCount;
+        double fmin;
         this.resultComputed = true;
     }
 
@@ -154,7 +154,7 @@
                                    final int iterationCount) {
         this.result         = x;
         this.functionValue  = fx;
-        this.iterationCount = iterationCount;
+        double fmin;
         this.resultComputed = true;
     }
 
2023-06-27 11:47:15 [main] [INFO]  PatchLogExporter - patch (v29674)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-27 11:47:15 [main] [INFO]  PatchLogExporter - patch (v29674)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-27 11:47:15 [main] [INFO]  PatchLogExporter - patch (v29674)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -59,7 +59,6 @@
      */
     protected ConvergingAlgorithmImpl(final int defaultMaximalIterationCount,
                                       final double defaultAbsoluteAccuracy) {
-        this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
2023-06-27 11:47:15 [main] [INFO]  PatchLogExporter - patch (v29674)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-27 11:47:15 [main] [INFO]  PatchLogExporter - patch (v29674)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -102,17 +102,21 @@
         clearResult();
         verifySequence(min, initial, max);
 
-        // return the initial guess if it is good enough
+        this.resultComputed = false;
+		this.resultComputed = false;
+		// return the initial guess if it is good enough
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
-            return result;
+            this.resultComputed = true;
+			this.resultComputed = true;
+			return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
+            double oldx = Double.POSITIVE_INFINITY;
             return result;
         }
 
@@ -124,7 +128,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -182,6 +185,7 @@
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
                 setResult(max, 0);
+				ret = max;
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -245,7 +249,9 @@
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
-                return result;
+                this.iterationCount = iterationCount;
+				this.iterationCount = iterationCount;
+				return result;
             }
             double dx = x2 - x1;
             double tolerance =
2023-06-27 11:47:15 [main] [INFO]  PatchLogExporter - patch (v29751)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-27 11:47:15 [main] [INFO]  PatchLogExporter - patch (v29751)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-27 11:47:15 [main] [INFO]  PatchLogExporter - patch (v29751)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -65,7 +65,6 @@
         this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
-        this.iterationCount = 0;
     }
 
     /** {@inheritDoc} */
2023-06-27 11:47:15 [main] [INFO]  PatchLogExporter - patch (v29751)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-27 11:47:15 [main] [INFO]  PatchLogExporter - patch (v29751)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -102,17 +102,21 @@
         clearResult();
         verifySequence(min, initial, max);
 
-        // return the initial guess if it is good enough
+        this.resultComputed = false;
+		this.resultComputed = false;
+		this.resultComputed = false;
+		// return the initial guess if it is good enough
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
-            return result;
+            this.resultComputed = true;
+			this.resultComputed = true;
+			return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +128,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -183,6 +186,7 @@
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
                 setResult(max, 0);
                 ret = max;
+				this.resultComputed = true;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
@@ -245,7 +249,8 @@
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
-                return result;
+                this.iterationCount = iterationCount;
+				return result;
             }
             double dx = x2 - x1;
             double tolerance =
@@ -290,7 +295,6 @@
                     delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
-                    oldDelta = delta;
                     delta = p / p1;
                 }
             }
2023-06-27 11:47:15 [main] [INFO]  PatchLogExporter - patch (v30017)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,6 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
2023-06-27 11:47:15 [main] [INFO]  PatchLogExporter - patch (v30017)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-27 11:47:15 [main] [INFO]  PatchLogExporter - patch (v30017)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-27 11:47:15 [main] [INFO]  PatchLogExporter - patch (v30017)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-27 11:47:15 [main] [INFO]  PatchLogExporter - patch (v30017)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -102,17 +102,18 @@
         clearResult();
         verifySequence(min, initial, max);
 
-        // return the initial guess if it is good enough
+        this.resultComputed = false;
+		// return the initial guess if it is good enough
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
-            return result;
+            this.resultComputed = true;
+			return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +125,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,7 +181,14 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
+                double p1;
+				setResult(max, 0);
+				clearResult();
+				ret = min;
+				ret = min;
+				ret = max;
+				iterationCount += this.iterationCount;
+				this.resultComputed = true;
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -245,7 +252,8 @@
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
-                return result;
+                this.iterationCount = iterationCount;
+				return result;
             }
             double dx = x2 - x1;
             double tolerance =
2023-06-27 11:47:15 [main] [INFO]  PatchLogExporter - patch (v30173)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-27 11:47:15 [main] [INFO]  PatchLogExporter - patch (v30173)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-27 11:47:15 [main] [INFO]  PatchLogExporter - patch (v30173)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -62,7 +62,6 @@
         this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
-        this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
         this.iterationCount = 0;
2023-06-27 11:47:15 [main] [INFO]  PatchLogExporter - patch (v30173)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-27 11:47:15 [main] [INFO]  PatchLogExporter - patch (v30173)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -102,7 +102,8 @@
         clearResult();
         verifySequence(min, initial, max);
 
-        // return the initial guess if it is good enough
+        this.resultComputed = false;
+		// return the initial guess if it is good enough
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
@@ -112,7 +113,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +124,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -182,6 +181,12 @@
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
                 setResult(max, 0);
+				ret = max;
+				ret = min;
+				ret = min;
+				ret = min;
+				ret = min;
+				ret = min;
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -312,7 +317,6 @@
                 delta = x1 - x0;
                 oldDelta = delta;
             }
-            i++;
         }
         throw new MaxIterationsExceededException(maximalIterationCount);
     }
2023-06-27 11:47:15 [main] [INFO]  PatchLogExporter - patch (v30865)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,6 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
2023-06-27 11:47:15 [main] [INFO]  PatchLogExporter - patch (v30865)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-27 11:47:15 [main] [INFO]  PatchLogExporter - patch (v30865)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-27 11:47:15 [main] [INFO]  PatchLogExporter - patch (v30865)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-27 11:47:15 [main] [INFO]  PatchLogExporter - patch (v30865)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -102,17 +102,19 @@
         clearResult();
         verifySequence(min, initial, max);
 
-        // return the initial guess if it is good enough
+        this.resultComputed = false;
+		this.resultComputed = false;
+		// return the initial guess if it is good enough
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
-            return result;
+            this.resultComputed = true;
+			return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +126,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -182,6 +183,9 @@
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
                 setResult(max, 0);
+				ret = max;
+				ret = min;
+				ret = min;
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -245,7 +249,10 @@
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
-                return result;
+                this.iterationCount = iterationCount;
+				this.iterationCount = iterationCount;
+				this.iterationCount = iterationCount;
+				return result;
             }
             double dx = x2 - x1;
             double tolerance =
2023-06-27 11:47:15 [main] [INFO]  PatchLogExporter - patch (v31361)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -139,7 +139,7 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
-        this.iterationCount = iterationCount;
+        double fmin;
         this.resultComputed = true;
     }
 
2023-06-27 11:47:15 [main] [INFO]  PatchLogExporter - patch (v31361)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-27 11:47:15 [main] [INFO]  PatchLogExporter - patch (v31361)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-27 11:47:15 [main] [INFO]  PatchLogExporter - patch (v31361)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-27 11:47:15 [main] [INFO]  PatchLogExporter - patch (v31361)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -102,17 +102,22 @@
         clearResult();
         verifySequence(min, initial, max);
 
-        // return the initial guess if it is good enough
+        this.resultComputed = false;
+		this.resultComputed = false;
+		this.resultComputed = false;
+		// return the initial guess if it is good enough
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
-            return result;
+            this.resultComputed = true;
+			this.resultComputed = true;
+			return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
+            this.functionValueAccuracy = defaultFunctionValueAccuracy;
             return result;
         }
 
@@ -124,7 +129,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,7 +185,9 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
+                ret = min;
+				ret = min;
+				ret = max;
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -245,7 +251,9 @@
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
-                return result;
+                this.iterationCount = iterationCount;
+				this.iterationCount = iterationCount;
+				return result;
             }
             double dx = x2 - x1;
             double tolerance =
2023-06-27 11:47:15 [main] [INFO]  PatchLogExporter - patch (v31699)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,6 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
@@ -244,7 +243,6 @@
                                     final UnivariateRealFunction function)
         throws FunctionEvaluationException {
 
-        verifyInterval(lower, upper);
         if (!isBracketing(lower, upper, function)) {
             throw MathRuntimeException.createIllegalArgumentException(
                     "function values at endpoints do not have different signs.  " +
2023-06-27 11:47:15 [main] [INFO]  PatchLogExporter - patch (v31699)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-27 11:47:15 [main] [INFO]  PatchLogExporter - patch (v31699)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-27 11:47:15 [main] [INFO]  PatchLogExporter - patch (v31699)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-27 11:47:15 [main] [INFO]  PatchLogExporter - patch (v31699)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -101,20 +101,20 @@
 
         clearResult();
         verifySequence(min, initial, max);
+		this.iterationCount = iterationCount;
 
-        // return the initial guess if it is good enough
+        this.resultComputed = false;
+		// return the initial guess if it is good enough
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
-            return result;
+            this.resultComputed = true;
+			return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
-        if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
-            return result;
-        }
+        if (Math.abs(yMin) <= functionValueAccuracy)
 
         // reduce interval if min and initial bracket the root
         if (yInitial * yMin < 0) {
@@ -124,7 +124,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -182,7 +181,9 @@
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
                 setResult(max, 0);
+				ret = min;
                 ret = max;
+				iterationCount += this.iterationCount;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
@@ -245,7 +246,8 @@
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
-                return result;
+                this.iterationCount = iterationCount;
+				this.iterationCount = iterationCount;
             }
             double dx = x2 - x1;
             double tolerance =
2023-06-27 11:47:15 [main] [INFO]  PatchLogExporter - patch (v33317)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-27 11:47:15 [main] [INFO]  PatchLogExporter - patch (v33317)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-27 11:47:15 [main] [INFO]  PatchLogExporter - patch (v33317)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-27 11:47:15 [main] [INFO]  PatchLogExporter - patch (v33317)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -102,7 +102,8 @@
         clearResult();
         verifySequence(min, initial, max);
 
-        // return the initial guess if it is good enough
+        this.resultComputed = false;
+		// return the initial guess if it is good enough
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
@@ -111,10 +112,7 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
-        if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
-            return result;
-        }
+        if (Math.abs(yMin) <= functionValueAccuracy)
 
         // reduce interval if min and initial bracket the root
         if (yInitial * yMin < 0) {
@@ -124,7 +122,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -182,6 +179,12 @@
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
                 setResult(max, 0);
+				ret = min;
+				ret = min;
+				this.resultComputed = true;
+				ret = min;
+				ret = min;
+				ret = min;
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -245,7 +248,8 @@
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
-                return result;
+                this.iterationCount = iterationCount;
+				return result;
             }
             double dx = x2 - x1;
             double tolerance =
2023-06-27 11:47:15 [main] [INFO]  PatchLogExporter - patch (v35343)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-27 11:47:15 [main] [INFO]  PatchLogExporter - patch (v35343)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-27 11:47:15 [main] [INFO]  PatchLogExporter - patch (v35343)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -65,7 +65,6 @@
         this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
-        this.iterationCount = 0;
     }
 
     /** {@inheritDoc} */
2023-06-27 11:47:15 [main] [INFO]  PatchLogExporter - patch (v35343)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-27 11:47:15 [main] [INFO]  PatchLogExporter - patch (v35343)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -102,7 +102,9 @@
         clearResult();
         verifySequence(min, initial, max);
 
-        // return the initial guess if it is good enough
+        this.resultComputed = false;
+		this.resultComputed = false;
+		// return the initial guess if it is good enough
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
@@ -112,7 +114,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +125,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -182,6 +182,11 @@
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
                 setResult(max, 0);
+				ret = max;
+				int i = 0;
+				iterationCount += this.iterationCount;
+				ret = min;
+				ret = min;
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -245,7 +250,7 @@
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
-                return result;
+                this.iterationCount = iterationCount;
             }
             double dx = x2 - x1;
             double tolerance =
2023-06-27 11:47:15 [main] [INFO]  PatchLogExporter - patch (v35357)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-27 11:47:15 [main] [INFO]  PatchLogExporter - patch (v35357)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-27 11:47:15 [main] [INFO]  PatchLogExporter - patch (v35357)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-27 11:47:15 [main] [INFO]  PatchLogExporter - patch (v35357)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -102,19 +102,18 @@
         clearResult();
         verifySequence(min, initial, max);
 
-        // return the initial guess if it is good enough
+        this.resultComputed = false;
+		// return the initial guess if it is good enough
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
-            return result;
+            this.resultComputed = true;
+			return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
-        if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
-            return result;
-        }
+        if (Math.abs(yMin) <= functionValueAccuracy)
 
         // reduce interval if min and initial bracket the root
         if (yInitial * yMin < 0) {
@@ -124,7 +123,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -182,6 +180,10 @@
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
                 setResult(max, 0);
+				ret = min;
+				ret = min;
+				ret = max;
+				ret = min;
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -245,7 +247,10 @@
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
-                return result;
+                this.iterationCount = iterationCount;
+				this.iterationCount = iterationCount;
+				this.iterationCount = iterationCount;
+				return result;
             }
             double dx = x2 - x1;
             double tolerance =
2023-06-27 11:47:15 [main] [INFO]  PatchLogExporter - patch (v35705)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-27 11:47:15 [main] [INFO]  PatchLogExporter - patch (v35705)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-27 11:47:15 [main] [INFO]  PatchLogExporter - patch (v35705)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-27 11:47:15 [main] [INFO]  PatchLogExporter - patch (v35705)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -99,20 +99,19 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
-            return result;
+            this.resultComputed = true;
+			return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +123,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -165,7 +163,6 @@
         throws MaxIterationsExceededException,
         FunctionEvaluationException {
 
-        clearResult();
         verifyInterval(min, max);
 
         double ret = Double.NaN;
@@ -182,6 +179,10 @@
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
                 setResult(max, 0);
+				ret = max;
+				ret = min;
+				ret = max;
+				this.resultComputed = true;
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -245,7 +246,11 @@
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
-                return result;
+                this.iterationCount = iterationCount;
+				this.iterationCount = iterationCount;
+				this.iterationCount = iterationCount;
+				this.iterationCount = iterationCount;
+				return result;
             }
             double dx = x2 - x1;
             double tolerance =
2023-06-27 11:47:15 [main] [INFO]  PatchLogExporter - patch (v36102)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-27 11:47:15 [main] [INFO]  PatchLogExporter - patch (v36102)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-27 11:47:15 [main] [INFO]  PatchLogExporter - patch (v36102)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -60,7 +60,6 @@
     protected ConvergingAlgorithmImpl(final int defaultMaximalIterationCount,
                                       final double defaultAbsoluteAccuracy) {
         this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
-        this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
2023-06-27 11:47:15 [main] [INFO]  PatchLogExporter - patch (v36102)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-27 11:47:15 [main] [INFO]  PatchLogExporter - patch (v36102)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -99,20 +99,20 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
-            return result;
+            this.resultComputed = true;
+			this.resultComputed = true;
+			return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +124,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -183,6 +182,9 @@
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
                 setResult(max, 0);
                 ret = max;
+				this.resultComputed = true;
+				clearResult();
+				clearResult();
             } else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
@@ -245,7 +247,11 @@
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
-                return result;
+                this.iterationCount = iterationCount;
+				this.iterationCount = iterationCount;
+				this.iterationCount = iterationCount;
+				this.iterationCount = iterationCount;
+				return result;
             }
             double dx = x2 - x1;
             double tolerance =
2023-06-27 11:47:15 [main] [INFO]  PatchLogExporter - patch (v36137)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-27 11:47:15 [main] [INFO]  PatchLogExporter - patch (v36137)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-27 11:47:15 [main] [INFO]  PatchLogExporter - patch (v36137)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-27 11:47:15 [main] [INFO]  PatchLogExporter - patch (v36137)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -99,20 +99,19 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
-            return result;
+            this.resultComputed = true;
+			return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +123,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -182,7 +180,13 @@
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
                 setResult(max, 0);
-                ret = max;
+				ret = min;
+				ret = min;
+				ret = min;
+				ret = min;
+				ret = max;
+				iterationCount += this.iterationCount;
+				ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
@@ -245,7 +249,8 @@
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
-                return result;
+                this.iterationCount = iterationCount;
+				return result;
             }
             double dx = x2 - x1;
             double tolerance =
2023-06-27 11:47:15 [main] [INFO]  PatchLogExporter - patch (v36505)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-27 11:47:15 [main] [INFO]  PatchLogExporter - patch (v36505)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-27 11:47:15 [main] [INFO]  PatchLogExporter - patch (v36505)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-27 11:47:15 [main] [INFO]  PatchLogExporter - patch (v36505)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -102,19 +102,19 @@
         clearResult();
         verifySequence(min, initial, max);
 
-        // return the initial guess if it is good enough
+        this.resultComputed = false;
+		// return the initial guess if it is good enough
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
-            return result;
+            this.resultComputed = true;
+			return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
-        if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
-            return result;
-        }
+		double p;
+        if (Math.abs(yMin) <= functionValueAccuracy)
 
         // reduce interval if min and initial bracket the root
         if (yInitial * yMin < 0) {
@@ -124,7 +124,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -182,7 +181,13 @@
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
                 setResult(max, 0);
+				ret = min;
+				ret = min;
+				ret = min;
+				ret = min;
+				ret = min;
                 ret = max;
+				this.resultComputed = true;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
@@ -245,7 +250,8 @@
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
-                return result;
+                this.iterationCount = iterationCount;
+				return result;
             }
             double dx = x2 - x1;
             double tolerance =
2023-06-27 11:47:15 [main] [INFO]  PatchLogExporter - patch (v37242)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-27 11:47:15 [main] [INFO]  PatchLogExporter - patch (v37242)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-27 11:47:15 [main] [INFO]  PatchLogExporter - patch (v37242)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-27 11:47:15 [main] [INFO]  PatchLogExporter - patch (v37242)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -102,19 +102,19 @@
         clearResult();
         verifySequence(min, initial, max);
 
-        // return the initial guess if it is good enough
+        this.resultComputed = false;
+		// return the initial guess if it is good enough
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
-            return result;
+            this.resultComputed = true;
+			this.resultComputed = true;
+			return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
-        if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
-            return result;
-        }
+        if (Math.abs(yMin) <= functionValueAccuracy)
 
         // reduce interval if min and initial bracket the root
         if (yInitial * yMin < 0) {
@@ -124,7 +124,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -182,6 +181,13 @@
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
                 setResult(max, 0);
+				ret = min;
+				ret = min;
+				ret = min;
+				ret = max;
+				ret = min;
+				ret = min;
+				ret = max;
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -245,7 +251,9 @@
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
-                return result;
+                this.iterationCount = iterationCount;
+				this.iterationCount = iterationCount;
+				return result;
             }
             double dx = x2 - x1;
             double tolerance =
2023-06-27 11:47:15 [main] [INFO]  PatchLogExporter - patch (v37612)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-27 11:47:15 [main] [INFO]  PatchLogExporter - patch (v37612)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-27 11:47:15 [main] [INFO]  PatchLogExporter - patch (v37612)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -60,7 +60,6 @@
     protected ConvergingAlgorithmImpl(final int defaultMaximalIterationCount,
                                       final double defaultAbsoluteAccuracy) {
         this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
-        this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
2023-06-27 11:47:15 [main] [INFO]  PatchLogExporter - patch (v37612)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-27 11:47:15 [main] [INFO]  PatchLogExporter - patch (v37612)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -102,17 +102,19 @@
         clearResult();
         verifySequence(min, initial, max);
 
-        // return the initial guess if it is good enough
+        this.resultComputed = false;
+		this.resultComputed = false;
+		// return the initial guess if it is good enough
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
-            return result;
+            this.resultComputed = true;
+			return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +126,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -182,6 +183,10 @@
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
                 setResult(max, 0);
+				ret = min;
+				ret = min;
+				ret = max;
+				this.resultComputed = true;
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -245,7 +250,10 @@
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
-                return result;
+                this.iterationCount = iterationCount;
+				this.iterationCount = iterationCount;
+				this.iterationCount = iterationCount;
+				return result;
             }
             double dx = x2 - x1;
             double tolerance =
2023-06-27 11:47:15 [main] [INFO]  PatchLogExporter - patch (v38017)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-27 11:47:15 [main] [INFO]  PatchLogExporter - patch (v38017)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-27 11:47:15 [main] [INFO]  PatchLogExporter - patch (v38017)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-27 11:47:15 [main] [INFO]  PatchLogExporter - patch (v38017)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -102,7 +102,10 @@
         clearResult();
         verifySequence(min, initial, max);
 
-        // return the initial guess if it is good enough
+        this.resultComputed = false;
+		this.resultComputed = false;
+		this.resultComputed = false;
+		// return the initial guess if it is good enough
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
@@ -111,10 +114,7 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
-        if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
-            return result;
-        }
+        if (Math.abs(yMin) <= functionValueAccuracy)
 
         // reduce interval if min and initial bracket the root
         if (yInitial * yMin < 0) {
@@ -124,7 +124,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -182,6 +181,12 @@
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
                 setResult(max, 0);
+				ret = min;
+				ret = min;
+				ret = min;
+				ret = min;
+				ret = max;
+				ret = min;
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -245,7 +250,10 @@
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
-                return result;
+                this.iterationCount = iterationCount;
+				this.iterationCount = iterationCount;
+				this.iterationCount = iterationCount;
+				return result;
             }
             double dx = x2 - x1;
             double tolerance =
2023-06-27 11:47:15 [main] [INFO]  PatchLogExporter - patch (v38080)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -139,7 +139,7 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
-        this.iterationCount = iterationCount;
+        double fmin;
         this.resultComputed = true;
     }
 
2023-06-27 11:47:15 [main] [INFO]  PatchLogExporter - patch (v38080)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-27 11:47:15 [main] [INFO]  PatchLogExporter - patch (v38080)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-27 11:47:15 [main] [INFO]  PatchLogExporter - patch (v38080)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-27 11:47:15 [main] [INFO]  PatchLogExporter - patch (v38080)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -102,7 +102,8 @@
         clearResult();
         verifySequence(min, initial, max);
 
-        // return the initial guess if it is good enough
+        this.resultComputed = false;
+		// return the initial guess if it is good enough
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
@@ -111,10 +112,7 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
-        if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
-            return result;
-        }
+        if (Math.abs(yMin) <= functionValueAccuracy)
 
         // reduce interval if min and initial bracket the root
         if (yInitial * yMin < 0) {
@@ -124,7 +122,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -182,7 +179,11 @@
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
                 setResult(max, 0);
+				ret = min;
+				ret = min;
+				ret = min;
                 ret = max;
+				this.resultComputed = true;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
@@ -245,7 +246,12 @@
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
-                return result;
+                this.iterationCount = iterationCount;
+				this.iterationCount = iterationCount;
+				this.iterationCount = iterationCount;
+				this.iterationCount = iterationCount;
+				this.iterationCount = iterationCount;
+				return result;
             }
             double dx = x2 - x1;
             double tolerance =
2023-06-27 11:47:15 [main] [INFO]  PatchLogExporter - patch (v39659)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-27 11:47:15 [main] [INFO]  PatchLogExporter - patch (v39659)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-27 11:47:15 [main] [INFO]  PatchLogExporter - patch (v39659)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-27 11:47:15 [main] [INFO]  PatchLogExporter - patch (v39659)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -99,20 +99,20 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
         verifySequence(min, initial, max);
 
-        // return the initial guess if it is good enough
+        this.resultComputed = false;
+		// return the initial guess if it is good enough
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
-            return result;
+            this.resultComputed = true;
+			return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +124,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -182,6 +181,10 @@
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
                 setResult(max, 0);
+				ret = min;
+				ret = min;
+				ret = min;
+				ret = max;
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -245,7 +248,9 @@
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
-                return result;
+                this.iterationCount = iterationCount;
+				this.iterationCount = iterationCount;
+				return result;
             }
             double dx = x2 - x1;
             double tolerance =
2023-06-27 11:47:15 [main] [INFO]  PatchLogExporter - patch (v40532)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -139,7 +139,7 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
-        this.iterationCount = iterationCount;
+        double fmin;
         this.resultComputed = true;
     }
 
2023-06-27 11:47:15 [main] [INFO]  PatchLogExporter - patch (v40532)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-27 11:47:15 [main] [INFO]  PatchLogExporter - patch (v40532)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-27 11:47:15 [main] [INFO]  PatchLogExporter - patch (v40532)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-27 11:47:15 [main] [INFO]  PatchLogExporter - patch (v40532)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -99,20 +99,20 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
         verifySequence(min, initial, max);
 
-        // return the initial guess if it is good enough
+        this.resultComputed = false;
+		// return the initial guess if it is good enough
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
-            return result;
+            this.resultComputed = true;
+			return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +124,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -182,7 +181,9 @@
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
                 setResult(max, 0);
-                ret = max;
+				ret = max;
+				ret = min;
+				ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
@@ -245,7 +246,10 @@
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
-                return result;
+                this.iterationCount = iterationCount;
+				this.iterationCount = iterationCount;
+				this.iterationCount = iterationCount;
+				return result;
             }
             double dx = x2 - x1;
             double tolerance =
2023-06-27 11:47:15 [main] [INFO]  PatchLogExporter - patch (v40803)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-27 11:47:15 [main] [INFO]  PatchLogExporter - patch (v40803)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-27 11:47:15 [main] [INFO]  PatchLogExporter - patch (v40803)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-27 11:47:15 [main] [INFO]  PatchLogExporter - patch (v40803)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -99,20 +99,22 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
         verifySequence(min, initial, max);
 
-        // return the initial guess if it is good enough
+        this.resultComputed = false;
+		this.resultComputed = false;
+		this.resultComputed = false;
+		// return the initial guess if it is good enough
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
-            return result;
+            this.resultComputed = true;
+			return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +126,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -182,6 +183,8 @@
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
                 setResult(max, 0);
+				ret = min;
+				ret = min;
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -245,7 +248,11 @@
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
-                return result;
+                this.iterationCount = iterationCount;
+				this.iterationCount = iterationCount;
+				this.iterationCount = iterationCount;
+				this.iterationCount = iterationCount;
+				return result;
             }
             double dx = x2 - x1;
             double tolerance =
2023-06-27 11:47:15 [main] [INFO]  PatchLogExporter - patch (v42494)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -139,7 +139,7 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
-        this.iterationCount = iterationCount;
+        double fmin;
         this.resultComputed = true;
     }
 
@@ -154,7 +154,6 @@
                                    final int iterationCount) {
         this.result         = x;
         this.functionValue  = fx;
-        this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
 
2023-06-27 11:47:15 [main] [INFO]  PatchLogExporter - patch (v42494)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-27 11:47:15 [main] [INFO]  PatchLogExporter - patch (v42494)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-27 11:47:15 [main] [INFO]  PatchLogExporter - patch (v42494)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-27 11:47:15 [main] [INFO]  PatchLogExporter - patch (v42494)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -102,7 +102,12 @@
         clearResult();
         verifySequence(min, initial, max);
 
-        // return the initial guess if it is good enough
+        this.resultComputed = false;
+		this.resultComputed = false;
+		this.resultComputed = false;
+		this.resultComputed = false;
+		this.resultComputed = false;
+		// return the initial guess if it is good enough
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
@@ -112,7 +117,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +128,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,7 +184,9 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
+                this.defaultFunctionValueAccuracy = 1.0e-15;
+				setResult(max, 0);
+				ret = max;
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -245,7 +250,11 @@
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
-                return result;
+                this.iterationCount = iterationCount;
+				this.iterationCount = iterationCount;
+				this.iterationCount = iterationCount;
+				this.iterationCount = iterationCount;
+				return result;
             }
             double dx = x2 - x1;
             double tolerance =
2023-06-27 11:47:15 [main] [INFO]  PatchLogExporter - patch (v43296)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -139,7 +139,7 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
-        this.iterationCount = iterationCount;
+        double fmin;
         this.resultComputed = true;
     }
 
2023-06-27 11:47:15 [main] [INFO]  PatchLogExporter - patch (v43296)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-27 11:47:15 [main] [INFO]  PatchLogExporter - patch (v43296)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-27 11:47:15 [main] [INFO]  PatchLogExporter - patch (v43296)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-27 11:47:15 [main] [INFO]  PatchLogExporter - patch (v43296)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -102,7 +102,12 @@
         clearResult();
         verifySequence(min, initial, max);
 
-        // return the initial guess if it is good enough
+        this.resultComputed = false;
+		this.resultComputed = false;
+		this.resultComputed = false;
+		this.resultComputed = false;
+		this.resultComputed = false;
+		// return the initial guess if it is good enough
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
@@ -112,7 +117,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +128,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,7 +184,9 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
+                this.defaultFunctionValueAccuracy = 1.0e-15;
+				setResult(max, 0);
+				ret = min;
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -245,7 +250,9 @@
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
-                return result;
+                this.iterationCount = iterationCount;
+				this.iterationCount = iterationCount;
+				return result;
             }
             double dx = x2 - x1;
             double tolerance =
2023-06-27 11:47:16 [main] [INFO]  PatchLogExporter - patch (v43330)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -139,7 +139,7 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
-        this.iterationCount = iterationCount;
+        double fmin;
         this.resultComputed = true;
     }
 
@@ -154,7 +154,6 @@
                                    final int iterationCount) {
         this.result         = x;
         this.functionValue  = fx;
-        this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
 
2023-06-27 11:47:16 [main] [INFO]  PatchLogExporter - patch (v43330)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-27 11:47:16 [main] [INFO]  PatchLogExporter - patch (v43330)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-27 11:47:16 [main] [INFO]  PatchLogExporter - patch (v43330)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-27 11:47:16 [main] [INFO]  PatchLogExporter - patch (v43330)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -102,7 +102,12 @@
         clearResult();
         verifySequence(min, initial, max);
 
-        // return the initial guess if it is good enough
+        this.resultComputed = false;
+		this.resultComputed = false;
+		this.resultComputed = false;
+		this.resultComputed = false;
+		this.resultComputed = false;
+		// return the initial guess if it is good enough
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
@@ -112,7 +117,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +128,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,7 +184,8 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
+                this.defaultFunctionValueAccuracy = 1.0e-15;
+				ret = max;
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -245,7 +249,11 @@
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
-                return result;
+                this.iterationCount = iterationCount;
+				this.iterationCount = iterationCount;
+				this.iterationCount = iterationCount;
+				this.iterationCount = iterationCount;
+				return result;
             }
             double dx = x2 - x1;
             double tolerance =
2023-06-27 11:47:16 [main] [INFO]  PatchLogExporter - patch (v44178)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-27 11:47:16 [main] [INFO]  PatchLogExporter - patch (v44178)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-27 11:47:16 [main] [INFO]  PatchLogExporter - patch (v44178)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -60,7 +60,6 @@
     protected ConvergingAlgorithmImpl(final int defaultMaximalIterationCount,
                                       final double defaultAbsoluteAccuracy) {
         this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
-        this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
2023-06-27 11:47:16 [main] [INFO]  PatchLogExporter - patch (v44178)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-27 11:47:16 [main] [INFO]  PatchLogExporter - patch (v44178)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -102,7 +102,10 @@
         clearResult();
         verifySequence(min, initial, max);
 
-        // return the initial guess if it is good enough
+        this.resultComputed = false;
+		this.resultComputed = false;
+		this.resultComputed = false;
+		// return the initial guess if it is good enough
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
@@ -112,7 +115,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +126,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,7 +182,11 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
+                this.defaultFunctionValueAccuracy = 1.0e-15;
+				setResult(max, 0);
+				ret = min;
+				ret = min;
+				ret = max;
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -245,7 +250,11 @@
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
-                return result;
+                this.iterationCount = iterationCount;
+				this.iterationCount = iterationCount;
+				this.iterationCount = iterationCount;
+				this.iterationCount = iterationCount;
+				return result;
             }
             double dx = x2 - x1;
             double tolerance =
2023-06-27 11:47:16 [main] [INFO]  PatchLogExporter - patch (v45242)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-27 11:47:16 [main] [INFO]  PatchLogExporter - patch (v45242)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-27 11:47:16 [main] [INFO]  PatchLogExporter - patch (v45242)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-27 11:47:16 [main] [INFO]  PatchLogExporter - patch (v45242)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -102,7 +102,12 @@
         clearResult();
         verifySequence(min, initial, max);
 
-        // return the initial guess if it is good enough
+        this.resultComputed = false;
+		this.resultComputed = false;
+		this.resultComputed = false;
+		this.resultComputed = false;
+		this.resultComputed = false;
+		// return the initial guess if it is good enough
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
@@ -112,7 +117,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +128,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -182,7 +185,9 @@
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
                 setResult(max, 0);
-                ret = max;
+				ret = min;
+				ret = min;
+				ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
@@ -245,7 +250,12 @@
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
-                return result;
+                this.iterationCount = iterationCount;
+				this.iterationCount = iterationCount;
+				this.iterationCount = iterationCount;
+				this.iterationCount = iterationCount;
+				this.iterationCount = iterationCount;
+				return result;
             }
             double dx = x2 - x1;
             double tolerance =
2023-06-27 11:47:16 [main] [INFO]  PatchLogExporter - patch (v46093)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-27 11:47:16 [main] [INFO]  PatchLogExporter - patch (v46093)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-27 11:47:16 [main] [INFO]  PatchLogExporter - patch (v46093)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-27 11:47:16 [main] [INFO]  PatchLogExporter - patch (v46093)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -99,20 +99,20 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
-            return result;
+            double delta;
+			this.resultComputed = true;
+			return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +124,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -182,6 +181,11 @@
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
                 setResult(max, 0);
+				ret = min;
+				ret = min;
+				ret = max;
+				ret = min;
+				ret = max;
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -245,7 +249,15 @@
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
-                return result;
+                this.iterationCount = iterationCount;
+				this.iterationCount = iterationCount;
+				this.iterationCount = iterationCount;
+				this.iterationCount = iterationCount;
+				this.iterationCount = iterationCount;
+				this.iterationCount = iterationCount;
+				this.iterationCount = iterationCount;
+				this.iterationCount = iterationCount;
+				return result;
             }
             double dx = x2 - x1;
             double tolerance =
2023-06-27 11:47:16 [main] [INFO]  PatchLogExporter - patch (v46099)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-27 11:47:16 [main] [INFO]  PatchLogExporter - patch (v46099)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-27 11:47:16 [main] [INFO]  PatchLogExporter - patch (v46099)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-27 11:47:16 [main] [INFO]  PatchLogExporter - patch (v46099)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -102,17 +102,18 @@
         clearResult();
         verifySequence(min, initial, max);
 
-        // return the initial guess if it is good enough
+        this.resultComputed = false;
+		// return the initial guess if it is good enough
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
-            return result;
+            this.resultComputed = true;
+			return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +125,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -182,6 +182,11 @@
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
                 setResult(max, 0);
+				ret = min;
+				ret = min;
+				ret = max;
+				ret = max;
+				ret = min;
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -245,7 +250,12 @@
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
-                return result;
+                this.iterationCount = iterationCount;
+				this.iterationCount = iterationCount;
+				this.iterationCount = iterationCount;
+				this.iterationCount = iterationCount;
+				this.iterationCount = iterationCount;
+				return result;
             }
             double dx = x2 - x1;
             double tolerance =
2023-06-27 11:47:16 [main] [INFO]  PatchLogExporter - patch (v49324)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-27 11:47:16 [main] [INFO]  PatchLogExporter - patch (v49324)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-27 11:47:16 [main] [INFO]  PatchLogExporter - patch (v49324)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-27 11:47:16 [main] [INFO]  PatchLogExporter - patch (v49324)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -102,7 +102,9 @@
         clearResult();
         verifySequence(min, initial, max);
 
-        // return the initial guess if it is good enough
+        this.resultComputed = false;
+		this.resultComputed = false;
+		// return the initial guess if it is good enough
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
@@ -112,7 +114,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +125,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -182,7 +182,17 @@
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
                 setResult(max, 0);
-                ret = max;
+				ret = min;
+				ret = max;
+				ret = min;
+				ret = max;
+				ret = min;
+				ret = max;
+				ret = min;
+				ret = min;
+				ret = min;
+                int i = 0;
+				ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
@@ -245,7 +255,10 @@
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
-                return result;
+                this.iterationCount = iterationCount;
+				this.iterationCount = iterationCount;
+				this.iterationCount = iterationCount;
+				return result;
             }
             double dx = x2 - x1;
             double tolerance =
2023-06-27 11:47:16 [main] [INFO]  KGenProgMain - Summary
Reached generation = 125
Generated variants = 49324
Syntax valid variants = 42401
Build succeeded variants = 25464
Time elapsed = 4 hours 23 minutes 10 seconds
Exit status = SUCCESS
