2023-06-25 19:10:22 [main] [WARN]  Configuration$Builder - The directory where kGenProg is running is different from the root directory of the given target project.
2023-06-25 19:10:22 [main] [WARN]  Configuration$Builder - If the target project includes test cases with file I/O, such test cases won't run correctly.
2023-06-25 19:10:22 [main] [WARN]  Configuration$Builder - We recommend you running kGenProg with the root directory of the target project as the current directory.
2023-06-25 19:10:22 [main] [INFO]  KGenProgMain - 
==================== kGenProg Configuration ====================
configPath = /Users/haradakanon/Downloads/kGenProg-1.8.2/example/math72/kgenprog-72.toml (set by command line)
rootDir = /Users/haradakanon/Downloads/kGenProg-1.8.2/example/math72 (set in config file)
productPaths = [/Users/haradakanon/Downloads/kGenProg-1.8.2/example/math72/src/main] (set in config file)
testPaths = [/Users/haradakanon/Downloads/kGenProg-1.8.2/example/math72/src/test] (set in config file)
classPaths = []
executionTests = [org.apache.commons.math.analysis.solvers.BrentSolverTest] (set in config file)
outDir = kgenprog-out
logLevel = INFO (set in config file)
mutationGeneratingCount = 200 (set in config file)
crossoverGeneratingCount = 200 (set in config file)
headcount = 100
maxGeneration = 1000 (set in config file)
timeLimit = PT277H46M40S (set in config file)
testTimeLimit = PT3M (set in config file)
requiredSolutionsCount = 100 (set in config file)
randomSeed = 1 (set by command line)
scope = PACKAGE (set in config file)
faultLocalization = Zoltar (set in config file)
mutationType = Simple
crossoverType = Random
firstVariantSelectionStrategy = Random
secondVariantSelectionStrategy = Random
isPatchOutput = true (set in config file)
isHistoryRecord = false
currentDirectory = /Users/haradakanon/Desktop/研究/実験データ/research
version = 1.8.2
================================================================
2023-06-25 19:10:45 [main] [INFO]  KGenProgMain - initial failed tests (1/6)
org.apache.commons.math.analysis.solvers.BrentSolverTest.testRootEndpoints: null

2023-06-25 19:10:46 [main] [INFO]  KGenProgMain - GA started
2023-06-25 19:10:46 [main] [INFO]  KGenProgMain - entered the era of 1st generation.
2023-06-25 19:11:03 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 17 seconds
Variants: generated 200, build-succeeded 25, build-failed 112, syntax-invalid 11, redundant 52
Fitness: max 0.833(15), min 0.167(6), ave 0.64
Test execution time: sum 4256 ms, max 342 ms, min 91 ms
----------------------------------------------------------------

2023-06-25 19:11:03 [main] [INFO]  KGenProgMain - entered the era of 2nd generation.
2023-06-25 19:11:18 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 32 seconds
Variants: generated 200, build-succeeded 60, build-failed 104, syntax-invalid 14, redundant 22
Fitness: max 0.833(34), min 0.167(11), ave 0.664
Test execution time: sum 5667 ms, max 231 ms, min 72 ms
----------------------------------------------------------------

2023-06-25 19:11:18 [main] [INFO]  KGenProgMain - entered the era of 3rd generation.
2023-06-25 19:11:48 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 minutes 2 seconds
Variants: generated 400, build-succeeded 147, build-failed 121, syntax-invalid 27, redundant 105
Fitness: max 1(1), min 0.167(36), ave 0.629
Test execution time: sum 12944 ms, max 260 ms, min 70 ms
----------------------------------------------------------------

2023-06-25 19:11:48 [main] [INFO]  KGenProgMain - entered the era of 4th generation.
2023-06-25 19:12:13 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 minutes 27 seconds
Variants: generated 400, build-succeeded 142, build-failed 103, syntax-invalid 35, redundant 120
Fitness: max 1(3), min 0.167(9), ave 0.777
Test execution time: sum 11859 ms, max 251 ms, min 71 ms
----------------------------------------------------------------

2023-06-25 19:12:13 [main] [INFO]  KGenProgMain - entered the era of 5th generation.
2023-06-25 19:12:39 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 minutes 53 seconds
Variants: generated 400, build-succeeded 141, build-failed 107, syntax-invalid 29, redundant 123
Fitness: max 1(1), min 0.167(7), ave 0.792
Test execution time: sum 11792 ms, max 272 ms, min 71 ms
----------------------------------------------------------------

2023-06-25 19:12:39 [main] [INFO]  KGenProgMain - entered the era of 6th generation.
2023-06-25 19:13:07 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 minutes 21 seconds
Variants: generated 400, build-succeeded 139, build-failed 113, syntax-invalid 32, redundant 116
Fitness: max 0.833(126), min 0.167(9), ave 0.785
Test execution time: sum 12226 ms, max 475 ms, min 70 ms
----------------------------------------------------------------

2023-06-25 19:13:07 [main] [INFO]  KGenProgMain - entered the era of 7th generation.
2023-06-25 19:13:35 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 minutes 48 seconds
Variants: generated 400, build-succeeded 160, build-failed 114, syntax-invalid 29, redundant 97
Fitness: max 1(2), min 0.167(6), ave 0.794
Test execution time: sum 12450 ms, max 538 ms, min 57 ms
----------------------------------------------------------------

2023-06-25 19:13:35 [main] [INFO]  KGenProgMain - entered the era of 8th generation.
2023-06-25 19:14:02 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 minutes 16 seconds
Variants: generated 400, build-succeeded 178, build-failed 116, syntax-invalid 44, redundant 62
Fitness: max 1(1), min 0.167(13), ave 0.772
Test execution time: sum 13502 ms, max 296 ms, min 57 ms
----------------------------------------------------------------

2023-06-25 19:14:02 [main] [INFO]  KGenProgMain - entered the era of 9th generation.
2023-06-25 19:14:30 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 minutes 43 seconds
Variants: generated 400, build-succeeded 172, build-failed 112, syntax-invalid 59, redundant 57
Fitness: max 1(1), min 0(1), ave 0.77
Test execution time: sum 13476 ms, max 245 ms, min 56 ms
----------------------------------------------------------------

2023-06-25 19:14:30 [main] [INFO]  KGenProgMain - entered the era of 10th generation.
2023-06-25 19:14:57 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 minutes 10 seconds
Variants: generated 400, build-succeeded 177, build-failed 110, syntax-invalid 45, redundant 68
Fitness: max 1(1), min 0.167(9), ave 0.791
Test execution time: sum 13426 ms, max 228 ms, min 56 ms
----------------------------------------------------------------

2023-06-25 19:14:57 [main] [INFO]  KGenProgMain - entered the era of 11th generation.
2023-06-25 19:15:26 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 minutes 40 seconds
Variants: generated 400, build-succeeded 194, build-failed 100, syntax-invalid 54, redundant 52
Fitness: max 1(2), min 0.167(12), ave 0.777
Test execution time: sum 15380 ms, max 313 ms, min 56 ms
----------------------------------------------------------------

2023-06-25 19:15:26 [main] [INFO]  KGenProgMain - entered the era of 12th generation.
2023-06-25 19:15:55 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 minutes 8 seconds
Variants: generated 400, build-succeeded 190, build-failed 112, syntax-invalid 56, redundant 42
Fitness: max 1(1), min 0.167(13), ave 0.778
Test execution time: sum 13511 ms, max 181 ms, min 55 ms
----------------------------------------------------------------

2023-06-25 19:15:55 [main] [INFO]  KGenProgMain - entered the era of 13th generation.
2023-06-25 19:16:23 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 minutes 36 seconds
Variants: generated 400, build-succeeded 201, build-failed 115, syntax-invalid 45, redundant 39
Fitness: max 1(2), min 0.167(13), ave 0.781
Test execution time: sum 14246 ms, max 262 ms, min 55 ms
----------------------------------------------------------------

2023-06-25 19:16:23 [main] [INFO]  KGenProgMain - entered the era of 14th generation.
2023-06-25 19:16:50 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 minutes 4 seconds
Variants: generated 400, build-succeeded 188, build-failed 110, syntax-invalid 53, redundant 49
Fitness: max 1(1), min 0.167(16), ave 0.77
Test execution time: sum 12848 ms, max 211 ms, min 55 ms
----------------------------------------------------------------

2023-06-25 19:16:50 [main] [INFO]  KGenProgMain - entered the era of 15th generation.
2023-06-25 19:17:24 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 minutes 38 seconds
Variants: generated 400, build-succeeded 197, build-failed 108, syntax-invalid 58, redundant 37
Fitness: max 1(3), min 0.167(10), ave 0.794
Test execution time: sum 17409 ms, max 814 ms, min 56 ms
----------------------------------------------------------------

2023-06-25 19:17:24 [main] [INFO]  KGenProgMain - entered the era of 16th generation.
2023-06-25 19:17:52 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 minutes 6 seconds
Variants: generated 400, build-succeeded 191, build-failed 108, syntax-invalid 68, redundant 33
Fitness: max 0.833(168), min 0.167(13), ave 0.777
Test execution time: sum 13279 ms, max 203 ms, min 54 ms
----------------------------------------------------------------

2023-06-25 19:17:52 [main] [INFO]  KGenProgMain - entered the era of 17th generation.
2023-06-25 19:18:23 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 minutes 37 seconds
Variants: generated 400, build-succeeded 204, build-failed 107, syntax-invalid 54, redundant 35
Fitness: max 0.833(183), min 0.167(14), ave 0.78
Test execution time: sum 14197 ms, max 442 ms, min 54 ms
----------------------------------------------------------------

2023-06-25 19:18:23 [main] [INFO]  KGenProgMain - entered the era of 18th generation.
2023-06-25 19:18:54 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 minutes 7 seconds
Variants: generated 400, build-succeeded 213, build-failed 105, syntax-invalid 59, redundant 23
Fitness: max 1(2), min 0.167(17), ave 0.772
Test execution time: sum 14820 ms, max 201 ms, min 54 ms
----------------------------------------------------------------

2023-06-25 19:18:54 [main] [INFO]  KGenProgMain - entered the era of 19th generation.
2023-06-25 19:34:22 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 23 minutes 35 seconds
Variants: generated 400, build-succeeded 194, build-failed 108, syntax-invalid 73, redundant 25
Fitness: max 1(2), min 0.167(20), ave 0.753
Test execution time: sum 912928 ms, max 900160 ms, min 54 ms
----------------------------------------------------------------

2023-06-25 19:34:22 [main] [INFO]  KGenProgMain - entered the era of 20th generation.
2023-06-25 19:49:51 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 39 minutes 5 seconds
Variants: generated 400, build-succeeded 202, build-failed 110, syntax-invalid 74, redundant 14
Fitness: max 1(1), min 0.167(12), ave 0.783
Test execution time: sum 913479 ms, max 900120 ms, min 54 ms
----------------------------------------------------------------

2023-06-25 19:49:51 [main] [INFO]  KGenProgMain - entered the era of 21st generation.
2023-06-25 19:50:19 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 39 minutes 33 seconds
Variants: generated 400, build-succeeded 205, build-failed 115, syntax-invalid 58, redundant 22
Fitness: max 1(2), min 0.167(9), ave 0.793
Test execution time: sum 13275 ms, max 256 ms, min 54 ms
----------------------------------------------------------------

2023-06-25 19:50:19 [main] [INFO]  KGenProgMain - entered the era of 22nd generation.
2023-06-25 19:50:48 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 40 minutes 2 seconds
Variants: generated 400, build-succeeded 193, build-failed 105, syntax-invalid 67, redundant 35
Fitness: max 0.833(174), min 0.167(5), ave 0.801
Test execution time: sum 12816 ms, max 236 ms, min 56 ms
----------------------------------------------------------------

2023-06-25 19:50:48 [main] [INFO]  KGenProgMain - entered the era of 23rd generation.
2023-06-25 19:51:17 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 40 minutes 31 seconds
Variants: generated 400, build-succeeded 210, build-failed 118, syntax-invalid 49, redundant 23
Fitness: max 1(2), min 0.167(13), ave 0.782
Test execution time: sum 12507 ms, max 145 ms, min 55 ms
----------------------------------------------------------------

2023-06-25 19:51:17 [main] [INFO]  KGenProgMain - entered the era of 24th generation.
2023-06-25 19:51:46 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 41 minutes 0 seconds
Variants: generated 400, build-succeeded 216, build-failed 110, syntax-invalid 56, redundant 18
Fitness: max 1(2), min 0.167(6), ave 0.802
Test execution time: sum 13077 ms, max 124 ms, min 55 ms
----------------------------------------------------------------

2023-06-25 19:51:46 [main] [INFO]  KGenProgMain - entered the era of 25th generation.
2023-06-25 19:52:13 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 41 minutes 27 seconds
Variants: generated 400, build-succeeded 200, build-failed 121, syntax-invalid 62, redundant 17
Fitness: max 0.833(184), min 0.167(6), ave 0.802
Test execution time: sum 11829 ms, max 109 ms, min 56 ms
----------------------------------------------------------------

2023-06-25 19:52:13 [main] [INFO]  KGenProgMain - entered the era of 26th generation.
2023-06-25 19:52:42 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 41 minutes 56 seconds
Variants: generated 400, build-succeeded 210, build-failed 110, syntax-invalid 55, redundant 25
Fitness: max 0.833(194), min 0.167(9), ave 0.797
Test execution time: sum 12912 ms, max 196 ms, min 55 ms
----------------------------------------------------------------

2023-06-25 19:52:42 [main] [INFO]  KGenProgMain - entered the era of 27th generation.
2023-06-25 19:53:11 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 42 minutes 25 seconds
Variants: generated 400, build-succeeded 221, build-failed 114, syntax-invalid 53, redundant 12
Fitness: max 0.833(199), min 0(1), ave 0.795
Test execution time: sum 13129 ms, max 107 ms, min 54 ms
----------------------------------------------------------------

2023-06-25 19:53:11 [main] [INFO]  KGenProgMain - entered the era of 28th generation.
2023-06-25 19:53:41 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 42 minutes 55 seconds
Variants: generated 400, build-succeeded 204, build-failed 112, syntax-invalid 63, redundant 21
Fitness: max 0.833(180), min 0(1), ave 0.77
Test execution time: sum 12469 ms, max 119 ms, min 55 ms
----------------------------------------------------------------

2023-06-25 19:53:41 [main] [INFO]  KGenProgMain - entered the era of 29th generation.
2023-06-25 19:54:10 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 43 minutes 24 seconds
Variants: generated 400, build-succeeded 214, build-failed 113, syntax-invalid 54, redundant 19
Fitness: max 0.833(195), min 0.167(11), ave 0.792
Test execution time: sum 12638 ms, max 112 ms, min 55 ms
----------------------------------------------------------------

2023-06-25 19:54:10 [main] [INFO]  KGenProgMain - entered the era of 30th generation.
2023-06-25 19:54:40 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 43 minutes 54 seconds
Variants: generated 400, build-succeeded 211, build-failed 124, syntax-invalid 46, redundant 19
Fitness: max 0.833(193), min 0.167(8), ave 0.798
Test execution time: sum 12716 ms, max 219 ms, min 54 ms
----------------------------------------------------------------

2023-06-25 19:54:40 [main] [INFO]  KGenProgMain - entered the era of 31st generation.
2023-06-25 19:55:08 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 44 minutes 22 seconds
Variants: generated 400, build-succeeded 209, build-failed 113, syntax-invalid 61, redundant 17
Fitness: max 1(2), min 0.167(12), ave 0.792
Test execution time: sum 12238 ms, max 113 ms, min 54 ms
----------------------------------------------------------------

2023-06-25 19:55:08 [main] [INFO]  KGenProgMain - entered the era of 32nd generation.
2023-06-25 19:55:36 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 44 minutes 50 seconds
Variants: generated 400, build-succeeded 187, build-failed 118, syntax-invalid 70, redundant 25
Fitness: max 1(3), min 0.167(10), ave 0.794
Test execution time: sum 11228 ms, max 190 ms, min 54 ms
----------------------------------------------------------------

2023-06-25 19:55:36 [main] [INFO]  KGenProgMain - entered the era of 33rd generation.
2023-06-25 19:56:05 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 45 minutes 19 seconds
Variants: generated 400, build-succeeded 224, build-failed 99, syntax-invalid 52, redundant 25
Fitness: max 0.833(202), min 0.167(15), ave 0.783
Test execution time: sum 13058 ms, max 110 ms, min 54 ms
----------------------------------------------------------------

2023-06-25 19:56:05 [main] [INFO]  KGenProgMain - entered the era of 34th generation.
2023-06-25 19:56:33 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 45 minutes 47 seconds
Variants: generated 400, build-succeeded 193, build-failed 109, syntax-invalid 76, redundant 22
Fitness: max 0.833(175), min 0.167(7), ave 0.797
Test execution time: sum 11611 ms, max 109 ms, min 54 ms
----------------------------------------------------------------

2023-06-25 19:56:33 [main] [INFO]  KGenProgMain - entered the era of 35th generation.
2023-06-25 19:57:02 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 46 minutes 16 seconds
Variants: generated 400, build-succeeded 217, build-failed 113, syntax-invalid 52, redundant 18
Fitness: max 0.833(196), min 0.167(12), ave 0.789
Test execution time: sum 12686 ms, max 114 ms, min 54 ms
----------------------------------------------------------------

2023-06-25 19:57:02 [main] [INFO]  KGenProgMain - entered the era of 36th generation.
2023-06-25 19:57:33 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 46 minutes 47 seconds
Variants: generated 400, build-succeeded 214, build-failed 120, syntax-invalid 48, redundant 18
Fitness: max 1(1), min 0.167(10), ave 0.798
Test execution time: sum 13044 ms, max 131 ms, min 54 ms
----------------------------------------------------------------

2023-06-25 19:57:33 [main] [INFO]  KGenProgMain - entered the era of 37th generation.
2023-06-25 19:58:04 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 47 minutes 18 seconds
Variants: generated 400, build-succeeded 224, build-failed 113, syntax-invalid 48, redundant 15
Fitness: max 1(1), min 0.167(10), ave 0.795
Test execution time: sum 13309 ms, max 110 ms, min 54 ms
----------------------------------------------------------------

2023-06-25 19:58:04 [main] [INFO]  KGenProgMain - entered the era of 38th generation.
2023-06-25 20:13:36 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 2 minutes 50 seconds
Variants: generated 400, build-succeeded 221, build-failed 113, syntax-invalid 57, redundant 9
Fitness: max 0.833(203), min 0.167(11), ave 0.793
Test execution time: sum 914177 ms, max 900082 ms, min 54 ms
----------------------------------------------------------------

2023-06-25 20:13:36 [main] [INFO]  KGenProgMain - entered the era of 39th generation.
2023-06-25 20:14:05 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 3 minutes 19 seconds
Variants: generated 400, build-succeeded 206, build-failed 120, syntax-invalid 62, redundant 12
Fitness: max 0.833(188), min 0.167(7), ave 0.8
Test execution time: sum 12256 ms, max 200 ms, min 54 ms
----------------------------------------------------------------

2023-06-25 20:14:05 [main] [INFO]  KGenProgMain - entered the era of 40th generation.
2023-06-25 20:14:34 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 3 minutes 48 seconds
Variants: generated 400, build-succeeded 199, build-failed 126, syntax-invalid 59, redundant 16
Fitness: max 1(1), min 0.167(9), ave 0.791
Test execution time: sum 12015 ms, max 193 ms, min 54 ms
----------------------------------------------------------------

2023-06-25 20:14:34 [main] [INFO]  KGenProgMain - entered the era of 41st generation.
2023-06-25 20:15:04 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 4 minutes 18 seconds
Variants: generated 400, build-succeeded 222, build-failed 113, syntax-invalid 48, redundant 17
Fitness: max 1(1), min 0.167(9), ave 0.797
Test execution time: sum 13056 ms, max 103 ms, min 54 ms
----------------------------------------------------------------

2023-06-25 20:15:04 [main] [INFO]  KGenProgMain - entered the era of 42nd generation.
2023-06-25 20:15:35 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 4 minutes 48 seconds
Variants: generated 400, build-succeeded 213, build-failed 111, syntax-invalid 60, redundant 16
Fitness: max 1(1), min 0.167(10), ave 0.79
Test execution time: sum 12788 ms, max 190 ms, min 55 ms
----------------------------------------------------------------

2023-06-25 20:15:35 [main] [INFO]  KGenProgMain - entered the era of 43rd generation.
2023-06-25 20:16:04 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 5 minutes 17 seconds
Variants: generated 400, build-succeeded 203, build-failed 106, syntax-invalid 71, redundant 20
Fitness: max 0.833(181), min 0.167(10), ave 0.787
Test execution time: sum 12019 ms, max 108 ms, min 54 ms
----------------------------------------------------------------

2023-06-25 20:16:04 [main] [INFO]  KGenProgMain - entered the era of 44th generation.
2023-06-25 20:16:34 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 5 minutes 48 seconds
Variants: generated 400, build-succeeded 206, build-failed 106, syntax-invalid 64, redundant 24
Fitness: max 1(1), min 0.167(11), ave 0.789
Test execution time: sum 12973 ms, max 200 ms, min 55 ms
----------------------------------------------------------------

2023-06-25 20:16:34 [main] [INFO]  KGenProgMain - entered the era of 45th generation.
2023-06-25 20:17:04 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 6 minutes 18 seconds
Variants: generated 400, build-succeeded 214, build-failed 100, syntax-invalid 64, redundant 22
Fitness: max 0.833(187), min 0.167(21), ave 0.762
Test execution time: sum 12634 ms, max 114 ms, min 54 ms
----------------------------------------------------------------

2023-06-25 20:17:04 [main] [INFO]  KGenProgMain - entered the era of 46th generation.
2023-06-25 20:17:36 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 6 minutes 50 seconds
Variants: generated 400, build-succeeded 216, build-failed 114, syntax-invalid 50, redundant 20
Fitness: max 0.833(185), min 0.167(17), ave 0.767
Test execution time: sum 13165 ms, max 193 ms, min 54 ms
----------------------------------------------------------------

2023-06-25 20:17:36 [main] [INFO]  KGenProgMain - entered the era of 47th generation.
2023-06-25 20:33:05 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 22 minutes 21 seconds
Variants: generated 400, build-succeeded 203, build-failed 105, syntax-invalid 79, redundant 13
Fitness: max 0.833(173), min 0.167(16), ave 0.762
Test execution time: sum 913135 ms, max 900111 ms, min 55 ms
----------------------------------------------------------------

2023-06-25 20:33:05 [main] [INFO]  KGenProgMain - entered the era of 48th generation.
2023-06-25 21:03:42 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 52 minutes 57 seconds
Variants: generated 400, build-succeeded 221, build-failed 104, syntax-invalid 56, redundant 19
Fitness: max 1(1), min 0.167(15), ave 0.779
Test execution time: sum 1815732 ms, max 900108 ms, min 56 ms
----------------------------------------------------------------

2023-06-25 21:03:42 [main] [INFO]  KGenProgMain - entered the era of 49th generation.
2023-06-25 21:19:13 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 8 minutes 29 seconds
Variants: generated 400, build-succeeded 200, build-failed 123, syntax-invalid 57, redundant 20
Fitness: max 1(1), min 0.167(10), ave 0.787
Test execution time: sum 912536 ms, max 900113 ms, min 56 ms
----------------------------------------------------------------

2023-06-25 21:19:13 [main] [INFO]  KGenProgMain - entered the era of 50th generation.
2023-06-25 21:19:46 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 9 minutes 2 seconds
Variants: generated 400, build-succeeded 201, build-failed 122, syntax-invalid 61, redundant 16
Fitness: max 0.833(182), min 0.167(9), ave 0.793
Test execution time: sum 13148 ms, max 246 ms, min 55 ms
----------------------------------------------------------------

2023-06-25 21:19:46 [main] [INFO]  KGenProgMain - entered the era of 51st generation.
2023-06-25 21:20:19 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 9 minutes 35 seconds
Variants: generated 400, build-succeeded 221, build-failed 95, syntax-invalid 66, redundant 18
Fitness: max 0.833(191), min 0.167(14), ave 0.778
Test execution time: sum 13594 ms, max 220 ms, min 55 ms
----------------------------------------------------------------

2023-06-25 21:20:19 [main] [INFO]  KGenProgMain - entered the era of 52nd generation.
2023-06-25 21:20:53 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 10 minutes 8 seconds
Variants: generated 400, build-succeeded 216, build-failed 101, syntax-invalid 57, redundant 26
Fitness: max 0.833(200), min 0.167(7), ave 0.803
Test execution time: sum 13037 ms, max 116 ms, min 54 ms
----------------------------------------------------------------

2023-06-25 21:20:53 [main] [INFO]  KGenProgMain - entered the era of 53rd generation.
2023-06-25 21:21:24 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 10 minutes 40 seconds
Variants: generated 400, build-succeeded 204, build-failed 108, syntax-invalid 72, redundant 16
Fitness: max 1(1), min 0.167(16), ave 0.772
Test execution time: sum 12226 ms, max 111 ms, min 55 ms
----------------------------------------------------------------

2023-06-25 21:21:24 [main] [INFO]  KGenProgMain - entered the era of 54th generation.
2023-06-25 21:21:58 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 11 minutes 14 seconds
Variants: generated 400, build-succeeded 214, build-failed 115, syntax-invalid 55, redundant 16
Fitness: max 0.833(190), min 0.167(14), ave 0.781
Test execution time: sum 12883 ms, max 122 ms, min 54 ms
----------------------------------------------------------------

2023-06-25 21:21:58 [main] [INFO]  KGenProgMain - entered the era of 55th generation.
2023-06-25 21:52:32 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 41 minutes 48 seconds
Variants: generated 400, build-succeeded 232, build-failed 106, syntax-invalid 51, redundant 11
Fitness: max 1(1), min 0.167(19), ave 0.765
Test execution time: sum 1814249 ms, max 900131 ms, min 54 ms
----------------------------------------------------------------

2023-06-25 21:52:32 [main] [INFO]  KGenProgMain - entered the era of 56th generation.
2023-06-25 21:53:05 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 42 minutes 21 seconds
Variants: generated 400, build-succeeded 217, build-failed 118, syntax-invalid 50, redundant 15
Fitness: max 0.833(199), min 0.167(12), ave 0.79
Test execution time: sum 12982 ms, max 173 ms, min 54 ms
----------------------------------------------------------------

2023-06-25 21:53:05 [main] [INFO]  KGenProgMain - entered the era of 57th generation.
2023-06-25 21:53:39 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 42 minutes 55 seconds
Variants: generated 400, build-succeeded 230, build-failed 113, syntax-invalid 42, redundant 15
Fitness: max 1(1), min 0.167(13), ave 0.789
Test execution time: sum 13626 ms, max 110 ms, min 55 ms
----------------------------------------------------------------

2023-06-25 21:53:39 [main] [INFO]  KGenProgMain - entered the era of 58th generation.
2023-06-25 22:09:13 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 58 minutes 29 seconds
Variants: generated 400, build-succeeded 221, build-failed 107, syntax-invalid 50, redundant 22
Fitness: max 1(3), min 0.167(15), ave 0.779
Test execution time: sum 913476 ms, max 900113 ms, min 55 ms
----------------------------------------------------------------

2023-06-25 22:09:13 [main] [INFO]  KGenProgMain - entered the era of 59th generation.
2023-06-25 22:09:46 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 59 minutes 2 seconds
Variants: generated 400, build-succeeded 208, build-failed 118, syntax-invalid 62, redundant 12
Fitness: max 1(1), min 0.167(17), ave 0.771
Test execution time: sum 12426 ms, max 125 ms, min 55 ms
----------------------------------------------------------------

2023-06-25 22:09:46 [main] [INFO]  KGenProgMain - entered the era of 60th generation.
2023-06-25 22:10:18 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 59 minutes 34 seconds
Variants: generated 400, build-succeeded 198, build-failed 119, syntax-invalid 69, redundant 14
Fitness: max 1(1), min 0.167(6), ave 0.807
Test execution time: sum 11735 ms, max 117 ms, min 54 ms
----------------------------------------------------------------

2023-06-25 22:10:18 [main] [INFO]  KGenProgMain - entered the era of 61st generation.
2023-06-25 22:10:51 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 7 seconds
Variants: generated 400, build-succeeded 225, build-failed 104, syntax-invalid 54, redundant 17
Fitness: max 1(1), min 0.167(11), ave 0.791
Test execution time: sum 13571 ms, max 105 ms, min 54 ms
----------------------------------------------------------------

2023-06-25 22:10:51 [main] [INFO]  KGenProgMain - entered the era of 62nd generation.
2023-06-25 22:11:24 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 40 seconds
Variants: generated 400, build-succeeded 207, build-failed 107, syntax-invalid 61, redundant 25
Fitness: max 0.833(190), min 0.167(10), ave 0.795
Test execution time: sum 12395 ms, max 113 ms, min 55 ms
----------------------------------------------------------------

2023-06-25 22:11:24 [main] [INFO]  KGenProgMain - entered the era of 63rd generation.
2023-06-25 22:11:57 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 1 minutes 13 seconds
Variants: generated 400, build-succeeded 212, build-failed 112, syntax-invalid 62, redundant 14
Fitness: max 0.833(190), min 0.167(12), ave 0.784
Test execution time: sum 12769 ms, max 188 ms, min 55 ms
----------------------------------------------------------------

2023-06-25 22:11:57 [main] [INFO]  KGenProgMain - entered the era of 64th generation.
2023-06-25 22:27:31 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 16 minutes 47 seconds
Variants: generated 400, build-succeeded 220, build-failed 108, syntax-invalid 49, redundant 23
Fitness: max 1(1), min 0.167(10), ave 0.797
Test execution time: sum 913253 ms, max 900120 ms, min 55 ms
----------------------------------------------------------------

2023-06-25 22:27:31 [main] [INFO]  KGenProgMain - entered the era of 65th generation.
2023-06-25 22:28:08 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 17 minutes 23 seconds
Variants: generated 400, build-succeeded 232, build-failed 107, syntax-invalid 37, redundant 24
Fitness: max 1(1), min 0.167(16), ave 0.779
Test execution time: sum 14276 ms, max 131 ms, min 54 ms
----------------------------------------------------------------

2023-06-25 22:28:08 [main] [INFO]  KGenProgMain - entered the era of 66th generation.
2023-06-25 22:28:44 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 18 minutes 0 seconds
Variants: generated 400, build-succeeded 228, build-failed 101, syntax-invalid 49, redundant 22
Fitness: max 0.833(198), min 0(1), ave 0.77
Test execution time: sum 14273 ms, max 182 ms, min 56 ms
----------------------------------------------------------------

2023-06-25 22:28:44 [main] [INFO]  KGenProgMain - entered the era of 67th generation.
2023-06-25 22:29:18 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 18 minutes 34 seconds
Variants: generated 400, build-succeeded 218, build-failed 112, syntax-invalid 54, redundant 16
Fitness: max 1(2), min 0.167(13), ave 0.79
Test execution time: sum 13230 ms, max 109 ms, min 55 ms
----------------------------------------------------------------

2023-06-25 22:29:18 [main] [INFO]  KGenProgMain - entered the era of 68th generation.
2023-06-25 22:29:51 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 19 minutes 7 seconds
Variants: generated 400, build-succeeded 187, build-failed 130, syntax-invalid 61, redundant 22
Fitness: max 0.833(166), min 0.167(14), ave 0.774
Test execution time: sum 11588 ms, max 215 ms, min 55 ms
----------------------------------------------------------------

2023-06-25 22:29:51 [main] [INFO]  KGenProgMain - entered the era of 69th generation.
2023-06-25 22:30:26 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 19 minutes 42 seconds
Variants: generated 400, build-succeeded 222, build-failed 113, syntax-invalid 52, redundant 13
Fitness: max 1(1), min 0.167(18), ave 0.775
Test execution time: sum 13445 ms, max 110 ms, min 55 ms
----------------------------------------------------------------

2023-06-25 22:30:26 [main] [INFO]  KGenProgMain - entered the era of 70th generation.
2023-06-25 22:31:00 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 20 minutes 16 seconds
Variants: generated 400, build-succeeded 218, build-failed 119, syntax-invalid 49, redundant 14
Fitness: max 1(1), min 0.167(16), ave 0.775
Test execution time: sum 13164 ms, max 120 ms, min 55 ms
----------------------------------------------------------------

2023-06-25 22:31:00 [main] [INFO]  KGenProgMain - entered the era of 71st generation.
2023-06-25 22:31:36 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 20 minutes 52 seconds
Variants: generated 400, build-succeeded 229, build-failed 113, syntax-invalid 46, redundant 12
Fitness: max 1(1), min 0.167(19), ave 0.77
Test execution time: sum 13826 ms, max 119 ms, min 55 ms
----------------------------------------------------------------

2023-06-25 22:31:36 [main] [INFO]  KGenProgMain - entered the era of 72nd generation.
2023-06-25 22:32:11 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 21 minutes 27 seconds
Variants: generated 400, build-succeeded 208, build-failed 121, syntax-invalid 57, redundant 14
Fitness: max 1(2), min 0.167(7), ave 0.804
Test execution time: sum 12635 ms, max 116 ms, min 56 ms
----------------------------------------------------------------

2023-06-25 22:32:11 [main] [INFO]  KGenProgMain - entered the era of 73rd generation.
2023-06-25 22:32:46 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 22 minutes 2 seconds
Variants: generated 400, build-succeeded 228, build-failed 107, syntax-invalid 51, redundant 14
Fitness: max 1(2), min 0.167(12), ave 0.793
Test execution time: sum 14091 ms, max 189 ms, min 56 ms
----------------------------------------------------------------

2023-06-25 22:32:46 [main] [INFO]  KGenProgMain - entered the era of 74th generation.
2023-06-25 22:48:21 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 37 minutes 37 seconds
Variants: generated 400, build-succeeded 215, build-failed 110, syntax-invalid 53, redundant 22
Fitness: max 1(2), min 0.167(9), ave 0.797
Test execution time: sum 913252 ms, max 900117 ms, min 55 ms
----------------------------------------------------------------

2023-06-25 22:48:21 [main] [INFO]  KGenProgMain - entered the era of 75th generation.
2023-06-25 22:48:58 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 38 minutes 14 seconds
Variants: generated 400, build-succeeded 222, build-failed 119, syntax-invalid 49, redundant 10
Fitness: max 1(1), min 0.167(10), ave 0.796
Test execution time: sum 13845 ms, max 120 ms, min 55 ms
----------------------------------------------------------------

2023-06-25 22:48:58 [main] [INFO]  KGenProgMain - entered the era of 76th generation.
2023-06-25 22:49:33 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 38 minutes 49 seconds
Variants: generated 400, build-succeeded 211, build-failed 114, syntax-invalid 54, redundant 21
Fitness: max 1(1), min 0.167(13), ave 0.789
Test execution time: sum 13068 ms, max 136 ms, min 56 ms
----------------------------------------------------------------

2023-06-25 22:49:33 [main] [INFO]  KGenProgMain - entered the era of 77th generation.
2023-06-25 22:50:08 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 39 minutes 24 seconds
Variants: generated 400, build-succeeded 218, build-failed 116, syntax-invalid 52, redundant 14
Fitness: max 0.833(190), min 0.167(14), ave 0.778
Test execution time: sum 13193 ms, max 113 ms, min 55 ms
----------------------------------------------------------------

2023-06-25 22:50:08 [main] [INFO]  KGenProgMain - entered the era of 78th generation.
2023-06-25 22:50:44 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 40 minutes 0 seconds
Variants: generated 400, build-succeeded 223, build-failed 121, syntax-invalid 47, redundant 9
Fitness: max 1(1), min 0.167(7), ave 0.809
Test execution time: sum 13788 ms, max 105 ms, min 56 ms
----------------------------------------------------------------

2023-06-25 22:50:44 [main] [INFO]  KGenProgMain - entered the era of 79th generation.
2023-06-25 22:51:22 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 40 minutes 38 seconds
Variants: generated 400, build-succeeded 244, build-failed 96, syntax-invalid 39, redundant 21
Fitness: max 1(1), min 0.167(9), ave 0.795
Test execution time: sum 15206 ms, max 122 ms, min 56 ms
----------------------------------------------------------------

2023-06-25 22:51:22 [main] [INFO]  KGenProgMain - entered the era of 80th generation.
2023-06-25 22:51:58 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 41 minutes 13 seconds
Variants: generated 400, build-succeeded 222, build-failed 110, syntax-invalid 51, redundant 17
Fitness: max 1(2), min 0.167(13), ave 0.788
Test execution time: sum 13689 ms, max 110 ms, min 56 ms
----------------------------------------------------------------

2023-06-25 22:51:58 [main] [INFO]  KGenProgMain - entered the era of 81st generation.
2023-06-25 22:52:34 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 41 minutes 50 seconds
Variants: generated 400, build-succeeded 220, build-failed 104, syntax-invalid 57, redundant 19
Fitness: max 1(1), min 0.167(11), ave 0.788
Test execution time: sum 13702 ms, max 208 ms, min 55 ms
----------------------------------------------------------------

2023-06-25 22:52:34 [main] [INFO]  KGenProgMain - entered the era of 82nd generation.
2023-06-25 22:53:11 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 42 minutes 27 seconds
Variants: generated 400, build-succeeded 220, build-failed 116, syntax-invalid 46, redundant 18
Fitness: max 1(2), min 0.167(6), ave 0.807
Test execution time: sum 13643 ms, max 110 ms, min 55 ms
----------------------------------------------------------------

2023-06-25 22:53:11 [main] [INFO]  KGenProgMain - entered the era of 83rd generation.
2023-06-25 22:53:48 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 43 minutes 4 seconds
Variants: generated 400, build-succeeded 236, build-failed 108, syntax-invalid 40, redundant 16
Fitness: max 1(1), min 0.167(8), ave 0.798
Test execution time: sum 14253 ms, max 117 ms, min 55 ms
----------------------------------------------------------------

2023-06-25 22:53:48 [main] [INFO]  KGenProgMain - entered the era of 84th generation.
2023-06-25 22:54:25 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 43 minutes 41 seconds
Variants: generated 400, build-succeeded 218, build-failed 112, syntax-invalid 51, redundant 19
Fitness: max 0.833(193), min 0.167(15), ave 0.779
Test execution time: sum 13395 ms, max 119 ms, min 55 ms
----------------------------------------------------------------

2023-06-25 22:54:25 [main] [INFO]  KGenProgMain - entered the era of 85th generation.
2023-06-25 23:10:04 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 59 minutes 20 seconds
Variants: generated 400, build-succeeded 226, build-failed 109, syntax-invalid 44, redundant 21
Fitness: max 1(2), min 0.167(15), ave 0.785
Test execution time: sum 914365 ms, max 900175 ms, min 55 ms
----------------------------------------------------------------

2023-06-25 23:10:04 [main] [INFO]  KGenProgMain - entered the era of 86th generation.
2023-06-25 23:10:42 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 59 minutes 58 seconds
Variants: generated 400, build-succeeded 217, build-failed 117, syntax-invalid 52, redundant 14
Fitness: max 0.833(196), min 0.167(8), ave 0.797
Test execution time: sum 13889 ms, max 186 ms, min 57 ms
----------------------------------------------------------------

2023-06-25 23:10:42 [main] [INFO]  KGenProgMain - entered the era of 87th generation.
2023-06-25 23:11:21 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 37 seconds
Variants: generated 400, build-succeeded 232, build-failed 108, syntax-invalid 46, redundant 14
Fitness: max 1(2), min 0.167(8), ave 0.8
Test execution time: sum 14298 ms, max 107 ms, min 55 ms
----------------------------------------------------------------

2023-06-25 23:11:21 [main] [INFO]  KGenProgMain - entered the era of 88th generation.
2023-06-25 23:27:00 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 16 minutes 16 seconds
Variants: generated 400, build-succeeded 215, build-failed 111, syntax-invalid 58, redundant 16
Fitness: max 1(2), min 0.167(13), ave 0.787
Test execution time: sum 913884 ms, max 900134 ms, min 56 ms
----------------------------------------------------------------

2023-06-25 23:27:00 [main] [INFO]  KGenProgMain - entered the era of 89th generation.
2023-06-25 23:27:39 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 16 minutes 55 seconds
Variants: generated 400, build-succeeded 204, build-failed 126, syntax-invalid 52, redundant 18
Fitness: max 1(2), min 0.167(3), ave 0.814
Test execution time: sum 13277 ms, max 181 ms, min 57 ms
----------------------------------------------------------------

2023-06-25 23:27:39 [main] [INFO]  KGenProgMain - entered the era of 90th generation.
2023-06-25 23:28:19 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 17 minutes 35 seconds
Variants: generated 400, build-succeeded 224, build-failed 114, syntax-invalid 49, redundant 13
Fitness: max 1(2), min 0.167(11), ave 0.792
Test execution time: sum 14191 ms, max 109 ms, min 57 ms
----------------------------------------------------------------

2023-06-25 23:28:19 [main] [INFO]  KGenProgMain - entered the era of 91st generation.
2023-06-25 23:28:58 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 18 minutes 14 seconds
Variants: generated 400, build-succeeded 210, build-failed 109, syntax-invalid 64, redundant 17
Fitness: max 1(1), min 0.167(8), ave 0.798
Test execution time: sum 13661 ms, max 121 ms, min 57 ms
----------------------------------------------------------------

2023-06-25 23:28:58 [main] [INFO]  KGenProgMain - entered the era of 92nd generation.
2023-06-25 23:29:36 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 18 minutes 52 seconds
Variants: generated 400, build-succeeded 199, build-failed 124, syntax-invalid 64, redundant 13
Fitness: max 1(1), min 0.167(9), ave 0.789
Test execution time: sum 12807 ms, max 113 ms, min 57 ms
----------------------------------------------------------------

2023-06-25 23:29:36 [main] [INFO]  KGenProgMain - entered the era of 93rd generation.
2023-06-25 23:30:15 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 19 minutes 31 seconds
Variants: generated 400, build-succeeded 212, build-failed 101, syntax-invalid 66, redundant 21
Fitness: max 0.833(193), min 0.167(6), ave 0.804
Test execution time: sum 13634 ms, max 140 ms, min 57 ms
----------------------------------------------------------------

2023-06-25 23:30:15 [main] [INFO]  KGenProgMain - entered the era of 94th generation.
2023-06-25 23:45:55 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 35 minutes 11 seconds
Variants: generated 400, build-succeeded 211, build-failed 119, syntax-invalid 55, redundant 15
Fitness: max 1(2), min 0.167(3), ave 0.818
Test execution time: sum 913757 ms, max 900109 ms, min 58 ms
----------------------------------------------------------------

2023-06-25 23:45:55 [main] [INFO]  KGenProgMain - entered the era of 95th generation.
2023-06-25 23:46:36 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 35 minutes 52 seconds
Variants: generated 400, build-succeeded 212, build-failed 110, syntax-invalid 62, redundant 16
Fitness: max 0.833(199), min 0.167(6), ave 0.807
Test execution time: sum 13843 ms, max 124 ms, min 57 ms
----------------------------------------------------------------

2023-06-25 23:46:36 [main] [INFO]  KGenProgMain - entered the era of 96th generation.
2023-06-25 23:47:15 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 36 minutes 31 seconds
Variants: generated 400, build-succeeded 198, build-failed 127, syntax-invalid 59, redundant 16
Fitness: max 0.833(185), min 0.167(5), ave 0.81
Test execution time: sum 12728 ms, max 132 ms, min 57 ms
----------------------------------------------------------------

2023-06-25 23:47:15 [main] [INFO]  KGenProgMain - entered the era of 97th generation.
2023-06-25 23:47:55 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 37 minutes 11 seconds
Variants: generated 400, build-succeeded 215, build-failed 112, syntax-invalid 56, redundant 17
Fitness: max 1(2), min 0.167(6), ave 0.811
Test execution time: sum 13767 ms, max 113 ms, min 56 ms
----------------------------------------------------------------

2023-06-25 23:47:55 [main] [INFO]  KGenProgMain - entered the era of 98th generation.
2023-06-25 23:48:36 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 37 minutes 52 seconds
Variants: generated 400, build-succeeded 219, build-failed 113, syntax-invalid 50, redundant 18
Fitness: max 0.833(199), min 0.167(8), ave 0.8
Test execution time: sum 13949 ms, max 110 ms, min 57 ms
----------------------------------------------------------------

2023-06-25 23:48:36 [main] [INFO]  KGenProgMain - entered the era of 99th generation.
2023-06-25 23:49:16 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 38 minutes 32 seconds
Variants: generated 400, build-succeeded 212, build-failed 119, syntax-invalid 56, redundant 13
Fitness: max 0.833(197), min 0.167(4), ave 0.811
Test execution time: sum 13657 ms, max 241 ms, min 57 ms
----------------------------------------------------------------

2023-06-25 23:49:16 [main] [INFO]  KGenProgMain - entered the era of 100th generation.
2023-06-25 23:49:58 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 39 minutes 14 seconds
Variants: generated 400, build-succeeded 224, build-failed 114, syntax-invalid 51, redundant 11
Fitness: max 0.833(209), min 0.167(3), ave 0.813
Test execution time: sum 14383 ms, max 122 ms, min 57 ms
----------------------------------------------------------------

2023-06-25 23:49:58 [main] [INFO]  KGenProgMain - entered the era of 101st generation.
2023-06-25 23:50:40 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 39 minutes 56 seconds
Variants: generated 400, build-succeeded 216, build-failed 126, syntax-invalid 44, redundant 14
Fitness: max 0.833(206), min 0.167(3), ave 0.819
Test execution time: sum 13952 ms, max 121 ms, min 56 ms
----------------------------------------------------------------

2023-06-25 23:50:40 [main] [INFO]  KGenProgMain - entered the era of 102nd generation.
2023-06-25 23:51:24 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 40 minutes 40 seconds
Variants: generated 400, build-succeeded 232, build-failed 109, syntax-invalid 40, redundant 19
Fitness: max 1(2), min 0.167(9), ave 0.802
Test execution time: sum 14992 ms, max 119 ms, min 56 ms
----------------------------------------------------------------

2023-06-25 23:51:24 [main] [INFO]  KGenProgMain - entered the era of 103rd generation.
2023-06-25 23:52:06 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 41 minutes 22 seconds
Variants: generated 400, build-succeeded 206, build-failed 137, syntax-invalid 45, redundant 12
Fitness: max 0.833(194), min 0.167(4), ave 0.814
Test execution time: sum 13515 ms, max 116 ms, min 57 ms
----------------------------------------------------------------

2023-06-25 23:52:06 [main] [INFO]  KGenProgMain - entered the era of 104th generation.
2023-06-25 23:52:50 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 42 minutes 6 seconds
Variants: generated 400, build-succeeded 225, build-failed 124, syntax-invalid 38, redundant 13
Fitness: max 0.833(212), min 0.167(6), ave 0.81
Test execution time: sum 14787 ms, max 123 ms, min 58 ms
----------------------------------------------------------------

2023-06-25 23:52:50 [main] [INFO]  KGenProgMain - entered the era of 105th generation.
2023-06-25 23:53:34 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 42 minutes 50 seconds
Variants: generated 400, build-succeeded 226, build-failed 121, syntax-invalid 37, redundant 16
Fitness: max 0.833(208), min 0.167(10), ave 0.798
Test execution time: sum 14856 ms, max 123 ms, min 57 ms
----------------------------------------------------------------

2023-06-25 23:53:34 [main] [INFO]  KGenProgMain - entered the era of 106th generation.
2023-06-25 23:54:18 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 43 minutes 34 seconds
Variants: generated 400, build-succeeded 225, build-failed 122, syntax-invalid 37, redundant 16
Fitness: max 1(3), min 0.167(8), ave 0.803
Test execution time: sum 14772 ms, max 117 ms, min 58 ms
----------------------------------------------------------------

2023-06-25 23:54:18 [main] [INFO]  KGenProgMain - entered the era of 107th generation.
2023-06-25 23:55:02 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 44 minutes 18 seconds
Variants: generated 400, build-succeeded 212, build-failed 125, syntax-invalid 45, redundant 18
Fitness: max 0.833(191), min 0.167(13), ave 0.785
Test execution time: sum 14080 ms, max 138 ms, min 57 ms
----------------------------------------------------------------

2023-06-25 23:55:02 [main] [INFO]  KGenProgMain - entered the era of 108th generation.
2023-06-25 23:55:48 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 45 minutes 4 seconds
Variants: generated 400, build-succeeded 228, build-failed 120, syntax-invalid 44, redundant 8
Fitness: max 0.833(211), min 0.167(7), ave 0.803
Test execution time: sum 15033 ms, max 124 ms, min 59 ms
----------------------------------------------------------------

2023-06-25 23:55:48 [main] [INFO]  KGenProgMain - entered the era of 109th generation.
2023-06-25 23:56:32 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 45 minutes 48 seconds
Variants: generated 400, build-succeeded 214, build-failed 113, syntax-invalid 57, redundant 16
Fitness: max 0.833(201), min 0.167(8), ave 0.804
Test execution time: sum 14336 ms, max 116 ms, min 57 ms
----------------------------------------------------------------

2023-06-25 23:56:32 [main] [INFO]  KGenProgMain - entered the era of 110th generation.
2023-06-25 23:57:19 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 46 minutes 35 seconds
Variants: generated 400, build-succeeded 236, build-failed 113, syntax-invalid 37, redundant 14
Fitness: max 1(1), min 0.167(10), ave 0.792
Test execution time: sum 16117 ms, max 124 ms, min 58 ms
----------------------------------------------------------------

2023-06-25 23:57:19 [main] [INFO]  KGenProgMain - entered the era of 111th generation.
2023-06-26 00:13:06 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 2 minutes 22 seconds
Variants: generated 400, build-succeeded 214, build-failed 121, syntax-invalid 49, redundant 16
Fitness: max 0.833(196), min 0.167(15), ave 0.784
Test execution time: sum 914722 ms, max 900122 ms, min 58 ms
----------------------------------------------------------------

2023-06-26 00:13:06 [main] [INFO]  KGenProgMain - entered the era of 112th generation.
2023-06-26 00:13:51 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 3 minutes 7 seconds
Variants: generated 400, build-succeeded 225, build-failed 112, syntax-invalid 52, redundant 11
Fitness: max 1(1), min 0.167(10), ave 0.801
Test execution time: sum 15037 ms, max 137 ms, min 58 ms
----------------------------------------------------------------

2023-06-26 00:13:51 [main] [INFO]  KGenProgMain - entered the era of 113th generation.
2023-06-26 00:14:38 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 3 minutes 54 seconds
Variants: generated 400, build-succeeded 235, build-failed 100, syntax-invalid 53, redundant 12
Fitness: max 0.833(205), min 0.167(24), ave 0.761
Test execution time: sum 15676 ms, max 129 ms, min 58 ms
----------------------------------------------------------------

2023-06-26 00:14:38 [main] [INFO]  KGenProgMain - entered the era of 114th generation.
2023-06-26 00:15:26 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 4 minutes 42 seconds
Variants: generated 400, build-succeeded 232, build-failed 106, syntax-invalid 50, redundant 12
Fitness: max 0.833(205), min 0.167(16), ave 0.777
Test execution time: sum 15850 ms, max 194 ms, min 57 ms
----------------------------------------------------------------

2023-06-26 00:15:26 [main] [INFO]  KGenProgMain - entered the era of 115th generation.
2023-06-26 00:31:14 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 20 minutes 29 seconds
Variants: generated 400, build-succeeded 228, build-failed 122, syntax-invalid 37, redundant 13
Fitness: max 1(1), min 0.167(17), ave 0.779
Test execution time: sum 915719 ms, max 900123 ms, min 58 ms
----------------------------------------------------------------

2023-06-26 00:31:14 [main] [INFO]  KGenProgMain - entered the era of 116th generation.
2023-06-26 00:31:17 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 20 minutes 33 seconds
Variants: generated 31, build-succeeded 12, build-failed 16, syntax-invalid 2, redundant 1
Fitness: max 1(1), min 0.167(2), ave 0.694
Test execution time: sum 790 ms, max 78 ms, min 58 ms
----------------------------------------------------------------

2023-06-26 00:31:17 [main] [INFO]  KGenProgMain - GA stopped
2023-06-26 00:31:21 [main] [INFO]  PatchLogExporter - patch (v414)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 00:31:21 [main] [INFO]  PatchLogExporter - patch (v414)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 00:31:21 [main] [INFO]  PatchLogExporter - patch (v414)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 00:31:21 [main] [INFO]  PatchLogExporter - patch (v414)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -111,10 +111,7 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
-        if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
-            return result;
-        }
+        if (Math.abs(yMin) <= functionValueAccuracy)
 
         // reduce interval if min and initial bracket the root
         if (yInitial * yMin < 0) {
@@ -124,7 +121,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
2023-06-26 00:31:21 [main] [INFO]  PatchLogExporter - patch (v844)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 00:31:21 [main] [INFO]  PatchLogExporter - patch (v844)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 00:31:21 [main] [INFO]  PatchLogExporter - patch (v844)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 00:31:21 [main] [INFO]  PatchLogExporter - patch (v844)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +123,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,7 +179,8 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
+                setResult(min, 0);
+				setResult(max, 0);
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
2023-06-26 00:31:21 [main] [INFO]  PatchLogExporter - patch (v923)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 00:31:21 [main] [INFO]  PatchLogExporter - patch (v923)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 00:31:21 [main] [INFO]  PatchLogExporter - patch (v923)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -63,7 +63,6 @@
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
-        this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
         this.iterationCount = 0;
     }
2023-06-26 00:31:21 [main] [INFO]  PatchLogExporter - patch (v923)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 00:31:21 [main] [INFO]  PatchLogExporter - patch (v923)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +123,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -182,7 +180,8 @@
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
                 setResult(max, 0);
-                ret = max;
+                int i = 0;
+				ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
2023-06-26 00:31:21 [main] [INFO]  PatchLogExporter - patch (v987)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 00:31:21 [main] [INFO]  PatchLogExporter - patch (v987)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 00:31:21 [main] [INFO]  PatchLogExporter - patch (v987)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 00:31:21 [main] [INFO]  PatchLogExporter - patch (v987)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +123,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,7 +179,7 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
+                int i = 0;
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
2023-06-26 00:31:21 [main] [INFO]  PatchLogExporter - patch (v1346)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 00:31:21 [main] [INFO]  PatchLogExporter - patch (v1346)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 00:31:21 [main] [INFO]  PatchLogExporter - patch (v1346)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -63,7 +63,6 @@
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
-        this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
         this.iterationCount = 0;
     }
2023-06-26 00:31:21 [main] [INFO]  PatchLogExporter - patch (v1346)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 00:31:21 [main] [INFO]  PatchLogExporter - patch (v1346)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +123,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,7 +179,6 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
2023-06-26 00:31:21 [main] [INFO]  PatchLogExporter - patch (v2185)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -77,7 +77,6 @@
         }
         this.f = f;
         this.defaultFunctionValueAccuracy = 1.0e-15;
-        this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
     /**
2023-06-26 00:31:21 [main] [INFO]  PatchLogExporter - patch (v2185)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 00:31:21 [main] [INFO]  PatchLogExporter - patch (v2185)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 00:31:21 [main] [INFO]  PatchLogExporter - patch (v2185)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -63,7 +63,6 @@
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
-        this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
         this.iterationCount = 0;
     }
2023-06-26 00:31:21 [main] [INFO]  PatchLogExporter - patch (v2185)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 00:31:21 [main] [INFO]  PatchLogExporter - patch (v2185)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +123,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
2023-06-26 00:31:21 [main] [INFO]  PatchLogExporter - patch (v2193)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,6 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
2023-06-26 00:31:21 [main] [INFO]  PatchLogExporter - patch (v2193)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 00:31:21 [main] [INFO]  PatchLogExporter - patch (v2193)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 00:31:21 [main] [INFO]  PatchLogExporter - patch (v2193)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 00:31:21 [main] [INFO]  PatchLogExporter - patch (v2193)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +123,7 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
+            setResult(max, 0);
             return result;
         }
 
@@ -245,7 +244,6 @@
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
-                return result;
             }
             double dx = x2 - x1;
             double tolerance =
2023-06-26 00:31:21 [main] [INFO]  PatchLogExporter - patch (v2426)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 00:31:21 [main] [INFO]  PatchLogExporter - patch (v2426)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 00:31:21 [main] [INFO]  PatchLogExporter - patch (v2426)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 00:31:21 [main] [INFO]  PatchLogExporter - patch (v2426)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +123,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,8 +179,8 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
                 ret = max;
+				return max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
2023-06-26 00:31:21 [main] [INFO]  PatchLogExporter - patch (v2921)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -141,6 +141,7 @@
         this.result         = newResult;
         this.iterationCount = iterationCount;
         this.resultComputed = true;
+		double oldx = Double.POSITIVE_INFINITY;
     }
 
     /**
2023-06-26 00:31:21 [main] [INFO]  PatchLogExporter - patch (v2921)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 00:31:21 [main] [INFO]  PatchLogExporter - patch (v2921)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 00:31:21 [main] [INFO]  PatchLogExporter - patch (v2921)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 00:31:21 [main] [INFO]  PatchLogExporter - patch (v2921)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +123,7 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
+            iterationCount += this.iterationCount;
             return result;
         }
 
@@ -181,8 +180,8 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
-                ret = max;
+                int i = 0;
+				ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
2023-06-26 00:31:21 [main] [INFO]  PatchLogExporter - patch (v3376)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,6 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
2023-06-26 00:31:21 [main] [INFO]  PatchLogExporter - patch (v3376)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 00:31:21 [main] [INFO]  PatchLogExporter - patch (v3376)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 00:31:21 [main] [INFO]  PatchLogExporter - patch (v3376)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 00:31:21 [main] [INFO]  PatchLogExporter - patch (v3376)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -111,10 +111,7 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
-        if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
-            return result;
-        }
+        if (Math.abs(yMin) <= functionValueAccuracy)
 
         // reduce interval if min and initial bracket the root
         if (yInitial * yMin < 0) {
@@ -124,7 +121,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,7 +177,6 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -240,7 +235,7 @@
                 y1 = y2;
                 y2 = y0;
             }
-            if (Math.abs(y1) <= functionValueAccuracy) {
+            if (delta / oldDelta > 1) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
2023-06-26 00:31:21 [main] [INFO]  PatchLogExporter - patch (v3699)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,6 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
2023-06-26 00:31:21 [main] [INFO]  PatchLogExporter - patch (v3699)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 00:31:21 [main] [INFO]  PatchLogExporter - patch (v3699)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 00:31:21 [main] [INFO]  PatchLogExporter - patch (v3699)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 00:31:21 [main] [INFO]  PatchLogExporter - patch (v3699)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -111,10 +111,7 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
-        if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
-            return result;
-        }
+        if (Math.abs(yMin) <= functionValueAccuracy)
 
         // reduce interval if min and initial bracket the root
         if (yInitial * yMin < 0) {
@@ -123,10 +120,8 @@
 
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
-        if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
-            return result;
-        }
+        if (Math.abs(yMax) <= functionValueAccuracy)
+			return max;
 
         // reduce interval if initial and max bracket the root
         if (yInitial * yMax < 0) {
@@ -240,11 +235,7 @@
                 y1 = y2;
                 y2 = y0;
             }
-            if (Math.abs(y1) <= functionValueAccuracy) {
-                // Avoid division by very small values. Assume
-                // the iteration has converged (the problem may
-                // still be ill conditioned)
-                setResult(x1, i);
+            if (delta / oldDelta > 1) {
                 return result;
             }
             double dx = x2 - x1;
2023-06-26 00:31:21 [main] [INFO]  PatchLogExporter - patch (v3777)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 00:31:21 [main] [INFO]  PatchLogExporter - patch (v3777)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 00:31:21 [main] [INFO]  PatchLogExporter - patch (v3777)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 00:31:21 [main] [INFO]  PatchLogExporter - patch (v3777)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -99,7 +99,6 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
@@ -112,7 +111,7 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
+            int numIterations = 0;
             return result;
         }
 
@@ -124,7 +123,7 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
+            double fa;
             return result;
         }
 
@@ -181,7 +180,6 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
2023-06-26 00:31:21 [main] [INFO]  PatchLogExporter - patch (v4013)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,6 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
@@ -193,7 +192,8 @@
      * @return true if the arguments form an increasing sequence
      */
     protected boolean isSequence(final double start, final double mid, final double end) {
-        return (start < mid) && (mid < end);
+        functionValueAccuracy = defaultFunctionValueAccuracy;
+		return (start < mid) && (mid < end);
     }
 
     /**
2023-06-26 00:31:21 [main] [INFO]  PatchLogExporter - patch (v4013)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 00:31:21 [main] [INFO]  PatchLogExporter - patch (v4013)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 00:31:21 [main] [INFO]  PatchLogExporter - patch (v4013)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 00:31:21 [main] [INFO]  PatchLogExporter - patch (v4013)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,8 +123,8 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
-            return result;
+            double b = initial;
+			return result;
         }
 
         // reduce interval if initial and max bracket the root
2023-06-26 00:31:21 [main] [INFO]  PatchLogExporter - patch (v4401)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 00:31:21 [main] [INFO]  PatchLogExporter - patch (v4401)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 00:31:21 [main] [INFO]  PatchLogExporter - patch (v4401)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 00:31:21 [main] [INFO]  PatchLogExporter - patch (v4401)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,8 +123,8 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
-            return result;
+            double b = initial;
+			return result;
         }
 
         // reduce interval if initial and max bracket the root
@@ -181,7 +180,6 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
2023-06-26 00:31:21 [main] [INFO]  PatchLogExporter - patch (v4510)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -77,7 +77,6 @@
         }
         this.f = f;
         this.defaultFunctionValueAccuracy = 1.0e-15;
-        this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
     /**
@@ -141,6 +140,7 @@
         this.result         = newResult;
         this.iterationCount = iterationCount;
         this.resultComputed = true;
+		double oldx = Double.POSITIVE_INFINITY;
     }
 
     /**
2023-06-26 00:31:21 [main] [INFO]  PatchLogExporter - patch (v4510)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 00:31:21 [main] [INFO]  PatchLogExporter - patch (v4510)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 00:31:21 [main] [INFO]  PatchLogExporter - patch (v4510)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 00:31:21 [main] [INFO]  PatchLogExporter - patch (v4510)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +123,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,7 +179,6 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
2023-06-26 00:31:21 [main] [INFO]  PatchLogExporter - patch (v4816)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -139,7 +139,6 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
-        this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
 
2023-06-26 00:31:21 [main] [INFO]  PatchLogExporter - patch (v4816)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 00:31:21 [main] [INFO]  PatchLogExporter - patch (v4816)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 00:31:21 [main] [INFO]  PatchLogExporter - patch (v4816)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 00:31:21 [main] [INFO]  PatchLogExporter - patch (v4816)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +123,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -229,7 +227,11 @@
         double delta = x1 - x0;
         double oldDelta = delta;
 
-        int i = 0;
+        {
+			x2 = x0;
+			y2 = y0;
+		}
+		int i = 0;
         while (i < maximalIterationCount) {
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
2023-06-26 00:31:21 [main] [INFO]  PatchLogExporter - patch (v5216)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 00:31:21 [main] [INFO]  PatchLogExporter - patch (v5216)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 00:31:21 [main] [INFO]  PatchLogExporter - patch (v5216)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -65,7 +65,6 @@
         this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
-        this.iterationCount = 0;
     }
 
     /** {@inheritDoc} */
2023-06-26 00:31:21 [main] [INFO]  PatchLogExporter - patch (v5216)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 00:31:21 [main] [INFO]  PatchLogExporter - patch (v5216)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +123,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -182,7 +180,8 @@
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
                 setResult(max, 0);
-                ret = max;
+                double x1 = max;
+				ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
@@ -229,7 +228,11 @@
         double delta = x1 - x0;
         double oldDelta = delta;
 
-        int i = 0;
+        {
+			x2 = x0;
+			y2 = y0;
+		}
+		int i = 0;
         while (i < maximalIterationCount) {
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
2023-06-26 00:31:21 [main] [INFO]  PatchLogExporter - patch (v5303)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 00:31:21 [main] [INFO]  PatchLogExporter - patch (v5303)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 00:31:21 [main] [INFO]  PatchLogExporter - patch (v5303)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 00:31:21 [main] [INFO]  PatchLogExporter - patch (v5303)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,8 +123,8 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
-            return result;
+            double b = initial;
+			return result;
         }
 
         // reduce interval if initial and max bracket the root
@@ -181,7 +180,8 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
+                int i = 0;
+				setResult(max, 0);
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
2023-06-26 00:31:21 [main] [INFO]  PatchLogExporter - patch (v5309)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -139,7 +139,6 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
-        this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
 
2023-06-26 00:31:21 [main] [INFO]  PatchLogExporter - patch (v5309)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 00:31:21 [main] [INFO]  PatchLogExporter - patch (v5309)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 00:31:21 [main] [INFO]  PatchLogExporter - patch (v5309)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 00:31:21 [main] [INFO]  PatchLogExporter - patch (v5309)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,7 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
+            clearResult();
             return result;
         }
 
@@ -124,7 +124,7 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
+            this.iterationCount = 0;
             return result;
         }
 
@@ -229,7 +229,11 @@
         double delta = x1 - x0;
         double oldDelta = delta;
 
-        int i = 0;
+        {
+			x2 = x0;
+			y2 = y0;
+		}
+		int i = 0;
         while (i < maximalIterationCount) {
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
2023-06-26 00:31:21 [main] [INFO]  PatchLogExporter - patch (v6402)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,7 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
+        double x1;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
2023-06-26 00:31:21 [main] [INFO]  PatchLogExporter - patch (v6402)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 00:31:21 [main] [INFO]  PatchLogExporter - patch (v6402)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 00:31:21 [main] [INFO]  PatchLogExporter - patch (v6402)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 00:31:21 [main] [INFO]  PatchLogExporter - patch (v6402)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -99,7 +99,6 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
@@ -112,7 +111,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +122,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -240,7 +237,7 @@
                 y1 = y2;
                 y2 = y0;
             }
-            if (Math.abs(y1) <= functionValueAccuracy) {
+            if (delta / oldDelta > 1) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
2023-06-26 00:31:21 [main] [INFO]  PatchLogExporter - patch (v6502)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,6 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
@@ -139,7 +138,6 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
-        this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
 
2023-06-26 00:31:21 [main] [INFO]  PatchLogExporter - patch (v6502)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 00:31:21 [main] [INFO]  PatchLogExporter - patch (v6502)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 00:31:21 [main] [INFO]  PatchLogExporter - patch (v6502)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 00:31:21 [main] [INFO]  PatchLogExporter - patch (v6502)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +123,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
2023-06-26 00:31:21 [main] [INFO]  PatchLogExporter - patch (v6901)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -139,7 +139,6 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
-        this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
 
@@ -193,7 +192,8 @@
      * @return true if the arguments form an increasing sequence
      */
     protected boolean isSequence(final double start, final double mid, final double end) {
-        return (start < mid) && (mid < end);
+        functionValueAccuracy = defaultFunctionValueAccuracy;
+		return (start < mid) && (mid < end);
     }
 
     /**
2023-06-26 00:31:21 [main] [INFO]  PatchLogExporter - patch (v6901)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 00:31:21 [main] [INFO]  PatchLogExporter - patch (v6901)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 00:31:21 [main] [INFO]  PatchLogExporter - patch (v6901)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 00:31:21 [main] [INFO]  PatchLogExporter - patch (v6901)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -99,7 +99,6 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
@@ -112,7 +111,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +122,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -240,11 +237,7 @@
                 y1 = y2;
                 y2 = y0;
             }
-            if (Math.abs(y1) <= functionValueAccuracy) {
-                // Avoid division by very small values. Assume
-                // the iteration has converged (the problem may
-                // still be ill conditioned)
-                setResult(x1, i);
+            if (delta / oldDelta > 1) {
                 return result;
             }
             double dx = x2 - x1;
2023-06-26 00:31:21 [main] [INFO]  PatchLogExporter - patch (v6968)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -193,7 +193,10 @@
      * @return true if the arguments form an increasing sequence
      */
     protected boolean isSequence(final double start, final double mid, final double end) {
-        return (start < mid) && (mid < end);
+        functionValueAccuracy = defaultFunctionValueAccuracy;
+		functionValueAccuracy = defaultFunctionValueAccuracy;
+		functionValueAccuracy = defaultFunctionValueAccuracy;
+		return (start < mid) && (mid < end);
     }
 
     /**
2023-06-26 00:31:21 [main] [INFO]  PatchLogExporter - patch (v6968)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 00:31:21 [main] [INFO]  PatchLogExporter - patch (v6968)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 00:31:21 [main] [INFO]  PatchLogExporter - patch (v6968)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 00:31:21 [main] [INFO]  PatchLogExporter - patch (v6968)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +123,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
2023-06-26 00:31:21 [main] [INFO]  PatchLogExporter - patch (v7202)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -193,7 +193,9 @@
      * @return true if the arguments form an increasing sequence
      */
     protected boolean isSequence(final double start, final double mid, final double end) {
-        return (start < mid) && (mid < end);
+        functionValueAccuracy = defaultFunctionValueAccuracy;
+		functionValueAccuracy = defaultFunctionValueAccuracy;
+		return (start < mid) && (mid < end);
     }
 
     /**
2023-06-26 00:31:21 [main] [INFO]  PatchLogExporter - patch (v7202)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 00:31:21 [main] [INFO]  PatchLogExporter - patch (v7202)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 00:31:21 [main] [INFO]  PatchLogExporter - patch (v7202)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 00:31:21 [main] [INFO]  PatchLogExporter - patch (v7202)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +123,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -240,7 +238,7 @@
                 y1 = y2;
                 y2 = y0;
             }
-            if (Math.abs(y1) <= functionValueAccuracy) {
+            if (delta / oldDelta > 1) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
2023-06-26 00:31:21 [main] [INFO]  PatchLogExporter - patch (v7738)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,6 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
@@ -139,7 +138,6 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
-        this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
 
@@ -193,7 +191,8 @@
      * @return true if the arguments form an increasing sequence
      */
     protected boolean isSequence(final double start, final double mid, final double end) {
-        return (start < mid) && (mid < end);
+        functionValueAccuracy = defaultFunctionValueAccuracy;
+		return (start < mid) && (mid < end);
     }
 
     /**
2023-06-26 00:31:21 [main] [INFO]  PatchLogExporter - patch (v7738)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 00:31:21 [main] [INFO]  PatchLogExporter - patch (v7738)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 00:31:21 [main] [INFO]  PatchLogExporter - patch (v7738)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 00:31:21 [main] [INFO]  PatchLogExporter - patch (v7738)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +123,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -240,7 +238,7 @@
                 y1 = y2;
                 y2 = y0;
             }
-            if (Math.abs(y1) <= functionValueAccuracy) {
+            if (delta / oldDelta > 1) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
2023-06-26 00:31:21 [main] [INFO]  PatchLogExporter - patch (v7741)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,6 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
@@ -139,7 +138,6 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
-        this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
 
2023-06-26 00:31:21 [main] [INFO]  PatchLogExporter - patch (v7741)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 00:31:21 [main] [INFO]  PatchLogExporter - patch (v7741)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 00:31:21 [main] [INFO]  PatchLogExporter - patch (v7741)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 00:31:21 [main] [INFO]  PatchLogExporter - patch (v7741)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +123,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -182,7 +180,8 @@
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
                 setResult(max, 0);
-                ret = max;
+                int i = 0;
+				ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
@@ -229,7 +228,11 @@
         double delta = x1 - x0;
         double oldDelta = delta;
 
-        int i = 0;
+        {
+			x2 = x0;
+			y2 = y0;
+		}
+		int i = 0;
         while (i < maximalIterationCount) {
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
2023-06-26 00:31:21 [main] [INFO]  PatchLogExporter - patch (v8480)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 00:31:21 [main] [INFO]  PatchLogExporter - patch (v8480)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 00:31:21 [main] [INFO]  PatchLogExporter - patch (v8480)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -65,7 +65,6 @@
         this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
-        this.iterationCount = 0;
     }
 
     /** {@inheritDoc} */
2023-06-26 00:31:21 [main] [INFO]  PatchLogExporter - patch (v8480)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 00:31:21 [main] [INFO]  PatchLogExporter - patch (v8480)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -102,7 +102,8 @@
         clearResult();
         verifySequence(min, initial, max);
 
-        // return the initial guess if it is good enough
+        this.defaultFunctionValueAccuracy = 1.0e-15;
+		// return the initial guess if it is good enough
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
@@ -112,7 +113,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +124,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,7 +180,8 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
+                this.functionValueAccuracy = defaultFunctionValueAccuracy;
+				setResult(max, 0);
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -245,7 +245,8 @@
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
-                return result;
+                x1 = x1 + delta;
+				return result;
             }
             double dx = x2 - x1;
             double tolerance =
2023-06-26 00:31:21 [main] [INFO]  PatchLogExporter - patch (v8526)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,6 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
2023-06-26 00:31:21 [main] [INFO]  PatchLogExporter - patch (v8526)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 00:31:21 [main] [INFO]  PatchLogExporter - patch (v8526)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 00:31:21 [main] [INFO]  PatchLogExporter - patch (v8526)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 00:31:21 [main] [INFO]  PatchLogExporter - patch (v8526)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -102,7 +102,8 @@
         clearResult();
         verifySequence(min, initial, max);
 
-        // return the initial guess if it is good enough
+        this.defaultFunctionValueAccuracy = 1.0e-15;
+		// return the initial guess if it is good enough
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
@@ -112,7 +113,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +124,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,8 +180,8 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
-                ret = max;
+                this.functionValueAccuracy = defaultFunctionValueAccuracy;
+				ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
2023-06-26 00:31:21 [main] [INFO]  PatchLogExporter - patch (v8869)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -139,7 +139,6 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
-        this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
 
@@ -193,7 +192,8 @@
      * @return true if the arguments form an increasing sequence
      */
     protected boolean isSequence(final double start, final double mid, final double end) {
-        return (start < mid) && (mid < end);
+        functionValueAccuracy = defaultFunctionValueAccuracy;
+		return (start < mid) && (mid < end);
     }
 
     /**
2023-06-26 00:31:21 [main] [INFO]  PatchLogExporter - patch (v8869)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 00:31:21 [main] [INFO]  PatchLogExporter - patch (v8869)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 00:31:21 [main] [INFO]  PatchLogExporter - patch (v8869)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 00:31:21 [main] [INFO]  PatchLogExporter - patch (v8869)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,8 +123,8 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
-            return result;
+            double b = initial;
+			return result;
         }
 
         // reduce interval if initial and max bracket the root
@@ -181,7 +180,8 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
+                this.iterationCount = iterationCount;
+				setResult(max, 0);
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -240,7 +240,7 @@
                 y1 = y2;
                 y2 = y0;
             }
-            if (Math.abs(y1) <= functionValueAccuracy) {
+            if (delta / oldDelta > 1) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
2023-06-26 00:31:21 [main] [INFO]  PatchLogExporter - patch (v8870)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,6 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
@@ -193,7 +192,8 @@
      * @return true if the arguments form an increasing sequence
      */
     protected boolean isSequence(final double start, final double mid, final double end) {
-        return (start < mid) && (mid < end);
+        functionValueAccuracy = defaultFunctionValueAccuracy;
+		return (start < mid) && (mid < end);
     }
 
     /**
2023-06-26 00:31:21 [main] [INFO]  PatchLogExporter - patch (v8870)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 00:31:21 [main] [INFO]  PatchLogExporter - patch (v8870)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 00:31:21 [main] [INFO]  PatchLogExporter - patch (v8870)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 00:31:21 [main] [INFO]  PatchLogExporter - patch (v8870)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,8 +123,9 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
-            return result;
+            double b = initial;
+			int i = 0;
+			return result;
         }
 
         // reduce interval if initial and max bracket the root
@@ -240,7 +240,7 @@
                 y1 = y2;
                 y2 = y0;
             }
-            if (Math.abs(y1) <= functionValueAccuracy) {
+            if (delta / oldDelta > 1) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
2023-06-26 00:31:21 [main] [INFO]  PatchLogExporter - patch (v11653)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -193,7 +193,9 @@
      * @return true if the arguments form an increasing sequence
      */
     protected boolean isSequence(final double start, final double mid, final double end) {
-        return (start < mid) && (mid < end);
+        functionValueAccuracy = defaultFunctionValueAccuracy;
+		functionValueAccuracy = defaultFunctionValueAccuracy;
+		return (start < mid) && (mid < end);
     }
 
     /**
2023-06-26 00:31:21 [main] [INFO]  PatchLogExporter - patch (v11653)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 00:31:21 [main] [INFO]  PatchLogExporter - patch (v11653)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 00:31:21 [main] [INFO]  PatchLogExporter - patch (v11653)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -65,7 +65,6 @@
         this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
-        this.iterationCount = 0;
     }
 
     /** {@inheritDoc} */
2023-06-26 00:31:21 [main] [INFO]  PatchLogExporter - patch (v11653)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 00:31:21 [main] [INFO]  PatchLogExporter - patch (v11653)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +123,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,7 +179,6 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -236,7 +233,8 @@
                 x0 = x1;
                 x1 = x2;
                 x2 = x0;
-                y0 = y1;
+                final double x3 = 0.5 * (x1 + x2);
+				y0 = y1;
                 y1 = y2;
                 y2 = y0;
             }
@@ -245,7 +243,6 @@
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
-                return result;
             }
             double dx = x2 - x1;
             double tolerance =
2023-06-26 00:31:21 [main] [INFO]  PatchLogExporter - patch (v11683)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -139,7 +139,6 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
-        this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
 
2023-06-26 00:31:21 [main] [INFO]  PatchLogExporter - patch (v11683)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 00:31:21 [main] [INFO]  PatchLogExporter - patch (v11683)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 00:31:21 [main] [INFO]  PatchLogExporter - patch (v11683)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -65,7 +65,6 @@
         this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
-        this.iterationCount = 0;
     }
 
     /** {@inheritDoc} */
2023-06-26 00:31:21 [main] [INFO]  PatchLogExporter - patch (v11683)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 00:31:21 [main] [INFO]  PatchLogExporter - patch (v11683)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,7 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
+            clearResult();
             return result;
         }
 
@@ -124,7 +124,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,7 +180,6 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -229,7 +227,15 @@
         double delta = x1 - x0;
         double oldDelta = delta;
 
-        int i = 0;
+        {
+			x2 = x0;
+			y2 = y0;
+		}
+		{
+			x2 = x0;
+			y2 = y0;
+		}
+		int i = 0;
         while (i < maximalIterationCount) {
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
2023-06-26 00:31:21 [main] [INFO]  PatchLogExporter - patch (v12018)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -162,7 +162,6 @@
      * Convenience function for implementations.
      */
     protected final void clearResult() {
-        this.iterationCount = 0;
         this.resultComputed = false;
     }
 
2023-06-26 00:31:21 [main] [INFO]  PatchLogExporter - patch (v12018)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 00:31:21 [main] [INFO]  PatchLogExporter - patch (v12018)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 00:31:21 [main] [INFO]  PatchLogExporter - patch (v12018)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 00:31:21 [main] [INFO]  PatchLogExporter - patch (v12018)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -99,10 +99,10 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
         verifySequence(min, initial, max);
 
-        // return the initial guess if it is good enough
+        this.defaultFunctionValueAccuracy = 1.0e-15;
+		// return the initial guess if it is good enough
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
@@ -112,7 +112,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +123,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -165,7 +163,6 @@
         throws MaxIterationsExceededException,
         FunctionEvaluationException {
 
-        clearResult();
         verifyInterval(min, max);
 
         double ret = Double.NaN;
@@ -236,7 +233,8 @@
                 x0 = x1;
                 x1 = x2;
                 x2 = x0;
-                y0 = y1;
+                final double x3 = 0.5 * (x1 + x2);
+				y0 = y1;
                 y1 = y2;
                 y2 = y0;
             }
2023-06-26 00:31:21 [main] [INFO]  PatchLogExporter - patch (v12101)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,6 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
2023-06-26 00:31:21 [main] [INFO]  PatchLogExporter - patch (v12101)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 00:31:21 [main] [INFO]  PatchLogExporter - patch (v12101)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 00:31:21 [main] [INFO]  PatchLogExporter - patch (v12101)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -62,8 +62,6 @@
         this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
-        this.relativeAccuracy = defaultRelativeAccuracy;
-        this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
         this.iterationCount = 0;
     }
2023-06-26 00:31:21 [main] [INFO]  PatchLogExporter - patch (v12101)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 00:31:21 [main] [INFO]  PatchLogExporter - patch (v12101)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +123,7 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
+            double x;
             return result;
         }
 
@@ -181,7 +180,6 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -229,7 +227,11 @@
         double delta = x1 - x0;
         double oldDelta = delta;
 
-        int i = 0;
+        {
+			x2 = x0;
+			y2 = y0;
+		}
+		int i = 0;
         while (i < maximalIterationCount) {
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
2023-06-26 00:31:21 [main] [INFO]  PatchLogExporter - patch (v12196)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,6 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
@@ -193,7 +192,8 @@
      * @return true if the arguments form an increasing sequence
      */
     protected boolean isSequence(final double start, final double mid, final double end) {
-        return (start < mid) && (mid < end);
+        functionValueAccuracy = defaultFunctionValueAccuracy;
+		return (start < mid) && (mid < end);
     }
 
     /**
2023-06-26 00:31:21 [main] [INFO]  PatchLogExporter - patch (v12196)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 00:31:21 [main] [INFO]  PatchLogExporter - patch (v12196)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 00:31:21 [main] [INFO]  PatchLogExporter - patch (v12196)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 00:31:21 [main] [INFO]  PatchLogExporter - patch (v12196)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,8 +123,8 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
-            return result;
+            double b = initial;
+			return result;
         }
 
         // reduce interval if initial and max bracket the root
@@ -229,14 +228,19 @@
         double delta = x1 - x0;
         double oldDelta = delta;
 
-        int i = 0;
+        {
+			x2 = x0;
+			y2 = y0;
+		}
+		int i = 0;
         while (i < maximalIterationCount) {
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
                 x0 = x1;
                 x1 = x2;
                 x2 = x0;
-                y0 = y1;
+                final double x3 = 0.5 * (x1 + x2);
+				y0 = y1;
                 y1 = y2;
                 y2 = y0;
             }
2023-06-26 00:31:22 [main] [INFO]  PatchLogExporter - patch (v13604)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,6 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
@@ -139,7 +138,6 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
-        this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
 
2023-06-26 00:31:22 [main] [INFO]  PatchLogExporter - patch (v13604)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 00:31:22 [main] [INFO]  PatchLogExporter - patch (v13604)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 00:31:22 [main] [INFO]  PatchLogExporter - patch (v13604)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 00:31:22 [main] [INFO]  PatchLogExporter - patch (v13604)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -99,7 +99,6 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
@@ -112,7 +111,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +122,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,7 +178,8 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
+                ret = min;
+				this.functionValueAccuracy = defaultFunctionValueAccuracy;
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -229,7 +227,15 @@
         double delta = x1 - x0;
         double oldDelta = delta;
 
-        int i = 0;
+        {
+			x2 = x0;
+			y2 = y0;
+		}
+		{
+			x2 = x0;
+			y2 = y0;
+		}
+		int i = 0;
         while (i < maximalIterationCount) {
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
2023-06-26 00:31:22 [main] [INFO]  PatchLogExporter - patch (v14138)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,6 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
@@ -139,7 +138,6 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
-        this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
 
2023-06-26 00:31:22 [main] [INFO]  PatchLogExporter - patch (v14138)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 00:31:22 [main] [INFO]  PatchLogExporter - patch (v14138)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 00:31:22 [main] [INFO]  PatchLogExporter - patch (v14138)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 00:31:22 [main] [INFO]  PatchLogExporter - patch (v14138)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,7 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
+            double yMax = f.value(max);
             return result;
         }
 
@@ -124,7 +124,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,7 +180,7 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
+                this.functionValueAccuracy = defaultFunctionValueAccuracy;
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -229,18 +228,23 @@
         double delta = x1 - x0;
         double oldDelta = delta;
 
-        int i = 0;
+        {
+			x2 = x0;
+			y2 = y0;
+		}
+		int i = 0;
         while (i < maximalIterationCount) {
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
                 x0 = x1;
                 x1 = x2;
                 x2 = x0;
-                y0 = y1;
+                final double x3 = 0.5 * (x1 + x2);
+				y0 = y1;
                 y1 = y2;
                 y2 = y0;
             }
-            if (Math.abs(y1) <= functionValueAccuracy) {
+            if (delta / oldDelta > 1) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
2023-06-26 00:31:22 [main] [INFO]  PatchLogExporter - patch (v15301)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,6 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
@@ -193,7 +192,8 @@
      * @return true if the arguments form an increasing sequence
      */
     protected boolean isSequence(final double start, final double mid, final double end) {
-        return (start < mid) && (mid < end);
+        functionValueAccuracy = defaultFunctionValueAccuracy;
+		return (start < mid) && (mid < end);
     }
 
     /**
2023-06-26 00:31:22 [main] [INFO]  PatchLogExporter - patch (v15301)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 00:31:22 [main] [INFO]  PatchLogExporter - patch (v15301)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 00:31:22 [main] [INFO]  PatchLogExporter - patch (v15301)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 00:31:22 [main] [INFO]  PatchLogExporter - patch (v15301)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,7 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
+            clearResult();
             return result;
         }
 
@@ -124,7 +124,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,7 +180,6 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -229,7 +227,11 @@
         double delta = x1 - x0;
         double oldDelta = delta;
 
-        int i = 0;
+        {
+			x2 = x0;
+			y2 = y0;
+		}
+		int i = 0;
         while (i < maximalIterationCount) {
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
2023-06-26 00:31:22 [main] [INFO]  PatchLogExporter - patch (v15750)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -139,7 +139,6 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
-        this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
 
@@ -162,7 +161,6 @@
      * Convenience function for implementations.
      */
     protected final void clearResult() {
-        this.iterationCount = 0;
         this.resultComputed = false;
     }
 
@@ -193,7 +191,8 @@
      * @return true if the arguments form an increasing sequence
      */
     protected boolean isSequence(final double start, final double mid, final double end) {
-        return (start < mid) && (mid < end);
+        functionValueAccuracy = defaultFunctionValueAccuracy;
+		return (start < mid) && (mid < end);
     }
 
     /**
2023-06-26 00:31:22 [main] [INFO]  PatchLogExporter - patch (v15750)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 00:31:22 [main] [INFO]  PatchLogExporter - patch (v15750)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 00:31:22 [main] [INFO]  PatchLogExporter - patch (v15750)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 00:31:22 [main] [INFO]  PatchLogExporter - patch (v15750)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,7 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
+            verifySequence(min, initial, max);
             return result;
         }
 
@@ -124,7 +124,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -229,7 +228,11 @@
         double delta = x1 - x0;
         double oldDelta = delta;
 
-        int i = 0;
+        {
+			x2 = x0;
+			y2 = y0;
+		}
+		int i = 0;
         while (i < maximalIterationCount) {
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
2023-06-26 00:31:22 [main] [INFO]  PatchLogExporter - patch (v16163)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -139,8 +139,8 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
-        this.iterationCount = iterationCount;
         this.resultComputed = true;
+		double oldx = Double.POSITIVE_INFINITY;
     }
 
     /**
@@ -193,7 +193,8 @@
      * @return true if the arguments form an increasing sequence
      */
     protected boolean isSequence(final double start, final double mid, final double end) {
-        return (start < mid) && (mid < end);
+        functionValueAccuracy = defaultFunctionValueAccuracy;
+		return (start < mid) && (mid < end);
     }
 
     /**
2023-06-26 00:31:22 [main] [INFO]  PatchLogExporter - patch (v16163)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 00:31:22 [main] [INFO]  PatchLogExporter - patch (v16163)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 00:31:22 [main] [INFO]  PatchLogExporter - patch (v16163)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -62,7 +62,6 @@
         this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
-        this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
         this.iterationCount = 0;
2023-06-26 00:31:22 [main] [INFO]  PatchLogExporter - patch (v16163)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 00:31:22 [main] [INFO]  PatchLogExporter - patch (v16163)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,7 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
+            double p;
             return result;
         }
 
@@ -124,7 +124,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,7 +180,6 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -229,7 +227,11 @@
         double delta = x1 - x0;
         double oldDelta = delta;
 
-        int i = 0;
+        {
+			x2 = x0;
+			y2 = y0;
+		}
+		int i = 0;
         while (i < maximalIterationCount) {
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
@@ -245,7 +247,6 @@
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
-                return result;
             }
             double dx = x2 - x1;
             double tolerance =
2023-06-26 00:31:22 [main] [INFO]  PatchLogExporter - patch (v16953)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,6 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
@@ -139,7 +138,6 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
-        this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
 
@@ -193,7 +191,8 @@
      * @return true if the arguments form an increasing sequence
      */
     protected boolean isSequence(final double start, final double mid, final double end) {
-        return (start < mid) && (mid < end);
+        functionValueAccuracy = defaultFunctionValueAccuracy;
+		return (start < mid) && (mid < end);
     }
 
     /**
2023-06-26 00:31:22 [main] [INFO]  PatchLogExporter - patch (v16953)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 00:31:22 [main] [INFO]  PatchLogExporter - patch (v16953)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 00:31:22 [main] [INFO]  PatchLogExporter - patch (v16953)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 00:31:22 [main] [INFO]  PatchLogExporter - patch (v16953)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +123,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,7 +179,7 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
+                this.functionValueAccuracy = defaultFunctionValueAccuracy;
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -229,7 +227,11 @@
         double delta = x1 - x0;
         double oldDelta = delta;
 
-        int i = 0;
+        {
+			x2 = x0;
+			y2 = y0;
+		}
+		int i = 0;
         while (i < maximalIterationCount) {
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
@@ -245,7 +247,6 @@
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
-                return result;
             }
             double dx = x2 - x1;
             double tolerance =
@@ -261,6 +262,7 @@
                 oldDelta = delta;
             } else {
                 double r3 = y1 / y0;
+				++i;
                 double p;
                 double p1;
                 // the equality test (x0 == x2) is intentional,
2023-06-26 00:31:22 [main] [INFO]  PatchLogExporter - patch (v18418)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -162,7 +162,6 @@
      * Convenience function for implementations.
      */
     protected final void clearResult() {
-        this.iterationCount = 0;
         this.resultComputed = false;
     }
 
@@ -193,7 +192,8 @@
      * @return true if the arguments form an increasing sequence
      */
     protected boolean isSequence(final double start, final double mid, final double end) {
-        return (start < mid) && (mid < end);
+        functionValueAccuracy = defaultFunctionValueAccuracy;
+		return (start < mid) && (mid < end);
     }
 
     /**
2023-06-26 00:31:22 [main] [INFO]  PatchLogExporter - patch (v18418)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 00:31:22 [main] [INFO]  PatchLogExporter - patch (v18418)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 00:31:22 [main] [INFO]  PatchLogExporter - patch (v18418)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 00:31:22 [main] [INFO]  PatchLogExporter - patch (v18418)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,8 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
+            verifySequence(min, initial, max);
+			clearResult();
             return result;
         }
 
@@ -124,7 +125,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -245,6 +245,7 @@
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
+				clearResult();
                 return result;
             }
             double dx = x2 - x1;
2023-06-26 00:31:22 [main] [INFO]  PatchLogExporter - patch (v18943)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,6 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
@@ -139,7 +138,6 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
-        this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
 
@@ -154,7 +152,6 @@
                                    final int iterationCount) {
         this.result         = x;
         this.functionValue  = fx;
-        this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
 
2023-06-26 00:31:22 [main] [INFO]  PatchLogExporter - patch (v18943)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 00:31:22 [main] [INFO]  PatchLogExporter - patch (v18943)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 00:31:22 [main] [INFO]  PatchLogExporter - patch (v18943)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -65,7 +65,6 @@
         this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
-        this.iterationCount = 0;
     }
 
     /** {@inheritDoc} */
2023-06-26 00:31:22 [main] [INFO]  PatchLogExporter - patch (v18943)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 00:31:22 [main] [INFO]  PatchLogExporter - patch (v18943)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +123,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -229,7 +227,15 @@
         double delta = x1 - x0;
         double oldDelta = delta;
 
-        int i = 0;
+        {
+			x2 = x0;
+			y2 = y0;
+		}
+		{
+			x2 = x0;
+			y2 = y0;
+		}
+		int i = 0;
         while (i < maximalIterationCount) {
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
@@ -245,7 +251,6 @@
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
-                return result;
             }
             double dx = x2 - x1;
             double tolerance =
2023-06-26 00:31:22 [main] [INFO]  PatchLogExporter - patch (v20568)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,8 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
+        double x;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
@@ -139,7 +140,6 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
-        this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
 
@@ -154,7 +154,6 @@
                                    final int iterationCount) {
         this.result         = x;
         this.functionValue  = fx;
-        this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
 
2023-06-26 00:31:22 [main] [INFO]  PatchLogExporter - patch (v20568)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 00:31:22 [main] [INFO]  PatchLogExporter - patch (v20568)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 00:31:22 [main] [INFO]  PatchLogExporter - patch (v20568)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 00:31:22 [main] [INFO]  PatchLogExporter - patch (v20568)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -106,13 +106,13 @@
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
-            return result;
+            double fb;
+			return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +124,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -229,7 +228,15 @@
         double delta = x1 - x0;
         double oldDelta = delta;
 
-        int i = 0;
+        {
+			x2 = x0;
+			y2 = y0;
+		}
+		{
+			x2 = x0;
+			y2 = y0;
+		}
+		int i = 0;
         while (i < maximalIterationCount) {
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
@@ -245,6 +252,7 @@
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
+				clearResult();
                 return result;
             }
             double dx = x2 - x1;
2023-06-26 00:31:22 [main] [INFO]  PatchLogExporter - patch (v21240)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,6 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
@@ -139,7 +138,6 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
-        this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
 
@@ -193,7 +191,9 @@
      * @return true if the arguments form an increasing sequence
      */
     protected boolean isSequence(final double start, final double mid, final double end) {
-        return (start < mid) && (mid < end);
+        functionValueAccuracy = defaultFunctionValueAccuracy;
+		functionValueAccuracy = defaultFunctionValueAccuracy;
+		return (start < mid) && (mid < end);
     }
 
     /**
2023-06-26 00:31:22 [main] [INFO]  PatchLogExporter - patch (v21240)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 00:31:22 [main] [INFO]  PatchLogExporter - patch (v21240)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 00:31:22 [main] [INFO]  PatchLogExporter - patch (v21240)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 00:31:22 [main] [INFO]  PatchLogExporter - patch (v21240)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -99,7 +99,6 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
@@ -111,10 +110,7 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
-        if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
-            return result;
-        }
+        if (Math.abs(yMin) <= functionValueAccuracy)
 
         // reduce interval if min and initial bracket the root
         if (yInitial * yMin < 0) {
@@ -124,7 +120,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,7 +176,6 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -229,7 +223,15 @@
         double delta = x1 - x0;
         double oldDelta = delta;
 
-        int i = 0;
+        {
+			x2 = x0;
+			y2 = y0;
+		}
+		{
+			x2 = x0;
+			y2 = y0;
+		}
+		int i = 0;
         while (i < maximalIterationCount) {
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
2023-06-26 00:31:22 [main] [INFO]  PatchLogExporter - patch (v22336)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -141,6 +141,7 @@
         this.result         = newResult;
         this.iterationCount = iterationCount;
         this.resultComputed = true;
+		double oldx = Double.POSITIVE_INFINITY;
     }
 
     /**
@@ -193,7 +194,9 @@
      * @return true if the arguments form an increasing sequence
      */
     protected boolean isSequence(final double start, final double mid, final double end) {
-        return (start < mid) && (mid < end);
+        functionValueAccuracy = defaultFunctionValueAccuracy;
+		functionValueAccuracy = defaultFunctionValueAccuracy;
+		return (start < mid) && (mid < end);
     }
 
     /**
2023-06-26 00:31:22 [main] [INFO]  PatchLogExporter - patch (v22336)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 00:31:22 [main] [INFO]  PatchLogExporter - patch (v22336)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 00:31:22 [main] [INFO]  PatchLogExporter - patch (v22336)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -80,7 +80,7 @@
 
     /** {@inheritDoc} */
     public double getAbsoluteAccuracy() {
-        return absoluteAccuracy;
+        return maximalIterationCount;
     }
 
     /** {@inheritDoc} */
2023-06-26 00:31:22 [main] [INFO]  PatchLogExporter - patch (v22336)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 00:31:22 [main] [INFO]  PatchLogExporter - patch (v22336)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -99,7 +99,6 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
@@ -181,7 +180,8 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
+                double oldx = Double.POSITIVE_INFINITY;
+				setResult(max, 0);
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -229,7 +229,15 @@
         double delta = x1 - x0;
         double oldDelta = delta;
 
-        int i = 0;
+        {
+			x2 = x0;
+			y2 = y0;
+		}
+		{
+			x2 = x0;
+			y2 = y0;
+		}
+		int i = 0;
         while (i < maximalIterationCount) {
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
2023-06-26 00:31:22 [main] [INFO]  PatchLogExporter - patch (v22538)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -77,7 +77,6 @@
         }
         this.f = f;
         this.defaultFunctionValueAccuracy = 1.0e-15;
-        this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
     /**
@@ -139,7 +138,6 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
-        this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
 
@@ -193,7 +191,8 @@
      * @return true if the arguments form an increasing sequence
      */
     protected boolean isSequence(final double start, final double mid, final double end) {
-        return (start < mid) && (mid < end);
+        functionValueAccuracy = defaultFunctionValueAccuracy;
+		return (start < mid) && (mid < end);
     }
 
     /**
2023-06-26 00:31:22 [main] [INFO]  PatchLogExporter - patch (v22538)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 00:31:22 [main] [INFO]  PatchLogExporter - patch (v22538)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 00:31:22 [main] [INFO]  PatchLogExporter - patch (v22538)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -60,7 +60,6 @@
     protected ConvergingAlgorithmImpl(final int defaultMaximalIterationCount,
                                       final double defaultAbsoluteAccuracy) {
         this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
-        this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
2023-06-26 00:31:22 [main] [INFO]  PatchLogExporter - patch (v22538)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 00:31:22 [main] [INFO]  PatchLogExporter - patch (v22538)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,7 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
+            verifySequence(min, initial, max);
             return result;
         }
 
@@ -124,7 +124,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,7 +180,6 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -229,7 +227,11 @@
         double delta = x1 - x0;
         double oldDelta = delta;
 
-        int i = 0;
+        {
+			x2 = x0;
+			y2 = y0;
+		}
+		int i = 0;
         while (i < maximalIterationCount) {
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
2023-06-26 00:31:22 [main] [INFO]  PatchLogExporter - patch (v22755)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -77,7 +77,6 @@
         }
         this.f = f;
         this.defaultFunctionValueAccuracy = 1.0e-15;
-        this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
     /**
@@ -162,7 +161,6 @@
      * Convenience function for implementations.
      */
     protected final void clearResult() {
-        this.iterationCount = 0;
         this.resultComputed = false;
     }
 
@@ -193,7 +191,9 @@
      * @return true if the arguments form an increasing sequence
      */
     protected boolean isSequence(final double start, final double mid, final double end) {
-        return (start < mid) && (mid < end);
+        functionValueAccuracy = defaultFunctionValueAccuracy;
+		functionValueAccuracy = defaultFunctionValueAccuracy;
+		return (start < mid) && (mid < end);
     }
 
     /**
2023-06-26 00:31:22 [main] [INFO]  PatchLogExporter - patch (v22755)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 00:31:22 [main] [INFO]  PatchLogExporter - patch (v22755)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 00:31:22 [main] [INFO]  PatchLogExporter - patch (v22755)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -80,7 +80,7 @@
 
     /** {@inheritDoc} */
     public double getAbsoluteAccuracy() {
-        return absoluteAccuracy;
+        return maximalIterationCount;
     }
 
     /** {@inheritDoc} */
2023-06-26 00:31:22 [main] [INFO]  PatchLogExporter - patch (v22755)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 00:31:22 [main] [INFO]  PatchLogExporter - patch (v22755)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -229,7 +229,19 @@
         double delta = x1 - x0;
         double oldDelta = delta;
 
-        int i = 0;
+        {
+			x2 = x0;
+			y2 = y0;
+		}
+		{
+			x2 = x0;
+			y2 = y0;
+		}
+		{
+			x2 = x0;
+			y2 = y0;
+		}
+		int i = 0;
         while (i < maximalIterationCount) {
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
@@ -245,6 +257,7 @@
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
+				clearResult();
                 return result;
             }
             double dx = x2 - x1;
2023-06-26 00:31:22 [main] [INFO]  PatchLogExporter - patch (v22789)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -77,7 +77,6 @@
         }
         this.f = f;
         this.defaultFunctionValueAccuracy = 1.0e-15;
-        this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
     /**
@@ -193,7 +192,8 @@
      * @return true if the arguments form an increasing sequence
      */
     protected boolean isSequence(final double start, final double mid, final double end) {
-        return (start < mid) && (mid < end);
+        functionValueAccuracy = defaultFunctionValueAccuracy;
+		return (start < mid) && (mid < end);
     }
 
     /**
2023-06-26 00:31:22 [main] [INFO]  PatchLogExporter - patch (v22789)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 00:31:22 [main] [INFO]  PatchLogExporter - patch (v22789)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 00:31:22 [main] [INFO]  PatchLogExporter - patch (v22789)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -80,7 +80,7 @@
 
     /** {@inheritDoc} */
     public double getAbsoluteAccuracy() {
-        return absoluteAccuracy;
+        return maximalIterationCount;
     }
 
     /** {@inheritDoc} */
2023-06-26 00:31:22 [main] [INFO]  PatchLogExporter - patch (v22789)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 00:31:22 [main] [INFO]  PatchLogExporter - patch (v22789)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -182,7 +182,7 @@
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
                 setResult(max, 0);
-                ret = max;
+                return min;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
@@ -229,7 +229,23 @@
         double delta = x1 - x0;
         double oldDelta = delta;
 
-        int i = 0;
+        {
+			x2 = x0;
+			y2 = y0;
+		}
+		{
+			x2 = x0;
+			y2 = y0;
+		}
+		{
+			x2 = x0;
+			y2 = y0;
+		}
+		{
+			x2 = x0;
+			y2 = y0;
+		}
+		int i = 0;
         while (i < maximalIterationCount) {
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
2023-06-26 00:31:22 [main] [INFO]  PatchLogExporter - patch (v22946)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,6 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
@@ -193,7 +192,8 @@
      * @return true if the arguments form an increasing sequence
      */
     protected boolean isSequence(final double start, final double mid, final double end) {
-        return (start < mid) && (mid < end);
+        functionValueAccuracy = defaultFunctionValueAccuracy;
+		return (start < mid) && (mid < end);
     }
 
     /**
2023-06-26 00:31:22 [main] [INFO]  PatchLogExporter - patch (v22946)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 00:31:22 [main] [INFO]  PatchLogExporter - patch (v22946)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 00:31:22 [main] [INFO]  PatchLogExporter - patch (v22946)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -60,9 +60,7 @@
     protected ConvergingAlgorithmImpl(final int defaultMaximalIterationCount,
                                       final double defaultAbsoluteAccuracy) {
         this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
-        this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
-        this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
         this.iterationCount = 0;
2023-06-26 00:31:22 [main] [INFO]  PatchLogExporter - patch (v22946)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 00:31:22 [main] [INFO]  PatchLogExporter - patch (v22946)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +123,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -236,7 +234,8 @@
                 x0 = x1;
                 x1 = x2;
                 x2 = x0;
-                y0 = y1;
+                final double x3 = 0.5 * (x1 + x2);
+				y0 = y1;
                 y1 = y2;
                 y2 = y0;
             }
@@ -245,6 +244,7 @@
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
+				clearResult();
                 return result;
             }
             double dx = x2 - x1;
@@ -312,7 +312,6 @@
                 delta = x1 - x0;
                 oldDelta = delta;
             }
-            i++;
         }
         throw new MaxIterationsExceededException(maximalIterationCount);
     }
2023-06-26 00:31:22 [main] [INFO]  PatchLogExporter - patch (v23232)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -77,7 +77,6 @@
         }
         this.f = f;
         this.defaultFunctionValueAccuracy = 1.0e-15;
-        this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
     /**
@@ -139,7 +138,6 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
-        this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
 
@@ -193,7 +191,8 @@
      * @return true if the arguments form an increasing sequence
      */
     protected boolean isSequence(final double start, final double mid, final double end) {
-        return (start < mid) && (mid < end);
+        functionValueAccuracy = defaultFunctionValueAccuracy;
+		return (start < mid) && (mid < end);
     }
 
     /**
2023-06-26 00:31:22 [main] [INFO]  PatchLogExporter - patch (v23232)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 00:31:22 [main] [INFO]  PatchLogExporter - patch (v23232)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 00:31:22 [main] [INFO]  PatchLogExporter - patch (v23232)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 00:31:22 [main] [INFO]  PatchLogExporter - patch (v23232)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,8 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
+            verifySequence(min, initial, max);
+			clearResult();
             return result;
         }
 
@@ -124,7 +125,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -229,7 +229,15 @@
         double delta = x1 - x0;
         double oldDelta = delta;
 
-        int i = 0;
+        {
+			x2 = x0;
+			y2 = y0;
+		}
+		{
+			x2 = x0;
+			y2 = y0;
+		}
+		int i = 0;
         while (i < maximalIterationCount) {
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
@@ -245,6 +253,7 @@
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
+				clearResult();
                 return result;
             }
             double dx = x2 - x1;
2023-06-26 00:31:22 [main] [INFO]  PatchLogExporter - patch (v23772)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,6 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
@@ -139,7 +138,6 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
-        this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
 
@@ -193,7 +191,10 @@
      * @return true if the arguments form an increasing sequence
      */
     protected boolean isSequence(final double start, final double mid, final double end) {
-        return (start < mid) && (mid < end);
+        functionValueAccuracy = defaultFunctionValueAccuracy;
+		functionValueAccuracy = defaultFunctionValueAccuracy;
+		functionValueAccuracy = defaultFunctionValueAccuracy;
+		return (start < mid) && (mid < end);
     }
 
     /**
2023-06-26 00:31:22 [main] [INFO]  PatchLogExporter - patch (v23772)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 00:31:22 [main] [INFO]  PatchLogExporter - patch (v23772)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 00:31:22 [main] [INFO]  PatchLogExporter - patch (v23772)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 00:31:22 [main] [INFO]  PatchLogExporter - patch (v23772)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -102,7 +102,9 @@
         clearResult();
         verifySequence(min, initial, max);
 
-        // return the initial guess if it is good enough
+        this.defaultFunctionValueAccuracy = 1.0e-15;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
+		// return the initial guess if it is good enough
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
@@ -112,7 +114,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +125,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,7 +181,6 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
2023-06-26 00:31:22 [main] [INFO]  PatchLogExporter - patch (v24905)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,6 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
@@ -139,7 +138,6 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
-        this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
 
@@ -154,7 +152,6 @@
                                    final int iterationCount) {
         this.result         = x;
         this.functionValue  = fx;
-        this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
 
@@ -193,7 +190,9 @@
      * @return true if the arguments form an increasing sequence
      */
     protected boolean isSequence(final double start, final double mid, final double end) {
-        return (start < mid) && (mid < end);
+        functionValueAccuracy = defaultFunctionValueAccuracy;
+		functionValueAccuracy = defaultFunctionValueAccuracy;
+		return (start < mid) && (mid < end);
     }
 
     /**
2023-06-26 00:31:22 [main] [INFO]  PatchLogExporter - patch (v24905)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 00:31:22 [main] [INFO]  PatchLogExporter - patch (v24905)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 00:31:22 [main] [INFO]  PatchLogExporter - patch (v24905)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 00:31:22 [main] [INFO]  PatchLogExporter - patch (v24905)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -99,7 +99,6 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
@@ -112,7 +111,7 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
+            verifySequence(min, initial, max);
             return result;
         }
 
@@ -124,7 +123,7 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
+            this.f = f;
             return result;
         }
 
@@ -229,7 +228,11 @@
         double delta = x1 - x0;
         double oldDelta = delta;
 
-        int i = 0;
+        {
+			x2 = x0;
+			y2 = y0;
+		}
+		int i = 0;
         while (i < maximalIterationCount) {
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
2023-06-26 00:31:22 [main] [INFO]  PatchLogExporter - patch (v25335)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -139,7 +139,6 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
-        this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
 
@@ -154,7 +153,6 @@
                                    final int iterationCount) {
         this.result         = x;
         this.functionValue  = fx;
-        this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
 
@@ -162,7 +160,6 @@
      * Convenience function for implementations.
      */
     protected final void clearResult() {
-        this.iterationCount = 0;
         this.resultComputed = false;
     }
 
2023-06-26 00:31:22 [main] [INFO]  PatchLogExporter - patch (v25335)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 00:31:22 [main] [INFO]  PatchLogExporter - patch (v25335)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 00:31:22 [main] [INFO]  PatchLogExporter - patch (v25335)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -62,7 +62,6 @@
         this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
-        this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
         this.iterationCount = 0;
2023-06-26 00:31:22 [main] [INFO]  PatchLogExporter - patch (v25335)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 00:31:22 [main] [INFO]  PatchLogExporter - patch (v25335)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -102,7 +102,8 @@
         clearResult();
         verifySequence(min, initial, max);
 
-        // return the initial guess if it is good enough
+        this.defaultFunctionValueAccuracy = 1.0e-15;
+		// return the initial guess if it is good enough
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
@@ -111,10 +112,7 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
-        if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
-            return result;
-        }
+        if (Math.abs(yMin) <= functionValueAccuracy)
 
         // reduce interval if min and initial bracket the root
         if (yInitial * yMin < 0) {
@@ -124,7 +122,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,7 +178,6 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -229,7 +225,15 @@
         double delta = x1 - x0;
         double oldDelta = delta;
 
-        int i = 0;
+        {
+			x2 = x0;
+			y2 = y0;
+		}
+		{
+			x2 = x0;
+			y2 = y0;
+		}
+		int i = 0;
         while (i < maximalIterationCount) {
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
2023-06-26 00:31:22 [main] [INFO]  PatchLogExporter - patch (v26065)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -193,7 +193,10 @@
      * @return true if the arguments form an increasing sequence
      */
     protected boolean isSequence(final double start, final double mid, final double end) {
-        return (start < mid) && (mid < end);
+        functionValueAccuracy = defaultFunctionValueAccuracy;
+		functionValueAccuracy = defaultFunctionValueAccuracy;
+		functionValueAccuracy = defaultFunctionValueAccuracy;
+		return (start < mid) && (mid < end);
     }
 
     /**
2023-06-26 00:31:22 [main] [INFO]  PatchLogExporter - patch (v26065)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 00:31:22 [main] [INFO]  PatchLogExporter - patch (v26065)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 00:31:22 [main] [INFO]  PatchLogExporter - patch (v26065)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 00:31:22 [main] [INFO]  PatchLogExporter - patch (v26065)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -111,8 +111,10 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
-        if (Math.abs(yMin) <= functionValueAccuracy) {
+        if (Math.abs(max - min) <= absoluteAccuracy) {
             setResult(yMin, 0);
+			clearResult();
+			clearResult();
             return result;
         }
 
@@ -124,7 +126,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -229,7 +230,15 @@
         double delta = x1 - x0;
         double oldDelta = delta;
 
-        int i = 0;
+        {
+			x2 = x0;
+			y2 = y0;
+		}
+		{
+			x2 = x0;
+			y2 = y0;
+		}
+		int i = 0;
         while (i < maximalIterationCount) {
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
2023-06-26 00:31:22 [main] [INFO]  PatchLogExporter - patch (v26086)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -128,7 +128,6 @@
 
     /** {@inheritDoc} */
     public void resetFunctionValueAccuracy() {
-        functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
     /**
@@ -139,7 +138,6 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
-        this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
 
@@ -163,7 +161,6 @@
      */
     protected final void clearResult() {
         this.iterationCount = 0;
-        this.resultComputed = false;
     }
 
     /**
@@ -193,7 +190,9 @@
      * @return true if the arguments form an increasing sequence
      */
     protected boolean isSequence(final double start, final double mid, final double end) {
-        return (start < mid) && (mid < end);
+        functionValueAccuracy = defaultFunctionValueAccuracy;
+		functionValueAccuracy = defaultFunctionValueAccuracy;
+		return (start < mid) && (mid < end);
     }
 
     /**
2023-06-26 00:31:22 [main] [INFO]  PatchLogExporter - patch (v26086)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 00:31:22 [main] [INFO]  PatchLogExporter - patch (v26086)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 00:31:22 [main] [INFO]  PatchLogExporter - patch (v26086)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -60,7 +60,6 @@
     protected ConvergingAlgorithmImpl(final int defaultMaximalIterationCount,
                                       final double defaultAbsoluteAccuracy) {
         this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
-        this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
2023-06-26 00:31:22 [main] [INFO]  PatchLogExporter - patch (v26086)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 00:31:22 [main] [INFO]  PatchLogExporter - patch (v26086)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,8 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
+            verifySequence(min, initial, max);
+			clearResult();
             return result;
         }
 
@@ -124,7 +125,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -290,7 +290,6 @@
                     delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
-                    oldDelta = delta;
                     delta = p / p1;
                 }
             }
2023-06-26 00:31:22 [main] [INFO]  PatchLogExporter - patch (v26818)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -139,7 +139,6 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
-        this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
 
@@ -193,7 +192,9 @@
      * @return true if the arguments form an increasing sequence
      */
     protected boolean isSequence(final double start, final double mid, final double end) {
-        return (start < mid) && (mid < end);
+        functionValueAccuracy = defaultFunctionValueAccuracy;
+		functionValueAccuracy = defaultFunctionValueAccuracy;
+		return (start < mid) && (mid < end);
     }
 
     /**
2023-06-26 00:31:22 [main] [INFO]  PatchLogExporter - patch (v26818)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 00:31:22 [main] [INFO]  PatchLogExporter - patch (v26818)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 00:31:22 [main] [INFO]  PatchLogExporter - patch (v26818)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 00:31:22 [main] [INFO]  PatchLogExporter - patch (v26818)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +123,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -229,7 +227,35 @@
         double delta = x1 - x0;
         double oldDelta = delta;
 
-        int i = 0;
+        {
+			x2 = x0;
+			y2 = y0;
+		}
+		{
+			x2 = x0;
+			y2 = y0;
+		}
+		{
+			x2 = x0;
+			y2 = y0;
+		}
+		{
+			x2 = x0;
+			y2 = y0;
+		}
+		{
+			x2 = x0;
+			y2 = y0;
+		}
+		{
+			x2 = x0;
+			y2 = y0;
+		}
+		{
+			x2 = x0;
+			y2 = y0;
+		}
+		int i = 0;
         while (i < maximalIterationCount) {
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
2023-06-26 00:31:22 [main] [INFO]  PatchLogExporter - patch (v27350)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -193,7 +193,11 @@
      * @return true if the arguments form an increasing sequence
      */
     protected boolean isSequence(final double start, final double mid, final double end) {
-        return (start < mid) && (mid < end);
+        functionValueAccuracy = defaultFunctionValueAccuracy;
+		functionValueAccuracy = defaultFunctionValueAccuracy;
+		functionValueAccuracy = defaultFunctionValueAccuracy;
+		functionValueAccuracy = defaultFunctionValueAccuracy;
+		return (start < mid) && (mid < end);
     }
 
     /**
2023-06-26 00:31:22 [main] [INFO]  PatchLogExporter - patch (v27350)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 00:31:22 [main] [INFO]  PatchLogExporter - patch (v27350)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 00:31:22 [main] [INFO]  PatchLogExporter - patch (v27350)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 00:31:22 [main] [INFO]  PatchLogExporter - patch (v27350)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -102,17 +102,19 @@
         clearResult();
         verifySequence(min, initial, max);
 
-        // return the initial guess if it is good enough
+        this.defaultFunctionValueAccuracy = 1.0e-15;
+		// return the initial guess if it is good enough
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
-            return result;
+            double fb;
+			return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
+            double yMax = f.value(max);
             return result;
         }
 
@@ -124,7 +126,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -169,6 +170,7 @@
         verifyInterval(min, max);
 
         double ret = Double.NaN;
+		double delta;
 
         double yMin = f.value(min);
         double yMax = f.value(max);
@@ -229,7 +231,15 @@
         double delta = x1 - x0;
         double oldDelta = delta;
 
-        int i = 0;
+        {
+			x2 = x0;
+			y2 = y0;
+		}
+		{
+			x2 = x0;
+			y2 = y0;
+		}
+		int i = 0;
         while (i < maximalIterationCount) {
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
2023-06-26 00:31:22 [main] [INFO]  PatchLogExporter - patch (v27770)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -139,7 +139,6 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
-        this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
 
@@ -154,7 +153,6 @@
                                    final int iterationCount) {
         this.result         = x;
         this.functionValue  = fx;
-        this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
 
@@ -162,7 +160,6 @@
      * Convenience function for implementations.
      */
     protected final void clearResult() {
-        this.iterationCount = 0;
         this.resultComputed = false;
     }
 
@@ -193,7 +190,8 @@
      * @return true if the arguments form an increasing sequence
      */
     protected boolean isSequence(final double start, final double mid, final double end) {
-        return (start < mid) && (mid < end);
+        functionValueAccuracy = defaultFunctionValueAccuracy;
+		return (start < mid) && (mid < end);
     }
 
     /**
2023-06-26 00:31:22 [main] [INFO]  PatchLogExporter - patch (v27770)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 00:31:22 [main] [INFO]  PatchLogExporter - patch (v27770)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 00:31:22 [main] [INFO]  PatchLogExporter - patch (v27770)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -59,7 +59,6 @@
      */
     protected ConvergingAlgorithmImpl(final int defaultMaximalIterationCount,
                                       final double defaultAbsoluteAccuracy) {
-        this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
2023-06-26 00:31:22 [main] [INFO]  PatchLogExporter - patch (v27770)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 00:31:22 [main] [INFO]  PatchLogExporter - patch (v27770)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -111,7 +111,7 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
-        if (Math.abs(yMin) <= functionValueAccuracy) {
+        if (Math.abs(max - min) <= absoluteAccuracy) {
             setResult(yMin, 0);
             return result;
         }
@@ -124,7 +124,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -229,7 +228,11 @@
         double delta = x1 - x0;
         double oldDelta = delta;
 
-        int i = 0;
+        {
+			x2 = x0;
+			y2 = y0;
+		}
+		int i = 0;
         while (i < maximalIterationCount) {
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
2023-06-26 00:31:22 [main] [INFO]  PatchLogExporter - patch (v28092)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -139,7 +139,6 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
-        this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
 
@@ -193,7 +192,8 @@
      * @return true if the arguments form an increasing sequence
      */
     protected boolean isSequence(final double start, final double mid, final double end) {
-        return (start < mid) && (mid < end);
+        functionValueAccuracy = defaultFunctionValueAccuracy;
+		return (start < mid) && (mid < end);
     }
 
     /**
2023-06-26 00:31:22 [main] [INFO]  PatchLogExporter - patch (v28092)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 00:31:22 [main] [INFO]  PatchLogExporter - patch (v28092)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 00:31:22 [main] [INFO]  PatchLogExporter - patch (v28092)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 00:31:22 [main] [INFO]  PatchLogExporter - patch (v28092)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -99,10 +99,10 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
         verifySequence(min, initial, max);
 
-        // return the initial guess if it is good enough
+        this.defaultFunctionValueAccuracy = 1.0e-15;
+		// return the initial guess if it is good enough
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
@@ -112,7 +112,7 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
+            verifySequence(min, initial, max);
             return result;
         }
 
@@ -124,7 +124,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,7 +180,6 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -229,7 +227,22 @@
         double delta = x1 - x0;
         double oldDelta = delta;
 
-        int i = 0;
+        {
+			x2 = x0;
+			{
+				x0 = x1;
+				x1 = x2;
+				x2 = x0;
+				y0 = y1;
+				y1 = y2;
+				y2 = y0;
+			}
+		}
+		{
+			x2 = x0;
+			y2 = y0;
+		}
+		int i = 0;
         while (i < maximalIterationCount) {
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
2023-06-26 00:31:22 [main] [INFO]  PatchLogExporter - patch (v28177)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,6 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
@@ -128,7 +127,6 @@
 
     /** {@inheritDoc} */
     public void resetFunctionValueAccuracy() {
-        functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
     /**
@@ -193,7 +191,9 @@
      * @return true if the arguments form an increasing sequence
      */
     protected boolean isSequence(final double start, final double mid, final double end) {
-        return (start < mid) && (mid < end);
+        functionValueAccuracy = defaultFunctionValueAccuracy;
+		functionValueAccuracy = defaultFunctionValueAccuracy;
+		return (start < mid) && (mid < end);
     }
 
     /**
2023-06-26 00:31:22 [main] [INFO]  PatchLogExporter - patch (v28177)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 00:31:22 [main] [INFO]  PatchLogExporter - patch (v28177)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 00:31:22 [main] [INFO]  PatchLogExporter - patch (v28177)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -60,7 +60,6 @@
     protected ConvergingAlgorithmImpl(final int defaultMaximalIterationCount,
                                       final double defaultAbsoluteAccuracy) {
         this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
-        this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
2023-06-26 00:31:22 [main] [INFO]  PatchLogExporter - patch (v28177)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 00:31:22 [main] [INFO]  PatchLogExporter - patch (v28177)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -99,7 +99,6 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
@@ -112,7 +111,7 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
+            double yMax = f.value(max);
             return result;
         }
 
@@ -124,7 +123,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,7 +179,6 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -229,7 +226,15 @@
         double delta = x1 - x0;
         double oldDelta = delta;
 
-        int i = 0;
+        {
+			x2 = x0;
+			y2 = y0;
+		}
+		{
+			x2 = x0;
+			y2 = y0;
+		}
+		int i = 0;
         while (i < maximalIterationCount) {
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
2023-06-26 00:31:22 [main] [INFO]  PatchLogExporter - patch (v28401)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,6 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
@@ -139,7 +138,6 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
-        this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
 
2023-06-26 00:31:22 [main] [INFO]  PatchLogExporter - patch (v28401)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 00:31:22 [main] [INFO]  PatchLogExporter - patch (v28401)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 00:31:22 [main] [INFO]  PatchLogExporter - patch (v28401)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -62,7 +62,6 @@
         this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
-        this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
         this.iterationCount = 0;
2023-06-26 00:31:22 [main] [INFO]  PatchLogExporter - patch (v28401)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 00:31:22 [main] [INFO]  PatchLogExporter - patch (v28401)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -111,8 +111,9 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
-        if (Math.abs(yMin) <= functionValueAccuracy) {
+        if (Math.abs(max - min) <= absoluteAccuracy) {
             setResult(yMin, 0);
+			clearResult();
             return result;
         }
 
@@ -124,7 +125,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -229,14 +229,27 @@
         double delta = x1 - x0;
         double oldDelta = delta;
 
-        int i = 0;
+        {
+			x2 = x0;
+			y2 = y0;
+		}
+		{
+			x2 = x0;
+			y2 = y0;
+		}
+		{
+			x2 = x0;
+			y2 = y0;
+		}
+		int i = 0;
         while (i < maximalIterationCount) {
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
                 x0 = x1;
                 x1 = x2;
                 x2 = x0;
-                y0 = y1;
+                final double x3 = 0.5 * (x1 + x2);
+				y0 = y1;
                 y1 = y2;
                 y2 = y0;
             }
2023-06-26 00:31:22 [main] [INFO]  PatchLogExporter - patch (v28541)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,6 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
@@ -162,7 +161,6 @@
      * Convenience function for implementations.
      */
     protected final void clearResult() {
-        this.iterationCount = 0;
         this.resultComputed = false;
     }
 
2023-06-26 00:31:22 [main] [INFO]  PatchLogExporter - patch (v28541)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 00:31:22 [main] [INFO]  PatchLogExporter - patch (v28541)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 00:31:22 [main] [INFO]  PatchLogExporter - patch (v28541)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -63,7 +63,6 @@
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
-        this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
         this.iterationCount = 0;
     }
2023-06-26 00:31:22 [main] [INFO]  PatchLogExporter - patch (v28541)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 00:31:22 [main] [INFO]  PatchLogExporter - patch (v28541)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -111,7 +111,7 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
-        if (Math.abs(yMin) <= functionValueAccuracy) {
+        if (Math.abs(max - min) <= absoluteAccuracy) {
             setResult(yMin, 0);
             return result;
         }
@@ -124,7 +124,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -229,7 +228,23 @@
         double delta = x1 - x0;
         double oldDelta = delta;
 
-        int i = 0;
+        {
+			x2 = x0;
+			y2 = y0;
+		}
+		{
+			x2 = x0;
+			y2 = y0;
+		}
+		{
+			x2 = x0;
+			y2 = y0;
+		}
+		{
+			x2 = x0;
+			y2 = y0;
+		}
+		int i = 0;
         while (i < maximalIterationCount) {
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
2023-06-26 00:31:22 [main] [INFO]  PatchLogExporter - patch (v28821)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,6 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
@@ -162,7 +161,6 @@
      * Convenience function for implementations.
      */
     protected final void clearResult() {
-        this.iterationCount = 0;
         this.resultComputed = false;
     }
 
2023-06-26 00:31:22 [main] [INFO]  PatchLogExporter - patch (v28821)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 00:31:22 [main] [INFO]  PatchLogExporter - patch (v28821)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 00:31:22 [main] [INFO]  PatchLogExporter - patch (v28821)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -63,7 +63,6 @@
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
-        this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
         this.iterationCount = 0;
     }
2023-06-26 00:31:22 [main] [INFO]  PatchLogExporter - patch (v28821)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 00:31:22 [main] [INFO]  PatchLogExporter - patch (v28821)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -111,7 +111,7 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
-        if (Math.abs(yMin) <= functionValueAccuracy) {
+        if (Math.abs(max - min) <= absoluteAccuracy) {
             setResult(yMin, 0);
             return result;
         }
@@ -124,7 +124,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,7 +180,6 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -229,7 +227,23 @@
         double delta = x1 - x0;
         double oldDelta = delta;
 
-        int i = 0;
+        {
+			x2 = x0;
+			y2 = y0;
+		}
+		{
+			x2 = x0;
+			y2 = y0;
+		}
+		{
+			x2 = x0;
+			y2 = y0;
+		}
+		{
+			x2 = x0;
+			y2 = y0;
+		}
+		int i = 0;
         while (i < maximalIterationCount) {
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
2023-06-26 00:31:22 [main] [INFO]  PatchLogExporter - patch (v28986)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -77,7 +77,6 @@
         }
         this.f = f;
         this.defaultFunctionValueAccuracy = 1.0e-15;
-        this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
     /**
@@ -193,7 +192,9 @@
      * @return true if the arguments form an increasing sequence
      */
     protected boolean isSequence(final double start, final double mid, final double end) {
-        return (start < mid) && (mid < end);
+        functionValueAccuracy = defaultFunctionValueAccuracy;
+		functionValueAccuracy = defaultFunctionValueAccuracy;
+		return (start < mid) && (mid < end);
     }
 
     /**
2023-06-26 00:31:22 [main] [INFO]  PatchLogExporter - patch (v28986)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 00:31:22 [main] [INFO]  PatchLogExporter - patch (v28986)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 00:31:22 [main] [INFO]  PatchLogExporter - patch (v28986)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 00:31:22 [main] [INFO]  PatchLogExporter - patch (v28986)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -99,20 +99,21 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
-            return result;
+            double oldx = Double.POSITIVE_INFINITY;
+			return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
-        if (Math.abs(yMin) <= functionValueAccuracy) {
+        if (Math.abs(max - min) <= absoluteAccuracy) {
             setResult(yMin, 0);
+			clearResult();
             return result;
         }
 
@@ -124,7 +125,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,7 +181,7 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
+                int i = 0;
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -229,14 +229,23 @@
         double delta = x1 - x0;
         double oldDelta = delta;
 
-        int i = 0;
+        {
+			x2 = x0;
+			y2 = y0;
+		}
+		{
+			x2 = x0;
+			y2 = y0;
+		}
+		int i = 0;
         while (i < maximalIterationCount) {
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
                 x0 = x1;
                 x1 = x2;
                 x2 = x0;
-                y0 = y1;
+                final double x3 = 0.5 * (x1 + x2);
+				y0 = y1;
                 y1 = y2;
                 y2 = y0;
             }
2023-06-26 00:31:22 [main] [INFO]  PatchLogExporter - patch (v29259)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,8 +76,6 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
-        this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
     /**
@@ -193,7 +191,8 @@
      * @return true if the arguments form an increasing sequence
      */
     protected boolean isSequence(final double start, final double mid, final double end) {
-        return (start < mid) && (mid < end);
+        functionValueAccuracy = defaultFunctionValueAccuracy;
+		return (start < mid) && (mid < end);
     }
 
     /**
2023-06-26 00:31:22 [main] [INFO]  PatchLogExporter - patch (v29259)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 00:31:22 [main] [INFO]  PatchLogExporter - patch (v29259)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 00:31:22 [main] [INFO]  PatchLogExporter - patch (v29259)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 00:31:22 [main] [INFO]  PatchLogExporter - patch (v29259)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +123,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,7 +179,6 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -226,10 +223,22 @@
                          double x2, double y2)
     throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        double delta = x1 - x0;
+        double fb;
+		double delta = x1 - x0;
         double oldDelta = delta;
 
-        int i = 0;
+        {
+			x2 = x0;
+		}
+		{
+			x2 = x0;
+			y2 = y0;
+		}
+		{
+			x2 = x0;
+			y2 = y0;
+		}
+		int i = 0;
         while (i < maximalIterationCount) {
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
2023-06-26 00:31:22 [main] [INFO]  PatchLogExporter - patch (v29629)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,6 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
@@ -128,7 +127,6 @@
 
     /** {@inheritDoc} */
     public void resetFunctionValueAccuracy() {
-        functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
     /**
@@ -193,7 +191,10 @@
      * @return true if the arguments form an increasing sequence
      */
     protected boolean isSequence(final double start, final double mid, final double end) {
-        return (start < mid) && (mid < end);
+        functionValueAccuracy = defaultFunctionValueAccuracy;
+		functionValueAccuracy = defaultFunctionValueAccuracy;
+		functionValueAccuracy = defaultFunctionValueAccuracy;
+		return (start < mid) && (mid < end);
     }
 
     /**
2023-06-26 00:31:22 [main] [INFO]  PatchLogExporter - patch (v29629)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 00:31:22 [main] [INFO]  PatchLogExporter - patch (v29629)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 00:31:22 [main] [INFO]  PatchLogExporter - patch (v29629)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -63,7 +63,6 @@
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
-        this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
         this.iterationCount = 0;
     }
2023-06-26 00:31:22 [main] [INFO]  PatchLogExporter - patch (v29629)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 00:31:22 [main] [INFO]  PatchLogExporter - patch (v29629)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +123,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -229,7 +227,19 @@
         double delta = x1 - x0;
         double oldDelta = delta;
 
-        int i = 0;
+        {
+			x2 = x0;
+			y2 = y0;
+		}
+		{
+			x2 = x0;
+			y2 = y0;
+		}
+		{
+			x2 = x0;
+			y2 = y0;
+		}
+		int i = 0;
         while (i < maximalIterationCount) {
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
2023-06-26 00:31:22 [main] [INFO]  PatchLogExporter - patch (v30495)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,6 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
@@ -139,7 +138,6 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
-        this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
 
@@ -162,8 +160,6 @@
      * Convenience function for implementations.
      */
     protected final void clearResult() {
-        this.iterationCount = 0;
-        this.resultComputed = false;
     }
 
     /**
@@ -193,7 +189,9 @@
      * @return true if the arguments form an increasing sequence
      */
     protected boolean isSequence(final double start, final double mid, final double end) {
-        return (start < mid) && (mid < end);
+        functionValueAccuracy = defaultFunctionValueAccuracy;
+		functionValueAccuracy = defaultFunctionValueAccuracy;
+		return (start < mid) && (mid < end);
     }
 
     /**
2023-06-26 00:31:22 [main] [INFO]  PatchLogExporter - patch (v30495)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 00:31:22 [main] [INFO]  PatchLogExporter - patch (v30495)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 00:31:22 [main] [INFO]  PatchLogExporter - patch (v30495)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 00:31:22 [main] [INFO]  PatchLogExporter - patch (v30495)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +123,7 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
+            double oldx = Double.POSITIVE_INFINITY;
             return result;
         }
 
@@ -229,7 +228,15 @@
         double delta = x1 - x0;
         double oldDelta = delta;
 
-        int i = 0;
+        {
+			x2 = x0;
+			y2 = y0;
+		}
+		{
+			x2 = x0;
+			y2 = y0;
+		}
+		int i = 0;
         while (i < maximalIterationCount) {
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
2023-06-26 00:31:22 [main] [INFO]  PatchLogExporter - patch (v30917)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -128,7 +128,6 @@
 
     /** {@inheritDoc} */
     public void resetFunctionValueAccuracy() {
-        functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
     /**
@@ -163,7 +162,6 @@
      */
     protected final void clearResult() {
         this.iterationCount = 0;
-        this.resultComputed = false;
     }
 
     /**
@@ -193,7 +191,12 @@
      * @return true if the arguments form an increasing sequence
      */
     protected boolean isSequence(final double start, final double mid, final double end) {
-        return (start < mid) && (mid < end);
+        functionValueAccuracy = defaultFunctionValueAccuracy;
+		functionValueAccuracy = defaultFunctionValueAccuracy;
+		functionValueAccuracy = defaultFunctionValueAccuracy;
+		functionValueAccuracy = defaultFunctionValueAccuracy;
+		functionValueAccuracy = defaultFunctionValueAccuracy;
+		return (start < mid) && (mid < end);
     }
 
     /**
2023-06-26 00:31:22 [main] [INFO]  PatchLogExporter - patch (v30917)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 00:31:22 [main] [INFO]  PatchLogExporter - patch (v30917)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 00:31:22 [main] [INFO]  PatchLogExporter - patch (v30917)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 00:31:22 [main] [INFO]  PatchLogExporter - patch (v30917)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +123,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -229,7 +227,11 @@
         double delta = x1 - x0;
         double oldDelta = delta;
 
-        int i = 0;
+        {
+			x2 = x0;
+			y2 = y0;
+		}
+		int i = 0;
         while (i < maximalIterationCount) {
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
2023-06-26 00:31:22 [main] [INFO]  PatchLogExporter - patch (v31288)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -139,7 +139,6 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
-        this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
 
@@ -154,7 +153,6 @@
                                    final int iterationCount) {
         this.result         = x;
         this.functionValue  = fx;
-        this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
 
@@ -163,7 +161,6 @@
      */
     protected final void clearResult() {
         this.iterationCount = 0;
-        this.resultComputed = false;
     }
 
     /**
@@ -193,7 +190,9 @@
      * @return true if the arguments form an increasing sequence
      */
     protected boolean isSequence(final double start, final double mid, final double end) {
-        return (start < mid) && (mid < end);
+        functionValueAccuracy = defaultFunctionValueAccuracy;
+		functionValueAccuracy = defaultFunctionValueAccuracy;
+		return (start < mid) && (mid < end);
     }
 
     /**
2023-06-26 00:31:22 [main] [INFO]  PatchLogExporter - patch (v31288)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 00:31:22 [main] [INFO]  PatchLogExporter - patch (v31288)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 00:31:22 [main] [INFO]  PatchLogExporter - patch (v31288)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 00:31:22 [main] [INFO]  PatchLogExporter - patch (v31288)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,7 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
+            clearResult();
             return result;
         }
 
@@ -124,7 +124,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -183,6 +182,7 @@
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
                 setResult(max, 0);
                 ret = max;
+				int numIterations = 0;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
@@ -229,7 +229,15 @@
         double delta = x1 - x0;
         double oldDelta = delta;
 
-        int i = 0;
+        {
+			x2 = x0;
+			y2 = y0;
+		}
+		{
+			x2 = x0;
+			y2 = y0;
+		}
+		int i = 0;
         while (i < maximalIterationCount) {
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
2023-06-26 00:31:22 [main] [INFO]  PatchLogExporter - patch (v31359)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -77,7 +77,6 @@
         }
         this.f = f;
         this.defaultFunctionValueAccuracy = 1.0e-15;
-        this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
     /**
@@ -129,6 +128,7 @@
     /** {@inheritDoc} */
     public void resetFunctionValueAccuracy() {
         functionValueAccuracy = defaultFunctionValueAccuracy;
+		double p1;
     }
 
     /**
@@ -139,7 +139,6 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
-        this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
 
@@ -154,7 +153,6 @@
                                    final int iterationCount) {
         this.result         = x;
         this.functionValue  = fx;
-        this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
 
@@ -193,7 +191,8 @@
      * @return true if the arguments form an increasing sequence
      */
     protected boolean isSequence(final double start, final double mid, final double end) {
-        return (start < mid) && (mid < end);
+        functionValueAccuracy = defaultFunctionValueAccuracy;
+		return (start < mid) && (mid < end);
     }
 
     /**
2023-06-26 00:31:22 [main] [INFO]  PatchLogExporter - patch (v31359)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 00:31:22 [main] [INFO]  PatchLogExporter - patch (v31359)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 00:31:22 [main] [INFO]  PatchLogExporter - patch (v31359)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -62,7 +62,6 @@
         this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
-        this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
         this.iterationCount = 0;
2023-06-26 00:31:22 [main] [INFO]  PatchLogExporter - patch (v31359)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 00:31:22 [main] [INFO]  PatchLogExporter - patch (v31359)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,7 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
+            clearResult();
             return result;
         }
 
@@ -124,7 +124,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,7 +180,8 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
+                double oldx = Double.POSITIVE_INFINITY;
+				setResult(max, 0);
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -229,7 +229,11 @@
         double delta = x1 - x0;
         double oldDelta = delta;
 
-        int i = 0;
+        {
+			x2 = x0;
+			y2 = y0;
+		}
+		int i = 0;
         while (i < maximalIterationCount) {
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
2023-06-26 00:31:22 [main] [INFO]  PatchLogExporter - patch (v31684)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -139,7 +139,6 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
-        this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
 
@@ -154,7 +153,6 @@
                                    final int iterationCount) {
         this.result         = x;
         this.functionValue  = fx;
-        this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
 
@@ -193,7 +191,10 @@
      * @return true if the arguments form an increasing sequence
      */
     protected boolean isSequence(final double start, final double mid, final double end) {
-        return (start < mid) && (mid < end);
+        functionValueAccuracy = defaultFunctionValueAccuracy;
+		functionValueAccuracy = defaultFunctionValueAccuracy;
+		functionValueAccuracy = defaultFunctionValueAccuracy;
+		return (start < mid) && (mid < end);
     }
 
     /**
2023-06-26 00:31:22 [main] [INFO]  PatchLogExporter - patch (v31684)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 00:31:22 [main] [INFO]  PatchLogExporter - patch (v31684)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 00:31:22 [main] [INFO]  PatchLogExporter - patch (v31684)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 00:31:22 [main] [INFO]  PatchLogExporter - patch (v31684)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -111,8 +111,7 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
-        if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
+        if (Math.abs(max - min) <= absoluteAccuracy) {
             return result;
         }
 
@@ -124,7 +123,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -229,7 +227,19 @@
         double delta = x1 - x0;
         double oldDelta = delta;
 
-        int i = 0;
+        {
+			x2 = x0;
+			y2 = y0;
+		}
+		{
+			x2 = x0;
+			y2 = y0;
+		}
+		{
+			x2 = x0;
+			y2 = y0;
+		}
+		int i = 0;
         while (i < maximalIterationCount) {
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
2023-06-26 00:31:22 [main] [INFO]  PatchLogExporter - patch (v32140)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,8 +76,6 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
-        this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
     /**
@@ -128,7 +126,6 @@
 
     /** {@inheritDoc} */
     public void resetFunctionValueAccuracy() {
-        functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
     /**
@@ -163,7 +160,6 @@
      */
     protected final void clearResult() {
         this.iterationCount = 0;
-        this.resultComputed = false;
     }
 
     /**
@@ -193,7 +189,10 @@
      * @return true if the arguments form an increasing sequence
      */
     protected boolean isSequence(final double start, final double mid, final double end) {
-        return (start < mid) && (mid < end);
+        functionValueAccuracy = defaultFunctionValueAccuracy;
+		functionValueAccuracy = defaultFunctionValueAccuracy;
+		functionValueAccuracy = defaultFunctionValueAccuracy;
+		return (start < mid) && (mid < end);
     }
 
     /**
2023-06-26 00:31:22 [main] [INFO]  PatchLogExporter - patch (v32140)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 00:31:22 [main] [INFO]  PatchLogExporter - patch (v32140)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 00:31:22 [main] [INFO]  PatchLogExporter - patch (v32140)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -63,7 +63,6 @@
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
-        this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
         this.iterationCount = 0;
     }
2023-06-26 00:31:22 [main] [INFO]  PatchLogExporter - patch (v32140)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 00:31:22 [main] [INFO]  PatchLogExporter - patch (v32140)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +123,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,7 +179,6 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -229,7 +226,11 @@
         double delta = x1 - x0;
         double oldDelta = delta;
 
-        int i = 0;
+        {
+			x2 = x0;
+			y2 = y0;
+		}
+		int i = 0;
         while (i < maximalIterationCount) {
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
2023-06-26 00:31:23 [main] [INFO]  PatchLogExporter - patch (v32181)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,6 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
@@ -193,7 +192,8 @@
      * @return true if the arguments form an increasing sequence
      */
     protected boolean isSequence(final double start, final double mid, final double end) {
-        return (start < mid) && (mid < end);
+        functionValueAccuracy = defaultFunctionValueAccuracy;
+		return (start < mid) && (mid < end);
     }
 
     /**
2023-06-26 00:31:23 [main] [INFO]  PatchLogExporter - patch (v32181)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 00:31:23 [main] [INFO]  PatchLogExporter - patch (v32181)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 00:31:23 [main] [INFO]  PatchLogExporter - patch (v32181)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -59,7 +59,6 @@
      */
     protected ConvergingAlgorithmImpl(final int defaultMaximalIterationCount,
                                       final double defaultAbsoluteAccuracy) {
-        this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
2023-06-26 00:31:23 [main] [INFO]  PatchLogExporter - patch (v32181)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 00:31:23 [main] [INFO]  PatchLogExporter - patch (v32181)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +123,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -229,7 +227,27 @@
         double delta = x1 - x0;
         double oldDelta = delta;
 
-        int i = 0;
+        {
+			x2 = x0;
+			y2 = y0;
+		}
+		{
+			x2 = x0;
+			y2 = y0;
+		}
+		{
+			x2 = x0;
+			y2 = y0;
+		}
+		{
+			x2 = x0;
+			y2 = y0;
+		}
+		{
+			x2 = x0;
+			y2 = y0;
+		}
+		int i = 0;
         while (i < maximalIterationCount) {
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
@@ -245,7 +263,6 @@
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
-                return result;
             }
             double dx = x2 - x1;
             double tolerance =
2023-06-26 00:31:23 [main] [INFO]  PatchLogExporter - patch (v32532)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -193,7 +193,11 @@
      * @return true if the arguments form an increasing sequence
      */
     protected boolean isSequence(final double start, final double mid, final double end) {
-        return (start < mid) && (mid < end);
+        functionValueAccuracy = defaultFunctionValueAccuracy;
+		functionValueAccuracy = defaultFunctionValueAccuracy;
+		functionValueAccuracy = defaultFunctionValueAccuracy;
+		functionValueAccuracy = defaultFunctionValueAccuracy;
+		return (start < mid) && (mid < end);
     }
 
     /**
2023-06-26 00:31:23 [main] [INFO]  PatchLogExporter - patch (v32532)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 00:31:23 [main] [INFO]  PatchLogExporter - patch (v32532)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 00:31:23 [main] [INFO]  PatchLogExporter - patch (v32532)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 00:31:23 [main] [INFO]  PatchLogExporter - patch (v32532)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -99,10 +99,10 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
         verifySequence(min, initial, max);
 
-        // return the initial guess if it is good enough
+        this.defaultFunctionValueAccuracy = 1.0e-15;
+		// return the initial guess if it is good enough
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
@@ -112,7 +112,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +123,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,7 +179,6 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -229,7 +226,15 @@
         double delta = x1 - x0;
         double oldDelta = delta;
 
-        int i = 0;
+        {
+			x2 = x0;
+			y2 = y0;
+		}
+		{
+			x2 = x0;
+			y2 = y0;
+		}
+		int i = 0;
         while (i < maximalIterationCount) {
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
2023-06-26 00:31:23 [main] [INFO]  PatchLogExporter - patch (v33308)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -162,7 +162,6 @@
      * Convenience function for implementations.
      */
     protected final void clearResult() {
-        this.iterationCount = 0;
         this.resultComputed = false;
     }
 
@@ -193,7 +192,8 @@
      * @return true if the arguments form an increasing sequence
      */
     protected boolean isSequence(final double start, final double mid, final double end) {
-        return (start < mid) && (mid < end);
+        functionValueAccuracy = defaultFunctionValueAccuracy;
+		return (start < mid) && (mid < end);
     }
 
     /**
2023-06-26 00:31:23 [main] [INFO]  PatchLogExporter - patch (v33308)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 00:31:23 [main] [INFO]  PatchLogExporter - patch (v33308)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 00:31:23 [main] [INFO]  PatchLogExporter - patch (v33308)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 00:31:23 [main] [INFO]  PatchLogExporter - patch (v33308)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -111,8 +111,9 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
-        if (Math.abs(yMin) <= functionValueAccuracy) {
+        if (Math.abs(max - min) <= absoluteAccuracy) {
             setResult(yMin, 0);
+			clearResult();
             return result;
         }
 
@@ -124,7 +125,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,7 +181,7 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
+                int i = 1;
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -229,14 +229,27 @@
         double delta = x1 - x0;
         double oldDelta = delta;
 
-        int i = 0;
+        {
+			x2 = x0;
+			y2 = y0;
+		}
+		{
+			x2 = x0;
+			y2 = y0;
+		}
+		{
+			x2 = x0;
+			y2 = y0;
+		}
+		int i = 0;
         while (i < maximalIterationCount) {
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
                 x0 = x1;
                 x1 = x2;
                 x2 = x0;
-                y0 = y1;
+                final double x3 = 0.5 * (x1 + x2);
+				y0 = y1;
                 y1 = y2;
                 y2 = y0;
             }
2023-06-26 00:31:23 [main] [INFO]  PatchLogExporter - patch (v33384)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -162,7 +162,6 @@
      * Convenience function for implementations.
      */
     protected final void clearResult() {
-        this.iterationCount = 0;
         this.resultComputed = false;
     }
 
@@ -193,7 +192,8 @@
      * @return true if the arguments form an increasing sequence
      */
     protected boolean isSequence(final double start, final double mid, final double end) {
-        return (start < mid) && (mid < end);
+        functionValueAccuracy = defaultFunctionValueAccuracy;
+		return (start < mid) && (mid < end);
     }
 
     /**
2023-06-26 00:31:23 [main] [INFO]  PatchLogExporter - patch (v33384)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 00:31:23 [main] [INFO]  PatchLogExporter - patch (v33384)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 00:31:23 [main] [INFO]  PatchLogExporter - patch (v33384)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 00:31:23 [main] [INFO]  PatchLogExporter - patch (v33384)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -111,8 +111,9 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
-        if (Math.abs(yMin) <= functionValueAccuracy) {
+        if (Math.abs(max - min) <= absoluteAccuracy) {
             setResult(yMin, 0);
+			clearResult();
             return result;
         }
 
@@ -124,7 +125,7 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
+            double ret = Double.NaN;
             return result;
         }
 
@@ -181,8 +182,9 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
-                ret = max;
+                int i = 1;
+                double x0 = min;
+				ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
@@ -229,14 +231,27 @@
         double delta = x1 - x0;
         double oldDelta = delta;
 
-        int i = 0;
+        {
+			x2 = x0;
+			y2 = y0;
+		}
+		{
+			x2 = x0;
+			y2 = y0;
+		}
+		{
+			x2 = x0;
+			y2 = y0;
+		}
+		int i = 0;
         while (i < maximalIterationCount) {
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
                 x0 = x1;
                 x1 = x2;
                 x2 = x0;
-                y0 = y1;
+                final double x3 = 0.5 * (x1 + x2);
+				y0 = y1;
                 y1 = y2;
                 y2 = y0;
             }
2023-06-26 00:31:23 [main] [INFO]  PatchLogExporter - patch (v34062)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,6 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
@@ -193,7 +192,8 @@
      * @return true if the arguments form an increasing sequence
      */
     protected boolean isSequence(final double start, final double mid, final double end) {
-        return (start < mid) && (mid < end);
+        functionValueAccuracy = defaultFunctionValueAccuracy;
+		return (start < mid) && (mid < end);
     }
 
     /**
2023-06-26 00:31:23 [main] [INFO]  PatchLogExporter - patch (v34062)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 00:31:23 [main] [INFO]  PatchLogExporter - patch (v34062)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 00:31:23 [main] [INFO]  PatchLogExporter - patch (v34062)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 00:31:23 [main] [INFO]  PatchLogExporter - patch (v34062)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -111,7 +111,7 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
-        if (Math.abs(yMin) <= functionValueAccuracy) {
+        if (Math.abs(max - min) <= absoluteAccuracy) {
             setResult(yMin, 0);
             return result;
         }
@@ -124,7 +124,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -229,7 +228,35 @@
         double delta = x1 - x0;
         double oldDelta = delta;
 
-        int i = 0;
+        {
+			x2 = x0;
+			y2 = y0;
+		}
+		{
+			x2 = x0;
+			y2 = y0;
+		}
+		{
+			x2 = x0;
+			y2 = y0;
+		}
+		{
+			x2 = x0;
+			y2 = y0;
+		}
+		{
+			x2 = x0;
+			y2 = y0;
+		}
+		{
+			x2 = x0;
+			y2 = y0;
+		}
+		{
+			x2 = x0;
+			y2 = y0;
+		}
+		int i = 0;
         while (i < maximalIterationCount) {
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
2023-06-26 00:31:23 [main] [INFO]  PatchLogExporter - patch (v34181)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -139,7 +139,6 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
-        this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
 
@@ -193,7 +192,8 @@
      * @return true if the arguments form an increasing sequence
      */
     protected boolean isSequence(final double start, final double mid, final double end) {
-        return (start < mid) && (mid < end);
+        functionValueAccuracy = defaultFunctionValueAccuracy;
+		return (start < mid) && (mid < end);
     }
 
     /**
2023-06-26 00:31:23 [main] [INFO]  PatchLogExporter - patch (v34181)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 00:31:23 [main] [INFO]  PatchLogExporter - patch (v34181)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 00:31:23 [main] [INFO]  PatchLogExporter - patch (v34181)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 00:31:23 [main] [INFO]  PatchLogExporter - patch (v34181)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -102,7 +102,8 @@
         clearResult();
         verifySequence(min, initial, max);
 
-        // return the initial guess if it is good enough
+        this.defaultFunctionValueAccuracy = 1.0e-15;
+		// return the initial guess if it is good enough
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
@@ -111,7 +112,7 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
-        if (Math.abs(yMin) <= functionValueAccuracy) {
+        if (Math.abs(max - min) <= absoluteAccuracy) {
             setResult(yMin, 0);
             return result;
         }
@@ -124,7 +125,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,7 +181,6 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -229,7 +228,27 @@
         double delta = x1 - x0;
         double oldDelta = delta;
 
-        int i = 0;
+        {
+			x2 = x0;
+			y2 = y0;
+		}
+		{
+			x2 = x0;
+			y2 = y0;
+		}
+		{
+			x2 = x0;
+			y2 = y0;
+		}
+		{
+			x2 = x0;
+			y2 = y0;
+		}
+		{
+			x2 = x0;
+			y2 = y0;
+		}
+		int i = 0;
         while (i < maximalIterationCount) {
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
@@ -312,7 +331,6 @@
                 delta = x1 - x0;
                 oldDelta = delta;
             }
-            i++;
         }
         throw new MaxIterationsExceededException(maximalIterationCount);
     }
2023-06-26 00:31:23 [main] [INFO]  PatchLogExporter - patch (v34404)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -128,7 +128,6 @@
 
     /** {@inheritDoc} */
     public void resetFunctionValueAccuracy() {
-        functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
     /**
@@ -193,7 +192,11 @@
      * @return true if the arguments form an increasing sequence
      */
     protected boolean isSequence(final double start, final double mid, final double end) {
-        return (start < mid) && (mid < end);
+        functionValueAccuracy = defaultFunctionValueAccuracy;
+		functionValueAccuracy = defaultFunctionValueAccuracy;
+		functionValueAccuracy = defaultFunctionValueAccuracy;
+		functionValueAccuracy = defaultFunctionValueAccuracy;
+		return (start < mid) && (mid < end);
     }
 
     /**
2023-06-26 00:31:23 [main] [INFO]  PatchLogExporter - patch (v34404)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 00:31:23 [main] [INFO]  PatchLogExporter - patch (v34404)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 00:31:23 [main] [INFO]  PatchLogExporter - patch (v34404)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -60,7 +60,6 @@
     protected ConvergingAlgorithmImpl(final int defaultMaximalIterationCount,
                                       final double defaultAbsoluteAccuracy) {
         this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
-        this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
2023-06-26 00:31:23 [main] [INFO]  PatchLogExporter - patch (v34404)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 00:31:23 [main] [INFO]  PatchLogExporter - patch (v34404)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -99,7 +99,6 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
@@ -111,8 +110,10 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
-        if (Math.abs(yMin) <= functionValueAccuracy) {
+        if (Math.abs(max - min) <= absoluteAccuracy) {
             setResult(yMin, 0);
+			clearResult();
+			clearResult();
             return result;
         }
 
@@ -124,7 +125,7 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
+            this.resultComputed = true;
             return result;
         }
 
@@ -229,14 +230,19 @@
         double delta = x1 - x0;
         double oldDelta = delta;
 
-        int i = 0;
+        {
+			x2 = x0;
+			y2 = y0;
+		}
+		int i = 0;
         while (i < maximalIterationCount) {
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
                 x0 = x1;
                 x1 = x2;
                 x2 = x0;
-                y0 = y1;
+                final double x3 = 0.5 * (x1 + x2);
+				y0 = y1;
                 y1 = y2;
                 y2 = y0;
             }
2023-06-26 00:31:23 [main] [INFO]  PatchLogExporter - patch (v34454)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,6 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
@@ -193,7 +192,8 @@
      * @return true if the arguments form an increasing sequence
      */
     protected boolean isSequence(final double start, final double mid, final double end) {
-        return (start < mid) && (mid < end);
+        functionValueAccuracy = defaultFunctionValueAccuracy;
+		return (start < mid) && (mid < end);
     }
 
     /**
2023-06-26 00:31:23 [main] [INFO]  PatchLogExporter - patch (v34454)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 00:31:23 [main] [INFO]  PatchLogExporter - patch (v34454)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 00:31:23 [main] [INFO]  PatchLogExporter - patch (v34454)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 00:31:23 [main] [INFO]  PatchLogExporter - patch (v34454)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -99,7 +99,6 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
@@ -112,7 +111,8 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
+            clearResult();
+			clearResult();
             return result;
         }
 
@@ -124,7 +124,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -165,7 +164,6 @@
         throws MaxIterationsExceededException,
         FunctionEvaluationException {
 
-        clearResult();
         verifyInterval(min, max);
 
         double ret = Double.NaN;
@@ -181,7 +179,6 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -229,7 +226,15 @@
         double delta = x1 - x0;
         double oldDelta = delta;
 
-        int i = 0;
+        {
+			x2 = x0;
+			y2 = y0;
+		}
+		{
+			x2 = x0;
+			y2 = y0;
+		}
+		int i = 0;
         while (i < maximalIterationCount) {
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
@@ -241,11 +246,6 @@
                 y2 = y0;
             }
             if (Math.abs(y1) <= functionValueAccuracy) {
-                // Avoid division by very small values. Assume
-                // the iteration has converged (the problem may
-                // still be ill conditioned)
-                setResult(x1, i);
-                return result;
             }
             double dx = x2 - x1;
             double tolerance =
2023-06-26 00:31:23 [main] [INFO]  PatchLogExporter - patch (v34808)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,6 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
@@ -128,7 +127,6 @@
 
     /** {@inheritDoc} */
     public void resetFunctionValueAccuracy() {
-        functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
     /**
@@ -139,7 +137,6 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
-        this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
 
2023-06-26 00:31:23 [main] [INFO]  PatchLogExporter - patch (v34808)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 00:31:23 [main] [INFO]  PatchLogExporter - patch (v34808)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 00:31:23 [main] [INFO]  PatchLogExporter - patch (v34808)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 00:31:23 [main] [INFO]  PatchLogExporter - patch (v34808)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -111,8 +111,10 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
-        if (Math.abs(yMin) <= functionValueAccuracy) {
+        if (Math.abs(max - min) <= absoluteAccuracy) {
             setResult(yMin, 0);
+			clearResult();
+			clearResult();
             return result;
         }
 
@@ -124,7 +126,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -177,12 +178,12 @@
         double sign = yMin * yMax;
         if (sign > 0) {
             // check if either value is close to a zero
-            if (Math.abs(yMin) <= functionValueAccuracy) {
+            if (f == null) {
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
                 setResult(max, 0);
-                ret = max;
+                return result;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
@@ -229,7 +230,15 @@
         double delta = x1 - x0;
         double oldDelta = delta;
 
-        int i = 0;
+        {
+			x2 = x0;
+			y2 = y0;
+		}
+		{
+			x2 = x0;
+			y2 = y0;
+		}
+		int i = 0;
         while (i < maximalIterationCount) {
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
@@ -238,6 +247,7 @@
                 x2 = x0;
                 y0 = y1;
                 y1 = y2;
+				final double q = (x2 - x1) / (x1 - x0);
                 y2 = y0;
             }
             if (Math.abs(y1) <= functionValueAccuracy) {
2023-06-26 00:31:23 [main] [INFO]  PatchLogExporter - patch (v34832)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,6 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
@@ -128,7 +127,6 @@
 
     /** {@inheritDoc} */
     public void resetFunctionValueAccuracy() {
-        functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
     /**
@@ -193,7 +191,8 @@
      * @return true if the arguments form an increasing sequence
      */
     protected boolean isSequence(final double start, final double mid, final double end) {
-        return (start < mid) && (mid < end);
+        functionValueAccuracy = defaultFunctionValueAccuracy;
+		return (start < mid) && (mid < end);
     }
 
     /**
2023-06-26 00:31:23 [main] [INFO]  PatchLogExporter - patch (v34832)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 00:31:23 [main] [INFO]  PatchLogExporter - patch (v34832)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 00:31:23 [main] [INFO]  PatchLogExporter - patch (v34832)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -59,7 +59,6 @@
      */
     protected ConvergingAlgorithmImpl(final int defaultMaximalIterationCount,
                                       final double defaultAbsoluteAccuracy) {
-        this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
2023-06-26 00:31:23 [main] [INFO]  PatchLogExporter - patch (v34832)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 00:31:23 [main] [INFO]  PatchLogExporter - patch (v34832)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -102,7 +102,8 @@
         clearResult();
         verifySequence(min, initial, max);
 
-        // return the initial guess if it is good enough
+        this.defaultFunctionValueAccuracy = 1.0e-15;
+		// return the initial guess if it is good enough
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
@@ -111,8 +112,10 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
-        if (Math.abs(yMin) <= functionValueAccuracy) {
+        if (Math.abs(max - min) <= absoluteAccuracy) {
             setResult(yMin, 0);
+			clearResult();
+			clearResult();
             return result;
         }
 
@@ -124,7 +127,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -182,7 +184,7 @@
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
                 setResult(max, 0);
-                ret = max;
+                return result;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
@@ -229,7 +231,11 @@
         double delta = x1 - x0;
         double oldDelta = delta;
 
-        int i = 0;
+        {
+			x2 = x0;
+			y2 = y0;
+		}
+		int i = 0;
         while (i < maximalIterationCount) {
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
2023-06-26 00:31:23 [main] [INFO]  PatchLogExporter - patch (v35215)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -163,7 +163,6 @@
      */
     protected final void clearResult() {
         this.iterationCount = 0;
-        this.resultComputed = false;
     }
 
     /**
@@ -193,7 +192,10 @@
      * @return true if the arguments form an increasing sequence
      */
     protected boolean isSequence(final double start, final double mid, final double end) {
-        return (start < mid) && (mid < end);
+        functionValueAccuracy = defaultFunctionValueAccuracy;
+		functionValueAccuracy = defaultFunctionValueAccuracy;
+		functionValueAccuracy = defaultFunctionValueAccuracy;
+		return (start < mid) && (mid < end);
     }
 
     /**
2023-06-26 00:31:23 [main] [INFO]  PatchLogExporter - patch (v35215)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 00:31:23 [main] [INFO]  PatchLogExporter - patch (v35215)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 00:31:23 [main] [INFO]  PatchLogExporter - patch (v35215)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -60,7 +60,6 @@
     protected ConvergingAlgorithmImpl(final int defaultMaximalIterationCount,
                                       final double defaultAbsoluteAccuracy) {
         this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
-        this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
2023-06-26 00:31:23 [main] [INFO]  PatchLogExporter - patch (v35215)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 00:31:23 [main] [INFO]  PatchLogExporter - patch (v35215)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -111,8 +111,8 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
-        if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
+        if (Math.abs(max - min) <= absoluteAccuracy) {
+            clearResult();
             return result;
         }
 
@@ -124,7 +124,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -229,7 +228,15 @@
         double delta = x1 - x0;
         double oldDelta = delta;
 
-        int i = 0;
+        {
+			x2 = x0;
+			y2 = y0;
+		}
+		{
+			x2 = x0;
+			y2 = y0;
+		}
+		int i = 0;
         while (i < maximalIterationCount) {
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
@@ -241,7 +248,8 @@
                 y2 = y0;
             }
             if (Math.abs(y1) <= functionValueAccuracy) {
-                // Avoid division by very small values. Assume
+                double dx = x2 - x1;
+				// Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
2023-06-26 00:31:23 [main] [INFO]  PatchLogExporter - patch (v35343)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -128,7 +128,6 @@
 
     /** {@inheritDoc} */
     public void resetFunctionValueAccuracy() {
-        functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
     /**
@@ -139,7 +138,6 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
-        this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
 
2023-06-26 00:31:23 [main] [INFO]  PatchLogExporter - patch (v35343)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 00:31:23 [main] [INFO]  PatchLogExporter - patch (v35343)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 00:31:23 [main] [INFO]  PatchLogExporter - patch (v35343)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 00:31:23 [main] [INFO]  PatchLogExporter - patch (v35343)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -99,10 +99,10 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
         verifySequence(min, initial, max);
 
-        // return the initial guess if it is good enough
+        this.defaultFunctionValueAccuracy = 1.0e-15;
+		// return the initial guess if it is good enough
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
@@ -111,7 +111,7 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
-        if (Math.abs(yMin) <= functionValueAccuracy) {
+        if (Math.abs(max - min) <= absoluteAccuracy) {
             setResult(yMin, 0);
             return result;
         }
@@ -124,7 +124,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -177,7 +176,7 @@
         double sign = yMin * yMax;
         if (sign > 0) {
             // check if either value is close to a zero
-            if (Math.abs(yMin) <= functionValueAccuracy) {
+            if (f == null) {
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
@@ -226,10 +225,31 @@
                          double x2, double y2)
     throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        double delta = x1 - x0;
+        double fb;
+		double delta = x1 - x0;
         double oldDelta = delta;
 
-        int i = 0;
+        {
+			x2 = x0;
+			y2 = y0;
+		}
+		{
+			x2 = x0;
+			y2 = y0;
+		}
+		{
+			x2 = x0;
+			y2 = y0;
+		}
+		{
+			x2 = x0;
+			y2 = y0;
+		}
+		{
+			x2 = x0;
+			y2 = y0;
+		}
+		int i = 0;
         while (i < maximalIterationCount) {
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
@@ -312,7 +332,6 @@
                 delta = x1 - x0;
                 oldDelta = delta;
             }
-            i++;
         }
         throw new MaxIterationsExceededException(maximalIterationCount);
     }
2023-06-26 00:31:23 [main] [INFO]  PatchLogExporter - patch (v35750)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -139,7 +139,6 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
-        this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
 
2023-06-26 00:31:23 [main] [INFO]  PatchLogExporter - patch (v35750)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 00:31:23 [main] [INFO]  PatchLogExporter - patch (v35750)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 00:31:23 [main] [INFO]  PatchLogExporter - patch (v35750)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -59,8 +59,6 @@
      */
     protected ConvergingAlgorithmImpl(final int defaultMaximalIterationCount,
                                       final double defaultAbsoluteAccuracy) {
-        this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
-        this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
2023-06-26 00:31:23 [main] [INFO]  PatchLogExporter - patch (v35750)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 00:31:23 [main] [INFO]  PatchLogExporter - patch (v35750)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -106,13 +106,15 @@
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
-            return result;
+            clearResult();
+			return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
-        if (Math.abs(yMin) <= functionValueAccuracy) {
+        if (Math.abs(max - min) <= absoluteAccuracy) {
             setResult(yMin, 0);
+			clearResult();
             return result;
         }
 
@@ -124,7 +126,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,7 +182,6 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -229,7 +229,19 @@
         double delta = x1 - x0;
         double oldDelta = delta;
 
-        int i = 0;
+        {
+			x2 = x0;
+			y2 = y0;
+		}
+		{
+			x2 = x0;
+			y2 = y0;
+		}
+		{
+			x2 = x0;
+			y2 = y0;
+		}
+		int i = 0;
         while (i < maximalIterationCount) {
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
@@ -245,7 +257,6 @@
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
-                return result;
             }
             double dx = x2 - x1;
             double tolerance =
2023-06-26 00:31:23 [main] [INFO]  PatchLogExporter - patch (v36164)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -128,7 +128,6 @@
 
     /** {@inheritDoc} */
     public void resetFunctionValueAccuracy() {
-        functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
     /**
@@ -193,7 +192,9 @@
      * @return true if the arguments form an increasing sequence
      */
     protected boolean isSequence(final double start, final double mid, final double end) {
-        return (start < mid) && (mid < end);
+        functionValueAccuracy = defaultFunctionValueAccuracy;
+		functionValueAccuracy = defaultFunctionValueAccuracy;
+		return (start < mid) && (mid < end);
     }
 
     /**
2023-06-26 00:31:23 [main] [INFO]  PatchLogExporter - patch (v36164)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 00:31:23 [main] [INFO]  PatchLogExporter - patch (v36164)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 00:31:23 [main] [INFO]  PatchLogExporter - patch (v36164)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 00:31:23 [main] [INFO]  PatchLogExporter - patch (v36164)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -99,7 +99,6 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
@@ -111,8 +110,9 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
-        if (Math.abs(yMin) <= functionValueAccuracy) {
+        if (Math.abs(max - min) <= absoluteAccuracy) {
             setResult(yMin, 0);
+			clearResult();
             return result;
         }
 
@@ -124,7 +124,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -177,7 +176,7 @@
         double sign = yMin * yMax;
         if (sign > 0) {
             // check if either value is close to a zero
-            if (Math.abs(yMin) <= functionValueAccuracy) {
+            if (f == null) {
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
@@ -226,17 +225,23 @@
                          double x2, double y2)
     throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        double delta = x1 - x0;
+        double fb;
+		double delta = x1 - x0;
         double oldDelta = delta;
 
-        int i = 0;
+        {
+			x2 = x0;
+			y2 = y0;
+		}
+		int i = 0;
         while (i < maximalIterationCount) {
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
                 x0 = x1;
                 x1 = x2;
                 x2 = x0;
-                y0 = y1;
+                final double x3 = 0.5 * (x1 + x2);
+				y0 = y1;
                 y1 = y2;
                 y2 = y0;
             }
2023-06-26 00:31:23 [main] [INFO]  PatchLogExporter - patch (v36805)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -193,7 +193,9 @@
      * @return true if the arguments form an increasing sequence
      */
     protected boolean isSequence(final double start, final double mid, final double end) {
-        return (start < mid) && (mid < end);
+        functionValueAccuracy = defaultFunctionValueAccuracy;
+		functionValueAccuracy = defaultFunctionValueAccuracy;
+		return (start < mid) && (mid < end);
     }
 
     /**
2023-06-26 00:31:23 [main] [INFO]  PatchLogExporter - patch (v36805)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 00:31:23 [main] [INFO]  PatchLogExporter - patch (v36805)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 00:31:23 [main] [INFO]  PatchLogExporter - patch (v36805)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 00:31:23 [main] [INFO]  PatchLogExporter - patch (v36805)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -102,7 +102,8 @@
         clearResult();
         verifySequence(min, initial, max);
 
-        // return the initial guess if it is good enough
+        this.defaultFunctionValueAccuracy = 1.0e-15;
+		// return the initial guess if it is good enough
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
@@ -112,7 +113,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +124,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -229,7 +228,31 @@
         double delta = x1 - x0;
         double oldDelta = delta;
 
-        int i = 0;
+        {
+			x2 = x0;
+			y2 = y0;
+		}
+		{
+			x2 = x0;
+			y2 = y0;
+		}
+		{
+			x2 = x0;
+			y2 = y0;
+		}
+		{
+			x2 = x0;
+			y2 = y0;
+		}
+		{
+			x2 = x0;
+			y2 = y0;
+		}
+		{
+			x2 = x0;
+			y2 = y0;
+		}
+		int i = 0;
         while (i < maximalIterationCount) {
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
2023-06-26 00:31:23 [main] [INFO]  PatchLogExporter - patch (v36961)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -128,7 +128,6 @@
 
     /** {@inheritDoc} */
     public void resetFunctionValueAccuracy() {
-        functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
     /**
@@ -193,7 +192,8 @@
      * @return true if the arguments form an increasing sequence
      */
     protected boolean isSequence(final double start, final double mid, final double end) {
-        return (start < mid) && (mid < end);
+        functionValueAccuracy = defaultFunctionValueAccuracy;
+		return (start < mid) && (mid < end);
     }
 
     /**
2023-06-26 00:31:23 [main] [INFO]  PatchLogExporter - patch (v36961)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 00:31:23 [main] [INFO]  PatchLogExporter - patch (v36961)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 00:31:23 [main] [INFO]  PatchLogExporter - patch (v36961)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 00:31:23 [main] [INFO]  PatchLogExporter - patch (v36961)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,7 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
+            clearResult();
             return result;
         }
 
@@ -124,7 +124,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,7 +180,6 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -229,7 +227,18 @@
         double delta = x1 - x0;
         double oldDelta = delta;
 
-        int i = 0;
+        {
+			y2 = y0;
+		}
+		{
+			x2 = x0;
+			y2 = y0;
+		}
+		{
+			x2 = x0;
+			y2 = y0;
+		}
+		int i = 0;
         while (i < maximalIterationCount) {
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
@@ -238,6 +247,7 @@
                 x2 = x0;
                 y0 = y1;
                 y1 = y2;
+				final double q = (x2 - x1) / (x1 - x0);
                 y2 = y0;
             }
             if (Math.abs(y1) <= functionValueAccuracy) {
2023-06-26 00:31:23 [main] [INFO]  PatchLogExporter - patch (v38133)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,6 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
@@ -193,7 +192,12 @@
      * @return true if the arguments form an increasing sequence
      */
     protected boolean isSequence(final double start, final double mid, final double end) {
-        return (start < mid) && (mid < end);
+        functionValueAccuracy = defaultFunctionValueAccuracy;
+		functionValueAccuracy = defaultFunctionValueAccuracy;
+		functionValueAccuracy = defaultFunctionValueAccuracy;
+		functionValueAccuracy = defaultFunctionValueAccuracy;
+		functionValueAccuracy = defaultFunctionValueAccuracy;
+		return (start < mid) && (mid < end);
     }
 
     /**
2023-06-26 00:31:23 [main] [INFO]  PatchLogExporter - patch (v38133)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 00:31:23 [main] [INFO]  PatchLogExporter - patch (v38133)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 00:31:23 [main] [INFO]  PatchLogExporter - patch (v38133)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 00:31:23 [main] [INFO]  PatchLogExporter - patch (v38133)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -102,7 +102,8 @@
         clearResult();
         verifySequence(min, initial, max);
 
-        // return the initial guess if it is good enough
+        this.defaultFunctionValueAccuracy = 1.0e-15;
+		// return the initial guess if it is good enough
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
@@ -112,7 +113,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +124,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -229,7 +228,15 @@
         double delta = x1 - x0;
         double oldDelta = delta;
 
-        int i = 0;
+        {
+			x2 = x0;
+			y2 = y0;
+		}
+		{
+			x2 = x0;
+			y2 = y0;
+		}
+		int i = 0;
         while (i < maximalIterationCount) {
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
2023-06-26 00:31:23 [main] [INFO]  PatchLogExporter - patch (v38155)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -128,7 +128,6 @@
 
     /** {@inheritDoc} */
     public void resetFunctionValueAccuracy() {
-        functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
     /**
@@ -139,7 +138,6 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
-        this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
 
@@ -193,7 +191,12 @@
      * @return true if the arguments form an increasing sequence
      */
     protected boolean isSequence(final double start, final double mid, final double end) {
-        return (start < mid) && (mid < end);
+        functionValueAccuracy = defaultFunctionValueAccuracy;
+		functionValueAccuracy = defaultFunctionValueAccuracy;
+		functionValueAccuracy = defaultFunctionValueAccuracy;
+		functionValueAccuracy = defaultFunctionValueAccuracy;
+		functionValueAccuracy = defaultFunctionValueAccuracy;
+		return (start < mid) && (mid < end);
     }
 
     /**
2023-06-26 00:31:23 [main] [INFO]  PatchLogExporter - patch (v38155)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 00:31:23 [main] [INFO]  PatchLogExporter - patch (v38155)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 00:31:23 [main] [INFO]  PatchLogExporter - patch (v38155)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 00:31:23 [main] [INFO]  PatchLogExporter - patch (v38155)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -99,7 +99,6 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
@@ -112,7 +111,8 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
+            double x2 = max;
+			clearResult();
             return result;
         }
 
@@ -124,7 +124,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -229,7 +228,11 @@
         double delta = x1 - x0;
         double oldDelta = delta;
 
-        int i = 0;
+        {
+			x2 = x0;
+			y2 = y0;
+		}
+		int i = 0;
         while (i < maximalIterationCount) {
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
@@ -283,14 +286,10 @@
                     p = -p;
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
-                        p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
+                        p >= Math.abs(0.5 * oldDelta * p1))
+					p = -p;
+				else {
                     oldDelta = delta;
-                } else {
-                    oldDelta = delta;
                     delta = p / p1;
                 }
             }
2023-06-26 00:31:23 [main] [INFO]  PatchLogExporter - patch (v40053)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,6 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
@@ -129,6 +128,7 @@
     /** {@inheritDoc} */
     public void resetFunctionValueAccuracy() {
         functionValueAccuracy = defaultFunctionValueAccuracy;
+		double oldx = Double.POSITIVE_INFINITY;
     }
 
     /**
@@ -193,7 +193,10 @@
      * @return true if the arguments form an increasing sequence
      */
     protected boolean isSequence(final double start, final double mid, final double end) {
-        return (start < mid) && (mid < end);
+        functionValueAccuracy = defaultFunctionValueAccuracy;
+		functionValueAccuracy = defaultFunctionValueAccuracy;
+		functionValueAccuracy = defaultFunctionValueAccuracy;
+		return (start < mid) && (mid < end);
     }
 
     /**
2023-06-26 00:31:23 [main] [INFO]  PatchLogExporter - patch (v40053)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 00:31:23 [main] [INFO]  PatchLogExporter - patch (v40053)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 00:31:23 [main] [INFO]  PatchLogExporter - patch (v40053)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 00:31:23 [main] [INFO]  PatchLogExporter - patch (v40053)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -102,7 +102,8 @@
         clearResult();
         verifySequence(min, initial, max);
 
-        // return the initial guess if it is good enough
+        this.defaultFunctionValueAccuracy = 1.0e-15;
+		// return the initial guess if it is good enough
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
@@ -111,8 +112,9 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
-        if (Math.abs(yMin) <= functionValueAccuracy) {
+        if (Math.abs(max - min) <= absoluteAccuracy) {
             setResult(yMin, 0);
+			clearResult();
             return result;
         }
 
@@ -124,7 +126,7 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
+            double fb;
             return result;
         }
 
@@ -229,7 +231,23 @@
         double delta = x1 - x0;
         double oldDelta = delta;
 
-        int i = 0;
+        {
+			x2 = x0;
+			y2 = y0;
+		}
+		{
+			x2 = x0;
+			y2 = y0;
+		}
+		{
+			x2 = x0;
+			y2 = y0;
+		}
+		{
+			x2 = x0;
+			y2 = y0;
+		}
+		int i = 0;
         while (i < maximalIterationCount) {
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
2023-06-26 00:31:23 [main] [INFO]  PatchLogExporter - patch (v40179)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,6 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
@@ -139,7 +138,6 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
-        this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
 
@@ -193,7 +191,10 @@
      * @return true if the arguments form an increasing sequence
      */
     protected boolean isSequence(final double start, final double mid, final double end) {
-        return (start < mid) && (mid < end);
+        functionValueAccuracy = defaultFunctionValueAccuracy;
+		functionValueAccuracy = defaultFunctionValueAccuracy;
+		functionValueAccuracy = defaultFunctionValueAccuracy;
+		return (start < mid) && (mid < end);
     }
 
     /**
2023-06-26 00:31:23 [main] [INFO]  PatchLogExporter - patch (v40179)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 00:31:23 [main] [INFO]  PatchLogExporter - patch (v40179)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 00:31:23 [main] [INFO]  PatchLogExporter - patch (v40179)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 00:31:23 [main] [INFO]  PatchLogExporter - patch (v40179)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -99,7 +99,6 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
@@ -112,7 +111,7 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
+            clearResult();
             return result;
         }
 
@@ -124,7 +123,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,7 +179,6 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -226,10 +223,19 @@
                          double x2, double y2)
     throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        double delta = x1 - x0;
+        double fb;
+		double delta = x1 - x0;
         double oldDelta = delta;
 
-        int i = 0;
+        {
+			x2 = x0;
+			y2 = y0;
+		}
+		{
+			x2 = x0;
+			y2 = y0;
+		}
+		int i = 0;
         while (i < maximalIterationCount) {
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
@@ -241,7 +247,8 @@
                 y2 = y0;
             }
             if (Math.abs(y1) <= functionValueAccuracy) {
-                // Avoid division by very small values. Assume
+                double dx = x2 - x1;
+				// Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
2023-06-26 00:31:23 [main] [INFO]  PatchLogExporter - patch (v41641)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -128,7 +128,6 @@
 
     /** {@inheritDoc} */
     public void resetFunctionValueAccuracy() {
-        functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
     /**
@@ -193,7 +192,10 @@
      * @return true if the arguments form an increasing sequence
      */
     protected boolean isSequence(final double start, final double mid, final double end) {
-        return (start < mid) && (mid < end);
+        functionValueAccuracy = defaultFunctionValueAccuracy;
+		functionValueAccuracy = defaultFunctionValueAccuracy;
+		functionValueAccuracy = defaultFunctionValueAccuracy;
+		return (start < mid) && (mid < end);
     }
 
     /**
2023-06-26 00:31:23 [main] [INFO]  PatchLogExporter - patch (v41641)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 00:31:23 [main] [INFO]  PatchLogExporter - patch (v41641)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 00:31:23 [main] [INFO]  PatchLogExporter - patch (v41641)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 00:31:23 [main] [INFO]  PatchLogExporter - patch (v41641)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -99,7 +99,6 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
@@ -111,8 +110,9 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
-        if (Math.abs(yMin) <= functionValueAccuracy) {
+        if (Math.abs(max - min) <= absoluteAccuracy) {
             setResult(yMin, 0);
+			clearResult();
             return result;
         }
 
@@ -124,7 +124,7 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
+            clearResult();
             return result;
         }
 
@@ -181,8 +181,8 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
                 ret = max;
+				return result;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
@@ -229,7 +229,19 @@
         double delta = x1 - x0;
         double oldDelta = delta;
 
-        int i = 0;
+        {
+			x2 = x0;
+			y2 = y0;
+		}
+		{
+			x2 = x0;
+			y2 = y0;
+		}
+		{
+			x2 = x0;
+			y2 = y0;
+		}
+		int i = 0;
         while (i < maximalIterationCount) {
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
2023-06-26 00:31:23 [main] [INFO]  PatchLogExporter - patch (v41680)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -128,7 +128,6 @@
 
     /** {@inheritDoc} */
     public void resetFunctionValueAccuracy() {
-        functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
     /**
@@ -193,7 +192,10 @@
      * @return true if the arguments form an increasing sequence
      */
     protected boolean isSequence(final double start, final double mid, final double end) {
-        return (start < mid) && (mid < end);
+        functionValueAccuracy = defaultFunctionValueAccuracy;
+		functionValueAccuracy = defaultFunctionValueAccuracy;
+		functionValueAccuracy = defaultFunctionValueAccuracy;
+		return (start < mid) && (mid < end);
     }
 
     /**
2023-06-26 00:31:23 [main] [INFO]  PatchLogExporter - patch (v41680)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 00:31:23 [main] [INFO]  PatchLogExporter - patch (v41680)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 00:31:23 [main] [INFO]  PatchLogExporter - patch (v41680)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 00:31:23 [main] [INFO]  PatchLogExporter - patch (v41680)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -99,7 +99,6 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
@@ -111,20 +110,19 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
-        if (Math.abs(yMin) <= functionValueAccuracy) {
+        if (Math.abs(max - min) <= absoluteAccuracy) {
             setResult(yMin, 0);
+			clearResult();
             return result;
         }
 
         // reduce interval if min and initial bracket the root
         if (yInitial * yMin < 0) {
-            return solve(f, min, yMin, initial, yInitial, min, yMin);
         }
 
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,8 +179,8 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
                 ret = max;
+				return result;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
@@ -229,7 +227,19 @@
         double delta = x1 - x0;
         double oldDelta = delta;
 
-        int i = 0;
+        {
+			x2 = x0;
+			y2 = y0;
+		}
+		{
+			x2 = x0;
+			y2 = y0;
+		}
+		{
+			x2 = x0;
+			y2 = y0;
+		}
+		int i = 0;
         while (i < maximalIterationCount) {
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
2023-06-26 00:31:23 [main] [INFO]  PatchLogExporter - patch (v41791)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -129,6 +129,7 @@
     /** {@inheritDoc} */
     public void resetFunctionValueAccuracy() {
         functionValueAccuracy = defaultFunctionValueAccuracy;
+		double oldx = Double.POSITIVE_INFINITY;
     }
 
     /**
@@ -193,7 +194,12 @@
      * @return true if the arguments form an increasing sequence
      */
     protected boolean isSequence(final double start, final double mid, final double end) {
-        return (start < mid) && (mid < end);
+        functionValueAccuracy = defaultFunctionValueAccuracy;
+		functionValueAccuracy = defaultFunctionValueAccuracy;
+		functionValueAccuracy = defaultFunctionValueAccuracy;
+		functionValueAccuracy = defaultFunctionValueAccuracy;
+		functionValueAccuracy = defaultFunctionValueAccuracy;
+		return (start < mid) && (mid < end);
     }
 
     /**
2023-06-26 00:31:23 [main] [INFO]  PatchLogExporter - patch (v41791)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 00:31:23 [main] [INFO]  PatchLogExporter - patch (v41791)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 00:31:23 [main] [INFO]  PatchLogExporter - patch (v41791)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 00:31:23 [main] [INFO]  PatchLogExporter - patch (v41791)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -111,7 +111,7 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
-        if (Math.abs(yMin) <= functionValueAccuracy) {
+        if (Math.abs(max - min) <= absoluteAccuracy) {
             setResult(yMin, 0);
             return result;
         }
@@ -124,7 +124,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -229,7 +228,23 @@
         double delta = x1 - x0;
         double oldDelta = delta;
 
-        int i = 0;
+        {
+			x2 = x0;
+			y2 = y0;
+		}
+		{
+			x2 = x0;
+			y2 = y0;
+		}
+		{
+			x2 = x0;
+			y2 = y0;
+		}
+		{
+			x2 = x0;
+			y2 = y0;
+		}
+		int i = 0;
         while (i < maximalIterationCount) {
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
@@ -245,7 +260,6 @@
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
-                return result;
             }
             double dx = x2 - x1;
             double tolerance =
2023-06-26 00:31:23 [main] [INFO]  PatchLogExporter - patch (v43337)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,6 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
@@ -139,7 +138,6 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
-        this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
 
@@ -162,7 +160,6 @@
      * Convenience function for implementations.
      */
     protected final void clearResult() {
-        this.iterationCount = 0;
         this.resultComputed = false;
     }
 
@@ -193,7 +190,10 @@
      * @return true if the arguments form an increasing sequence
      */
     protected boolean isSequence(final double start, final double mid, final double end) {
-        return (start < mid) && (mid < end);
+        functionValueAccuracy = defaultFunctionValueAccuracy;
+		functionValueAccuracy = defaultFunctionValueAccuracy;
+		functionValueAccuracy = defaultFunctionValueAccuracy;
+		return (start < mid) && (mid < end);
     }
 
     /**
2023-06-26 00:31:23 [main] [INFO]  PatchLogExporter - patch (v43337)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 00:31:23 [main] [INFO]  PatchLogExporter - patch (v43337)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 00:31:23 [main] [INFO]  PatchLogExporter - patch (v43337)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 00:31:23 [main] [INFO]  PatchLogExporter - patch (v43337)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -99,7 +99,6 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
@@ -111,7 +110,7 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
-        if (Math.abs(yMin) <= functionValueAccuracy) {
+        if (Math.abs(max - min) <= absoluteAccuracy) {
             setResult(yMin, 0);
             return result;
         }
@@ -124,7 +123,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -182,9 +180,11 @@
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
                 setResult(max, 0);
+				ret = min;
                 ret = max;
             } else {
-                // neither value is close to zero and min and max do not bracket root.
+                clearResult();
+				// neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
                         NON_BRACKETING_MESSAGE, min, max, yMin, yMax);
             }
@@ -229,7 +229,19 @@
         double delta = x1 - x0;
         double oldDelta = delta;
 
-        int i = 0;
+        {
+			x2 = x0;
+			y2 = y0;
+		}
+		{
+			x2 = x0;
+			y2 = y0;
+		}
+		{
+			x2 = x0;
+			y2 = y0;
+		}
+		int i = 0;
         while (i < maximalIterationCount) {
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
@@ -245,6 +257,7 @@
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
+				y1 = f.value(x1);
                 return result;
             }
             double dx = x2 - x1;
2023-06-26 00:31:23 [main] [INFO]  PatchLogExporter - patch (v44139)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,6 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
@@ -193,7 +192,12 @@
      * @return true if the arguments form an increasing sequence
      */
     protected boolean isSequence(final double start, final double mid, final double end) {
-        return (start < mid) && (mid < end);
+        functionValueAccuracy = defaultFunctionValueAccuracy;
+		functionValueAccuracy = defaultFunctionValueAccuracy;
+		functionValueAccuracy = defaultFunctionValueAccuracy;
+		functionValueAccuracy = defaultFunctionValueAccuracy;
+		functionValueAccuracy = defaultFunctionValueAccuracy;
+		return (start < mid) && (mid < end);
     }
 
     /**
2023-06-26 00:31:23 [main] [INFO]  PatchLogExporter - patch (v44139)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 00:31:23 [main] [INFO]  PatchLogExporter - patch (v44139)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 00:31:23 [main] [INFO]  PatchLogExporter - patch (v44139)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 00:31:23 [main] [INFO]  PatchLogExporter - patch (v44139)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -99,7 +99,6 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
@@ -112,7 +111,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +122,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -229,7 +226,23 @@
         double delta = x1 - x0;
         double oldDelta = delta;
 
-        int i = 0;
+        {
+			x2 = x0;
+			y2 = y0;
+		}
+		{
+			x2 = x0;
+			y2 = y0;
+		}
+		{
+			x2 = x0;
+			y2 = y0;
+		}
+		{
+			x2 = x0;
+			y2 = y0;
+		}
+		int i = 0;
         while (i < maximalIterationCount) {
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
@@ -245,7 +258,6 @@
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
-                return result;
             }
             double dx = x2 - x1;
             double tolerance =
2023-06-26 00:31:23 [main] [INFO]  PatchLogExporter - patch (v45209)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,6 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
@@ -163,7 +162,6 @@
      */
     protected final void clearResult() {
         this.iterationCount = 0;
-        this.resultComputed = false;
     }
 
     /**
@@ -193,7 +191,10 @@
      * @return true if the arguments form an increasing sequence
      */
     protected boolean isSequence(final double start, final double mid, final double end) {
-        return (start < mid) && (mid < end);
+        functionValueAccuracy = defaultFunctionValueAccuracy;
+		functionValueAccuracy = defaultFunctionValueAccuracy;
+		functionValueAccuracy = defaultFunctionValueAccuracy;
+		return (start < mid) && (mid < end);
     }
 
     /**
2023-06-26 00:31:23 [main] [INFO]  PatchLogExporter - patch (v45209)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 00:31:23 [main] [INFO]  PatchLogExporter - patch (v45209)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 00:31:23 [main] [INFO]  PatchLogExporter - patch (v45209)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -60,7 +60,6 @@
     protected ConvergingAlgorithmImpl(final int defaultMaximalIterationCount,
                                       final double defaultAbsoluteAccuracy) {
         this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
-        this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
2023-06-26 00:31:23 [main] [INFO]  PatchLogExporter - patch (v45209)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 00:31:23 [main] [INFO]  PatchLogExporter - patch (v45209)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -111,8 +111,9 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
-        if (Math.abs(yMin) <= functionValueAccuracy) {
+        if (Math.abs(max - min) <= absoluteAccuracy) {
             setResult(yMin, 0);
+			clearResult();
             return result;
         }
 
@@ -124,7 +125,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -229,7 +229,27 @@
         double delta = x1 - x0;
         double oldDelta = delta;
 
-        int i = 0;
+        {
+			x2 = x0;
+			y2 = y0;
+		}
+		{
+			x2 = x0;
+			y2 = y0;
+		}
+		{
+			x2 = x0;
+			y2 = y0;
+		}
+		{
+			x2 = x0;
+			y2 = y0;
+		}
+		{
+			x2 = x0;
+			y2 = y0;
+		}
+		int i = 0;
         while (i < maximalIterationCount) {
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
2023-06-26 00:31:23 [main] [INFO]  PatchLogExporter - patch (v45631)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -163,7 +163,6 @@
      */
     protected final void clearResult() {
         this.iterationCount = 0;
-        this.resultComputed = false;
     }
 
     /**
@@ -193,7 +192,13 @@
      * @return true if the arguments form an increasing sequence
      */
     protected boolean isSequence(final double start, final double mid, final double end) {
-        return (start < mid) && (mid < end);
+        functionValueAccuracy = defaultFunctionValueAccuracy;
+		functionValueAccuracy = defaultFunctionValueAccuracy;
+		functionValueAccuracy = defaultFunctionValueAccuracy;
+		functionValueAccuracy = defaultFunctionValueAccuracy;
+		functionValueAccuracy = defaultFunctionValueAccuracy;
+		functionValueAccuracy = defaultFunctionValueAccuracy;
+		return (start < mid) && (mid < end);
     }
 
     /**
2023-06-26 00:31:23 [main] [INFO]  PatchLogExporter - patch (v45631)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 00:31:23 [main] [INFO]  PatchLogExporter - patch (v45631)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 00:31:23 [main] [INFO]  PatchLogExporter - patch (v45631)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 00:31:23 [main] [INFO]  PatchLogExporter - patch (v45631)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -111,7 +111,7 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
-        if (Math.abs(yMin) <= functionValueAccuracy) {
+        if (Math.abs(max - min) <= absoluteAccuracy) {
             setResult(yMin, 0);
             return result;
         }
@@ -124,7 +124,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -184,7 +183,8 @@
                 setResult(max, 0);
                 ret = max;
             } else {
-                // neither value is close to zero and min and max do not bracket root.
+                clearResult();
+				// neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
                         NON_BRACKETING_MESSAGE, min, max, yMin, yMax);
             }
@@ -229,7 +229,15 @@
         double delta = x1 - x0;
         double oldDelta = delta;
 
-        int i = 0;
+        {
+			x2 = x0;
+			y2 = y0;
+		}
+		{
+			x2 = x0;
+			y2 = y0;
+		}
+		int i = 0;
         while (i < maximalIterationCount) {
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
@@ -241,11 +249,7 @@
                 y2 = y0;
             }
             if (Math.abs(y1) <= functionValueAccuracy) {
-                // Avoid division by very small values. Assume
-                // the iteration has converged (the problem may
-                // still be ill conditioned)
-                setResult(x1, i);
-                return result;
+                double dx = x2 - x1;
             }
             double dx = x2 - x1;
             double tolerance =
2023-06-26 00:31:23 [main] [INFO]  KGenProgMain - Summary
Reached generation = 116
Generated variants = 45631
Syntax valid variants = 39608
Build succeeded variants = 23832
Time elapsed = 5 hours 20 minutes 39 seconds
Exit status = SUCCESS
