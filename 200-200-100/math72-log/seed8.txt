2023-07-02 22:26:54 [main] [WARN]  Configuration$Builder - The directory where kGenProg is running is different from the root directory of the given target project.
2023-07-02 22:26:54 [main] [WARN]  Configuration$Builder - If the target project includes test cases with file I/O, such test cases won't run correctly.
2023-07-02 22:26:54 [main] [WARN]  Configuration$Builder - We recommend you running kGenProg with the root directory of the target project as the current directory.
2023-07-02 22:26:54 [main] [INFO]  KGenProgMain - 
==================== kGenProg Configuration ====================
configPath = /Users/haradakanon/Downloads/kGenProg-1.8.2/example/math72/kgenprog-72.toml (set by command line)
rootDir = /Users/haradakanon/Downloads/kGenProg-1.8.2/example/math72 (set in config file)
productPaths = [/Users/haradakanon/Downloads/kGenProg-1.8.2/example/math72/src/main] (set in config file)
testPaths = [/Users/haradakanon/Downloads/kGenProg-1.8.2/example/math72/src/test] (set in config file)
classPaths = []
executionTests = [org.apache.commons.math.analysis.solvers.BrentSolverTest] (set in config file)
outDir = kgenprog-out
logLevel = INFO (set in config file)
mutationGeneratingCount = 200 (set in config file)
crossoverGeneratingCount = 200 (set in config file)
headcount = 100
maxGeneration = 1000 (set in config file)
timeLimit = PT24H (set in config file)
testTimeLimit = PT3M (set in config file)
requiredSolutionsCount = 100 (set in config file)
randomSeed = 8 (set by command line)
scope = PACKAGE (set in config file)
faultLocalization = Zoltar (set in config file)
mutationType = Simple
crossoverType = Random
firstVariantSelectionStrategy = Random
secondVariantSelectionStrategy = Random
isPatchOutput = true (set in config file)
isHistoryRecord = false
currentDirectory = /Users/haradakanon/Desktop/研究/実験データ/research
version = 1.8.2
================================================================
2023-07-02 22:27:13 [main] [INFO]  KGenProgMain - initial failed tests (1/6)
org.apache.commons.math.analysis.solvers.BrentSolverTest.testRootEndpoints: null

2023-07-02 22:27:13 [main] [INFO]  KGenProgMain - GA started
2023-07-02 22:27:13 [main] [INFO]  KGenProgMain - entered the era of 1st generation.
2023-07-02 22:27:28 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 14 seconds
Variants: generated 200, build-succeeded 39, build-failed 90, syntax-invalid 12, redundant 59
Fitness: max 0.833(26), min 0.167(7), ave 0.688
Test execution time: sum 4267 ms, max 292 ms, min 63 ms
----------------------------------------------------------------

2023-07-02 22:27:28 [main] [INFO]  KGenProgMain - entered the era of 2nd generation.
2023-07-02 22:27:39 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 26 seconds
Variants: generated 200, build-succeeded 57, build-failed 104, syntax-invalid 17, redundant 22
Fitness: max 1(3), min 0(1), ave 0.711
Test execution time: sum 4130 ms, max 324 ms, min 56 ms
----------------------------------------------------------------

2023-07-02 22:27:39 [main] [INFO]  KGenProgMain - entered the era of 3rd generation.
2023-07-02 22:43:00 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 15 minutes 46 seconds
Variants: generated 400, build-succeeded 150, build-failed 105, syntax-invalid 29, redundant 116
Fitness: max 1(2), min 0.167(28), ave 0.65
Test execution time: sum 909387 ms, max 900118 ms, min 51 ms
----------------------------------------------------------------

2023-07-02 22:43:00 [main] [INFO]  KGenProgMain - entered the era of 4th generation.
2023-07-02 22:43:19 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 16 minutes 5 seconds
Variants: generated 400, build-succeeded 121, build-failed 113, syntax-invalid 42, redundant 124
Fitness: max 0.833(107), min 0.167(4), ave 0.795
Test execution time: sum 7391 ms, max 200 ms, min 51 ms
----------------------------------------------------------------

2023-07-02 22:43:19 [main] [INFO]  KGenProgMain - entered the era of 5th generation.
2023-07-02 22:43:37 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 16 minutes 23 seconds
Variants: generated 400, build-succeeded 127, build-failed 122, syntax-invalid 38, redundant 113
Fitness: max 1(1), min 0.167(9), ave 0.769
Test execution time: sum 7449 ms, max 131 ms, min 52 ms
----------------------------------------------------------------

2023-07-02 22:43:37 [main] [INFO]  KGenProgMain - entered the era of 6th generation.
2023-07-02 22:43:56 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 16 minutes 42 seconds
Variants: generated 400, build-succeeded 144, build-failed 109, syntax-invalid 56, redundant 91
Fitness: max 1(1), min 0.167(11), ave 0.778
Test execution time: sum 8237 ms, max 123 ms, min 52 ms
----------------------------------------------------------------

2023-07-02 22:43:56 [main] [INFO]  KGenProgMain - entered the era of 7th generation.
2023-07-02 22:44:16 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 17 minutes 2 seconds
Variants: generated 400, build-succeeded 153, build-failed 98, syntax-invalid 51, redundant 98
Fitness: max 0.833(134), min 0.167(10), ave 0.779
Test execution time: sum 8749 ms, max 138 ms, min 51 ms
----------------------------------------------------------------

2023-07-02 22:44:16 [main] [INFO]  KGenProgMain - entered the era of 8th generation.
2023-07-02 22:44:35 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 17 minutes 21 seconds
Variants: generated 400, build-succeeded 140, build-failed 121, syntax-invalid 72, redundant 67
Fitness: max 0.833(120), min 0.167(7), ave 0.78
Test execution time: sum 8133 ms, max 124 ms, min 53 ms
----------------------------------------------------------------

2023-07-02 22:44:35 [main] [INFO]  KGenProgMain - entered the era of 9th generation.
2023-07-02 22:44:55 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 17 minutes 41 seconds
Variants: generated 400, build-succeeded 163, build-failed 99, syntax-invalid 58, redundant 80
Fitness: max 0.833(142), min 0.167(6), ave 0.788
Test execution time: sum 9410 ms, max 134 ms, min 51 ms
----------------------------------------------------------------

2023-07-02 22:44:55 [main] [INFO]  KGenProgMain - entered the era of 10th generation.
2023-07-02 22:45:15 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 18 minutes 1 seconds
Variants: generated 400, build-succeeded 151, build-failed 111, syntax-invalid 67, redundant 71
Fitness: max 0.833(135), min 0.167(8), ave 0.785
Test execution time: sum 8780 ms, max 116 ms, min 52 ms
----------------------------------------------------------------

2023-07-02 22:45:15 [main] [INFO]  KGenProgMain - entered the era of 11th generation.
2023-07-02 22:45:38 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 18 minutes 24 seconds
Variants: generated 400, build-succeeded 174, build-failed 111, syntax-invalid 57, redundant 58
Fitness: max 0.833(157), min 0.167(6), ave 0.799
Test execution time: sum 10290 ms, max 127 ms, min 52 ms
----------------------------------------------------------------

2023-07-02 22:45:38 [main] [INFO]  KGenProgMain - entered the era of 12th generation.
2023-07-02 22:46:02 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 18 minutes 48 seconds
Variants: generated 400, build-succeeded 188, build-failed 117, syntax-invalid 53, redundant 42
Fitness: max 1(1), min 0.167(10), ave 0.785
Test execution time: sum 10830 ms, max 156 ms, min 52 ms
----------------------------------------------------------------

2023-07-02 22:46:02 [main] [INFO]  KGenProgMain - entered the era of 13th generation.
2023-07-02 22:46:25 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 19 minutes 11 seconds
Variants: generated 400, build-succeeded 170, build-failed 102, syntax-invalid 62, redundant 66
Fitness: max 0.833(153), min 0.167(6), ave 0.792
Test execution time: sum 10035 ms, max 124 ms, min 52 ms
----------------------------------------------------------------

2023-07-02 22:46:25 [main] [INFO]  KGenProgMain - entered the era of 14th generation.
2023-07-02 22:46:49 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 19 minutes 35 seconds
Variants: generated 400, build-succeeded 183, build-failed 105, syntax-invalid 62, redundant 50
Fitness: max 0.833(159), min 0.167(13), ave 0.776
Test execution time: sum 10926 ms, max 196 ms, min 51 ms
----------------------------------------------------------------

2023-07-02 22:46:49 [main] [INFO]  KGenProgMain - entered the era of 15th generation.
2023-07-02 22:47:12 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 19 minutes 58 seconds
Variants: generated 400, build-succeeded 168, build-failed 127, syntax-invalid 65, redundant 40
Fitness: max 1(1), min 0.167(13), ave 0.777
Test execution time: sum 9733 ms, max 108 ms, min 52 ms
----------------------------------------------------------------

2023-07-02 22:47:12 [main] [INFO]  KGenProgMain - entered the era of 16th generation.
2023-07-02 22:47:37 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 20 minutes 23 seconds
Variants: generated 400, build-succeeded 183, build-failed 108, syntax-invalid 72, redundant 37
Fitness: max 1(2), min 0(1), ave 0.771
Test execution time: sum 10900 ms, max 182 ms, min 52 ms
----------------------------------------------------------------

2023-07-02 22:47:37 [main] [INFO]  KGenProgMain - entered the era of 17th generation.
2023-07-02 22:48:01 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 20 minutes 47 seconds
Variants: generated 400, build-succeeded 177, build-failed 118, syntax-invalid 73, redundant 32
Fitness: max 1(1), min 0.167(9), ave 0.793
Test execution time: sum 10563 ms, max 196 ms, min 51 ms
----------------------------------------------------------------

2023-07-02 22:48:01 [main] [INFO]  KGenProgMain - entered the era of 18th generation.
2023-07-02 23:03:27 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 36 minutes 13 seconds
Variants: generated 400, build-succeeded 190, build-failed 124, syntax-invalid 56, redundant 30
Fitness: max 1(2), min 0.167(15), ave 0.774
Test execution time: sum 911496 ms, max 900106 ms, min 51 ms
----------------------------------------------------------------

2023-07-02 23:03:27 [main] [INFO]  KGenProgMain - entered the era of 19th generation.
2023-07-02 23:03:54 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 36 minutes 40 seconds
Variants: generated 400, build-succeeded 204, build-failed 111, syntax-invalid 51, redundant 34
Fitness: max 1(4), min 0(1), ave 0.801
Test execution time: sum 12209 ms, max 183 ms, min 52 ms
----------------------------------------------------------------

2023-07-02 23:03:54 [main] [INFO]  KGenProgMain - entered the era of 20th generation.
2023-07-02 23:04:20 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 37 minutes 6 seconds
Variants: generated 400, build-succeeded 193, build-failed 107, syntax-invalid 60, redundant 40
Fitness: max 1(2), min 0.167(8), ave 0.798
Test execution time: sum 11258 ms, max 118 ms, min 52 ms
----------------------------------------------------------------

2023-07-02 23:04:20 [main] [INFO]  KGenProgMain - entered the era of 21st generation.
2023-07-02 23:04:48 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 37 minutes 34 seconds
Variants: generated 400, build-succeeded 207, build-failed 106, syntax-invalid 56, redundant 31
Fitness: max 1(2), min 0.167(13), ave 0.784
Test execution time: sum 12238 ms, max 184 ms, min 51 ms
----------------------------------------------------------------

2023-07-02 23:04:48 [main] [INFO]  KGenProgMain - entered the era of 22nd generation.
2023-07-02 23:05:16 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 38 minutes 2 seconds
Variants: generated 400, build-succeeded 201, build-failed 123, syntax-invalid 51, redundant 25
Fitness: max 1(1), min 0.167(11), ave 0.788
Test execution time: sum 11926 ms, max 124 ms, min 52 ms
----------------------------------------------------------------

2023-07-02 23:05:16 [main] [INFO]  KGenProgMain - entered the era of 23rd generation.
2023-07-02 23:05:44 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 38 minutes 30 seconds
Variants: generated 400, build-succeeded 210, build-failed 106, syntax-invalid 62, redundant 22
Fitness: max 0.833(178), min 0.167(14), ave 0.766
Test execution time: sum 12323 ms, max 148 ms, min 51 ms
----------------------------------------------------------------

2023-07-02 23:05:44 [main] [INFO]  KGenProgMain - entered the era of 24th generation.
2023-07-02 23:06:13 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 38 minutes 59 seconds
Variants: generated 400, build-succeeded 212, build-failed 113, syntax-invalid 53, redundant 22
Fitness: max 0.833(182), min 0.167(16), ave 0.767
Test execution time: sum 12521 ms, max 186 ms, min 52 ms
----------------------------------------------------------------

2023-07-02 23:06:13 [main] [INFO]  KGenProgMain - entered the era of 25th generation.
2023-07-02 23:06:41 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 39 minutes 27 seconds
Variants: generated 400, build-succeeded 193, build-failed 105, syntax-invalid 71, redundant 31
Fitness: max 0.833(166), min 0.167(16), ave 0.769
Test execution time: sum 11599 ms, max 205 ms, min 51 ms
----------------------------------------------------------------

2023-07-02 23:06:41 [main] [INFO]  KGenProgMain - entered the era of 26th generation.
2023-07-02 23:07:10 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 39 minutes 56 seconds
Variants: generated 400, build-succeeded 213, build-failed 116, syntax-invalid 52, redundant 19
Fitness: max 1(2), min 0.167(12), ave 0.788
Test execution time: sum 12637 ms, max 137 ms, min 52 ms
----------------------------------------------------------------

2023-07-02 23:07:10 [main] [INFO]  KGenProgMain - entered the era of 27th generation.
2023-07-02 23:07:38 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 40 minutes 24 seconds
Variants: generated 400, build-succeeded 196, build-failed 117, syntax-invalid 65, redundant 22
Fitness: max 0.833(168), min 0.167(15), ave 0.768
Test execution time: sum 11714 ms, max 125 ms, min 52 ms
----------------------------------------------------------------

2023-07-02 23:07:38 [main] [INFO]  KGenProgMain - entered the era of 28th generation.
2023-07-02 23:23:07 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 55 minutes 53 seconds
Variants: generated 400, build-succeeded 202, build-failed 109, syntax-invalid 66, redundant 23
Fitness: max 1(1), min 0.167(12), ave 0.788
Test execution time: sum 912393 ms, max 900145 ms, min 53 ms
----------------------------------------------------------------

2023-07-02 23:23:07 [main] [INFO]  KGenProgMain - entered the era of 29th generation.
2023-07-02 23:23:36 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 56 minutes 22 seconds
Variants: generated 400, build-succeeded 204, build-failed 116, syntax-invalid 55, redundant 25
Fitness: max 0.833(183), min 0.167(13), ave 0.783
Test execution time: sum 12095 ms, max 123 ms, min 52 ms
----------------------------------------------------------------

2023-07-02 23:23:36 [main] [INFO]  KGenProgMain - entered the era of 30th generation.
2023-07-02 23:24:03 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 56 minutes 49 seconds
Variants: generated 400, build-succeeded 200, build-failed 110, syntax-invalid 66, redundant 24
Fitness: max 1(1), min 0.167(9), ave 0.795
Test execution time: sum 11833 ms, max 180 ms, min 52 ms
----------------------------------------------------------------

2023-07-02 23:24:03 [main] [INFO]  KGenProgMain - entered the era of 31st generation.
2023-07-02 23:24:32 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 57 minutes 18 seconds
Variants: generated 400, build-succeeded 203, build-failed 120, syntax-invalid 62, redundant 15
Fitness: max 0.833(176), min 0.167(17), ave 0.768
Test execution time: sum 11983 ms, max 118 ms, min 51 ms
----------------------------------------------------------------

2023-07-02 23:24:32 [main] [INFO]  KGenProgMain - entered the era of 32nd generation.
2023-07-02 23:24:59 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 57 minutes 45 seconds
Variants: generated 400, build-succeeded 175, build-failed 127, syntax-invalid 83, redundant 15
Fitness: max 1(2), min 0.167(7), ave 0.795
Test execution time: sum 10339 ms, max 122 ms, min 53 ms
----------------------------------------------------------------

2023-07-02 23:24:59 [main] [INFO]  KGenProgMain - entered the era of 33rd generation.
2023-07-02 23:25:25 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 58 minutes 11 seconds
Variants: generated 400, build-succeeded 179, build-failed 126, syntax-invalid 77, redundant 18
Fitness: max 0.833(147), min 0.167(16), ave 0.755
Test execution time: sum 10418 ms, max 197 ms, min 51 ms
----------------------------------------------------------------

2023-07-02 23:25:25 [main] [INFO]  KGenProgMain - entered the era of 34th generation.
2023-07-02 23:25:54 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 58 minutes 40 seconds
Variants: generated 400, build-succeeded 185, build-failed 125, syntax-invalid 77, redundant 13
Fitness: max 0.833(164), min 0.167(11), ave 0.785
Test execution time: sum 11049 ms, max 187 ms, min 52 ms
----------------------------------------------------------------

2023-07-02 23:25:54 [main] [INFO]  KGenProgMain - entered the era of 35th generation.
2023-07-02 23:26:21 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 59 minutes 7 seconds
Variants: generated 400, build-succeeded 189, build-failed 120, syntax-invalid 75, redundant 16
Fitness: max 0.833(157), min 0.167(19), ave 0.751
Test execution time: sum 11049 ms, max 178 ms, min 52 ms
----------------------------------------------------------------

2023-07-02 23:26:21 [main] [INFO]  KGenProgMain - entered the era of 36th generation.
2023-07-02 23:26:50 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 59 minutes 36 seconds
Variants: generated 400, build-succeeded 193, build-failed 123, syntax-invalid 69, redundant 15
Fitness: max 0.833(166), min 0.167(17), ave 0.763
Test execution time: sum 11633 ms, max 186 ms, min 53 ms
----------------------------------------------------------------

2023-07-02 23:26:50 [main] [INFO]  KGenProgMain - entered the era of 37th generation.
2023-07-02 23:27:17 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 3 seconds
Variants: generated 400, build-succeeded 173, build-failed 120, syntax-invalid 87, redundant 20
Fitness: max 0.833(148), min 0.167(15), ave 0.764
Test execution time: sum 10026 ms, max 182 ms, min 53 ms
----------------------------------------------------------------

2023-07-02 23:27:17 [main] [INFO]  KGenProgMain - entered the era of 38th generation.
2023-07-02 23:42:47 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 15 minutes 33 seconds
Variants: generated 400, build-succeeded 197, build-failed 125, syntax-invalid 57, redundant 21
Fitness: max 0.833(171), min 0.167(10), ave 0.784
Test execution time: sum 911976 ms, max 900134 ms, min 53 ms
----------------------------------------------------------------

2023-07-02 23:42:47 [main] [INFO]  KGenProgMain - entered the era of 39th generation.
2023-07-02 23:43:15 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 16 minutes 1 seconds
Variants: generated 400, build-succeeded 184, build-failed 131, syntax-invalid 72, redundant 13
Fitness: max 0.833(162), min 0.167(10), ave 0.784
Test execution time: sum 10802 ms, max 114 ms, min 53 ms
----------------------------------------------------------------

2023-07-02 23:43:15 [main] [INFO]  KGenProgMain - entered the era of 40th generation.
2023-07-02 23:43:46 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 16 minutes 32 seconds
Variants: generated 400, build-succeeded 203, build-failed 117, syntax-invalid 64, redundant 16
Fitness: max 0.833(167), min 0.167(20), ave 0.752
Test execution time: sum 12022 ms, max 119 ms, min 53 ms
----------------------------------------------------------------

2023-07-02 23:43:46 [main] [INFO]  KGenProgMain - entered the era of 41st generation.
2023-07-02 23:59:15 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 32 minutes 1 seconds
Variants: generated 400, build-succeeded 193, build-failed 108, syntax-invalid 76, redundant 23
Fitness: max 1(1), min 0.167(31), ave 0.722
Test execution time: sum 911516 ms, max 900112 ms, min 52 ms
----------------------------------------------------------------

2023-07-02 23:59:15 [main] [INFO]  KGenProgMain - entered the era of 42nd generation.
2023-07-03 00:14:46 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 47 minutes 32 seconds
Variants: generated 400, build-succeeded 193, build-failed 119, syntax-invalid 65, redundant 23
Fitness: max 0.833(163), min 0.167(18), ave 0.755
Test execution time: sum 911988 ms, max 900107 ms, min 52 ms
----------------------------------------------------------------

2023-07-03 00:14:46 [main] [INFO]  KGenProgMain - entered the era of 43rd generation.
2023-07-03 00:39:16 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 12 minutes 2 seconds
Variants: generated 400, build-succeeded 185, build-failed 112, syntax-invalid 87, redundant 16
Fitness: max 0.833(152), min 0.167(24), ave 0.738
Test execution time: sum 1451473 ms, max 900110 ms, min 52 ms
----------------------------------------------------------------

2023-07-03 00:39:16 [main] [INFO]  KGenProgMain - entered the era of 44th generation.
2023-07-03 00:39:43 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 12 minutes 29 seconds
Variants: generated 400, build-succeeded 154, build-failed 123, syntax-invalid 106, redundant 17
Fitness: max 0.833(129), min 0.167(16), ave 0.752
Test execution time: sum 9246 ms, max 191 ms, min 52 ms
----------------------------------------------------------------

2023-07-03 00:39:43 [main] [INFO]  KGenProgMain - entered the era of 45th generation.
2023-07-03 00:40:13 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 12 minutes 59 seconds
Variants: generated 400, build-succeeded 200, build-failed 118, syntax-invalid 63, redundant 19
Fitness: max 1(2), min 0.167(25), ave 0.745
Test execution time: sum 12001 ms, max 121 ms, min 53 ms
----------------------------------------------------------------

2023-07-03 00:40:13 [main] [INFO]  KGenProgMain - entered the era of 46th generation.
2023-07-03 00:55:47 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 28 minutes 33 seconds
Variants: generated 400, build-succeeded 225, build-failed 115, syntax-invalid 50, redundant 10
Fitness: max 0.833(191), min 0.167(24), ave 0.754
Test execution time: sum 913779 ms, max 900114 ms, min 52 ms
----------------------------------------------------------------

2023-07-03 00:55:47 [main] [INFO]  KGenProgMain - entered the era of 47th generation.
2023-07-03 00:56:18 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 29 minutes 4 seconds
Variants: generated 400, build-succeeded 213, build-failed 102, syntax-invalid 75, redundant 10
Fitness: max 0.833(185), min 0.167(17), ave 0.768
Test execution time: sum 12548 ms, max 124 ms, min 53 ms
----------------------------------------------------------------

2023-07-03 00:56:18 [main] [INFO]  KGenProgMain - entered the era of 48th generation.
2023-07-03 00:56:49 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 29 minutes 36 seconds
Variants: generated 400, build-succeeded 201, build-failed 117, syntax-invalid 68, redundant 14
Fitness: max 0.833(174), min 0.167(12), ave 0.777
Test execution time: sum 12030 ms, max 206 ms, min 52 ms
----------------------------------------------------------------

2023-07-03 00:56:49 [main] [INFO]  KGenProgMain - entered the era of 49th generation.
2023-07-03 01:27:23 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 9 seconds
Variants: generated 400, build-succeeded 207, build-failed 126, syntax-invalid 60, redundant 7
Fitness: max 0.833(184), min 0.167(13), ave 0.781
Test execution time: sum 1813154 ms, max 900108 ms, min 54 ms
----------------------------------------------------------------

2023-07-03 01:27:23 [main] [INFO]  KGenProgMain - entered the era of 50th generation.
2023-07-03 01:27:55 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 41 seconds
Variants: generated 400, build-succeeded 192, build-failed 124, syntax-invalid 65, redundant 19
Fitness: max 0.833(172), min 0.167(10), ave 0.786
Test execution time: sum 11747 ms, max 221 ms, min 53 ms
----------------------------------------------------------------

2023-07-03 01:27:55 [main] [INFO]  KGenProgMain - entered the era of 51st generation.
2023-07-03 01:28:27 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 1 minutes 13 seconds
Variants: generated 400, build-succeeded 192, build-failed 127, syntax-invalid 69, redundant 12
Fitness: max 0.833(174), min 0.167(9), ave 0.793
Test execution time: sum 11515 ms, max 194 ms, min 53 ms
----------------------------------------------------------------

2023-07-03 01:28:27 [main] [INFO]  KGenProgMain - entered the era of 52nd generation.
2023-07-03 01:28:59 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 1 minutes 45 seconds
Variants: generated 400, build-succeeded 197, build-failed 118, syntax-invalid 72, redundant 13
Fitness: max 0.833(178), min 0.167(12), ave 0.785
Test execution time: sum 11777 ms, max 115 ms, min 53 ms
----------------------------------------------------------------

2023-07-03 01:28:59 [main] [INFO]  KGenProgMain - entered the era of 53rd generation.
2023-07-03 01:29:31 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 2 minutes 17 seconds
Variants: generated 400, build-succeeded 190, build-failed 128, syntax-invalid 72, redundant 10
Fitness: max 0.833(169), min 0.167(4), ave 0.801
Test execution time: sum 11354 ms, max 192 ms, min 52 ms
----------------------------------------------------------------

2023-07-03 01:29:31 [main] [INFO]  KGenProgMain - entered the era of 54th generation.
2023-07-03 01:30:00 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 2 minutes 46 seconds
Variants: generated 400, build-succeeded 169, build-failed 125, syntax-invalid 94, redundant 12
Fitness: max 0.833(156), min 0.167(6), ave 0.802
Test execution time: sum 10041 ms, max 109 ms, min 53 ms
----------------------------------------------------------------

2023-07-03 01:30:00 [main] [INFO]  KGenProgMain - entered the era of 55th generation.
2023-07-03 01:30:31 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 3 minutes 17 seconds
Variants: generated 400, build-succeeded 193, build-failed 108, syntax-invalid 84, redundant 15
Fitness: max 0.833(162), min 0.167(19), ave 0.756
Test execution time: sum 11188 ms, max 119 ms, min 52 ms
----------------------------------------------------------------

2023-07-03 01:30:31 [main] [INFO]  KGenProgMain - entered the era of 56th generation.
2023-07-03 01:31:04 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 3 minutes 50 seconds
Variants: generated 400, build-succeeded 201, build-failed 115, syntax-invalid 65, redundant 19
Fitness: max 0.833(179), min 0.167(16), ave 0.774
Test execution time: sum 11915 ms, max 185 ms, min 53 ms
----------------------------------------------------------------

2023-07-03 01:31:04 [main] [INFO]  KGenProgMain - entered the era of 57th generation.
2023-07-03 01:31:36 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 4 minutes 23 seconds
Variants: generated 400, build-succeeded 203, build-failed 117, syntax-invalid 61, redundant 19
Fitness: max 0.833(186), min 0.167(8), ave 0.798
Test execution time: sum 12068 ms, max 118 ms, min 54 ms
----------------------------------------------------------------

2023-07-03 01:31:36 [main] [INFO]  KGenProgMain - entered the era of 58th generation.
2023-07-03 01:47:10 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 19 minutes 57 seconds
Variants: generated 400, build-succeeded 206, build-failed 114, syntax-invalid 54, redundant 26
Fitness: max 0.833(183), min 0.167(13), ave 0.782
Test execution time: sum 912857 ms, max 900116 ms, min 53 ms
----------------------------------------------------------------

2023-07-03 01:47:10 [main] [INFO]  KGenProgMain - entered the era of 59th generation.
2023-07-03 02:02:45 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 35 minutes 31 seconds
Variants: generated 400, build-succeeded 202, build-failed 117, syntax-invalid 66, redundant 15
Fitness: max 0.833(181), min 0.167(11), ave 0.786
Test execution time: sum 912785 ms, max 900104 ms, min 55 ms
----------------------------------------------------------------

2023-07-03 02:02:45 [main] [INFO]  KGenProgMain - entered the era of 60th generation.
2023-07-03 02:03:20 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 36 minutes 7 seconds
Variants: generated 400, build-succeeded 226, build-failed 109, syntax-invalid 54, redundant 11
Fitness: max 0.833(203), min 0.167(15), ave 0.782
Test execution time: sum 13658 ms, max 147 ms, min 54 ms
----------------------------------------------------------------

2023-07-03 02:03:20 [main] [INFO]  KGenProgMain - entered the era of 61st generation.
2023-07-03 02:03:54 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 36 minutes 40 seconds
Variants: generated 400, build-succeeded 203, build-failed 115, syntax-invalid 70, redundant 12
Fitness: max 0.833(184), min 0.167(7), ave 0.799
Test execution time: sum 12005 ms, max 88 ms, min 54 ms
----------------------------------------------------------------

2023-07-03 02:03:54 [main] [INFO]  KGenProgMain - entered the era of 62nd generation.
2023-07-03 02:04:28 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 37 minutes 14 seconds
Variants: generated 400, build-succeeded 207, build-failed 109, syntax-invalid 67, redundant 17
Fitness: max 0.833(181), min 0.167(13), ave 0.777
Test execution time: sum 12389 ms, max 110 ms, min 54 ms
----------------------------------------------------------------

2023-07-03 02:04:28 [main] [INFO]  KGenProgMain - entered the era of 63rd generation.
2023-07-03 02:05:02 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 37 minutes 48 seconds
Variants: generated 400, build-succeeded 202, build-failed 118, syntax-invalid 66, redundant 14
Fitness: max 0.833(185), min 0.167(9), ave 0.795
Test execution time: sum 12331 ms, max 182 ms, min 55 ms
----------------------------------------------------------------

2023-07-03 02:05:02 [main] [INFO]  KGenProgMain - entered the era of 64th generation.
2023-07-03 02:05:37 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 38 minutes 23 seconds
Variants: generated 400, build-succeeded 202, build-failed 131, syntax-invalid 49, redundant 18
Fitness: max 0.833(192), min 0.167(5), ave 0.812
Test execution time: sum 12253 ms, max 182 ms, min 54 ms
----------------------------------------------------------------

2023-07-03 02:05:37 [main] [INFO]  KGenProgMain - entered the era of 65th generation.
2023-07-03 02:06:12 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 38 minutes 58 seconds
Variants: generated 400, build-succeeded 204, build-failed 109, syntax-invalid 75, redundant 12
Fitness: max 0.833(183), min 0.167(10), ave 0.788
Test execution time: sum 12270 ms, max 123 ms, min 53 ms
----------------------------------------------------------------

2023-07-03 02:06:12 [main] [INFO]  KGenProgMain - entered the era of 66th generation.
2023-07-03 02:06:45 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 39 minutes 31 seconds
Variants: generated 400, build-succeeded 195, build-failed 130, syntax-invalid 59, redundant 16
Fitness: max 0.833(178), min 0.167(9), ave 0.795
Test execution time: sum 11674 ms, max 100 ms, min 54 ms
----------------------------------------------------------------

2023-07-03 02:06:45 [main] [INFO]  KGenProgMain - entered the era of 67th generation.
2023-07-03 02:07:19 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 40 minutes 5 seconds
Variants: generated 400, build-succeeded 198, build-failed 129, syntax-invalid 58, redundant 15
Fitness: max 0.833(185), min 0.167(6), ave 0.806
Test execution time: sum 11915 ms, max 178 ms, min 54 ms
----------------------------------------------------------------

2023-07-03 02:07:19 [main] [INFO]  KGenProgMain - entered the era of 68th generation.
2023-07-03 02:07:53 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 40 minutes 39 seconds
Variants: generated 400, build-succeeded 194, build-failed 115, syntax-invalid 77, redundant 14
Fitness: max 0.833(170), min 0.167(11), ave 0.783
Test execution time: sum 11888 ms, max 183 ms, min 54 ms
----------------------------------------------------------------

2023-07-03 02:07:53 [main] [INFO]  KGenProgMain - entered the era of 69th generation.
2023-07-03 02:08:27 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 41 minutes 13 seconds
Variants: generated 400, build-succeeded 201, build-failed 115, syntax-invalid 68, redundant 16
Fitness: max 0.833(190), min 0.167(4), ave 0.813
Test execution time: sum 12202 ms, max 119 ms, min 54 ms
----------------------------------------------------------------

2023-07-03 02:08:27 [main] [INFO]  KGenProgMain - entered the era of 70th generation.
2023-07-03 02:09:03 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 41 minutes 49 seconds
Variants: generated 400, build-succeeded 211, build-failed 110, syntax-invalid 66, redundant 13
Fitness: max 0.833(194), min 0.167(5), ave 0.806
Test execution time: sum 12825 ms, max 183 ms, min 54 ms
----------------------------------------------------------------

2023-07-03 02:09:03 [main] [INFO]  KGenProgMain - entered the era of 71st generation.
2023-07-03 02:09:38 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 42 minutes 24 seconds
Variants: generated 400, build-succeeded 205, build-failed 114, syntax-invalid 64, redundant 17
Fitness: max 1(2), min 0.167(5), ave 0.815
Test execution time: sum 12328 ms, max 93 ms, min 54 ms
----------------------------------------------------------------

2023-07-03 02:09:38 [main] [INFO]  KGenProgMain - entered the era of 72nd generation.
2023-07-03 02:10:12 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 42 minutes 58 seconds
Variants: generated 400, build-succeeded 192, build-failed 122, syntax-invalid 72, redundant 14
Fitness: max 0.833(178), min 0.167(6), ave 0.806
Test execution time: sum 11431 ms, max 122 ms, min 53 ms
----------------------------------------------------------------

2023-07-03 02:10:12 [main] [INFO]  KGenProgMain - entered the era of 73rd generation.
2023-07-03 02:19:48 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 52 minutes 34 seconds
Variants: generated 400, build-succeeded 204, build-failed 114, syntax-invalid 67, redundant 15
Fitness: max 0.833(179), min 0.167(11), ave 0.783
Test execution time: sum 553054 ms, max 540136 ms, min 54 ms
----------------------------------------------------------------

2023-07-03 02:19:48 [main] [INFO]  KGenProgMain - entered the era of 74th generation.
2023-07-03 02:35:24 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 8 minutes 10 seconds
Variants: generated 400, build-succeeded 201, build-failed 115, syntax-invalid 69, redundant 15
Fitness: max 0.833(188), min 0.167(3), ave 0.813
Test execution time: sum 912454 ms, max 900119 ms, min 55 ms
----------------------------------------------------------------

2023-07-03 02:35:24 [main] [INFO]  KGenProgMain - entered the era of 75th generation.
2023-07-03 02:36:00 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 8 minutes 46 seconds
Variants: generated 400, build-succeeded 201, build-failed 108, syntax-invalid 71, redundant 20
Fitness: max 0.833(187), min 0.167(6), ave 0.803
Test execution time: sum 12080 ms, max 128 ms, min 53 ms
----------------------------------------------------------------

2023-07-03 02:36:00 [main] [INFO]  KGenProgMain - entered the era of 76th generation.
2023-07-03 02:36:36 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 9 minutes 22 seconds
Variants: generated 400, build-succeeded 191, build-failed 123, syntax-invalid 71, redundant 15
Fitness: max 0.833(169), min 0.167(7), ave 0.795
Test execution time: sum 11727 ms, max 136 ms, min 54 ms
----------------------------------------------------------------

2023-07-03 02:36:36 [main] [INFO]  KGenProgMain - entered the era of 77th generation.
2023-07-03 02:37:11 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 9 minutes 57 seconds
Variants: generated 400, build-succeeded 202, build-failed 122, syntax-invalid 60, redundant 16
Fitness: max 0.833(193), min 0.167(2), ave 0.819
Test execution time: sum 12217 ms, max 88 ms, min 56 ms
----------------------------------------------------------------

2023-07-03 02:37:11 [main] [INFO]  KGenProgMain - entered the era of 78th generation.
2023-07-03 02:37:48 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 10 minutes 34 seconds
Variants: generated 400, build-succeeded 206, build-failed 115, syntax-invalid 71, redundant 8
Fitness: max 1(1), min 0.167(5), ave 0.807
Test execution time: sum 12440 ms, max 129 ms, min 54 ms
----------------------------------------------------------------

2023-07-03 02:37:48 [main] [INFO]  KGenProgMain - entered the era of 79th generation.
2023-07-03 02:47:26 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 20 minutes 12 seconds
Variants: generated 400, build-succeeded 200, build-failed 109, syntax-invalid 75, redundant 16
Fitness: max 0.833(188), min 0.167(6), ave 0.807
Test execution time: sum 552580 ms, max 540093 ms, min 54 ms
----------------------------------------------------------------

2023-07-03 02:47:26 [main] [INFO]  KGenProgMain - entered the era of 80th generation.
2023-07-03 02:48:03 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 20 minutes 49 seconds
Variants: generated 400, build-succeeded 207, build-failed 113, syntax-invalid 59, redundant 21
Fitness: max 0.833(194), min 0.167(6), ave 0.808
Test execution time: sum 12886 ms, max 154 ms, min 55 ms
----------------------------------------------------------------

2023-07-03 02:48:03 [main] [INFO]  KGenProgMain - entered the era of 81st generation.
2023-07-03 02:48:41 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 21 minutes 27 seconds
Variants: generated 400, build-succeeded 210, build-failed 120, syntax-invalid 59, redundant 11
Fitness: max 0.833(195), min 0.167(2), ave 0.814
Test execution time: sum 12897 ms, max 123 ms, min 55 ms
----------------------------------------------------------------

2023-07-03 02:48:41 [main] [INFO]  KGenProgMain - entered the era of 82nd generation.
2023-07-03 02:49:17 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 22 minutes 3 seconds
Variants: generated 400, build-succeeded 181, build-failed 122, syntax-invalid 81, redundant 16
Fitness: max 0.833(168), min 0.167(5), ave 0.807
Test execution time: sum 11164 ms, max 202 ms, min 54 ms
----------------------------------------------------------------

2023-07-03 02:49:17 [main] [INFO]  KGenProgMain - entered the era of 83rd generation.
2023-07-03 02:58:54 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 31 minutes 40 seconds
Variants: generated 400, build-succeeded 200, build-failed 114, syntax-invalid 72, redundant 14
Fitness: max 0.833(191), min 0.167(2), ave 0.82
Test execution time: sum 552323 ms, max 540100 ms, min 55 ms
----------------------------------------------------------------

2023-07-03 02:58:54 [main] [INFO]  KGenProgMain - entered the era of 84th generation.
2023-07-03 02:59:34 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 32 minutes 20 seconds
Variants: generated 400, build-succeeded 209, build-failed 126, syntax-invalid 52, redundant 13
Fitness: max 1(1), min 0.167(6), ave 0.805
Test execution time: sum 12609 ms, max 192 ms, min 54 ms
----------------------------------------------------------------

2023-07-03 02:59:34 [main] [INFO]  KGenProgMain - entered the era of 85th generation.
2023-07-03 03:00:13 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 32 minutes 59 seconds
Variants: generated 400, build-succeeded 211, build-failed 122, syntax-invalid 55, redundant 12
Fitness: max 1(1), min 0.167(6), ave 0.806
Test execution time: sum 13019 ms, max 195 ms, min 55 ms
----------------------------------------------------------------

2023-07-03 03:00:13 [main] [INFO]  KGenProgMain - entered the era of 86th generation.
2023-07-03 03:15:55 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 48 minutes 42 seconds
Variants: generated 400, build-succeeded 226, build-failed 107, syntax-invalid 56, redundant 11
Fitness: max 1(1), min 0.167(6), ave 0.806
Test execution time: sum 914419 ms, max 900105 ms, min 55 ms
----------------------------------------------------------------

2023-07-03 03:15:55 [main] [INFO]  KGenProgMain - entered the era of 87th generation.
2023-07-03 03:16:35 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 49 minutes 21 seconds
Variants: generated 400, build-succeeded 204, build-failed 126, syntax-invalid 62, redundant 8
Fitness: max 0.833(187), min 0.167(3), ave 0.81
Test execution time: sum 12564 ms, max 110 ms, min 56 ms
----------------------------------------------------------------

2023-07-03 03:16:35 [main] [INFO]  KGenProgMain - entered the era of 88th generation.
2023-07-03 03:17:15 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 50 minutes 1 seconds
Variants: generated 400, build-succeeded 215, build-failed 116, syntax-invalid 54, redundant 15
Fitness: max 0.833(197), min 0.167(5), ave 0.806
Test execution time: sum 13319 ms, max 118 ms, min 55 ms
----------------------------------------------------------------

2023-07-03 03:17:15 [main] [INFO]  KGenProgMain - entered the era of 89th generation.
2023-07-03 03:17:55 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 50 minutes 41 seconds
Variants: generated 400, build-succeeded 201, build-failed 114, syntax-invalid 69, redundant 16
Fitness: max 1(1), min 0.167(7), ave 0.802
Test execution time: sum 12689 ms, max 191 ms, min 55 ms
----------------------------------------------------------------

2023-07-03 03:17:55 [main] [INFO]  KGenProgMain - entered the era of 90th generation.
2023-07-03 03:48:31 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 21 minutes 17 seconds
Variants: generated 400, build-succeeded 172, build-failed 139, syntax-invalid 79, redundant 10
Fitness: max 0.833(158), min 0.167(3), ave 0.808
Test execution time: sum 1810852 ms, max 900122 ms, min 56 ms
----------------------------------------------------------------

2023-07-03 03:48:31 [main] [INFO]  KGenProgMain - entered the era of 91st generation.
2023-07-03 03:49:11 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 21 minutes 57 seconds
Variants: generated 400, build-succeeded 192, build-failed 119, syntax-invalid 72, redundant 17
Fitness: max 1(1), min 0.167(6), ave 0.798
Test execution time: sum 12298 ms, max 187 ms, min 56 ms
----------------------------------------------------------------

2023-07-03 03:49:11 [main] [INFO]  KGenProgMain - entered the era of 92nd generation.
2023-07-03 03:49:50 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 22 minutes 36 seconds
Variants: generated 400, build-succeeded 194, build-failed 114, syntax-invalid 74, redundant 18
Fitness: max 0.833(175), min 0.167(8), ave 0.793
Test execution time: sum 12327 ms, max 206 ms, min 56 ms
----------------------------------------------------------------

2023-07-03 03:49:50 [main] [INFO]  KGenProgMain - entered the era of 93rd generation.
2023-07-03 03:50:29 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 23 minutes 16 seconds
Variants: generated 400, build-succeeded 206, build-failed 114, syntax-invalid 67, redundant 13
Fitness: max 1(1), min 0.167(5), ave 0.812
Test execution time: sum 12799 ms, max 93 ms, min 57 ms
----------------------------------------------------------------

2023-07-03 03:50:29 [main] [INFO]  KGenProgMain - entered the era of 94th generation.
2023-07-03 03:51:09 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 23 minutes 55 seconds
Variants: generated 400, build-succeeded 196, build-failed 129, syntax-invalid 67, redundant 8
Fitness: max 0.833(183), min 0.167(7), ave 0.804
Test execution time: sum 12392 ms, max 191 ms, min 55 ms
----------------------------------------------------------------

2023-07-03 03:51:09 [main] [INFO]  KGenProgMain - entered the era of 95th generation.
2023-07-03 04:15:52 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 48 minutes 38 seconds
Variants: generated 400, build-succeeded 201, build-failed 133, syntax-invalid 58, redundant 8
Fitness: max 1(1), min 0.167(1), ave 0.826
Test execution time: sum 1453517 ms, max 900123 ms, min 59 ms
----------------------------------------------------------------

2023-07-03 04:15:52 [main] [INFO]  KGenProgMain - entered the era of 96th generation.
2023-07-03 04:16:33 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 49 minutes 19 seconds
Variants: generated 400, build-succeeded 207, build-failed 124, syntax-invalid 57, redundant 12
Fitness: max 0.833(196), min 0.167(6), ave 0.81
Test execution time: sum 13041 ms, max 132 ms, min 57 ms
----------------------------------------------------------------

2023-07-03 04:16:33 [main] [INFO]  KGenProgMain - entered the era of 97th generation.
2023-07-03 04:17:15 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 50 minutes 1 seconds
Variants: generated 400, build-succeeded 215, build-failed 114, syntax-invalid 58, redundant 13
Fitness: max 0.833(203), min 0.167(3), ave 0.816
Test execution time: sum 13368 ms, max 111 ms, min 55 ms
----------------------------------------------------------------

2023-07-03 04:17:15 [main] [INFO]  KGenProgMain - entered the era of 98th generation.
2023-07-03 04:17:57 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 50 minutes 43 seconds
Variants: generated 400, build-succeeded 204, build-failed 120, syntax-invalid 68, redundant 8
Fitness: max 0.833(192), min 0.167(4), ave 0.814
Test execution time: sum 13097 ms, max 210 ms, min 55 ms
----------------------------------------------------------------

2023-07-03 04:17:57 [main] [INFO]  KGenProgMain - entered the era of 99th generation.
2023-07-03 04:18:39 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 51 minutes 25 seconds
Variants: generated 400, build-succeeded 217, build-failed 114, syntax-invalid 56, redundant 13
Fitness: max 0.833(206), min 0.167(4), ave 0.815
Test execution time: sum 13648 ms, max 104 ms, min 56 ms
----------------------------------------------------------------

2023-07-03 04:18:39 [main] [INFO]  KGenProgMain - entered the era of 100th generation.
2023-07-03 04:19:22 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 52 minutes 8 seconds
Variants: generated 400, build-succeeded 202, build-failed 131, syntax-invalid 56, redundant 11
Fitness: max 0.833(195), min 0.167(1), ave 0.823
Test execution time: sum 12713 ms, max 120 ms, min 57 ms
----------------------------------------------------------------

2023-07-03 04:19:22 [main] [INFO]  KGenProgMain - entered the era of 101st generation.
2023-07-03 04:35:07 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 hours 7 minutes 53 seconds
Variants: generated 400, build-succeeded 219, build-failed 122, syntax-invalid 51, redundant 8
Fitness: max 0.833(206), min 0.167(5), ave 0.812
Test execution time: sum 914254 ms, max 900122 ms, min 57 ms
----------------------------------------------------------------

2023-07-03 04:35:07 [main] [INFO]  KGenProgMain - entered the era of 102nd generation.
2023-07-03 04:35:49 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 hours 8 minutes 35 seconds
Variants: generated 400, build-succeeded 201, build-failed 129, syntax-invalid 63, redundant 7
Fitness: max 0.833(192), min 0.167(3), ave 0.818
Test execution time: sum 12653 ms, max 140 ms, min 56 ms
----------------------------------------------------------------

2023-07-03 04:35:49 [main] [INFO]  KGenProgMain - entered the era of 103rd generation.
2023-07-03 04:36:34 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 hours 9 minutes 20 seconds
Variants: generated 400, build-succeeded 221, build-failed 116, syntax-invalid 53, redundant 10
Fitness: max 0.833(207), min 0.167(5), ave 0.811
Test execution time: sum 14223 ms, max 211 ms, min 57 ms
----------------------------------------------------------------

2023-07-03 04:36:34 [main] [INFO]  KGenProgMain - entered the era of 104th generation.
2023-07-03 04:37:18 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 hours 10 minutes 4 seconds
Variants: generated 400, build-succeeded 202, build-failed 123, syntax-invalid 69, redundant 6
Fitness: max 0.833(188), min 0.167(4), ave 0.811
Test execution time: sum 13244 ms, max 212 ms, min 57 ms
----------------------------------------------------------------

2023-07-03 04:37:18 [main] [INFO]  KGenProgMain - entered the era of 105th generation.
2023-07-03 04:38:02 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 hours 10 minutes 48 seconds
Variants: generated 400, build-succeeded 215, build-failed 119, syntax-invalid 58, redundant 8
Fitness: max 0.833(206), min 0.167(3), ave 0.819
Test execution time: sum 13899 ms, max 99 ms, min 58 ms
----------------------------------------------------------------

2023-07-03 04:38:02 [main] [INFO]  KGenProgMain - entered the era of 106th generation.
2023-07-03 04:38:46 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 hours 11 minutes 32 seconds
Variants: generated 400, build-succeeded 206, build-failed 122, syntax-invalid 60, redundant 12
Fitness: max 0.833(199), min 0.167(2), ave 0.823
Test execution time: sum 13317 ms, max 127 ms, min 58 ms
----------------------------------------------------------------

2023-07-03 04:38:46 [main] [INFO]  KGenProgMain - entered the era of 107th generation.
2023-07-03 04:39:31 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 hours 12 minutes 17 seconds
Variants: generated 400, build-succeeded 208, build-failed 113, syntax-invalid 66, redundant 13
Fitness: max 0.833(198), min 0.167(2), ave 0.821
Test execution time: sum 13766 ms, max 207 ms, min 57 ms
----------------------------------------------------------------

2023-07-03 04:39:31 [main] [INFO]  KGenProgMain - entered the era of 108th generation.
2023-07-03 04:40:14 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 hours 13 minutes 1 seconds
Variants: generated 400, build-succeeded 201, build-failed 119, syntax-invalid 65, redundant 15
Fitness: max 1(1), min 0.167(3), ave 0.82
Test execution time: sum 12585 ms, max 84 ms, min 56 ms
----------------------------------------------------------------

2023-07-03 04:40:14 [main] [INFO]  KGenProgMain - entered the era of 109th generation.
2023-07-03 04:41:00 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 hours 13 minutes 46 seconds
Variants: generated 400, build-succeeded 211, build-failed 114, syntax-invalid 61, redundant 14
Fitness: max 0.833(198), min 0.167(6), ave 0.808
Test execution time: sum 13641 ms, max 203 ms, min 57 ms
----------------------------------------------------------------

2023-07-03 04:41:00 [main] [INFO]  KGenProgMain - entered the era of 110th generation.
2023-07-03 04:41:47 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 hours 14 minutes 33 seconds
Variants: generated 400, build-succeeded 226, build-failed 104, syntax-invalid 59, redundant 11
Fitness: max 0.833(217), min 0.167(4), ave 0.818
Test execution time: sum 14876 ms, max 205 ms, min 57 ms
----------------------------------------------------------------

2023-07-03 04:41:47 [main] [INFO]  KGenProgMain - entered the era of 111th generation.
2023-07-03 04:42:32 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 hours 15 minutes 18 seconds
Variants: generated 400, build-succeeded 216, build-failed 113, syntax-invalid 58, redundant 13
Fitness: max 0.833(208), min 0.167(4), ave 0.818
Test execution time: sum 13861 ms, max 104 ms, min 57 ms
----------------------------------------------------------------

2023-07-03 04:42:32 [main] [INFO]  KGenProgMain - entered the era of 112th generation.
2023-07-03 04:43:20 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 hours 16 minutes 6 seconds
Variants: generated 400, build-succeeded 225, build-failed 121, syntax-invalid 46, redundant 8
Fitness: max 1(1), min 0.167(2), ave 0.82
Test execution time: sum 14484 ms, max 129 ms, min 58 ms
----------------------------------------------------------------

2023-07-03 04:43:20 [main] [INFO]  KGenProgMain - entered the era of 113th generation.
2023-07-03 04:44:08 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 hours 16 minutes 54 seconds
Variants: generated 400, build-succeeded 226, build-failed 108, syntax-invalid 54, redundant 12
Fitness: max 1(2), min 0.167(4), ave 0.813
Test execution time: sum 14890 ms, max 120 ms, min 57 ms
----------------------------------------------------------------

2023-07-03 04:44:08 [main] [INFO]  KGenProgMain - entered the era of 114th generation.
2023-07-03 04:53:56 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 hours 26 minutes 42 seconds
Variants: generated 400, build-succeeded 222, build-failed 109, syntax-invalid 56, redundant 13
Fitness: max 0.833(212), min 0.167(2), ave 0.82
Test execution time: sum 554521 ms, max 540121 ms, min 56 ms
----------------------------------------------------------------

2023-07-03 04:53:56 [main] [INFO]  KGenProgMain - entered the era of 115th generation.
2023-07-03 04:54:43 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 hours 27 minutes 29 seconds
Variants: generated 400, build-succeeded 211, build-failed 107, syntax-invalid 62, redundant 20
Fitness: max 0.833(204), min 0.167(2), ave 0.823
Test execution time: sum 13696 ms, max 136 ms, min 57 ms
----------------------------------------------------------------

2023-07-03 04:54:43 [main] [INFO]  KGenProgMain - entered the era of 116th generation.
2023-07-03 05:10:31 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 hours 43 minutes 17 seconds
Variants: generated 400, build-succeeded 202, build-failed 127, syntax-invalid 61, redundant 10
Fitness: max 0.833(196), min 0.167(2), ave 0.822
Test execution time: sum 913905 ms, max 900119 ms, min 58 ms
----------------------------------------------------------------

2023-07-03 05:10:31 [main] [INFO]  KGenProgMain - entered the era of 117th generation.
2023-07-03 05:29:19 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 hours 2 minutes 5 seconds
Variants: generated 400, build-succeeded 217, build-failed 105, syntax-invalid 64, redundant 14
Fitness: max 0.833(204), min 0.167(6), ave 0.807
Test execution time: sum 1094250 ms, max 540116 ms, min 58 ms
----------------------------------------------------------------

2023-07-03 05:29:19 [main] [INFO]  KGenProgMain - entered the era of 118th generation.
2023-07-03 05:30:07 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 hours 2 minutes 53 seconds
Variants: generated 400, build-succeeded 203, build-failed 117, syntax-invalid 68, redundant 12
Fitness: max 1(1), min 0.167(5), ave 0.81
Test execution time: sum 13388 ms, max 125 ms, min 58 ms
----------------------------------------------------------------

2023-07-03 05:30:07 [main] [INFO]  KGenProgMain - entered the era of 119th generation.
2023-07-03 05:30:54 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 hours 3 minutes 40 seconds
Variants: generated 400, build-succeeded 207, build-failed 116, syntax-invalid 64, redundant 13
Fitness: max 1(2), min 0.167(3), ave 0.818
Test execution time: sum 13457 ms, max 94 ms, min 57 ms
----------------------------------------------------------------

2023-07-03 05:30:54 [main] [INFO]  KGenProgMain - entered the era of 120th generation.
2023-07-03 05:31:43 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 hours 4 minutes 29 seconds
Variants: generated 400, build-succeeded 214, build-failed 110, syntax-invalid 64, redundant 12
Fitness: max 0.833(200), min 0.167(6), ave 0.806
Test execution time: sum 14097 ms, max 131 ms, min 57 ms
----------------------------------------------------------------

2023-07-03 05:31:43 [main] [INFO]  KGenProgMain - entered the era of 121st generation.
2023-07-03 05:32:31 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 hours 5 minutes 17 seconds
Variants: generated 400, build-succeeded 211, build-failed 98, syntax-invalid 77, redundant 14
Fitness: max 1(1), min 0.167(4), ave 0.82
Test execution time: sum 14012 ms, max 211 ms, min 57 ms
----------------------------------------------------------------

2023-07-03 05:32:31 [main] [INFO]  KGenProgMain - entered the era of 122nd generation.
2023-07-03 05:33:18 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 hours 6 minutes 5 seconds
Variants: generated 400, build-succeeded 210, build-failed 107, syntax-invalid 74, redundant 9
Fitness: max 1(1), min 0.167(2), ave 0.825
Test execution time: sum 13701 ms, max 111 ms, min 57 ms
----------------------------------------------------------------

2023-07-03 05:33:18 [main] [INFO]  KGenProgMain - entered the era of 123rd generation.
2023-07-03 05:49:08 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 hours 21 minutes 54 seconds
Variants: generated 400, build-succeeded 203, build-failed 114, syntax-invalid 74, redundant 9
Fitness: max 0.833(189), min 0.167(4), ave 0.811
Test execution time: sum 913947 ms, max 900110 ms, min 58 ms
----------------------------------------------------------------

2023-07-03 05:49:08 [main] [INFO]  KGenProgMain - entered the era of 124th generation.
2023-07-03 06:04:57 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 hours 37 minutes 43 seconds
Variants: generated 400, build-succeeded 204, build-failed 113, syntax-invalid 68, redundant 15
Fitness: max 1(1), min 0.167(7), ave 0.809
Test execution time: sum 913639 ms, max 900119 ms, min 58 ms
----------------------------------------------------------------

2023-07-03 06:04:57 [main] [INFO]  KGenProgMain - entered the era of 125th generation.
2023-07-03 06:05:48 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 hours 38 minutes 34 seconds
Variants: generated 400, build-succeeded 217, build-failed 112, syntax-invalid 58, redundant 13
Fitness: max 1(1), min 0.167(6), ave 0.81
Test execution time: sum 14523 ms, max 125 ms, min 57 ms
----------------------------------------------------------------

2023-07-03 06:05:48 [main] [INFO]  KGenProgMain - entered the era of 126th generation.
2023-07-03 06:06:40 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 hours 39 minutes 26 seconds
Variants: generated 400, build-succeeded 220, build-failed 105, syntax-invalid 64, redundant 11
Fitness: max 0.833(210), min 0.167(1), ave 0.822
Test execution time: sum 14805 ms, max 115 ms, min 58 ms
----------------------------------------------------------------

2023-07-03 06:06:40 [main] [INFO]  KGenProgMain - entered the era of 127th generation.
2023-07-03 06:07:30 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 hours 40 minutes 16 seconds
Variants: generated 400, build-succeeded 211, build-failed 115, syntax-invalid 59, redundant 15
Fitness: max 0.833(204), min 0.167(3), ave 0.821
Test execution time: sum 13874 ms, max 119 ms, min 58 ms
----------------------------------------------------------------

2023-07-03 06:07:30 [main] [INFO]  KGenProgMain - entered the era of 128th generation.
2023-07-03 06:08:21 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 hours 41 minutes 7 seconds
Variants: generated 400, build-succeeded 194, build-failed 120, syntax-invalid 68, redundant 18
Fitness: max 0.833(185), min 0.167(3), ave 0.818
Test execution time: sum 13533 ms, max 138 ms, min 57 ms
----------------------------------------------------------------

2023-07-03 06:08:21 [main] [INFO]  KGenProgMain - entered the era of 129th generation.
2023-07-03 06:24:13 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 hours 57 minutes 0 seconds
Variants: generated 400, build-succeeded 215, build-failed 113, syntax-invalid 61, redundant 11
Fitness: max 0.833(204), min 0.167(3), ave 0.817
Test execution time: sum 914851 ms, max 900122 ms, min 59 ms
----------------------------------------------------------------

2023-07-03 06:24:13 [main] [INFO]  KGenProgMain - entered the era of 130th generation.
2023-07-03 06:40:04 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 hours 12 minutes 50 seconds
Variants: generated 400, build-succeeded 191, build-failed 119, syntax-invalid 79, redundant 11
Fitness: max 0.833(180), min 0.167(3), ave 0.815
Test execution time: sum 913525 ms, max 900171 ms, min 59 ms
----------------------------------------------------------------

2023-07-03 06:40:04 [main] [INFO]  KGenProgMain - entered the era of 131st generation.
2023-07-03 06:49:56 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 hours 22 minutes 42 seconds
Variants: generated 400, build-succeeded 208, build-failed 111, syntax-invalid 65, redundant 16
Fitness: max 0.833(200), min 0.167(2), ave 0.821
Test execution time: sum 554378 ms, max 540127 ms, min 60 ms
----------------------------------------------------------------

2023-07-03 06:49:56 [main] [INFO]  KGenProgMain - entered the era of 132nd generation.
2023-07-03 06:50:48 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 hours 23 minutes 34 seconds
Variants: generated 400, build-succeeded 219, build-failed 107, syntax-invalid 63, redundant 11
Fitness: max 0.833(207), min 0.167(4), ave 0.811
Test execution time: sum 14671 ms, max 125 ms, min 59 ms
----------------------------------------------------------------

2023-07-03 06:50:48 [main] [INFO]  KGenProgMain - entered the era of 133rd generation.
2023-07-03 06:51:40 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 hours 24 minutes 26 seconds
Variants: generated 400, build-succeeded 207, build-failed 124, syntax-invalid 59, redundant 10
Fitness: max 0.833(200), min 0.167(1), ave 0.825
Test execution time: sum 13764 ms, max 133 ms, min 62 ms
----------------------------------------------------------------

2023-07-03 06:51:40 [main] [INFO]  KGenProgMain - entered the era of 134th generation.
2023-07-03 06:52:31 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 hours 25 minutes 17 seconds
Variants: generated 400, build-succeeded 197, build-failed 124, syntax-invalid 68, redundant 11
Fitness: max 0.833(192), min 0.167(2), ave 0.824
Test execution time: sum 13320 ms, max 103 ms, min 59 ms
----------------------------------------------------------------

2023-07-03 06:52:31 [main] [INFO]  KGenProgMain - entered the era of 135th generation.
2023-07-03 06:53:23 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 hours 26 minutes 9 seconds
Variants: generated 400, build-succeeded 205, build-failed 115, syntax-invalid 70, redundant 10
Fitness: max 0.833(198), min 0.167(2), ave 0.822
Test execution time: sum 13873 ms, max 218 ms, min 59 ms
----------------------------------------------------------------

2023-07-03 06:53:23 [main] [INFO]  KGenProgMain - entered the era of 136th generation.
2023-07-03 07:03:16 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 hours 36 minutes 2 seconds
Variants: generated 400, build-succeeded 209, build-failed 105, syntax-invalid 73, redundant 13
Fitness: max 1(1), min 0.167(3), ave 0.821
Test execution time: sum 554891 ms, max 540115 ms, min 59 ms
----------------------------------------------------------------

2023-07-03 07:03:16 [main] [INFO]  KGenProgMain - entered the era of 137th generation.
2023-07-03 07:04:09 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 hours 36 minutes 55 seconds
Variants: generated 400, build-succeeded 216, build-failed 116, syntax-invalid 57, redundant 11
Fitness: max 1(1), min 0.5(1), ave 0.829
Test execution time: sum 14550 ms, max 162 ms, min 63 ms
----------------------------------------------------------------

2023-07-03 07:04:09 [main] [INFO]  KGenProgMain - entered the era of 138th generation.
2023-07-03 07:05:02 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 hours 37 minutes 48 seconds
Variants: generated 400, build-succeeded 200, build-failed 112, syntax-invalid 73, redundant 15
Fitness: max 0.833(196), min 0.667(4), ave 0.83
Test execution time: sum 13766 ms, max 140 ms, min 64 ms
----------------------------------------------------------------

2023-07-03 07:05:02 [main] [INFO]  KGenProgMain - entered the era of 139th generation.
2023-07-03 07:05:56 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 hours 38 minutes 43 seconds
Variants: generated 400, build-succeeded 219, build-failed 110, syntax-invalid 59, redundant 12
Fitness: max 1(1), min 0.167(2), ave 0.823
Test execution time: sum 15044 ms, max 148 ms, min 64 ms
----------------------------------------------------------------

2023-07-03 07:05:56 [main] [INFO]  KGenProgMain - entered the era of 140th generation.
2023-07-03 07:06:52 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 hours 39 minutes 38 seconds
Variants: generated 400, build-succeeded 211, build-failed 119, syntax-invalid 55, redundant 15
Fitness: max 0.833(200), min 0.167(3), ave 0.818
Test execution time: sum 14636 ms, max 199 ms, min 59 ms
----------------------------------------------------------------

2023-07-03 07:06:52 [main] [INFO]  KGenProgMain - entered the era of 141st generation.
2023-07-03 07:22:46 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 hours 55 minutes 32 seconds
Variants: generated 400, build-succeeded 213, build-failed 101, syntax-invalid 68, redundant 18
Fitness: max 0.833(194), min 0.167(7), ave 0.801
Test execution time: sum 914860 ms, max 900127 ms, min 57 ms
----------------------------------------------------------------

2023-07-03 07:22:46 [main] [INFO]  KGenProgMain - entered the era of 142nd generation.
2023-07-03 07:23:43 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 hours 56 minutes 29 seconds
Variants: generated 400, build-succeeded 223, build-failed 110, syntax-invalid 52, redundant 15
Fitness: max 1(1), min 0.167(3), ave 0.817
Test execution time: sum 15633 ms, max 266 ms, min 58 ms
----------------------------------------------------------------

2023-07-03 07:23:43 [main] [INFO]  KGenProgMain - entered the era of 143rd generation.
2023-07-03 07:24:37 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 hours 57 minutes 23 seconds
Variants: generated 400, build-succeeded 196, build-failed 119, syntax-invalid 68, redundant 17
Fitness: max 1(1), min 0.167(2), ave 0.82
Test execution time: sum 13846 ms, max 143 ms, min 59 ms
----------------------------------------------------------------

2023-07-03 07:24:37 [main] [INFO]  KGenProgMain - entered the era of 144th generation.
2023-07-03 07:25:32 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 hours 58 minutes 18 seconds
Variants: generated 400, build-succeeded 210, build-failed 126, syntax-invalid 55, redundant 9
Fitness: max 0.833(194), min 0.167(1), ave 0.817
Test execution time: sum 14164 ms, max 113 ms, min 60 ms
----------------------------------------------------------------

2023-07-03 07:25:32 [main] [INFO]  KGenProgMain - entered the era of 145th generation.
2023-07-03 07:26:29 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 hours 59 minutes 15 seconds
Variants: generated 400, build-succeeded 218, build-failed 114, syntax-invalid 51, redundant 17
Fitness: max 0.833(211), min 0.167(1), ave 0.826
Test execution time: sum 15031 ms, max 119 ms, min 64 ms
----------------------------------------------------------------

2023-07-03 07:26:29 [main] [INFO]  KGenProgMain - entered the era of 146th generation.
2023-07-03 07:27:29 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 hours 15 seconds
Variants: generated 400, build-succeeded 234, build-failed 112, syntax-invalid 33, redundant 21
Fitness: max 0.833(223), min 0.167(3), ave 0.819
Test execution time: sum 16313 ms, max 123 ms, min 59 ms
----------------------------------------------------------------

2023-07-03 07:27:29 [main] [INFO]  KGenProgMain - entered the era of 147th generation.
2023-07-03 07:28:28 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 hours 1 minutes 14 seconds
Variants: generated 400, build-succeeded 232, build-failed 114, syntax-invalid 44, redundant 10
Fitness: max 0.833(220), min 0.167(3), ave 0.818
Test execution time: sum 15673 ms, max 114 ms, min 58 ms
----------------------------------------------------------------

2023-07-03 07:28:28 [main] [INFO]  KGenProgMain - entered the era of 148th generation.
2023-07-03 07:29:26 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 hours 2 minutes 12 seconds
Variants: generated 400, build-succeeded 209, build-failed 130, syntax-invalid 51, redundant 10
Fitness: max 0.833(206), min 0.667(3), ave 0.831
Test execution time: sum 14653 ms, max 138 ms, min 65 ms
----------------------------------------------------------------

2023-07-03 07:29:26 [main] [INFO]  KGenProgMain - entered the era of 149th generation.
2023-07-03 07:30:26 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 hours 3 minutes 12 seconds
Variants: generated 400, build-succeeded 226, build-failed 114, syntax-invalid 43, redundant 17
Fitness: max 0.833(222), min 0.167(2), ave 0.826
Test execution time: sum 16139 ms, max 146 ms, min 63 ms
----------------------------------------------------------------

2023-07-03 07:30:26 [main] [INFO]  KGenProgMain - entered the era of 150th generation.
2023-07-03 07:31:25 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 hours 4 minutes 11 seconds
Variants: generated 400, build-succeeded 221, build-failed 107, syntax-invalid 50, redundant 22
Fitness: max 0.833(213), min 0.167(3), ave 0.821
Test execution time: sum 15068 ms, max 129 ms, min 59 ms
----------------------------------------------------------------

2023-07-03 07:31:25 [main] [INFO]  KGenProgMain - entered the era of 151st generation.
2023-07-03 07:32:25 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 hours 5 minutes 11 seconds
Variants: generated 400, build-succeeded 215, build-failed 130, syntax-invalid 41, redundant 14
Fitness: max 1(1), min 0.167(2), ave 0.825
Test execution time: sum 15090 ms, max 133 ms, min 60 ms
----------------------------------------------------------------

2023-07-03 07:32:25 [main] [INFO]  KGenProgMain - entered the era of 152nd generation.
2023-07-03 07:33:27 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 hours 6 minutes 13 seconds
Variants: generated 400, build-succeeded 241, build-failed 99, syntax-invalid 44, redundant 16
Fitness: max 1(1), min 0.167(3), ave 0.823
Test execution time: sum 17070 ms, max 124 ms, min 61 ms
----------------------------------------------------------------

2023-07-03 07:33:27 [main] [INFO]  KGenProgMain - entered the era of 153rd generation.
2023-07-03 07:34:27 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 hours 7 minutes 13 seconds
Variants: generated 400, build-succeeded 229, build-failed 118, syntax-invalid 42, redundant 11
Fitness: max 0.833(220), min 0.167(3), ave 0.82
Test execution time: sum 15435 ms, max 119 ms, min 59 ms
----------------------------------------------------------------

2023-07-03 07:34:27 [main] [INFO]  KGenProgMain - entered the era of 154th generation.
2023-07-03 07:35:28 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 hours 8 minutes 14 seconds
Variants: generated 400, build-succeeded 219, build-failed 120, syntax-invalid 46, redundant 15
Fitness: max 0.833(215), min 0.167(1), ave 0.828
Test execution time: sum 15430 ms, max 141 ms, min 65 ms
----------------------------------------------------------------

2023-07-03 07:35:28 [main] [INFO]  KGenProgMain - entered the era of 155th generation.
2023-07-03 07:36:30 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 hours 9 minutes 16 seconds
Variants: generated 400, build-succeeded 222, build-failed 113, syntax-invalid 47, redundant 18
Fitness: max 0.833(215), min 0.167(3), ave 0.821
Test execution time: sum 16161 ms, max 245 ms, min 62 ms
----------------------------------------------------------------

2023-07-03 07:36:30 [main] [INFO]  KGenProgMain - entered the era of 156th generation.
2023-07-03 07:37:33 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 hours 10 minutes 19 seconds
Variants: generated 400, build-succeeded 238, build-failed 109, syntax-invalid 39, redundant 14
Fitness: max 0.833(232), min 0.167(1), ave 0.826
Test execution time: sum 16675 ms, max 126 ms, min 59 ms
----------------------------------------------------------------

2023-07-03 07:37:33 [main] [INFO]  KGenProgMain - entered the era of 157th generation.
2023-07-03 07:38:34 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 hours 11 minutes 20 seconds
Variants: generated 400, build-succeeded 202, build-failed 127, syntax-invalid 62, redundant 9
Fitness: max 0.833(197), min 0.167(3), ave 0.822
Test execution time: sum 14523 ms, max 136 ms, min 61 ms
----------------------------------------------------------------

2023-07-03 07:38:34 [main] [INFO]  KGenProgMain - entered the era of 158th generation.
2023-07-03 07:39:34 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 hours 12 minutes 20 seconds
Variants: generated 400, build-succeeded 211, build-failed 117, syntax-invalid 57, redundant 15
Fitness: max 0.833(201), min 0.167(2), ave 0.821
Test execution time: sum 15000 ms, max 117 ms, min 61 ms
----------------------------------------------------------------

2023-07-03 07:39:34 [main] [INFO]  KGenProgMain - entered the era of 159th generation.
2023-07-03 07:40:36 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 hours 13 minutes 23 seconds
Variants: generated 400, build-succeeded 223, build-failed 112, syntax-invalid 53, redundant 12
Fitness: max 0.833(219), min 0.667(4), ave 0.83
Test execution time: sum 15926 ms, max 198 ms, min 65 ms
----------------------------------------------------------------

2023-07-03 07:40:36 [main] [INFO]  KGenProgMain - entered the era of 160th generation.
2023-07-03 07:41:39 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 hours 14 minutes 25 seconds
Variants: generated 400, build-succeeded 218, build-failed 111, syntax-invalid 57, redundant 14
Fitness: max 0.833(214), min 0.167(1), ave 0.828
Test execution time: sum 15681 ms, max 141 ms, min 65 ms
----------------------------------------------------------------

2023-07-03 07:41:39 [main] [INFO]  KGenProgMain - entered the era of 161st generation.
2023-07-03 07:42:40 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 hours 15 minutes 26 seconds
Variants: generated 400, build-succeeded 219, build-failed 101, syntax-invalid 62, redundant 18
Fitness: max 0.833(215), min 0.167(1), ave 0.828
Test execution time: sum 15476 ms, max 109 ms, min 66 ms
----------------------------------------------------------------

2023-07-03 07:42:40 [main] [INFO]  KGenProgMain - entered the era of 162nd generation.
2023-07-03 07:43:45 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 hours 16 minutes 31 seconds
Variants: generated 400, build-succeeded 228, build-failed 114, syntax-invalid 39, redundant 19
Fitness: max 0.833(224), min 0.167(2), ave 0.825
Test execution time: sum 15893 ms, max 132 ms, min 61 ms
----------------------------------------------------------------

2023-07-03 07:43:45 [main] [INFO]  KGenProgMain - entered the era of 163rd generation.
2023-07-03 07:44:48 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 hours 17 minutes 34 seconds
Variants: generated 400, build-succeeded 210, build-failed 117, syntax-invalid 61, redundant 12
Fitness: max 0.833(206), min 0.167(1), ave 0.828
Test execution time: sum 15346 ms, max 242 ms, min 61 ms
----------------------------------------------------------------

2023-07-03 07:44:48 [main] [INFO]  KGenProgMain - entered the era of 164th generation.
2023-07-03 07:45:49 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 hours 18 minutes 35 seconds
Variants: generated 400, build-succeeded 214, build-failed 106, syntax-invalid 67, redundant 13
Fitness: max 1(1), min 0.167(2), ave 0.826
Test execution time: sum 15039 ms, max 123 ms, min 64 ms
----------------------------------------------------------------

2023-07-03 07:45:49 [main] [INFO]  KGenProgMain - entered the era of 165th generation.
2023-07-03 07:46:53 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 hours 19 minutes 39 seconds
Variants: generated 400, build-succeeded 215, build-failed 111, syntax-invalid 57, redundant 17
Fitness: max 0.833(206), min 0.167(1), ave 0.822
Test execution time: sum 15519 ms, max 222 ms, min 63 ms
----------------------------------------------------------------

2023-07-03 07:46:53 [main] [INFO]  KGenProgMain - entered the era of 166th generation.
2023-07-03 07:47:59 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 hours 20 minutes 45 seconds
Variants: generated 400, build-succeeded 229, build-failed 111, syntax-invalid 46, redundant 14
Fitness: max 0.833(224), min 0.167(1), ave 0.828
Test execution time: sum 16701 ms, max 244 ms, min 60 ms
----------------------------------------------------------------

2023-07-03 07:47:59 [main] [INFO]  KGenProgMain - entered the era of 167th generation.
2023-07-03 07:49:04 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 hours 21 minutes 50 seconds
Variants: generated 400, build-succeeded 217, build-failed 119, syntax-invalid 47, redundant 17
Fitness: max 0.833(212), min 0.167(1), ave 0.826
Test execution time: sum 15436 ms, max 121 ms, min 61 ms
----------------------------------------------------------------

2023-07-03 07:49:04 [main] [INFO]  KGenProgMain - entered the era of 168th generation.
2023-07-03 07:50:09 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 hours 22 minutes 55 seconds
Variants: generated 400, build-succeeded 212, build-failed 123, syntax-invalid 52, redundant 13
Fitness: max 0.833(212), min 0.833(212), ave 0.833
Test execution time: sum 15477 ms, max 162 ms, min 67 ms
----------------------------------------------------------------

2023-07-03 07:50:09 [main] [INFO]  KGenProgMain - entered the era of 169th generation.
2023-07-03 07:51:11 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 hours 23 minutes 57 seconds
Variants: generated 400, build-succeeded 197, build-failed 106, syntax-invalid 70, redundant 27
Fitness: max 0.833(195), min 0.667(2), ave 0.832
Test execution time: sum 14415 ms, max 112 ms, min 69 ms
----------------------------------------------------------------

2023-07-03 07:51:11 [main] [INFO]  KGenProgMain - entered the era of 170th generation.
2023-07-03 07:52:16 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 hours 25 minutes 2 seconds
Variants: generated 400, build-succeeded 212, build-failed 119, syntax-invalid 54, redundant 15
Fitness: max 0.833(206), min 0.167(1), ave 0.825
Test execution time: sum 14939 ms, max 126 ms, min 62 ms
----------------------------------------------------------------

2023-07-03 07:52:16 [main] [INFO]  KGenProgMain - entered the era of 171st generation.
2023-07-03 07:53:23 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 hours 26 minutes 9 seconds
Variants: generated 400, build-succeeded 222, build-failed 110, syntax-invalid 50, redundant 18
Fitness: max 0.833(218), min 0.167(1), ave 0.827
Test execution time: sum 16139 ms, max 138 ms, min 62 ms
----------------------------------------------------------------

2023-07-03 07:53:23 [main] [INFO]  KGenProgMain - entered the era of 172nd generation.
2023-07-03 07:54:30 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 hours 27 minutes 16 seconds
Variants: generated 400, build-succeeded 230, build-failed 114, syntax-invalid 43, redundant 13
Fitness: max 0.833(224), min 0.167(1), ave 0.827
Test execution time: sum 16419 ms, max 114 ms, min 66 ms
----------------------------------------------------------------

2023-07-03 07:54:30 [main] [INFO]  KGenProgMain - entered the era of 173rd generation.
2023-07-03 07:55:39 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 hours 28 minutes 25 seconds
Variants: generated 400, build-succeeded 226, build-failed 114, syntax-invalid 42, redundant 18
Fitness: max 0.833(221), min 0.167(2), ave 0.825
Test execution time: sum 16382 ms, max 134 ms, min 61 ms
----------------------------------------------------------------

2023-07-03 07:55:39 [main] [INFO]  KGenProgMain - entered the era of 174th generation.
2023-07-03 07:56:43 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 hours 29 minutes 29 seconds
Variants: generated 400, build-succeeded 200, build-failed 124, syntax-invalid 57, redundant 19
Fitness: max 1(1), min 0.167(3), ave 0.821
Test execution time: sum 14557 ms, max 123 ms, min 61 ms
----------------------------------------------------------------

2023-07-03 07:56:43 [main] [INFO]  KGenProgMain - entered the era of 175th generation.
2023-07-03 07:57:47 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 hours 30 minutes 33 seconds
Variants: generated 400, build-succeeded 201, build-failed 116, syntax-invalid 63, redundant 20
Fitness: max 0.833(198), min 0.167(1), ave 0.828
Test execution time: sum 14398 ms, max 137 ms, min 62 ms
----------------------------------------------------------------

2023-07-03 07:57:47 [main] [INFO]  KGenProgMain - entered the era of 176th generation.
2023-07-03 07:58:52 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 hours 31 minutes 39 seconds
Variants: generated 400, build-succeeded 206, build-failed 115, syntax-invalid 57, redundant 22
Fitness: max 0.833(201), min 0.167(4), ave 0.82
Test execution time: sum 15102 ms, max 133 ms, min 61 ms
----------------------------------------------------------------

2023-07-03 07:58:52 [main] [INFO]  KGenProgMain - entered the era of 177th generation.
2023-07-03 07:59:59 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 hours 32 minutes 45 seconds
Variants: generated 400, build-succeeded 216, build-failed 115, syntax-invalid 51, redundant 18
Fitness: max 0.833(211), min 0.167(3), ave 0.823
Test execution time: sum 15819 ms, max 108 ms, min 62 ms
----------------------------------------------------------------

2023-07-03 07:59:59 [main] [INFO]  KGenProgMain - entered the era of 178th generation.
2023-07-03 08:01:05 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 hours 33 minutes 52 seconds
Variants: generated 400, build-succeeded 213, build-failed 101, syntax-invalid 66, redundant 20
Fitness: max 0.833(206), min 0.167(1), ave 0.825
Test execution time: sum 15609 ms, max 249 ms, min 63 ms
----------------------------------------------------------------

2023-07-03 08:01:05 [main] [INFO]  KGenProgMain - entered the era of 179th generation.
2023-07-03 08:02:12 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 hours 34 minutes 58 seconds
Variants: generated 400, build-succeeded 201, build-failed 117, syntax-invalid 61, redundant 21
Fitness: max 0.833(200), min 0.667(1), ave 0.833
Test execution time: sum 15032 ms, max 159 ms, min 68 ms
----------------------------------------------------------------

2023-07-03 08:02:12 [main] [INFO]  KGenProgMain - entered the era of 180th generation.
2023-07-03 08:03:18 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 hours 36 minutes 4 seconds
Variants: generated 400, build-succeeded 198, build-failed 116, syntax-invalid 68, redundant 18
Fitness: max 0.833(191), min 0.167(4), ave 0.816
Test execution time: sum 14144 ms, max 124 ms, min 61 ms
----------------------------------------------------------------

2023-07-03 08:03:18 [main] [INFO]  KGenProgMain - entered the era of 181st generation.
2023-07-03 08:04:25 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 hours 37 minutes 11 seconds
Variants: generated 400, build-succeeded 200, build-failed 122, syntax-invalid 66, redundant 12
Fitness: max 0.833(192), min 0.167(2), ave 0.822
Test execution time: sum 14723 ms, max 138 ms, min 67 ms
----------------------------------------------------------------

2023-07-03 08:04:25 [main] [INFO]  KGenProgMain - entered the era of 182nd generation.
2023-07-03 08:05:30 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 hours 38 minutes 16 seconds
Variants: generated 400, build-succeeded 204, build-failed 104, syntax-invalid 76, redundant 16
Fitness: max 0.833(195), min 0.167(2), ave 0.82
Test execution time: sum 14835 ms, max 101 ms, min 62 ms
----------------------------------------------------------------

2023-07-03 08:05:30 [main] [INFO]  KGenProgMain - entered the era of 183rd generation.
2023-07-03 08:06:37 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 hours 39 minutes 23 seconds
Variants: generated 400, build-succeeded 197, build-failed 116, syntax-invalid 69, redundant 18
Fitness: max 1(2), min 0.167(2), ave 0.827
Test execution time: sum 14809 ms, max 177 ms, min 62 ms
----------------------------------------------------------------

2023-07-03 08:06:37 [main] [INFO]  KGenProgMain - entered the era of 184th generation.
2023-07-03 08:07:46 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 hours 40 minutes 32 seconds
Variants: generated 400, build-succeeded 210, build-failed 106, syntax-invalid 75, redundant 9
Fitness: max 0.833(205), min 0.167(3), ave 0.822
Test execution time: sum 16220 ms, max 250 ms, min 62 ms
----------------------------------------------------------------

2023-07-03 08:07:46 [main] [INFO]  KGenProgMain - entered the era of 185th generation.
2023-07-03 08:08:51 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 hours 41 minutes 38 seconds
Variants: generated 400, build-succeeded 194, build-failed 112, syntax-invalid 82, redundant 12
Fitness: max 0.833(190), min 0.167(2), ave 0.825
Test execution time: sum 14111 ms, max 145 ms, min 67 ms
----------------------------------------------------------------

2023-07-03 08:08:51 [main] [INFO]  KGenProgMain - entered the era of 186th generation.
2023-07-03 08:09:59 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 hours 42 minutes 45 seconds
Variants: generated 400, build-succeeded 190, build-failed 111, syntax-invalid 83, redundant 16
Fitness: max 0.833(183), min 0.167(1), ave 0.825
Test execution time: sum 14424 ms, max 145 ms, min 63 ms
----------------------------------------------------------------

2023-07-03 08:09:59 [main] [INFO]  KGenProgMain - entered the era of 187th generation.
2023-07-03 08:11:07 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 hours 43 minutes 53 seconds
Variants: generated 400, build-succeeded 202, build-failed 113, syntax-invalid 68, redundant 17
Fitness: max 0.833(198), min 0.667(4), ave 0.83
Test execution time: sum 14933 ms, max 127 ms, min 69 ms
----------------------------------------------------------------

2023-07-03 08:11:07 [main] [INFO]  KGenProgMain - entered the era of 188th generation.
2023-07-03 08:12:16 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 hours 45 minutes 2 seconds
Variants: generated 400, build-succeeded 193, build-failed 106, syntax-invalid 74, redundant 27
Fitness: max 1(1), min 0.667(1), ave 0.833
Test execution time: sum 14639 ms, max 158 ms, min 69 ms
----------------------------------------------------------------

2023-07-03 08:12:16 [main] [INFO]  KGenProgMain - entered the era of 189th generation.
2023-07-03 08:13:23 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 hours 46 minutes 9 seconds
Variants: generated 400, build-succeeded 200, build-failed 111, syntax-invalid 72, redundant 17
Fitness: max 0.833(193), min 0.167(2), ave 0.822
Test execution time: sum 14866 ms, max 99 ms, min 62 ms
----------------------------------------------------------------

2023-07-03 08:13:23 [main] [INFO]  KGenProgMain - entered the era of 190th generation.
2023-07-03 08:14:36 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 hours 47 minutes 22 seconds
Variants: generated 400, build-succeeded 224, build-failed 98, syntax-invalid 60, redundant 18
Fitness: max 0.833(214), min 0.167(1), ave 0.824
Test execution time: sum 16619 ms, max 132 ms, min 61 ms
----------------------------------------------------------------

2023-07-03 08:14:36 [main] [INFO]  KGenProgMain - entered the era of 191st generation.
2023-07-03 08:15:51 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 hours 48 minutes 37 seconds
Variants: generated 400, build-succeeded 223, build-failed 114, syntax-invalid 47, redundant 16
Fitness: max 1(1), min 0.667(2), ave 0.833
Test execution time: sum 16961 ms, max 162 ms, min 69 ms
----------------------------------------------------------------

2023-07-03 08:15:51 [main] [INFO]  KGenProgMain - entered the era of 192nd generation.
2023-07-03 08:17:03 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 hours 49 minutes 49 seconds
Variants: generated 400, build-succeeded 206, build-failed 110, syntax-invalid 69, redundant 15
Fitness: max 0.833(201), min 0.667(5), ave 0.829
Test execution time: sum 15589 ms, max 139 ms, min 70 ms
----------------------------------------------------------------

2023-07-03 08:17:03 [main] [INFO]  KGenProgMain - entered the era of 193rd generation.
2023-07-03 08:33:16 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 10 hours 6 minutes 2 seconds
Variants: generated 400, build-succeeded 210, build-failed 118, syntax-invalid 59, redundant 13
Fitness: max 1(1), min 0.167(1), ave 0.828
Test execution time: sum 916152 ms, max 900117 ms, min 70 ms
----------------------------------------------------------------

2023-07-03 08:33:16 [main] [INFO]  KGenProgMain - entered the era of 194th generation.
2023-07-03 08:34:25 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 10 hours 7 minutes 11 seconds
Variants: generated 400, build-succeeded 190, build-failed 110, syntax-invalid 83, redundant 17
Fitness: max 0.833(186), min 0.5(1), ave 0.829
Test execution time: sum 14293 ms, max 256 ms, min 69 ms
----------------------------------------------------------------

2023-07-03 08:34:25 [main] [INFO]  KGenProgMain - entered the era of 195th generation.
2023-07-03 08:35:35 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 10 hours 8 minutes 21 seconds
Variants: generated 400, build-succeeded 199, build-failed 111, syntax-invalid 76, redundant 14
Fitness: max 0.833(194), min 0.167(2), ave 0.824
Test execution time: sum 14672 ms, max 118 ms, min 68 ms
----------------------------------------------------------------

2023-07-03 08:35:35 [main] [INFO]  KGenProgMain - entered the era of 196th generation.
2023-07-03 08:36:45 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 10 hours 9 minutes 31 seconds
Variants: generated 400, build-succeeded 180, build-failed 122, syntax-invalid 87, redundant 11
Fitness: max 0.833(177), min 0.667(3), ave 0.831
Test execution time: sum 13705 ms, max 137 ms, min 69 ms
----------------------------------------------------------------

2023-07-03 08:36:45 [main] [INFO]  KGenProgMain - entered the era of 197th generation.
2023-07-03 08:37:52 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 10 hours 10 minutes 38 seconds
Variants: generated 400, build-succeeded 178, build-failed 114, syntax-invalid 92, redundant 16
Fitness: max 1(1), min 0.667(1), ave 0.833
Test execution time: sum 13612 ms, max 132 ms, min 64 ms
----------------------------------------------------------------

2023-07-03 08:37:52 [main] [INFO]  KGenProgMain - entered the era of 198th generation.
2023-07-03 08:39:05 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 10 hours 11 minutes 51 seconds
Variants: generated 400, build-succeeded 195, build-failed 105, syntax-invalid 79, redundant 21
Fitness: max 1(1), min 0.167(1), ave 0.827
Test execution time: sum 15104 ms, max 169 ms, min 63 ms
----------------------------------------------------------------

2023-07-03 08:39:05 [main] [INFO]  KGenProgMain - entered the era of 199th generation.
2023-07-03 08:40:19 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 10 hours 13 minutes 5 seconds
Variants: generated 400, build-succeeded 198, build-failed 116, syntax-invalid 73, redundant 13
Fitness: max 0.833(195), min 0.167(2), ave 0.826
Test execution time: sum 15471 ms, max 306 ms, min 62 ms
----------------------------------------------------------------

2023-07-03 08:40:19 [main] [INFO]  KGenProgMain - entered the era of 200th generation.
2023-07-03 08:41:28 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 10 hours 14 minutes 14 seconds
Variants: generated 400, build-succeeded 183, build-failed 117, syntax-invalid 83, redundant 17
Fitness: max 1(1), min 0.5(1), ave 0.83
Test execution time: sum 13956 ms, max 137 ms, min 70 ms
----------------------------------------------------------------

2023-07-03 08:41:28 [main] [INFO]  KGenProgMain - entered the era of 201st generation.
2023-07-03 08:42:37 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 10 hours 15 minutes 23 seconds
Variants: generated 400, build-succeeded 180, build-failed 107, syntax-invalid 96, redundant 17
Fitness: max 1(1), min 0.667(4), ave 0.831
Test execution time: sum 13813 ms, max 152 ms, min 70 ms
----------------------------------------------------------------

2023-07-03 08:42:37 [main] [INFO]  KGenProgMain - entered the era of 202nd generation.
2023-07-03 08:43:45 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 10 hours 16 minutes 31 seconds
Variants: generated 400, build-succeeded 178, build-failed 120, syntax-invalid 94, redundant 8
Fitness: max 1(1), min 0.167(1), ave 0.827
Test execution time: sum 13538 ms, max 115 ms, min 66 ms
----------------------------------------------------------------

2023-07-03 08:43:45 [main] [INFO]  KGenProgMain - entered the era of 203rd generation.
2023-07-03 08:44:56 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 10 hours 17 minutes 42 seconds
Variants: generated 400, build-succeeded 189, build-failed 103, syntax-invalid 84, redundant 24
Fitness: max 0.833(183), min 0.167(4), ave 0.817
Test execution time: sum 14899 ms, max 256 ms, min 64 ms
----------------------------------------------------------------

2023-07-03 08:44:56 [main] [INFO]  KGenProgMain - entered the era of 204th generation.
2023-07-03 08:46:08 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 10 hours 18 minutes 54 seconds
Variants: generated 400, build-succeeded 181, build-failed 120, syntax-invalid 85, redundant 14
Fitness: max 1(2), min 0.167(2), ave 0.823
Test execution time: sum 14173 ms, max 240 ms, min 63 ms
----------------------------------------------------------------

2023-07-03 08:46:08 [main] [INFO]  KGenProgMain - entered the era of 205th generation.
2023-07-03 08:47:23 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 10 hours 20 minutes 9 seconds
Variants: generated 400, build-succeeded 205, build-failed 119, syntax-invalid 61, redundant 15
Fitness: max 0.833(201), min 0.667(4), ave 0.83
Test execution time: sum 15634 ms, max 132 ms, min 70 ms
----------------------------------------------------------------

2023-07-03 08:47:23 [main] [INFO]  KGenProgMain - entered the era of 206th generation.
2023-07-03 08:48:34 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 10 hours 21 minutes 20 seconds
Variants: generated 400, build-succeeded 177, build-failed 118, syntax-invalid 86, redundant 19
Fitness: max 0.833(175), min 0.667(2), ave 0.831
Test execution time: sum 13544 ms, max 144 ms, min 71 ms
----------------------------------------------------------------

2023-07-03 08:48:34 [main] [INFO]  KGenProgMain - entered the era of 207th generation.
2023-07-03 08:49:48 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 10 hours 22 minutes 34 seconds
Variants: generated 400, build-succeeded 195, build-failed 112, syntax-invalid 79, redundant 14
Fitness: max 0.833(191), min 0.167(3), ave 0.822
Test execution time: sum 15073 ms, max 158 ms, min 64 ms
----------------------------------------------------------------

2023-07-03 08:49:48 [main] [INFO]  KGenProgMain - entered the era of 208th generation.
2023-07-03 08:51:02 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 10 hours 23 minutes 48 seconds
Variants: generated 400, build-succeeded 195, build-failed 112, syntax-invalid 75, redundant 18
Fitness: max 1(1), min 0.167(4), ave 0.815
Test execution time: sum 14873 ms, max 130 ms, min 64 ms
----------------------------------------------------------------

2023-07-03 08:51:02 [main] [INFO]  KGenProgMain - entered the era of 209th generation.
2023-07-03 08:52:17 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 10 hours 25 minutes 3 seconds
Variants: generated 400, build-succeeded 181, build-failed 123, syntax-invalid 83, redundant 13
Fitness: max 0.833(178), min 0.167(1), ave 0.828
Test execution time: sum 14121 ms, max 172 ms, min 66 ms
----------------------------------------------------------------

2023-07-03 08:52:17 [main] [INFO]  KGenProgMain - entered the era of 210th generation.
2023-07-03 08:53:29 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 10 hours 26 minutes 15 seconds
Variants: generated 400, build-succeeded 174, build-failed 124, syntax-invalid 87, redundant 15
Fitness: max 0.833(171), min 0.667(3), ave 0.83
Test execution time: sum 13495 ms, max 109 ms, min 72 ms
----------------------------------------------------------------

2023-07-03 08:53:29 [main] [INFO]  KGenProgMain - entered the era of 211th generation.
2023-07-03 08:54:45 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 10 hours 27 minutes 31 seconds
Variants: generated 400, build-succeeded 193, build-failed 119, syntax-invalid 72, redundant 16
Fitness: max 0.833(192), min 0.167(1), ave 0.83
Test execution time: sum 14816 ms, max 150 ms, min 65 ms
----------------------------------------------------------------

2023-07-03 08:54:45 [main] [INFO]  KGenProgMain - entered the era of 212th generation.
2023-07-03 08:56:03 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 10 hours 28 minutes 49 seconds
Variants: generated 400, build-succeeded 203, build-failed 112, syntax-invalid 71, redundant 14
Fitness: max 0.833(198), min 0.333(1), ave 0.828
Test execution time: sum 15906 ms, max 134 ms, min 62 ms
----------------------------------------------------------------

2023-07-03 08:56:03 [main] [INFO]  KGenProgMain - entered the era of 213th generation.
2023-07-03 08:57:21 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 10 hours 30 minutes 7 seconds
Variants: generated 400, build-succeeded 201, build-failed 119, syntax-invalid 59, redundant 21
Fitness: max 0.833(197), min 0.167(2), ave 0.825
Test execution time: sum 15942 ms, max 135 ms, min 66 ms
----------------------------------------------------------------

2023-07-03 08:57:21 [main] [INFO]  KGenProgMain - entered the era of 214th generation.
2023-07-03 08:58:41 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 10 hours 31 minutes 27 seconds
Variants: generated 400, build-succeeded 218, build-failed 107, syntax-invalid 59, redundant 16
Fitness: max 0.833(213), min 0.667(5), ave 0.83
Test execution time: sum 16787 ms, max 125 ms, min 70 ms
----------------------------------------------------------------

2023-07-03 08:58:41 [main] [INFO]  KGenProgMain - entered the era of 215th generation.
2023-07-03 08:59:59 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 10 hours 32 minutes 45 seconds
Variants: generated 400, build-succeeded 207, build-failed 104, syntax-invalid 68, redundant 21
Fitness: max 0.833(202), min 0.167(1), ave 0.827
Test execution time: sum 16427 ms, max 146 ms, min 65 ms
----------------------------------------------------------------

2023-07-03 08:59:59 [main] [INFO]  KGenProgMain - entered the era of 216th generation.
2023-07-03 09:01:22 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 10 hours 34 minutes 7 seconds
Variants: generated 400, build-succeeded 212, build-failed 113, syntax-invalid 48, redundant 27
Fitness: max 0.833(206), min 0.167(1), ave 0.826
Test execution time: sum 17199 ms, max 243 ms, min 65 ms
----------------------------------------------------------------

2023-07-03 09:01:22 [main] [INFO]  KGenProgMain - entered the era of 217th generation.
2023-07-03 09:02:39 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 10 hours 35 minutes 25 seconds
Variants: generated 400, build-succeeded 201, build-failed 104, syntax-invalid 67, redundant 28
Fitness: max 0.833(191), min 0.167(1), ave 0.823
Test execution time: sum 15554 ms, max 118 ms, min 64 ms
----------------------------------------------------------------

2023-07-03 09:02:39 [main] [INFO]  KGenProgMain - entered the era of 218th generation.
2023-07-03 09:03:57 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 10 hours 36 minutes 43 seconds
Variants: generated 400, build-succeeded 198, build-failed 109, syntax-invalid 66, redundant 27
Fitness: max 0.833(197), min 0.667(1), ave 0.832
Test execution time: sum 15533 ms, max 171 ms, min 72 ms
----------------------------------------------------------------

2023-07-03 09:03:57 [main] [INFO]  KGenProgMain - entered the era of 219th generation.
2023-07-03 09:05:17 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 10 hours 38 minutes 3 seconds
Variants: generated 400, build-succeeded 203, build-failed 115, syntax-invalid 62, redundant 20
Fitness: max 0.833(199), min 0.667(4), ave 0.83
Test execution time: sum 16282 ms, max 165 ms, min 72 ms
----------------------------------------------------------------

2023-07-03 09:05:17 [main] [INFO]  KGenProgMain - entered the era of 220th generation.
2023-07-03 09:06:35 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 10 hours 39 minutes 21 seconds
Variants: generated 400, build-succeeded 188, build-failed 127, syntax-invalid 66, redundant 19
Fitness: max 0.833(175), min 0.167(2), ave 0.816
Test execution time: sum 14912 ms, max 131 ms, min 65 ms
----------------------------------------------------------------

2023-07-03 09:06:35 [main] [INFO]  KGenProgMain - entered the era of 221st generation.
2023-07-03 09:07:59 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 10 hours 40 minutes 45 seconds
Variants: generated 400, build-succeeded 221, build-failed 109, syntax-invalid 56, redundant 14
Fitness: max 1(1), min 0.167(1), ave 0.822
Test execution time: sum 17801 ms, max 142 ms, min 73 ms
----------------------------------------------------------------

2023-07-03 09:07:59 [main] [INFO]  KGenProgMain - entered the era of 222nd generation.
2023-07-03 09:24:19 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 10 hours 57 minutes 5 seconds
Variants: generated 400, build-succeeded 190, build-failed 122, syntax-invalid 70, redundant 18
Fitness: max 0.833(183), min 0.167(3), ave 0.819
Test execution time: sum 915696 ms, max 900121 ms, min 64 ms
----------------------------------------------------------------

2023-07-03 09:24:19 [main] [INFO]  KGenProgMain - entered the era of 223rd generation.
2023-07-03 09:25:39 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 10 hours 58 minutes 25 seconds
Variants: generated 400, build-succeeded 199, build-failed 122, syntax-invalid 62, redundant 17
Fitness: max 0.833(194), min 0.5(1), ave 0.828
Test execution time: sum 15632 ms, max 121 ms, min 67 ms
----------------------------------------------------------------

2023-07-03 09:25:39 [main] [INFO]  KGenProgMain - entered the era of 224th generation.
2023-07-03 09:26:58 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 10 hours 59 minutes 44 seconds
Variants: generated 400, build-succeeded 182, build-failed 121, syntax-invalid 76, redundant 21
Fitness: max 0.833(173), min 0.167(4), ave 0.814
Test execution time: sum 14671 ms, max 160 ms, min 64 ms
----------------------------------------------------------------

2023-07-03 09:26:58 [main] [INFO]  KGenProgMain - entered the era of 225th generation.
2023-07-03 09:28:15 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 hours 1 minutes 1 seconds
Variants: generated 400, build-succeeded 190, build-failed 104, syntax-invalid 87, redundant 19
Fitness: max 1(2), min 0.167(1), ave 0.829
Test execution time: sum 15288 ms, max 236 ms, min 63 ms
----------------------------------------------------------------

2023-07-03 09:28:15 [main] [INFO]  KGenProgMain - entered the era of 226th generation.
2023-07-03 09:29:30 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 hours 2 minutes 16 seconds
Variants: generated 400, build-succeeded 167, build-failed 121, syntax-invalid 90, redundant 22
Fitness: max 0.833(165), min 0.167(1), ave 0.828
Test execution time: sum 13113 ms, max 136 ms, min 67 ms
----------------------------------------------------------------

2023-07-03 09:29:30 [main] [INFO]  KGenProgMain - entered the era of 227th generation.
2023-07-03 09:30:51 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 hours 3 minutes 37 seconds
Variants: generated 400, build-succeeded 198, build-failed 115, syntax-invalid 66, redundant 21
Fitness: max 1(1), min 0.167(2), ave 0.827
Test execution time: sum 15912 ms, max 252 ms, min 66 ms
----------------------------------------------------------------

2023-07-03 09:30:51 [main] [INFO]  KGenProgMain - entered the era of 228th generation.
2023-07-03 09:32:11 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 hours 4 minutes 57 seconds
Variants: generated 400, build-succeeded 190, build-failed 113, syntax-invalid 83, redundant 14
Fitness: max 0.833(185), min 0.167(1), ave 0.826
Test execution time: sum 15402 ms, max 139 ms, min 65 ms
----------------------------------------------------------------

2023-07-03 09:32:11 [main] [INFO]  KGenProgMain - entered the era of 229th generation.
2023-07-03 09:33:31 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 hours 6 minutes 17 seconds
Variants: generated 400, build-succeeded 197, build-failed 110, syntax-invalid 73, redundant 20
Fitness: max 0.833(193), min 0.167(1), ave 0.827
Test execution time: sum 15753 ms, max 128 ms, min 65 ms
----------------------------------------------------------------

2023-07-03 09:33:31 [main] [INFO]  KGenProgMain - entered the era of 230th generation.
2023-07-03 09:34:54 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 hours 7 minutes 40 seconds
Variants: generated 400, build-succeeded 201, build-failed 114, syntax-invalid 68, redundant 17
Fitness: max 1(2), min 0.167(1), ave 0.83
Test execution time: sum 16014 ms, max 149 ms, min 64 ms
----------------------------------------------------------------

2023-07-03 09:34:54 [main] [INFO]  KGenProgMain - entered the era of 231st generation.
2023-07-03 09:36:20 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 hours 9 minutes 6 seconds
Variants: generated 400, build-succeeded 222, build-failed 108, syntax-invalid 59, redundant 11
Fitness: max 0.833(219), min 0.167(1), ave 0.829
Test execution time: sum 18076 ms, max 135 ms, min 66 ms
----------------------------------------------------------------

2023-07-03 09:36:20 [main] [INFO]  KGenProgMain - entered the era of 232nd generation.
2023-07-03 09:37:45 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 hours 10 minutes 31 seconds
Variants: generated 400, build-succeeded 210, build-failed 103, syntax-invalid 66, redundant 21
Fitness: max 0.833(204), min 0.167(2), ave 0.822
Test execution time: sum 16806 ms, max 126 ms, min 65 ms
----------------------------------------------------------------

2023-07-03 09:37:45 [main] [INFO]  KGenProgMain - entered the era of 233rd generation.
2023-07-03 09:39:06 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 hours 11 minutes 52 seconds
Variants: generated 400, build-succeeded 194, build-failed 108, syntax-invalid 81, redundant 17
Fitness: max 0.833(192), min 0.167(1), ave 0.829
Test execution time: sum 15788 ms, max 163 ms, min 66 ms
----------------------------------------------------------------

2023-07-03 09:39:06 [main] [INFO]  KGenProgMain - entered the era of 234th generation.
2023-07-03 09:40:26 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 hours 13 minutes 12 seconds
Variants: generated 400, build-succeeded 185, build-failed 119, syntax-invalid 85, redundant 11
Fitness: max 0.833(183), min 0.667(2), ave 0.832
Test execution time: sum 15148 ms, max 135 ms, min 69 ms
----------------------------------------------------------------

2023-07-03 09:40:26 [main] [INFO]  KGenProgMain - entered the era of 235th generation.
2023-07-03 09:41:45 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 hours 14 minutes 31 seconds
Variants: generated 400, build-succeeded 181, build-failed 117, syntax-invalid 90, redundant 12
Fitness: max 1(1), min 0.167(1), ave 0.825
Test execution time: sum 14463 ms, max 147 ms, min 68 ms
----------------------------------------------------------------

2023-07-03 09:41:45 [main] [INFO]  KGenProgMain - entered the era of 236th generation.
2023-07-03 09:43:09 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 hours 15 minutes 55 seconds
Variants: generated 400, build-succeeded 195, build-failed 120, syntax-invalid 70, redundant 15
Fitness: max 0.833(193), min 0.167(2), ave 0.826
Test execution time: sum 15795 ms, max 163 ms, min 66 ms
----------------------------------------------------------------

2023-07-03 09:43:09 [main] [INFO]  KGenProgMain - entered the era of 237th generation.
2023-07-03 09:44:33 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 hours 17 minutes 19 seconds
Variants: generated 400, build-succeeded 186, build-failed 127, syntax-invalid 74, redundant 13
Fitness: max 1(1), min 0.667(3), ave 0.832
Test execution time: sum 15290 ms, max 145 ms, min 74 ms
----------------------------------------------------------------

2023-07-03 09:44:33 [main] [INFO]  KGenProgMain - entered the era of 238th generation.
2023-07-03 09:45:57 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 hours 18 minutes 43 seconds
Variants: generated 400, build-succeeded 201, build-failed 125, syntax-invalid 63, redundant 11
Fitness: max 0.833(193), min 0.167(1), ave 0.824
Test execution time: sum 16243 ms, max 122 ms, min 67 ms
----------------------------------------------------------------

2023-07-03 09:45:57 [main] [INFO]  KGenProgMain - entered the era of 239th generation.
2023-07-03 09:47:27 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 hours 20 minutes 13 seconds
Variants: generated 400, build-succeeded 219, build-failed 108, syntax-invalid 60, redundant 13
Fitness: max 1(1), min 0.167(1), ave 0.83
Test execution time: sum 17975 ms, max 152 ms, min 74 ms
----------------------------------------------------------------

2023-07-03 09:47:27 [main] [INFO]  KGenProgMain - entered the era of 240th generation.
2023-07-03 09:48:53 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 hours 21 minutes 39 seconds
Variants: generated 400, build-succeeded 192, build-failed 125, syntax-invalid 69, redundant 14
Fitness: max 0.833(190), min 0.667(2), ave 0.832
Test execution time: sum 15800 ms, max 156 ms, min 74 ms
----------------------------------------------------------------

2023-07-03 09:48:53 [main] [INFO]  KGenProgMain - entered the era of 241st generation.
2023-07-03 09:50:20 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 hours 23 minutes 6 seconds
Variants: generated 400, build-succeeded 208, build-failed 113, syntax-invalid 67, redundant 12
Fitness: max 0.833(202), min 0.167(2), ave 0.824
Test execution time: sum 16804 ms, max 131 ms, min 66 ms
----------------------------------------------------------------

2023-07-03 09:50:20 [main] [INFO]  KGenProgMain - entered the era of 242nd generation.
2023-07-03 09:51:47 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 hours 24 minutes 33 seconds
Variants: generated 400, build-succeeded 205, build-failed 105, syntax-invalid 71, redundant 19
Fitness: max 0.833(198), min 0.167(2), ave 0.822
Test execution time: sum 16771 ms, max 177 ms, min 73 ms
----------------------------------------------------------------

2023-07-03 09:51:47 [main] [INFO]  KGenProgMain - entered the era of 243rd generation.
2023-07-03 09:53:10 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 hours 25 minutes 56 seconds
Variants: generated 400, build-succeeded 186, build-failed 124, syntax-invalid 81, redundant 9
Fitness: max 0.833(181), min 0.167(1), ave 0.826
Test execution time: sum 15534 ms, max 153 ms, min 66 ms
----------------------------------------------------------------

2023-07-03 09:53:10 [main] [INFO]  KGenProgMain - entered the era of 244th generation.
2023-07-03 09:54:31 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 hours 27 minutes 17 seconds
Variants: generated 400, build-succeeded 181, build-failed 115, syntax-invalid 86, redundant 18
Fitness: max 0.833(173), min 0.167(3), ave 0.815
Test execution time: sum 14666 ms, max 125 ms, min 66 ms
----------------------------------------------------------------

2023-07-03 09:54:31 [main] [INFO]  KGenProgMain - entered the era of 245th generation.
2023-07-03 09:55:58 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 hours 28 minutes 44 seconds
Variants: generated 400, build-succeeded 192, build-failed 117, syntax-invalid 73, redundant 18
Fitness: max 0.833(190), min 0.167(1), ave 0.829
Test execution time: sum 15994 ms, max 167 ms, min 68 ms
----------------------------------------------------------------

2023-07-03 09:55:58 [main] [INFO]  KGenProgMain - entered the era of 246th generation.
2023-07-03 09:57:25 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 hours 30 minutes 11 seconds
Variants: generated 400, build-succeeded 195, build-failed 113, syntax-invalid 74, redundant 18
Fitness: max 0.833(193), min 0.167(1), ave 0.829
Test execution time: sum 16311 ms, max 135 ms, min 67 ms
----------------------------------------------------------------

2023-07-03 09:57:25 [main] [INFO]  KGenProgMain - entered the era of 247th generation.
2023-07-03 09:58:48 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 hours 31 minutes 34 seconds
Variants: generated 400, build-succeeded 184, build-failed 121, syntax-invalid 78, redundant 17
Fitness: max 1(1), min 0.167(1), ave 0.825
Test execution time: sum 14936 ms, max 123 ms, min 76 ms
----------------------------------------------------------------

2023-07-03 09:58:48 [main] [INFO]  KGenProgMain - entered the era of 248th generation.
2023-07-03 10:00:16 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 hours 33 minutes 2 seconds
Variants: generated 400, build-succeeded 201, build-failed 112, syntax-invalid 75, redundant 12
Fitness: max 0.833(198), min 0.167(1), ave 0.828
Test execution time: sum 16723 ms, max 166 ms, min 75 ms
----------------------------------------------------------------

2023-07-03 10:00:16 [main] [INFO]  KGenProgMain - entered the era of 249th generation.
2023-07-03 10:01:37 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 hours 34 minutes 23 seconds
Variants: generated 400, build-succeeded 176, build-failed 114, syntax-invalid 90, redundant 20
Fitness: max 0.833(167), min 0.167(1), ave 0.822
Test execution time: sum 14559 ms, max 110 ms, min 67 ms
----------------------------------------------------------------

2023-07-03 10:01:37 [main] [INFO]  KGenProgMain - entered the era of 250th generation.
2023-07-03 10:03:05 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 hours 35 minutes 51 seconds
Variants: generated 400, build-succeeded 199, build-failed 109, syntax-invalid 75, redundant 17
Fitness: max 0.833(194), min 0.167(1), ave 0.827
Test execution time: sum 16558 ms, max 173 ms, min 66 ms
----------------------------------------------------------------

2023-07-03 10:03:05 [main] [INFO]  KGenProgMain - entered the era of 251st generation.
2023-07-03 10:04:33 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 hours 37 minutes 19 seconds
Variants: generated 400, build-succeeded 193, build-failed 113, syntax-invalid 71, redundant 23
Fitness: max 0.833(187), min 0.167(1), ave 0.826
Test execution time: sum 16204 ms, max 162 ms, min 67 ms
----------------------------------------------------------------

2023-07-03 10:04:33 [main] [INFO]  KGenProgMain - entered the era of 252nd generation.
2023-07-03 10:05:57 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 hours 38 minutes 43 seconds
Variants: generated 400, build-succeeded 186, build-failed 114, syntax-invalid 89, redundant 11
Fitness: max 1(1), min 0.167(1), ave 0.823
Test execution time: sum 15025 ms, max 117 ms, min 71 ms
----------------------------------------------------------------

2023-07-03 10:05:57 [main] [INFO]  KGenProgMain - entered the era of 253rd generation.
2023-07-03 10:07:23 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 hours 40 minutes 9 seconds
Variants: generated 400, build-succeeded 184, build-failed 108, syntax-invalid 89, redundant 19
Fitness: max 1(1), min 0.167(3), ave 0.816
Test execution time: sum 15430 ms, max 156 ms, min 68 ms
----------------------------------------------------------------

2023-07-03 10:07:23 [main] [INFO]  KGenProgMain - entered the era of 254th generation.
2023-07-03 10:08:50 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 hours 41 minutes 36 seconds
Variants: generated 400, build-succeeded 186, build-failed 110, syntax-invalid 82, redundant 22
Fitness: max 1(3), min 0.167(1), ave 0.826
Test execution time: sum 15453 ms, max 115 ms, min 70 ms
----------------------------------------------------------------

2023-07-03 10:08:50 [main] [INFO]  KGenProgMain - entered the era of 255th generation.
2023-07-03 10:10:19 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 hours 43 minutes 5 seconds
Variants: generated 400, build-succeeded 195, build-failed 104, syntax-invalid 82, redundant 19
Fitness: max 1(1), min 0.167(1), ave 0.827
Test execution time: sum 16244 ms, max 184 ms, min 68 ms
----------------------------------------------------------------

2023-07-03 10:10:19 [main] [INFO]  KGenProgMain - entered the era of 256th generation.
2023-07-03 10:11:48 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 hours 44 minutes 34 seconds
Variants: generated 400, build-succeeded 184, build-failed 127, syntax-invalid 78, redundant 11
Fitness: max 0.833(173), min 0.5(2), ave 0.822
Test execution time: sum 15067 ms, max 152 ms, min 71 ms
----------------------------------------------------------------

2023-07-03 10:11:48 [main] [INFO]  KGenProgMain - entered the era of 257th generation.
2023-07-03 10:13:19 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 hours 46 minutes 4 seconds
Variants: generated 400, build-succeeded 190, build-failed 123, syntax-invalid 75, redundant 12
Fitness: max 0.833(180), min 0.167(3), ave 0.817
Test execution time: sum 15935 ms, max 137 ms, min 65 ms
----------------------------------------------------------------

2023-07-03 10:13:19 [main] [INFO]  KGenProgMain - entered the era of 258th generation.
2023-07-03 10:14:50 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 hours 47 minutes 36 seconds
Variants: generated 400, build-succeeded 198, build-failed 118, syntax-invalid 70, redundant 14
Fitness: max 0.833(192), min 0.667(6), ave 0.828
Test execution time: sum 16295 ms, max 112 ms, min 77 ms
----------------------------------------------------------------

2023-07-03 10:14:50 [main] [INFO]  KGenProgMain - entered the era of 259th generation.
2023-07-03 10:16:21 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 hours 49 minutes 7 seconds
Variants: generated 400, build-succeeded 196, build-failed 106, syntax-invalid 83, redundant 15
Fitness: max 0.833(190), min 0.167(1), ave 0.826
Test execution time: sum 16437 ms, max 137 ms, min 77 ms
----------------------------------------------------------------

2023-07-03 10:16:21 [main] [INFO]  KGenProgMain - entered the era of 260th generation.
2023-07-03 10:17:54 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 hours 50 minutes 40 seconds
Variants: generated 400, build-succeeded 201, build-failed 109, syntax-invalid 72, redundant 18
Fitness: max 0.833(188), min 0.167(2), ave 0.817
Test execution time: sum 17149 ms, max 224 ms, min 67 ms
----------------------------------------------------------------

2023-07-03 10:17:54 [main] [INFO]  KGenProgMain - entered the era of 261st generation.
2023-07-03 10:19:25 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 hours 52 minutes 11 seconds
Variants: generated 400, build-succeeded 191, build-failed 119, syntax-invalid 71, redundant 19
Fitness: max 0.833(182), min 0.167(1), ave 0.823
Test execution time: sum 15742 ms, max 122 ms, min 71 ms
----------------------------------------------------------------

2023-07-03 10:19:25 [main] [INFO]  KGenProgMain - entered the era of 262nd generation.
2023-07-03 10:20:59 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 hours 53 minutes 45 seconds
Variants: generated 400, build-succeeded 200, build-failed 108, syntax-invalid 70, redundant 22
Fitness: max 1(1), min 0.167(4), ave 0.816
Test execution time: sum 16716 ms, max 177 ms, min 68 ms
----------------------------------------------------------------

2023-07-03 10:20:59 [main] [INFO]  KGenProgMain - entered the era of 263rd generation.
2023-07-03 10:22:31 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 hours 55 minutes 17 seconds
Variants: generated 400, build-succeeded 189, build-failed 122, syntax-invalid 80, redundant 9
Fitness: max 0.833(188), min 0.667(1), ave 0.832
Test execution time: sum 16275 ms, max 262 ms, min 78 ms
----------------------------------------------------------------

2023-07-03 10:22:31 [main] [INFO]  KGenProgMain - entered the era of 264th generation.
2023-07-03 10:24:01 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 hours 56 minutes 47 seconds
Variants: generated 400, build-succeeded 179, build-failed 114, syntax-invalid 83, redundant 24
Fitness: max 0.833(174), min 0.167(1), ave 0.826
Test execution time: sum 14981 ms, max 108 ms, min 69 ms
----------------------------------------------------------------

2023-07-03 10:24:01 [main] [INFO]  KGenProgMain - entered the era of 265th generation.
2023-07-03 10:25:35 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 hours 58 minutes 21 seconds
Variants: generated 400, build-succeeded 199, build-failed 112, syntax-invalid 75, redundant 14
Fitness: max 0.833(189), min 0.5(2), ave 0.823
Test execution time: sum 16961 ms, max 189 ms, min 71 ms
----------------------------------------------------------------

2023-07-03 10:25:35 [main] [INFO]  KGenProgMain - entered the era of 266th generation.
2023-07-03 10:27:07 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 hours 59 minutes 53 seconds
Variants: generated 400, build-succeeded 181, build-failed 113, syntax-invalid 81, redundant 25
Fitness: max 1(3), min 0.5(1), ave 0.827
Test execution time: sum 15821 ms, max 177 ms, min 79 ms
----------------------------------------------------------------

2023-07-03 10:27:08 [main] [INFO]  KGenProgMain - entered the era of 267th generation.
2023-07-03 10:28:44 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 hours 1 minutes 30 seconds
Variants: generated 400, build-succeeded 214, build-failed 109, syntax-invalid 64, redundant 13
Fitness: max 0.833(207), min 0.167(3), ave 0.821
Test execution time: sum 17961 ms, max 138 ms, min 67 ms
----------------------------------------------------------------

2023-07-03 10:28:44 [main] [INFO]  KGenProgMain - entered the era of 268th generation.
2023-07-03 10:30:18 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 hours 3 minutes 4 seconds
Variants: generated 400, build-succeeded 194, build-failed 114, syntax-invalid 76, redundant 16
Fitness: max 0.833(192), min 0.167(2), ave 0.826
Test execution time: sum 16474 ms, max 144 ms, min 72 ms
----------------------------------------------------------------

2023-07-03 10:30:18 [main] [INFO]  KGenProgMain - entered the era of 269th generation.
2023-07-03 10:31:49 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 hours 4 minutes 35 seconds
Variants: generated 400, build-succeeded 175, build-failed 131, syntax-invalid 86, redundant 8
Fitness: max 1(1), min 0.167(2), ave 0.822
Test execution time: sum 15236 ms, max 171 ms, min 67 ms
----------------------------------------------------------------

2023-07-03 10:31:49 [main] [INFO]  KGenProgMain - entered the era of 270th generation.
2023-07-03 10:33:20 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 hours 6 minutes 6 seconds
Variants: generated 400, build-succeeded 197, build-failed 100, syntax-invalid 87, redundant 16
Fitness: max 0.833(193), min 0.167(4), ave 0.82
Test execution time: sum 16551 ms, max 121 ms, min 68 ms
----------------------------------------------------------------

2023-07-03 10:33:20 [main] [INFO]  KGenProgMain - entered the era of 271st generation.
2023-07-03 10:34:55 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 hours 7 minutes 41 seconds
Variants: generated 400, build-succeeded 199, build-failed 103, syntax-invalid 84, redundant 14
Fitness: max 0.833(191), min 0.167(3), ave 0.819
Test execution time: sum 17199 ms, max 162 ms, min 68 ms
----------------------------------------------------------------

2023-07-03 10:34:55 [main] [INFO]  KGenProgMain - entered the era of 272nd generation.
2023-07-03 10:36:32 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 hours 9 minutes 18 seconds
Variants: generated 400, build-succeeded 195, build-failed 118, syntax-invalid 67, redundant 20
Fitness: max 0.833(188), min 0.167(1), ave 0.825
Test execution time: sum 17160 ms, max 170 ms, min 79 ms
----------------------------------------------------------------

2023-07-03 10:36:32 [main] [INFO]  KGenProgMain - entered the era of 273rd generation.
2023-07-03 10:38:07 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 hours 10 minutes 53 seconds
Variants: generated 400, build-succeeded 195, build-failed 108, syntax-invalid 73, redundant 24
Fitness: max 0.833(187), min 0.167(1), ave 0.824
Test execution time: sum 16584 ms, max 140 ms, min 70 ms
----------------------------------------------------------------

2023-07-03 10:38:07 [main] [INFO]  KGenProgMain - entered the era of 274th generation.
2023-07-03 10:39:39 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 hours 12 minutes 25 seconds
Variants: generated 400, build-succeeded 180, build-failed 115, syntax-invalid 89, redundant 16
Fitness: max 0.833(178), min 0.167(2), ave 0.826
Test execution time: sum 15752 ms, max 177 ms, min 69 ms
----------------------------------------------------------------

2023-07-03 10:39:39 [main] [INFO]  KGenProgMain - entered the era of 275th generation.
2023-07-03 10:41:27 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 hours 14 minutes 13 seconds
Variants: generated 400, build-succeeded 200, build-failed 106, syntax-invalid 78, redundant 16
Fitness: max 1(1), min 0.167(1), ave 0.826
Test execution time: sum 20025 ms, max 296 ms, min 70 ms
----------------------------------------------------------------

2023-07-03 10:41:27 [main] [INFO]  KGenProgMain - entered the era of 276th generation.
2023-07-03 10:43:12 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 hours 15 minutes 58 seconds
Variants: generated 400, build-succeeded 186, build-failed 124, syntax-invalid 73, redundant 17
Fitness: max 0.833(182), min 0.167(1), ave 0.827
Test execution time: sum 18101 ms, max 282 ms, min 82 ms
----------------------------------------------------------------

2023-07-03 10:43:12 [main] [INFO]  KGenProgMain - entered the era of 277th generation.
2023-07-03 10:44:54 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 hours 17 minutes 40 seconds
Variants: generated 400, build-succeeded 199, build-failed 103, syntax-invalid 81, redundant 17
Fitness: max 0.833(188), min 0.167(2), ave 0.817
Test execution time: sum 18342 ms, max 169 ms, min 71 ms
----------------------------------------------------------------

2023-07-03 10:44:54 [main] [INFO]  KGenProgMain - entered the era of 278th generation.
2023-07-03 10:46:46 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 hours 19 minutes 32 seconds
Variants: generated 400, build-succeeded 214, build-failed 119, syntax-invalid 53, redundant 14
Fitness: max 0.833(209), min 0.167(1), ave 0.827
Test execution time: sum 20737 ms, max 219 ms, min 75 ms
----------------------------------------------------------------

2023-07-03 10:46:46 [main] [INFO]  KGenProgMain - entered the era of 279th generation.
2023-07-03 10:48:32 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 hours 21 minutes 18 seconds
Variants: generated 400, build-succeeded 202, build-failed 123, syntax-invalid 61, redundant 14
Fitness: max 0.833(198), min 0.667(4), ave 0.83
Test execution time: sum 19017 ms, max 140 ms, min 82 ms
----------------------------------------------------------------

2023-07-03 10:48:32 [main] [INFO]  KGenProgMain - entered the era of 280th generation.
2023-07-03 10:50:18 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 hours 23 minutes 4 seconds
Variants: generated 400, build-succeeded 191, build-failed 135, syntax-invalid 58, redundant 16
Fitness: max 0.833(189), min 0.167(1), ave 0.829
Test execution time: sum 17832 ms, max 161 ms, min 74 ms
----------------------------------------------------------------

2023-07-03 10:50:18 [main] [INFO]  KGenProgMain - entered the era of 281st generation.
2023-07-03 10:52:06 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 hours 24 minutes 52 seconds
Variants: generated 400, build-succeeded 198, build-failed 125, syntax-invalid 65, redundant 12
Fitness: max 0.833(195), min 0.167(1), ave 0.828
Test execution time: sum 19715 ms, max 269 ms, min 70 ms
----------------------------------------------------------------

2023-07-03 10:52:06 [main] [INFO]  KGenProgMain - entered the era of 282nd generation.
2023-07-03 10:53:53 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 hours 26 minutes 39 seconds
Variants: generated 400, build-succeeded 192, build-failed 141, syntax-invalid 60, redundant 7
Fitness: max 0.833(190), min 0.167(1), ave 0.829
Test execution time: sum 18125 ms, max 147 ms, min 70 ms
----------------------------------------------------------------

2023-07-03 10:53:53 [main] [INFO]  KGenProgMain - entered the era of 283rd generation.
2023-07-03 10:55:46 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 hours 28 minutes 32 seconds
Variants: generated 400, build-succeeded 198, build-failed 119, syntax-invalid 60, redundant 23
Fitness: max 0.833(195), min 0.667(3), ave 0.831
Test execution time: sum 19283 ms, max 194 ms, min 82 ms
----------------------------------------------------------------

2023-07-03 10:55:46 [main] [INFO]  KGenProgMain - entered the era of 284th generation.
2023-07-03 10:57:36 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 hours 30 minutes 22 seconds
Variants: generated 400, build-succeeded 203, build-failed 121, syntax-invalid 66, redundant 10
Fitness: max 0.833(198), min 0.167(3), ave 0.822
Test execution time: sum 20243 ms, max 351 ms, min 72 ms
----------------------------------------------------------------

2023-07-03 10:57:36 [main] [INFO]  KGenProgMain - entered the era of 285th generation.
2023-07-03 10:59:26 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 hours 32 minutes 12 seconds
Variants: generated 400, build-succeeded 218, build-failed 116, syntax-invalid 57, redundant 9
Fitness: max 0.833(215), min 0.167(1), ave 0.829
Test execution time: sum 20642 ms, max 132 ms, min 83 ms
----------------------------------------------------------------

2023-07-03 10:59:26 [main] [INFO]  KGenProgMain - entered the era of 286th generation.
2023-07-03 11:01:19 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 hours 34 minutes 5 seconds
Variants: generated 400, build-succeeded 214, build-failed 112, syntax-invalid 56, redundant 18
Fitness: max 0.833(212), min 0.167(1), ave 0.829
Test execution time: sum 20844 ms, max 243 ms, min 82 ms
----------------------------------------------------------------

2023-07-03 11:01:19 [main] [INFO]  KGenProgMain - entered the era of 287th generation.
2023-07-03 11:03:05 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 hours 35 minutes 51 seconds
Variants: generated 400, build-succeeded 215, build-failed 116, syntax-invalid 55, redundant 14
Fitness: max 0.833(214), min 0.667(1), ave 0.833
Test execution time: sum 19329 ms, max 168 ms, min 82 ms
----------------------------------------------------------------

2023-07-03 11:03:05 [main] [INFO]  KGenProgMain - entered the era of 288th generation.
2023-07-03 11:04:51 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 hours 37 minutes 37 seconds
Variants: generated 400, build-succeeded 216, build-failed 112, syntax-invalid 59, redundant 13
Fitness: max 0.833(210), min 0.167(2), ave 0.824
Test execution time: sum 19246 ms, max 143 ms, min 68 ms
----------------------------------------------------------------

2023-07-03 11:04:51 [main] [INFO]  KGenProgMain - entered the era of 289th generation.
2023-07-03 11:06:34 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 hours 39 minutes 20 seconds
Variants: generated 400, build-succeeded 216, build-failed 108, syntax-invalid 61, redundant 15
Fitness: max 0.833(209), min 0.167(3), ave 0.821
Test execution time: sum 18734 ms, max 106 ms, min 68 ms
----------------------------------------------------------------

2023-07-03 11:06:34 [main] [INFO]  KGenProgMain - entered the era of 290th generation.
2023-07-03 11:08:21 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 hours 41 minutes 7 seconds
Variants: generated 400, build-succeeded 219, build-failed 108, syntax-invalid 51, redundant 22
Fitness: max 0.833(216), min 0.167(1), ave 0.829
Test execution time: sum 19456 ms, max 267 ms, min 68 ms
----------------------------------------------------------------

2023-07-03 11:08:21 [main] [INFO]  KGenProgMain - entered the era of 291st generation.
2023-07-03 11:10:08 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 hours 42 minutes 54 seconds
Variants: generated 400, build-succeeded 217, build-failed 113, syntax-invalid 55, redundant 15
Fitness: max 0.833(212), min 0.667(5), ave 0.829
Test execution time: sum 19518 ms, max 287 ms, min 81 ms
----------------------------------------------------------------

2023-07-03 11:10:08 [main] [INFO]  KGenProgMain - entered the era of 292nd generation.
2023-07-03 11:14:45 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 hours 47 minutes 31 seconds
Variants: generated 400, build-succeeded 192, build-failed 129, syntax-invalid 66, redundant 13
Fitness: max 0.833(190), min 0.167(1), ave 0.829
Test execution time: sum 57490 ms, max 458 ms, min 78 ms
----------------------------------------------------------------

2023-07-03 11:14:45 [main] [INFO]  KGenProgMain - entered the era of 293rd generation.
2023-07-03 11:20:04 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 hours 52 minutes 50 seconds
Variants: generated 400, build-succeeded 217, build-failed 109, syntax-invalid 60, redundant 14
Fitness: max 0.833(215), min 0.167(1), ave 0.829
Test execution time: sum 68358 ms, max 574 ms, min 82 ms
----------------------------------------------------------------

2023-07-03 11:20:04 [main] [INFO]  KGenProgMain - entered the era of 294th generation.
2023-07-03 11:26:57 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 hours 59 minutes 43 seconds
Variants: generated 400, build-succeeded 210, build-failed 119, syntax-invalid 59, redundant 12
Fitness: max 0.833(206), min 0.167(1), ave 0.828
Test execution time: sum 76417 ms, max 683 ms, min 88 ms
----------------------------------------------------------------

2023-07-03 11:26:57 [main] [INFO]  KGenProgMain - entered the era of 295th generation.
2023-07-03 11:30:22 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 13 hours 3 minutes 8 seconds
Variants: generated 400, build-succeeded 204, build-failed 108, syntax-invalid 74, redundant 14
Fitness: max 0.833(202), min 0.167(1), ave 0.829
Test execution time: sum 32362 ms, max 413 ms, min 82 ms
----------------------------------------------------------------

2023-07-03 11:30:22 [main] [INFO]  KGenProgMain - entered the era of 296th generation.
2023-07-03 11:32:07 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 13 hours 4 minutes 53 seconds
Variants: generated 400, build-succeeded 198, build-failed 118, syntax-invalid 69, redundant 15
Fitness: max 0.833(196), min 0.167(1), ave 0.829
Test execution time: sum 17840 ms, max 223 ms, min 82 ms
----------------------------------------------------------------

2023-07-03 11:32:07 [main] [INFO]  KGenProgMain - entered the era of 297th generation.
2023-07-03 11:34:01 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 13 hours 6 minutes 47 seconds
Variants: generated 400, build-succeeded 231, build-failed 95, syntax-invalid 60, redundant 14
Fitness: max 0.833(226), min 0.167(1), ave 0.828
Test execution time: sum 21128 ms, max 248 ms, min 78 ms
----------------------------------------------------------------

2023-07-03 11:34:01 [main] [INFO]  KGenProgMain - entered the era of 298th generation.
2023-07-03 11:36:21 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 13 hours 9 minutes 7 seconds
Variants: generated 400, build-succeeded 204, build-failed 116, syntax-invalid 65, redundant 15
Fitness: max 0.833(202), min 0.167(1), ave 0.829
Test execution time: sum 23526 ms, max 373 ms, min 84 ms
----------------------------------------------------------------

2023-07-03 11:36:21 [main] [INFO]  KGenProgMain - entered the era of 299th generation.
2023-07-03 11:38:43 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 13 hours 11 minutes 29 seconds
Variants: generated 400, build-succeeded 203, build-failed 106, syntax-invalid 65, redundant 26
Fitness: max 0.833(197), min 0.167(4), ave 0.819
Test execution time: sum 23735 ms, max 164 ms, min 88 ms
----------------------------------------------------------------

2023-07-03 11:38:43 [main] [INFO]  KGenProgMain - entered the era of 300th generation.
2023-07-03 11:41:02 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 13 hours 13 minutes 48 seconds
Variants: generated 400, build-succeeded 197, build-failed 110, syntax-invalid 79, redundant 14
Fitness: max 0.833(193), min 0.167(2), ave 0.825
Test execution time: sum 22098 ms, max 216 ms, min 86 ms
----------------------------------------------------------------

2023-07-03 11:41:02 [main] [INFO]  KGenProgMain - entered the era of 301st generation.
2023-07-03 11:43:25 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 13 hours 16 minutes 11 seconds
Variants: generated 400, build-succeeded 217, build-failed 110, syntax-invalid 56, redundant 17
Fitness: max 0.833(211), min 0.167(2), ave 0.824
Test execution time: sum 23969 ms, max 197 ms, min 86 ms
----------------------------------------------------------------

2023-07-03 11:43:25 [main] [INFO]  KGenProgMain - entered the era of 302nd generation.
2023-07-03 11:45:52 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 13 hours 18 minutes 38 seconds
Variants: generated 400, build-succeeded 222, build-failed 105, syntax-invalid 50, redundant 23
Fitness: max 0.833(217), min 0.167(1), ave 0.827
Test execution time: sum 24848 ms, max 226 ms, min 87 ms
----------------------------------------------------------------

2023-07-03 11:45:52 [main] [INFO]  KGenProgMain - entered the era of 303rd generation.
2023-07-03 11:48:20 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 13 hours 21 minutes 6 seconds
Variants: generated 400, build-succeeded 223, build-failed 114, syntax-invalid 46, redundant 17
Fitness: max 0.833(222), min 0.167(1), ave 0.83
Test execution time: sum 25266 ms, max 159 ms, min 102 ms
----------------------------------------------------------------

2023-07-03 11:48:20 [main] [INFO]  KGenProgMain - entered the era of 304th generation.
2023-07-03 11:50:47 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 13 hours 23 minutes 33 seconds
Variants: generated 400, build-succeeded 216, build-failed 114, syntax-invalid 54, redundant 16
Fitness: max 0.833(214), min 0.167(1), ave 0.829
Test execution time: sum 24527 ms, max 205 ms, min 94 ms
----------------------------------------------------------------

2023-07-03 11:50:47 [main] [INFO]  KGenProgMain - entered the era of 305th generation.
2023-07-03 11:53:13 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 13 hours 25 minutes 59 seconds
Variants: generated 400, build-succeeded 217, build-failed 108, syntax-invalid 55, redundant 20
Fitness: max 0.833(215), min 0.667(2), ave 0.832
Test execution time: sum 24782 ms, max 293 ms, min 105 ms
----------------------------------------------------------------

2023-07-03 11:53:13 [main] [INFO]  KGenProgMain - entered the era of 306th generation.
2023-07-03 11:55:47 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 13 hours 28 minutes 33 seconds
Variants: generated 400, build-succeeded 224, build-failed 128, syntax-invalid 38, redundant 10
Fitness: max 0.833(221), min 0.667(3), ave 0.831
Test execution time: sum 25745 ms, max 252 ms, min 104 ms
----------------------------------------------------------------

2023-07-03 11:55:47 [main] [INFO]  KGenProgMain - entered the era of 307th generation.
2023-07-03 11:58:20 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 13 hours 31 minutes 6 seconds
Variants: generated 400, build-succeeded 230, build-failed 112, syntax-invalid 46, redundant 12
Fitness: max 0.833(227), min 0.167(2), ave 0.827
Test execution time: sum 26328 ms, max 288 ms, min 88 ms
----------------------------------------------------------------

2023-07-03 11:58:20 [main] [INFO]  KGenProgMain - entered the era of 308th generation.
2023-07-03 12:00:54 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 13 hours 33 minutes 40 seconds
Variants: generated 400, build-succeeded 238, build-failed 108, syntax-invalid 40, redundant 14
Fitness: max 0.833(235), min 0.167(1), ave 0.828
Test execution time: sum 27424 ms, max 151 ms, min 92 ms
----------------------------------------------------------------

2023-07-03 12:00:54 [main] [INFO]  KGenProgMain - entered the era of 309th generation.
2023-07-03 12:03:20 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 13 hours 36 minutes 6 seconds
Variants: generated 400, build-succeeded 211, build-failed 114, syntax-invalid 61, redundant 14
Fitness: max 0.833(208), min 0.167(2), ave 0.826
Test execution time: sum 23967 ms, max 181 ms, min 88 ms
----------------------------------------------------------------

2023-07-03 12:03:20 [main] [INFO]  KGenProgMain - entered the era of 310th generation.
2023-07-03 12:05:52 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 13 hours 38 minutes 38 seconds
Variants: generated 400, build-succeeded 219, build-failed 116, syntax-invalid 51, redundant 14
Fitness: max 0.833(215), min 0.167(2), ave 0.826
Test execution time: sum 25674 ms, max 341 ms, min 88 ms
----------------------------------------------------------------

2023-07-03 12:05:52 [main] [INFO]  KGenProgMain - entered the era of 311th generation.
2023-07-03 12:08:20 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 13 hours 41 minutes 6 seconds
Variants: generated 400, build-succeeded 215, build-failed 109, syntax-invalid 55, redundant 21
Fitness: max 0.833(214), min 0.167(1), ave 0.83
Test execution time: sum 24445 ms, max 195 ms, min 90 ms
----------------------------------------------------------------

2023-07-03 12:08:20 [main] [INFO]  KGenProgMain - entered the era of 312th generation.
2023-07-03 12:25:55 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 13 hours 58 minutes 41 seconds
Variants: generated 400, build-succeeded 226, build-failed 117, syntax-invalid 48, redundant 9
Fitness: max 0.833(220), min 0.167(1), ave 0.827
Test execution time: sum 926180 ms, max 900136 ms, min 103 ms
----------------------------------------------------------------

2023-07-03 12:25:55 [main] [INFO]  KGenProgMain - entered the era of 313th generation.
2023-07-03 12:28:31 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 14 hours 1 minutes 17 seconds
Variants: generated 400, build-succeeded 221, build-failed 119, syntax-invalid 52, redundant 8
Fitness: max 0.833(220), min 0.667(1), ave 0.833
Test execution time: sum 25921 ms, max 209 ms, min 103 ms
----------------------------------------------------------------

2023-07-03 12:28:31 [main] [INFO]  KGenProgMain - entered the era of 314th generation.
2023-07-03 12:30:59 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 14 hours 3 minutes 45 seconds
Variants: generated 400, build-succeeded 209, build-failed 120, syntax-invalid 56, redundant 15
Fitness: max 0.833(205), min 0.167(2), ave 0.825
Test execution time: sum 23586 ms, max 180 ms, min 89 ms
----------------------------------------------------------------

2023-07-03 12:30:59 [main] [INFO]  KGenProgMain - entered the era of 315th generation.
2023-07-03 12:33:22 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 14 hours 6 minutes 8 seconds
Variants: generated 400, build-succeeded 195, build-failed 125, syntax-invalid 69, redundant 11
Fitness: max 0.833(194), min 0.667(1), ave 0.832
Test execution time: sum 22258 ms, max 185 ms, min 103 ms
----------------------------------------------------------------

2023-07-03 12:33:22 [main] [INFO]  KGenProgMain - entered the era of 316th generation.
2023-07-03 12:35:43 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 14 hours 8 minutes 29 seconds
Variants: generated 400, build-succeeded 204, build-failed 110, syntax-invalid 73, redundant 13
Fitness: max 0.833(200), min 0.167(1), ave 0.828
Test execution time: sum 22490 ms, max 138 ms, min 92 ms
----------------------------------------------------------------

2023-07-03 12:35:43 [main] [INFO]  KGenProgMain - entered the era of 317th generation.
2023-07-03 12:38:10 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 14 hours 10 minutes 56 seconds
Variants: generated 400, build-succeeded 203, build-failed 125, syntax-invalid 61, redundant 11
Fitness: max 0.833(200), min 0.167(2), ave 0.826
Test execution time: sum 22829 ms, max 335 ms, min 100 ms
----------------------------------------------------------------

2023-07-03 12:38:10 [main] [INFO]  KGenProgMain - entered the era of 318th generation.
2023-07-03 12:40:34 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 14 hours 13 minutes 20 seconds
Variants: generated 400, build-succeeded 185, build-failed 124, syntax-invalid 74, redundant 17
Fitness: max 0.833(181), min 0.667(4), ave 0.83
Test execution time: sum 21129 ms, max 189 ms, min 103 ms
----------------------------------------------------------------

2023-07-03 12:40:34 [main] [INFO]  KGenProgMain - entered the era of 319th generation.
2023-07-03 12:42:52 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 14 hours 15 minutes 38 seconds
Variants: generated 400, build-succeeded 195, build-failed 101, syntax-invalid 86, redundant 18
Fitness: max 1(1), min 0.167(4), ave 0.819
Test execution time: sum 21863 ms, max 160 ms, min 89 ms
----------------------------------------------------------------

2023-07-03 12:42:52 [main] [INFO]  KGenProgMain - entered the era of 320th generation.
2023-07-03 12:45:23 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 14 hours 18 minutes 9 seconds
Variants: generated 400, build-succeeded 210, build-failed 119, syntax-invalid 56, redundant 15
Fitness: max 0.833(205), min 0.167(2), ave 0.825
Test execution time: sum 23466 ms, max 196 ms, min 90 ms
----------------------------------------------------------------

2023-07-03 12:45:23 [main] [INFO]  KGenProgMain - entered the era of 321st generation.
2023-07-03 12:47:47 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 14 hours 20 minutes 33 seconds
Variants: generated 400, build-succeeded 198, build-failed 114, syntax-invalid 72, redundant 16
Fitness: max 0.833(196), min 0.667(2), ave 0.832
Test execution time: sum 22328 ms, max 195 ms, min 104 ms
----------------------------------------------------------------

2023-07-03 12:47:47 [main] [INFO]  KGenProgMain - entered the era of 322nd generation.
2023-07-03 12:50:18 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 14 hours 23 minutes 4 seconds
Variants: generated 400, build-succeeded 197, build-failed 125, syntax-invalid 59, redundant 19
Fitness: max 1(1), min 0.167(1), ave 0.828
Test execution time: sum 22627 ms, max 198 ms, min 93 ms
----------------------------------------------------------------

2023-07-03 12:50:18 [main] [INFO]  KGenProgMain - entered the era of 323rd generation.
2023-07-03 12:52:49 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 14 hours 25 minutes 35 seconds
Variants: generated 400, build-succeeded 216, build-failed 116, syntax-invalid 56, redundant 12
Fitness: max 0.833(214), min 0.167(1), ave 0.829
Test execution time: sum 24427 ms, max 164 ms, min 103 ms
----------------------------------------------------------------

2023-07-03 12:52:49 [main] [INFO]  KGenProgMain - entered the era of 324th generation.
2023-07-03 12:55:20 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 14 hours 28 minutes 6 seconds
Variants: generated 400, build-succeeded 203, build-failed 120, syntax-invalid 61, redundant 16
Fitness: max 0.833(199), min 0(1), ave 0.822
Test execution time: sum 22931 ms, max 203 ms, min 97 ms
----------------------------------------------------------------

2023-07-03 12:55:20 [main] [INFO]  KGenProgMain - entered the era of 325th generation.
2023-07-03 12:57:57 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 14 hours 30 minutes 43 seconds
Variants: generated 400, build-succeeded 218, build-failed 116, syntax-invalid 55, redundant 11
Fitness: max 0.833(214), min 0.167(2), ave 0.826
Test execution time: sum 25243 ms, max 214 ms, min 89 ms
----------------------------------------------------------------

2023-07-03 12:57:57 [main] [INFO]  KGenProgMain - entered the era of 326th generation.
2023-07-03 13:00:29 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 14 hours 33 minutes 15 seconds
Variants: generated 400, build-succeeded 207, build-failed 116, syntax-invalid 65, redundant 12
Fitness: max 0.833(205), min 0.667(2), ave 0.832
Test execution time: sum 24075 ms, max 198 ms, min 105 ms
----------------------------------------------------------------

2023-07-03 13:00:29 [main] [INFO]  KGenProgMain - entered the era of 327th generation.
2023-07-03 13:03:02 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 14 hours 35 minutes 48 seconds
Variants: generated 400, build-succeeded 211, build-failed 109, syntax-invalid 63, redundant 17
Fitness: max 0.833(209), min 0.667(2), ave 0.832
Test execution time: sum 24088 ms, max 167 ms, min 105 ms
----------------------------------------------------------------

2023-07-03 13:03:02 [main] [INFO]  KGenProgMain - entered the era of 328th generation.
2023-07-03 13:05:34 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 14 hours 38 minutes 20 seconds
Variants: generated 400, build-succeeded 207, build-failed 110, syntax-invalid 66, redundant 17
Fitness: max 0.833(204), min 0.667(3), ave 0.831
Test execution time: sum 23669 ms, max 184 ms, min 106 ms
----------------------------------------------------------------

2023-07-03 13:05:34 [main] [INFO]  KGenProgMain - entered the era of 329th generation.
2023-07-03 13:08:06 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 14 hours 40 minutes 52 seconds
Variants: generated 400, build-succeeded 210, build-failed 111, syntax-invalid 64, redundant 15
Fitness: max 0.833(210), min 0.833(210), ave 0.833
Test execution time: sum 24099 ms, max 253 ms, min 105 ms
----------------------------------------------------------------

2023-07-03 13:08:06 [main] [INFO]  KGenProgMain - entered the era of 330th generation.
2023-07-03 13:10:40 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 14 hours 43 minutes 26 seconds
Variants: generated 400, build-succeeded 213, build-failed 108, syntax-invalid 63, redundant 16
Fitness: max 0.833(210), min 0.167(1), ave 0.829
Test execution time: sum 24590 ms, max 221 ms, min 96 ms
----------------------------------------------------------------

2023-07-03 13:10:40 [main] [INFO]  KGenProgMain - entered the era of 331st generation.
2023-07-03 13:13:13 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 14 hours 45 minutes 59 seconds
Variants: generated 400, build-succeeded 204, build-failed 123, syntax-invalid 58, redundant 15
Fitness: max 0.833(203), min 0.167(1), ave 0.83
Test execution time: sum 23359 ms, max 151 ms, min 106 ms
----------------------------------------------------------------

2023-07-03 13:13:13 [main] [INFO]  KGenProgMain - entered the era of 332nd generation.
2023-07-03 13:15:47 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 14 hours 48 minutes 32 seconds
Variants: generated 400, build-succeeded 205, build-failed 116, syntax-invalid 62, redundant 17
Fitness: max 0.833(200), min 0.167(2), ave 0.824
Test execution time: sum 23344 ms, max 206 ms, min 93 ms
----------------------------------------------------------------

2023-07-03 13:15:47 [main] [INFO]  KGenProgMain - entered the era of 333rd generation.
2023-07-03 13:18:22 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 14 hours 51 minutes 8 seconds
Variants: generated 400, build-succeeded 203, build-failed 120, syntax-invalid 64, redundant 13
Fitness: max 0.833(200), min 0.667(3), ave 0.831
Test execution time: sum 23651 ms, max 204 ms, min 106 ms
----------------------------------------------------------------

2023-07-03 13:18:22 [main] [INFO]  KGenProgMain - entered the era of 334th generation.
2023-07-03 13:20:56 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 14 hours 53 minutes 42 seconds
Variants: generated 400, build-succeeded 205, build-failed 114, syntax-invalid 65, redundant 16
Fitness: max 0.833(204), min 0.667(1), ave 0.833
Test execution time: sum 23965 ms, max 217 ms, min 106 ms
----------------------------------------------------------------

2023-07-03 13:20:56 [main] [INFO]  KGenProgMain - entered the era of 335th generation.
2023-07-03 13:23:25 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 14 hours 56 minutes 11 seconds
Variants: generated 400, build-succeeded 186, build-failed 125, syntax-invalid 69, redundant 20
Fitness: max 0.833(184), min 0.667(2), ave 0.832
Test execution time: sum 21314 ms, max 143 ms, min 106 ms
----------------------------------------------------------------

2023-07-03 13:23:25 [main] [INFO]  KGenProgMain - entered the era of 336th generation.
2023-07-03 13:25:59 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 14 hours 58 minutes 45 seconds
Variants: generated 400, build-succeeded 205, build-failed 117, syntax-invalid 61, redundant 17
Fitness: max 0.833(200), min 0.167(1), ave 0.827
Test execution time: sum 22967 ms, max 273 ms, min 91 ms
----------------------------------------------------------------

2023-07-03 13:25:59 [main] [INFO]  KGenProgMain - entered the era of 337th generation.
2023-07-03 13:28:04 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 15 hours 50 seconds
Variants: generated 400, build-succeeded 210, build-failed 112, syntax-invalid 67, redundant 11
Fitness: max 0.833(206), min 0.167(1), ave 0.828
Test execution time: sum 21643 ms, max 188 ms, min 74 ms
----------------------------------------------------------------

2023-07-03 13:28:04 [main] [INFO]  KGenProgMain - entered the era of 338th generation.
2023-07-03 13:28:06 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 15 hours 52 seconds
Variants: generated 5, build-succeeded 1, build-failed 4, syntax-invalid 0, redundant 0
Fitness: max 1(1), min 1(1), ave 1
Test execution time: sum 129 ms, max 129 ms, min 129 ms
----------------------------------------------------------------

2023-07-03 13:28:06 [main] [INFO]  KGenProgMain - GA stopped
2023-07-03 13:28:10 [main] [INFO]  PatchLogExporter - patch (v253)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-03 13:28:10 [main] [INFO]  PatchLogExporter - patch (v253)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-03 13:28:10 [main] [INFO]  PatchLogExporter - patch (v253)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-03 13:28:10 [main] [INFO]  PatchLogExporter - patch (v253)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +123,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
2023-07-03 13:28:10 [main] [INFO]  PatchLogExporter - patch (v288)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-03 13:28:10 [main] [INFO]  PatchLogExporter - patch (v288)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-03 13:28:10 [main] [INFO]  PatchLogExporter - patch (v288)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-03 13:28:10 [main] [INFO]  PatchLogExporter - patch (v288)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -111,10 +111,7 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
-        if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
-            return result;
-        }
+        if (Math.abs(yMin) <= functionValueAccuracy)
 
         // reduce interval if min and initial bracket the root
         if (yInitial * yMin < 0) {
@@ -124,7 +121,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
2023-07-03 13:28:10 [main] [INFO]  PatchLogExporter - patch (v326)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-03 13:28:10 [main] [INFO]  PatchLogExporter - patch (v326)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-03 13:28:10 [main] [INFO]  PatchLogExporter - patch (v326)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-03 13:28:10 [main] [INFO]  PatchLogExporter - patch (v326)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +123,7 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
+            this.functionValueAccuracy = defaultFunctionValueAccuracy;
             return result;
         }
 
2023-07-03 13:28:10 [main] [INFO]  PatchLogExporter - patch (v521)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-03 13:28:10 [main] [INFO]  PatchLogExporter - patch (v521)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-03 13:28:10 [main] [INFO]  PatchLogExporter - patch (v521)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-03 13:28:10 [main] [INFO]  PatchLogExporter - patch (v521)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +123,7 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
+            double sign = yMin * yMax;
             return result;
         }
 
@@ -183,6 +182,7 @@
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
                 setResult(max, 0);
                 ret = max;
+				double p;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
2023-07-03 13:28:10 [main] [INFO]  PatchLogExporter - patch (v536)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-03 13:28:10 [main] [INFO]  PatchLogExporter - patch (v536)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-03 13:28:10 [main] [INFO]  PatchLogExporter - patch (v536)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-03 13:28:10 [main] [INFO]  PatchLogExporter - patch (v536)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -111,10 +111,7 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
-        if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
-            return result;
-        }
+        if (Math.abs(yMin) <= functionValueAccuracy)
 
         // reduce interval if min and initial bracket the root
         if (yInitial * yMin < 0) {
@@ -124,7 +121,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,7 +177,6 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
2023-07-03 13:28:10 [main] [INFO]  PatchLogExporter - patch (v1295)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-03 13:28:10 [main] [INFO]  PatchLogExporter - patch (v1295)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-03 13:28:10 [main] [INFO]  PatchLogExporter - patch (v1295)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-03 13:28:10 [main] [INFO]  PatchLogExporter - patch (v1295)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +123,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -177,7 +175,7 @@
         double sign = yMin * yMax;
         if (sign > 0) {
             // check if either value is close to a zero
-            if (Math.abs(yMin) <= functionValueAccuracy) {
+            if (f.value(min) == 0.0) {
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
2023-07-03 13:28:10 [main] [INFO]  PatchLogExporter - patch (v1720)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-03 13:28:10 [main] [INFO]  PatchLogExporter - patch (v1720)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-03 13:28:10 [main] [INFO]  PatchLogExporter - patch (v1720)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-03 13:28:10 [main] [INFO]  PatchLogExporter - patch (v1720)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -111,10 +111,7 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
-        if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
-            return result;
-        }
+        if (Math.abs(yMin) <= functionValueAccuracy)
 
         // reduce interval if min and initial bracket the root
         if (yInitial * yMin < 0) {
@@ -124,7 +121,7 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
+            double x0 = min;
             return result;
         }
 
@@ -181,7 +178,10 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
+                {
+					setResult(min, 0);
+					ret = min;
+				}
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
2023-07-03 13:28:10 [main] [INFO]  PatchLogExporter - patch (v4134)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-03 13:28:10 [main] [INFO]  PatchLogExporter - patch (v4134)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-03 13:28:10 [main] [INFO]  PatchLogExporter - patch (v4134)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -66,6 +66,7 @@
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
         this.iterationCount = 0;
+		this.maximalIterationCount = defaultMaximalIterationCount;
     }
 
     /** {@inheritDoc} */
2023-07-03 13:28:10 [main] [INFO]  PatchLogExporter - patch (v4134)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-03 13:28:10 [main] [INFO]  PatchLogExporter - patch (v4134)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +123,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,7 +179,8 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
+                setResult(yMin, 0);
+				setResult(max, 0);
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
2023-07-03 13:28:10 [main] [INFO]  PatchLogExporter - patch (v5256)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-03 13:28:10 [main] [INFO]  PatchLogExporter - patch (v5256)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-03 13:28:10 [main] [INFO]  PatchLogExporter - patch (v5256)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-03 13:28:10 [main] [INFO]  PatchLogExporter - patch (v5256)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -99,20 +99,19 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
-            return result;
+            double x1 = min;
+			return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +123,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,7 +179,6 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
2023-07-03 13:28:10 [main] [INFO]  PatchLogExporter - patch (v5661)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -162,7 +162,7 @@
      * Convenience function for implementations.
      */
     protected final void clearResult() {
-        this.iterationCount = 0;
+        this.iterationCount = iterationCount;
         this.resultComputed = false;
     }
 
2023-07-03 13:28:10 [main] [INFO]  PatchLogExporter - patch (v5661)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-03 13:28:10 [main] [INFO]  PatchLogExporter - patch (v5661)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-03 13:28:10 [main] [INFO]  PatchLogExporter - patch (v5661)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-03 13:28:10 [main] [INFO]  PatchLogExporter - patch (v5661)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +123,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,7 +179,6 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
2023-07-03 13:28:10 [main] [INFO]  PatchLogExporter - patch (v5758)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -162,7 +162,7 @@
      * Convenience function for implementations.
      */
     protected final void clearResult() {
-        this.iterationCount = 0;
+        this.iterationCount = iterationCount;
         this.resultComputed = false;
     }
 
2023-07-03 13:28:10 [main] [INFO]  PatchLogExporter - patch (v5758)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-03 13:28:10 [main] [INFO]  PatchLogExporter - patch (v5758)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-03 13:28:10 [main] [INFO]  PatchLogExporter - patch (v5758)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -59,7 +59,6 @@
      */
     protected ConvergingAlgorithmImpl(final int defaultMaximalIterationCount,
                                       final double defaultAbsoluteAccuracy) {
-        this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
2023-07-03 13:28:10 [main] [INFO]  PatchLogExporter - patch (v5758)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-03 13:28:10 [main] [INFO]  PatchLogExporter - patch (v5758)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,8 +112,8 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
-            return result;
+            this.functionValueAccuracy = defaultFunctionValueAccuracy;
+			return result;
         }
 
         // reduce interval if min and initial bracket the root
@@ -124,7 +124,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,7 +180,8 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
+                setResult(yMin, 0);
+				setResult(max, 0);
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
2023-07-03 13:28:10 [main] [INFO]  PatchLogExporter - patch (v6001)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -139,7 +139,6 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
-        this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
 
2023-07-03 13:28:10 [main] [INFO]  PatchLogExporter - patch (v6001)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-03 13:28:10 [main] [INFO]  PatchLogExporter - patch (v6001)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-03 13:28:10 [main] [INFO]  PatchLogExporter - patch (v6001)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -66,6 +66,7 @@
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
         this.iterationCount = 0;
+		this.maximalIterationCount = defaultMaximalIterationCount;
     }
 
     /** {@inheritDoc} */
2023-07-03 13:28:10 [main] [INFO]  PatchLogExporter - patch (v6001)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-03 13:28:10 [main] [INFO]  PatchLogExporter - patch (v6001)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -99,7 +99,6 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
@@ -112,7 +111,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +122,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -165,7 +162,6 @@
         throws MaxIterationsExceededException,
         FunctionEvaluationException {
 
-        clearResult();
         verifyInterval(min, max);
 
         double ret = Double.NaN;
2023-07-03 13:28:10 [main] [INFO]  PatchLogExporter - patch (v6437)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -139,7 +139,6 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
-        this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
 
@@ -162,7 +161,7 @@
      * Convenience function for implementations.
      */
     protected final void clearResult() {
-        this.iterationCount = 0;
+        this.iterationCount = iterationCount;
         this.resultComputed = false;
     }
 
2023-07-03 13:28:10 [main] [INFO]  PatchLogExporter - patch (v6437)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-03 13:28:10 [main] [INFO]  PatchLogExporter - patch (v6437)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-03 13:28:10 [main] [INFO]  PatchLogExporter - patch (v6437)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-03 13:28:10 [main] [INFO]  PatchLogExporter - patch (v6437)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +123,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -177,7 +175,7 @@
         double sign = yMin * yMax;
         if (sign > 0) {
             // check if either value is close to a zero
-            if (Math.abs(yMin) <= functionValueAccuracy) {
+            if (f.value(min) == 0.0) {
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
2023-07-03 13:28:10 [main] [INFO]  PatchLogExporter - patch (v6451)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -139,7 +139,6 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
-        this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
 
@@ -154,7 +153,6 @@
                                    final int iterationCount) {
         this.result         = x;
         this.functionValue  = fx;
-        this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
 
2023-07-03 13:28:10 [main] [INFO]  PatchLogExporter - patch (v6451)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-03 13:28:10 [main] [INFO]  PatchLogExporter - patch (v6451)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-03 13:28:10 [main] [INFO]  PatchLogExporter - patch (v6451)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-03 13:28:10 [main] [INFO]  PatchLogExporter - patch (v6451)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +123,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
2023-07-03 13:28:10 [main] [INFO]  PatchLogExporter - patch (v6829)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-03 13:28:10 [main] [INFO]  PatchLogExporter - patch (v6829)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-03 13:28:10 [main] [INFO]  PatchLogExporter - patch (v6829)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-03 13:28:10 [main] [INFO]  PatchLogExporter - patch (v6829)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -99,7 +99,6 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
@@ -112,7 +111,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +122,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -177,11 +174,12 @@
         double sign = yMin * yMax;
         if (sign > 0) {
             // check if either value is close to a zero
-            if (Math.abs(yMin) <= functionValueAccuracy) {
+            if (f.value(min) == 0.0) {
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
                 setResult(max, 0);
+				this.resultComputed = true;
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
2023-07-03 13:28:10 [main] [INFO]  PatchLogExporter - patch (v6856)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -139,7 +139,6 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
-        this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
 
2023-07-03 13:28:10 [main] [INFO]  PatchLogExporter - patch (v6856)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-03 13:28:10 [main] [INFO]  PatchLogExporter - patch (v6856)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-03 13:28:10 [main] [INFO]  PatchLogExporter - patch (v6856)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-03 13:28:10 [main] [INFO]  PatchLogExporter - patch (v6856)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,7 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
+            double x0 = min;
             return result;
         }
 
@@ -124,7 +124,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,7 +180,6 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
2023-07-03 13:28:10 [main] [INFO]  PatchLogExporter - patch (v6867)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -139,7 +139,6 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
-        this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
 
@@ -162,7 +161,7 @@
      * Convenience function for implementations.
      */
     protected final void clearResult() {
-        this.iterationCount = 0;
+        this.iterationCount = iterationCount;
         this.resultComputed = false;
     }
 
2023-07-03 13:28:10 [main] [INFO]  PatchLogExporter - patch (v6867)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-03 13:28:10 [main] [INFO]  PatchLogExporter - patch (v6867)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-03 13:28:10 [main] [INFO]  PatchLogExporter - patch (v6867)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-03 13:28:10 [main] [INFO]  PatchLogExporter - patch (v6867)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -99,7 +99,6 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
@@ -112,7 +111,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +122,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
2023-07-03 13:28:10 [main] [INFO]  PatchLogExporter - patch (v6988)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -77,7 +77,6 @@
         }
         this.f = f;
         this.defaultFunctionValueAccuracy = 1.0e-15;
-        this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
     /**
@@ -139,7 +138,6 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
-        this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
 
2023-07-03 13:28:10 [main] [INFO]  PatchLogExporter - patch (v6988)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-03 13:28:10 [main] [INFO]  PatchLogExporter - patch (v6988)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-03 13:28:10 [main] [INFO]  PatchLogExporter - patch (v6988)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -66,6 +66,7 @@
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
         this.iterationCount = 0;
+		this.maximalIterationCount = defaultMaximalIterationCount;
     }
 
     /** {@inheritDoc} */
2023-07-03 13:28:10 [main] [INFO]  PatchLogExporter - patch (v6988)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-03 13:28:10 [main] [INFO]  PatchLogExporter - patch (v6988)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +123,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,7 +179,8 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
+                setResult(yMin, 0);
+				setResult(max, 0);
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
2023-07-03 13:28:10 [main] [INFO]  PatchLogExporter - patch (v7315)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-03 13:28:10 [main] [INFO]  PatchLogExporter - patch (v7315)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-03 13:28:10 [main] [INFO]  PatchLogExporter - patch (v7315)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -59,7 +59,6 @@
      */
     protected ConvergingAlgorithmImpl(final int defaultMaximalIterationCount,
                                       final double defaultAbsoluteAccuracy) {
-        this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
2023-07-03 13:28:10 [main] [INFO]  PatchLogExporter - patch (v7315)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-03 13:28:10 [main] [INFO]  PatchLogExporter - patch (v7315)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -106,13 +106,13 @@
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
-            return result;
+            double x1 = min;
+			return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +124,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,7 +180,8 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
+                setResult(yMin, 0);
+				setResult(max, 0);
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -245,7 +245,6 @@
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
-                return result;
             }
             double dx = x2 - x1;
             double tolerance =
2023-07-03 13:28:10 [main] [INFO]  PatchLogExporter - patch (v7340)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-03 13:28:10 [main] [INFO]  PatchLogExporter - patch (v7340)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-03 13:28:10 [main] [INFO]  PatchLogExporter - patch (v7340)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -62,7 +62,6 @@
         this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
-        this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
         this.iterationCount = 0;
2023-07-03 13:28:10 [main] [INFO]  PatchLogExporter - patch (v7340)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-03 13:28:10 [main] [INFO]  PatchLogExporter - patch (v7340)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +123,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -241,11 +239,6 @@
                 y2 = y0;
             }
             if (Math.abs(y1) <= functionValueAccuracy) {
-                // Avoid division by very small values. Assume
-                // the iteration has converged (the problem may
-                // still be ill conditioned)
-                setResult(x1, i);
-                return result;
             }
             double dx = x2 - x1;
             double tolerance =
2023-07-03 13:28:10 [main] [INFO]  PatchLogExporter - patch (v7616)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -77,7 +77,6 @@
         }
         this.f = f;
         this.defaultFunctionValueAccuracy = 1.0e-15;
-        this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
     /**
2023-07-03 13:28:10 [main] [INFO]  PatchLogExporter - patch (v7616)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-03 13:28:10 [main] [INFO]  PatchLogExporter - patch (v7616)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-03 13:28:10 [main] [INFO]  PatchLogExporter - patch (v7616)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-03 13:28:10 [main] [INFO]  PatchLogExporter - patch (v7616)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +123,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -177,12 +175,13 @@
         double sign = yMin * yMax;
         if (sign > 0) {
             // check if either value is close to a zero
-            if (Math.abs(yMin) <= functionValueAccuracy) {
+            if (f.value(min) == 0.0) {
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
                 setResult(max, 0);
                 ret = max;
+				return max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
@@ -245,7 +244,6 @@
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
-                return result;
             }
             double dx = x2 - x1;
             double tolerance =
2023-07-03 13:28:10 [main] [INFO]  PatchLogExporter - patch (v7739)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-03 13:28:10 [main] [INFO]  PatchLogExporter - patch (v7739)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-03 13:28:10 [main] [INFO]  PatchLogExporter - patch (v7739)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-03 13:28:10 [main] [INFO]  PatchLogExporter - patch (v7739)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -99,7 +99,6 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
@@ -112,7 +111,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -123,10 +121,8 @@
 
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
-        if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
-            return result;
-        }
+        if (Math.abs(yMax) <= functionValueAccuracy)
+			return result;
 
         // reduce interval if initial and max bracket the root
         if (yInitial * yMax < 0) {
@@ -177,11 +173,12 @@
         double sign = yMin * yMax;
         if (sign > 0) {
             // check if either value is close to a zero
-            if (Math.abs(yMin) <= functionValueAccuracy) {
+            if (f.value(min) == 0.0) {
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
                 setResult(max, 0);
+				this.resultComputed = true;
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
2023-07-03 13:28:10 [main] [INFO]  PatchLogExporter - patch (v8115)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -139,7 +139,6 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
-        this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
 
@@ -162,7 +161,7 @@
      * Convenience function for implementations.
      */
     protected final void clearResult() {
-        this.iterationCount = 0;
+        this.iterationCount = iterationCount;
         this.resultComputed = false;
     }
 
2023-07-03 13:28:10 [main] [INFO]  PatchLogExporter - patch (v8115)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-03 13:28:10 [main] [INFO]  PatchLogExporter - patch (v8115)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-03 13:28:10 [main] [INFO]  PatchLogExporter - patch (v8115)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-03 13:28:10 [main] [INFO]  PatchLogExporter - patch (v8115)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +123,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,8 +179,8 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
-                ret = max;
+                double p;
+				ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
2023-07-03 13:28:10 [main] [INFO]  PatchLogExporter - patch (v9638)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -139,7 +139,6 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
-        this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
 
2023-07-03 13:28:10 [main] [INFO]  PatchLogExporter - patch (v9638)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-03 13:28:10 [main] [INFO]  PatchLogExporter - patch (v9638)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-03 13:28:10 [main] [INFO]  PatchLogExporter - patch (v9638)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -59,7 +59,6 @@
      */
     protected ConvergingAlgorithmImpl(final int defaultMaximalIterationCount,
                                       final double defaultAbsoluteAccuracy) {
-        this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
2023-07-03 13:28:10 [main] [INFO]  PatchLogExporter - patch (v9638)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-03 13:28:10 [main] [INFO]  PatchLogExporter - patch (v9638)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +123,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
2023-07-03 13:28:10 [main] [INFO]  PatchLogExporter - patch (v9687)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,6 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
@@ -163,7 +162,6 @@
      */
     protected final void clearResult() {
         this.iterationCount = 0;
-        this.resultComputed = false;
     }
 
     /**
2023-07-03 13:28:10 [main] [INFO]  PatchLogExporter - patch (v9687)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-03 13:28:10 [main] [INFO]  PatchLogExporter - patch (v9687)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-03 13:28:10 [main] [INFO]  PatchLogExporter - patch (v9687)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-03 13:28:10 [main] [INFO]  PatchLogExporter - patch (v9687)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +123,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -182,6 +180,7 @@
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
                 setResult(max, 0);
+				this.resultComputed = true;
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
2023-07-03 13:28:10 [main] [INFO]  PatchLogExporter - patch (v10577)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -162,7 +162,7 @@
      * Convenience function for implementations.
      */
     protected final void clearResult() {
-        this.iterationCount = 0;
+        this.iterationCount = iterationCount;
         this.resultComputed = false;
     }
 
2023-07-03 13:28:10 [main] [INFO]  PatchLogExporter - patch (v10577)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-03 13:28:10 [main] [INFO]  PatchLogExporter - patch (v10577)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-03 13:28:10 [main] [INFO]  PatchLogExporter - patch (v10577)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -65,7 +65,6 @@
         this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
-        this.iterationCount = 0;
     }
 
     /** {@inheritDoc} */
2023-07-03 13:28:10 [main] [INFO]  PatchLogExporter - patch (v10577)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-03 13:28:10 [main] [INFO]  PatchLogExporter - patch (v10577)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -99,7 +99,6 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
@@ -112,7 +111,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +122,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,7 +178,8 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
+                setResult(yMin, 0);
+				setResult(max, 0);
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
2023-07-03 13:28:10 [main] [INFO]  PatchLogExporter - patch (v11241)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,6 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
@@ -163,7 +162,6 @@
      */
     protected final void clearResult() {
         this.iterationCount = 0;
-        this.resultComputed = false;
     }
 
     /**
2023-07-03 13:28:10 [main] [INFO]  PatchLogExporter - patch (v11241)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-03 13:28:10 [main] [INFO]  PatchLogExporter - patch (v11241)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-03 13:28:10 [main] [INFO]  PatchLogExporter - patch (v11241)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-03 13:28:10 [main] [INFO]  PatchLogExporter - patch (v11241)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -106,13 +106,13 @@
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
-            return result;
+            double x1 = min;
+			return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +124,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,7 +180,7 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
+                double x1 = max;
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
2023-07-03 13:28:10 [main] [INFO]  PatchLogExporter - patch (v12028)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -77,7 +77,6 @@
         }
         this.f = f;
         this.defaultFunctionValueAccuracy = 1.0e-15;
-        this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
     /**
@@ -139,7 +138,6 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
-        this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
 
2023-07-03 13:28:10 [main] [INFO]  PatchLogExporter - patch (v12028)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-03 13:28:10 [main] [INFO]  PatchLogExporter - patch (v12028)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-03 13:28:10 [main] [INFO]  PatchLogExporter - patch (v12028)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-03 13:28:10 [main] [INFO]  PatchLogExporter - patch (v12028)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -111,8 +111,9 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
-        if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
+        if (Math.abs(max - min) <= absoluteAccuracy) {
+            setResult(max, 0);
+			setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +125,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,7 +181,8 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
+                setResult(yMin, 0);
+				setResult(max, 0);
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
2023-07-03 13:28:11 [main] [INFO]  PatchLogExporter - patch (v12169)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-03 13:28:11 [main] [INFO]  PatchLogExporter - patch (v12169)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-03 13:28:11 [main] [INFO]  PatchLogExporter - patch (v12169)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-03 13:28:11 [main] [INFO]  PatchLogExporter - patch (v12169)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -99,7 +99,6 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
@@ -112,7 +111,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +122,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,7 +178,9 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
+                setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(max, 0);
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -241,7 +240,8 @@
                 y2 = y0;
             }
             if (Math.abs(y1) <= functionValueAccuracy) {
-                // Avoid division by very small values. Assume
+                delta = 0.5 * oldDelta;
+				// Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
2023-07-03 13:28:11 [main] [INFO]  PatchLogExporter - patch (v15610)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -139,7 +139,6 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
-        this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
 
2023-07-03 13:28:11 [main] [INFO]  PatchLogExporter - patch (v15610)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-03 13:28:11 [main] [INFO]  PatchLogExporter - patch (v15610)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-03 13:28:11 [main] [INFO]  PatchLogExporter - patch (v15610)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -59,7 +59,6 @@
      */
     protected ConvergingAlgorithmImpl(final int defaultMaximalIterationCount,
                                       final double defaultAbsoluteAccuracy) {
-        this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
2023-07-03 13:28:11 [main] [INFO]  PatchLogExporter - patch (v15610)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-03 13:28:11 [main] [INFO]  PatchLogExporter - patch (v15610)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,7 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
+            double x0 = min;
             return result;
         }
 
@@ -124,7 +124,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,7 +180,7 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
+                this.resultComputed = true;
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -240,11 +239,7 @@
                 y1 = y2;
                 y2 = y0;
             }
-            if (Math.abs(y1) <= functionValueAccuracy) {
-                // Avoid division by very small values. Assume
-                // the iteration has converged (the problem may
-                // still be ill conditioned)
-                setResult(x1, i);
+            if (y0 == 0.0) {
                 return result;
             }
             double dx = x2 - x1;
@@ -254,8 +249,7 @@
                 setResult(x1, i);
                 return result;
             }
-            if ((Math.abs(oldDelta) < tolerance) ||
-                    (Math.abs(y0) <= Math.abs(y1))) {
+            if ((y1 > 0) == (y2 > 0)) {
                 // Force bisection.
                 delta = 0.5 * dx;
                 oldDelta = delta;
2023-07-03 13:28:11 [main] [INFO]  PatchLogExporter - patch (v17240)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-03 13:28:11 [main] [INFO]  PatchLogExporter - patch (v17240)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-03 13:28:11 [main] [INFO]  PatchLogExporter - patch (v17240)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -65,7 +65,6 @@
         this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
-        this.iterationCount = 0;
     }
 
     /** {@inheritDoc} */
2023-07-03 13:28:11 [main] [INFO]  PatchLogExporter - patch (v17240)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-03 13:28:11 [main] [INFO]  PatchLogExporter - patch (v17240)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -99,7 +99,6 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
@@ -112,7 +111,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +122,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -165,7 +162,6 @@
         throws MaxIterationsExceededException,
         FunctionEvaluationException {
 
-        clearResult();
         verifyInterval(min, max);
 
         double ret = Double.NaN;
@@ -182,6 +178,8 @@
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
                 setResult(max, 0);
+				this.resultComputed = true;
+				this.resultComputed = true;
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -245,7 +243,6 @@
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
-                return result;
             }
             double dx = x2 - x1;
             double tolerance =
2023-07-03 13:28:11 [main] [INFO]  PatchLogExporter - patch (v17288)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -139,7 +139,6 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
-        this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
 
2023-07-03 13:28:11 [main] [INFO]  PatchLogExporter - patch (v17288)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-03 13:28:11 [main] [INFO]  PatchLogExporter - patch (v17288)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-03 13:28:11 [main] [INFO]  PatchLogExporter - patch (v17288)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -59,7 +59,6 @@
      */
     protected ConvergingAlgorithmImpl(final int defaultMaximalIterationCount,
                                       final double defaultAbsoluteAccuracy) {
-        this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
2023-07-03 13:28:11 [main] [INFO]  PatchLogExporter - patch (v17288)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-03 13:28:11 [main] [INFO]  PatchLogExporter - patch (v17288)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -99,20 +99,19 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
-            return result;
+            double x1 = min;
+			return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +123,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -234,13 +232,14 @@
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
                 x0 = x1;
+				setResult(x1, i);
                 x1 = x2;
                 x2 = x0;
                 y0 = y1;
                 y1 = y2;
                 y2 = y0;
             }
-            if (Math.abs(y1) <= functionValueAccuracy) {
+            if (y0 == 0.0) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
2023-07-03 13:28:11 [main] [INFO]  PatchLogExporter - patch (v27650)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -77,7 +77,6 @@
         }
         this.f = f;
         this.defaultFunctionValueAccuracy = 1.0e-15;
-        this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
     /**
@@ -139,7 +138,6 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
-        this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
 
@@ -181,7 +179,10 @@
         throws FunctionEvaluationException {
         final double f1 = function.value(lower);
         final double f2 = function.value(upper);
-        return (f1 > 0 && f2 < 0) || (f1 < 0 && f2 > 0);
+        throw MathRuntimeException.createIllegalArgumentException(
+				"function values at endpoints do not have different signs.  "
+						+ "Endpoints: [{0}, {1}], Values: [{2}, {3}]",
+				lower, upper, function.value(lower), function.value(upper));
     }
 
     /**
2023-07-03 13:28:11 [main] [INFO]  PatchLogExporter - patch (v27650)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-03 13:28:11 [main] [INFO]  PatchLogExporter - patch (v27650)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-03 13:28:11 [main] [INFO]  PatchLogExporter - patch (v27650)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-03 13:28:11 [main] [INFO]  PatchLogExporter - patch (v27650)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -106,13 +106,13 @@
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
-            return result;
+            double x1 = min;
+			return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +124,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,7 +180,9 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
+                setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(max, 0);
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -191,6 +192,7 @@
         } else if (sign < 0){
             // solve using only the first endpoint as initial guess
             ret = solve(f, min, yMin, max, yMax, min, yMin);
+			double oldx = Double.POSITIVE_INFINITY;
         } else {
             // either min or max is a root
             if (yMin == 0.0) {
@@ -234,6 +236,7 @@
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
                 x0 = x1;
+				setResult(x1, i);
                 x1 = x2;
                 x2 = x0;
                 y0 = y1;
2023-07-03 13:28:11 [main] [INFO]  PatchLogExporter - patch (v27762)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -77,7 +77,6 @@
         }
         this.f = f;
         this.defaultFunctionValueAccuracy = 1.0e-15;
-        this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
     /**
@@ -139,7 +138,6 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
-        this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
 
2023-07-03 13:28:11 [main] [INFO]  PatchLogExporter - patch (v27762)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-03 13:28:11 [main] [INFO]  PatchLogExporter - patch (v27762)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-03 13:28:11 [main] [INFO]  PatchLogExporter - patch (v27762)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -61,11 +61,11 @@
                                       final double defaultAbsoluteAccuracy) {
         this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
         this.defaultRelativeAccuracy = 1.0e-14;
-        this.absoluteAccuracy = defaultAbsoluteAccuracy;
+        final String pattern = "internal error, please fill a bug report at {0}";
+		this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
-        this.iterationCount = 0;
     }
 
     /** {@inheritDoc} */
2023-07-03 13:28:11 [main] [INFO]  PatchLogExporter - patch (v27762)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-03 13:28:11 [main] [INFO]  PatchLogExporter - patch (v27762)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +123,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -177,11 +175,14 @@
         double sign = yMin * yMax;
         if (sign > 0) {
             // check if either value is close to a zero
-            if (Math.abs(yMin) <= functionValueAccuracy) {
+            if (f.value(min) == 0.0) {
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
+                setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(max, 0);
+				this.resultComputed = true;
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -191,6 +192,7 @@
         } else if (sign < 0){
             // solve using only the first endpoint as initial guess
             ret = solve(f, min, yMin, max, yMax, min, yMin);
+			double oldx = Double.POSITIVE_INFINITY;
         } else {
             // either min or max is a root
             if (yMin == 0.0) {
2023-07-03 13:28:11 [main] [INFO]  PatchLogExporter - patch (v30423)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-03 13:28:11 [main] [INFO]  PatchLogExporter - patch (v30423)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-03 13:28:11 [main] [INFO]  PatchLogExporter - patch (v30423)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -66,6 +66,7 @@
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
         this.iterationCount = 0;
+		this.maximalIterationCount = defaultMaximalIterationCount;
     }
 
     /** {@inheritDoc} */
2023-07-03 13:28:11 [main] [INFO]  PatchLogExporter - patch (v30423)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-03 13:28:11 [main] [INFO]  PatchLogExporter - patch (v30423)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -106,13 +106,13 @@
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
-            return result;
+            double x1 = min;
+			return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +124,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,7 +180,8 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
+                setResult(yMin, 0);
+				setResult(max, 0);
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -234,6 +234,8 @@
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
                 x0 = x1;
+				setResult(x1, i);
+				setResult(x1, i);
                 x1 = x2;
                 x2 = x0;
                 y0 = y1;
@@ -245,7 +247,8 @@
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
-                return result;
+                this.resultComputed = true;
+				return result;
             }
             double dx = x2 - x1;
             double tolerance =
@@ -254,8 +257,7 @@
                 setResult(x1, i);
                 return result;
             }
-            if ((Math.abs(oldDelta) < tolerance) ||
-                    (Math.abs(y0) <= Math.abs(y1))) {
+            if ((y1 > 0) == (y2 > 0)) {
                 // Force bisection.
                 delta = 0.5 * dx;
                 oldDelta = delta;
@@ -312,7 +314,6 @@
                 delta = x1 - x0;
                 oldDelta = delta;
             }
-            i++;
         }
         throw new MaxIterationsExceededException(maximalIterationCount);
     }
2023-07-03 13:28:11 [main] [INFO]  PatchLogExporter - patch (v32996)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -77,7 +77,6 @@
         }
         this.f = f;
         this.defaultFunctionValueAccuracy = 1.0e-15;
-        this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
     /**
2023-07-03 13:28:11 [main] [INFO]  PatchLogExporter - patch (v32996)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-03 13:28:11 [main] [INFO]  PatchLogExporter - patch (v32996)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-03 13:28:11 [main] [INFO]  PatchLogExporter - patch (v32996)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-03 13:28:11 [main] [INFO]  PatchLogExporter - patch (v32996)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +123,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,7 +179,15 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
+                setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(max, 0);
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -234,13 +240,14 @@
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
                 x0 = x1;
+				setResult(x1, i);
                 x1 = x2;
                 x2 = x0;
                 y0 = y1;
                 y1 = y2;
                 y2 = y0;
             }
-            if (Math.abs(y1) <= functionValueAccuracy) {
+            if (y0 == 0.0) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
2023-07-03 13:28:11 [main] [INFO]  PatchLogExporter - patch (v33290)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -139,7 +139,6 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
-        this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
 
2023-07-03 13:28:11 [main] [INFO]  PatchLogExporter - patch (v33290)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-03 13:28:11 [main] [INFO]  PatchLogExporter - patch (v33290)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-03 13:28:11 [main] [INFO]  PatchLogExporter - patch (v33290)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -66,6 +66,7 @@
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
         this.iterationCount = 0;
+		this.maximalIterationCount = defaultMaximalIterationCount;
     }
 
     /** {@inheritDoc} */
2023-07-03 13:28:11 [main] [INFO]  PatchLogExporter - patch (v33290)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-03 13:28:11 [main] [INFO]  PatchLogExporter - patch (v33290)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +123,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,7 +179,11 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
+                setResult(yMin, 0);
+				setResult(max, 0);
+				double oldx = Double.POSITIVE_INFINITY;
+				this.resultComputed = true;
+				this.resultComputed = true;
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -240,12 +242,15 @@
                 y1 = y2;
                 y2 = y0;
             }
-            if (Math.abs(y1) <= functionValueAccuracy) {
+            if (y0 == 0.0) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
-                return result;
+                this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				return result;
             }
             double dx = x2 - x1;
             double tolerance =
2023-07-03 13:28:11 [main] [INFO]  PatchLogExporter - patch (v33666)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-03 13:28:11 [main] [INFO]  PatchLogExporter - patch (v33666)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-03 13:28:11 [main] [INFO]  PatchLogExporter - patch (v33666)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -66,6 +66,7 @@
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
         this.iterationCount = 0;
+		this.maximalIterationCount = defaultMaximalIterationCount;
     }
 
     /** {@inheritDoc} */
2023-07-03 13:28:11 [main] [INFO]  PatchLogExporter - patch (v33666)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-03 13:28:11 [main] [INFO]  PatchLogExporter - patch (v33666)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -59,6 +59,7 @@
      */
     public BrentSolver() {
         super(100, 1E-6);
+		int i = 1;
     }
 
     /** {@inheritDoc} */
@@ -112,7 +113,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +124,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,7 +180,15 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
+                setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(max, 0);
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -238,7 +245,8 @@
                 x2 = x0;
                 y0 = y1;
                 y1 = y2;
-                y2 = y0;
+                y1 = f.value(x1);
+				y2 = y0;
             }
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
2023-07-03 13:28:11 [main] [INFO]  PatchLogExporter - patch (v34862)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -77,7 +77,6 @@
         }
         this.f = f;
         this.defaultFunctionValueAccuracy = 1.0e-15;
-        this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
     /**
2023-07-03 13:28:11 [main] [INFO]  PatchLogExporter - patch (v34862)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-03 13:28:11 [main] [INFO]  PatchLogExporter - patch (v34862)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-03 13:28:11 [main] [INFO]  PatchLogExporter - patch (v34862)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -66,6 +66,7 @@
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
         this.iterationCount = 0;
+		this.maximalIterationCount = defaultMaximalIterationCount;
     }
 
     /** {@inheritDoc} */
2023-07-03 13:28:11 [main] [INFO]  PatchLogExporter - patch (v34862)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-03 13:28:11 [main] [INFO]  PatchLogExporter - patch (v34862)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -99,7 +99,6 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
@@ -112,7 +111,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +122,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,7 +178,12 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
+                setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(max, 0);
+				this.resultComputed = true;
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -245,7 +247,9 @@
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
-                return result;
+                this.resultComputed = true;
+				this.resultComputed = true;
+				return result;
             }
             double dx = x2 - x1;
             double tolerance =
2023-07-03 13:28:11 [main] [INFO]  PatchLogExporter - patch (v35682)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-03 13:28:11 [main] [INFO]  PatchLogExporter - patch (v35682)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-03 13:28:11 [main] [INFO]  PatchLogExporter - patch (v35682)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-03 13:28:11 [main] [INFO]  PatchLogExporter - patch (v35682)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +123,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,7 +179,14 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
+                setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(max, 0);
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -238,14 +243,16 @@
                 x2 = x0;
                 y0 = y1;
                 y1 = y2;
-                y2 = y0;
+                y1 = f.value(x1);
+				y2 = y0;
             }
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
-                return result;
+                this.resultComputed = true;
+				return result;
             }
             double dx = x2 - x1;
             double tolerance =
2023-07-03 13:28:11 [main] [INFO]  PatchLogExporter - patch (v36595)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -77,7 +77,6 @@
         }
         this.f = f;
         this.defaultFunctionValueAccuracy = 1.0e-15;
-        this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
     /**
2023-07-03 13:28:11 [main] [INFO]  PatchLogExporter - patch (v36595)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-03 13:28:11 [main] [INFO]  PatchLogExporter - patch (v36595)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-03 13:28:11 [main] [INFO]  PatchLogExporter - patch (v36595)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-03 13:28:11 [main] [INFO]  PatchLogExporter - patch (v36595)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -99,7 +99,6 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
@@ -112,7 +111,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +122,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -165,7 +162,6 @@
         throws MaxIterationsExceededException,
         FunctionEvaluationException {
 
-        clearResult();
         verifyInterval(min, max);
 
         double ret = Double.NaN;
@@ -177,11 +173,17 @@
         double sign = yMin * yMax;
         if (sign > 0) {
             // check if either value is close to a zero
-            if (Math.abs(yMin) <= functionValueAccuracy) {
+            if (f.value(min) == 0.0) {
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
+                resultComputed = true;
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(max, 0);
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -234,11 +236,13 @@
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
                 x0 = x1;
+				setResult(x1, i);
                 x1 = x2;
                 x2 = x0;
                 y0 = y1;
                 y1 = y2;
-                y2 = y0;
+                y1 = f.value(x1);
+				y2 = y0;
             }
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
2023-07-03 13:28:11 [main] [INFO]  PatchLogExporter - patch (v37203)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -77,7 +77,6 @@
         }
         this.f = f;
         this.defaultFunctionValueAccuracy = 1.0e-15;
-        this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
     /**
2023-07-03 13:28:11 [main] [INFO]  PatchLogExporter - patch (v37203)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-03 13:28:11 [main] [INFO]  PatchLogExporter - patch (v37203)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-03 13:28:11 [main] [INFO]  PatchLogExporter - patch (v37203)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-03 13:28:11 [main] [INFO]  PatchLogExporter - patch (v37203)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -99,7 +99,6 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
@@ -111,10 +110,7 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
-        if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
-            return result;
-        }
+        if (Math.abs(yMin) <= functionValueAccuracy)
 
         // reduce interval if min and initial bracket the root
         if (yInitial * yMin < 0) {
@@ -124,7 +120,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -165,7 +160,6 @@
         throws MaxIterationsExceededException,
         FunctionEvaluationException {
 
-        clearResult();
         verifyInterval(min, max);
 
         double ret = Double.NaN;
@@ -177,11 +171,16 @@
         double sign = yMin * yMax;
         if (sign > 0) {
             // check if either value is close to a zero
-            if (Math.abs(yMin) <= functionValueAccuracy) {
+            if (f.value(min) == 0.0) {
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
+                resultComputed = true;
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(max, 0);
+				this.resultComputed = true;
+				this.resultComputed = true;
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -234,11 +233,13 @@
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
                 x0 = x1;
+				setResult(x1, i);
                 x1 = x2;
                 x2 = x0;
                 y0 = y1;
                 y1 = y2;
-                y2 = y0;
+                y1 = f.value(x1);
+				y2 = y0;
             }
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
2023-07-03 13:28:11 [main] [INFO]  PatchLogExporter - patch (v42553)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -139,7 +139,6 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
-        this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
 
2023-07-03 13:28:11 [main] [INFO]  PatchLogExporter - patch (v42553)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-03 13:28:11 [main] [INFO]  PatchLogExporter - patch (v42553)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-03 13:28:11 [main] [INFO]  PatchLogExporter - patch (v42553)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -66,6 +66,7 @@
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
         this.iterationCount = 0;
+		this.maximalIterationCount = defaultMaximalIterationCount;
     }
 
     /** {@inheritDoc} */
2023-07-03 13:28:11 [main] [INFO]  PatchLogExporter - patch (v42553)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-03 13:28:11 [main] [INFO]  PatchLogExporter - patch (v42553)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -100,7 +100,8 @@
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
         clearResult();
-        verifySequence(min, initial, max);
+        double x1 = max;
+		verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
         double yInitial = f.value(initial);
@@ -112,7 +113,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +124,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,7 +180,15 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
+                setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(max, 0);
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -234,11 +241,13 @@
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
                 x0 = x1;
+				setResult(x1, i);
                 x1 = x2;
                 x2 = x0;
                 y0 = y1;
                 y1 = y2;
-                y2 = y0;
+                y1 = f.value(x1);
+				y2 = y0;
             }
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
2023-07-03 13:28:11 [main] [INFO]  PatchLogExporter - patch (v44052)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -139,7 +139,6 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
-        this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
 
2023-07-03 13:28:11 [main] [INFO]  PatchLogExporter - patch (v44052)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-03 13:28:11 [main] [INFO]  PatchLogExporter - patch (v44052)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-03 13:28:11 [main] [INFO]  PatchLogExporter - patch (v44052)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-03 13:28:11 [main] [INFO]  PatchLogExporter - patch (v44052)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -111,7 +111,7 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
-        if (Math.abs(yMin) <= functionValueAccuracy) {
+        if (f == null) {
             setResult(yMin, 0);
             return result;
         }
@@ -124,7 +124,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,8 +180,17 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
-                ret = max;
+                setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(max, 0);
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
@@ -234,6 +242,9 @@
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
                 x0 = x1;
+				setResult(x1, i);
+				setResult(x1, i);
+				setResult(x1, i);
                 x1 = x2;
                 x2 = x0;
                 y0 = y1;
2023-07-03 13:28:11 [main] [INFO]  PatchLogExporter - patch (v44469)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,6 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
@@ -162,8 +161,7 @@
      * Convenience function for implementations.
      */
     protected final void clearResult() {
-        this.iterationCount = 0;
-        this.resultComputed = false;
+        this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
     /**
2023-07-03 13:28:11 [main] [INFO]  PatchLogExporter - patch (v44469)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-03 13:28:11 [main] [INFO]  PatchLogExporter - patch (v44469)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-03 13:28:11 [main] [INFO]  PatchLogExporter - patch (v44469)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-03 13:28:11 [main] [INFO]  PatchLogExporter - patch (v44469)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -111,10 +111,7 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
-        if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
-            return result;
-        }
+        if (Math.abs(yMin) <= functionValueAccuracy)
 
         // reduce interval if min and initial bracket the root
         if (yInitial * yMin < 0) {
@@ -124,7 +121,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,7 +177,13 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
+                setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(max, 0);
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -191,6 +193,7 @@
         } else if (sign < 0){
             // solve using only the first endpoint as initial guess
             ret = solve(f, min, yMin, max, yMax, min, yMin);
+			double oldx = Double.POSITIVE_INFINITY;
         } else {
             // either min or max is a root
             if (yMin == 0.0) {
@@ -234,11 +237,13 @@
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
                 x0 = x1;
+				setResult(x1, i);
                 x1 = x2;
                 x2 = x0;
                 y0 = y1;
                 y1 = y2;
-                y2 = y0;
+                y1 = f.value(x1);
+				y2 = y0;
             }
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
2023-07-03 13:28:11 [main] [INFO]  PatchLogExporter - patch (v44596)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -139,7 +139,6 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
-        this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
 
2023-07-03 13:28:11 [main] [INFO]  PatchLogExporter - patch (v44596)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-03 13:28:11 [main] [INFO]  PatchLogExporter - patch (v44596)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-03 13:28:11 [main] [INFO]  PatchLogExporter - patch (v44596)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-03 13:28:11 [main] [INFO]  PatchLogExporter - patch (v44596)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -111,8 +111,9 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
-        if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
+        if (f == null) {
+            setResult(max, 0);
+			setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +125,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -179,9 +179,17 @@
             // check if either value is close to a zero
             if (Math.abs(yMin) <= functionValueAccuracy) {
                 setResult(min, 0);
-                ret = min;
+                this.defaultFunctionValueAccuracy = 1.0e-15;
+				ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
+                setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(max, 0);
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -234,11 +242,14 @@
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
                 x0 = x1;
+				setResult(x1, i);
+				setResult(x1, i);
                 x1 = x2;
                 x2 = x0;
                 y0 = y1;
                 y1 = y2;
-                y2 = y0;
+                y1 = f.value(x1);
+				y2 = y0;
             }
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
2023-07-03 13:28:11 [main] [INFO]  PatchLogExporter - patch (v46424)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,8 +76,6 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
-        this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
     /**
2023-07-03 13:28:11 [main] [INFO]  PatchLogExporter - patch (v46424)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-03 13:28:11 [main] [INFO]  PatchLogExporter - patch (v46424)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-03 13:28:11 [main] [INFO]  PatchLogExporter - patch (v46424)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-03 13:28:11 [main] [INFO]  PatchLogExporter - patch (v46424)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -111,7 +111,7 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
-        if (Math.abs(yMin) <= functionValueAccuracy) {
+        if (f == null) {
             setResult(yMin, 0);
             return result;
         }
@@ -124,7 +124,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,7 +180,15 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
+                setResult(yMin, 0);
+				setResult(max, 0);
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -234,6 +241,8 @@
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
                 x0 = x1;
+				setResult(x1, i);
+				setResult(x1, i);
                 x1 = x2;
                 x2 = x0;
                 y0 = y1;
2023-07-03 13:28:11 [main] [INFO]  PatchLogExporter - patch (v46926)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -77,7 +77,6 @@
         }
         this.f = f;
         this.defaultFunctionValueAccuracy = 1.0e-15;
-        this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
     /**
@@ -163,7 +162,6 @@
      */
     protected final void clearResult() {
         this.iterationCount = 0;
-        this.resultComputed = false;
     }
 
     /**
2023-07-03 13:28:11 [main] [INFO]  PatchLogExporter - patch (v46926)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-03 13:28:11 [main] [INFO]  PatchLogExporter - patch (v46926)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-03 13:28:11 [main] [INFO]  PatchLogExporter - patch (v46926)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-03 13:28:11 [main] [INFO]  PatchLogExporter - patch (v46926)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -111,7 +111,7 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
-        if (Math.abs(yMin) <= functionValueAccuracy) {
+        if (f == null) {
             setResult(yMin, 0);
             return result;
         }
@@ -124,7 +124,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,7 +180,18 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
+                setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(max, 0);
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -245,7 +255,8 @@
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
-                return result;
+                this.resultComputed = true;
+				return result;
             }
             double dx = x2 - x1;
             double tolerance =
2023-07-03 13:28:11 [main] [INFO]  PatchLogExporter - patch (v46992)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -77,7 +77,6 @@
         }
         this.f = f;
         this.defaultFunctionValueAccuracy = 1.0e-15;
-        this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
     /**
@@ -163,7 +162,6 @@
      */
     protected final void clearResult() {
         this.iterationCount = 0;
-        this.resultComputed = false;
     }
 
     /**
2023-07-03 13:28:11 [main] [INFO]  PatchLogExporter - patch (v46992)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-03 13:28:11 [main] [INFO]  PatchLogExporter - patch (v46992)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-03 13:28:11 [main] [INFO]  PatchLogExporter - patch (v46992)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-03 13:28:11 [main] [INFO]  PatchLogExporter - patch (v46992)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -111,7 +111,7 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
-        if (Math.abs(yMin) <= functionValueAccuracy) {
+        if (f == null) {
             setResult(yMin, 0);
             return result;
         }
@@ -124,7 +124,7 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
+            checkResultComputed();
             return result;
         }
 
@@ -181,7 +181,18 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
+                setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(max, 0);
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -245,7 +256,8 @@
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
-                return result;
+                this.resultComputed = true;
+				return result;
             }
             double dx = x2 - x1;
             double tolerance =
2023-07-03 13:28:11 [main] [INFO]  PatchLogExporter - patch (v47632)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-03 13:28:11 [main] [INFO]  PatchLogExporter - patch (v47632)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-03 13:28:11 [main] [INFO]  PatchLogExporter - patch (v47632)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-03 13:28:11 [main] [INFO]  PatchLogExporter - patch (v47632)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -109,9 +109,10 @@
             return result;
         }
 
-        // return the first endpoint if it is good enough
+        this.iterationCount = 0;
+		// return the first endpoint if it is good enough
         double yMin = f.value(min);
-        if (Math.abs(yMin) <= functionValueAccuracy) {
+        if (f == null) {
             setResult(yMin, 0);
             return result;
         }
@@ -124,7 +125,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,7 +181,17 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
+                setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(max, 0);
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -234,6 +244,7 @@
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
                 x0 = x1;
+				setResult(x1, i);
                 x1 = x2;
                 x2 = x0;
                 y0 = y1;
2023-07-03 13:28:11 [main] [INFO]  PatchLogExporter - patch (v48145)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-03 13:28:11 [main] [INFO]  PatchLogExporter - patch (v48145)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-03 13:28:11 [main] [INFO]  PatchLogExporter - patch (v48145)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-03 13:28:11 [main] [INFO]  PatchLogExporter - patch (v48145)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -111,7 +111,7 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
-        if (Math.abs(yMin) <= functionValueAccuracy) {
+        if (f == null) {
             setResult(yMin, 0);
             return result;
         }
@@ -124,7 +124,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -178,10 +177,21 @@
         if (sign > 0) {
             // check if either value is close to a zero
             if (Math.abs(yMin) <= functionValueAccuracy) {
-                setResult(min, 0);
-                ret = min;
+                this.iterationCount = iterationCount;
+                this.defaultFunctionValueAccuracy = 1.0e-15;
+				ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
+                setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(max, 0);
+				this.resultComputed = true;
+				checkResultComputed();
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -234,11 +244,13 @@
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
                 x0 = x1;
+				setResult(x1, i);
                 x1 = x2;
                 x2 = x0;
                 y0 = y1;
                 y1 = y2;
-                y2 = y0;
+                y1 = f.value(x1);
+				y2 = y0;
             }
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
2023-07-03 13:28:11 [main] [INFO]  PatchLogExporter - patch (v48983)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-03 13:28:11 [main] [INFO]  PatchLogExporter - patch (v48983)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-03 13:28:11 [main] [INFO]  PatchLogExporter - patch (v48983)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-03 13:28:11 [main] [INFO]  PatchLogExporter - patch (v48983)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -111,7 +111,7 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
-        if (Math.abs(yMin) <= functionValueAccuracy) {
+        if (f == null) {
             setResult(yMin, 0);
             return result;
         }
@@ -124,7 +124,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,7 +180,18 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
+                setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(max, 0);
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				int i = 0;
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -234,11 +244,14 @@
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
                 x0 = x1;
+				setResult(x1, i);
                 x1 = x2;
                 x2 = x0;
                 y0 = y1;
                 y1 = y2;
-                y2 = y0;
+                y1 = f.value(x1);
+				y1 = f.value(x1);
+				y2 = y0;
             }
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
2023-07-03 13:28:11 [main] [INFO]  PatchLogExporter - patch (v49324)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,6 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
2023-07-03 13:28:11 [main] [INFO]  PatchLogExporter - patch (v49324)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-03 13:28:11 [main] [INFO]  PatchLogExporter - patch (v49324)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-03 13:28:11 [main] [INFO]  PatchLogExporter - patch (v49324)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-03 13:28:11 [main] [INFO]  PatchLogExporter - patch (v49324)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -111,7 +111,7 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
-        if (Math.abs(yMin) <= functionValueAccuracy) {
+        if (f == null) {
             setResult(yMin, 0);
             return result;
         }
@@ -124,7 +124,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,7 +180,17 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
+                setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(max, 0);
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				int numIterations = 0;
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -234,6 +243,7 @@
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
                 x0 = x1;
+				setResult(x1, i);
                 x1 = x2;
                 x2 = x0;
                 y0 = y1;
@@ -245,7 +255,9 @@
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
-                return result;
+                this.resultComputed = true;
+				this.resultComputed = true;
+				return result;
             }
             double dx = x2 - x1;
             double tolerance =
2023-07-03 13:28:11 [main] [INFO]  PatchLogExporter - patch (v53791)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -139,7 +139,6 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
-        this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
 
@@ -154,7 +153,6 @@
                                    final int iterationCount) {
         this.result         = x;
         this.functionValue  = fx;
-        this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
 
2023-07-03 13:28:11 [main] [INFO]  PatchLogExporter - patch (v53791)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-03 13:28:11 [main] [INFO]  PatchLogExporter - patch (v53791)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-03 13:28:11 [main] [INFO]  PatchLogExporter - patch (v53791)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-03 13:28:11 [main] [INFO]  PatchLogExporter - patch (v53791)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -109,9 +109,10 @@
             return result;
         }
 
-        // return the first endpoint if it is good enough
+        this.iterationCount = 0;
+		// return the first endpoint if it is good enough
         double yMin = f.value(min);
-        if (Math.abs(yMin) <= functionValueAccuracy) {
+        if (f == null) {
             setResult(yMin, 0);
             return result;
         }
@@ -124,7 +125,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -182,6 +182,16 @@
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
                 setResult(max, 0);
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				double oldx = Double.POSITIVE_INFINITY;
+				this.resultComputed = true;
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -234,6 +244,7 @@
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
                 x0 = x1;
+				setResult(x1, i);
                 x1 = x2;
                 x2 = x0;
                 y0 = y1;
2023-07-03 13:28:11 [main] [INFO]  PatchLogExporter - patch (v54197)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -139,7 +139,6 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
-        this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
 
@@ -154,7 +153,6 @@
                                    final int iterationCount) {
         this.result         = x;
         this.functionValue  = fx;
-        this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
 
2023-07-03 13:28:11 [main] [INFO]  PatchLogExporter - patch (v54197)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-03 13:28:11 [main] [INFO]  PatchLogExporter - patch (v54197)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-03 13:28:11 [main] [INFO]  PatchLogExporter - patch (v54197)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-03 13:28:11 [main] [INFO]  PatchLogExporter - patch (v54197)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -111,7 +111,7 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
-        if (Math.abs(yMin) <= functionValueAccuracy) {
+        if (f == null) {
             setResult(yMin, 0);
             return result;
         }
@@ -124,7 +124,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -182,6 +181,16 @@
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
                 setResult(max, 0);
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				double oldx = Double.POSITIVE_INFINITY;
+				this.resultComputed = true;
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -234,6 +243,7 @@
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
                 x0 = x1;
+				setResult(x1, i);
                 x1 = x2;
                 x2 = x0;
                 y0 = y1;
2023-07-03 13:28:11 [main] [INFO]  PatchLogExporter - patch (v54812)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -139,7 +139,6 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
-        this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
 
2023-07-03 13:28:11 [main] [INFO]  PatchLogExporter - patch (v54812)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-03 13:28:11 [main] [INFO]  PatchLogExporter - patch (v54812)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-03 13:28:11 [main] [INFO]  PatchLogExporter - patch (v54812)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-03 13:28:11 [main] [INFO]  PatchLogExporter - patch (v54812)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -111,7 +111,7 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
-        if (Math.abs(yMin) <= functionValueAccuracy) {
+        if (f == null) {
             setResult(yMin, 0);
             return result;
         }
@@ -124,7 +124,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -178,10 +177,23 @@
         if (sign > 0) {
             // check if either value is close to a zero
             if (Math.abs(yMin) <= functionValueAccuracy) {
-                setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
+                setResult(yMin, 0);
+				setResult(max, 0);
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -234,6 +246,7 @@
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
                 x0 = x1;
+				setResult(x1, i);
                 x1 = x2;
                 x2 = x0;
                 y0 = y1;
2023-07-03 13:28:11 [main] [INFO]  PatchLogExporter - patch (v56080)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,6 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
@@ -139,7 +138,6 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
-        this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
 
@@ -162,7 +160,6 @@
      * Convenience function for implementations.
      */
     protected final void clearResult() {
-        this.iterationCount = 0;
         this.resultComputed = false;
     }
 
2023-07-03 13:28:11 [main] [INFO]  PatchLogExporter - patch (v56080)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-03 13:28:11 [main] [INFO]  PatchLogExporter - patch (v56080)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-03 13:28:11 [main] [INFO]  PatchLogExporter - patch (v56080)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-03 13:28:11 [main] [INFO]  PatchLogExporter - patch (v56080)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +123,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,7 +179,22 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
+                setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(max, 0);
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -234,6 +247,7 @@
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
                 x0 = x1;
+				setResult(x1, i);
                 x1 = x2;
                 x2 = x0;
                 y0 = y1;
2023-07-03 13:28:11 [main] [INFO]  PatchLogExporter - patch (v56530)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-03 13:28:11 [main] [INFO]  PatchLogExporter - patch (v56530)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-03 13:28:11 [main] [INFO]  PatchLogExporter - patch (v56530)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-03 13:28:11 [main] [INFO]  PatchLogExporter - patch (v56530)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -99,7 +99,6 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
@@ -111,7 +110,7 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
-        if (Math.abs(yMin) <= functionValueAccuracy) {
+        if (f == null) {
             setResult(yMin, 0);
             return result;
         }
@@ -124,7 +123,7 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
+            double x1 = min;
             return result;
         }
 
@@ -179,9 +178,24 @@
             // check if either value is close to a zero
             if (Math.abs(yMin) <= functionValueAccuracy) {
                 setResult(min, 0);
-                ret = min;
+                this.defaultFunctionValueAccuracy = 1.0e-15;
+				ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
+                setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(max, 0);
+				double oldx = Double.POSITIVE_INFINITY;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -234,6 +248,7 @@
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
                 x0 = x1;
+				setResult(x1, i);
                 x1 = x2;
                 x2 = x0;
                 y0 = y1;
2023-07-03 13:28:11 [main] [INFO]  PatchLogExporter - patch (v59786)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,8 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
+        functionValueAccuracy = defaultFunctionValueAccuracy;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
2023-07-03 13:28:11 [main] [INFO]  PatchLogExporter - patch (v59786)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-03 13:28:11 [main] [INFO]  PatchLogExporter - patch (v59786)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-03 13:28:11 [main] [INFO]  PatchLogExporter - patch (v59786)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-03 13:28:11 [main] [INFO]  PatchLogExporter - patch (v59786)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -111,7 +111,7 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
-        if (Math.abs(yMin) <= functionValueAccuracy) {
+        if (f == null) {
             setResult(yMin, 0);
             return result;
         }
@@ -124,7 +124,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,7 +180,23 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
+                setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(max, 0);
+				double oldx = Double.POSITIVE_INFINITY;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -234,6 +249,9 @@
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
                 x0 = x1;
+				setResult(x1, i);
+				setResult(x1, i);
+				setResult(x1, i);
                 x1 = x2;
                 x2 = x0;
                 y0 = y1;
2023-07-03 13:28:11 [main] [INFO]  PatchLogExporter - patch (v60128)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -139,7 +139,6 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
-        this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
 
2023-07-03 13:28:11 [main] [INFO]  PatchLogExporter - patch (v60128)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-03 13:28:11 [main] [INFO]  PatchLogExporter - patch (v60128)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-03 13:28:11 [main] [INFO]  PatchLogExporter - patch (v60128)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-03 13:28:11 [main] [INFO]  PatchLogExporter - patch (v60128)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +123,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,7 +179,21 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
+                setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(max, 0);
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -234,11 +246,15 @@
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
                 x0 = x1;
+				setResult(x1, i);
+				setResult(x1, i);
+				setResult(x1, i);
                 x1 = x2;
                 x2 = x0;
                 y0 = y1;
                 y1 = y2;
-                y2 = y0;
+                y1 = f.value(x1);
+				y2 = y0;
             }
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
2023-07-03 13:28:11 [main] [INFO]  PatchLogExporter - patch (v64860)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -139,7 +139,6 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
-        this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
 
@@ -154,7 +153,6 @@
                                    final int iterationCount) {
         this.result         = x;
         this.functionValue  = fx;
-        this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
 
2023-07-03 13:28:11 [main] [INFO]  PatchLogExporter - patch (v64860)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-03 13:28:11 [main] [INFO]  PatchLogExporter - patch (v64860)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-03 13:28:11 [main] [INFO]  PatchLogExporter - patch (v64860)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-03 13:28:11 [main] [INFO]  PatchLogExporter - patch (v64860)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -111,7 +111,7 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
-        if (Math.abs(yMin) <= functionValueAccuracy) {
+        if (f == null) {
             setResult(yMin, 0);
             return result;
         }
@@ -124,7 +124,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,7 +180,21 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
+                setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(max, 0);
+				this.resultComputed = true;
+				this.resultComputed = true;
+				clearResult();
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -234,6 +247,8 @@
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
                 x0 = x1;
+				setResult(x1, i);
+				setResult(x1, i);
                 x1 = x2;
                 x2 = x0;
                 y0 = y1;
@@ -245,7 +260,8 @@
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
-                return result;
+                this.resultComputed = true;
+				return result;
             }
             double dx = x2 - x1;
             double tolerance =
2023-07-03 13:28:11 [main] [INFO]  PatchLogExporter - patch (v68894)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-03 13:28:11 [main] [INFO]  PatchLogExporter - patch (v68894)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-03 13:28:11 [main] [INFO]  PatchLogExporter - patch (v68894)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-03 13:28:11 [main] [INFO]  PatchLogExporter - patch (v68894)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -111,7 +111,7 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
-        if (Math.abs(yMin) <= functionValueAccuracy) {
+        if (f == null) {
             setResult(yMin, 0);
             return result;
         }
@@ -124,7 +124,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,7 +180,26 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
+                setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(max, 0);
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				{
+					setResult(min, 0);
+					ret = min;
+				}
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -234,6 +252,7 @@
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
                 x0 = x1;
+				setResult(x1, i);
                 x1 = x2;
                 x2 = x0;
                 y0 = y1;
2023-07-03 13:28:11 [main] [INFO]  PatchLogExporter - patch (v72499)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-03 13:28:11 [main] [INFO]  PatchLogExporter - patch (v72499)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-03 13:28:11 [main] [INFO]  PatchLogExporter - patch (v72499)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-03 13:28:11 [main] [INFO]  PatchLogExporter - patch (v72499)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -106,13 +106,13 @@
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
-            return result;
+            double x1 = min;
+			return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +124,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,7 +180,29 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
+                setResult(yMin, 0);
+				final double denominator;
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(max, 0);
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -234,6 +255,8 @@
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
                 x0 = x1;
+				setResult(x1, i);
+				setResult(x1, i);
                 x1 = x2;
                 x2 = x0;
                 y0 = y1;
2023-07-03 13:28:11 [main] [INFO]  PatchLogExporter - patch (v72556)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -139,7 +139,6 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
-        this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
 
2023-07-03 13:28:11 [main] [INFO]  PatchLogExporter - patch (v72556)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-03 13:28:11 [main] [INFO]  PatchLogExporter - patch (v72556)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-03 13:28:11 [main] [INFO]  PatchLogExporter - patch (v72556)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-03 13:28:11 [main] [INFO]  PatchLogExporter - patch (v72556)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -111,7 +111,7 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
-        if (Math.abs(yMin) <= functionValueAccuracy) {
+        if (f == null) {
             setResult(yMin, 0);
             return result;
         }
@@ -124,7 +124,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,7 +180,27 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
+                setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(max, 0);
+				double x2 = max;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -234,6 +253,10 @@
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
                 x0 = x1;
+				setResult(x1, i);
+				setResult(x1, i);
+				setResult(x1, i);
+				setResult(x1, i);
                 x1 = x2;
                 x2 = x0;
                 y0 = y1;
2023-07-03 13:28:11 [main] [INFO]  PatchLogExporter - patch (v74565)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -77,7 +77,7 @@
         }
         this.f = f;
         this.defaultFunctionValueAccuracy = 1.0e-15;
-        this.functionValueAccuracy = defaultFunctionValueAccuracy;
+        double fb;
     }
 
     /**
2023-07-03 13:28:11 [main] [INFO]  PatchLogExporter - patch (v74565)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-03 13:28:11 [main] [INFO]  PatchLogExporter - patch (v74565)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-03 13:28:11 [main] [INFO]  PatchLogExporter - patch (v74565)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-03 13:28:11 [main] [INFO]  PatchLogExporter - patch (v74565)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -99,7 +99,6 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
@@ -111,7 +110,7 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
-        if (Math.abs(yMin) <= functionValueAccuracy) {
+        if (f == null) {
             setResult(yMin, 0);
             return result;
         }
@@ -124,7 +123,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,7 +179,28 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
+                setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(max, 0);
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				ret = max;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -234,6 +253,9 @@
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
                 x0 = x1;
+				setResult(x1, i);
+				setResult(x1, i);
+				setResult(x1, i);
                 x1 = x2;
                 x2 = x0;
                 y0 = y1;
2023-07-03 13:28:11 [main] [INFO]  PatchLogExporter - patch (v75700)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-03 13:28:11 [main] [INFO]  PatchLogExporter - patch (v75700)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-03 13:28:11 [main] [INFO]  PatchLogExporter - patch (v75700)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-03 13:28:11 [main] [INFO]  PatchLogExporter - patch (v75700)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -111,7 +111,7 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
-        if (Math.abs(yMin) <= functionValueAccuracy) {
+        if (f == null) {
             setResult(yMin, 0);
             return result;
         }
@@ -124,7 +124,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,7 +180,28 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
+                setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(max, 0);
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				clearResult();
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -234,6 +254,10 @@
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
                 x0 = x1;
+				setResult(x1, i);
+				setResult(x1, i);
+				setResult(x1, i);
+				setResult(x1, i);
                 x1 = x2;
                 x2 = x0;
                 y0 = y1;
2023-07-03 13:28:12 [main] [INFO]  PatchLogExporter - patch (v76406)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -139,7 +139,6 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
-        this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
 
2023-07-03 13:28:12 [main] [INFO]  PatchLogExporter - patch (v76406)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-03 13:28:12 [main] [INFO]  PatchLogExporter - patch (v76406)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-03 13:28:12 [main] [INFO]  PatchLogExporter - patch (v76406)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-03 13:28:12 [main] [INFO]  PatchLogExporter - patch (v76406)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -111,8 +111,7 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
-        if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
+        if (f == null) {
             return result;
         }
 
@@ -124,7 +123,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,7 +179,28 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
+                setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(max, 0);
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				double fa;
+				this.resultComputed = true;
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -234,6 +253,10 @@
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
                 x0 = x1;
+				setResult(x1, i);
+				setResult(x1, i);
+				setResult(x1, i);
+				setResult(x1, i);
                 x1 = x2;
                 x2 = x0;
                 y0 = y1;
2023-07-03 13:28:12 [main] [INFO]  PatchLogExporter - patch (v78073)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-03 13:28:12 [main] [INFO]  PatchLogExporter - patch (v78073)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-03 13:28:12 [main] [INFO]  PatchLogExporter - patch (v78073)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-03 13:28:12 [main] [INFO]  PatchLogExporter - patch (v78073)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -111,7 +111,7 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
-        if (Math.abs(yMin) <= functionValueAccuracy) {
+        if (f == null) {
             setResult(yMin, 0);
             return result;
         }
@@ -124,7 +124,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,7 +180,31 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
+                setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(max, 0);
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				clearResult();
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.functionValueAccuracy = defaultFunctionValueAccuracy;
+				this.resultComputed = true;
+				this.resultComputed = true;
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -234,6 +257,11 @@
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
                 x0 = x1;
+				setResult(x1, i);
+				setResult(x1, i);
+				setResult(x1, i);
+				setResult(x1, i);
+				setResult(x1, i);
                 x1 = x2;
                 x2 = x0;
                 y0 = y1;
2023-07-03 13:28:12 [main] [INFO]  PatchLogExporter - patch (v78563)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -139,7 +139,6 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
-        this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
 
2023-07-03 13:28:12 [main] [INFO]  PatchLogExporter - patch (v78563)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-03 13:28:12 [main] [INFO]  PatchLogExporter - patch (v78563)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-03 13:28:12 [main] [INFO]  PatchLogExporter - patch (v78563)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-03 13:28:12 [main] [INFO]  PatchLogExporter - patch (v78563)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -111,7 +111,7 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
-        if (Math.abs(yMin) <= functionValueAccuracy) {
+        if (f == null) {
             setResult(yMin, 0);
             return result;
         }
@@ -123,10 +123,8 @@
 
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
-        if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
-            return result;
-        }
+        if (Math.abs(yMax) <= functionValueAccuracy)
+			return solve(f, min, max);
 
         // reduce interval if initial and max bracket the root
         if (yInitial * yMax < 0) {
@@ -181,7 +179,23 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
+                setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(max, 0);
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -234,6 +248,13 @@
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
                 x0 = x1;
+				setResult(x1, i);
+				setResult(x1, i);
+				setResult(x1, i);
+				setResult(x1, i);
+				setResult(x1, i);
+				setResult(x1, i);
+				setResult(x1, i);
                 x1 = x2;
                 x2 = x0;
                 y0 = y1;
2023-07-03 13:28:12 [main] [INFO]  PatchLogExporter - patch (v79364)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-03 13:28:12 [main] [INFO]  PatchLogExporter - patch (v79364)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-03 13:28:12 [main] [INFO]  PatchLogExporter - patch (v79364)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-03 13:28:12 [main] [INFO]  PatchLogExporter - patch (v79364)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -111,7 +111,7 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
-        if (Math.abs(yMin) <= functionValueAccuracy) {
+        if (f == null) {
             setResult(yMin, 0);
             return result;
         }
@@ -124,7 +124,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,7 +180,32 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
+                setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(max, 0);
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				{
+					setResult(min, 0);
+					ret = min;
+				}
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -234,6 +258,8 @@
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
                 x0 = x1;
+				setResult(x1, i);
+				setResult(x1, i);
                 x1 = x2;
                 x2 = x0;
                 y0 = y1;
@@ -245,7 +271,8 @@
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
-                return result;
+                this.resultComputed = true;
+				return result;
             }
             double dx = x2 - x1;
             double tolerance =
2023-07-03 13:28:12 [main] [INFO]  PatchLogExporter - patch (v79620)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -162,7 +162,6 @@
      * Convenience function for implementations.
      */
     protected final void clearResult() {
-        this.iterationCount = 0;
         this.resultComputed = false;
     }
 
@@ -246,7 +245,8 @@
 
         verifyInterval(lower, upper);
         if (!isBracketing(lower, upper, function)) {
-            throw MathRuntimeException.createIllegalArgumentException(
+            double delta;
+			throw MathRuntimeException.createIllegalArgumentException(
                     "function values at endpoints do not have different signs.  " +
                     "Endpoints: [{0}, {1}], Values: [{2}, {3}]",
                     lower, upper, function.value(lower), function.value(upper));
2023-07-03 13:28:12 [main] [INFO]  PatchLogExporter - patch (v79620)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-03 13:28:12 [main] [INFO]  PatchLogExporter - patch (v79620)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-03 13:28:12 [main] [INFO]  PatchLogExporter - patch (v79620)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-03 13:28:12 [main] [INFO]  PatchLogExporter - patch (v79620)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -111,7 +111,7 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
-        if (Math.abs(yMin) <= functionValueAccuracy) {
+        if (f == null) {
             setResult(yMin, 0);
             return result;
         }
@@ -124,7 +124,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,8 +180,25 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
                 ret = max;
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(max, 0);
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
@@ -234,6 +250,8 @@
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
                 x0 = x1;
+				setResult(x1, i);
+				setResult(x1, i);
                 x1 = x2;
                 x2 = x0;
                 y0 = y1;
2023-07-03 13:28:12 [main] [INFO]  PatchLogExporter - patch (v80078)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -162,7 +162,6 @@
      * Convenience function for implementations.
      */
     protected final void clearResult() {
-        this.iterationCount = 0;
         this.resultComputed = false;
     }
 
2023-07-03 13:28:12 [main] [INFO]  PatchLogExporter - patch (v80078)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-03 13:28:12 [main] [INFO]  PatchLogExporter - patch (v80078)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-03 13:28:12 [main] [INFO]  PatchLogExporter - patch (v80078)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-03 13:28:12 [main] [INFO]  PatchLogExporter - patch (v80078)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +123,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,7 +179,29 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
+                setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(max, 0);
+				this.f = f;
+				this.resultComputed = true;
+				ret = max;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -234,6 +254,11 @@
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
                 x0 = x1;
+				setResult(x1, i);
+				setResult(x1, i);
+				setResult(x1, i);
+				setResult(x1, i);
+				setResult(x1, i);
                 x1 = x2;
                 x2 = x0;
                 y0 = y1;
2023-07-03 13:28:12 [main] [INFO]  PatchLogExporter - patch (v81071)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-03 13:28:12 [main] [INFO]  PatchLogExporter - patch (v81071)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-03 13:28:12 [main] [INFO]  PatchLogExporter - patch (v81071)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-03 13:28:12 [main] [INFO]  PatchLogExporter - patch (v81071)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -99,7 +99,6 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
@@ -111,7 +110,7 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
-        if (Math.abs(yMin) <= functionValueAccuracy) {
+        if (f == null) {
             setResult(yMin, 0);
             return result;
         }
@@ -124,7 +123,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,7 +179,33 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
+                setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(max, 0);
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -234,6 +258,8 @@
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
                 x0 = x1;
+				setResult(x1, i);
+				setResult(x1, i);
                 x1 = x2;
                 x2 = x0;
                 y0 = y1;
2023-07-03 13:28:12 [main] [INFO]  PatchLogExporter - patch (v81141)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -139,7 +139,6 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
-        this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
 
@@ -154,7 +153,6 @@
                                    final int iterationCount) {
         this.result         = x;
         this.functionValue  = fx;
-        this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
 
2023-07-03 13:28:12 [main] [INFO]  PatchLogExporter - patch (v81141)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-03 13:28:12 [main] [INFO]  PatchLogExporter - patch (v81141)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-03 13:28:12 [main] [INFO]  PatchLogExporter - patch (v81141)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -59,7 +59,6 @@
      */
     protected ConvergingAlgorithmImpl(final int defaultMaximalIterationCount,
                                       final double defaultAbsoluteAccuracy) {
-        this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
2023-07-03 13:28:12 [main] [INFO]  PatchLogExporter - patch (v81141)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-03 13:28:12 [main] [INFO]  PatchLogExporter - patch (v81141)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -111,7 +111,7 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
-        if (Math.abs(yMin) <= functionValueAccuracy) {
+        if (f == null) {
             setResult(yMin, 0);
             return result;
         }
@@ -124,7 +124,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,7 +180,28 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
+                verifyInterval(min, max);
+				setResult(yMin, 0);
+				double fm;
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(max, 0);
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				clearResult();
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -234,6 +254,9 @@
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
                 x0 = x1;
+				setResult(x1, i);
+				setResult(x1, i);
+				setResult(x1, i);
                 x1 = x2;
                 x2 = x0;
                 y0 = y1;
2023-07-03 13:28:12 [main] [INFO]  PatchLogExporter - patch (v82600)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-03 13:28:12 [main] [INFO]  PatchLogExporter - patch (v82600)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-03 13:28:12 [main] [INFO]  PatchLogExporter - patch (v82600)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-03 13:28:12 [main] [INFO]  PatchLogExporter - patch (v82600)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -111,8 +111,7 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
-        if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
+        if (f == null) {
             return result;
         }
 
@@ -124,7 +123,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,7 +179,30 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
+                setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(max, 0);
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -234,6 +255,13 @@
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
                 x0 = x1;
+				setResult(x1, i);
+				setResult(x1, i);
+				setResult(x1, i);
+				setResult(x1, i);
+				setResult(x1, i);
+				setResult(x1, i);
+				setResult(x1, i);
                 x1 = x2;
                 x2 = x0;
                 y0 = y1;
@@ -245,7 +273,8 @@
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
-                return result;
+                this.resultComputed = true;
+				return result;
             }
             double dx = x2 - x1;
             double tolerance =
2023-07-03 13:28:12 [main] [INFO]  PatchLogExporter - patch (v87795)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-03 13:28:12 [main] [INFO]  PatchLogExporter - patch (v87795)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-03 13:28:12 [main] [INFO]  PatchLogExporter - patch (v87795)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-03 13:28:12 [main] [INFO]  PatchLogExporter - patch (v87795)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -99,7 +99,6 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
@@ -111,7 +110,7 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
-        if (Math.abs(yMin) <= functionValueAccuracy) {
+        if (f == null) {
             setResult(yMin, 0);
             return result;
         }
@@ -124,7 +123,7 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
+            double delta;
             return result;
         }
 
@@ -165,7 +164,6 @@
         throws MaxIterationsExceededException,
         FunctionEvaluationException {
 
-        clearResult();
         verifyInterval(min, max);
 
         double ret = Double.NaN;
@@ -181,7 +179,31 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
+                setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(max, 0);
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -234,6 +256,11 @@
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
                 x0 = x1;
+				setResult(x1, i);
+				setResult(x1, i);
+				setResult(x1, i);
+				setResult(x1, i);
+				setResult(x1, i);
                 x1 = x2;
                 x2 = x0;
                 y0 = y1;
2023-07-03 13:28:12 [main] [INFO]  PatchLogExporter - patch (v89304)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-03 13:28:12 [main] [INFO]  PatchLogExporter - patch (v89304)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-03 13:28:12 [main] [INFO]  PatchLogExporter - patch (v89304)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -59,7 +59,6 @@
      */
     protected ConvergingAlgorithmImpl(final int defaultMaximalIterationCount,
                                       final double defaultAbsoluteAccuracy) {
-        this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
2023-07-03 13:28:12 [main] [INFO]  PatchLogExporter - patch (v89304)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-03 13:28:12 [main] [INFO]  PatchLogExporter - patch (v89304)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -111,8 +111,7 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
-        if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
+        if (f == null) {
             return result;
         }
 
@@ -124,7 +123,7 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
+            double x1;
             return result;
         }
 
@@ -181,8 +180,29 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
-                ret = max;
+                setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(max, 0);
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
@@ -234,6 +254,8 @@
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
                 x0 = x1;
+				setResult(x1, i);
+				setResult(x1, i);
                 x1 = x2;
                 x2 = x0;
                 y0 = y1;
2023-07-03 13:28:12 [main] [INFO]  PatchLogExporter - patch (v89353)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -162,7 +162,6 @@
      * Convenience function for implementations.
      */
     protected final void clearResult() {
-        this.iterationCount = 0;
         this.resultComputed = false;
     }
 
2023-07-03 13:28:12 [main] [INFO]  PatchLogExporter - patch (v89353)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-03 13:28:12 [main] [INFO]  PatchLogExporter - patch (v89353)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-03 13:28:12 [main] [INFO]  PatchLogExporter - patch (v89353)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-03 13:28:12 [main] [INFO]  PatchLogExporter - patch (v89353)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,7 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
+            this.resultComputed = true;
             return result;
         }
 
@@ -124,7 +124,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,7 +180,30 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
+                setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(max, 0);
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -234,6 +256,10 @@
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
                 x0 = x1;
+				setResult(x1, i);
+				setResult(x1, i);
+				setResult(x1, i);
+				setResult(x1, i);
                 x1 = x2;
                 x2 = x0;
                 y0 = y1;
@@ -245,7 +271,8 @@
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
-                return result;
+                this.resultComputed = true;
+				return result;
             }
             double dx = x2 - x1;
             double tolerance =
2023-07-03 13:28:12 [main] [INFO]  PatchLogExporter - patch (v90051)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-03 13:28:12 [main] [INFO]  PatchLogExporter - patch (v90051)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-03 13:28:12 [main] [INFO]  PatchLogExporter - patch (v90051)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -59,7 +59,6 @@
      */
     protected ConvergingAlgorithmImpl(final int defaultMaximalIterationCount,
                                       final double defaultAbsoluteAccuracy) {
-        this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
2023-07-03 13:28:12 [main] [INFO]  PatchLogExporter - patch (v90051)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-03 13:28:12 [main] [INFO]  PatchLogExporter - patch (v90051)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -111,7 +111,7 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
-        if (Math.abs(yMin) <= functionValueAccuracy) {
+        if (f == null) {
             setResult(yMin, 0);
             return result;
         }
@@ -124,7 +124,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,8 +180,29 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
-                ret = max;
+                setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(max, 0);
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
@@ -234,6 +254,8 @@
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
                 x0 = x1;
+				setResult(x1, i);
+				setResult(x1, i);
                 x1 = x2;
                 x2 = x0;
                 y0 = y1;
2023-07-03 13:28:12 [main] [INFO]  PatchLogExporter - patch (v91213)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-03 13:28:12 [main] [INFO]  PatchLogExporter - patch (v91213)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-03 13:28:12 [main] [INFO]  PatchLogExporter - patch (v91213)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-03 13:28:12 [main] [INFO]  PatchLogExporter - patch (v91213)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -99,7 +99,6 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
@@ -111,7 +110,7 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
-        if (Math.abs(yMin) <= functionValueAccuracy) {
+        if (f == null) {
             setResult(yMin, 0);
             return result;
         }
@@ -124,7 +123,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,7 +179,32 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
+                setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(max, 0);
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				clearResult();
+				resultComputed = true;
+				this.resultComputed = true;
+				this.f = f;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -234,6 +257,9 @@
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
                 x0 = x1;
+				setResult(x1, i);
+				setResult(x1, i);
+				setResult(x1, i);
                 x1 = x2;
                 x2 = x0;
                 y0 = y1;
2023-07-03 13:28:12 [main] [INFO]  PatchLogExporter - patch (v91308)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-03 13:28:12 [main] [INFO]  PatchLogExporter - patch (v91308)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-03 13:28:12 [main] [INFO]  PatchLogExporter - patch (v91308)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-03 13:28:12 [main] [INFO]  PatchLogExporter - patch (v91308)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -99,7 +99,6 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
@@ -112,7 +111,7 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
+            int i = 0;
             return result;
         }
 
@@ -124,7 +123,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,7 +179,39 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
+                setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(max, 0);
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -234,6 +264,8 @@
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
                 x0 = x1;
+				setResult(x1, i);
+				setResult(x1, i);
                 x1 = x2;
                 x2 = x0;
                 y0 = y1;
2023-07-03 13:28:12 [main] [INFO]  PatchLogExporter - patch (v93250)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-03 13:28:12 [main] [INFO]  PatchLogExporter - patch (v93250)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-03 13:28:12 [main] [INFO]  PatchLogExporter - patch (v93250)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-03 13:28:12 [main] [INFO]  PatchLogExporter - patch (v93250)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -111,7 +111,7 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
-        if (Math.abs(yMin) <= functionValueAccuracy) {
+        if (f == null) {
             setResult(yMin, 0);
             return result;
         }
@@ -124,7 +124,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,7 +180,32 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
+                setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(max, 0);
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -234,6 +258,11 @@
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
                 x0 = x1;
+				setResult(x1, i);
+				setResult(x1, i);
+				setResult(x1, i);
+				setResult(x1, i);
+				setResult(x1, i);
                 x1 = x2;
                 x2 = x0;
                 y0 = y1;
@@ -245,7 +274,8 @@
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
-                return result;
+                this.resultComputed = true;
+				return result;
             }
             double dx = x2 - x1;
             double tolerance =
2023-07-03 13:28:12 [main] [INFO]  PatchLogExporter - patch (v94105)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-03 13:28:12 [main] [INFO]  PatchLogExporter - patch (v94105)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-03 13:28:12 [main] [INFO]  PatchLogExporter - patch (v94105)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-03 13:28:12 [main] [INFO]  PatchLogExporter - patch (v94105)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -111,7 +111,7 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
-        if (Math.abs(yMin) <= functionValueAccuracy) {
+        if (f == null) {
             setResult(yMin, 0);
             return result;
         }
@@ -124,7 +124,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,7 +180,35 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
+                setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(max, 0);
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				clearResult();
+				this.resultComputed = true;
+				this.resultComputed = true;
+				double x2 = max;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				double fmin;
+				this.resultComputed = true;
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -234,6 +261,7 @@
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
                 x0 = x1;
+				setResult(x1, i);
                 x1 = x2;
                 x2 = x0;
                 y0 = y1;
2023-07-03 13:28:12 [main] [INFO]  PatchLogExporter - patch (v94812)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-03 13:28:12 [main] [INFO]  PatchLogExporter - patch (v94812)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-03 13:28:12 [main] [INFO]  PatchLogExporter - patch (v94812)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-03 13:28:12 [main] [INFO]  PatchLogExporter - patch (v94812)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -111,7 +111,7 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
-        if (Math.abs(yMin) <= functionValueAccuracy) {
+        if (f == null) {
             setResult(yMin, 0);
             return result;
         }
@@ -124,7 +124,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,7 +180,38 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
+                setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(max, 0);
+				this.resultComputed = false;
+				clearResult();
+				resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -234,6 +264,12 @@
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
                 x0 = x1;
+				setResult(x1, i);
+				setResult(x1, i);
+				setResult(x1, i);
+				setResult(x1, i);
+				setResult(x1, i);
+				setResult(x1, i);
                 x1 = x2;
                 x2 = x0;
                 y0 = y1;
2023-07-03 13:28:12 [main] [INFO]  PatchLogExporter - patch (v98080)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,6 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
2023-07-03 13:28:12 [main] [INFO]  PatchLogExporter - patch (v98080)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-03 13:28:12 [main] [INFO]  PatchLogExporter - patch (v98080)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-03 13:28:12 [main] [INFO]  PatchLogExporter - patch (v98080)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -63,7 +63,6 @@
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
-        this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
         this.iterationCount = 0;
     }
2023-07-03 13:28:12 [main] [INFO]  PatchLogExporter - patch (v98080)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-03 13:28:12 [main] [INFO]  PatchLogExporter - patch (v98080)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -99,8 +99,8 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
-        verifySequence(min, initial, max);
+        resultComputed = true;
+		verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
         double yInitial = f.value(initial);
@@ -112,7 +112,7 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
+            this.iterationCount = 0;
             return result;
         }
 
@@ -124,7 +124,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -165,7 +164,6 @@
         throws MaxIterationsExceededException,
         FunctionEvaluationException {
 
-        clearResult();
         verifyInterval(min, max);
 
         double ret = Double.NaN;
@@ -181,7 +179,30 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
+                this.resultComputed = false;
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(max, 0);
+				double oldx = Double.POSITIVE_INFINITY;
+				this.resultComputed = false;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.f = f;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -234,6 +255,10 @@
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
                 x0 = x1;
+				setResult(x1, i);
+				setResult(x1, i);
+				setResult(x1, i);
+				setResult(x1, i);
                 x1 = x2;
                 x2 = x0;
                 y0 = y1;
2023-07-03 13:28:12 [main] [INFO]  PatchLogExporter - patch (v100170)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,6 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
@@ -162,7 +161,6 @@
      * Convenience function for implementations.
      */
     protected final void clearResult() {
-        this.iterationCount = 0;
         this.resultComputed = false;
     }
 
2023-07-03 13:28:12 [main] [INFO]  PatchLogExporter - patch (v100170)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-03 13:28:12 [main] [INFO]  PatchLogExporter - patch (v100170)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-03 13:28:12 [main] [INFO]  PatchLogExporter - patch (v100170)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-03 13:28:12 [main] [INFO]  PatchLogExporter - patch (v100170)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -111,7 +111,7 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
-        if (Math.abs(yMin) <= functionValueAccuracy) {
+        if (f == null) {
             setResult(yMin, 0);
             return result;
         }
@@ -124,7 +124,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,7 +180,33 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
+                setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(max, 0);
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				clearResult();
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -234,6 +259,11 @@
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
                 x0 = x1;
+				setResult(x1, i);
+				setResult(x1, i);
+				setResult(x1, i);
+				setResult(x1, i);
+				setResult(x1, i);
                 x1 = x2;
                 x2 = x0;
                 y0 = y1;
@@ -241,7 +271,8 @@
                 y2 = y0;
             }
             if (Math.abs(y1) <= functionValueAccuracy) {
-                // Avoid division by very small values. Assume
+                clearResult();
+				// Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
2023-07-03 13:28:12 [main] [INFO]  PatchLogExporter - patch (v100452)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-03 13:28:12 [main] [INFO]  PatchLogExporter - patch (v100452)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-03 13:28:12 [main] [INFO]  PatchLogExporter - patch (v100452)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-03 13:28:12 [main] [INFO]  PatchLogExporter - patch (v100452)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -99,7 +99,6 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
@@ -111,7 +110,7 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
-        if (Math.abs(yMin) <= functionValueAccuracy) {
+        if (f == null) {
             setResult(yMin, 0);
             return result;
         }
@@ -124,7 +123,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,7 +179,26 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
+                this.resultComputed = false;
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(max, 0);
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = false;
+				this.resultComputed = true;
+				clearResult();
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -234,6 +251,11 @@
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
                 x0 = x1;
+				setResult(x1, i);
+				setResult(x1, i);
+				setResult(x1, i);
+				setResult(x1, i);
+				setResult(x1, i);
                 x1 = x2;
                 x2 = x0;
                 y0 = y1;
2023-07-03 13:28:12 [main] [INFO]  PatchLogExporter - patch (v100955)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-03 13:28:12 [main] [INFO]  PatchLogExporter - patch (v100955)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-03 13:28:12 [main] [INFO]  PatchLogExporter - patch (v100955)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-03 13:28:12 [main] [INFO]  PatchLogExporter - patch (v100955)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -99,7 +99,6 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
@@ -111,7 +110,7 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
-        if (Math.abs(yMin) <= functionValueAccuracy) {
+        if (f == null) {
             setResult(yMin, 0);
             return result;
         }
@@ -124,7 +123,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,7 +179,31 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
+                int i = 1;
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(max, 0);
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = false;
+				setResult(min, 0);
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -234,6 +256,10 @@
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
                 x0 = x1;
+				setResult(x1, i);
+				setResult(x1, i);
+				setResult(x1, i);
+				setResult(x1, i);
                 x1 = x2;
                 x2 = x0;
                 y0 = y1;
2023-07-03 13:28:12 [main] [INFO]  PatchLogExporter - patch (v100968)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-03 13:28:12 [main] [INFO]  PatchLogExporter - patch (v100968)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-03 13:28:12 [main] [INFO]  PatchLogExporter - patch (v100968)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-03 13:28:12 [main] [INFO]  PatchLogExporter - patch (v100968)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -111,7 +111,7 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
-        if (Math.abs(yMin) <= functionValueAccuracy) {
+        if (f == null) {
             setResult(yMin, 0);
             return result;
         }
@@ -124,7 +124,7 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
+            this.iterationCount = iterationCount;
             return result;
         }
 
@@ -181,7 +181,38 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
+                setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(max, 0);
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				setResult(min, 0);
+				int i = 1;
+				this.resultComputed = true;
+				this.resultComputed = false;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -234,6 +265,9 @@
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
                 x0 = x1;
+				setResult(x1, i);
+				setResult(x1, i);
+				setResult(x1, i);
                 x1 = x2;
                 x2 = x0;
                 y0 = y1;
@@ -245,7 +279,8 @@
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
-                return result;
+                this.resultComputed = true;
+				return result;
             }
             double dx = x2 - x1;
             double tolerance =
2023-07-03 13:28:12 [main] [INFO]  PatchLogExporter - patch (v100981)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-03 13:28:12 [main] [INFO]  PatchLogExporter - patch (v100981)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-03 13:28:12 [main] [INFO]  PatchLogExporter - patch (v100981)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-03 13:28:12 [main] [INFO]  PatchLogExporter - patch (v100981)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -100,7 +100,8 @@
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
         clearResult();
-        verifySequence(min, initial, max);
+        resultComputed = true;
+		verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
         double yInitial = f.value(initial);
@@ -111,8 +112,8 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
-        if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
+        if (f == null) {
+            int i = 0;
             return result;
         }
 
@@ -124,7 +125,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,7 +181,33 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
+                this.resultComputed = false;
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(max, 0);
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				clearResult();
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -234,6 +260,9 @@
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
                 x0 = x1;
+				clearResult();
+				setResult(x1, i);
+				setResult(x1, i);
                 x1 = x2;
                 x2 = x0;
                 y0 = y1;
2023-07-03 13:28:12 [main] [INFO]  PatchLogExporter - patch (v101387)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-03 13:28:12 [main] [INFO]  PatchLogExporter - patch (v101387)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-03 13:28:12 [main] [INFO]  PatchLogExporter - patch (v101387)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-03 13:28:12 [main] [INFO]  PatchLogExporter - patch (v101387)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -99,7 +99,6 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
@@ -111,7 +110,7 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
-        if (Math.abs(yMin) <= functionValueAccuracy) {
+        if (f == null) {
             setResult(yMin, 0);
             return result;
         }
@@ -124,7 +123,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -165,7 +163,6 @@
         throws MaxIterationsExceededException,
         FunctionEvaluationException {
 
-        clearResult();
         verifyInterval(min, max);
 
         double ret = Double.NaN;
@@ -180,10 +177,9 @@
             if (Math.abs(yMin) <= functionValueAccuracy) {
                 setResult(min, 0);
                 ret = min;
-            } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
-                ret = max;
-            } else {
+            } else if (Math.abs(yMax) <= functionValueAccuracy)
+				return result;
+			else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
                         NON_BRACKETING_MESSAGE, min, max, yMin, yMax);
@@ -234,6 +230,12 @@
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
                 x0 = x1;
+				setResult(x1, i);
+				setResult(x1, i);
+				setResult(x1, i);
+				setResult(x1, i);
+				setResult(x1, i);
+				setResult(x1, i);
                 x1 = x2;
                 x2 = x0;
                 y0 = y1;
2023-07-03 13:28:12 [main] [INFO]  PatchLogExporter - patch (v104197)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,6 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
2023-07-03 13:28:12 [main] [INFO]  PatchLogExporter - patch (v104197)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-03 13:28:12 [main] [INFO]  PatchLogExporter - patch (v104197)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-03 13:28:12 [main] [INFO]  PatchLogExporter - patch (v104197)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-03 13:28:12 [main] [INFO]  PatchLogExporter - patch (v104197)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -100,7 +100,8 @@
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
         clearResult();
-        verifySequence(min, initial, max);
+        resultComputed = true;
+		verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
         double yInitial = f.value(initial);
@@ -111,7 +112,7 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
-        if (Math.abs(yMin) <= functionValueAccuracy) {
+        if (f == null) {
             setResult(yMin, 0);
             return result;
         }
@@ -124,7 +125,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,7 +181,33 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
+                double oldx = Double.POSITIVE_INFINITY;
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(max, 0);
+				this.resultComputed = true;
+				this.resultComputed = true;
+				double fmin;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -234,6 +260,15 @@
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
                 x0 = x1;
+				setResult(x1, i);
+				setResult(x1, i);
+				setResult(x1, i);
+				setResult(x1, i);
+				setResult(x1, i);
+				setResult(x1, i);
+				setResult(x1, i);
+				setResult(x1, i);
+				setResult(x1, i);
                 x1 = x2;
                 x2 = x0;
                 y0 = y1;
2023-07-03 13:28:12 [main] [INFO]  PatchLogExporter - patch (v105753)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-03 13:28:12 [main] [INFO]  PatchLogExporter - patch (v105753)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-03 13:28:12 [main] [INFO]  PatchLogExporter - patch (v105753)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -63,7 +63,6 @@
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
-        this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
         this.iterationCount = 0;
     }
2023-07-03 13:28:12 [main] [INFO]  PatchLogExporter - patch (v105753)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-03 13:28:12 [main] [INFO]  PatchLogExporter - patch (v105753)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +123,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,7 +179,35 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
+                setResult(yMin, 0);
+				verifyInterval(min, max);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(max, 0);
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -234,6 +260,11 @@
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
                 x0 = x1;
+				setResult(x1, i);
+				setResult(x1, i);
+				setResult(x1, i);
+				setResult(x1, i);
+				setResult(x1, i);
                 x1 = x2;
                 x2 = x0;
                 y0 = y1;
2023-07-03 13:28:12 [main] [INFO]  PatchLogExporter - patch (v105923)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-03 13:28:12 [main] [INFO]  PatchLogExporter - patch (v105923)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-03 13:28:12 [main] [INFO]  PatchLogExporter - patch (v105923)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-03 13:28:12 [main] [INFO]  PatchLogExporter - patch (v105923)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -111,7 +111,7 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
-        if (Math.abs(yMin) <= functionValueAccuracy) {
+        if (f == null) {
             setResult(yMin, 0);
             return result;
         }
@@ -124,7 +124,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,7 +180,41 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
+                this.resultComputed = false;
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(max, 0);
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = false;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -234,6 +267,7 @@
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
                 x0 = x1;
+				setResult(x1, i);
                 x1 = x2;
                 x2 = x0;
                 y0 = y1;
2023-07-03 13:28:12 [main] [INFO]  PatchLogExporter - patch (v105988)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-03 13:28:12 [main] [INFO]  PatchLogExporter - patch (v105988)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-03 13:28:12 [main] [INFO]  PatchLogExporter - patch (v105988)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-03 13:28:12 [main] [INFO]  PatchLogExporter - patch (v105988)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -111,7 +111,7 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
-        if (Math.abs(yMin) <= functionValueAccuracy) {
+        if (f == null) {
             setResult(yMin, 0);
             return result;
         }
@@ -124,7 +124,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,7 +180,42 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
+                int i = 1;
+				this.resultComputed = false;
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(max, 0);
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				double oldx = Double.POSITIVE_INFINITY;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -234,6 +268,7 @@
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
                 x0 = x1;
+				setResult(x1, i);
                 x1 = x2;
                 x2 = x0;
                 y0 = y1;
2023-07-03 13:28:12 [main] [INFO]  PatchLogExporter - patch (v107080)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,6 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
2023-07-03 13:28:12 [main] [INFO]  PatchLogExporter - patch (v107080)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-03 13:28:12 [main] [INFO]  PatchLogExporter - patch (v107080)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-03 13:28:12 [main] [INFO]  PatchLogExporter - patch (v107080)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-03 13:28:12 [main] [INFO]  PatchLogExporter - patch (v107080)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -111,7 +111,7 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
-        if (Math.abs(yMin) <= functionValueAccuracy) {
+        if (f == null) {
             setResult(yMin, 0);
             return result;
         }
@@ -124,7 +124,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,7 +180,39 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
+                clearResult();
+				this.resultComputed = false;
+				setResult(yMin, 0);
+				int i = 1;
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(max, 0);
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = false;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -234,6 +265,9 @@
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
                 x0 = x1;
+				setResult(x1, i);
+				setResult(x1, i);
+				setResult(x1, i);
                 x1 = x2;
                 x2 = x0;
                 y0 = y1;
2023-07-03 13:28:12 [main] [INFO]  PatchLogExporter - patch (v109316)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-03 13:28:12 [main] [INFO]  PatchLogExporter - patch (v109316)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-03 13:28:12 [main] [INFO]  PatchLogExporter - patch (v109316)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-03 13:28:12 [main] [INFO]  PatchLogExporter - patch (v109316)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -99,8 +99,8 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
-        verifySequence(min, initial, max);
+        resultComputed = true;
+		verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
         double yInitial = f.value(initial);
@@ -111,7 +111,7 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
-        if (Math.abs(yMin) <= functionValueAccuracy) {
+        if (f == null) {
             setResult(yMin, 0);
             return result;
         }
@@ -124,7 +124,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,7 +180,44 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
+                verifyInterval(min, max);
+				verifyInterval(min, max);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(max, 0);
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				{
+					setResult(min, 0);
+					ret = min;
+				}
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = false;
+				this.resultComputed = true;
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -234,6 +270,8 @@
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
                 x0 = x1;
+				setResult(x1, i);
+				setResult(x1, i);
                 x1 = x2;
                 x2 = x0;
                 y0 = y1;
2023-07-03 13:28:13 [main] [INFO]  PatchLogExporter - patch (v126932)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,6 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
2023-07-03 13:28:13 [main] [INFO]  PatchLogExporter - patch (v126932)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-03 13:28:13 [main] [INFO]  PatchLogExporter - patch (v126932)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-03 13:28:13 [main] [INFO]  PatchLogExporter - patch (v126932)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-03 13:28:13 [main] [INFO]  PatchLogExporter - patch (v126932)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +123,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,8 +179,48 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
-                ret = max;
+                setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(max, 0);
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = false;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = false;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				double x;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+                return result;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
@@ -234,6 +272,9 @@
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
                 x0 = x1;
+				setResult(x1, i);
+				resultComputed = true;
+				setResult(x1, i);
                 x1 = x2;
                 x2 = x0;
                 y0 = y1;
2023-07-03 13:28:13 [main] [INFO]  PatchLogExporter - patch (v128027)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,6 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
2023-07-03 13:28:13 [main] [INFO]  PatchLogExporter - patch (v128027)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-03 13:28:13 [main] [INFO]  PatchLogExporter - patch (v128027)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-03 13:28:13 [main] [INFO]  PatchLogExporter - patch (v128027)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-03 13:28:13 [main] [INFO]  PatchLogExporter - patch (v128027)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +123,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,7 +179,50 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
+                setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(max, 0);
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = false;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -234,6 +275,10 @@
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
                 x0 = x1;
+				setResult(x1, i);
+				setResult(x1, i);
+				setResult(x1, i);
+				setResult(x1, i);
                 x1 = x2;
                 x2 = x0;
                 y0 = y1;
2023-07-03 13:28:13 [main] [INFO]  PatchLogExporter - patch (v134405)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,6 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
2023-07-03 13:28:13 [main] [INFO]  PatchLogExporter - patch (v134405)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-03 13:28:13 [main] [INFO]  PatchLogExporter - patch (v134405)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-03 13:28:13 [main] [INFO]  PatchLogExporter - patch (v134405)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-03 13:28:13 [main] [INFO]  PatchLogExporter - patch (v134405)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +123,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,7 +179,57 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
+                {
+					setResult(max, 0);
+					ret = max;
+				}
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(yMin, 0);
+				setResult(max, 0);
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -234,6 +282,14 @@
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
                 x0 = x1;
+				setResult(x1, i);
+				setResult(x1, i);
+				setResult(x1, i);
+				setResult(x1, i);
+				setResult(x1, i);
+				setResult(x1, i);
+				setResult(x1, i);
+				setResult(x1, i);
                 x1 = x2;
                 x2 = x0;
                 y0 = y1;
2023-07-03 13:28:13 [main] [INFO]  KGenProgMain - Summary
Reached generation = 338
Generated variants = 134405
Syntax valid variants = 112499
Build succeeded variants = 67547
Time elapsed = 15 hours 59 seconds
Exit status = SUCCESS
