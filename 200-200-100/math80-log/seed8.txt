2023-06-30 18:08:23 [main] [WARN]  Configuration$Builder - The directory where kGenProg is running is different from the root directory of the given target project.
2023-06-30 18:08:23 [main] [WARN]  Configuration$Builder - If the target project includes test cases with file I/O, such test cases won't run correctly.
2023-06-30 18:08:23 [main] [WARN]  Configuration$Builder - We recommend you running kGenProg with the root directory of the target project as the current directory.
2023-06-30 18:08:23 [main] [INFO]  KGenProgMain - 
==================== kGenProg Configuration ====================
configPath = /Users/fse/Downloads/kGenProg/example/math80/kgenprog-80.toml (set by command line)
rootDir = /Users/fse/Downloads/kGenProg/example/math80 (set in config file)
productPaths = [/Users/fse/Downloads/kGenProg/example/math80/src/main] (set in config file)
testPaths = [/Users/fse/Downloads/kGenProg/example/math80/src/test] (set in config file)
classPaths = []
executionTests = [org.apache.commons.math.linear.EigenDecompositionImplTest] (set in config file)
outDir = kgenprog-out
logLevel = INFO (set in config file)
mutationGeneratingCount = 200 (set in config file)
crossoverGeneratingCount = 200 (set in config file)
headcount = 100
maxGeneration = 1000 (set in config file)
timeLimit = PT24H (set in config file)
testTimeLimit = PT3M (set in config file)
requiredSolutionsCount = 100 (set in config file)
randomSeed = 8 (set by command line)
scope = PACKAGE
faultLocalization = Zoltar (set in config file)
mutationType = Simple
crossoverType = Random
firstVariantSelectionStrategy = Random
secondVariantSelectionStrategy = Random
isPatchOutput = true (set in config file)
isHistoryRecord = false
currentDirectory = /Users/fse/Desktop/afterResearch
version = 1.8.2
================================================================
2023-06-30 18:08:37 [main] [INFO]  KGenProgMain - initial failed tests (1/18)
org.apache.commons.math.linear.EigenDecompositionImplTest.testMathpbx02: null

2023-06-30 18:08:37 [main] [INFO]  KGenProgMain - GA started
2023-06-30 18:08:37 [main] [INFO]  KGenProgMain - entered the era of 1st generation.
2023-06-30 18:09:04 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 27 seconds
Variants: generated 200, build-succeeded 31, build-failed 124, syntax-invalid 10, redundant 35
Fitness: max 1(1), min 0.444(1), ave 0.914
Test execution time: sum 12403 ms, max 674 ms, min 273 ms
----------------------------------------------------------------

2023-06-30 18:09:04 [main] [INFO]  KGenProgMain - entered the era of 2nd generation.
2023-06-30 18:15:34 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 minutes 57 seconds
Variants: generated 200, build-succeeded 42, build-failed 141, syntax-invalid 10, redundant 7
Fitness: max 1(1), min 0.833(2), ave 0.937
Test execution time: sum 374323 ms, max 360228 ms, min 241 ms
----------------------------------------------------------------

2023-06-30 18:15:34 [main] [INFO]  KGenProgMain - entered the era of 3rd generation.
2023-06-30 18:58:42 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 50 minutes 5 seconds
Variants: generated 400, build-succeeded 145, build-failed 136, syntax-invalid 17, redundant 102
Fitness: max 1(2), min 0.778(1), ave 0.933
Test execution time: sum 2564101 ms, max 360228 ms, min 232 ms
----------------------------------------------------------------

2023-06-30 18:58:42 [main] [INFO]  KGenProgMain - entered the era of 4th generation.
2023-06-30 18:59:53 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 51 minutes 16 seconds
Variants: generated 400, build-succeeded 145, build-failed 140, syntax-invalid 13, redundant 102
Fitness: max 1(3), min 0.722(1), ave 0.943
Test execution time: sum 44943 ms, max 541 ms, min 222 ms
----------------------------------------------------------------

2023-06-30 18:59:53 [main] [INFO]  KGenProgMain - entered the era of 5th generation.
2023-06-30 19:04:03 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 55 minutes 25 seconds
Variants: generated 400, build-succeeded 151, build-failed 132, syntax-invalid 13, redundant 104
Fitness: max 0.944(148), min 0.444(2), ave 0.935
Test execution time: sum 224494 ms, max 180273 ms, min 227 ms
----------------------------------------------------------------

2023-06-30 19:04:03 [main] [INFO]  KGenProgMain - entered the era of 6th generation.
2023-06-30 19:14:30 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 5 minutes 52 seconds
Variants: generated 400, build-succeeded 176, build-failed 131, syntax-invalid 24, redundant 69
Fitness: max 1(1), min 0.833(3), ave 0.942
Test execution time: sum 594964 ms, max 360153 ms, min 218 ms
----------------------------------------------------------------

2023-06-30 19:14:30 [main] [INFO]  KGenProgMain - entered the era of 7th generation.
2023-06-30 19:24:51 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 16 minutes 13 seconds
Variants: generated 400, build-succeeded 184, build-failed 135, syntax-invalid 17, redundant 64
Fitness: max 1(2), min 0.556(1), ave 0.941
Test execution time: sum 594188 ms, max 360161 ms, min 224 ms
----------------------------------------------------------------

2023-06-30 19:24:51 [main] [INFO]  KGenProgMain - entered the era of 8th generation.
2023-06-30 19:38:18 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 29 minutes 40 seconds
Variants: generated 400, build-succeeded 204, build-failed 129, syntax-invalid 18, redundant 49
Fitness: max 1(2), min 0.5(3), ave 0.937
Test execution time: sum 780583 ms, max 180339 ms, min 227 ms
----------------------------------------------------------------

2023-06-30 19:38:18 [main] [INFO]  KGenProgMain - entered the era of 9th generation.
2023-06-30 19:48:44 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 40 minutes 6 seconds
Variants: generated 400, build-succeeded 201, build-failed 128, syntax-invalid 21, redundant 50
Fitness: max 0.944(199), min 0.833(2), ave 0.943
Test execution time: sum 598256 ms, max 180347 ms, min 222 ms
----------------------------------------------------------------

2023-06-30 19:48:44 [main] [INFO]  KGenProgMain - entered the era of 10th generation.
2023-06-30 19:56:15 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 47 minutes 37 seconds
Variants: generated 400, build-succeeded 203, build-failed 142, syntax-invalid 28, redundant 27
Fitness: max 1(1), min 0.944(202), ave 0.945
Test execution time: sum 420618 ms, max 180253 ms, min 225 ms
----------------------------------------------------------------

2023-06-30 19:56:15 [main] [INFO]  KGenProgMain - entered the era of 11th generation.
2023-06-30 20:12:42 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 4 minutes 4 seconds
Variants: generated 400, build-succeeded 207, build-failed 131, syntax-invalid 31, redundant 31
Fitness: max 1(2), min 0(1), ave 0.93
Test execution time: sum 958477 ms, max 180330 ms, min 71 ms
----------------------------------------------------------------

2023-06-30 20:12:42 [main] [INFO]  KGenProgMain - entered the era of 12th generation.
2023-06-30 20:32:13 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 23 minutes 35 seconds
Variants: generated 400, build-succeeded 209, build-failed 138, syntax-invalid 23, redundant 30
Fitness: max 1(2), min 0.5(1), ave 0.941
Test execution time: sum 1140892 ms, max 180328 ms, min 216 ms
----------------------------------------------------------------

2023-06-30 20:32:13 [main] [INFO]  KGenProgMain - entered the era of 13th generation.
2023-06-30 20:39:55 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 31 minutes 17 seconds
Variants: generated 400, build-succeeded 202, build-failed 137, syntax-invalid 36, redundant 25
Fitness: max 1(2), min 0(1), ave 0.938
Test execution time: sum 428354 ms, max 180321 ms, min 223 ms
----------------------------------------------------------------

2023-06-30 20:39:55 [main] [INFO]  KGenProgMain - entered the era of 14th generation.
2023-06-30 20:44:28 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 35 minutes 50 seconds
Variants: generated 400, build-succeeded 215, build-failed 133, syntax-invalid 20, redundant 32
Fitness: max 1(3), min 0.5(1), ave 0.939
Test execution time: sum 242024 ms, max 180499 ms, min 218 ms
----------------------------------------------------------------

2023-06-30 20:44:28 [main] [INFO]  KGenProgMain - entered the era of 15th generation.
2023-06-30 21:07:01 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 58 minutes 25 seconds
Variants: generated 400, build-succeeded 216, build-failed 139, syntax-invalid 23, redundant 22
Fitness: max 1(1), min 0.5(2), ave 0.936
Test execution time: sum 1322784 ms, max 720147 ms, min 227 ms
----------------------------------------------------------------

2023-06-30 21:07:01 [main] [INFO]  KGenProgMain - entered the era of 16th generation.
2023-06-30 21:26:35 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 17 minutes 59 seconds
Variants: generated 400, build-succeeded 222, build-failed 132, syntax-invalid 27, redundant 19
Fitness: max 0.944(215), min 0.5(2), ave 0.938
Test execution time: sum 1144244 ms, max 180486 ms, min 220 ms
----------------------------------------------------------------

2023-06-30 21:26:35 [main] [INFO]  KGenProgMain - entered the era of 17th generation.
2023-06-30 21:43:02 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 34 minutes 26 seconds
Variants: generated 400, build-succeeded 198, build-failed 143, syntax-invalid 30, redundant 29
Fitness: max 1(2), min 0.611(1), ave 0.942
Test execution time: sum 956487 ms, max 180311 ms, min 223 ms
----------------------------------------------------------------

2023-06-30 21:43:02 [main] [INFO]  KGenProgMain - entered the era of 18th generation.
2023-06-30 21:53:47 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 45 minutes 11 seconds
Variants: generated 400, build-succeeded 222, build-failed 133, syntax-invalid 32, redundant 13
Fitness: max 0.944(218), min 0.556(1), ave 0.94
Test execution time: sum 610583 ms, max 180348 ms, min 226 ms
----------------------------------------------------------------

2023-06-30 21:53:47 [main] [INFO]  KGenProgMain - entered the era of 19th generation.
2023-06-30 21:58:24 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 49 minutes 48 seconds
Variants: generated 400, build-succeeded 204, build-failed 144, syntax-invalid 40, redundant 12
Fitness: max 1(2), min 0.833(1), ave 0.944
Test execution time: sum 241421 ms, max 180262 ms, min 223 ms
----------------------------------------------------------------

2023-06-30 21:58:24 [main] [INFO]  KGenProgMain - entered the era of 20th generation.
2023-06-30 22:09:01 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 25 seconds
Variants: generated 400, build-succeeded 220, build-failed 127, syntax-invalid 42, redundant 11
Fitness: max 1(2), min 0.5(1), ave 0.942
Test execution time: sum 603051 ms, max 180435 ms, min 224 ms
----------------------------------------------------------------

2023-06-30 22:09:01 [main] [INFO]  KGenProgMain - entered the era of 21st generation.
2023-06-30 22:19:44 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 11 minutes 8 seconds
Variants: generated 400, build-succeeded 210, build-failed 131, syntax-invalid 50, redundant 9
Fitness: max 1(1), min 0.5(1), ave 0.94
Test execution time: sum 602887 ms, max 180320 ms, min 225 ms
----------------------------------------------------------------

2023-06-30 22:19:44 [main] [INFO]  KGenProgMain - entered the era of 22nd generation.
2023-06-30 22:39:21 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 30 minutes 45 seconds
Variants: generated 400, build-succeeded 211, build-failed 130, syntax-invalid 48, redundant 11
Fitness: max 1(3), min 0.833(2), ave 0.944
Test execution time: sum 1141518 ms, max 180354 ms, min 227 ms
----------------------------------------------------------------

2023-06-30 22:39:21 [main] [INFO]  KGenProgMain - entered the era of 23rd generation.
2023-06-30 23:26:10 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 17 minutes 32 seconds
Variants: generated 400, build-succeeded 216, build-failed 124, syntax-invalid 52, redundant 8
Fitness: max 1(1), min 0.444(1), ave 0.937
Test execution time: sum 2768300 ms, max 1440179 ms, min 226 ms
----------------------------------------------------------------

2023-06-30 23:26:10 [main] [INFO]  KGenProgMain - entered the era of 24th generation.
2023-06-30 23:57:51 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 49 minutes 12 seconds
Variants: generated 400, build-succeeded 218, build-failed 130, syntax-invalid 45, redundant 7
Fitness: max 1(1), min 0.056(1), ave 0.939
Test execution time: sum 1863707 ms, max 180349 ms, min 231 ms
----------------------------------------------------------------

2023-06-30 23:57:51 [main] [INFO]  KGenProgMain - entered the era of 25th generation.
2023-07-01 00:23:25 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 hours 14 minutes 47 seconds
Variants: generated 400, build-succeeded 202, build-failed 135, syntax-invalid 54, redundant 9
Fitness: max 1(2), min 0.5(2), ave 0.937
Test execution time: sum 1499621 ms, max 180362 ms, min 229 ms
----------------------------------------------------------------

2023-07-01 00:23:25 [main] [INFO]  KGenProgMain - entered the era of 26th generation.
2023-07-01 01:01:11 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 hours 52 minutes 32 seconds
Variants: generated 400, build-succeeded 220, build-failed 135, syntax-invalid 35, redundant 10
Fitness: max 1(5), min 0.5(1), ave 0.944
Test execution time: sum 2226775 ms, max 180358 ms, min 225 ms
----------------------------------------------------------------

2023-07-01 01:01:11 [main] [INFO]  KGenProgMain - entered the era of 27th generation.
2023-07-01 01:54:02 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 hours 45 minutes 23 seconds
Variants: generated 400, build-succeeded 222, build-failed 121, syntax-invalid 51, redundant 6
Fitness: max 1(2), min 0.444(1), ave 0.94
Test execution time: sum 3127656 ms, max 180502 ms, min 220 ms
----------------------------------------------------------------

2023-07-01 01:54:02 [main] [INFO]  KGenProgMain - entered the era of 28th generation.
2023-07-01 02:37:51 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 hours 29 minutes 12 seconds
Variants: generated 400, build-succeeded 215, build-failed 138, syntax-invalid 38, redundant 9
Fitness: max 1(1), min 0.167(1), ave 0.938
Test execution time: sum 2587024 ms, max 180517 ms, min 231 ms
----------------------------------------------------------------

2023-07-01 02:37:51 [main] [INFO]  KGenProgMain - entered the era of 29th generation.
2023-07-01 03:48:28 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 hours 39 minutes 49 seconds
Variants: generated 400, build-succeeded 201, build-failed 145, syntax-invalid 46, redundant 8
Fitness: max 1(2), min 0.5(1), ave 0.941
Test execution time: sum 4199784 ms, max 180443 ms, min 227 ms
----------------------------------------------------------------

2023-07-01 03:48:28 [main] [INFO]  KGenProgMain - entered the era of 30th generation.
2023-07-01 04:41:07 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 10 hours 32 minutes 28 seconds
Variants: generated 400, build-succeeded 207, build-failed 150, syntax-invalid 35, redundant 8
Fitness: max 1(2), min 0.833(1), ave 0.944
Test execution time: sum 3120451 ms, max 180396 ms, min 223 ms
----------------------------------------------------------------

2023-07-01 04:41:07 [main] [INFO]  KGenProgMain - entered the era of 31st generation.
2023-07-01 05:03:52 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 10 hours 55 minutes 13 seconds
Variants: generated 400, build-succeeded 205, build-failed 143, syntax-invalid 46, redundant 6
Fitness: max 1(2), min 0.444(1), ave 0.933
Test execution time: sum 1325180 ms, max 180417 ms, min 233 ms
----------------------------------------------------------------

2023-07-01 05:03:52 [main] [INFO]  KGenProgMain - entered the era of 32nd generation.
2023-07-01 05:38:30 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 hours 29 minutes 51 seconds
Variants: generated 400, build-succeeded 203, build-failed 138, syntax-invalid 51, redundant 8
Fitness: max 1(2), min 0.5(1), ave 0.94
Test execution time: sum 2041160 ms, max 180516 ms, min 227 ms
----------------------------------------------------------------

2023-07-01 05:38:30 [main] [INFO]  KGenProgMain - entered the era of 33rd generation.
2023-07-01 06:28:15 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 hours 19 minutes 36 seconds
Variants: generated 400, build-succeeded 210, build-failed 131, syntax-invalid 50, redundant 9
Fitness: max 1(4), min 0.833(2), ave 0.944
Test execution time: sum 2944828 ms, max 180480 ms, min 226 ms
----------------------------------------------------------------

2023-07-01 06:28:15 [main] [INFO]  KGenProgMain - entered the era of 34th generation.
2023-07-01 07:54:04 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 13 hours 45 minutes 25 seconds
Variants: generated 400, build-succeeded 207, build-failed 131, syntax-invalid 54, redundant 8
Fitness: max 1(1), min 0.444(1), ave 0.938
Test execution time: sum 5105804 ms, max 1800191 ms, min 227 ms
----------------------------------------------------------------

2023-07-01 07:54:04 [main] [INFO]  KGenProgMain - entered the era of 35th generation.
2023-07-01 08:52:45 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 14 hours 44 minutes 6 seconds
Variants: generated 400, build-succeeded 190, build-failed 144, syntax-invalid 61, redundant 5
Fitness: max 1(2), min 0.5(1), ave 0.939
Test execution time: sum 3478986 ms, max 180429 ms, min 225 ms
----------------------------------------------------------------

2023-07-01 08:52:45 [main] [INFO]  KGenProgMain - entered the era of 36th generation.
2023-07-01 10:06:26 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 15 hours 57 minutes 47 seconds
Variants: generated 400, build-succeeded 197, build-failed 137, syntax-invalid 60, redundant 6
Fitness: max 1(1), min 0(1), ave 0.934
Test execution time: sum 4380482 ms, max 1800191 ms, min 226 ms
----------------------------------------------------------------

2023-07-01 10:06:26 [main] [INFO]  KGenProgMain - entered the era of 37th generation.
2023-07-01 10:32:12 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 16 hours 23 minutes 32 seconds
Variants: generated 400, build-succeeded 183, build-failed 145, syntax-invalid 67, redundant 5
Fitness: max 1(1), min 0.444(1), ave 0.939
Test execution time: sum 1498785 ms, max 180465 ms, min 237 ms
----------------------------------------------------------------

2023-07-01 10:32:12 [main] [INFO]  KGenProgMain - entered the era of 38th generation.
2023-07-01 11:16:04 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 17 hours 7 minutes 25 seconds
Variants: generated 400, build-succeeded 194, build-failed 141, syntax-invalid 56, redundant 9
Fitness: max 1(1), min 0.444(1), ave 0.937
Test execution time: sum 2586733 ms, max 180487 ms, min 228 ms
----------------------------------------------------------------

2023-07-01 11:16:04 [main] [INFO]  KGenProgMain - entered the era of 39th generation.
2023-07-01 11:59:55 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 17 hours 51 minutes 16 seconds
Variants: generated 400, build-succeeded 202, build-failed 148, syntax-invalid 46, redundant 4
Fitness: max 1(1), min 0.444(1), ave 0.938
Test execution time: sum 2585464 ms, max 180433 ms, min 228 ms
----------------------------------------------------------------

2023-07-01 11:59:55 [main] [INFO]  KGenProgMain - entered the era of 40th generation.
2023-07-01 12:28:53 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 18 hours 20 minutes 13 seconds
Variants: generated 400, build-succeeded 198, build-failed 143, syntax-invalid 54, redundant 5
Fitness: max 1(3), min 0.5(2), ave 0.941
Test execution time: sum 1687943 ms, max 180413 ms, min 235 ms
----------------------------------------------------------------

2023-07-01 12:28:53 [main] [INFO]  KGenProgMain - entered the era of 41st generation.
2023-07-01 13:00:53 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 18 hours 52 minutes 13 seconds
Variants: generated 400, build-succeeded 197, build-failed 129, syntax-invalid 66, redundant 8
Fitness: max 1(2), min 0.833(2), ave 0.944
Test execution time: sum 1865527 ms, max 180431 ms, min 234 ms
----------------------------------------------------------------

2023-07-01 13:00:53 [main] [INFO]  KGenProgMain - entered the era of 42nd generation.
2023-07-01 13:35:46 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 19 hours 27 minutes 6 seconds
Variants: generated 400, build-succeeded 201, build-failed 129, syntax-invalid 63, redundant 7
Fitness: max 1(1), min 0.444(1), ave 0.941
Test execution time: sum 2043834 ms, max 180496 ms, min 239 ms
----------------------------------------------------------------

2023-07-01 13:35:46 [main] [INFO]  KGenProgMain - entered the era of 43rd generation.
2023-07-01 14:31:31 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 20 hours 22 minutes 51 seconds
Variants: generated 400, build-succeeded 191, build-failed 143, syntax-invalid 55, redundant 11
Fitness: max 1(1), min 0.722(1), ave 0.943
Test execution time: sum 3299475 ms, max 180400 ms, min 221 ms
----------------------------------------------------------------

2023-07-01 14:31:31 [main] [INFO]  KGenProgMain - entered the era of 44th generation.
2023-07-01 15:03:15 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 20 hours 54 minutes 35 seconds
Variants: generated 400, build-succeeded 186, build-failed 143, syntax-invalid 64, redundant 7
Fitness: max 1(1), min 0(1), ave 0.932
Test execution time: sum 1858503 ms, max 540190 ms, min 146 ms
----------------------------------------------------------------

2023-07-01 15:03:15 [main] [INFO]  KGenProgMain - entered the era of 45th generation.
2023-07-01 15:28:59 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 21 hours 20 minutes 19 seconds
Variants: generated 400, build-succeeded 194, build-failed 139, syntax-invalid 62, redundant 5
Fitness: max 0.944(185), min 0.5(2), ave 0.936
Test execution time: sum 1500014 ms, max 180346 ms, min 225 ms
----------------------------------------------------------------

2023-07-01 15:28:59 [main] [INFO]  KGenProgMain - entered the era of 46th generation.
2023-07-01 16:03:42 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 21 hours 55 minutes 2 seconds
Variants: generated 400, build-succeeded 198, build-failed 139, syntax-invalid 55, redundant 8
Fitness: max 1(3), min 0.5(1), ave 0.941
Test execution time: sum 2039668 ms, max 180358 ms, min 226 ms
----------------------------------------------------------------

2023-07-01 16:03:42 [main] [INFO]  KGenProgMain - entered the era of 47th generation.
2023-07-01 16:26:31 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 22 hours 17 minutes 51 seconds
Variants: generated 400, build-succeeded 204, build-failed 142, syntax-invalid 48, redundant 6
Fitness: max 1(2), min 0.444(1), ave 0.935
Test execution time: sum 1322791 ms, max 180375 ms, min 228 ms
----------------------------------------------------------------

2023-07-01 16:26:31 [main] [INFO]  KGenProgMain - entered the era of 48th generation.
2023-07-01 17:01:21 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 22 hours 52 minutes 41 seconds
Variants: generated 400, build-succeeded 200, build-failed 129, syntax-invalid 65, redundant 6
Fitness: max 1(1), min 0.5(2), ave 0.938
Test execution time: sum 2042905 ms, max 180347 ms, min 239 ms
----------------------------------------------------------------

2023-07-01 17:01:21 [main] [INFO]  KGenProgMain - entered the era of 49th generation.
2023-07-01 17:54:09 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 23 hours 45 minutes 29 seconds
Variants: generated 400, build-succeeded 195, build-failed 123, syntax-invalid 73, redundant 9
Fitness: max 1(3), min 0.167(1), ave 0.938
Test execution time: sum 3121876 ms, max 360138 ms, min 229 ms
----------------------------------------------------------------

2023-07-01 17:54:09 [main] [INFO]  KGenProgMain - entered the era of 50th generation.
2023-07-01 18:32:06 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 24 hours 23 minutes 26 seconds
Variants: generated 400, build-succeeded 204, build-failed 127, syntax-invalid 62, redundant 7
Fitness: max 1(6), min 0.444(1), ave 0.94
Test execution time: sum 2227827 ms, max 180450 ms, min 226 ms
----------------------------------------------------------------

2023-07-01 18:32:06 [main] [INFO]  KGenProgMain - GA stopped
2023-07-01 18:32:11 [main] [INFO]  PatchLogExporter - patch (v64)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -1136,7 +1136,6 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
                     work[j - k] = tmp;
                 }
                 j -= 4;
2023-07-01 18:32:11 [main] [INFO]  PatchLogExporter - patch (v64)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-01 18:32:11 [main] [INFO]  PatchLogExporter - patch (v64)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-01 18:32:11 [main] [INFO]  PatchLogExporter - patch (v64)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-01 18:32:11 [main] [INFO]  PatchLogExporter - patch (v364)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -154,7 +154,7 @@
      */
     public ArrayRealVector(RealVector v) {
         data = new double[v.getDimension()];
-        for (int i = 0; i < data.length; ++i) {
+        for (int i = 0;; ++i) {
             data[i] = v.getEntry(i);
         }
     }
2023-07-01 18:32:11 [main] [INFO]  PatchLogExporter - patch (v364)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -1136,7 +1136,6 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
                     work[j - k] = tmp;
                 }
                 j -= 4;
2023-07-01 18:32:11 [main] [INFO]  PatchLogExporter - patch (v364)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-01 18:32:11 [main] [INFO]  PatchLogExporter - patch (v364)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-01 18:32:11 [main] [INFO]  PatchLogExporter - patch (v364)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-01 18:32:11 [main] [INFO]  PatchLogExporter - patch (v436)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -954,7 +954,6 @@
                 final int j = i - 2 * pingPong - 1;
                 work[j] = d + work[i];
                 if (work[i] <= TOLERANCE_2 * d) {
-                    work[i]     = -0.0;
                     work[j]     = d;
                     work[j + 2] = 0.0;
                     d = work[i + 2];
@@ -1133,14 +1132,8 @@
         if (1.5 * work[pingPong] < work[4 * (n - 1) + pingPong]) {
             // flip array
             int j = 4 * n - 1;
-            for (int i = 0; i < j; i += 4) {
-                for (int k = 0; k < 4; k += step) {
-                    final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
-                    work[j - k] = tmp;
-                }
-                j -= 4;
-            }
+            for (int i = 0; i < j; i += 4)
+				return false;
             return true;
         }
         return false;
2023-07-01 18:32:11 [main] [INFO]  PatchLogExporter - patch (v436)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-01 18:32:11 [main] [INFO]  PatchLogExporter - patch (v436)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-01 18:32:11 [main] [INFO]  PatchLogExporter - patch (v436)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-01 18:32:11 [main] [INFO]  PatchLogExporter - patch (v525)
--- org.apache.commons.math.linear.Array2DRowRealMatrix
+++ org.apache.commons.math.linear.Array2DRowRealMatrix
@@ -238,7 +238,6 @@
             final double[] mRow       = m.data[row];
             final double[] outDataRow = outData[row];
             for (int col = 0; col < columnCount; col++) {
-                outDataRow[col] = dataRow[col] - mRow[col];
             }
         }
 
2023-07-01 18:32:11 [main] [INFO]  PatchLogExporter - patch (v525)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -1214,8 +1214,6 @@
             }
 
         }
-        upper = Math.min(upper, right + 100 * MathUtils.EPSILON * Math.abs(right));
-
         return new double[] { lower, upper };
 
     }
2023-07-01 18:32:11 [main] [INFO]  PatchLogExporter - patch (v525)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-01 18:32:11 [main] [INFO]  PatchLogExporter - patch (v525)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-01 18:32:11 [main] [INFO]  PatchLogExporter - patch (v525)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-01 18:32:11 [main] [INFO]  PatchLogExporter - patch (v805)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -1136,8 +1136,6 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
-                    work[j - k] = tmp;
                 }
                 j -= 4;
             }
2023-07-01 18:32:11 [main] [INFO]  PatchLogExporter - patch (v805)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-01 18:32:11 [main] [INFO]  PatchLogExporter - patch (v805)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-01 18:32:11 [main] [INFO]  PatchLogExporter - patch (v805)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-01 18:32:11 [main] [INFO]  PatchLogExporter - patch (v823)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -869,7 +869,6 @@
             for (int i = 4 * (n0 - 2); i >= 0; i -= 4) {
                 if (work[i + 2] <= 0) {
                     i0 = 1 + i / 4;
-                    break;
                 }
                 if (diagMin >= 4 * offDiagMax) {
                     diagMin    = Math.min(diagMin, work[i + 4]);
@@ -941,7 +940,6 @@
             double d = work[4 * (n - 1) + pingPong];
             for (int i = 4 * (n - 2) + pingPong; i >= 0; i -= 4) {
                 if (work[i + 2] <= TOLERANCE_2 * d) {
-                    work[i + 2] = -0.0;
                     d = work[i];
                 } else {
                     d *= work[i] / (d + work[i + 2]);
@@ -1136,7 +1134,6 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
                     work[j - k] = tmp;
                 }
                 j -= 4;
2023-07-01 18:32:11 [main] [INFO]  PatchLogExporter - patch (v823)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-01 18:32:11 [main] [INFO]  PatchLogExporter - patch (v823)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-01 18:32:11 [main] [INFO]  PatchLogExporter - patch (v823)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-01 18:32:11 [main] [INFO]  PatchLogExporter - patch (v860)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -869,7 +869,7 @@
             for (int i = 4 * (n0 - 2); i >= 0; i -= 4) {
                 if (work[i + 2] <= 0) {
                     i0 = 1 + i / 4;
-                    break;
+                    double invIJ = 0;
                 }
                 if (diagMin >= 4 * offDiagMax) {
                     diagMin    = Math.min(diagMin, work[i + 4]);
@@ -1136,7 +1136,6 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
                     work[j - k] = tmp;
                 }
                 j -= 4;
@@ -1381,7 +1380,6 @@
         int j4p2 = j4 + 2 * pingPong - 1;
         work[j4 - 2] = dN2 + work[j4p2];
         if (work[j4 - 2] == 0.0) {
-            work[j4] = 0.0;
             dN1  = work[j4p2 + 2];
             dMin = dN1;
             eMin = 0.0;
2023-07-01 18:32:11 [main] [INFO]  PatchLogExporter - patch (v860)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-01 18:32:11 [main] [INFO]  PatchLogExporter - patch (v860)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-01 18:32:11 [main] [INFO]  PatchLogExporter - patch (v860)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-01 18:32:11 [main] [INFO]  PatchLogExporter - patch (v1680)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -941,7 +941,6 @@
             double d = work[4 * (n - 1) + pingPong];
             for (int i = 4 * (n - 2) + pingPong; i >= 0; i -= 4) {
                 if (work[i + 2] <= TOLERANCE_2 * d) {
-                    work[i + 2] = -0.0;
                     d = work[i];
                 } else {
                     d *= work[i] / (d + work[i + 2]);
@@ -1136,7 +1135,6 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
                     work[j - k] = tmp;
                 }
                 j -= 4;
@@ -1383,7 +1381,6 @@
         if (work[j4 - 2] == 0.0) {
             work[j4] = 0.0;
             dN1  = work[j4p2 + 2];
-            dMin = dN1;
             eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
@@ -1412,7 +1409,8 @@
             dN = dN1 * tmp;
         } else {
             work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);
-            dN = work[j4p2 + 2] * (dN1 / work[j4 - 2]);
+            boolean infiniteFound = false;
+			dN = work[j4p2 + 2] * (dN1 / work[j4 - 2]);
         }
         dMin = Math.min(dMin, dN);
 
2023-07-01 18:32:11 [main] [INFO]  PatchLogExporter - patch (v1680)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-01 18:32:11 [main] [INFO]  PatchLogExporter - patch (v1680)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-01 18:32:11 [main] [INFO]  PatchLogExporter - patch (v1680)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-01 18:32:11 [main] [INFO]  PatchLogExporter - patch (v2021)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -1060,7 +1060,6 @@
                     Math.min(work[l - 2 * pingPong],
                              Math.min(work[6 + pingPong], work[6 + pingPong]));
                 qMax  = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));
-                dMin  = -0.0;
             }
         }
 
@@ -1136,7 +1135,6 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
                     work[j - k] = tmp;
                 }
                 j -= 4;
@@ -1403,7 +1401,6 @@
         if (work[j4 - 2] == 0.0) {
             work[j4] = 0.0;
             dN   = work[j4p2 + 2];
-            dMin = dN;
             eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
2023-07-01 18:32:11 [main] [INFO]  PatchLogExporter - patch (v2021)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-01 18:32:11 [main] [INFO]  PatchLogExporter - patch (v2021)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-01 18:32:11 [main] [INFO]  PatchLogExporter - patch (v2021)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-01 18:32:11 [main] [INFO]  PatchLogExporter - patch (v2148)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -1059,7 +1059,6 @@
                 work[l - 2 * pingPong] =
                     Math.min(work[l - 2 * pingPong],
                              Math.min(work[6 + pingPong], work[6 + pingPong]));
-                qMax  = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));
                 dMin  = -0.0;
             }
         }
@@ -1136,7 +1135,6 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
                     work[j - k] = tmp;
                 }
                 j -= 4;
@@ -1381,7 +1379,6 @@
         int j4p2 = j4 + 2 * pingPong - 1;
         work[j4 - 2] = dN2 + work[j4p2];
         if (work[j4 - 2] == 0.0) {
-            work[j4] = 0.0;
             dN1  = work[j4p2 + 2];
             dMin = dN1;
             eMin = 0.0;
2023-07-01 18:32:11 [main] [INFO]  PatchLogExporter - patch (v2148)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-01 18:32:11 [main] [INFO]  PatchLogExporter - patch (v2148)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-01 18:32:11 [main] [INFO]  PatchLogExporter - patch (v2148)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-01 18:32:11 [main] [INFO]  PatchLogExporter - patch (v2571)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -941,8 +941,8 @@
             double d = work[4 * (n - 1) + pingPong];
             for (int i = 4 * (n - 2) + pingPong; i >= 0; i -= 4) {
                 if (work[i + 2] <= TOLERANCE_2 * d) {
-                    work[i + 2] = -0.0;
                     d = work[i];
+					tType -= 12;
                 } else {
                     d *= work[i] / (d + work[i + 2]);
                 }
@@ -1136,7 +1136,6 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
                     work[j - k] = tmp;
                 }
                 j -= 4;
@@ -1382,7 +1381,6 @@
         work[j4 - 2] = dN2 + work[j4p2];
         if (work[j4 - 2] == 0.0) {
             work[j4] = 0.0;
-            dN1  = work[j4p2 + 2];
             dMin = dN1;
             eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
@@ -1412,7 +1410,8 @@
             dN = dN1 * tmp;
         } else {
             work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);
-            dN = work[j4p2 + 2] * (dN1 / work[j4 - 2]);
+            boolean infiniteFound = false;
+			dN = work[j4p2 + 2] * (dN1 / work[j4 - 2]);
         }
         dMin = Math.min(dMin, dN);
 
2023-07-01 18:32:11 [main] [INFO]  PatchLogExporter - patch (v2571)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-01 18:32:11 [main] [INFO]  PatchLogExporter - patch (v2571)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-01 18:32:11 [main] [INFO]  PatchLogExporter - patch (v2571)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-01 18:32:11 [main] [INFO]  PatchLogExporter - patch (v2573)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -154,7 +154,7 @@
      */
     public ArrayRealVector(RealVector v) {
         data = new double[v.getDimension()];
-        for (int i = 0; i < data.length; ++i) {
+        for (int i = 0;; ++i) {
             data[i] = v.getEntry(i);
         }
     }
2023-07-01 18:32:11 [main] [INFO]  PatchLogExporter - patch (v2573)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -1136,7 +1136,6 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
                     work[j - k] = tmp;
                 }
                 j -= 4;
@@ -1381,7 +1380,6 @@
         int j4p2 = j4 + 2 * pingPong - 1;
         work[j4 - 2] = dN2 + work[j4p2];
         if (work[j4 - 2] == 0.0) {
-            work[j4] = 0.0;
             dN1  = work[j4p2 + 2];
             dMin = dN1;
             eMin = 0.0;
@@ -1391,7 +1389,6 @@
             work[j4] = work[j4p2] * tmp;
             dN1 = dN2 * tmp;
         } else {
-            work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);
             dN1 = work[j4p2 + 2] * (dN2 / work[j4 - 2]);
         }
         dMin = Math.min(dMin, dN1);
2023-07-01 18:32:11 [main] [INFO]  PatchLogExporter - patch (v2573)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-01 18:32:11 [main] [INFO]  PatchLogExporter - patch (v2573)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-01 18:32:11 [main] [INFO]  PatchLogExporter - patch (v2573)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-01 18:32:11 [main] [INFO]  PatchLogExporter - patch (v3362)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -243,7 +243,6 @@
     /** {@inheritDoc} */
     public RealVector add(double[] v)
     throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] + v[i];
2023-07-01 18:32:11 [main] [INFO]  PatchLogExporter - patch (v3362)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -942,7 +942,6 @@
             for (int i = 4 * (n - 2) + pingPong; i >= 0; i -= 4) {
                 if (work[i + 2] <= TOLERANCE_2 * d) {
                     work[i + 2] = -0.0;
-                    d = work[i];
                 } else {
                     d *= work[i] / (d + work[i + 2]);
                 }
@@ -1136,10 +1135,8 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
                     work[j - k] = tmp;
                 }
-                j -= 4;
             }
             return true;
         }
2023-07-01 18:32:11 [main] [INFO]  PatchLogExporter - patch (v3362)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-01 18:32:11 [main] [INFO]  PatchLogExporter - patch (v3362)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-01 18:32:11 [main] [INFO]  PatchLogExporter - patch (v3362)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-01 18:32:11 [main] [INFO]  PatchLogExporter - patch (v3636)
--- org.apache.commons.math.linear.Array2DRowRealMatrix
+++ org.apache.commons.math.linear.Array2DRowRealMatrix
@@ -535,7 +535,7 @@
         final int columns = getColumnDimension();
         visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);
         for (int j = 0; j < columns; ++j) {
-            for (int i = 0; i < rows; ++i) {
+            for (int i = 0;; ++i) {
                 final double[] rowI = data[i];
                 rowI[j] = visitor.visit(i, j, rowI[j]);
             }
2023-07-01 18:32:11 [main] [INFO]  PatchLogExporter - patch (v3636)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -956,7 +956,6 @@
                 if (work[i] <= TOLERANCE_2 * d) {
                     work[i]     = -0.0;
                     work[j]     = d;
-                    work[j + 2] = 0.0;
                     d = work[i + 2];
                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&
                            (MathUtils.SAFE_MIN * work[j] < work[i + 2])) {
@@ -1136,12 +1135,10 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
                     work[j - k] = tmp;
                 }
                 j -= 4;
             }
-            return true;
         }
         return false;
     }
2023-07-01 18:32:11 [main] [INFO]  PatchLogExporter - patch (v3636)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-01 18:32:11 [main] [INFO]  PatchLogExporter - patch (v3636)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-01 18:32:11 [main] [INFO]  PatchLogExporter - patch (v3636)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-01 18:32:11 [main] [INFO]  PatchLogExporter - patch (v3742)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -154,7 +154,7 @@
      */
     public ArrayRealVector(RealVector v) {
         data = new double[v.getDimension()];
-        for (int i = 0; i < data.length; ++i) {
+        for (int i = 0;; ++i) {
             data[i] = v.getEntry(i);
         }
     }
2023-07-01 18:32:11 [main] [INFO]  PatchLogExporter - patch (v3742)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -1136,7 +1136,6 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
                     work[j - k] = tmp;
                 }
                 j -= 4;
@@ -1384,7 +1383,7 @@
             work[j4] = 0.0;
             dN1  = work[j4p2 + 2];
             dMin = dN1;
-            eMin = 0.0;
+            throw new NullPointerException();
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
             final double tmp = work[j4p2 + 2] / work[j4 - 2];
@@ -1412,7 +1411,8 @@
             dN = dN1 * tmp;
         } else {
             work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);
-            dN = work[j4p2 + 2] * (dN1 / work[j4 - 2]);
+            boolean infiniteFound = false;
+			dN = work[j4p2 + 2] * (dN1 / work[j4 - 2]);
         }
         dMin = Math.min(dMin, dN);
 
2023-07-01 18:32:11 [main] [INFO]  PatchLogExporter - patch (v3742)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-01 18:32:11 [main] [INFO]  PatchLogExporter - patch (v3742)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-01 18:32:11 [main] [INFO]  PatchLogExporter - patch (v3742)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-01 18:32:12 [main] [INFO]  PatchLogExporter - patch (v4092)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -1052,7 +1052,6 @@
         // step 2: flip array if needed
         if ((dMin <= 0) || (deflatedEnd < end)) {
             if (flipIfWarranted(deflatedEnd, 1)) {
-                dMin2 = Math.min(dMin2, work[l - 1]);
                 work[l - 1] =
                     Math.min(work[l - 1],
                              Math.min(work[3 + pingPong], work[7 + pingPong]));
@@ -1086,9 +1085,7 @@
                            (dMin1 > 0.0) &&
                            (work[4 * deflatedEnd - 5 - pingPong] < TOLERANCE * (sigma + dN1)) &&
                            (Math.abs(dN) < TOLERANCE * sigma)) {
-                   // convergence hidden by negative DN.
-                    work[4 * deflatedEnd - 3 - pingPong] = 0.0;
-                    dMin = 0.0;
+                   dMin = 0.0;
                     updateSigma(tau);
                     return deflatedEnd;
                 } else if (dMin < 0.0) {
@@ -1136,7 +1133,6 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
                     work[j - k] = tmp;
                 }
                 j -= 4;
@@ -1412,7 +1408,8 @@
             dN = dN1 * tmp;
         } else {
             work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);
-            dN = work[j4p2 + 2] * (dN1 / work[j4 - 2]);
+            boolean infiniteFound = false;
+			dN = work[j4p2 + 2] * (dN1 / work[j4 - 2]);
         }
         dMin = Math.min(dMin, dN);
 
2023-07-01 18:32:12 [main] [INFO]  PatchLogExporter - patch (v4092)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-01 18:32:12 [main] [INFO]  PatchLogExporter - patch (v4092)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-01 18:32:12 [main] [INFO]  PatchLogExporter - patch (v4092)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-01 18:32:12 [main] [INFO]  PatchLogExporter - patch (v4147)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -243,7 +243,6 @@
     /** {@inheritDoc} */
     public RealVector add(double[] v)
     throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] + v[i];
2023-07-01 18:32:12 [main] [INFO]  PatchLogExporter - patch (v4147)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -942,7 +942,6 @@
             for (int i = 4 * (n - 2) + pingPong; i >= 0; i -= 4) {
                 if (work[i + 2] <= TOLERANCE_2 * d) {
                     work[i + 2] = -0.0;
-                    d = work[i];
                 } else {
                     d *= work[i] / (d + work[i + 2]);
                 }
@@ -1136,7 +1135,6 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
                     work[j - k] = tmp;
                 }
                 j -= 4;
@@ -1347,7 +1345,6 @@
                     d *= tmp;
                 } else {
                     work[j4] = work[j4 + 1] * (work[j4 - 1] / work[j4 - 2]);
-                    d *= work[j4 + 1] / work[j4 - 2];
                 }
                 dMin = Math.min(dMin, d);
                 eMin = Math.min(eMin, work[j4]);
@@ -1381,7 +1378,6 @@
         int j4p2 = j4 + 2 * pingPong - 1;
         work[j4 - 2] = dN2 + work[j4p2];
         if (work[j4 - 2] == 0.0) {
-            work[j4] = 0.0;
             dN1  = work[j4p2 + 2];
             dMin = dN1;
             eMin = 0.0;
2023-07-01 18:32:12 [main] [INFO]  PatchLogExporter - patch (v4147)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-01 18:32:12 [main] [INFO]  PatchLogExporter - patch (v4147)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-01 18:32:12 [main] [INFO]  PatchLogExporter - patch (v4147)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-01 18:32:12 [main] [INFO]  PatchLogExporter - patch (v4542)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -869,7 +869,6 @@
             for (int i = 4 * (n0 - 2); i >= 0; i -= 4) {
                 if (work[i + 2] <= 0) {
                     i0 = 1 + i / 4;
-                    break;
                 }
                 if (diagMin >= 4 * offDiagMax) {
                     diagMin    = Math.min(diagMin, work[i + 4]);
@@ -1056,9 +1055,6 @@
                 work[l - 1] =
                     Math.min(work[l - 1],
                              Math.min(work[3 + pingPong], work[7 + pingPong]));
-                work[l - 2 * pingPong] =
-                    Math.min(work[l - 2 * pingPong],
-                             Math.min(work[6 + pingPong], work[6 + pingPong]));
                 qMax  = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));
                 dMin  = -0.0;
             }
@@ -1136,7 +1132,6 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
                     work[j - k] = tmp;
                 }
                 j -= 4;
@@ -1337,7 +1332,6 @@
                 work[j4 - 2] = d + work[j4 - 1];
                 if (work[j4 - 2] == 0.0) {
                     work[j4] = 0.0;
-                    d = work[j4 + 1];
                     dMin = d;
                     eMin = 0.0;
                 } else if ((MathUtils.SAFE_MIN * work[j4 + 1] < work[j4 - 2]) &&
@@ -1384,7 +1378,6 @@
             work[j4] = 0.0;
             dN1  = work[j4p2 + 2];
             dMin = dN1;
-            eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
             final double tmp = work[j4p2 + 2] / work[j4 - 2];
@@ -1402,7 +1395,6 @@
         work[j4 - 2] = dN1 + work[j4p2];
         if (work[j4 - 2] == 0.0) {
             work[j4] = 0.0;
-            dN   = work[j4p2 + 2];
             dMin = dN;
             eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
2023-07-01 18:32:12 [main] [INFO]  PatchLogExporter - patch (v4542)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-01 18:32:12 [main] [INFO]  PatchLogExporter - patch (v4542)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-01 18:32:12 [main] [INFO]  PatchLogExporter - patch (v4542)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-01 18:32:12 [main] [INFO]  PatchLogExporter - patch (v4724)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -954,7 +954,6 @@
                 final int j = i - 2 * pingPong - 1;
                 work[j] = d + work[i];
                 if (work[i] <= TOLERANCE_2 * d) {
-                    work[i]     = -0.0;
                     work[j]     = d;
                     work[j + 2] = 0.0;
                     d = work[i + 2];
@@ -1136,7 +1135,6 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
                     work[j - k] = tmp;
                 }
                 j -= 4;
@@ -1382,9 +1380,9 @@
         work[j4 - 2] = dN2 + work[j4p2];
         if (work[j4 - 2] == 0.0) {
             work[j4] = 0.0;
-            dN1  = work[j4p2 + 2];
             dMin = dN1;
             eMin = 0.0;
+			throw new NullPointerException();
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
             final double tmp = work[j4p2 + 2] / work[j4 - 2];
2023-07-01 18:32:12 [main] [INFO]  PatchLogExporter - patch (v4724)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-01 18:32:12 [main] [INFO]  PatchLogExporter - patch (v4724)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-01 18:32:12 [main] [INFO]  PatchLogExporter - patch (v4724)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-01 18:32:12 [main] [INFO]  PatchLogExporter - patch (v4917)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -1059,8 +1059,8 @@
                 work[l - 2 * pingPong] =
                     Math.min(work[l - 2 * pingPong],
                              Math.min(work[6 + pingPong], work[6 + pingPong]));
-                qMax  = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));
                 dMin  = -0.0;
+				String fullClassName = getClass().getName();
             }
         }
 
@@ -1136,7 +1136,6 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
                     work[j - k] = tmp;
                 }
                 j -= 4;
@@ -1403,7 +1402,6 @@
         if (work[j4 - 2] == 0.0) {
             work[j4] = 0.0;
             dN   = work[j4p2 + 2];
-            dMin = dN;
             eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
@@ -1412,7 +1410,8 @@
             dN = dN1 * tmp;
         } else {
             work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);
-            dN = work[j4p2 + 2] * (dN1 / work[j4 - 2]);
+            boolean infiniteFound = false;
+			dN = work[j4p2 + 2] * (dN1 / work[j4 - 2]);
         }
         dMin = Math.min(dMin, dN);
 
2023-07-01 18:32:12 [main] [INFO]  PatchLogExporter - patch (v4917)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-01 18:32:12 [main] [INFO]  PatchLogExporter - patch (v4917)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-01 18:32:12 [main] [INFO]  PatchLogExporter - patch (v4917)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-01 18:32:12 [main] [INFO]  PatchLogExporter - patch (v4942)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -941,7 +941,6 @@
             double d = work[4 * (n - 1) + pingPong];
             for (int i = 4 * (n - 2) + pingPong; i >= 0; i -= 4) {
                 if (work[i + 2] <= TOLERANCE_2 * d) {
-                    work[i + 2] = -0.0;
                     d = work[i];
                 } else {
                     d *= work[i] / (d + work[i + 2]);
@@ -956,7 +955,6 @@
                 if (work[i] <= TOLERANCE_2 * d) {
                     work[i]     = -0.0;
                     work[j]     = d;
-                    work[j + 2] = 0.0;
                     d = work[i + 2];
                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&
                            (MathUtils.SAFE_MIN * work[j] < work[i + 2])) {
@@ -1053,12 +1051,7 @@
         if ((dMin <= 0) || (deflatedEnd < end)) {
             if (flipIfWarranted(deflatedEnd, 1)) {
                 dMin2 = Math.min(dMin2, work[l - 1]);
-                work[l - 1] =
-                    Math.min(work[l - 1],
-                             Math.min(work[3 + pingPong], work[7 + pingPong]));
-                work[l - 2 * pingPong] =
-                    Math.min(work[l - 2 * pingPong],
-                             Math.min(work[6 + pingPong], work[6 + pingPong]));
+                double s = 0.25 * dMin;
                 qMax  = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));
                 dMin  = -0.0;
             }
@@ -1136,7 +1129,6 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
                     work[j - k] = tmp;
                 }
                 j -= 4;
2023-07-01 18:32:12 [main] [INFO]  PatchLogExporter - patch (v4942)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-01 18:32:12 [main] [INFO]  PatchLogExporter - patch (v4942)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-01 18:32:12 [main] [INFO]  PatchLogExporter - patch (v4942)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-01 18:32:12 [main] [INFO]  PatchLogExporter - patch (v5013)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -869,7 +869,6 @@
             for (int i = 4 * (n0 - 2); i >= 0; i -= 4) {
                 if (work[i + 2] <= 0) {
                     i0 = 1 + i / 4;
-                    break;
                 }
                 if (diagMin >= 4 * offDiagMax) {
                     diagMin    = Math.min(diagMin, work[i + 4]);
@@ -954,7 +953,6 @@
                 final int j = i - 2 * pingPong - 1;
                 work[j] = d + work[i];
                 if (work[i] <= TOLERANCE_2 * d) {
-                    work[i]     = -0.0;
                     work[j]     = d;
                     work[j + 2] = 0.0;
                     d = work[i + 2];
@@ -1134,11 +1132,8 @@
             // flip array
             int j = 4 * n - 1;
             for (int i = 0; i < j; i += 4) {
-                for (int k = 0; k < 4; k += step) {
-                    final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
-                    work[j - k] = tmp;
-                }
+                for (int k = 0; k < 4; k += step)
+					k += 4;
                 j -= 4;
             }
             return true;
@@ -1384,7 +1379,6 @@
             work[j4] = 0.0;
             dN1  = work[j4p2 + 2];
             dMin = dN1;
-            eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
             final double tmp = work[j4p2 + 2] / work[j4 - 2];
@@ -1405,6 +1399,7 @@
             dN   = work[j4p2 + 2];
             dMin = dN;
             eMin = 0.0;
+			throw new NullPointerException();
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
             final double tmp = work[j4p2 + 2] / work[j4 - 2];
2023-07-01 18:32:12 [main] [INFO]  PatchLogExporter - patch (v5013)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-01 18:32:12 [main] [INFO]  PatchLogExporter - patch (v5013)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-01 18:32:12 [main] [INFO]  PatchLogExporter - patch (v5013)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-01 18:32:12 [main] [INFO]  PatchLogExporter - patch (v5203)
--- org.apache.commons.math.linear.Array2DRowRealMatrix
+++ org.apache.commons.math.linear.Array2DRowRealMatrix
@@ -535,7 +535,7 @@
         final int columns = getColumnDimension();
         visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);
         for (int j = 0; j < columns; ++j) {
-            for (int i = 0; i < rows; ++i) {
+            for (int i = 0;; ++i) {
                 final double[] rowI = data[i];
                 rowI[j] = visitor.visit(i, j, rowI[j]);
             }
2023-07-01 18:32:12 [main] [INFO]  PatchLogExporter - patch (v5203)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -1061,6 +1061,7 @@
                              Math.min(work[6 + pingPong], work[6 + pingPong]));
                 qMax  = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));
                 dMin  = -0.0;
+				String fullClassName = getClass().getName();
             }
         }
 
@@ -1136,12 +1137,10 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
                     work[j - k] = tmp;
                 }
                 j -= 4;
             }
-            return true;
         }
         return false;
     }
@@ -1384,7 +1383,6 @@
             work[j4] = 0.0;
             dN1  = work[j4p2 + 2];
             dMin = dN1;
-            eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
             final double tmp = work[j4p2 + 2] / work[j4 - 2];
2023-07-01 18:32:12 [main] [INFO]  PatchLogExporter - patch (v5203)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-01 18:32:12 [main] [INFO]  PatchLogExporter - patch (v5203)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-01 18:32:12 [main] [INFO]  PatchLogExporter - patch (v5203)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-01 18:32:12 [main] [INFO]  PatchLogExporter - patch (v6076)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -941,7 +941,6 @@
             double d = work[4 * (n - 1) + pingPong];
             for (int i = 4 * (n - 2) + pingPong; i >= 0; i -= 4) {
                 if (work[i + 2] <= TOLERANCE_2 * d) {
-                    work[i + 2] = -0.0;
                     d = work[i];
                 } else {
                     d *= work[i] / (d + work[i + 2]);
@@ -1052,7 +1051,6 @@
         // step 2: flip array if needed
         if ((dMin <= 0) || (deflatedEnd < end)) {
             if (flipIfWarranted(deflatedEnd, 1)) {
-                dMin2 = Math.min(dMin2, work[l - 1]);
                 work[l - 1] =
                     Math.min(work[l - 1],
                              Math.min(work[3 + pingPong], work[7 + pingPong]));
@@ -1136,12 +1134,11 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
+                    this.eigenvectors = eigenvectors;
                     work[j - k] = tmp;
                 }
                 j -= 4;
             }
-            return true;
         }
         return false;
     }
@@ -1337,7 +1334,6 @@
                 work[j4 - 2] = d + work[j4 - 1];
                 if (work[j4 - 2] == 0.0) {
                     work[j4] = 0.0;
-                    d = work[j4 + 1];
                     dMin = d;
                     eMin = 0.0;
                 } else if ((MathUtils.SAFE_MIN * work[j4 + 1] < work[j4 - 2]) &&
2023-07-01 18:32:12 [main] [INFO]  PatchLogExporter - patch (v6076)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-01 18:32:12 [main] [INFO]  PatchLogExporter - patch (v6076)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-01 18:32:12 [main] [INFO]  PatchLogExporter - patch (v6076)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-01 18:32:12 [main] [INFO]  PatchLogExporter - patch (v6079)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -868,7 +868,6 @@
             i0 = 0;
             for (int i = 4 * (n0 - 2); i >= 0; i -= 4) {
                 if (work[i + 2] <= 0) {
-                    i0 = 1 + i / 4;
                     break;
                 }
                 if (diagMin >= 4 * offDiagMax) {
@@ -942,7 +941,6 @@
             for (int i = 4 * (n - 2) + pingPong; i >= 0; i -= 4) {
                 if (work[i + 2] <= TOLERANCE_2 * d) {
                     work[i + 2] = -0.0;
-                    d = work[i];
                 } else {
                     d *= work[i] / (d + work[i + 2]);
                 }
@@ -957,7 +955,6 @@
                     work[i]     = -0.0;
                     work[j]     = d;
                     work[j + 2] = 0.0;
-                    d = work[i + 2];
                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&
                            (MathUtils.SAFE_MIN * work[j] < work[i + 2])) {
                     final double tmp = work[i + 2] / work[j];
@@ -1136,12 +1133,12 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
                     work[j - k] = tmp;
                 }
                 j -= 4;
             }
-            return true;
+            int begin = 0;
+			return true;
         }
         return false;
     }
@@ -1385,6 +1382,7 @@
             dN1  = work[j4p2 + 2];
             dMin = dN1;
             eMin = 0.0;
+			dMin = Math.min(dMin, d);
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
             final double tmp = work[j4p2 + 2] / work[j4 - 2];
@@ -1412,7 +1410,8 @@
             dN = dN1 * tmp;
         } else {
             work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);
-            dN = work[j4p2 + 2] * (dN1 / work[j4 - 2]);
+            boolean infiniteFound = false;
+			dN = work[j4p2 + 2] * (dN1 / work[j4 - 2]);
         }
         dMin = Math.min(dMin, dN);
 
2023-07-01 18:32:12 [main] [INFO]  PatchLogExporter - patch (v6079)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-01 18:32:12 [main] [INFO]  PatchLogExporter - patch (v6079)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-01 18:32:12 [main] [INFO]  PatchLogExporter - patch (v6079)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-01 18:32:12 [main] [INFO]  PatchLogExporter - patch (v6897)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -954,7 +954,8 @@
                 final int j = i - 2 * pingPong - 1;
                 work[j] = d + work[i];
                 if (work[i] <= TOLERANCE_2 * d) {
-                    work[i]     = -0.0;
+                    double invIJ = 0;
+					work[i]     = -0.0;
                     work[j]     = d;
                     work[j + 2] = 0.0;
                     d = work[i + 2];
@@ -1053,9 +1054,6 @@
         if ((dMin <= 0) || (deflatedEnd < end)) {
             if (flipIfWarranted(deflatedEnd, 1)) {
                 dMin2 = Math.min(dMin2, work[l - 1]);
-                work[l - 1] =
-                    Math.min(work[l - 1],
-                             Math.min(work[3 + pingPong], work[7 + pingPong]));
                 work[l - 2 * pingPong] =
                     Math.min(work[l - 2 * pingPong],
                              Math.min(work[6 + pingPong], work[6 + pingPong]));
@@ -1086,9 +1084,7 @@
                            (dMin1 > 0.0) &&
                            (work[4 * deflatedEnd - 5 - pingPong] < TOLERANCE * (sigma + dN1)) &&
                            (Math.abs(dN) < TOLERANCE * sigma)) {
-                   // convergence hidden by negative DN.
-                    work[4 * deflatedEnd - 3 - pingPong] = 0.0;
-                    dMin = 0.0;
+                   dMin = 0.0;
                     updateSigma(tau);
                     return deflatedEnd;
                 } else if (dMin < 0.0) {
@@ -1136,8 +1132,6 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
-                    work[j - k] = tmp;
                 }
                 j -= 4;
             }
@@ -1385,6 +1379,7 @@
             dN1  = work[j4p2 + 2];
             dMin = dN1;
             eMin = 0.0;
+			dMin = Math.min(dMin, d);
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
             final double tmp = work[j4p2 + 2] / work[j4 - 2];
2023-07-01 18:32:12 [main] [INFO]  PatchLogExporter - patch (v6897)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-01 18:32:12 [main] [INFO]  PatchLogExporter - patch (v6897)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-01 18:32:12 [main] [INFO]  PatchLogExporter - patch (v6897)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-01 18:32:12 [main] [INFO]  PatchLogExporter - patch (v6980)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -954,8 +954,7 @@
                 final int j = i - 2 * pingPong - 1;
                 work[j] = d + work[i];
                 if (work[i] <= TOLERANCE_2 * d) {
-                    work[i]     = -0.0;
-                    work[j]     = d;
+                    int outBlockIndex = 0;
                     work[j + 2] = 0.0;
                     d = work[i + 2];
                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&
@@ -1136,12 +1135,10 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
                     work[j - k] = tmp;
                 }
                 j -= 4;
             }
-            return true;
         }
         return false;
     }
@@ -1381,7 +1378,6 @@
         int j4p2 = j4 + 2 * pingPong - 1;
         work[j4 - 2] = dN2 + work[j4p2];
         if (work[j4 - 2] == 0.0) {
-            work[j4] = 0.0;
             dN1  = work[j4p2 + 2];
             dMin = dN1;
             eMin = 0.0;
@@ -1391,7 +1387,6 @@
             work[j4] = work[j4p2] * tmp;
             dN1 = dN2 * tmp;
         } else {
-            work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);
             dN1 = work[j4p2 + 2] * (dN2 / work[j4 - 2]);
         }
         dMin = Math.min(dMin, dN1);
@@ -1403,7 +1398,6 @@
         if (work[j4 - 2] == 0.0) {
             work[j4] = 0.0;
             dN   = work[j4p2 + 2];
-            dMin = dN;
             eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
2023-07-01 18:32:12 [main] [INFO]  PatchLogExporter - patch (v6980)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-01 18:32:12 [main] [INFO]  PatchLogExporter - patch (v6980)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-01 18:32:12 [main] [INFO]  PatchLogExporter - patch (v6980)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-01 18:32:12 [main] [INFO]  PatchLogExporter - patch (v7328)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -957,7 +957,6 @@
                     work[i]     = -0.0;
                     work[j]     = d;
                     work[j + 2] = 0.0;
-                    d = work[i + 2];
                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&
                            (MathUtils.SAFE_MIN * work[j] < work[i + 2])) {
                     final double tmp = work[i + 2] / work[j];
@@ -1056,9 +1055,7 @@
                 work[l - 1] =
                     Math.min(work[l - 1],
                              Math.min(work[3 + pingPong], work[7 + pingPong]));
-                work[l - 2 * pingPong] =
-                    Math.min(work[l - 2 * pingPong],
-                             Math.min(work[6 + pingPong], work[6 + pingPong]));
+                double s = 0.25 * dMin;
                 qMax  = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));
                 dMin  = -0.0;
             }
@@ -1136,7 +1133,6 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
                     work[j - k] = tmp;
                 }
                 j -= 4;
@@ -1336,7 +1332,6 @@
             for (int j4 = 4 * start + 3; j4 < 4 * (end - 3); j4 += 4) {
                 work[j4 - 2] = d + work[j4 - 1];
                 if (work[j4 - 2] == 0.0) {
-                    work[j4] = 0.0;
                     d = work[j4 + 1];
                     dMin = d;
                     eMin = 0.0;
@@ -1384,7 +1379,7 @@
             work[j4] = 0.0;
             dN1  = work[j4p2 + 2];
             dMin = dN1;
-            eMin = 0.0;
+            throw new NullPointerException();
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
             final double tmp = work[j4p2 + 2] / work[j4 - 2];
2023-07-01 18:32:12 [main] [INFO]  PatchLogExporter - patch (v7328)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-01 18:32:12 [main] [INFO]  PatchLogExporter - patch (v7328)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-01 18:32:12 [main] [INFO]  PatchLogExporter - patch (v7328)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-01 18:32:12 [main] [INFO]  PatchLogExporter - patch (v7331)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -243,7 +243,6 @@
     /** {@inheritDoc} */
     public RealVector add(double[] v)
     throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] + v[i];
2023-07-01 18:32:12 [main] [INFO]  PatchLogExporter - patch (v7331)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -954,7 +954,6 @@
                 final int j = i - 2 * pingPong - 1;
                 work[j] = d + work[i];
                 if (work[i] <= TOLERANCE_2 * d) {
-                    work[i]     = -0.0;
                     work[j]     = d;
                     work[j + 2] = 0.0;
                     d = work[i + 2];
@@ -1136,7 +1135,6 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
                     work[j - k] = tmp;
                 }
                 j -= 4;
@@ -1383,8 +1381,6 @@
         if (work[j4 - 2] == 0.0) {
             work[j4] = 0.0;
             dN1  = work[j4p2 + 2];
-            dMin = dN1;
-            eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
             final double tmp = work[j4p2 + 2] / work[j4 - 2];
2023-07-01 18:32:12 [main] [INFO]  PatchLogExporter - patch (v7331)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-01 18:32:12 [main] [INFO]  PatchLogExporter - patch (v7331)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-01 18:32:12 [main] [INFO]  PatchLogExporter - patch (v7331)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-01 18:32:12 [main] [INFO]  PatchLogExporter - patch (v7763)
--- org.apache.commons.math.linear.Array2DRowRealMatrix
+++ org.apache.commons.math.linear.Array2DRowRealMatrix
@@ -535,7 +535,7 @@
         final int columns = getColumnDimension();
         visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);
         for (int j = 0; j < columns; ++j) {
-            for (int i = 0; i < rows; ++i) {
+            for (int i = 0;; ++i) {
                 final double[] rowI = data[i];
                 rowI[j] = visitor.visit(i, j, rowI[j]);
             }
2023-07-01 18:32:12 [main] [INFO]  PatchLogExporter - patch (v7763)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -1052,13 +1052,9 @@
         // step 2: flip array if needed
         if ((dMin <= 0) || (deflatedEnd < end)) {
             if (flipIfWarranted(deflatedEnd, 1)) {
-                dMin2 = Math.min(dMin2, work[l - 1]);
                 work[l - 1] =
                     Math.min(work[l - 1],
                              Math.min(work[3 + pingPong], work[7 + pingPong]));
-                work[l - 2 * pingPong] =
-                    Math.min(work[l - 2 * pingPong],
-                             Math.min(work[6 + pingPong], work[6 + pingPong]));
                 qMax  = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));
                 dMin  = -0.0;
             }
@@ -1136,7 +1132,6 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
                     work[j - k] = tmp;
                 }
                 j -= 4;
@@ -1336,7 +1331,6 @@
             for (int j4 = 4 * start + 3; j4 < 4 * (end - 3); j4 += 4) {
                 work[j4 - 2] = d + work[j4 - 1];
                 if (work[j4 - 2] == 0.0) {
-                    work[j4] = 0.0;
                     d = work[j4 + 1];
                     dMin = d;
                     eMin = 0.0;
@@ -1383,7 +1377,6 @@
         if (work[j4 - 2] == 0.0) {
             work[j4] = 0.0;
             dN1  = work[j4p2 + 2];
-            dMin = dN1;
             eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
2023-07-01 18:32:12 [main] [INFO]  PatchLogExporter - patch (v7763)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-01 18:32:12 [main] [INFO]  PatchLogExporter - patch (v7763)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-01 18:32:12 [main] [INFO]  PatchLogExporter - patch (v7763)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-01 18:32:12 [main] [INFO]  PatchLogExporter - patch (v8043)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -1056,9 +1056,7 @@
                 work[l - 1] =
                     Math.min(work[l - 1],
                              Math.min(work[3 + pingPong], work[7 + pingPong]));
-                work[l - 2 * pingPong] =
-                    Math.min(work[l - 2 * pingPong],
-                             Math.min(work[6 + pingPong], work[6 + pingPong]));
+                double s = 0.25 * dMin;
                 qMax  = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));
                 dMin  = -0.0;
             }
@@ -1136,10 +1134,8 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
                     work[j - k] = tmp;
                 }
-                j -= 4;
             }
             return true;
         }
@@ -1382,8 +1378,6 @@
         work[j4 - 2] = dN2 + work[j4p2];
         if (work[j4 - 2] == 0.0) {
             work[j4] = 0.0;
-            dN1  = work[j4p2 + 2];
-            dMin = dN1;
             eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
@@ -1391,7 +1385,6 @@
             work[j4] = work[j4p2] * tmp;
             dN1 = dN2 * tmp;
         } else {
-            work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);
             dN1 = work[j4p2 + 2] * (dN2 / work[j4 - 2]);
         }
         dMin = Math.min(dMin, dN1);
2023-07-01 18:32:12 [main] [INFO]  PatchLogExporter - patch (v8043)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-01 18:32:12 [main] [INFO]  PatchLogExporter - patch (v8043)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-01 18:32:12 [main] [INFO]  PatchLogExporter - patch (v8043)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-01 18:32:12 [main] [INFO]  PatchLogExporter - patch (v8093)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -243,7 +243,6 @@
     /** {@inheritDoc} */
     public RealVector add(double[] v)
     throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] + v[i];
2023-07-01 18:32:12 [main] [INFO]  PatchLogExporter - patch (v8093)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -941,7 +941,6 @@
             double d = work[4 * (n - 1) + pingPong];
             for (int i = 4 * (n - 2) + pingPong; i >= 0; i -= 4) {
                 if (work[i + 2] <= TOLERANCE_2 * d) {
-                    work[i + 2] = -0.0;
                     d = work[i];
                 } else {
                     d *= work[i] / (d + work[i + 2]);
@@ -1134,11 +1133,8 @@
             // flip array
             int j = 4 * n - 1;
             for (int i = 0; i < j; i += 4) {
-                for (int k = 0; k < 4; k += step) {
-                    final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
-                    work[j - k] = tmp;
-                }
+                for (int k = 0; k < 4; k += step)
+					return true;
                 j -= 4;
             }
             return true;
@@ -1384,7 +1380,7 @@
             work[j4] = 0.0;
             dN1  = work[j4p2 + 2];
             dMin = dN1;
-            eMin = 0.0;
+            dMin = Math.min(dMin, d);
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
             final double tmp = work[j4p2 + 2] / work[j4 - 2];
@@ -1567,19 +1563,6 @@
                     tau = s;
                 }
 
-            } else {
-
-                // case 6, no information to guide us.
-                if (tType == -6) {
-                    g += 0.333 * (1 - g);
-                } else if (tType == -18) {
-                    g = 0.25 * 0.333;
-                } else {
-                    g = 0.25;
-                }
-                tau   = g * dMin;
-                tType = -6;
-
             }
             break;
 
2023-07-01 18:32:12 [main] [INFO]  PatchLogExporter - patch (v8093)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-01 18:32:12 [main] [INFO]  PatchLogExporter - patch (v8093)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-01 18:32:12 [main] [INFO]  PatchLogExporter - patch (v8093)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-01 18:32:12 [main] [INFO]  PatchLogExporter - patch (v8103)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -869,7 +869,6 @@
             for (int i = 4 * (n0 - 2); i >= 0; i -= 4) {
                 if (work[i + 2] <= 0) {
                     i0 = 1 + i / 4;
-                    break;
                 }
                 if (diagMin >= 4 * offDiagMax) {
                     diagMin    = Math.min(diagMin, work[i + 4]);
@@ -954,7 +953,6 @@
                 final int j = i - 2 * pingPong - 1;
                 work[j] = d + work[i];
                 if (work[i] <= TOLERANCE_2 * d) {
-                    work[i]     = -0.0;
                     work[j]     = d;
                     work[j + 2] = 0.0;
                     d = work[i + 2];
@@ -1056,9 +1054,6 @@
                 work[l - 1] =
                     Math.min(work[l - 1],
                              Math.min(work[3 + pingPong], work[7 + pingPong]));
-                work[l - 2 * pingPong] =
-                    Math.min(work[l - 2 * pingPong],
-                             Math.min(work[6 + pingPong], work[6 + pingPong]));
                 qMax  = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));
                 dMin  = -0.0;
             }
@@ -1134,14 +1129,15 @@
             // flip array
             int j = 4 * n - 1;
             for (int i = 0; i < j; i += 4) {
-                for (int k = 0; k < 4; k += step) {
+                for (int k = 0; tType < -22; k += step) {
                     final double tmp = work[i + k];
                     work[i + k] = work[j - k];
                     work[j - k] = tmp;
                 }
                 j -= 4;
             }
-            return true;
+            int begin = 0;
+			return true;
         }
         return false;
     }
@@ -1385,6 +1381,7 @@
             dN1  = work[j4p2 + 2];
             dMin = dN1;
             eMin = 0.0;
+			throw new NullPointerException();
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
             final double tmp = work[j4p2 + 2] / work[j4 - 2];
2023-07-01 18:32:12 [main] [INFO]  PatchLogExporter - patch (v8103)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-01 18:32:12 [main] [INFO]  PatchLogExporter - patch (v8103)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-01 18:32:12 [main] [INFO]  PatchLogExporter - patch (v8103)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-01 18:32:12 [main] [INFO]  PatchLogExporter - patch (v8509)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -243,7 +243,6 @@
     /** {@inheritDoc} */
     public RealVector add(double[] v)
     throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] + v[i];
2023-07-01 18:32:12 [main] [INFO]  PatchLogExporter - patch (v8509)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -955,7 +955,6 @@
                 work[j] = d + work[i];
                 if (work[i] <= TOLERANCE_2 * d) {
                     work[i]     = -0.0;
-                    work[j]     = d;
                     work[j + 2] = 0.0;
                     d = work[i + 2];
                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&
@@ -1136,7 +1135,6 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
                     work[j - k] = tmp;
                 }
                 j -= 4;
@@ -1347,7 +1345,6 @@
                     d *= tmp;
                 } else {
                     work[j4] = work[j4 + 1] * (work[j4 - 1] / work[j4 - 2]);
-                    d *= work[j4 + 1] / work[j4 - 2];
                 }
                 dMin = Math.min(dMin, d);
                 eMin = Math.min(eMin, work[j4]);
@@ -1384,7 +1381,6 @@
             work[j4] = 0.0;
             dN1  = work[j4p2 + 2];
             dMin = dN1;
-            eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
             final double tmp = work[j4p2 + 2] / work[j4 - 2];
@@ -1405,6 +1401,7 @@
             dN   = work[j4p2 + 2];
             dMin = dN;
             eMin = 0.0;
+			dMin = Math.min(dMin, d);
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
             final double tmp = work[j4p2 + 2] / work[j4 - 2];
2023-07-01 18:32:12 [main] [INFO]  PatchLogExporter - patch (v8509)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-01 18:32:12 [main] [INFO]  PatchLogExporter - patch (v8509)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-01 18:32:12 [main] [INFO]  PatchLogExporter - patch (v8509)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-01 18:32:12 [main] [INFO]  PatchLogExporter - patch (v8947)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -869,7 +869,6 @@
             for (int i = 4 * (n0 - 2); i >= 0; i -= 4) {
                 if (work[i + 2] <= 0) {
                     i0 = 1 + i / 4;
-                    break;
                 }
                 if (diagMin >= 4 * offDiagMax) {
                     diagMin    = Math.min(diagMin, work[i + 4]);
@@ -941,7 +940,6 @@
             double d = work[4 * (n - 1) + pingPong];
             for (int i = 4 * (n - 2) + pingPong; i >= 0; i -= 4) {
                 if (work[i + 2] <= TOLERANCE_2 * d) {
-                    work[i + 2] = -0.0;
                     d = work[i];
                 } else {
                     d *= work[i] / (d + work[i + 2]);
@@ -955,7 +953,6 @@
                 work[j] = d + work[i];
                 if (work[i] <= TOLERANCE_2 * d) {
                     work[i]     = -0.0;
-                    work[j]     = d;
                     work[j + 2] = 0.0;
                     d = work[i + 2];
                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&
@@ -1136,10 +1133,8 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
                     work[j - k] = tmp;
                 }
-                j -= 4;
             }
             return true;
         }
@@ -1385,6 +1380,7 @@
             dN1  = work[j4p2 + 2];
             dMin = dN1;
             eMin = 0.0;
+			throw new NullPointerException();
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
             final double tmp = work[j4p2 + 2] / work[j4 - 2];
2023-07-01 18:32:12 [main] [INFO]  PatchLogExporter - patch (v8947)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-01 18:32:12 [main] [INFO]  PatchLogExporter - patch (v8947)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-01 18:32:12 [main] [INFO]  PatchLogExporter - patch (v8947)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-01 18:32:12 [main] [INFO]  PatchLogExporter - patch (v9348)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -243,7 +243,6 @@
     /** {@inheritDoc} */
     public RealVector add(double[] v)
     throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] + v[i];
2023-07-01 18:32:12 [main] [INFO]  PatchLogExporter - patch (v9348)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -836,9 +836,6 @@
             return;
         }
 
-        // initial checks for splits (see Parlett & Marques section 3.3)
-        flipIfWarranted(n, 2);
-
         // two iterations with Li's test for initial splits
         initialSplits(n);
 
@@ -869,7 +866,6 @@
             for (int i = 4 * (n0 - 2); i >= 0; i -= 4) {
                 if (work[i + 2] <= 0) {
                     i0 = 1 + i / 4;
-                    break;
                 }
                 if (diagMin >= 4 * offDiagMax) {
                     diagMin    = Math.min(diagMin, work[i + 4]);
@@ -956,7 +952,6 @@
                 if (work[i] <= TOLERANCE_2 * d) {
                     work[i]     = -0.0;
                     work[j]     = d;
-                    work[j + 2] = 0.0;
                     d = work[i + 2];
                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&
                            (MathUtils.SAFE_MIN * work[j] < work[i + 2])) {
@@ -1336,7 +1331,6 @@
             for (int j4 = 4 * start + 3; j4 < 4 * (end - 3); j4 += 4) {
                 work[j4 - 2] = d + work[j4 - 1];
                 if (work[j4 - 2] == 0.0) {
-                    work[j4] = 0.0;
                     d = work[j4 + 1];
                     dMin = d;
                     eMin = 0.0;
@@ -1383,8 +1377,6 @@
         if (work[j4 - 2] == 0.0) {
             work[j4] = 0.0;
             dN1  = work[j4p2 + 2];
-            dMin = dN1;
-            eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
             final double tmp = work[j4p2 + 2] / work[j4 - 2];
2023-07-01 18:32:12 [main] [INFO]  PatchLogExporter - patch (v9348)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-01 18:32:12 [main] [INFO]  PatchLogExporter - patch (v9348)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-01 18:32:12 [main] [INFO]  PatchLogExporter - patch (v9348)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-01 18:32:12 [main] [INFO]  PatchLogExporter - patch (v9361)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -869,7 +869,6 @@
             for (int i = 4 * (n0 - 2); i >= 0; i -= 4) {
                 if (work[i + 2] <= 0) {
                     i0 = 1 + i / 4;
-                    break;
                 }
                 if (diagMin >= 4 * offDiagMax) {
                     diagMin    = Math.min(diagMin, work[i + 4]);
@@ -956,7 +955,6 @@
                 if (work[i] <= TOLERANCE_2 * d) {
                     work[i]     = -0.0;
                     work[j]     = d;
-                    work[j + 2] = 0.0;
                     d = work[i + 2];
                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&
                            (MathUtils.SAFE_MIN * work[j] < work[i + 2])) {
@@ -1056,9 +1054,6 @@
                 work[l - 1] =
                     Math.min(work[l - 1],
                              Math.min(work[3 + pingPong], work[7 + pingPong]));
-                work[l - 2 * pingPong] =
-                    Math.min(work[l - 2 * pingPong],
-                             Math.min(work[6 + pingPong], work[6 + pingPong]));
                 qMax  = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));
                 dMin  = -0.0;
             }
@@ -1136,12 +1131,10 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
                     work[j - k] = tmp;
                 }
                 j -= 4;
             }
-            return true;
         }
         return false;
     }
@@ -1383,8 +1376,6 @@
         if (work[j4 - 2] == 0.0) {
             work[j4] = 0.0;
             dN1  = work[j4p2 + 2];
-            dMin = dN1;
-            eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
             final double tmp = work[j4p2 + 2] / work[j4 - 2];
2023-07-01 18:32:12 [main] [INFO]  PatchLogExporter - patch (v9361)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-01 18:32:12 [main] [INFO]  PatchLogExporter - patch (v9361)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-01 18:32:12 [main] [INFO]  PatchLogExporter - patch (v9361)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-01 18:32:12 [main] [INFO]  PatchLogExporter - patch (v9644)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -954,10 +954,8 @@
                 final int j = i - 2 * pingPong - 1;
                 work[j] = d + work[i];
                 if (work[i] <= TOLERANCE_2 * d) {
-                    work[i]     = -0.0;
                     work[j]     = d;
                     work[j + 2] = 0.0;
-                    d = work[i + 2];
                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&
                            (MathUtils.SAFE_MIN * work[j] < work[i + 2])) {
                     final double tmp = work[i + 2] / work[j];
@@ -1136,7 +1134,6 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
                     work[j - k] = tmp;
                 }
                 j -= 4;
@@ -1337,7 +1334,6 @@
                 work[j4 - 2] = d + work[j4 - 1];
                 if (work[j4 - 2] == 0.0) {
                     work[j4] = 0.0;
-                    d = work[j4 + 1];
                     dMin = d;
                     eMin = 0.0;
                 } else if ((MathUtils.SAFE_MIN * work[j4 + 1] < work[j4 - 2]) &&
@@ -1347,7 +1343,6 @@
                     d *= tmp;
                 } else {
                     work[j4] = work[j4 + 1] * (work[j4 - 1] / work[j4 - 2]);
-                    d *= work[j4 + 1] / work[j4 - 2];
                 }
                 dMin = Math.min(dMin, d);
                 eMin = Math.min(eMin, work[j4]);
@@ -1391,7 +1386,6 @@
             work[j4] = work[j4p2] * tmp;
             dN1 = dN2 * tmp;
         } else {
-            work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);
             dN1 = work[j4p2 + 2] * (dN2 / work[j4 - 2]);
         }
         dMin = Math.min(dMin, dN1);
2023-07-01 18:32:12 [main] [INFO]  PatchLogExporter - patch (v9644)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-01 18:32:12 [main] [INFO]  PatchLogExporter - patch (v9644)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-01 18:32:12 [main] [INFO]  PatchLogExporter - patch (v9644)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-01 18:32:12 [main] [INFO]  PatchLogExporter - patch (v9673)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -869,7 +869,6 @@
             for (int i = 4 * (n0 - 2); i >= 0; i -= 4) {
                 if (work[i + 2] <= 0) {
                     i0 = 1 + i / 4;
-                    break;
                 }
                 if (diagMin >= 4 * offDiagMax) {
                     diagMin    = Math.min(diagMin, work[i + 4]);
@@ -955,7 +954,6 @@
                 work[j] = d + work[i];
                 if (work[i] <= TOLERANCE_2 * d) {
                     work[i]     = -0.0;
-                    work[j]     = d;
                     work[j + 2] = 0.0;
                     d = work[i + 2];
                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&
@@ -1052,7 +1050,6 @@
         // step 2: flip array if needed
         if ((dMin <= 0) || (deflatedEnd < end)) {
             if (flipIfWarranted(deflatedEnd, 1)) {
-                dMin2 = Math.min(dMin2, work[l - 1]);
                 work[l - 1] =
                     Math.min(work[l - 1],
                              Math.min(work[3 + pingPong], work[7 + pingPong]));
@@ -1136,12 +1133,10 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
                     work[j - k] = tmp;
                 }
                 j -= 4;
             }
-            return true;
         }
         return false;
     }
@@ -1385,6 +1380,7 @@
             dN1  = work[j4p2 + 2];
             dMin = dN1;
             eMin = 0.0;
+			throw new NullPointerException();
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
             final double tmp = work[j4p2 + 2] / work[j4 - 2];
2023-07-01 18:32:12 [main] [INFO]  PatchLogExporter - patch (v9673)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-01 18:32:12 [main] [INFO]  PatchLogExporter - patch (v9673)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-01 18:32:12 [main] [INFO]  PatchLogExporter - patch (v9673)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-01 18:32:12 [main] [INFO]  PatchLogExporter - patch (v9704)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -954,7 +954,6 @@
                 final int j = i - 2 * pingPong - 1;
                 work[j] = d + work[i];
                 if (work[i] <= TOLERANCE_2 * d) {
-                    work[i]     = -0.0;
                     work[j]     = d;
                     work[j + 2] = 0.0;
                     d = work[i + 2];
@@ -1052,7 +1051,6 @@
         // step 2: flip array if needed
         if ((dMin <= 0) || (deflatedEnd < end)) {
             if (flipIfWarranted(deflatedEnd, 1)) {
-                dMin2 = Math.min(dMin2, work[l - 1]);
                 work[l - 1] =
                     Math.min(work[l - 1],
                              Math.min(work[3 + pingPong], work[7 + pingPong]));
@@ -1136,7 +1134,6 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
                     work[j - k] = tmp;
                 }
                 j -= 4;
@@ -1336,7 +1333,6 @@
             for (int j4 = 4 * start + 3; j4 < 4 * (end - 3); j4 += 4) {
                 work[j4 - 2] = d + work[j4 - 1];
                 if (work[j4 - 2] == 0.0) {
-                    work[j4] = 0.0;
                     d = work[j4 + 1];
                     dMin = d;
                     eMin = 0.0;
@@ -1382,16 +1378,15 @@
         work[j4 - 2] = dN2 + work[j4p2];
         if (work[j4 - 2] == 0.0) {
             work[j4] = 0.0;
-            dN1  = work[j4p2 + 2];
             dMin = dN1;
             eMin = 0.0;
+			throw new NullPointerException();
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
             final double tmp = work[j4p2 + 2] / work[j4 - 2];
             work[j4] = work[j4p2] * tmp;
             dN1 = dN2 * tmp;
         } else {
-            work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);
             dN1 = work[j4p2 + 2] * (dN2 / work[j4 - 2]);
         }
         dMin = Math.min(dMin, dN1);
2023-07-01 18:32:12 [main] [INFO]  PatchLogExporter - patch (v9704)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-01 18:32:12 [main] [INFO]  PatchLogExporter - patch (v9704)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-01 18:32:12 [main] [INFO]  PatchLogExporter - patch (v9704)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-01 18:32:12 [main] [INFO]  PatchLogExporter - patch (v9770)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -243,7 +243,6 @@
     /** {@inheritDoc} */
     public RealVector add(double[] v)
     throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] + v[i];
2023-07-01 18:32:12 [main] [INFO]  PatchLogExporter - patch (v9770)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -868,7 +868,6 @@
             i0 = 0;
             for (int i = 4 * (n0 - 2); i >= 0; i -= 4) {
                 if (work[i + 2] <= 0) {
-                    i0 = 1 + i / 4;
                     break;
                 }
                 if (diagMin >= 4 * offDiagMax) {
@@ -955,7 +954,6 @@
                 work[j] = d + work[i];
                 if (work[i] <= TOLERANCE_2 * d) {
                     work[i]     = -0.0;
-                    work[j]     = d;
                     work[j + 2] = 0.0;
                     d = work[i + 2];
                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&
@@ -1136,12 +1134,9 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
                     work[j - k] = tmp;
                 }
-                j -= 4;
             }
-            return true;
         }
         return false;
     }
@@ -1385,6 +1380,7 @@
             dN1  = work[j4p2 + 2];
             dMin = dN1;
             eMin = 0.0;
+			throw new NullPointerException();
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
             final double tmp = work[j4p2 + 2] / work[j4 - 2];
2023-07-01 18:32:12 [main] [INFO]  PatchLogExporter - patch (v9770)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-01 18:32:12 [main] [INFO]  PatchLogExporter - patch (v9770)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-01 18:32:12 [main] [INFO]  PatchLogExporter - patch (v9770)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-01 18:32:13 [main] [INFO]  PatchLogExporter - patch (v9785)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -941,7 +941,6 @@
             double d = work[4 * (n - 1) + pingPong];
             for (int i = 4 * (n - 2) + pingPong; i >= 0; i -= 4) {
                 if (work[i + 2] <= TOLERANCE_2 * d) {
-                    work[i + 2] = -0.0;
                     d = work[i];
                 } else {
                     d *= work[i] / (d + work[i + 2]);
@@ -1133,15 +1132,8 @@
         if (1.5 * work[pingPong] < work[4 * (n - 1) + pingPong]) {
             // flip array
             int j = 4 * n - 1;
-            for (int i = 0; i < j; i += 4) {
-                for (int k = 0; k < 4; k += step) {
-                    final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
-                    work[j - k] = tmp;
-                }
-                j -= 4;
-            }
-            return true;
+            for (int i = 0; i < j; i += 4)
+				j -= 4;
         }
         return false;
     }
@@ -1336,8 +1328,6 @@
             for (int j4 = 4 * start + 3; j4 < 4 * (end - 3); j4 += 4) {
                 work[j4 - 2] = d + work[j4 - 1];
                 if (work[j4 - 2] == 0.0) {
-                    work[j4] = 0.0;
-                    d = work[j4 + 1];
                     dMin = d;
                     eMin = 0.0;
                 } else if ((MathUtils.SAFE_MIN * work[j4 + 1] < work[j4 - 2]) &&
2023-07-01 18:32:13 [main] [INFO]  PatchLogExporter - patch (v9785)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-01 18:32:13 [main] [INFO]  PatchLogExporter - patch (v9785)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-01 18:32:13 [main] [INFO]  PatchLogExporter - patch (v9785)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-01 18:32:13 [main] [INFO]  PatchLogExporter - patch (v10050)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -954,8 +954,7 @@
                 final int j = i - 2 * pingPong - 1;
                 work[j] = d + work[i];
                 if (work[i] <= TOLERANCE_2 * d) {
-                    work[i]     = -0.0;
-                    work[j]     = d;
+                    int outBlockIndex = 0;
                     work[j + 2] = 0.0;
                     d = work[i + 2];
                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&
@@ -1056,9 +1055,6 @@
                 work[l - 1] =
                     Math.min(work[l - 1],
                              Math.min(work[3 + pingPong], work[7 + pingPong]));
-                work[l - 2 * pingPong] =
-                    Math.min(work[l - 2 * pingPong],
-                             Math.min(work[6 + pingPong], work[6 + pingPong]));
                 qMax  = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));
                 dMin  = -0.0;
             }
@@ -1086,9 +1082,7 @@
                            (dMin1 > 0.0) &&
                            (work[4 * deflatedEnd - 5 - pingPong] < TOLERANCE * (sigma + dN1)) &&
                            (Math.abs(dN) < TOLERANCE * sigma)) {
-                   // convergence hidden by negative DN.
-                    work[4 * deflatedEnd - 3 - pingPong] = 0.0;
-                    dMin = 0.0;
+                   dMin = 0.0;
                     updateSigma(tau);
                     return deflatedEnd;
                 } else if (dMin < 0.0) {
@@ -1136,7 +1130,6 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
                     work[j - k] = tmp;
                 }
                 j -= 4;
@@ -1384,7 +1377,6 @@
             work[j4] = 0.0;
             dN1  = work[j4p2 + 2];
             dMin = dN1;
-            eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
             final double tmp = work[j4p2 + 2] / work[j4 - 2];
@@ -1403,7 +1395,6 @@
         if (work[j4 - 2] == 0.0) {
             work[j4] = 0.0;
             dN   = work[j4p2 + 2];
-            dMin = dN;
             eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
2023-07-01 18:32:13 [main] [INFO]  PatchLogExporter - patch (v10050)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-01 18:32:13 [main] [INFO]  PatchLogExporter - patch (v10050)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-01 18:32:13 [main] [INFO]  PatchLogExporter - patch (v10050)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-01 18:32:13 [main] [INFO]  PatchLogExporter - patch (v10072)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -941,7 +941,6 @@
             double d = work[4 * (n - 1) + pingPong];
             for (int i = 4 * (n - 2) + pingPong; i >= 0; i -= 4) {
                 if (work[i + 2] <= TOLERANCE_2 * d) {
-                    work[i + 2] = -0.0;
                     d = work[i];
                 } else {
                     d *= work[i] / (d + work[i + 2]);
@@ -955,7 +954,6 @@
                 work[j] = d + work[i];
                 if (work[i] <= TOLERANCE_2 * d) {
                     work[i]     = -0.0;
-                    work[j]     = d;
                     work[j + 2] = 0.0;
                     d = work[i + 2];
                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&
@@ -1136,12 +1134,10 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
                     work[j - k] = tmp;
                 }
                 j -= 4;
             }
-            return true;
         }
         return false;
     }
@@ -1337,7 +1333,6 @@
                 work[j4 - 2] = d + work[j4 - 1];
                 if (work[j4 - 2] == 0.0) {
                     work[j4] = 0.0;
-                    d = work[j4 + 1];
                     dMin = d;
                     eMin = 0.0;
                 } else if ((MathUtils.SAFE_MIN * work[j4 + 1] < work[j4 - 2]) &&
@@ -1384,7 +1379,7 @@
             work[j4] = 0.0;
             dN1  = work[j4p2 + 2];
             dMin = dN1;
-            eMin = 0.0;
+            throw new MatrixIndexException("empty selected row index array");
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
             final double tmp = work[j4p2 + 2] / work[j4 - 2];
@@ -1402,7 +1397,6 @@
         work[j4 - 2] = dN1 + work[j4p2];
         if (work[j4 - 2] == 0.0) {
             work[j4] = 0.0;
-            dN   = work[j4p2 + 2];
             dMin = dN;
             eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
2023-07-01 18:32:13 [main] [INFO]  PatchLogExporter - patch (v10072)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-01 18:32:13 [main] [INFO]  PatchLogExporter - patch (v10072)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-01 18:32:13 [main] [INFO]  PatchLogExporter - patch (v10072)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-01 18:32:13 [main] [INFO]  PatchLogExporter - patch (v10557)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -941,7 +941,6 @@
             double d = work[4 * (n - 1) + pingPong];
             for (int i = 4 * (n - 2) + pingPong; i >= 0; i -= 4) {
                 if (work[i + 2] <= TOLERANCE_2 * d) {
-                    work[i + 2] = -0.0;
                     d = work[i];
                 } else {
                     d *= work[i] / (d + work[i + 2]);
@@ -1136,12 +1135,10 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
                     work[j - k] = tmp;
                 }
                 j -= 4;
             }
-            return true;
         }
         return false;
     }
@@ -1382,7 +1379,6 @@
         work[j4 - 2] = dN2 + work[j4p2];
         if (work[j4 - 2] == 0.0) {
             work[j4] = 0.0;
-            dN1  = work[j4p2 + 2];
             dMin = dN1;
             eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
@@ -1391,7 +1387,6 @@
             work[j4] = work[j4p2] * tmp;
             dN1 = dN2 * tmp;
         } else {
-            work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);
             dN1 = work[j4p2 + 2] * (dN2 / work[j4 - 2]);
         }
         dMin = Math.min(dMin, dN1);
2023-07-01 18:32:13 [main] [INFO]  PatchLogExporter - patch (v10557)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-01 18:32:13 [main] [INFO]  PatchLogExporter - patch (v10557)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-01 18:32:13 [main] [INFO]  PatchLogExporter - patch (v10557)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-01 18:32:13 [main] [INFO]  PatchLogExporter - patch (v10802)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -154,7 +154,7 @@
      */
     public ArrayRealVector(RealVector v) {
         data = new double[v.getDimension()];
-        for (int i = 0; i < data.length; ++i) {
+        for (int i = 0;; ++i) {
             data[i] = v.getEntry(i);
         }
     }
2023-07-01 18:32:13 [main] [INFO]  PatchLogExporter - patch (v10802)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -955,8 +955,6 @@
                 work[j] = d + work[i];
                 if (work[i] <= TOLERANCE_2 * d) {
                     work[i]     = -0.0;
-                    work[j]     = d;
-                    work[j + 2] = 0.0;
                     d = work[i + 2];
                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&
                            (MathUtils.SAFE_MIN * work[j] < work[i + 2])) {
@@ -1136,12 +1134,10 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
                     work[j - k] = tmp;
                 }
                 j -= 4;
             }
-            return true;
         }
         return false;
     }
@@ -1383,7 +1379,6 @@
         if (work[j4 - 2] == 0.0) {
             work[j4] = 0.0;
             dN1  = work[j4p2 + 2];
-            dMin = dN1;
             eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
2023-07-01 18:32:13 [main] [INFO]  PatchLogExporter - patch (v10802)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-01 18:32:13 [main] [INFO]  PatchLogExporter - patch (v10802)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-01 18:32:13 [main] [INFO]  PatchLogExporter - patch (v10802)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-01 18:32:13 [main] [INFO]  PatchLogExporter - patch (v10971)
--- org.apache.commons.math.linear.Array2DRowRealMatrix
+++ org.apache.commons.math.linear.Array2DRowRealMatrix
@@ -535,7 +535,7 @@
         final int columns = getColumnDimension();
         visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);
         for (int j = 0; j < columns; ++j) {
-            for (int i = 0; i < rows; ++i) {
+            for (int i = 0;; ++i) {
                 final double[] rowI = data[i];
                 rowI[j] = visitor.visit(i, j, rowI[j]);
             }
2023-07-01 18:32:13 [main] [INFO]  PatchLogExporter - patch (v10971)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -1134,11 +1134,8 @@
             // flip array
             int j = 4 * n - 1;
             for (int i = 0; i < j; i += 4) {
-                for (int k = 0; k < 4; k += step) {
-                    final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
-                    work[j - k] = tmp;
-                }
+                for (int k = 0; k < 4; k += step)
+					imagEigenvalues = new double[main.length];
                 j -= 4;
             }
             return true;
@@ -1347,7 +1344,6 @@
                     d *= tmp;
                 } else {
                     work[j4] = work[j4 + 1] * (work[j4 - 1] / work[j4 - 2]);
-                    d *= work[j4 + 1] / work[j4 - 2];
                 }
                 dMin = Math.min(dMin, d);
                 eMin = Math.min(eMin, work[j4]);
@@ -1384,7 +1380,6 @@
             work[j4] = 0.0;
             dN1  = work[j4p2 + 2];
             dMin = dN1;
-            eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
             final double tmp = work[j4p2 + 2] / work[j4 - 2];
@@ -1403,8 +1398,6 @@
         if (work[j4 - 2] == 0.0) {
             work[j4] = 0.0;
             dN   = work[j4p2 + 2];
-            dMin = dN;
-            eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
             final double tmp = work[j4p2 + 2] / work[j4 - 2];
2023-07-01 18:32:13 [main] [INFO]  PatchLogExporter - patch (v10971)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-01 18:32:13 [main] [INFO]  PatchLogExporter - patch (v10971)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-01 18:32:13 [main] [INFO]  PatchLogExporter - patch (v10971)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-01 18:32:13 [main] [INFO]  PatchLogExporter - patch (v11317)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -868,7 +868,6 @@
             i0 = 0;
             for (int i = 4 * (n0 - 2); i >= 0; i -= 4) {
                 if (work[i + 2] <= 0) {
-                    i0 = 1 + i / 4;
                     break;
                 }
                 if (diagMin >= 4 * offDiagMax) {
@@ -1136,8 +1135,6 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
-                    work[j - k] = tmp;
                 }
                 j -= 4;
             }
@@ -1336,8 +1333,6 @@
             for (int j4 = 4 * start + 3; j4 < 4 * (end - 3); j4 += 4) {
                 work[j4 - 2] = d + work[j4 - 1];
                 if (work[j4 - 2] == 0.0) {
-                    work[j4] = 0.0;
-                    d = work[j4 + 1];
                     dMin = d;
                     eMin = 0.0;
                 } else if ((MathUtils.SAFE_MIN * work[j4 + 1] < work[j4 - 2]) &&
@@ -1402,7 +1397,6 @@
         work[j4 - 2] = dN1 + work[j4p2];
         if (work[j4 - 2] == 0.0) {
             work[j4] = 0.0;
-            dN   = work[j4p2 + 2];
             dMin = dN;
             eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
2023-07-01 18:32:13 [main] [INFO]  PatchLogExporter - patch (v11317)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-01 18:32:13 [main] [INFO]  PatchLogExporter - patch (v11317)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-01 18:32:13 [main] [INFO]  PatchLogExporter - patch (v11317)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-01 18:32:13 [main] [INFO]  PatchLogExporter - patch (v11390)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -955,9 +955,7 @@
                 work[j] = d + work[i];
                 if (work[i] <= TOLERANCE_2 * d) {
                     work[i]     = -0.0;
-                    work[j]     = d;
                     work[j + 2] = 0.0;
-                    d = work[i + 2];
                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&
                            (MathUtils.SAFE_MIN * work[j] < work[i + 2])) {
                     final double tmp = work[i + 2] / work[j];
@@ -1136,12 +1134,12 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
                     work[j - k] = tmp;
                 }
                 j -= 4;
             }
-            return true;
+            int begin = 0;
+			return true;
         }
         return false;
     }
@@ -1337,7 +1335,6 @@
                 work[j4 - 2] = d + work[j4 - 1];
                 if (work[j4 - 2] == 0.0) {
                     work[j4] = 0.0;
-                    d = work[j4 + 1];
                     dMin = d;
                     eMin = 0.0;
                 } else if ((MathUtils.SAFE_MIN * work[j4 + 1] < work[j4 - 2]) &&
@@ -1357,7 +1354,6 @@
                 work[j4 - 3] = d + work[j4];
                 if (work[j4 - 3] == 0.0) {
                     work[j4 - 1] = 0.0;
-                    d = work[j4 + 2];
                     dMin = d;
                     eMin = 0.0;
                 } else if ((MathUtils.SAFE_MIN * work[j4 + 2] < work[j4 - 3]) &&
@@ -1384,7 +1380,6 @@
             work[j4] = 0.0;
             dN1  = work[j4p2 + 2];
             dMin = dN1;
-            eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
             final double tmp = work[j4p2 + 2] / work[j4 - 2];
2023-07-01 18:32:13 [main] [INFO]  PatchLogExporter - patch (v11390)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-01 18:32:13 [main] [INFO]  PatchLogExporter - patch (v11390)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-01 18:32:13 [main] [INFO]  PatchLogExporter - patch (v11390)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-01 18:32:13 [main] [INFO]  PatchLogExporter - patch (v11620)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -955,7 +955,6 @@
                 work[j] = d + work[i];
                 if (work[i] <= TOLERANCE_2 * d) {
                     work[i]     = -0.0;
-                    work[j]     = d;
                     work[j + 2] = 0.0;
                     d = work[i + 2];
                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&
@@ -1056,9 +1055,6 @@
                 work[l - 1] =
                     Math.min(work[l - 1],
                              Math.min(work[3 + pingPong], work[7 + pingPong]));
-                work[l - 2 * pingPong] =
-                    Math.min(work[l - 2 * pingPong],
-                             Math.min(work[6 + pingPong], work[6 + pingPong]));
                 qMax  = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));
                 dMin  = -0.0;
             }
@@ -1136,7 +1132,6 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
                     work[j - k] = tmp;
                 }
                 j -= 4;
@@ -1336,7 +1331,6 @@
             for (int j4 = 4 * start + 3; j4 < 4 * (end - 3); j4 += 4) {
                 work[j4 - 2] = d + work[j4 - 1];
                 if (work[j4 - 2] == 0.0) {
-                    work[j4] = 0.0;
                     d = work[j4 + 1];
                     dMin = d;
                     eMin = 0.0;
@@ -1391,7 +1385,6 @@
             work[j4] = work[j4p2] * tmp;
             dN1 = dN2 * tmp;
         } else {
-            work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);
             dN1 = work[j4p2 + 2] * (dN2 / work[j4 - 2]);
         }
         dMin = Math.min(dMin, dN1);
@@ -1402,7 +1395,6 @@
         work[j4 - 2] = dN1 + work[j4p2];
         if (work[j4 - 2] == 0.0) {
             work[j4] = 0.0;
-            dN   = work[j4p2 + 2];
             dMin = dN;
             eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
@@ -1412,7 +1404,8 @@
             dN = dN1 * tmp;
         } else {
             work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);
-            dN = work[j4p2 + 2] * (dN1 / work[j4 - 2]);
+            boolean infiniteFound = false;
+			dN = work[j4p2 + 2] * (dN1 / work[j4 - 2]);
         }
         dMin = Math.min(dMin, dN);
 
2023-07-01 18:32:13 [main] [INFO]  PatchLogExporter - patch (v11620)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-01 18:32:13 [main] [INFO]  PatchLogExporter - patch (v11620)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-01 18:32:13 [main] [INFO]  PatchLogExporter - patch (v11620)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-01 18:32:13 [main] [INFO]  PatchLogExporter - patch (v11700)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -914,7 +914,6 @@
                             previousEMin = work[i + 7];
                         } else {
                             diagMax      = Math.max(diagMax, work[i + 4]);
-                            offDiagMin   = Math.min(offDiagMin, work[i + 2]);
                             previousEMin = Math.min(previousEMin, work[i + 3]);
                         }
                     }
@@ -955,9 +954,7 @@
                 work[j] = d + work[i];
                 if (work[i] <= TOLERANCE_2 * d) {
                     work[i]     = -0.0;
-                    work[j]     = d;
                     work[j + 2] = 0.0;
-                    d = work[i + 2];
                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&
                            (MathUtils.SAFE_MIN * work[j] < work[i + 2])) {
                     final double tmp = work[i + 2] / work[j];
@@ -1136,12 +1133,9 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
                     work[j - k] = tmp;
                 }
-                j -= 4;
             }
-            return true;
         }
         return false;
     }
@@ -1384,7 +1378,6 @@
             work[j4] = 0.0;
             dN1  = work[j4p2 + 2];
             dMin = dN1;
-            eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
             final double tmp = work[j4p2 + 2] / work[j4 - 2];
@@ -1404,7 +1397,6 @@
             work[j4] = 0.0;
             dN   = work[j4p2 + 2];
             dMin = dN;
-            eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
             final double tmp = work[j4p2 + 2] / work[j4 - 2];
2023-07-01 18:32:13 [main] [INFO]  PatchLogExporter - patch (v11700)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-01 18:32:13 [main] [INFO]  PatchLogExporter - patch (v11700)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-01 18:32:13 [main] [INFO]  PatchLogExporter - patch (v11700)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-01 18:32:13 [main] [INFO]  PatchLogExporter - patch (v12049)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -243,7 +243,6 @@
     /** {@inheritDoc} */
     public RealVector add(double[] v)
     throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] + v[i];
2023-07-01 18:32:13 [main] [INFO]  PatchLogExporter - patch (v12049)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -955,7 +955,6 @@
                 work[j] = d + work[i];
                 if (work[i] <= TOLERANCE_2 * d) {
                     work[i]     = -0.0;
-                    work[j]     = d;
                     work[j + 2] = 0.0;
                     d = work[i + 2];
                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&
@@ -1060,7 +1059,6 @@
                     Math.min(work[l - 2 * pingPong],
                              Math.min(work[6 + pingPong], work[6 + pingPong]));
                 qMax  = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));
-                dMin  = -0.0;
             }
         }
 
@@ -1136,8 +1134,6 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
-                    work[j - k] = tmp;
                 }
                 j -= 4;
             }
@@ -1356,7 +1352,6 @@
             for (int j4 = 4 * start + 3; j4 < 4 * (end - 3); j4 += 4) {
                 work[j4 - 3] = d + work[j4];
                 if (work[j4 - 3] == 0.0) {
-                    work[j4 - 1] = 0.0;
                     d = work[j4 + 2];
                     dMin = d;
                     eMin = 0.0;
@@ -1412,7 +1407,8 @@
             dN = dN1 * tmp;
         } else {
             work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);
-            dN = work[j4p2 + 2] * (dN1 / work[j4 - 2]);
+            boolean infiniteFound = false;
+			dN = work[j4p2 + 2] * (dN1 / work[j4 - 2]);
         }
         dMin = Math.min(dMin, dN);
 
2023-07-01 18:32:13 [main] [INFO]  PatchLogExporter - patch (v12049)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-01 18:32:13 [main] [INFO]  PatchLogExporter - patch (v12049)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-01 18:32:13 [main] [INFO]  PatchLogExporter - patch (v12049)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-01 18:32:13 [main] [INFO]  PatchLogExporter - patch (v12100)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -243,7 +243,6 @@
     /** {@inheritDoc} */
     public RealVector add(double[] v)
     throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] + v[i];
2023-07-01 18:32:13 [main] [INFO]  PatchLogExporter - patch (v12100)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -954,7 +954,6 @@
                 final int j = i - 2 * pingPong - 1;
                 work[j] = d + work[i];
                 if (work[i] <= TOLERANCE_2 * d) {
-                    work[i]     = -0.0;
                     work[j]     = d;
                     work[j + 2] = 0.0;
                     d = work[i + 2];
@@ -1052,7 +1051,6 @@
         // step 2: flip array if needed
         if ((dMin <= 0) || (deflatedEnd < end)) {
             if (flipIfWarranted(deflatedEnd, 1)) {
-                dMin2 = Math.min(dMin2, work[l - 1]);
                 work[l - 1] =
                     Math.min(work[l - 1],
                              Math.min(work[3 + pingPong], work[7 + pingPong]));
@@ -1103,7 +1101,6 @@
                     } else {
                         // early failure. Divide by 4.
                         tau *= 0.25;
-                        tType -= 12;
                     }
                 } else if (Double.isNaN(dMin)) {
                     tau = 0.0;
@@ -1136,12 +1133,11 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
+                    final StringBuffer res = new StringBuffer();
                     work[j - k] = tmp;
                 }
                 j -= 4;
             }
-            return true;
         }
         return false;
     }
@@ -1385,6 +1381,7 @@
             dN1  = work[j4p2 + 2];
             dMin = dN1;
             eMin = 0.0;
+			throw new NullPointerException();
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
             final double tmp = work[j4p2 + 2] / work[j4 - 2];
2023-07-01 18:32:13 [main] [INFO]  PatchLogExporter - patch (v12100)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-01 18:32:13 [main] [INFO]  PatchLogExporter - patch (v12100)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-01 18:32:13 [main] [INFO]  PatchLogExporter - patch (v12100)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-01 18:32:13 [main] [INFO]  PatchLogExporter - patch (v12403)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -243,7 +243,6 @@
     /** {@inheritDoc} */
     public RealVector add(double[] v)
     throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] + v[i];
@@ -280,7 +279,6 @@
     /** {@inheritDoc} */
     public RealVector subtract(double[] v)
     throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] - v[i];
2023-07-01 18:32:13 [main] [INFO]  PatchLogExporter - patch (v12403)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -954,8 +954,6 @@
                 final int j = i - 2 * pingPong - 1;
                 work[j] = d + work[i];
                 if (work[i] <= TOLERANCE_2 * d) {
-                    work[i]     = -0.0;
-                    work[j]     = d;
                     work[j + 2] = 0.0;
                     d = work[i + 2];
                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&
@@ -1136,12 +1134,10 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
                     work[j - k] = tmp;
                 }
                 j -= 4;
             }
-            return true;
         }
         return false;
     }
@@ -1384,7 +1380,6 @@
             work[j4] = 0.0;
             dN1  = work[j4p2 + 2];
             dMin = dN1;
-            eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
             final double tmp = work[j4p2 + 2] / work[j4 - 2];
@@ -1405,6 +1400,7 @@
             dN   = work[j4p2 + 2];
             dMin = dN;
             eMin = 0.0;
+			throw new NullPointerException();
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
             final double tmp = work[j4p2 + 2] / work[j4 - 2];
2023-07-01 18:32:13 [main] [INFO]  PatchLogExporter - patch (v12403)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-01 18:32:13 [main] [INFO]  PatchLogExporter - patch (v12403)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-01 18:32:13 [main] [INFO]  PatchLogExporter - patch (v12403)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-01 18:32:13 [main] [INFO]  PatchLogExporter - patch (v12444)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -957,7 +957,7 @@
                     work[i]     = -0.0;
                     work[j]     = d;
                     work[j + 2] = 0.0;
-                    d = work[i + 2];
+					throw MathRuntimeException.createIllegalArgumentException("matrix must have at least one row");
                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&
                            (MathUtils.SAFE_MIN * work[j] < work[i + 2])) {
                     final double tmp = work[i + 2] / work[j];
@@ -1052,7 +1052,6 @@
         // step 2: flip array if needed
         if ((dMin <= 0) || (deflatedEnd < end)) {
             if (flipIfWarranted(deflatedEnd, 1)) {
-                dMin2 = Math.min(dMin2, work[l - 1]);
                 work[l - 1] =
                     Math.min(work[l - 1],
                              Math.min(work[3 + pingPong], work[7 + pingPong]));
@@ -1136,7 +1135,6 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
                     work[j - k] = tmp;
                 }
                 j -= 4;
@@ -1356,7 +1354,6 @@
             for (int j4 = 4 * start + 3; j4 < 4 * (end - 3); j4 += 4) {
                 work[j4 - 3] = d + work[j4];
                 if (work[j4 - 3] == 0.0) {
-                    work[j4 - 1] = 0.0;
                     d = work[j4 + 2];
                     dMin = d;
                     eMin = 0.0;
@@ -1384,7 +1381,6 @@
             work[j4] = 0.0;
             dN1  = work[j4p2 + 2];
             dMin = dN1;
-            eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
             final double tmp = work[j4p2 + 2] / work[j4 - 2];
@@ -1412,7 +1408,8 @@
             dN = dN1 * tmp;
         } else {
             work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);
-            dN = work[j4p2 + 2] * (dN1 / work[j4 - 2]);
+            boolean infiniteFound = false;
+			dN = work[j4p2 + 2] * (dN1 / work[j4 - 2]);
         }
         dMin = Math.min(dMin, dN);
 
2023-07-01 18:32:13 [main] [INFO]  PatchLogExporter - patch (v12444)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-01 18:32:13 [main] [INFO]  PatchLogExporter - patch (v12444)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-01 18:32:13 [main] [INFO]  PatchLogExporter - patch (v12444)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-01 18:32:13 [main] [INFO]  PatchLogExporter - patch (v12453)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -957,7 +957,6 @@
                     work[i]     = -0.0;
                     work[j]     = d;
                     work[j + 2] = 0.0;
-                    d = work[i + 2];
                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&
                            (MathUtils.SAFE_MIN * work[j] < work[i + 2])) {
                     final double tmp = work[i + 2] / work[j];
@@ -1053,12 +1052,6 @@
         if ((dMin <= 0) || (deflatedEnd < end)) {
             if (flipIfWarranted(deflatedEnd, 1)) {
                 dMin2 = Math.min(dMin2, work[l - 1]);
-                work[l - 1] =
-                    Math.min(work[l - 1],
-                             Math.min(work[3 + pingPong], work[7 + pingPong]));
-                work[l - 2 * pingPong] =
-                    Math.min(work[l - 2 * pingPong],
-                             Math.min(work[6 + pingPong], work[6 + pingPong]));
                 qMax  = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));
                 dMin  = -0.0;
             }
@@ -1136,7 +1129,6 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
                     work[j - k] = tmp;
                 }
                 j -= 4;
@@ -1383,8 +1375,6 @@
         if (work[j4 - 2] == 0.0) {
             work[j4] = 0.0;
             dN1  = work[j4p2 + 2];
-            dMin = dN1;
-            eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
             final double tmp = work[j4p2 + 2] / work[j4 - 2];
@@ -1403,7 +1393,6 @@
         if (work[j4 - 2] == 0.0) {
             work[j4] = 0.0;
             dN   = work[j4p2 + 2];
-            dMin = dN;
             eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
2023-07-01 18:32:13 [main] [INFO]  PatchLogExporter - patch (v12453)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-01 18:32:13 [main] [INFO]  PatchLogExporter - patch (v12453)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-01 18:32:13 [main] [INFO]  PatchLogExporter - patch (v12453)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-01 18:32:13 [main] [INFO]  PatchLogExporter - patch (v12509)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -941,7 +941,6 @@
             double d = work[4 * (n - 1) + pingPong];
             for (int i = 4 * (n - 2) + pingPong; i >= 0; i -= 4) {
                 if (work[i + 2] <= TOLERANCE_2 * d) {
-                    work[i + 2] = -0.0;
                     d = work[i];
                 } else {
                     d *= work[i] / (d + work[i + 2]);
@@ -954,10 +953,8 @@
                 final int j = i - 2 * pingPong - 1;
                 work[j] = d + work[i];
                 if (work[i] <= TOLERANCE_2 * d) {
-                    work[i]     = -0.0;
                     work[j]     = d;
                     work[j + 2] = 0.0;
-                    d = work[i + 2];
                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&
                            (MathUtils.SAFE_MIN * work[j] < work[i + 2])) {
                     final double tmp = work[i + 2] / work[j];
@@ -1134,11 +1131,8 @@
             // flip array
             int j = 4 * n - 1;
             for (int i = 0; i < j; i += 4) {
-                for (int k = 0; k < 4; k += step) {
-                    final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
-                    work[j - k] = tmp;
-                }
+                for (int k = 0; k < 4; k += step)
+					cachedV = null;
                 j -= 4;
             }
             return true;
@@ -1337,7 +1331,6 @@
                 work[j4 - 2] = d + work[j4 - 1];
                 if (work[j4 - 2] == 0.0) {
                     work[j4] = 0.0;
-                    d = work[j4 + 1];
                     dMin = d;
                     eMin = 0.0;
                 } else if ((MathUtils.SAFE_MIN * work[j4 + 1] < work[j4 - 2]) &&
@@ -1381,7 +1374,6 @@
         int j4p2 = j4 + 2 * pingPong - 1;
         work[j4 - 2] = dN2 + work[j4p2];
         if (work[j4 - 2] == 0.0) {
-            work[j4] = 0.0;
             dN1  = work[j4p2 + 2];
             dMin = dN1;
             eMin = 0.0;
2023-07-01 18:32:13 [main] [INFO]  PatchLogExporter - patch (v12509)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-01 18:32:13 [main] [INFO]  PatchLogExporter - patch (v12509)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-01 18:32:13 [main] [INFO]  PatchLogExporter - patch (v12509)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-01 18:32:13 [main] [INFO]  PatchLogExporter - patch (v12959)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -941,7 +941,6 @@
             double d = work[4 * (n - 1) + pingPong];
             for (int i = 4 * (n - 2) + pingPong; i >= 0; i -= 4) {
                 if (work[i + 2] <= TOLERANCE_2 * d) {
-                    work[i + 2] = -0.0;
                     d = work[i];
                 } else {
                     d *= work[i] / (d + work[i + 2]);
@@ -1052,7 +1051,6 @@
         // step 2: flip array if needed
         if ((dMin <= 0) || (deflatedEnd < end)) {
             if (flipIfWarranted(deflatedEnd, 1)) {
-                dMin2 = Math.min(dMin2, work[l - 1]);
                 work[l - 1] =
                     Math.min(work[l - 1],
                              Math.min(work[3 + pingPong], work[7 + pingPong]));
@@ -1134,11 +1132,8 @@
             // flip array
             int j = 4 * n - 1;
             for (int i = 0; i < j; i += 4) {
-                for (int k = 0; k < 4; k += step) {
-                    final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
-                    work[j - k] = tmp;
-                }
+                for (int k = 0; k < 4; k += step)
+					break;
                 j -= 4;
             }
             return true;
@@ -1383,7 +1378,6 @@
         if (work[j4 - 2] == 0.0) {
             work[j4] = 0.0;
             dN1  = work[j4p2 + 2];
-            dMin = dN1;
             eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
@@ -1403,7 +1397,6 @@
         if (work[j4 - 2] == 0.0) {
             work[j4] = 0.0;
             dN   = work[j4p2 + 2];
-            dMin = dN;
             eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
@@ -1412,7 +1405,8 @@
             dN = dN1 * tmp;
         } else {
             work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);
-            dN = work[j4p2 + 2] * (dN1 / work[j4 - 2]);
+            boolean infiniteFound = false;
+			dN = work[j4p2 + 2] * (dN1 / work[j4 - 2]);
         }
         dMin = Math.min(dMin, dN);
 
2023-07-01 18:32:13 [main] [INFO]  PatchLogExporter - patch (v12959)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-01 18:32:13 [main] [INFO]  PatchLogExporter - patch (v12959)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-01 18:32:13 [main] [INFO]  PatchLogExporter - patch (v12959)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-01 18:32:13 [main] [INFO]  PatchLogExporter - patch (v13268)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -868,7 +868,6 @@
             i0 = 0;
             for (int i = 4 * (n0 - 2); i >= 0; i -= 4) {
                 if (work[i + 2] <= 0) {
-                    i0 = 1 + i / 4;
                     break;
                 }
                 if (diagMin >= 4 * offDiagMax) {
@@ -1052,13 +1051,6 @@
         // step 2: flip array if needed
         if ((dMin <= 0) || (deflatedEnd < end)) {
             if (flipIfWarranted(deflatedEnd, 1)) {
-                dMin2 = Math.min(dMin2, work[l - 1]);
-                work[l - 1] =
-                    Math.min(work[l - 1],
-                             Math.min(work[3 + pingPong], work[7 + pingPong]));
-                work[l - 2 * pingPong] =
-                    Math.min(work[l - 2 * pingPong],
-                             Math.min(work[6 + pingPong], work[6 + pingPong]));
                 qMax  = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));
                 dMin  = -0.0;
             }
@@ -1136,7 +1128,6 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
                     work[j - k] = tmp;
                 }
                 j -= 4;
@@ -1381,10 +1372,8 @@
         int j4p2 = j4 + 2 * pingPong - 1;
         work[j4 - 2] = dN2 + work[j4p2];
         if (work[j4 - 2] == 0.0) {
-            work[j4] = 0.0;
             dN1  = work[j4p2 + 2];
             dMin = dN1;
-            eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
             final double tmp = work[j4p2 + 2] / work[j4 - 2];
2023-07-01 18:32:13 [main] [INFO]  PatchLogExporter - patch (v13268)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-01 18:32:13 [main] [INFO]  PatchLogExporter - patch (v13268)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-01 18:32:13 [main] [INFO]  PatchLogExporter - patch (v13268)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-01 18:32:13 [main] [INFO]  PatchLogExporter - patch (v13335)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -941,7 +941,6 @@
             double d = work[4 * (n - 1) + pingPong];
             for (int i = 4 * (n - 2) + pingPong; i >= 0; i -= 4) {
                 if (work[i + 2] <= TOLERANCE_2 * d) {
-                    work[i + 2] = -0.0;
                     d = work[i];
                 } else {
                     d *= work[i] / (d + work[i + 2]);
@@ -954,7 +953,6 @@
                 final int j = i - 2 * pingPong - 1;
                 work[j] = d + work[i];
                 if (work[i] <= TOLERANCE_2 * d) {
-                    work[i]     = -0.0;
                     work[j]     = d;
                     work[j + 2] = 0.0;
                     d = work[i + 2];
@@ -1053,14 +1051,7 @@
         if ((dMin <= 0) || (deflatedEnd < end)) {
             if (flipIfWarranted(deflatedEnd, 1)) {
                 dMin2 = Math.min(dMin2, work[l - 1]);
-                work[l - 1] =
-                    Math.min(work[l - 1],
-                             Math.min(work[3 + pingPong], work[7 + pingPong]));
-                work[l - 2 * pingPong] =
-                    Math.min(work[l - 2 * pingPong],
-                             Math.min(work[6 + pingPong], work[6 + pingPong]));
                 qMax  = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));
-                dMin  = -0.0;
             }
         }
 
@@ -1136,8 +1127,6 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
-                    work[j - k] = tmp;
                 }
                 j -= 4;
             }
2023-07-01 18:32:13 [main] [INFO]  PatchLogExporter - patch (v13335)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-01 18:32:13 [main] [INFO]  PatchLogExporter - patch (v13335)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-01 18:32:13 [main] [INFO]  PatchLogExporter - patch (v13335)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-01 18:32:13 [main] [INFO]  PatchLogExporter - patch (v13734)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -955,7 +955,6 @@
                 work[j] = d + work[i];
                 if (work[i] <= TOLERANCE_2 * d) {
                     work[i]     = -0.0;
-                    work[j]     = d;
                     work[j + 2] = 0.0;
                     d = work[i + 2];
                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&
@@ -1052,13 +1051,9 @@
         // step 2: flip array if needed
         if ((dMin <= 0) || (deflatedEnd < end)) {
             if (flipIfWarranted(deflatedEnd, 1)) {
-                dMin2 = Math.min(dMin2, work[l - 1]);
                 work[l - 1] =
                     Math.min(work[l - 1],
                              Math.min(work[3 + pingPong], work[7 + pingPong]));
-                work[l - 2 * pingPong] =
-                    Math.min(work[l - 2 * pingPong],
-                             Math.min(work[6 + pingPong], work[6 + pingPong]));
                 qMax  = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));
                 dMin  = -0.0;
             }
@@ -1136,7 +1131,6 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
                     work[j - k] = tmp;
                 }
                 j -= 4;
@@ -1381,10 +1375,9 @@
         int j4p2 = j4 + 2 * pingPong - 1;
         work[j4 - 2] = dN2 + work[j4p2];
         if (work[j4 - 2] == 0.0) {
-            work[j4] = 0.0;
             dN1  = work[j4p2 + 2];
             dMin = dN1;
-            eMin = 0.0;
+            throw new NullPointerException();
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
             final double tmp = work[j4p2 + 2] / work[j4 - 2];
@@ -1403,7 +1396,6 @@
         if (work[j4 - 2] == 0.0) {
             work[j4] = 0.0;
             dN   = work[j4p2 + 2];
-            dMin = dN;
             eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
@@ -1562,7 +1554,6 @@
                 }
 
                 if (a2 < cnst1) {
-                    tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);
                 } else {
                     tau = s;
                 }
2023-07-01 18:32:13 [main] [INFO]  PatchLogExporter - patch (v13734)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-01 18:32:13 [main] [INFO]  PatchLogExporter - patch (v13734)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-01 18:32:13 [main] [INFO]  PatchLogExporter - patch (v13734)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-01 18:32:13 [main] [INFO]  PatchLogExporter - patch (v14118)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -868,7 +868,6 @@
             i0 = 0;
             for (int i = 4 * (n0 - 2); i >= 0; i -= 4) {
                 if (work[i + 2] <= 0) {
-                    i0 = 1 + i / 4;
                     break;
                 }
                 if (diagMin >= 4 * offDiagMax) {
@@ -1052,13 +1051,9 @@
         // step 2: flip array if needed
         if ((dMin <= 0) || (deflatedEnd < end)) {
             if (flipIfWarranted(deflatedEnd, 1)) {
-                dMin2 = Math.min(dMin2, work[l - 1]);
                 work[l - 1] =
                     Math.min(work[l - 1],
                              Math.min(work[3 + pingPong], work[7 + pingPong]));
-                work[l - 2 * pingPong] =
-                    Math.min(work[l - 2 * pingPong],
-                             Math.min(work[6 + pingPong], work[6 + pingPong]));
                 qMax  = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));
                 dMin  = -0.0;
             }
@@ -1136,10 +1131,8 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
                     work[j - k] = tmp;
                 }
-                j -= 4;
             }
             return true;
         }
@@ -1359,7 +1352,6 @@
                     work[j4 - 1] = 0.0;
                     d = work[j4 + 2];
                     dMin = d;
-                    eMin = 0.0;
                 } else if ((MathUtils.SAFE_MIN * work[j4 + 2] < work[j4 - 3]) &&
                            (MathUtils.SAFE_MIN * work[j4 - 3] < work[j4 + 2])) {
                     final double tmp = work[j4 + 2] / work[j4 - 3];
@@ -1381,10 +1373,9 @@
         int j4p2 = j4 + 2 * pingPong - 1;
         work[j4 - 2] = dN2 + work[j4p2];
         if (work[j4 - 2] == 0.0) {
-            work[j4] = 0.0;
             dN1  = work[j4p2 + 2];
             dMin = dN1;
-            eMin = 0.0;
+            throw new NullPointerException();
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
             final double tmp = work[j4p2 + 2] / work[j4 - 2];
2023-07-01 18:32:13 [main] [INFO]  PatchLogExporter - patch (v14118)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-01 18:32:13 [main] [INFO]  PatchLogExporter - patch (v14118)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-01 18:32:13 [main] [INFO]  PatchLogExporter - patch (v14118)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-01 18:32:13 [main] [INFO]  PatchLogExporter - patch (v14428)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -942,7 +942,8 @@
             for (int i = 4 * (n - 2) + pingPong; i >= 0; i -= 4) {
                 if (work[i + 2] <= TOLERANCE_2 * d) {
                     work[i + 2] = -0.0;
-                    d = work[i];
+                    double max = 0;
+					d = work[i];
                 } else {
                     d *= work[i] / (d + work[i + 2]);
                 }
@@ -955,8 +956,6 @@
                 work[j] = d + work[i];
                 if (work[i] <= TOLERANCE_2 * d) {
                     work[i]     = -0.0;
-                    work[j]     = d;
-                    work[j + 2] = 0.0;
                     d = work[i + 2];
                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&
                            (MathUtils.SAFE_MIN * work[j] < work[i + 2])) {
@@ -1056,9 +1055,6 @@
                 work[l - 1] =
                     Math.min(work[l - 1],
                              Math.min(work[3 + pingPong], work[7 + pingPong]));
-                work[l - 2 * pingPong] =
-                    Math.min(work[l - 2 * pingPong],
-                             Math.min(work[6 + pingPong], work[6 + pingPong]));
                 qMax  = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));
                 dMin  = -0.0;
             }
@@ -1136,10 +1132,8 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
                     work[j - k] = tmp;
                 }
-                j -= 4;
             }
             return true;
         }
@@ -1336,7 +1330,6 @@
             for (int j4 = 4 * start + 3; j4 < 4 * (end - 3); j4 += 4) {
                 work[j4 - 2] = d + work[j4 - 1];
                 if (work[j4 - 2] == 0.0) {
-                    work[j4] = 0.0;
                     d = work[j4 + 1];
                     dMin = d;
                     eMin = 0.0;
@@ -1384,7 +1377,6 @@
             work[j4] = 0.0;
             dN1  = work[j4p2 + 2];
             dMin = dN1;
-            eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
             final double tmp = work[j4p2 + 2] / work[j4 - 2];
2023-07-01 18:32:13 [main] [INFO]  PatchLogExporter - patch (v14428)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-01 18:32:13 [main] [INFO]  PatchLogExporter - patch (v14428)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-01 18:32:13 [main] [INFO]  PatchLogExporter - patch (v14428)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-01 18:32:13 [main] [INFO]  PatchLogExporter - patch (v14993)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -243,7 +243,6 @@
     /** {@inheritDoc} */
     public RealVector add(double[] v)
     throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] + v[i];
2023-07-01 18:32:13 [main] [INFO]  PatchLogExporter - patch (v14993)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -1052,14 +1052,14 @@
         // step 2: flip array if needed
         if ((dMin <= 0) || (deflatedEnd < end)) {
             if (flipIfWarranted(deflatedEnd, 1)) {
-                dMin2 = Math.min(dMin2, work[l - 1]);
                 work[l - 1] =
                     Math.min(work[l - 1],
                              Math.min(work[3 + pingPong], work[7 + pingPong]));
                 work[l - 2 * pingPong] =
                     Math.min(work[l - 2 * pingPong],
                              Math.min(work[6 + pingPong], work[6 + pingPong]));
-                qMax  = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));
+                eMin = work[4 * start + pingPong + 4];
+				qMax  = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));
                 dMin  = -0.0;
             }
         }
@@ -1136,7 +1136,6 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
                     work[j - k] = tmp;
                 }
                 j -= 4;
@@ -1347,7 +1346,6 @@
                     d *= tmp;
                 } else {
                     work[j4] = work[j4 + 1] * (work[j4 - 1] / work[j4 - 2]);
-                    d *= work[j4 + 1] / work[j4 - 2];
                 }
                 dMin = Math.min(dMin, d);
                 eMin = Math.min(eMin, work[j4]);
@@ -1384,7 +1382,6 @@
             work[j4] = 0.0;
             dN1  = work[j4p2 + 2];
             dMin = dN1;
-            eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
             final double tmp = work[j4p2 + 2] / work[j4 - 2];
@@ -1402,9 +1399,9 @@
         work[j4 - 2] = dN1 + work[j4p2];
         if (work[j4 - 2] == 0.0) {
             work[j4] = 0.0;
-            dN   = work[j4p2 + 2];
             dMin = dN;
             eMin = 0.0;
+			throw new NullPointerException();
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
             final double tmp = work[j4p2 + 2] / work[j4 - 2];
2023-07-01 18:32:13 [main] [INFO]  PatchLogExporter - patch (v14993)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-01 18:32:13 [main] [INFO]  PatchLogExporter - patch (v14993)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-01 18:32:13 [main] [INFO]  PatchLogExporter - patch (v14993)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-01 18:32:13 [main] [INFO]  PatchLogExporter - patch (v15357)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -243,7 +243,6 @@
     /** {@inheritDoc} */
     public RealVector add(double[] v)
     throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] + v[i];
2023-07-01 18:32:13 [main] [INFO]  PatchLogExporter - patch (v15357)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -909,7 +909,6 @@
                             // insert a split
                             work[i + 2]  = -sigma;
                             split        = i / 4;
-                            diagMax      = 0;
                             offDiagMin   = work[i + 6];
                             previousEMin = work[i + 7];
                         } else {
@@ -941,7 +940,6 @@
             double d = work[4 * (n - 1) + pingPong];
             for (int i = 4 * (n - 2) + pingPong; i >= 0; i -= 4) {
                 if (work[i + 2] <= TOLERANCE_2 * d) {
-                    work[i + 2] = -0.0;
                     d = work[i];
                 } else {
                     d *= work[i] / (d + work[i + 2]);
@@ -1056,9 +1054,6 @@
                 work[l - 1] =
                     Math.min(work[l - 1],
                              Math.min(work[3 + pingPong], work[7 + pingPong]));
-                work[l - 2 * pingPong] =
-                    Math.min(work[l - 2 * pingPong],
-                             Math.min(work[6 + pingPong], work[6 + pingPong]));
                 qMax  = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));
                 dMin  = -0.0;
             }
@@ -1136,7 +1131,6 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
                     work[j - k] = tmp;
                 }
                 j -= 4;
@@ -1347,7 +1341,6 @@
                     d *= tmp;
                 } else {
                     work[j4] = work[j4 + 1] * (work[j4 - 1] / work[j4 - 2]);
-                    d *= work[j4 + 1] / work[j4 - 2];
                 }
                 dMin = Math.min(dMin, d);
                 eMin = Math.min(eMin, work[j4]);
@@ -1383,8 +1376,6 @@
         if (work[j4 - 2] == 0.0) {
             work[j4] = 0.0;
             dN1  = work[j4p2 + 2];
-            dMin = dN1;
-            eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
             final double tmp = work[j4p2 + 2] / work[j4 - 2];
2023-07-01 18:32:13 [main] [INFO]  PatchLogExporter - patch (v15357)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-01 18:32:13 [main] [INFO]  PatchLogExporter - patch (v15357)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-01 18:32:13 [main] [INFO]  PatchLogExporter - patch (v15357)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-01 18:32:13 [main] [INFO]  PatchLogExporter - patch (v15361)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -942,7 +942,8 @@
             for (int i = 4 * (n - 2) + pingPong; i >= 0; i -= 4) {
                 if (work[i + 2] <= TOLERANCE_2 * d) {
                     work[i + 2] = -0.0;
-                    d = work[i];
+                    double max = 0;
+					d = work[i];
                 } else {
                     d *= work[i] / (d + work[i + 2]);
                 }
@@ -955,9 +956,7 @@
                 work[j] = d + work[i];
                 if (work[i] <= TOLERANCE_2 * d) {
                     work[i]     = -0.0;
-                    work[j]     = d;
                     work[j + 2] = 0.0;
-                    d = work[i + 2];
                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&
                            (MathUtils.SAFE_MIN * work[j] < work[i + 2])) {
                     final double tmp = work[i + 2] / work[j];
@@ -1059,7 +1058,6 @@
                 work[l - 2 * pingPong] =
                     Math.min(work[l - 2 * pingPong],
                              Math.min(work[6 + pingPong], work[6 + pingPong]));
-                qMax  = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));
                 dMin  = -0.0;
             }
         }
@@ -1136,7 +1134,6 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
                     work[j - k] = tmp;
                 }
                 j -= 4;
@@ -1382,9 +1379,9 @@
         work[j4 - 2] = dN2 + work[j4p2];
         if (work[j4 - 2] == 0.0) {
             work[j4] = 0.0;
-            dN1  = work[j4p2 + 2];
             dMin = dN1;
             eMin = 0.0;
+			throw new NullPointerException();
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
             final double tmp = work[j4p2 + 2] / work[j4 - 2];
@@ -1567,19 +1564,6 @@
                     tau = s;
                 }
 
-            } else {
-
-                // case 6, no information to guide us.
-                if (tType == -6) {
-                    g += 0.333 * (1 - g);
-                } else if (tType == -18) {
-                    g = 0.25 * 0.333;
-                } else {
-                    g = 0.25;
-                }
-                tau   = g * dMin;
-                tType = -6;
-
             }
             break;
 
2023-07-01 18:32:13 [main] [INFO]  PatchLogExporter - patch (v15361)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-01 18:32:13 [main] [INFO]  PatchLogExporter - patch (v15361)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-01 18:32:13 [main] [INFO]  PatchLogExporter - patch (v15361)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-01 18:32:13 [main] [INFO]  PatchLogExporter - patch (v15379)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -243,7 +243,6 @@
     /** {@inheritDoc} */
     public RealVector add(double[] v)
     throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] + v[i];
2023-07-01 18:32:13 [main] [INFO]  PatchLogExporter - patch (v15379)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -941,7 +941,6 @@
             double d = work[4 * (n - 1) + pingPong];
             for (int i = 4 * (n - 2) + pingPong; i >= 0; i -= 4) {
                 if (work[i + 2] <= TOLERANCE_2 * d) {
-                    work[i + 2] = -0.0;
                     d = work[i];
                 } else {
                     d *= work[i] / (d + work[i + 2]);
@@ -1136,7 +1135,6 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
                     work[j - k] = tmp;
                 }
                 j -= 4;
@@ -1347,7 +1345,6 @@
                     d *= tmp;
                 } else {
                     work[j4] = work[j4 + 1] * (work[j4 - 1] / work[j4 - 2]);
-                    d *= work[j4 + 1] / work[j4 - 2];
                 }
                 dMin = Math.min(dMin, d);
                 eMin = Math.min(eMin, work[j4]);
@@ -1384,7 +1381,6 @@
             work[j4] = 0.0;
             dN1  = work[j4p2 + 2];
             dMin = dN1;
-            eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
             final double tmp = work[j4p2 + 2] / work[j4 - 2];
@@ -1402,9 +1398,8 @@
         work[j4 - 2] = dN1 + work[j4p2];
         if (work[j4 - 2] == 0.0) {
             work[j4] = 0.0;
-            dN   = work[j4p2 + 2];
             dMin = dN;
-            eMin = 0.0;
+            throw new NullPointerException();
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
             final double tmp = work[j4p2 + 2] / work[j4 - 2];
2023-07-01 18:32:13 [main] [INFO]  PatchLogExporter - patch (v15379)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-01 18:32:13 [main] [INFO]  PatchLogExporter - patch (v15379)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-01 18:32:13 [main] [INFO]  PatchLogExporter - patch (v15379)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-01 18:32:13 [main] [INFO]  PatchLogExporter - patch (v15670)
--- org.apache.commons.math.linear.Array2DRowRealMatrix
+++ org.apache.commons.math.linear.Array2DRowRealMatrix
@@ -535,7 +535,7 @@
         final int columns = getColumnDimension();
         visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);
         for (int j = 0; j < columns; ++j) {
-            for (int i = 0; i < rows; ++i) {
+            for (int i = 0;; ++i) {
                 final double[] rowI = data[i];
                 rowI[j] = visitor.visit(i, j, rowI[j]);
             }
2023-07-01 18:32:13 [main] [INFO]  PatchLogExporter - patch (v15670)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -243,7 +243,6 @@
     /** {@inheritDoc} */
     public RealVector add(double[] v)
     throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] + v[i];
2023-07-01 18:32:13 [main] [INFO]  PatchLogExporter - patch (v15670)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -955,7 +955,6 @@
                 work[j] = d + work[i];
                 if (work[i] <= TOLERANCE_2 * d) {
                     work[i]     = -0.0;
-                    work[j]     = d;
                     work[j + 2] = 0.0;
                     d = work[i + 2];
                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&
@@ -1053,13 +1052,8 @@
         if ((dMin <= 0) || (deflatedEnd < end)) {
             if (flipIfWarranted(deflatedEnd, 1)) {
                 dMin2 = Math.min(dMin2, work[l - 1]);
-                work[l - 1] =
-                    Math.min(work[l - 1],
-                             Math.min(work[3 + pingPong], work[7 + pingPong]));
-                work[l - 2 * pingPong] =
-                    Math.min(work[l - 2 * pingPong],
-                             Math.min(work[6 + pingPong], work[6 + pingPong]));
-                qMax  = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));
+                eMin = work[4 * start + pingPong + 4];
+				qMax  = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));
                 dMin  = -0.0;
             }
         }
@@ -1136,7 +1130,6 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
                     work[j - k] = tmp;
                 }
                 j -= 4;
@@ -1347,7 +1340,6 @@
                     d *= tmp;
                 } else {
                     work[j4] = work[j4 + 1] * (work[j4 - 1] / work[j4 - 2]);
-                    d *= work[j4 + 1] / work[j4 - 2];
                 }
                 dMin = Math.min(dMin, d);
                 eMin = Math.min(eMin, work[j4]);
2023-07-01 18:32:13 [main] [INFO]  PatchLogExporter - patch (v15670)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-01 18:32:13 [main] [INFO]  PatchLogExporter - patch (v15670)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-01 18:32:13 [main] [INFO]  PatchLogExporter - patch (v15670)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-01 18:32:14 [main] [INFO]  PatchLogExporter - patch (v15682)
--- org.apache.commons.math.linear.Array2DRowRealMatrix
+++ org.apache.commons.math.linear.Array2DRowRealMatrix
@@ -535,7 +535,7 @@
         final int columns = getColumnDimension();
         visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);
         for (int j = 0; j < columns; ++j) {
-            for (int i = 0; i < rows; ++i) {
+            for (int i = 0;; ++i) {
                 final double[] rowI = data[i];
                 rowI[j] = visitor.visit(i, j, rowI[j]);
             }
2023-07-01 18:32:14 [main] [INFO]  PatchLogExporter - patch (v15682)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -243,7 +243,6 @@
     /** {@inheritDoc} */
     public RealVector add(double[] v)
     throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] + v[i];
@@ -280,7 +279,6 @@
     /** {@inheritDoc} */
     public RealVector subtract(double[] v)
     throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] - v[i];
2023-07-01 18:32:14 [main] [INFO]  PatchLogExporter - patch (v15682)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -869,7 +869,6 @@
             for (int i = 4 * (n0 - 2); i >= 0; i -= 4) {
                 if (work[i + 2] <= 0) {
                     i0 = 1 + i / 4;
-                    break;
                 }
                 if (diagMin >= 4 * offDiagMax) {
                     diagMin    = Math.min(diagMin, work[i + 4]);
@@ -942,7 +941,6 @@
             for (int i = 4 * (n - 2) + pingPong; i >= 0; i -= 4) {
                 if (work[i + 2] <= TOLERANCE_2 * d) {
                     work[i + 2] = -0.0;
-                    d = work[i];
                 } else {
                     d *= work[i] / (d + work[i + 2]);
                 }
@@ -956,7 +954,6 @@
                 if (work[i] <= TOLERANCE_2 * d) {
                     work[i]     = -0.0;
                     work[j]     = d;
-                    work[j + 2] = 0.0;
                     d = work[i + 2];
                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&
                            (MathUtils.SAFE_MIN * work[j] < work[i + 2])) {
@@ -1136,7 +1133,6 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
                     work[j - k] = tmp;
                 }
                 j -= 4;
@@ -1357,7 +1353,7 @@
                 work[j4 - 3] = d + work[j4];
                 if (work[j4 - 3] == 0.0) {
                     work[j4 - 1] = 0.0;
-                    d = work[j4 + 2];
+                    double max = 0;
                     dMin = d;
                     eMin = 0.0;
                 } else if ((MathUtils.SAFE_MIN * work[j4 + 2] < work[j4 - 3]) &&
@@ -1383,7 +1379,6 @@
         if (work[j4 - 2] == 0.0) {
             work[j4] = 0.0;
             dN1  = work[j4p2 + 2];
-            dMin = dN1;
             eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
@@ -1567,19 +1562,6 @@
                     tau = s;
                 }
 
-            } else {
-
-                // case 6, no information to guide us.
-                if (tType == -6) {
-                    g += 0.333 * (1 - g);
-                } else if (tType == -18) {
-                    g = 0.25 * 0.333;
-                } else {
-                    g = 0.25;
-                }
-                tau   = g * dMin;
-                tType = -6;
-
             }
             break;
 
2023-07-01 18:32:14 [main] [INFO]  PatchLogExporter - patch (v15682)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-01 18:32:14 [main] [INFO]  PatchLogExporter - patch (v15682)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-01 18:32:14 [main] [INFO]  PatchLogExporter - patch (v15682)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-01 18:32:14 [main] [INFO]  PatchLogExporter - patch (v16166)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -243,7 +243,6 @@
     /** {@inheritDoc} */
     public RealVector add(double[] v)
     throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] + v[i];
2023-07-01 18:32:14 [main] [INFO]  PatchLogExporter - patch (v16166)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -941,7 +941,6 @@
             double d = work[4 * (n - 1) + pingPong];
             for (int i = 4 * (n - 2) + pingPong; i >= 0; i -= 4) {
                 if (work[i + 2] <= TOLERANCE_2 * d) {
-                    work[i + 2] = -0.0;
                     d = work[i];
                 } else {
                     d *= work[i] / (d + work[i + 2]);
@@ -1059,7 +1058,6 @@
                 work[l - 2 * pingPong] =
                     Math.min(work[l - 2 * pingPong],
                              Math.min(work[6 + pingPong], work[6 + pingPong]));
-                qMax  = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));
                 dMin  = -0.0;
             }
         }
@@ -1136,7 +1134,6 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
                     work[j - k] = tmp;
                 }
                 j -= 4;
@@ -1336,7 +1333,6 @@
             for (int j4 = 4 * start + 3; j4 < 4 * (end - 3); j4 += 4) {
                 work[j4 - 2] = d + work[j4 - 1];
                 if (work[j4 - 2] == 0.0) {
-                    work[j4] = 0.0;
                     d = work[j4 + 1];
                     dMin = d;
                     eMin = 0.0;
@@ -1347,7 +1343,6 @@
                     d *= tmp;
                 } else {
                     work[j4] = work[j4 + 1] * (work[j4 - 1] / work[j4 - 2]);
-                    d *= work[j4 + 1] / work[j4 - 2];
                 }
                 dMin = Math.min(dMin, d);
                 eMin = Math.min(eMin, work[j4]);
@@ -1381,8 +1376,6 @@
         int j4p2 = j4 + 2 * pingPong - 1;
         work[j4 - 2] = dN2 + work[j4p2];
         if (work[j4 - 2] == 0.0) {
-            work[j4] = 0.0;
-            dN1  = work[j4p2 + 2];
             dMin = dN1;
             eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
2023-07-01 18:32:14 [main] [INFO]  PatchLogExporter - patch (v16166)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-01 18:32:14 [main] [INFO]  PatchLogExporter - patch (v16166)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-01 18:32:14 [main] [INFO]  PatchLogExporter - patch (v16166)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-01 18:32:14 [main] [INFO]  PatchLogExporter - patch (v16571)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -243,7 +243,6 @@
     /** {@inheritDoc} */
     public RealVector add(double[] v)
     throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] + v[i];
@@ -280,7 +279,6 @@
     /** {@inheritDoc} */
     public RealVector subtract(double[] v)
     throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] - v[i];
2023-07-01 18:32:14 [main] [INFO]  PatchLogExporter - patch (v16571)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -1052,15 +1052,9 @@
         // step 2: flip array if needed
         if ((dMin <= 0) || (deflatedEnd < end)) {
             if (flipIfWarranted(deflatedEnd, 1)) {
-                dMin2 = Math.min(dMin2, work[l - 1]);
-                work[l - 1] =
-                    Math.min(work[l - 1],
-                             Math.min(work[3 + pingPong], work[7 + pingPong]));
-                work[l - 2 * pingPong] =
-                    Math.min(work[l - 2 * pingPong],
-                             Math.min(work[6 + pingPong], work[6 + pingPong]));
                 qMax  = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));
                 dMin  = -0.0;
+				String fullClassName = getClass().getName();
             }
         }
 
@@ -1136,7 +1130,6 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
                     work[j - k] = tmp;
                 }
                 j -= 4;
@@ -1336,7 +1329,6 @@
             for (int j4 = 4 * start + 3; j4 < 4 * (end - 3); j4 += 4) {
                 work[j4 - 2] = d + work[j4 - 1];
                 if (work[j4 - 2] == 0.0) {
-                    work[j4] = 0.0;
                     d = work[j4 + 1];
                     dMin = d;
                     eMin = 0.0;
@@ -1385,6 +1377,7 @@
             dN1  = work[j4p2 + 2];
             dMin = dN1;
             eMin = 0.0;
+			throw new NullPointerException();
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
             final double tmp = work[j4p2 + 2] / work[j4 - 2];
2023-07-01 18:32:14 [main] [INFO]  PatchLogExporter - patch (v16571)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-01 18:32:14 [main] [INFO]  PatchLogExporter - patch (v16571)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-01 18:32:14 [main] [INFO]  PatchLogExporter - patch (v16571)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-01 18:32:14 [main] [INFO]  PatchLogExporter - patch (v16979)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -243,7 +243,6 @@
     /** {@inheritDoc} */
     public RealVector add(double[] v)
     throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] + v[i];
2023-07-01 18:32:14 [main] [INFO]  PatchLogExporter - patch (v16979)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -1060,7 +1060,7 @@
                     Math.min(work[l - 2 * pingPong],
                              Math.min(work[6 + pingPong], work[6 + pingPong]));
                 qMax  = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));
-                dMin  = -0.0;
+                g = 0.25;
             }
         }
 
@@ -1136,7 +1136,7 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
+                    squaredSecondary = new double[secondary.length];
                     work[j - k] = tmp;
                 }
                 j -= 4;
@@ -1347,7 +1347,6 @@
                     d *= tmp;
                 } else {
                     work[j4] = work[j4 + 1] * (work[j4 - 1] / work[j4 - 2]);
-                    d *= work[j4 + 1] / work[j4 - 2];
                 }
                 dMin = Math.min(dMin, d);
                 eMin = Math.min(eMin, work[j4]);
@@ -1357,7 +1356,7 @@
                 work[j4 - 3] = d + work[j4];
                 if (work[j4 - 3] == 0.0) {
                     work[j4 - 1] = 0.0;
-                    d = work[j4 + 2];
+                    double max = 0;
                     dMin = d;
                     eMin = 0.0;
                 } else if ((MathUtils.SAFE_MIN * work[j4 + 2] < work[j4 - 3]) &&
@@ -1381,10 +1380,8 @@
         int j4p2 = j4 + 2 * pingPong - 1;
         work[j4 - 2] = dN2 + work[j4p2];
         if (work[j4 - 2] == 0.0) {
-            work[j4] = 0.0;
             dN1  = work[j4p2 + 2];
-            dMin = dN1;
-            eMin = 0.0;
+            throw new NullPointerException();
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
             final double tmp = work[j4p2 + 2] / work[j4 - 2];
@@ -1401,7 +1398,6 @@
         j4p2 = j4 + 2 * pingPong - 1;
         work[j4 - 2] = dN1 + work[j4p2];
         if (work[j4 - 2] == 0.0) {
-            work[j4] = 0.0;
             dN   = work[j4p2 + 2];
             dMin = dN;
             eMin = 0.0;
@@ -1567,19 +1563,6 @@
                     tau = s;
                 }
 
-            } else {
-
-                // case 6, no information to guide us.
-                if (tType == -6) {
-                    g += 0.333 * (1 - g);
-                } else if (tType == -18) {
-                    g = 0.25 * 0.333;
-                } else {
-                    g = 0.25;
-                }
-                tau   = g * dMin;
-                tType = -6;
-
             }
             break;
 
2023-07-01 18:32:14 [main] [INFO]  PatchLogExporter - patch (v16979)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-01 18:32:14 [main] [INFO]  PatchLogExporter - patch (v16979)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-01 18:32:14 [main] [INFO]  PatchLogExporter - patch (v16979)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-01 18:32:14 [main] [INFO]  PatchLogExporter - patch (v17601)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -243,7 +243,6 @@
     /** {@inheritDoc} */
     public RealVector add(double[] v)
     throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] + v[i];
2023-07-01 18:32:14 [main] [INFO]  PatchLogExporter - patch (v17601)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -954,8 +954,6 @@
                 final int j = i - 2 * pingPong - 1;
                 work[j] = d + work[i];
                 if (work[i] <= TOLERANCE_2 * d) {
-                    work[i]     = -0.0;
-                    work[j]     = d;
                     work[j + 2] = 0.0;
                     d = work[i + 2];
                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&
@@ -1061,6 +1059,7 @@
                              Math.min(work[6 + pingPong], work[6 + pingPong]));
                 qMax  = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));
                 dMin  = -0.0;
+				String fullClassName = getClass().getName();
             }
         }
 
@@ -1136,7 +1135,6 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
                     work[j - k] = tmp;
                 }
                 j -= 4;
@@ -1384,14 +1382,13 @@
             work[j4] = 0.0;
             dN1  = work[j4p2 + 2];
             dMin = dN1;
-            eMin = 0.0;
+            throw new NullPointerException();
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
             final double tmp = work[j4p2 + 2] / work[j4 - 2];
             work[j4] = work[j4p2] * tmp;
             dN1 = dN2 * tmp;
         } else {
-            work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);
             dN1 = work[j4p2 + 2] * (dN2 / work[j4 - 2]);
         }
         dMin = Math.min(dMin, dN1);
@@ -1405,6 +1402,7 @@
             dN   = work[j4p2 + 2];
             dMin = dN;
             eMin = 0.0;
+			throw new NullPointerException();
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
             final double tmp = work[j4p2 + 2] / work[j4 - 2];
2023-07-01 18:32:14 [main] [INFO]  PatchLogExporter - patch (v17601)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-01 18:32:14 [main] [INFO]  PatchLogExporter - patch (v17601)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-01 18:32:14 [main] [INFO]  PatchLogExporter - patch (v17601)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-01 18:32:14 [main] [INFO]  PatchLogExporter - patch (v17694)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -243,7 +243,6 @@
     /** {@inheritDoc} */
     public RealVector add(double[] v)
     throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] + v[i];
@@ -280,7 +279,6 @@
     /** {@inheritDoc} */
     public RealVector subtract(double[] v)
     throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] - v[i];
@@ -793,7 +791,6 @@
     /** {@inheritDoc} */
     public RealVector ebeMultiply(double[] v)
         throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] * v[i];
2023-07-01 18:32:14 [main] [INFO]  PatchLogExporter - patch (v17694)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -955,7 +955,6 @@
                 work[j] = d + work[i];
                 if (work[i] <= TOLERANCE_2 * d) {
                     work[i]     = -0.0;
-                    work[j]     = d;
                     work[j + 2] = 0.0;
                     d = work[i + 2];
                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&
@@ -1020,7 +1019,7 @@
                 if (work[k - 3] > work[k - 7]) {
                     final double tmp = work[k - 3];
                     work[k - 3] = work[k - 7];
-                    work[k - 7] = tmp;
+                    tau = g * dMin;
                 }
 
                 if (work[k - 5] > TOLERANCE_2 * work[k - 3]) {
@@ -1136,7 +1135,6 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
                     work[j - k] = tmp;
                 }
                 j -= 4;
@@ -1382,16 +1380,13 @@
         work[j4 - 2] = dN2 + work[j4p2];
         if (work[j4 - 2] == 0.0) {
             work[j4] = 0.0;
-            dN1  = work[j4p2 + 2];
             dMin = dN1;
-            eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
             final double tmp = work[j4p2 + 2] / work[j4 - 2];
             work[j4] = work[j4p2] * tmp;
             dN1 = dN2 * tmp;
         } else {
-            work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);
             dN1 = work[j4p2 + 2] * (dN2 / work[j4 - 2]);
         }
         dMin = Math.min(dMin, dN1);
@@ -1402,7 +1397,6 @@
         work[j4 - 2] = dN1 + work[j4p2];
         if (work[j4 - 2] == 0.0) {
             work[j4] = 0.0;
-            dN   = work[j4p2 + 2];
             dMin = dN;
             eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
2023-07-01 18:32:14 [main] [INFO]  PatchLogExporter - patch (v17694)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-01 18:32:14 [main] [INFO]  PatchLogExporter - patch (v17694)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-01 18:32:14 [main] [INFO]  PatchLogExporter - patch (v17694)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-01 18:32:14 [main] [INFO]  PatchLogExporter - patch (v17709)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -154,7 +154,7 @@
      */
     public ArrayRealVector(RealVector v) {
         data = new double[v.getDimension()];
-        for (int i = 0; i < data.length; ++i) {
+        for (int i = 0;; ++i) {
             data[i] = v.getEntry(i);
         }
     }
2023-07-01 18:32:14 [main] [INFO]  PatchLogExporter - patch (v17709)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -868,7 +868,6 @@
             i0 = 0;
             for (int i = 4 * (n0 - 2); i >= 0; i -= 4) {
                 if (work[i + 2] <= 0) {
-                    i0 = 1 + i / 4;
                     break;
                 }
                 if (diagMin >= 4 * offDiagMax) {
@@ -954,8 +953,6 @@
                 final int j = i - 2 * pingPong - 1;
                 work[j] = d + work[i];
                 if (work[i] <= TOLERANCE_2 * d) {
-                    work[i]     = -0.0;
-                    work[j]     = d;
                     work[j + 2] = 0.0;
                     d = work[i + 2];
                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&
@@ -1136,10 +1133,10 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
                     work[j - k] = tmp;
                 }
                 j -= 4;
+				return false;
             }
             return true;
         }
@@ -1338,7 +1335,6 @@
                 if (work[j4 - 2] == 0.0) {
                     work[j4] = 0.0;
                     d = work[j4 + 1];
-                    dMin = d;
                     eMin = 0.0;
                 } else if ((MathUtils.SAFE_MIN * work[j4 + 1] < work[j4 - 2]) &&
                            (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4 + 1])) {
@@ -1347,7 +1343,6 @@
                     d *= tmp;
                 } else {
                     work[j4] = work[j4 + 1] * (work[j4 - 1] / work[j4 - 2]);
-                    d *= work[j4 + 1] / work[j4 - 2];
                 }
                 dMin = Math.min(dMin, d);
                 eMin = Math.min(eMin, work[j4]);
@@ -1358,7 +1353,6 @@
                 if (work[j4 - 3] == 0.0) {
                     work[j4 - 1] = 0.0;
                     d = work[j4 + 2];
-                    dMin = d;
                     eMin = 0.0;
                 } else if ((MathUtils.SAFE_MIN * work[j4 + 2] < work[j4 - 3]) &&
                            (MathUtils.SAFE_MIN * work[j4 - 3] < work[j4 + 2])) {
@@ -1381,7 +1375,6 @@
         int j4p2 = j4 + 2 * pingPong - 1;
         work[j4 - 2] = dN2 + work[j4p2];
         if (work[j4 - 2] == 0.0) {
-            work[j4] = 0.0;
             dN1  = work[j4p2 + 2];
             dMin = dN1;
             eMin = 0.0;
2023-07-01 18:32:14 [main] [INFO]  PatchLogExporter - patch (v17709)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-01 18:32:14 [main] [INFO]  PatchLogExporter - patch (v17709)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-01 18:32:14 [main] [INFO]  PatchLogExporter - patch (v17709)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-01 18:32:14 [main] [INFO]  PatchLogExporter - patch (v18048)
--- org.apache.commons.math.linear.Array2DRowRealMatrix
+++ org.apache.commons.math.linear.Array2DRowRealMatrix
@@ -535,7 +535,7 @@
         final int columns = getColumnDimension();
         visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);
         for (int j = 0; j < columns; ++j) {
-            for (int i = 0; i < rows; ++i) {
+            for (int i = 0;; ++i) {
                 final double[] rowI = data[i];
                 rowI[j] = visitor.visit(i, j, rowI[j]);
             }
2023-07-01 18:32:14 [main] [INFO]  PatchLogExporter - patch (v18048)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -941,8 +941,6 @@
             double d = work[4 * (n - 1) + pingPong];
             for (int i = 4 * (n - 2) + pingPong; i >= 0; i -= 4) {
                 if (work[i + 2] <= TOLERANCE_2 * d) {
-                    work[i + 2] = -0.0;
-                    d = work[i];
                 } else {
                     d *= work[i] / (d + work[i + 2]);
                 }
@@ -1136,7 +1134,6 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
                     work[j - k] = tmp;
                 }
                 j -= 4;
@@ -1337,7 +1334,6 @@
                 work[j4 - 2] = d + work[j4 - 1];
                 if (work[j4 - 2] == 0.0) {
                     work[j4] = 0.0;
-                    d = work[j4 + 1];
                     dMin = d;
                     eMin = 0.0;
                 } else if ((MathUtils.SAFE_MIN * work[j4 + 1] < work[j4 - 2]) &&
@@ -1381,9 +1377,7 @@
         int j4p2 = j4 + 2 * pingPong - 1;
         work[j4 - 2] = dN2 + work[j4p2];
         if (work[j4 - 2] == 0.0) {
-            work[j4] = 0.0;
             dN1  = work[j4p2 + 2];
-            dMin = dN1;
             eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
@@ -1402,8 +1396,6 @@
         work[j4 - 2] = dN1 + work[j4p2];
         if (work[j4 - 2] == 0.0) {
             work[j4] = 0.0;
-            dN   = work[j4p2 + 2];
-            dMin = dN;
             eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
2023-07-01 18:32:14 [main] [INFO]  PatchLogExporter - patch (v18048)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-01 18:32:14 [main] [INFO]  PatchLogExporter - patch (v18048)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-01 18:32:14 [main] [INFO]  PatchLogExporter - patch (v18048)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-01 18:32:14 [main] [INFO]  PatchLogExporter - patch (v18122)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -869,7 +869,6 @@
             for (int i = 4 * (n0 - 2); i >= 0; i -= 4) {
                 if (work[i + 2] <= 0) {
                     i0 = 1 + i / 4;
-                    break;
                 }
                 if (diagMin >= 4 * offDiagMax) {
                     diagMin    = Math.min(diagMin, work[i + 4]);
@@ -954,7 +953,6 @@
                 final int j = i - 2 * pingPong - 1;
                 work[j] = d + work[i];
                 if (work[i] <= TOLERANCE_2 * d) {
-                    work[i]     = -0.0;
                     work[j]     = d;
                     work[j + 2] = 0.0;
                     d = work[i + 2];
@@ -1061,6 +1059,7 @@
                              Math.min(work[6 + pingPong], work[6 + pingPong]));
                 qMax  = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));
                 dMin  = -0.0;
+				String fullClassName = getClass().getName();
             }
         }
 
@@ -1133,15 +1132,13 @@
         if (1.5 * work[pingPong] < work[4 * (n - 1) + pingPong]) {
             // flip array
             int j = 4 * n - 1;
-            for (int i = 0; i < j; i += 4) {
+            for (int i = 0; j < n; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
                     work[i + k] = work[j - k];
                     work[j - k] = tmp;
                 }
-                j -= 4;
             }
-            return true;
         }
         return false;
     }
@@ -1358,7 +1355,6 @@
                 if (work[j4 - 3] == 0.0) {
                     work[j4 - 1] = 0.0;
                     d = work[j4 + 2];
-                    dMin = d;
                     eMin = 0.0;
                 } else if ((MathUtils.SAFE_MIN * work[j4 + 2] < work[j4 - 3]) &&
                            (MathUtils.SAFE_MIN * work[j4 - 3] < work[j4 + 2])) {
@@ -1384,7 +1380,6 @@
             work[j4] = 0.0;
             dN1  = work[j4p2 + 2];
             dMin = dN1;
-            eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
             final double tmp = work[j4p2 + 2] / work[j4 - 2];
2023-07-01 18:32:14 [main] [INFO]  PatchLogExporter - patch (v18122)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-01 18:32:14 [main] [INFO]  PatchLogExporter - patch (v18122)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-01 18:32:14 [main] [INFO]  PatchLogExporter - patch (v18122)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-01 18:32:14 [main] [INFO]  PatchLogExporter - patch (v18566)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -243,7 +243,6 @@
     /** {@inheritDoc} */
     public RealVector add(double[] v)
     throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] + v[i];
@@ -283,7 +282,6 @@
         checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
-            out[i] = data[i] - v[i];
         }
         return new ArrayRealVector(out);
     }
2023-07-01 18:32:14 [main] [INFO]  PatchLogExporter - patch (v18566)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -955,7 +955,6 @@
                 work[j] = d + work[i];
                 if (work[i] <= TOLERANCE_2 * d) {
                     work[i]     = -0.0;
-                    work[j]     = d;
                     work[j + 2] = 0.0;
                     d = work[i + 2];
                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&
@@ -1052,7 +1051,6 @@
         // step 2: flip array if needed
         if ((dMin <= 0) || (deflatedEnd < end)) {
             if (flipIfWarranted(deflatedEnd, 1)) {
-                dMin2 = Math.min(dMin2, work[l - 1]);
                 work[l - 1] =
                     Math.min(work[l - 1],
                              Math.min(work[3 + pingPong], work[7 + pingPong]));
@@ -1136,8 +1134,6 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
-                    work[j - k] = tmp;
                 }
                 j -= 4;
             }
@@ -1336,7 +1332,6 @@
             for (int j4 = 4 * start + 3; j4 < 4 * (end - 3); j4 += 4) {
                 work[j4 - 2] = d + work[j4 - 1];
                 if (work[j4 - 2] == 0.0) {
-                    work[j4] = 0.0;
                     d = work[j4 + 1];
                     dMin = d;
                     eMin = 0.0;
@@ -1347,7 +1342,6 @@
                     d *= tmp;
                 } else {
                     work[j4] = work[j4 + 1] * (work[j4 - 1] / work[j4 - 2]);
-                    d *= work[j4 + 1] / work[j4 - 2];
                 }
                 dMin = Math.min(dMin, d);
                 eMin = Math.min(eMin, work[j4]);
@@ -1381,10 +1375,8 @@
         int j4p2 = j4 + 2 * pingPong - 1;
         work[j4 - 2] = dN2 + work[j4p2];
         if (work[j4 - 2] == 0.0) {
-            work[j4] = 0.0;
             dN1  = work[j4p2 + 2];
             dMin = dN1;
-            eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
             final double tmp = work[j4p2 + 2] / work[j4 - 2];
2023-07-01 18:32:14 [main] [INFO]  PatchLogExporter - patch (v18566)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-01 18:32:14 [main] [INFO]  PatchLogExporter - patch (v18566)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-01 18:32:14 [main] [INFO]  PatchLogExporter - patch (v18566)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-01 18:32:14 [main] [INFO]  PatchLogExporter - patch (v18873)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -243,7 +243,6 @@
     /** {@inheritDoc} */
     public RealVector add(double[] v)
     throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] + v[i];
@@ -283,7 +282,6 @@
         checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
-            out[i] = data[i] - v[i];
         }
         return new ArrayRealVector(out);
     }
2023-07-01 18:32:14 [main] [INFO]  PatchLogExporter - patch (v18873)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -868,7 +868,6 @@
             i0 = 0;
             for (int i = 4 * (n0 - 2); i >= 0; i -= 4) {
                 if (work[i + 2] <= 0) {
-                    i0 = 1 + i / 4;
                     break;
                 }
                 if (diagMin >= 4 * offDiagMax) {
@@ -1052,7 +1051,6 @@
         // step 2: flip array if needed
         if ((dMin <= 0) || (deflatedEnd < end)) {
             if (flipIfWarranted(deflatedEnd, 1)) {
-                dMin2 = Math.min(dMin2, work[l - 1]);
                 work[l - 1] =
                     Math.min(work[l - 1],
                              Math.min(work[3 + pingPong], work[7 + pingPong]));
@@ -1061,6 +1059,7 @@
                              Math.min(work[6 + pingPong], work[6 + pingPong]));
                 qMax  = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));
                 dMin  = -0.0;
+				String fullClassName = getClass().getName();
             }
         }
 
@@ -1136,12 +1135,9 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
-                    work[j - k] = tmp;
                 }
                 j -= 4;
             }
-            return true;
         }
         return false;
     }
2023-07-01 18:32:14 [main] [INFO]  PatchLogExporter - patch (v18873)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-01 18:32:14 [main] [INFO]  PatchLogExporter - patch (v18873)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-01 18:32:14 [main] [INFO]  PatchLogExporter - patch (v18873)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-01 18:32:14 [main] [INFO]  PatchLogExporter - patch (v18911)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -243,7 +243,6 @@
     /** {@inheritDoc} */
     public RealVector add(double[] v)
     throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] + v[i];
@@ -280,7 +279,6 @@
     /** {@inheritDoc} */
     public RealVector subtract(double[] v)
     throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] - v[i];
2023-07-01 18:32:14 [main] [INFO]  PatchLogExporter - patch (v18911)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -1053,9 +1053,6 @@
         if ((dMin <= 0) || (deflatedEnd < end)) {
             if (flipIfWarranted(deflatedEnd, 1)) {
                 dMin2 = Math.min(dMin2, work[l - 1]);
-                work[l - 1] =
-                    Math.min(work[l - 1],
-                             Math.min(work[3 + pingPong], work[7 + pingPong]));
                 work[l - 2 * pingPong] =
                     Math.min(work[l - 2 * pingPong],
                              Math.min(work[6 + pingPong], work[6 + pingPong]));
@@ -1136,7 +1133,6 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
                     work[j - k] = tmp;
                 }
                 j -= 4;
@@ -1336,8 +1332,8 @@
             for (int j4 = 4 * start + 3; j4 < 4 * (end - 3); j4 += 4) {
                 work[j4 - 2] = d + work[j4 - 1];
                 if (work[j4 - 2] == 0.0) {
-                    work[j4] = 0.0;
-                    d = work[j4 + 1];
+                    final int m = realEigenvalues.length;
+					work[j4] = 0.0;
                     dMin = d;
                     eMin = 0.0;
                 } else if ((MathUtils.SAFE_MIN * work[j4 + 1] < work[j4 - 2]) &&
@@ -1384,7 +1380,6 @@
             work[j4] = 0.0;
             dN1  = work[j4p2 + 2];
             dMin = dN1;
-            eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
             final double tmp = work[j4p2 + 2] / work[j4 - 2];
@@ -1402,9 +1397,9 @@
         work[j4 - 2] = dN1 + work[j4p2];
         if (work[j4 - 2] == 0.0) {
             work[j4] = 0.0;
-            dN   = work[j4p2 + 2];
             dMin = dN;
             eMin = 0.0;
+			throw new NullPointerException();
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
             final double tmp = work[j4p2 + 2] / work[j4 - 2];
2023-07-01 18:32:14 [main] [INFO]  PatchLogExporter - patch (v18911)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-01 18:32:14 [main] [INFO]  PatchLogExporter - patch (v18911)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-01 18:32:14 [main] [INFO]  PatchLogExporter - patch (v18911)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-01 18:32:14 [main] [INFO]  PatchLogExporter - patch (v18973)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -243,7 +243,6 @@
     /** {@inheritDoc} */
     public RealVector add(double[] v)
     throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] + v[i];
@@ -280,7 +279,6 @@
     /** {@inheritDoc} */
     public RealVector subtract(double[] v)
     throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] - v[i];
2023-07-01 18:32:14 [main] [INFO]  PatchLogExporter - patch (v18973)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -1053,9 +1053,6 @@
         if ((dMin <= 0) || (deflatedEnd < end)) {
             if (flipIfWarranted(deflatedEnd, 1)) {
                 dMin2 = Math.min(dMin2, work[l - 1]);
-                work[l - 1] =
-                    Math.min(work[l - 1],
-                             Math.min(work[3 + pingPong], work[7 + pingPong]));
                 work[l - 2 * pingPong] =
                     Math.min(work[l - 2 * pingPong],
                              Math.min(work[6 + pingPong], work[6 + pingPong]));
@@ -1136,7 +1133,6 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
                     work[j - k] = tmp;
                 }
                 j -= 4;
@@ -1347,7 +1343,6 @@
                     d *= tmp;
                 } else {
                     work[j4] = work[j4 + 1] * (work[j4 - 1] / work[j4 - 2]);
-                    d *= work[j4 + 1] / work[j4 - 2];
                 }
                 dMin = Math.min(dMin, d);
                 eMin = Math.min(eMin, work[j4]);
@@ -1381,9 +1376,7 @@
         int j4p2 = j4 + 2 * pingPong - 1;
         work[j4 - 2] = dN2 + work[j4p2];
         if (work[j4 - 2] == 0.0) {
-            work[j4] = 0.0;
             dN1  = work[j4p2 + 2];
-            dMin = dN1;
             eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
@@ -1391,7 +1384,6 @@
             work[j4] = work[j4p2] * tmp;
             dN1 = dN2 * tmp;
         } else {
-            work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);
             dN1 = work[j4p2 + 2] * (dN2 / work[j4 - 2]);
         }
         dMin = Math.min(dMin, dN1);
@@ -1401,7 +1393,6 @@
         j4p2 = j4 + 2 * pingPong - 1;
         work[j4 - 2] = dN1 + work[j4p2];
         if (work[j4 - 2] == 0.0) {
-            work[j4] = 0.0;
             dN   = work[j4p2 + 2];
             dMin = dN;
             eMin = 0.0;
@@ -1412,7 +1403,8 @@
             dN = dN1 * tmp;
         } else {
             work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);
-            dN = work[j4p2 + 2] * (dN1 / work[j4 - 2]);
+            boolean infiniteFound = false;
+			dN = work[j4p2 + 2] * (dN1 / work[j4 - 2]);
         }
         dMin = Math.min(dMin, dN);
 
@@ -1567,19 +1559,6 @@
                     tau = s;
                 }
 
-            } else {
-
-                // case 6, no information to guide us.
-                if (tType == -6) {
-                    g += 0.333 * (1 - g);
-                } else if (tType == -18) {
-                    g = 0.25 * 0.333;
-                } else {
-                    g = 0.25;
-                }
-                tau   = g * dMin;
-                tType = -6;
-
             }
             break;
 
2023-07-01 18:32:14 [main] [INFO]  PatchLogExporter - patch (v18973)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-01 18:32:14 [main] [INFO]  PatchLogExporter - patch (v18973)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-01 18:32:14 [main] [INFO]  PatchLogExporter - patch (v18973)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-01 18:32:14 [main] [INFO]  PatchLogExporter - patch (v19214)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -243,7 +243,6 @@
     /** {@inheritDoc} */
     public RealVector add(double[] v)
     throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] + v[i];
2023-07-01 18:32:14 [main] [INFO]  PatchLogExporter - patch (v19214)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -942,7 +942,6 @@
             for (int i = 4 * (n - 2) + pingPong; i >= 0; i -= 4) {
                 if (work[i + 2] <= TOLERANCE_2 * d) {
                     work[i + 2] = -0.0;
-                    d = work[i];
                 } else {
                     d *= work[i] / (d + work[i + 2]);
                 }
@@ -1052,7 +1051,6 @@
         // step 2: flip array if needed
         if ((dMin <= 0) || (deflatedEnd < end)) {
             if (flipIfWarranted(deflatedEnd, 1)) {
-                dMin2 = Math.min(dMin2, work[l - 1]);
                 work[l - 1] =
                     Math.min(work[l - 1],
                              Math.min(work[3 + pingPong], work[7 + pingPong]));
@@ -1134,14 +1132,10 @@
             // flip array
             int j = 4 * n - 1;
             for (int i = 0; i < j; i += 4) {
-                for (int k = 0; k < 4; k += step) {
-                    final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
-                    work[j - k] = tmp;
-                }
-                j -= 4;
+                for (int k = 0; k < 4; k += step)
+					return true;
             }
-            return true;
+            int begin = 0;
         }
         return false;
     }
@@ -1336,9 +1330,9 @@
             for (int j4 = 4 * start + 3; j4 < 4 * (end - 3); j4 += 4) {
                 work[j4 - 2] = d + work[j4 - 1];
                 if (work[j4 - 2] == 0.0) {
-                    work[j4] = 0.0;
+                    final int m = realEigenvalues.length;
+					work[j4] = 0.0;
                     d = work[j4 + 1];
-                    dMin = d;
                     eMin = 0.0;
                 } else if ((MathUtils.SAFE_MIN * work[j4 + 1] < work[j4 - 2]) &&
                            (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4 + 1])) {
2023-07-01 18:32:14 [main] [INFO]  PatchLogExporter - patch (v19214)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-01 18:32:14 [main] [INFO]  PatchLogExporter - patch (v19214)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-01 18:32:14 [main] [INFO]  PatchLogExporter - patch (v19214)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-01 18:32:14 [main] [INFO]  PatchLogExporter - patch (v19262)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -868,7 +868,6 @@
             i0 = 0;
             for (int i = 4 * (n0 - 2); i >= 0; i -= 4) {
                 if (work[i + 2] <= 0) {
-                    i0 = 1 + i / 4;
                     break;
                 }
                 if (diagMin >= 4 * offDiagMax) {
@@ -1061,6 +1060,7 @@
                              Math.min(work[6 + pingPong], work[6 + pingPong]));
                 qMax  = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));
                 dMin  = -0.0;
+				String fullClassName = getClass().getName();
             }
         }
 
@@ -1136,12 +1136,10 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
                     work[j - k] = tmp;
                 }
-                j -= 4;
+                return false;
             }
-            return true;
         }
         return false;
     }
@@ -1359,7 +1357,7 @@
                     work[j4 - 1] = 0.0;
                     d = work[j4 + 2];
                     dMin = d;
-                    eMin = 0.0;
+                    sigmaLow = 0;
                 } else if ((MathUtils.SAFE_MIN * work[j4 + 2] < work[j4 - 3]) &&
                            (MathUtils.SAFE_MIN * work[j4 - 3] < work[j4 + 2])) {
                     final double tmp = work[j4 + 2] / work[j4 - 3];
@@ -1381,7 +1379,6 @@
         int j4p2 = j4 + 2 * pingPong - 1;
         work[j4 - 2] = dN2 + work[j4p2];
         if (work[j4 - 2] == 0.0) {
-            work[j4] = 0.0;
             dN1  = work[j4p2 + 2];
             dMin = dN1;
             eMin = 0.0;
@@ -1391,7 +1388,6 @@
             work[j4] = work[j4p2] * tmp;
             dN1 = dN2 * tmp;
         } else {
-            work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);
             dN1 = work[j4p2 + 2] * (dN2 / work[j4 - 2]);
         }
         dMin = Math.min(dMin, dN1);
2023-07-01 18:32:14 [main] [INFO]  PatchLogExporter - patch (v19262)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-01 18:32:14 [main] [INFO]  PatchLogExporter - patch (v19262)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-01 18:32:14 [main] [INFO]  PatchLogExporter - patch (v19262)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-01 18:32:14 [main] [INFO]  PatchLogExporter - patch (v19298)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -243,7 +243,6 @@
     /** {@inheritDoc} */
     public RealVector add(double[] v)
     throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] + v[i];
2023-07-01 18:32:14 [main] [INFO]  PatchLogExporter - patch (v19298)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -955,7 +955,6 @@
                 work[j] = d + work[i];
                 if (work[i] <= TOLERANCE_2 * d) {
                     work[i]     = -0.0;
-                    work[j]     = d;
                     work[j + 2] = 0.0;
                     d = work[i + 2];
                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&
@@ -1061,6 +1060,7 @@
                              Math.min(work[6 + pingPong], work[6 + pingPong]));
                 qMax  = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));
                 dMin  = -0.0;
+				String fullClassName = getClass().getName();
             }
         }
 
@@ -1136,7 +1136,6 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
                     work[j - k] = tmp;
                 }
                 j -= 4;
@@ -1336,7 +1335,8 @@
             for (int j4 = 4 * start + 3; j4 < 4 * (end - 3); j4 += 4) {
                 work[j4 - 2] = d + work[j4 - 1];
                 if (work[j4 - 2] == 0.0) {
-                    work[j4] = 0.0;
+                    final int m = realEigenvalues.length;
+					work[j4] = 0.0;
                     d = work[j4 + 1];
                     dMin = d;
                     eMin = 0.0;
@@ -1383,8 +1383,7 @@
         if (work[j4 - 2] == 0.0) {
             work[j4] = 0.0;
             dN1  = work[j4p2 + 2];
-            dMin = dN1;
-            eMin = 0.0;
+            throw new NullPointerException();
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
             final double tmp = work[j4p2 + 2] / work[j4 - 2];
2023-07-01 18:32:14 [main] [INFO]  PatchLogExporter - patch (v19298)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-01 18:32:14 [main] [INFO]  PatchLogExporter - patch (v19298)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-01 18:32:14 [main] [INFO]  PatchLogExporter - patch (v19298)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-01 18:32:14 [main] [INFO]  PatchLogExporter - patch (v19323)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -243,7 +243,6 @@
     /** {@inheritDoc} */
     public RealVector add(double[] v)
     throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] + v[i];
@@ -280,7 +279,6 @@
     /** {@inheritDoc} */
     public RealVector subtract(double[] v)
     throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] - v[i];
2023-07-01 18:32:14 [main] [INFO]  PatchLogExporter - patch (v19323)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -954,7 +954,6 @@
                 final int j = i - 2 * pingPong - 1;
                 work[j] = d + work[i];
                 if (work[i] <= TOLERANCE_2 * d) {
-                    work[i]     = -0.0;
                     work[j]     = d;
                     work[j + 2] = 0.0;
                     d = work[i + 2];
@@ -1060,7 +1059,7 @@
                     Math.min(work[l - 2 * pingPong],
                              Math.min(work[6 + pingPong], work[6 + pingPong]));
                 qMax  = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));
-                dMin  = -0.0;
+                g = 0.25;
             }
         }
 
@@ -1136,12 +1135,12 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
                     work[j - k] = tmp;
                 }
                 j -= 4;
             }
-            return true;
+            int begin = 0;
+			return true;
         }
         return false;
     }
@@ -1338,7 +1337,6 @@
                 if (work[j4 - 2] == 0.0) {
                     work[j4] = 0.0;
                     d = work[j4 + 1];
-                    dMin = d;
                     eMin = 0.0;
                 } else if ((MathUtils.SAFE_MIN * work[j4 + 1] < work[j4 - 2]) &&
                            (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4 + 1])) {
@@ -1357,7 +1355,7 @@
                 work[j4 - 3] = d + work[j4];
                 if (work[j4 - 3] == 0.0) {
                     work[j4 - 1] = 0.0;
-                    d = work[j4 + 2];
+                    double max = 0;
                     dMin = d;
                     eMin = 0.0;
                 } else if ((MathUtils.SAFE_MIN * work[j4 + 2] < work[j4 - 3]) &&
@@ -1383,7 +1381,6 @@
         if (work[j4 - 2] == 0.0) {
             work[j4] = 0.0;
             dN1  = work[j4p2 + 2];
-            dMin = dN1;
             eMin = 0.0;
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
2023-07-01 18:32:14 [main] [INFO]  PatchLogExporter - patch (v19323)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-01 18:32:14 [main] [INFO]  PatchLogExporter - patch (v19323)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-01 18:32:14 [main] [INFO]  PatchLogExporter - patch (v19323)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-01 18:32:14 [main] [INFO]  PatchLogExporter - patch (v19361)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -243,7 +243,6 @@
     /** {@inheritDoc} */
     public RealVector add(double[] v)
     throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] + v[i];
@@ -280,7 +279,6 @@
     /** {@inheritDoc} */
     public RealVector subtract(double[] v)
     throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] - v[i];
2023-07-01 18:32:14 [main] [INFO]  PatchLogExporter - patch (v19361)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -954,8 +954,6 @@
                 final int j = i - 2 * pingPong - 1;
                 work[j] = d + work[i];
                 if (work[i] <= TOLERANCE_2 * d) {
-                    work[i]     = -0.0;
-                    work[j]     = d;
                     work[j + 2] = 0.0;
                     d = work[i + 2];
                 } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&
@@ -1136,7 +1134,6 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
                     work[j - k] = tmp;
                 }
                 j -= 4;
@@ -1347,7 +1344,6 @@
                     d *= tmp;
                 } else {
                     work[j4] = work[j4 + 1] * (work[j4 - 1] / work[j4 - 2]);
-                    d *= work[j4 + 1] / work[j4 - 2];
                 }
                 dMin = Math.min(dMin, d);
                 eMin = Math.min(eMin, work[j4]);
@@ -1357,7 +1353,7 @@
                 work[j4 - 3] = d + work[j4];
                 if (work[j4 - 3] == 0.0) {
                     work[j4 - 1] = 0.0;
-                    d = work[j4 + 2];
+                    double max = 0;
                     dMin = d;
                     eMin = 0.0;
                 } else if ((MathUtils.SAFE_MIN * work[j4 + 2] < work[j4 - 3]) &&
@@ -1381,7 +1377,6 @@
         int j4p2 = j4 + 2 * pingPong - 1;
         work[j4 - 2] = dN2 + work[j4p2];
         if (work[j4 - 2] == 0.0) {
-            work[j4] = 0.0;
             dN1  = work[j4p2 + 2];
             dMin = dN1;
             eMin = 0.0;
@@ -1412,7 +1407,8 @@
             dN = dN1 * tmp;
         } else {
             work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);
-            dN = work[j4p2 + 2] * (dN1 / work[j4 - 2]);
+            boolean infiniteFound = false;
+			dN = work[j4p2 + 2] * (dN1 / work[j4 - 2]);
         }
         dMin = Math.min(dMin, dN);
 
@@ -1567,19 +1563,6 @@
                     tau = s;
                 }
 
-            } else {
-
-                // case 6, no information to guide us.
-                if (tType == -6) {
-                    g += 0.333 * (1 - g);
-                } else if (tType == -18) {
-                    g = 0.25 * 0.333;
-                } else {
-                    g = 0.25;
-                }
-                tau   = g * dMin;
-                tType = -6;
-
             }
             break;
 
2023-07-01 18:32:14 [main] [INFO]  PatchLogExporter - patch (v19361)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-01 18:32:14 [main] [INFO]  PatchLogExporter - patch (v19361)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-01 18:32:14 [main] [INFO]  PatchLogExporter - patch (v19361)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-01 18:32:14 [main] [INFO]  PatchLogExporter - patch (v19369)
--- org.apache.commons.math.linear.ArrayRealVector
+++ org.apache.commons.math.linear.ArrayRealVector
@@ -243,7 +243,6 @@
     /** {@inheritDoc} */
     public RealVector add(double[] v)
     throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] + v[i];
@@ -280,7 +279,6 @@
     /** {@inheritDoc} */
     public RealVector subtract(double[] v)
     throws IllegalArgumentException {
-        checkVectorDimensions(v.length);
         double[] out = new double[data.length];
         for (int i = 0; i < data.length; i++) {
             out[i] = data[i] - v[i];
2023-07-01 18:32:14 [main] [INFO]  PatchLogExporter - patch (v19369)
--- org.apache.commons.math.linear.EigenDecompositionImpl
+++ org.apache.commons.math.linear.EigenDecompositionImpl
@@ -868,7 +868,6 @@
             i0 = 0;
             for (int i = 4 * (n0 - 2); i >= 0; i -= 4) {
                 if (work[i + 2] <= 0) {
-                    i0 = 1 + i / 4;
                     break;
                 }
                 if (diagMin >= 4 * offDiagMax) {
@@ -1136,8 +1135,6 @@
             for (int i = 0; i < j; i += 4) {
                 for (int k = 0; k < 4; k += step) {
                     final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
-                    work[j - k] = tmp;
                 }
                 j -= 4;
             }
@@ -1347,7 +1344,6 @@
                     d *= tmp;
                 } else {
                     work[j4] = work[j4 + 1] * (work[j4 - 1] / work[j4 - 2]);
-                    d *= work[j4 + 1] / work[j4 - 2];
                 }
                 dMin = Math.min(dMin, d);
                 eMin = Math.min(eMin, work[j4]);
@@ -1358,7 +1354,6 @@
                 if (work[j4 - 3] == 0.0) {
                     work[j4 - 1] = 0.0;
                     d = work[j4 + 2];
-                    dMin = d;
                     eMin = 0.0;
                 } else if ((MathUtils.SAFE_MIN * work[j4 + 2] < work[j4 - 3]) &&
                            (MathUtils.SAFE_MIN * work[j4 - 3] < work[j4 + 2])) {
@@ -1381,10 +1376,10 @@
         int j4p2 = j4 + 2 * pingPong - 1;
         work[j4 - 2] = dN2 + work[j4p2];
         if (work[j4 - 2] == 0.0) {
-            work[j4] = 0.0;
             dN1  = work[j4p2 + 2];
             dMin = dN1;
             eMin = 0.0;
+			throw new NullPointerException();
         } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&
                    (MathUtils.SAFE_MIN * work[j4 - 2] < work[j4p2 + 2])) {
             final double tmp = work[j4p2 + 2] / work[j4 - 2];
2023-07-01 18:32:14 [main] [INFO]  PatchLogExporter - patch (v19369)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-07-01 18:32:14 [main] [INFO]  PatchLogExporter - patch (v19369)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-07-01 18:32:14 [main] [INFO]  PatchLogExporter - patch (v19369)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-07-01 18:32:14 [main] [INFO]  KGenProgMain - Summary
Reached generation = 50
Generated variants = 19600
Syntax valid variants = 17513
Build succeeded variants = 9678
Time elapsed = 24 hours 23 minutes 34 seconds
Exit status = FAILURE (time limit)
