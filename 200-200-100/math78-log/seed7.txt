2023-06-26 20:09:32 [main] [WARN]  Configuration$Builder - The directory where kGenProg is running is different from the root directory of the given target project.
2023-06-26 20:09:32 [main] [WARN]  Configuration$Builder - If the target project includes test cases with file I/O, such test cases won't run correctly.
2023-06-26 20:09:32 [main] [WARN]  Configuration$Builder - We recommend you running kGenProg with the root directory of the target project as the current directory.
2023-06-26 20:09:33 [main] [INFO]  KGenProgMain - 
==================== kGenProg Configuration ====================
configPath = /Users/haradakanon/Downloads/kGenProg-1.8.2/example/math78/kgenprog-78.toml (set by command line)
rootDir = /Users/haradakanon/Downloads/kGenProg-1.8.2/example/math78 (set in config file)
productPaths = [/Users/haradakanon/Downloads/kGenProg-1.8.2/example/math78/src/main] (set in config file)
testPaths = [/Users/haradakanon/Downloads/kGenProg-1.8.2/example/math78/src/test] (set in config file)
classPaths = []
executionTests = [org.apache.commons.math.ode.events.EventStateTest] (set in config file)
outDir = kgenprog-out
logLevel = INFO (set in config file)
mutationGeneratingCount = 200 (set in config file)
crossoverGeneratingCount = 200 (set in config file)
headcount = 100
maxGeneration = 1000 (set in config file)
timeLimit = PT277H46M40S (set in config file)
testTimeLimit = PT3M (set in config file)
requiredSolutionsCount = 100 (set in config file)
randomSeed = 7 (set by command line)
scope = PACKAGE (set in config file)
faultLocalization = Zoltar (set in config file)
mutationType = Simple
crossoverType = Random
firstVariantSelectionStrategy = Random
secondVariantSelectionStrategy = Random
isPatchOutput = true (set in config file)
isHistoryRecord = false
currentDirectory = /Users/haradakanon/Desktop/研究/実験データ/afterResearch
version = 1.8.2
================================================================
2023-06-26 20:09:50 [main] [INFO]  KGenProgMain - initial failed tests (1/1)
org.apache.commons.math.ode.events.EventStateTest.closeEvents: function values at endpoints do not have different signs.  Endpoints: [89.999, 153.1], Values: [-0.066, -1,142.11]

2023-06-26 20:09:51 [main] [INFO]  KGenProgMain - GA started
2023-06-26 20:09:51 [main] [INFO]  KGenProgMain - entered the era of 1st generation.
2023-06-26 20:10:07 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 16 seconds
Variants: generated 200, build-succeeded 34, build-failed 124, syntax-invalid 15, redundant 27
Fitness: max 1(1), min 0(33), ave 0.029
Test execution time: sum 3601 ms, max 270 ms, min 64 ms
----------------------------------------------------------------

2023-06-26 20:10:07 [main] [INFO]  KGenProgMain - entered the era of 2nd generation.
2023-06-26 20:10:19 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 28 seconds
Variants: generated 200, build-succeeded 47, build-failed 119, syntax-invalid 9, redundant 25
Fitness: max 1(2), min 0(45), ave 0.043
Test execution time: sum 3315 ms, max 167 ms, min 51 ms
----------------------------------------------------------------

2023-06-26 20:10:19 [main] [INFO]  KGenProgMain - entered the era of 3rd generation.
2023-06-26 20:10:35 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 44 seconds
Variants: generated 400, build-succeeded 71, build-failed 118, syntax-invalid 45, redundant 166
Fitness: max 0(71), min 0(71), ave 0
Test execution time: sum 4750 ms, max 250 ms, min 49 ms
----------------------------------------------------------------

2023-06-26 20:10:35 [main] [INFO]  KGenProgMain - entered the era of 4th generation.
2023-06-26 20:13:52 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 minutes 1 seconds
Variants: generated 400, build-succeeded 104, build-failed 112, syntax-invalid 44, redundant 140
Fitness: max 1(1), min 0(103), ave 0.01
Test execution time: sum 185886 ms, max 180066 ms, min 48 ms
----------------------------------------------------------------

2023-06-26 20:13:52 [main] [INFO]  KGenProgMain - entered the era of 5th generation.
2023-06-26 20:17:12 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 minutes 21 seconds
Variants: generated 400, build-succeeded 130, build-failed 122, syntax-invalid 37, redundant 111
Fitness: max 1(4), min 0(126), ave 0.031
Test execution time: sum 187535 ms, max 180062 ms, min 48 ms
----------------------------------------------------------------

2023-06-26 20:17:12 [main] [INFO]  KGenProgMain - entered the era of 6th generation.
2023-06-26 20:17:35 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 minutes 44 seconds
Variants: generated 400, build-succeeded 163, build-failed 118, syntax-invalid 35, redundant 84
Fitness: max 0(163), min 0(163), ave 0
Test execution time: sum 9512 ms, max 200 ms, min 48 ms
----------------------------------------------------------------

2023-06-26 20:17:35 [main] [INFO]  KGenProgMain - entered the era of 7th generation.
2023-06-26 20:17:58 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 minutes 7 seconds
Variants: generated 400, build-succeeded 168, build-failed 108, syntax-invalid 47, redundant 77
Fitness: max 1(4), min 0(164), ave 0.024
Test execution time: sum 9802 ms, max 165 ms, min 49 ms
----------------------------------------------------------------

2023-06-26 20:17:58 [main] [INFO]  KGenProgMain - entered the era of 8th generation.
2023-06-26 20:18:22 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 minutes 31 seconds
Variants: generated 400, build-succeeded 168, build-failed 122, syntax-invalid 34, redundant 76
Fitness: max 1(5), min 0(163), ave 0.03
Test execution time: sum 10035 ms, max 215 ms, min 48 ms
----------------------------------------------------------------

2023-06-26 20:18:22 [main] [INFO]  KGenProgMain - entered the era of 9th generation.
2023-06-26 20:18:51 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 minutes 0 seconds
Variants: generated 400, build-succeeded 199, build-failed 126, syntax-invalid 26, redundant 49
Fitness: max 0(199), min 0(199), ave 0
Test execution time: sum 12158 ms, max 199 ms, min 48 ms
----------------------------------------------------------------

2023-06-26 20:18:51 [main] [INFO]  KGenProgMain - entered the era of 10th generation.
2023-06-26 20:19:16 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 minutes 24 seconds
Variants: generated 400, build-succeeded 190, build-failed 132, syntax-invalid 21, redundant 57
Fitness: max 0(190), min 0(190), ave 0
Test execution time: sum 10795 ms, max 244 ms, min 48 ms
----------------------------------------------------------------

2023-06-26 20:19:16 [main] [INFO]  KGenProgMain - entered the era of 11th generation.
2023-06-26 20:19:43 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 minutes 52 seconds
Variants: generated 400, build-succeeded 191, build-failed 141, syntax-invalid 27, redundant 41
Fitness: max 0(191), min 0(191), ave 0
Test execution time: sum 11155 ms, max 182 ms, min 49 ms
----------------------------------------------------------------

2023-06-26 20:19:43 [main] [INFO]  KGenProgMain - entered the era of 12th generation.
2023-06-26 20:20:08 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 10 minutes 17 seconds
Variants: generated 400, build-succeeded 192, build-failed 128, syntax-invalid 27, redundant 53
Fitness: max 0(192), min 0(192), ave 0
Test execution time: sum 10550 ms, max 130 ms, min 49 ms
----------------------------------------------------------------

2023-06-26 20:20:08 [main] [INFO]  KGenProgMain - entered the era of 13th generation.
2023-06-26 20:20:33 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 10 minutes 42 seconds
Variants: generated 400, build-succeeded 197, build-failed 129, syntax-invalid 15, redundant 59
Fitness: max 0(197), min 0(197), ave 0
Test execution time: sum 10624 ms, max 130 ms, min 47 ms
----------------------------------------------------------------

2023-06-26 20:20:33 [main] [INFO]  KGenProgMain - entered the era of 14th generation.
2023-06-26 20:21:03 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 minutes 12 seconds
Variants: generated 400, build-succeeded 204, build-failed 127, syntax-invalid 35, redundant 34
Fitness: max 0(204), min 0(204), ave 0
Test execution time: sum 11677 ms, max 190 ms, min 49 ms
----------------------------------------------------------------

2023-06-26 20:21:03 [main] [INFO]  KGenProgMain - entered the era of 15th generation.
2023-06-26 20:21:32 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 minutes 41 seconds
Variants: generated 400, build-succeeded 206, build-failed 132, syntax-invalid 19, redundant 43
Fitness: max 0(206), min 0(206), ave 0
Test execution time: sum 11122 ms, max 117 ms, min 47 ms
----------------------------------------------------------------

2023-06-26 20:21:32 [main] [INFO]  KGenProgMain - entered the era of 16th generation.
2023-06-26 20:21:58 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 minutes 7 seconds
Variants: generated 400, build-succeeded 208, build-failed 113, syntax-invalid 44, redundant 35
Fitness: max 0(208), min 0(208), ave 0
Test execution time: sum 11188 ms, max 131 ms, min 48 ms
----------------------------------------------------------------

2023-06-26 20:21:58 [main] [INFO]  KGenProgMain - entered the era of 17th generation.
2023-06-26 20:25:27 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 15 minutes 36 seconds
Variants: generated 400, build-succeeded 210, build-failed 113, syntax-invalid 37, redundant 40
Fitness: max 0(210), min 0(210), ave 0
Test execution time: sum 192323 ms, max 180076 ms, min 49 ms
----------------------------------------------------------------

2023-06-26 20:25:28 [main] [INFO]  KGenProgMain - entered the era of 18th generation.
2023-06-26 20:26:11 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 16 minutes 19 seconds
Variants: generated 400, build-succeeded 218, build-failed 99, syntax-invalid 42, redundant 41
Fitness: max 1(5), min 0(213), ave 0.023
Test execution time: sum 15176 ms, max 204 ms, min 50 ms
----------------------------------------------------------------

2023-06-26 20:26:11 [main] [INFO]  KGenProgMain - entered the era of 19th generation.
2023-06-26 20:29:38 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 19 minutes 47 seconds
Variants: generated 400, build-succeeded 222, build-failed 113, syntax-invalid 29, redundant 36
Fitness: max 0(222), min 0(222), ave 0
Test execution time: sum 192373 ms, max 180058 ms, min 48 ms
----------------------------------------------------------------

2023-06-26 20:29:38 [main] [INFO]  KGenProgMain - entered the era of 20th generation.
2023-06-26 20:30:07 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 20 minutes 15 seconds
Variants: generated 400, build-succeeded 209, build-failed 119, syntax-invalid 30, redundant 42
Fitness: max 0(209), min 0(209), ave 0
Test execution time: sum 11379 ms, max 115 ms, min 49 ms
----------------------------------------------------------------

2023-06-26 20:30:07 [main] [INFO]  KGenProgMain - entered the era of 21st generation.
2023-06-26 20:30:37 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 20 minutes 45 seconds
Variants: generated 400, build-succeeded 216, build-failed 128, syntax-invalid 22, redundant 34
Fitness: max 0(216), min 0(216), ave 0
Test execution time: sum 11595 ms, max 129 ms, min 48 ms
----------------------------------------------------------------

2023-06-26 20:30:37 [main] [INFO]  KGenProgMain - entered the era of 22nd generation.
2023-06-26 20:31:06 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 21 minutes 15 seconds
Variants: generated 400, build-succeeded 214, build-failed 111, syntax-invalid 38, redundant 37
Fitness: max 0(214), min 0(214), ave 0
Test execution time: sum 11360 ms, max 119 ms, min 48 ms
----------------------------------------------------------------

2023-06-26 20:31:06 [main] [INFO]  KGenProgMain - entered the era of 23rd generation.
2023-06-26 20:31:37 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 21 minutes 45 seconds
Variants: generated 400, build-succeeded 220, build-failed 113, syntax-invalid 35, redundant 32
Fitness: max 1(1), min 0(219), ave 0.005
Test execution time: sum 12012 ms, max 156 ms, min 48 ms
----------------------------------------------------------------

2023-06-26 20:31:37 [main] [INFO]  KGenProgMain - entered the era of 24th generation.
2023-06-26 20:32:08 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 22 minutes 16 seconds
Variants: generated 400, build-succeeded 214, build-failed 127, syntax-invalid 31, redundant 28
Fitness: max 0(214), min 0(214), ave 0
Test execution time: sum 11669 ms, max 196 ms, min 48 ms
----------------------------------------------------------------

2023-06-26 20:32:08 [main] [INFO]  KGenProgMain - entered the era of 25th generation.
2023-06-26 20:35:39 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 25 minutes 48 seconds
Variants: generated 400, build-succeeded 215, build-failed 129, syntax-invalid 26, redundant 30
Fitness: max 0(215), min 0(215), ave 0
Test execution time: sum 191884 ms, max 180064 ms, min 49 ms
----------------------------------------------------------------

2023-06-26 20:35:39 [main] [INFO]  KGenProgMain - entered the era of 26th generation.
2023-06-26 20:42:13 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 32 minutes 22 seconds
Variants: generated 400, build-succeeded 210, build-failed 123, syntax-invalid 40, redundant 27
Fitness: max 0(210), min 0(210), ave 0
Test execution time: sum 372035 ms, max 180078 ms, min 48 ms
----------------------------------------------------------------

2023-06-26 20:42:13 [main] [INFO]  KGenProgMain - entered the era of 27th generation.
2023-06-26 20:42:42 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 32 minutes 51 seconds
Variants: generated 400, build-succeeded 209, build-failed 121, syntax-invalid 42, redundant 28
Fitness: max 1(3), min 0(206), ave 0.014
Test execution time: sum 11463 ms, max 144 ms, min 49 ms
----------------------------------------------------------------

2023-06-26 20:42:42 [main] [INFO]  KGenProgMain - entered the era of 28th generation.
2023-06-26 20:43:12 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 33 minutes 20 seconds
Variants: generated 400, build-succeeded 224, build-failed 113, syntax-invalid 40, redundant 23
Fitness: max 1(4), min 0(220), ave 0.018
Test execution time: sum 12261 ms, max 131 ms, min 49 ms
----------------------------------------------------------------

2023-06-26 20:43:12 [main] [INFO]  KGenProgMain - entered the era of 29th generation.
2023-06-26 20:43:45 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 33 minutes 54 seconds
Variants: generated 400, build-succeeded 216, build-failed 117, syntax-invalid 36, redundant 31
Fitness: max 0(216), min 0(216), ave 0
Test execution time: sum 12517 ms, max 208 ms, min 49 ms
----------------------------------------------------------------

2023-06-26 20:43:45 [main] [INFO]  KGenProgMain - entered the era of 30th generation.
2023-06-26 20:44:17 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 34 minutes 26 seconds
Variants: generated 400, build-succeeded 230, build-failed 107, syntax-invalid 36, redundant 27
Fitness: max 1(2), min 0(228), ave 0.009
Test execution time: sum 12759 ms, max 143 ms, min 48 ms
----------------------------------------------------------------

2023-06-26 20:44:17 [main] [INFO]  KGenProgMain - entered the era of 31st generation.
2023-06-26 20:44:53 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 35 minutes 2 seconds
Variants: generated 400, build-succeeded 226, build-failed 117, syntax-invalid 31, redundant 26
Fitness: max 1(2), min 0(224), ave 0.009
Test execution time: sum 13638 ms, max 176 ms, min 49 ms
----------------------------------------------------------------

2023-06-26 20:44:53 [main] [INFO]  KGenProgMain - entered the era of 32nd generation.
2023-06-26 20:45:28 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 35 minutes 37 seconds
Variants: generated 400, build-succeeded 232, build-failed 123, syntax-invalid 27, redundant 18
Fitness: max 1(1), min 0(231), ave 0.004
Test execution time: sum 13210 ms, max 137 ms, min 49 ms
----------------------------------------------------------------

2023-06-26 20:45:28 [main] [INFO]  KGenProgMain - entered the era of 33rd generation.
2023-06-26 20:46:04 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 36 minutes 12 seconds
Variants: generated 400, build-succeeded 227, build-failed 124, syntax-invalid 20, redundant 29
Fitness: max 0(227), min 0(227), ave 0
Test execution time: sum 13712 ms, max 194 ms, min 49 ms
----------------------------------------------------------------

2023-06-26 20:46:04 [main] [INFO]  KGenProgMain - entered the era of 34th generation.
2023-06-26 20:46:38 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 36 minutes 47 seconds
Variants: generated 400, build-succeeded 223, build-failed 137, syntax-invalid 25, redundant 15
Fitness: max 1(4), min 0(219), ave 0.018
Test execution time: sum 12523 ms, max 127 ms, min 49 ms
----------------------------------------------------------------

2023-06-26 20:46:38 [main] [INFO]  KGenProgMain - entered the era of 35th generation.
2023-06-26 20:47:12 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 37 minutes 21 seconds
Variants: generated 400, build-succeeded 237, build-failed 116, syntax-invalid 23, redundant 24
Fitness: max 1(3), min 0(234), ave 0.013
Test execution time: sum 13487 ms, max 197 ms, min 48 ms
----------------------------------------------------------------

2023-06-26 20:47:12 [main] [INFO]  KGenProgMain - entered the era of 36th generation.
2023-06-26 20:47:44 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 37 minutes 53 seconds
Variants: generated 400, build-succeeded 235, build-failed 103, syntax-invalid 18, redundant 44
Fitness: max 0(235), min 0(235), ave 0
Test execution time: sum 13038 ms, max 202 ms, min 48 ms
----------------------------------------------------------------

2023-06-26 20:47:44 [main] [INFO]  KGenProgMain - entered the era of 37th generation.
2023-06-26 20:48:21 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 38 minutes 30 seconds
Variants: generated 400, build-succeeded 223, build-failed 127, syntax-invalid 23, redundant 27
Fitness: max 1(2), min 0(221), ave 0.009
Test execution time: sum 13341 ms, max 183 ms, min 49 ms
----------------------------------------------------------------

2023-06-26 20:48:21 [main] [INFO]  KGenProgMain - entered the era of 38th generation.
2023-06-26 20:48:56 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 39 minutes 5 seconds
Variants: generated 400, build-succeeded 237, build-failed 126, syntax-invalid 11, redundant 26
Fitness: max 0(237), min 0(237), ave 0
Test execution time: sum 13326 ms, max 128 ms, min 49 ms
----------------------------------------------------------------

2023-06-26 20:48:56 [main] [INFO]  KGenProgMain - entered the era of 39th generation.
2023-06-26 20:49:36 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 39 minutes 45 seconds
Variants: generated 400, build-succeeded 238, build-failed 115, syntax-invalid 23, redundant 24
Fitness: max 1(3), min 0(235), ave 0.013
Test execution time: sum 14575 ms, max 199 ms, min 49 ms
----------------------------------------------------------------

2023-06-26 20:49:36 [main] [INFO]  KGenProgMain - entered the era of 40th generation.
2023-06-26 20:50:09 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 40 minutes 18 seconds
Variants: generated 400, build-succeeded 221, build-failed 118, syntax-invalid 13, redundant 48
Fitness: max 0(221), min 0(221), ave 0
Test execution time: sum 12394 ms, max 112 ms, min 49 ms
----------------------------------------------------------------

2023-06-26 20:50:09 [main] [INFO]  KGenProgMain - entered the era of 41st generation.
2023-06-26 20:50:45 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 40 minutes 54 seconds
Variants: generated 400, build-succeeded 242, build-failed 110, syntax-invalid 23, redundant 25
Fitness: max 0(242), min 0(242), ave 0
Test execution time: sum 13599 ms, max 127 ms, min 49 ms
----------------------------------------------------------------

2023-06-26 20:50:45 [main] [INFO]  KGenProgMain - entered the era of 42nd generation.
2023-06-26 20:51:23 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 41 minutes 32 seconds
Variants: generated 400, build-succeeded 251, build-failed 109, syntax-invalid 22, redundant 18
Fitness: max 1(3), min 0(248), ave 0.012
Test execution time: sum 14131 ms, max 187 ms, min 49 ms
----------------------------------------------------------------

2023-06-26 20:51:23 [main] [INFO]  KGenProgMain - entered the era of 43rd generation.
2023-06-26 20:51:59 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 42 minutes 8 seconds
Variants: generated 400, build-succeeded 229, build-failed 119, syntax-invalid 27, redundant 25
Fitness: max 1(2), min 0(227), ave 0.009
Test execution time: sum 12591 ms, max 116 ms, min 49 ms
----------------------------------------------------------------

2023-06-26 20:51:59 [main] [INFO]  KGenProgMain - entered the era of 44th generation.
2023-06-26 20:52:36 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 42 minutes 45 seconds
Variants: generated 400, build-succeeded 229, build-failed 122, syntax-invalid 22, redundant 27
Fitness: max 1(5), min 0(224), ave 0.022
Test execution time: sum 13357 ms, max 153 ms, min 51 ms
----------------------------------------------------------------

2023-06-26 20:52:36 [main] [INFO]  KGenProgMain - entered the era of 45th generation.
2023-06-26 20:53:13 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 43 minutes 22 seconds
Variants: generated 400, build-succeeded 235, build-failed 121, syntax-invalid 19, redundant 25
Fitness: max 1(10), min 0(225), ave 0.043
Test execution time: sum 13371 ms, max 144 ms, min 49 ms
----------------------------------------------------------------

2023-06-26 20:53:13 [main] [INFO]  KGenProgMain - entered the era of 46th generation.
2023-06-26 20:56:50 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 46 minutes 59 seconds
Variants: generated 400, build-succeeded 230, build-failed 125, syntax-invalid 29, redundant 16
Fitness: max 1(8), min 0(222), ave 0.035
Test execution time: sum 193111 ms, max 180081 ms, min 49 ms
----------------------------------------------------------------

2023-06-26 20:56:50 [main] [INFO]  KGenProgMain - entered the era of 47th generation.
2023-06-26 20:57:28 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 47 minutes 37 seconds
Variants: generated 400, build-succeeded 249, build-failed 107, syntax-invalid 16, redundant 28
Fitness: max 1(5), min 0(244), ave 0.02
Test execution time: sum 14115 ms, max 193 ms, min 49 ms
----------------------------------------------------------------

2023-06-26 20:57:28 [main] [INFO]  KGenProgMain - entered the era of 48th generation.
2023-06-26 20:58:05 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 48 minutes 14 seconds
Variants: generated 400, build-succeeded 221, build-failed 130, syntax-invalid 24, redundant 25
Fitness: max 1(3), min 0(218), ave 0.014
Test execution time: sum 12784 ms, max 193 ms, min 49 ms
----------------------------------------------------------------

2023-06-26 20:58:05 [main] [INFO]  KGenProgMain - entered the era of 49th generation.
2023-06-26 20:58:42 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 48 minutes 51 seconds
Variants: generated 400, build-succeeded 227, build-failed 120, syntax-invalid 28, redundant 25
Fitness: max 1(1), min 0(226), ave 0.004
Test execution time: sum 12877 ms, max 123 ms, min 48 ms
----------------------------------------------------------------

2023-06-26 20:58:42 [main] [INFO]  KGenProgMain - entered the era of 50th generation.
2023-06-26 20:59:21 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 49 minutes 29 seconds
Variants: generated 400, build-succeeded 233, build-failed 122, syntax-invalid 21, redundant 24
Fitness: max 1(8), min 0(225), ave 0.034
Test execution time: sum 13006 ms, max 126 ms, min 49 ms
----------------------------------------------------------------

2023-06-26 20:59:21 [main] [INFO]  KGenProgMain - entered the era of 51st generation.
2023-06-26 20:59:59 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 50 minutes 8 seconds
Variants: generated 400, build-succeeded 227, build-failed 132, syntax-invalid 21, redundant 20
Fitness: max 1(4), min 0(223), ave 0.018
Test execution time: sum 13200 ms, max 197 ms, min 49 ms
----------------------------------------------------------------

2023-06-26 20:59:59 [main] [INFO]  KGenProgMain - entered the era of 52nd generation.
2023-06-26 21:00:19 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 50 minutes 28 seconds
Variants: generated 228, build-succeeded 85, build-failed 105, syntax-invalid 18, redundant 20
Fitness: max 1(4), min 0(81), ave 0.047
Test execution time: sum 4904 ms, max 130 ms, min 50 ms
----------------------------------------------------------------

2023-06-26 21:00:19 [main] [INFO]  KGenProgMain - GA stopped
2023-06-26 21:00:22 [main] [INFO]  PatchLogExporter - patch (v82)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 21:00:22 [main] [INFO]  PatchLogExporter - patch (v82)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 21:00:22 [main] [INFO]  PatchLogExporter - patch (v82)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 21:00:22 [main] [INFO]  PatchLogExporter - patch (v82)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -290,7 +290,7 @@
             x0 = x1;
             y0 = y1;
             // Compute new X1, Y1
-            if (Math.abs(delta) > tolerance) {
+            if (!resultComputed) {
                 x1 = x1 + delta;
             } else if (dx > 0.0) {
                 x1 = x1 + 0.5 * tolerance;
2023-06-26 21:00:22 [main] [INFO]  PatchLogExporter - patch (v232)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 21:00:22 [main] [INFO]  PatchLogExporter - patch (v232)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-06-26 21:00:22 [main] [INFO]  PatchLogExporter - patch (v232)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -197,8 +197,38 @@
                         // about bracketing
                             // this should never happen
                          
-                    // variation direction, with respect to the integration direction
-                    increasing = gb >= ga;
+                    {
+						increasing = gb >= ga;
+						final UnivariateRealFunction f = new UnivariateRealFunction() {
+							public double value(final double t) throws FunctionEvaluationException {
+								try {
+									interpolator.setInterpolatedTime(t);
+									return handler.g(t, interpolator.getInterpolatedState());
+								} catch (DerivativeException e) {
+									throw new FunctionEvaluationException(e, t);
+								} catch (EventException e) {
+									throw new FunctionEvaluationException(e, t);
+								}
+							}
+						};
+						final BrentSolver solver = new BrentSolver();
+						solver.setAbsoluteAccuracy(convergence);
+						solver.setMaximalIterationCount(maxIterationCount);
+						final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
+						if ((Math.abs(root - ta) <= convergence)
+								&& (Math.abs(root - previousEventTime) <= convergence)) {
+							ta = tb;
+							ga = gb;
+						} else if (Double.isNaN(previousEventTime)
+								|| (Math.abs(previousEventTime - root) > convergence)) {
+							pendingEventTime = root;
+							if (pendingEvent && (Math.abs(t1 - pendingEventTime) <= convergence)) {
+								return false;
+							}
+							pendingEvent = true;
+							return true;
+						}
+					}
 
                     final UnivariateRealFunction f = new UnivariateRealFunction() {
                         public double value(final double t) throws FunctionEvaluationException {
2023-06-26 21:00:22 [main] [INFO]  PatchLogExporter - patch (v232)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 21:00:22 [main] [INFO]  PatchLogExporter - patch (v232)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 21:00:22 [main] [INFO]  PatchLogExporter - patch (v361)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 21:00:22 [main] [INFO]  PatchLogExporter - patch (v361)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -197,8 +197,37 @@
                         // about bracketing
                             // this should never happen
                          
-                    // variation direction, with respect to the integration direction
-                    increasing = gb >= ga;
+                    {
+						increasing = gb >= ga;
+						final UnivariateRealFunction f = new UnivariateRealFunction() {
+							public double value(final double t) throws FunctionEvaluationException {
+								try {
+									interpolator.setInterpolatedTime(t);
+									return handler.g(t, interpolator.getInterpolatedState());
+								} catch (DerivativeException e) {
+									throw new FunctionEvaluationException(e, t);
+								} catch (EventException e) {
+									throw new FunctionEvaluationException(e, t);
+								}
+							}
+						};
+						final BrentSolver solver = new BrentSolver();
+						solver.setMaximalIterationCount(maxIterationCount);
+						final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
+						if ((Math.abs(root - ta) <= convergence)
+								&& (Math.abs(root - previousEventTime) <= convergence)) {
+							ta = tb;
+							ga = gb;
+						} else if (Double.isNaN(previousEventTime)
+								|| (Math.abs(previousEventTime - root) > convergence)) {
+							pendingEventTime = root;
+							if (pendingEvent && (Math.abs(t1 - pendingEventTime) <= convergence)) {
+								return false;
+							}
+							pendingEvent = true;
+							return true;
+						}
+					}
 
                     final UnivariateRealFunction f = new UnivariateRealFunction() {
                         public double value(final double t) throws FunctionEvaluationException {
2023-06-26 21:00:22 [main] [INFO]  PatchLogExporter - patch (v361)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 21:00:22 [main] [INFO]  PatchLogExporter - patch (v361)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 21:00:22 [main] [INFO]  PatchLogExporter - patch (v1015)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 21:00:22 [main] [INFO]  PatchLogExporter - patch (v1015)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -197,8 +197,38 @@
                         // about bracketing
                             // this should never happen
                          
-                    // variation direction, with respect to the integration direction
-                    increasing = gb >= ga;
+                    {
+						increasing = gb >= ga;
+						final UnivariateRealFunction f = new UnivariateRealFunction() {
+							public double value(final double t) throws FunctionEvaluationException {
+								try {
+									interpolator.setInterpolatedTime(t);
+									return handler.g(t, interpolator.getInterpolatedState());
+								} catch (DerivativeException e) {
+									throw new FunctionEvaluationException(e, t);
+								} catch (EventException e) {
+									throw new FunctionEvaluationException(e, t);
+								}
+							}
+						};
+						final BrentSolver solver = new BrentSolver();
+						solver.setAbsoluteAccuracy(convergence);
+						solver.setMaximalIterationCount(maxIterationCount);
+						final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
+						if ((Math.abs(root - ta) <= convergence)
+								&& (Math.abs(root - previousEventTime) <= convergence)) {
+							ta = tb;
+							ga = gb;
+						} else if (Double.isNaN(previousEventTime)
+								|| (Math.abs(previousEventTime - root) > convergence)) {
+							pendingEventTime = root;
+							if (pendingEvent && (Math.abs(t1 - pendingEventTime) <= convergence)) {
+								return false;
+							}
+							pendingEvent = true;
+							return true;
+						}
+					}
 
                     final UnivariateRealFunction f = new UnivariateRealFunction() {
                         public double value(final double t) throws FunctionEvaluationException {
2023-06-26 21:00:22 [main] [INFO]  PatchLogExporter - patch (v1015)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 21:00:22 [main] [INFO]  PatchLogExporter - patch (v1015)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 21:00:22 [main] [INFO]  PatchLogExporter - patch (v1015)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,15 +223,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
2023-06-26 21:00:22 [main] [INFO]  PatchLogExporter - patch (v1415)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -89,7 +89,7 @@
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
+    this.dirtyState = true;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
2023-06-26 21:00:22 [main] [INFO]  PatchLogExporter - patch (v1415)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 21:00:22 [main] [INFO]  PatchLogExporter - patch (v1415)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -213,7 +213,7 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
+                    g0Positive = increasing;
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
2023-06-26 21:00:22 [main] [INFO]  PatchLogExporter - patch (v1415)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 21:00:22 [main] [INFO]  PatchLogExporter - patch (v1415)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 21:00:22 [main] [INFO]  PatchLogExporter - patch (v1520)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 21:00:22 [main] [INFO]  PatchLogExporter - patch (v1520)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -197,8 +197,37 @@
                         // about bracketing
                             // this should never happen
                          
-                    // variation direction, with respect to the integration direction
-                    increasing = gb >= ga;
+                    {
+						increasing = gb >= ga;
+						final UnivariateRealFunction f = new UnivariateRealFunction() {
+							public double value(final double t) throws FunctionEvaluationException {
+								try {
+									interpolator.setInterpolatedTime(t);
+									return handler.g(t, interpolator.getInterpolatedState());
+								} catch (DerivativeException e) {
+									throw new FunctionEvaluationException(e, t);
+								} catch (EventException e) {
+									throw new FunctionEvaluationException(e, t);
+								}
+							}
+						};
+						final BrentSolver solver = new BrentSolver();
+						solver.setMaximalIterationCount(maxIterationCount);
+						final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
+						if ((Math.abs(root - ta) <= convergence)
+								&& (Math.abs(root - previousEventTime) <= convergence)) {
+							ta = tb;
+							ga = gb;
+						} else if (Double.isNaN(previousEventTime)
+								|| (Math.abs(previousEventTime - root) > convergence)) {
+							pendingEventTime = root;
+							if (pendingEvent && (Math.abs(t1 - pendingEventTime) <= convergence)) {
+								return false;
+							}
+							pendingEvent = true;
+							return true;
+						}
+					}
 
                     final UnivariateRealFunction f = new UnivariateRealFunction() {
                         public double value(final double t) throws FunctionEvaluationException {
2023-06-26 21:00:22 [main] [INFO]  PatchLogExporter - patch (v1520)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 21:00:22 [main] [INFO]  PatchLogExporter - patch (v1520)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 21:00:22 [main] [INFO]  PatchLogExporter - patch (v1520)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -268,6 +268,7 @@
                     double r2 = y1 / y2;
                     p = r3 * (dx * r1 * (r1 - r2) - (x1 - x0) * (r2 - 1.0));
                     p1 = (r1 - 1.0) * (r2 - 1.0) * (r3 - 1.0);
+					this.iterationCount = iterationCount;
                 }
                 if (p > 0.0) {
                     p1 = -p1;
2023-06-26 21:00:22 [main] [INFO]  PatchLogExporter - patch (v1554)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -96,7 +96,6 @@
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
   }
 
   /** Simple constructor.
2023-06-26 21:00:22 [main] [INFO]  PatchLogExporter - patch (v1554)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 21:00:22 [main] [INFO]  PatchLogExporter - patch (v1554)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 21:00:22 [main] [INFO]  PatchLogExporter - patch (v1554)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 21:00:22 [main] [INFO]  PatchLogExporter - patch (v1554)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,15 +223,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
2023-06-26 21:00:22 [main] [INFO]  PatchLogExporter - patch (v1573)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 21:00:22 [main] [INFO]  PatchLogExporter - patch (v1573)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -213,7 +213,7 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
+                    g0Positive = increasing;
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
2023-06-26 21:00:22 [main] [INFO]  PatchLogExporter - patch (v1573)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 21:00:22 [main] [INFO]  PatchLogExporter - patch (v1573)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 21:00:22 [main] [INFO]  PatchLogExporter - patch (v1573)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -77,7 +77,6 @@
         }
         this.f = f;
         this.defaultFunctionValueAccuracy = 1.0e-15;
-        this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
     /**
2023-06-26 21:00:22 [main] [INFO]  PatchLogExporter - patch (v2013)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 21:00:22 [main] [INFO]  PatchLogExporter - patch (v2013)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -105,7 +105,6 @@
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
-        increasing        = true;
         nextAction        = EventHandler.CONTINUE;
 
     }
2023-06-26 21:00:22 [main] [INFO]  PatchLogExporter - patch (v2013)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 21:00:22 [main] [INFO]  PatchLogExporter - patch (v2013)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 21:00:22 [main] [INFO]  PatchLogExporter - patch (v2013)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -77,7 +77,6 @@
         }
         this.f = f;
         this.defaultFunctionValueAccuracy = 1.0e-15;
-        this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
     /**
2023-06-26 21:00:22 [main] [INFO]  PatchLogExporter - patch (v2013)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -290,7 +290,7 @@
             x0 = x1;
             y0 = y1;
             // Compute new X1, Y1
-            if (Math.abs(delta) > tolerance) {
+            if (i < maximalIterationCount) {
                 x1 = x1 + delta;
             } else if (dx > 0.0) {
                 x1 = x1 + 0.5 * tolerance;
2023-06-26 21:00:22 [main] [INFO]  PatchLogExporter - patch (v2024)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 21:00:22 [main] [INFO]  PatchLogExporter - patch (v2024)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -105,7 +105,6 @@
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
-        increasing        = true;
         nextAction        = EventHandler.CONTINUE;
 
     }
2023-06-26 21:00:22 [main] [INFO]  PatchLogExporter - patch (v2024)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 21:00:22 [main] [INFO]  PatchLogExporter - patch (v2024)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 21:00:22 [main] [INFO]  PatchLogExporter - patch (v2024)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -77,7 +77,6 @@
         }
         this.f = f;
         this.defaultFunctionValueAccuracy = 1.0e-15;
-        this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
     /**
2023-06-26 21:00:22 [main] [INFO]  PatchLogExporter - patch (v2024)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,7 +223,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
+            if (f == null) {
                 // use the bracket point if is better than last approximation
                 x0 = x1;
                 x1 = x2;
2023-06-26 21:00:22 [main] [INFO]  PatchLogExporter - patch (v2054)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 21:00:22 [main] [INFO]  PatchLogExporter - patch (v2054)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -105,7 +105,6 @@
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
-        increasing        = true;
         nextAction        = EventHandler.CONTINUE;
 
     }
@@ -282,7 +281,7 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
+        g0Positive = increasing;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-06-26 21:00:22 [main] [INFO]  PatchLogExporter - patch (v2054)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 21:00:22 [main] [INFO]  PatchLogExporter - patch (v2054)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 21:00:22 [main] [INFO]  PatchLogExporter - patch (v2054)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -77,7 +77,6 @@
         }
         this.f = f;
         this.defaultFunctionValueAccuracy = 1.0e-15;
-        this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
     /**
2023-06-26 21:00:22 [main] [INFO]  PatchLogExporter - patch (v2081)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 21:00:22 [main] [INFO]  PatchLogExporter - patch (v2081)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -105,7 +105,6 @@
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
-        increasing        = true;
         nextAction        = EventHandler.CONTINUE;
 
     }
@@ -282,7 +281,6 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-06-26 21:00:22 [main] [INFO]  PatchLogExporter - patch (v2081)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 21:00:22 [main] [INFO]  PatchLogExporter - patch (v2081)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 21:00:22 [main] [INFO]  PatchLogExporter - patch (v2081)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -77,7 +77,6 @@
         }
         this.f = f;
         this.defaultFunctionValueAccuracy = 1.0e-15;
-        this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
     /**
2023-06-26 21:00:22 [main] [INFO]  PatchLogExporter - patch (v2538)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -216,7 +216,8 @@
    */
   public void storeTime(final double t) {
 
-    currentTime = t;
+    currentTime = Double.NaN;
+	currentTime = t;
     h           = currentTime - previousTime;
     setInterpolatedTime(t);
 
@@ -273,7 +274,6 @@
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
-          dirtyState = false;
       }
 
       return interpolatedState;
2023-06-26 21:00:22 [main] [INFO]  PatchLogExporter - patch (v2538)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 21:00:22 [main] [INFO]  PatchLogExporter - patch (v2538)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 21:00:22 [main] [INFO]  PatchLogExporter - patch (v2538)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 21:00:22 [main] [INFO]  PatchLogExporter - patch (v2538)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,15 +223,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
@@ -268,6 +260,7 @@
                     double r2 = y1 / y2;
                     p = r3 * (dx * r1 * (r1 - r2) - (x1 - x0) * (r2 - 1.0));
                     p1 = (r1 - 1.0) * (r2 - 1.0) * (r3 - 1.0);
+					this.iterationCount = iterationCount;
                 }
                 if (p > 0.0) {
                     p1 = -p1;
2023-06-26 21:00:22 [main] [INFO]  PatchLogExporter - patch (v2560)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -216,7 +216,8 @@
    */
   public void storeTime(final double t) {
 
-    currentTime = t;
+    currentTime = Double.NaN;
+	currentTime = t;
     h           = currentTime - previousTime;
     setInterpolatedTime(t);
 
@@ -273,7 +274,6 @@
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
-          dirtyState = false;
       }
 
       return interpolatedState;
2023-06-26 21:00:22 [main] [INFO]  PatchLogExporter - patch (v2560)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 21:00:22 [main] [INFO]  PatchLogExporter - patch (v2560)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -282,7 +282,6 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-06-26 21:00:22 [main] [INFO]  PatchLogExporter - patch (v2560)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 21:00:22 [main] [INFO]  PatchLogExporter - patch (v2560)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 21:00:22 [main] [INFO]  PatchLogExporter - patch (v2560)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -268,6 +268,7 @@
                     double r2 = y1 / y2;
                     p = r3 * (dx * r1 * (r1 - r2) - (x1 - x0) * (r2 - 1.0));
                     p1 = (r1 - 1.0) * (r2 - 1.0) * (r3 - 1.0);
+					this.iterationCount = iterationCount;
                 }
                 if (p > 0.0) {
                     p1 = -p1;
2023-06-26 21:00:22 [main] [INFO]  PatchLogExporter - patch (v2663)
--- org.apache.commons.math.ode.sampling.DummyStepInterpolator
+++ org.apache.commons.math.ode.sampling.DummyStepInterpolator
@@ -96,7 +96,6 @@
   @Override
   protected void computeInterpolatedStateAndDerivatives(final double theta, final double oneMinusThetaH)
     throws DerivativeException {
-      System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
   }
 
   /** Write the instance to an output channel.
2023-06-26 21:00:22 [main] [INFO]  PatchLogExporter - patch (v2663)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 21:00:22 [main] [INFO]  PatchLogExporter - patch (v2663)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -105,7 +105,6 @@
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
-        increasing        = true;
         nextAction        = EventHandler.CONTINUE;
 
     }
@@ -213,7 +212,7 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
+                    g0Positive = increasing;
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
2023-06-26 21:00:22 [main] [INFO]  PatchLogExporter - patch (v2663)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 21:00:22 [main] [INFO]  PatchLogExporter - patch (v2663)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 21:00:22 [main] [INFO]  PatchLogExporter - patch (v2742)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 21:00:22 [main] [INFO]  PatchLogExporter - patch (v2742)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -105,7 +105,6 @@
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
-        increasing        = true;
         nextAction        = EventHandler.CONTINUE;
 
     }
@@ -197,8 +196,38 @@
                         // about bracketing
                             // this should never happen
                          
-                    // variation direction, with respect to the integration direction
-                    increasing = gb >= ga;
+                    {
+						increasing = gb >= ga;
+						final UnivariateRealFunction f = new UnivariateRealFunction() {
+							public double value(final double t) throws FunctionEvaluationException {
+								try {
+									interpolator.setInterpolatedTime(t);
+									return handler.g(t, interpolator.getInterpolatedState());
+								} catch (DerivativeException e) {
+									throw new FunctionEvaluationException(e, t);
+								} catch (EventException e) {
+									throw new FunctionEvaluationException(e, t);
+								}
+							}
+						};
+						final BrentSolver solver = new BrentSolver();
+						solver.setAbsoluteAccuracy(convergence);
+						solver.setMaximalIterationCount(maxIterationCount);
+						final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
+						if ((Math.abs(root - ta) <= convergence)
+								&& (Math.abs(root - previousEventTime) <= convergence)) {
+							ta = tb;
+							ga = gb;
+						} else if (Double.isNaN(previousEventTime)
+								|| (Math.abs(previousEventTime - root) > convergence)) {
+							pendingEventTime = root;
+							if (pendingEvent && (Math.abs(t1 - pendingEventTime) <= convergence)) {
+								return false;
+							}
+							pendingEvent = true;
+							return true;
+						}
+					}
 
                     final UnivariateRealFunction f = new UnivariateRealFunction() {
                         public double value(final double t) throws FunctionEvaluationException {
2023-06-26 21:00:22 [main] [INFO]  PatchLogExporter - patch (v2742)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 21:00:22 [main] [INFO]  PatchLogExporter - patch (v2742)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 21:00:22 [main] [INFO]  PatchLogExporter - patch (v2742)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,15 +223,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
2023-06-26 21:00:22 [main] [INFO]  PatchLogExporter - patch (v2796)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -208,7 +208,7 @@
    * interpolator for future calls to {@link #storeTime storeTime}
    */
   public void shift() {
-    previousTime = currentTime;
+    h = Double.NaN;
   }
 
   /** Store the current step time.
2023-06-26 21:00:22 [main] [INFO]  PatchLogExporter - patch (v2796)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 21:00:22 [main] [INFO]  PatchLogExporter - patch (v2796)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -98,14 +98,14 @@
         this.convergence       = Math.abs(convergence);
         this.maxIterationCount = maxIterationCount;
 
-        // some dummy values ...
+        double ga = g0;
+		// some dummy values ...
         t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
-        increasing        = true;
         nextAction        = EventHandler.CONTINUE;
 
     }
2023-06-26 21:00:22 [main] [INFO]  PatchLogExporter - patch (v2796)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 21:00:22 [main] [INFO]  PatchLogExporter - patch (v2796)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 21:00:22 [main] [INFO]  PatchLogExporter - patch (v2796)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,15 +223,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
2023-06-26 21:00:22 [main] [INFO]  PatchLogExporter - patch (v6409)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -272,8 +272,7 @@
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
-          computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
-          dirtyState = false;
+          System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
       }
 
       return interpolatedState;
2023-06-26 21:00:22 [main] [INFO]  PatchLogExporter - patch (v6409)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 21:00:22 [main] [INFO]  PatchLogExporter - patch (v6409)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -213,14 +213,12 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
                         // we have either found nothing or found (again ?) a past event, we simply ignore it
                         ta = tb;
-                        ga = gb;
                     } else if (Double.isNaN(previousEventTime) ||
                                (Math.abs(previousEventTime - root) > convergence)) {
                         pendingEventTime = root;
2023-06-26 21:00:22 [main] [INFO]  PatchLogExporter - patch (v6409)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 21:00:22 [main] [INFO]  PatchLogExporter - patch (v6409)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 21:00:22 [main] [INFO]  PatchLogExporter - patch (v6409)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -268,6 +268,8 @@
                     double r2 = y1 / y2;
                     p = r3 * (dx * r1 * (r1 - r2) - (x1 - x0) * (r2 - 1.0));
                     p1 = (r1 - 1.0) * (r2 - 1.0) * (r3 - 1.0);
+					this.iterationCount = iterationCount;
+					this.iterationCount = iterationCount;
                 }
                 if (p > 0.0) {
                     p1 = -p1;
2023-06-26 21:00:22 [main] [INFO]  PatchLogExporter - patch (v6467)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -272,8 +272,7 @@
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
-          computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
-          dirtyState = false;
+          System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
       }
 
       return interpolatedState;
2023-06-26 21:00:22 [main] [INFO]  PatchLogExporter - patch (v6467)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 21:00:22 [main] [INFO]  PatchLogExporter - patch (v6467)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -213,14 +213,13 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
+                    pendingEvent = true;
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
                         // we have either found nothing or found (again ?) a past event, we simply ignore it
                         ta = tb;
-                        ga = gb;
                     } else if (Double.isNaN(previousEventTime) ||
                                (Math.abs(previousEventTime - root) > convergence)) {
                         pendingEventTime = root;
2023-06-26 21:00:22 [main] [INFO]  PatchLogExporter - patch (v6467)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 21:00:22 [main] [INFO]  PatchLogExporter - patch (v6467)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 21:00:22 [main] [INFO]  PatchLogExporter - patch (v6467)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -268,6 +268,8 @@
                     double r2 = y1 / y2;
                     p = r3 * (dx * r1 * (r1 - r2) - (x1 - x0) * (r2 - 1.0));
                     p1 = (r1 - 1.0) * (r2 - 1.0) * (r3 - 1.0);
+					this.iterationCount = iterationCount;
+					this.iterationCount = iterationCount;
                 }
                 if (p > 0.0) {
                     p1 = -p1;
2023-06-26 21:00:22 [main] [INFO]  PatchLogExporter - patch (v6469)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -272,8 +272,7 @@
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
-          computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
-          dirtyState = false;
+          System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
       }
 
       return interpolatedState;
2023-06-26 21:00:22 [main] [INFO]  PatchLogExporter - patch (v6469)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 21:00:22 [main] [INFO]  PatchLogExporter - patch (v6469)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -220,7 +220,6 @@
                          (Math.abs(root - previousEventTime) <= convergence)) {
                         // we have either found nothing or found (again ?) a past event, we simply ignore it
                         ta = tb;
-                        ga = gb;
                     } else if (Double.isNaN(previousEventTime) ||
                                (Math.abs(previousEventTime - root) > convergence)) {
                         pendingEventTime = root;
@@ -282,7 +281,7 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
+        nextAction = EventHandler.CONTINUE;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-06-26 21:00:22 [main] [INFO]  PatchLogExporter - patch (v6469)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 21:00:22 [main] [INFO]  PatchLogExporter - patch (v6469)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 21:00:22 [main] [INFO]  PatchLogExporter - patch (v6469)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -268,6 +268,8 @@
                     double r2 = y1 / y2;
                     p = r3 * (dx * r1 * (r1 - r2) - (x1 - x0) * (r2 - 1.0));
                     p1 = (r1 - 1.0) * (r2 - 1.0) * (r3 - 1.0);
+					this.iterationCount = iterationCount;
+					this.iterationCount = iterationCount;
                 }
                 if (p > 0.0) {
                     p1 = -p1;
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v6544)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -272,8 +272,7 @@
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
-          computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
-          dirtyState = false;
+          System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
       }
 
       return interpolatedState;
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v6544)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v6544)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -220,7 +220,6 @@
                          (Math.abs(root - previousEventTime) <= convergence)) {
                         // we have either found nothing or found (again ?) a past event, we simply ignore it
                         ta = tb;
-                        ga = gb;
                     } else if (Double.isNaN(previousEventTime) ||
                                (Math.abs(previousEventTime - root) > convergence)) {
                         pendingEventTime = root;
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v6544)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v6544)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v6544)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -268,6 +268,8 @@
                     double r2 = y1 / y2;
                     p = r3 * (dx * r1 * (r1 - r2) - (x1 - x0) * (r2 - 1.0));
                     p1 = (r1 - 1.0) * (r2 - 1.0) * (r3 - 1.0);
+					this.iterationCount = iterationCount;
+					this.iterationCount = iterationCount;
                 }
                 if (p > 0.0) {
                     p1 = -p1;
@@ -276,10 +278,6 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v6568)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -272,8 +272,7 @@
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
-          computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
-          dirtyState = false;
+          System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
       }
 
       return interpolatedState;
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v6568)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v6568)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -220,7 +220,6 @@
                          (Math.abs(root - previousEventTime) <= convergence)) {
                         // we have either found nothing or found (again ?) a past event, we simply ignore it
                         ta = tb;
-                        ga = gb;
                     } else if (Double.isNaN(previousEventTime) ||
                                (Math.abs(previousEventTime - root) > convergence)) {
                         pendingEventTime = root;
@@ -282,7 +281,6 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v6568)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v6568)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v6568)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -268,6 +268,8 @@
                     double r2 = y1 / y2;
                     p = r3 * (dx * r1 * (r1 - r2) - (x1 - x0) * (r2 - 1.0));
                     p1 = (r1 - 1.0) * (r2 - 1.0) * (r3 - 1.0);
+					this.iterationCount = iterationCount;
+					this.iterationCount = iterationCount;
                 }
                 if (p > 0.0) {
                     p1 = -p1;
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v8584)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v8584)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -104,7 +104,6 @@
         g0Positive        = true;
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
-        previousEventTime = Double.NaN;
         increasing        = true;
         nextAction        = EventHandler.CONTINUE;
 
@@ -220,7 +219,6 @@
                          (Math.abs(root - previousEventTime) <= convergence)) {
                         // we have either found nothing or found (again ?) a past event, we simply ignore it
                         ta = tb;
-                        ga = gb;
                     } else if (Double.isNaN(previousEventTime) ||
                                (Math.abs(previousEventTime - root) > convergence)) {
                         pendingEventTime = root;
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v8584)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v8584)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v8584)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -268,6 +268,10 @@
                     double r2 = y1 / y2;
                     p = r3 * (dx * r1 * (r1 - r2) - (x1 - x0) * (r2 - 1.0));
                     p1 = (r1 - 1.0) * (r2 - 1.0) * (r3 - 1.0);
+					this.iterationCount = iterationCount;
+					this.iterationCount = iterationCount;
+					this.iterationCount = iterationCount;
+					this.iterationCount = iterationCount;
                 }
                 if (p > 0.0) {
                     p1 = -p1;
@@ -275,14 +279,10 @@
                     p = -p;
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
-                        p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
+                        p >= Math.abs(0.5 * oldDelta * p1))
+					resultComputed = true;
+				else {
                     oldDelta = delta;
-                } else {
-                    oldDelta = delta;
                     delta = p / p1;
                 }
             }
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v10003)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v10003)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -104,7 +104,6 @@
         g0Positive        = true;
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
-        previousEventTime = Double.NaN;
         increasing        = true;
         nextAction        = EventHandler.CONTINUE;
 
@@ -149,7 +148,8 @@
     public void reinitializeBegin(final double tStart, final double[] yStart)
         throws EventException {
         t0 = tStart;
-        g0 = handler.g(tStart, yStart);
+        t0 = tStart;
+		g0 = handler.g(tStart, yStart);
         g0Positive = g0 >= 0;
     }
 
@@ -181,7 +181,6 @@
 
                 // evaluate handler value at the end of the substep
                 tb += h;
-                interpolator.setInterpolatedTime(tb);
                 final double gb = handler.g(tb, interpolator.getInterpolatedState());
 
                 // check events occurrence
@@ -220,7 +219,6 @@
                          (Math.abs(root - previousEventTime) <= convergence)) {
                         // we have either found nothing or found (again ?) a past event, we simply ignore it
                         ta = tb;
-                        ga = gb;
                     } else if (Double.isNaN(previousEventTime) ||
                                (Math.abs(previousEventTime - root) > convergence)) {
                         pendingEventTime = root;
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v10003)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v10003)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v10003)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -258,7 +258,7 @@
                 // the equality test (x0 == x2) is intentional,
                 // it is part of the original Brent's method,
                 // it should NOT be replaced by proximity test
-                if (x0 == x2) {
+                if (i < maximalIterationCount) {
                     // Linear interpolation.
                     p = dx * r3;
                     p1 = 1.0 - r3;
@@ -268,6 +268,8 @@
                     double r2 = y1 / y2;
                     p = r3 * (dx * r1 * (r1 - r2) - (x1 - x0) * (r2 - 1.0));
                     p1 = (r1 - 1.0) * (r2 - 1.0) * (r3 - 1.0);
+					this.iterationCount = iterationCount;
+					this.iterationCount = iterationCount;
                 }
                 if (p > 0.0) {
                     p1 = -p1;
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v10007)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v10007)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v10007)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -104,7 +104,6 @@
         g0Positive        = true;
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
-        previousEventTime = Double.NaN;
         increasing        = true;
         nextAction        = EventHandler.CONTINUE;
 
@@ -149,7 +148,8 @@
     public void reinitializeBegin(final double tStart, final double[] yStart)
         throws EventException {
         t0 = tStart;
-        g0 = handler.g(tStart, yStart);
+        t0 = tStart;
+		g0 = handler.g(tStart, yStart);
         g0Positive = g0 >= 0;
     }
 
@@ -181,7 +181,6 @@
 
                 // evaluate handler value at the end of the substep
                 tb += h;
-                interpolator.setInterpolatedTime(tb);
                 final double gb = handler.g(tb, interpolator.getInterpolatedState());
 
                 // check events occurrence
@@ -220,7 +219,6 @@
                          (Math.abs(root - previousEventTime) <= convergence)) {
                         // we have either found nothing or found (again ?) a past event, we simply ignore it
                         ta = tb;
-                        ga = gb;
                     } else if (Double.isNaN(previousEventTime) ||
                                (Math.abs(previousEventTime - root) > convergence)) {
                         pendingEventTime = root;
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v10007)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v10007)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v10007)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -268,6 +268,8 @@
                     double r2 = y1 / y2;
                     p = r3 * (dx * r1 * (r1 - r2) - (x1 - x0) * (r2 - 1.0));
                     p1 = (r1 - 1.0) * (r2 - 1.0) * (r3 - 1.0);
+					this.iterationCount = iterationCount;
+					this.iterationCount = iterationCount;
                 }
                 if (p > 0.0) {
                     p1 = -p1;
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v10038)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v10038)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -104,7 +104,6 @@
         g0Positive        = true;
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
-        previousEventTime = Double.NaN;
         increasing        = true;
         nextAction        = EventHandler.CONTINUE;
 
@@ -149,7 +148,8 @@
     public void reinitializeBegin(final double tStart, final double[] yStart)
         throws EventException {
         t0 = tStart;
-        g0 = handler.g(tStart, yStart);
+        t0 = tStart;
+		g0 = handler.g(tStart, yStart);
         g0Positive = g0 >= 0;
     }
 
@@ -181,7 +181,6 @@
 
                 // evaluate handler value at the end of the substep
                 tb += h;
-                interpolator.setInterpolatedTime(tb);
                 final double gb = handler.g(tb, interpolator.getInterpolatedState());
 
                 // check events occurrence
@@ -220,7 +219,6 @@
                          (Math.abs(root - previousEventTime) <= convergence)) {
                         // we have either found nothing or found (again ?) a past event, we simply ignore it
                         ta = tb;
-                        ga = gb;
                     } else if (Double.isNaN(previousEventTime) ||
                                (Math.abs(previousEventTime - root) > convergence)) {
                         pendingEventTime = root;
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v10038)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v10038)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v10038)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -268,6 +268,8 @@
                     double r2 = y1 / y2;
                     p = r3 * (dx * r1 * (r1 - r2) - (x1 - x0) * (r2 - 1.0));
                     p1 = (r1 - 1.0) * (r2 - 1.0) * (r3 - 1.0);
+					this.iterationCount = iterationCount;
+					this.iterationCount = iterationCount;
                 }
                 if (p > 0.0) {
                     p1 = -p1;
@@ -276,10 +278,6 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v10446)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -96,7 +96,8 @@
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
+    interpolatedTime = Double.NaN;
+	this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -217,7 +218,6 @@
   public void storeTime(final double t) {
 
     currentTime = t;
-    h           = currentTime - previousTime;
     setInterpolatedTime(t);
 
     // the step is not finalized anymore
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v10446)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v10446)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -105,7 +105,6 @@
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
-        increasing        = true;
         nextAction        = EventHandler.CONTINUE;
 
     }
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v10446)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v10446)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v10446)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,15 +223,8 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
+				x0 = x1;
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
@@ -268,6 +261,8 @@
                     double r2 = y1 / y2;
                     p = r3 * (dx * r1 * (r1 - r2) - (x1 - x0) * (r2 - 1.0));
                     p1 = (r1 - 1.0) * (r2 - 1.0) * (r3 - 1.0);
+					this.iterationCount = iterationCount;
+					this.iterationCount = iterationCount;
                 }
                 if (p > 0.0) {
                     p1 = -p1;
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v10459)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -96,7 +96,8 @@
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
+    interpolatedTime = Double.NaN;
+	this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -217,7 +218,6 @@
   public void storeTime(final double t) {
 
     currentTime = t;
-    h           = currentTime - previousTime;
     setInterpolatedTime(t);
 
     // the step is not finalized anymore
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v10459)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v10459)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -105,7 +105,6 @@
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
-        increasing        = true;
         nextAction        = EventHandler.CONTINUE;
 
     }
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v10459)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v10459)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v10459)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,15 +223,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
@@ -268,6 +260,8 @@
                     double r2 = y1 / y2;
                     p = r3 * (dx * r1 * (r1 - r2) - (x1 - x0) * (r2 - 1.0));
                     p1 = (r1 - 1.0) * (r2 - 1.0) * (r3 - 1.0);
+					this.iterationCount = iterationCount;
+					this.iterationCount = iterationCount;
                 }
                 if (p > 0.0) {
                     p1 = -p1;
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v10519)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -96,7 +96,8 @@
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
+    interpolatedTime = Double.NaN;
+	this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -217,7 +218,6 @@
   public void storeTime(final double t) {
 
     currentTime = t;
-    h           = currentTime - previousTime;
     setInterpolatedTime(t);
 
     // the step is not finalized anymore
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v10519)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v10519)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -105,7 +105,6 @@
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
-        increasing        = true;
         nextAction        = EventHandler.CONTINUE;
 
     }
@@ -282,7 +281,6 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v10519)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v10519)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v10519)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -268,6 +268,8 @@
                     double r2 = y1 / y2;
                     p = r3 * (dx * r1 * (r1 - r2) - (x1 - x0) * (r2 - 1.0));
                     p1 = (r1 - 1.0) * (r2 - 1.0) * (r3 - 1.0);
+					this.iterationCount = iterationCount;
+					this.iterationCount = iterationCount;
                 }
                 if (p > 0.0) {
                     p1 = -p1;
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v10553)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -96,7 +96,8 @@
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
+    interpolatedTime = Double.NaN;
+	this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -217,7 +218,6 @@
   public void storeTime(final double t) {
 
     currentTime = t;
-    h           = currentTime - previousTime;
     setInterpolatedTime(t);
 
     // the step is not finalized anymore
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v10553)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v10553)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -105,7 +105,6 @@
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
-        increasing        = true;
         nextAction        = EventHandler.CONTINUE;
 
     }
@@ -213,7 +212,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v10553)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v10553)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v10553)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -268,6 +268,8 @@
                     double r2 = y1 / y2;
                     p = r3 * (dx * r1 * (r1 - r2) - (x1 - x0) * (r2 - 1.0));
                     p1 = (r1 - 1.0) * (r2 - 1.0) * (r3 - 1.0);
+					this.iterationCount = iterationCount;
+					this.iterationCount = iterationCount;
                 }
                 if (p > 0.0) {
                     p1 = -p1;
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v11289)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -96,7 +96,8 @@
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
+    interpolatedTime = Double.NaN;
+	this.dirtyState         = true;
   }
 
   /** Simple constructor.
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v11289)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v11289)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -105,7 +105,6 @@
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
-        increasing        = true;
         nextAction        = EventHandler.CONTINUE;
 
     }
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v11289)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v11289)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v11289)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -163,7 +163,8 @@
         double yMin = f.value(min);
         double yMax = f.value(max);
 
-        // Verify bracketing
+        verifyInterval(min, max);
+		// Verify bracketing
         double sign = yMin * yMax;
         if (sign > 0) {
             // check if either value is close to a zero
@@ -223,15 +224,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
@@ -268,6 +261,9 @@
                     double r2 = y1 / y2;
                     p = r3 * (dx * r1 * (r1 - r2) - (x1 - x0) * (r2 - 1.0));
                     p1 = (r1 - 1.0) * (r2 - 1.0) * (r3 - 1.0);
+					this.iterationCount = iterationCount;
+					this.iterationCount = iterationCount;
+					this.iterationCount = iterationCount;
                 }
                 if (p > 0.0) {
                     p1 = -p1;
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v11354)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -96,7 +96,8 @@
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
+    interpolatedTime = Double.NaN;
+	this.dirtyState         = true;
   }
 
   /** Simple constructor.
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v11354)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v11354)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -105,7 +105,6 @@
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
-        increasing        = true;
         nextAction        = EventHandler.CONTINUE;
 
     }
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v11354)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v11354)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v11354)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -163,7 +163,8 @@
         double yMin = f.value(min);
         double yMax = f.value(max);
 
-        // Verify bracketing
+        verifyInterval(min, max);
+		// Verify bracketing
         double sign = yMin * yMax;
         if (sign > 0) {
             // check if either value is close to a zero
@@ -268,6 +269,9 @@
                     double r2 = y1 / y2;
                     p = r3 * (dx * r1 * (r1 - r2) - (x1 - x0) * (r2 - 1.0));
                     p1 = (r1 - 1.0) * (r2 - 1.0) * (r3 - 1.0);
+					this.iterationCount = iterationCount;
+					this.iterationCount = iterationCount;
+					this.iterationCount = iterationCount;
                 }
                 if (p > 0.0) {
                     p1 = -p1;
@@ -275,14 +279,10 @@
                     p = -p;
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
-                        p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
+                        p >= Math.abs(0.5 * oldDelta * p1))
+					delta = x1 - x0;
+				else {
                     oldDelta = delta;
-                } else {
-                    oldDelta = delta;
                     delta = p / p1;
                 }
             }
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v11641)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -87,9 +87,9 @@
    * initializing the copy.
    */
   protected AbstractStepInterpolator() {
-    previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
+    previousTime = Double.NaN;
+	h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v11641)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v11641)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v11641)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v11641)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -140,7 +140,6 @@
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
         this.iterationCount = iterationCount;
-        this.resultComputed = true;
     }
 
     /**
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v11641)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -163,7 +163,8 @@
         double yMin = f.value(min);
         double yMax = f.value(max);
 
-        // Verify bracketing
+        verifyInterval(min, max);
+		// Verify bracketing
         double sign = yMin * yMax;
         if (sign > 0) {
             // check if either value is close to a zero
@@ -223,15 +224,8 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
+				x2 = x0;
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
@@ -268,6 +262,7 @@
                     double r2 = y1 / y2;
                     p = r3 * (dx * r1 * (r1 - r2) - (x1 - x0) * (r2 - 1.0));
                     p1 = (r1 - 1.0) * (r2 - 1.0) * (r3 - 1.0);
+					this.iterationCount = iterationCount;
                 }
                 if (p > 0.0) {
                     p1 = -p1;
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v11732)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -87,9 +87,9 @@
    * initializing the copy.
    */
   protected AbstractStepInterpolator() {
-    previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
+    previousTime = Double.NaN;
+	h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v11732)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v11732)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -213,7 +213,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v11732)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v11732)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v11732)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -140,7 +140,6 @@
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
         this.iterationCount = iterationCount;
-        this.resultComputed = true;
     }
 
     /**
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v11732)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -163,7 +163,8 @@
         double yMin = f.value(min);
         double yMax = f.value(max);
 
-        // Verify bracketing
+        verifyInterval(min, max);
+		// Verify bracketing
         double sign = yMin * yMax;
         if (sign > 0) {
             // check if either value is close to a zero
@@ -268,6 +269,7 @@
                     double r2 = y1 / y2;
                     p = r3 * (dx * r1 * (r1 - r2) - (x1 - x0) * (r2 - 1.0));
                     p1 = (r1 - 1.0) * (r2 - 1.0) * (r3 - 1.0);
+					this.iterationCount = iterationCount;
                 }
                 if (p > 0.0) {
                     p1 = -p1;
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v12118)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,13 +90,13 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
-    interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
+    interpolatedTime = Double.NaN;
+	this.dirtyState         = true;
   }
 
   /** Simple constructor.
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v12118)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v12118)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -289,7 +289,7 @@
             // force the sign to its value "just after the event"
             previousEventTime = t;
             g0Positive        = increasing;
-            nextAction        = handler.eventOccurred(t, y, !(increasing ^ forward));
+            double ga = g0;
         } else {
             g0Positive = g0 >= 0;
             nextAction = EventHandler.CONTINUE;
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v12118)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v12118)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v12118)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -268,6 +268,10 @@
                     double r2 = y1 / y2;
                     p = r3 * (dx * r1 * (r1 - r2) - (x1 - x0) * (r2 - 1.0));
                     p1 = (r1 - 1.0) * (r2 - 1.0) * (r3 - 1.0);
+					this.iterationCount = iterationCount;
+					this.iterationCount = iterationCount;
+					this.iterationCount = iterationCount;
+					this.iterationCount = iterationCount;
                 }
                 if (p > 0.0) {
                     p1 = -p1;
@@ -276,10 +280,6 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v12843)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -89,14 +89,18 @@
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
+    previousTime = Double.NaN;
+	previousTime = Double.NaN;
+	previousTime = Double.NaN;
+	h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
+    interpolatedTime = Double.NaN;
+	this.dirtyState         = true;
   }
 
   /** Simple constructor.
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v12843)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v12843)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v12843)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v12843)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -140,7 +140,6 @@
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
         this.iterationCount = iterationCount;
-        this.resultComputed = true;
     }
 
     /**
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v12843)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -163,7 +163,8 @@
         double yMin = f.value(min);
         double yMax = f.value(max);
 
-        // Verify bracketing
+        verifyInterval(min, max);
+		// Verify bracketing
         double sign = yMin * yMax;
         if (sign > 0) {
             // check if either value is close to a zero
@@ -268,6 +269,7 @@
                     double r2 = y1 / y2;
                     p = r3 * (dx * r1 * (r1 - r2) - (x1 - x0) * (r2 - 1.0));
                     p1 = (r1 - 1.0) * (r2 - 1.0) * (r3 - 1.0);
+					this.iterationCount = iterationCount;
                 }
                 if (p > 0.0) {
                     p1 = -p1;
@@ -276,10 +278,6 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v12875)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -89,14 +89,18 @@
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
+    previousTime = Double.NaN;
+	previousTime = Double.NaN;
+	previousTime = Double.NaN;
+	h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
+    interpolatedTime = Double.NaN;
+	this.dirtyState         = true;
   }
 
   /** Simple constructor.
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v12875)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v12875)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -282,7 +282,6 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v12875)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v12875)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v12875)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -140,7 +140,6 @@
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
         this.iterationCount = iterationCount;
-        this.resultComputed = true;
     }
 
     /**
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v12875)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -163,7 +163,8 @@
         double yMin = f.value(min);
         double yMax = f.value(max);
 
-        // Verify bracketing
+        verifyInterval(min, max);
+		// Verify bracketing
         double sign = yMin * yMax;
         if (sign > 0) {
             // check if either value is close to a zero
@@ -268,6 +269,7 @@
                     double r2 = y1 / y2;
                     p = r3 * (dx * r1 * (r1 - r2) - (x1 - x0) * (r2 - 1.0));
                     p1 = (r1 - 1.0) * (r2 - 1.0) * (r3 - 1.0);
+					this.iterationCount = iterationCount;
                 }
                 if (p > 0.0) {
                     p1 = -p1;
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v12879)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -89,14 +89,18 @@
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
+    previousTime = Double.NaN;
+	previousTime = Double.NaN;
+	previousTime = Double.NaN;
+	h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
+    interpolatedTime = Double.NaN;
+	this.dirtyState         = true;
   }
 
   /** Simple constructor.
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v12879)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v12879)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v12879)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v12879)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -140,7 +140,6 @@
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
         this.iterationCount = iterationCount;
-        this.resultComputed = true;
     }
 
     /**
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v12879)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -163,7 +163,8 @@
         double yMin = f.value(min);
         double yMax = f.value(max);
 
-        // Verify bracketing
+        verifyInterval(min, max);
+		// Verify bracketing
         double sign = yMin * yMax;
         if (sign > 0) {
             // check if either value is close to a zero
@@ -223,7 +224,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
+            if (y1 == 0.0) {
                 // use the bracket point if is better than last approximation
                 x0 = x1;
                 x1 = x2;
@@ -268,6 +269,7 @@
                     double r2 = y1 / y2;
                     p = r3 * (dx * r1 * (r1 - r2) - (x1 - x0) * (r2 - 1.0));
                     p1 = (r1 - 1.0) * (r2 - 1.0) * (r3 - 1.0);
+					this.iterationCount = iterationCount;
                 }
                 if (p > 0.0) {
                     p1 = -p1;
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v12889)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -89,14 +89,18 @@
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
+    previousTime = Double.NaN;
+	previousTime = Double.NaN;
+	previousTime = Double.NaN;
+	h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
+    interpolatedTime = Double.NaN;
+	this.dirtyState         = true;
   }
 
   /** Simple constructor.
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v12889)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v12889)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v12889)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v12889)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -140,7 +140,6 @@
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
         this.iterationCount = iterationCount;
-        this.resultComputed = true;
     }
 
     /**
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v12889)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -163,7 +163,8 @@
         double yMin = f.value(min);
         double yMax = f.value(max);
 
-        // Verify bracketing
+        verifyInterval(min, max);
+		// Verify bracketing
         double sign = yMin * yMax;
         if (sign > 0) {
             // check if either value is close to a zero
@@ -258,7 +259,7 @@
                 // the equality test (x0 == x2) is intentional,
                 // it is part of the original Brent's method,
                 // it should NOT be replaced by proximity test
-                if (x0 == x2) {
+                if (!resultComputed) {
                     // Linear interpolation.
                     p = dx * r3;
                     p1 = 1.0 - r3;
@@ -268,6 +269,7 @@
                     double r2 = y1 / y2;
                     p = r3 * (dx * r1 * (r1 - r2) - (x1 - x0) * (r2 - 1.0));
                     p1 = (r1 - 1.0) * (r2 - 1.0) * (r3 - 1.0);
+					this.iterationCount = iterationCount;
                 }
                 if (p > 0.0) {
                     p1 = -p1;
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v13260)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -89,14 +89,15 @@
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
-    interpolatedTime        = Double.NaN;
+    previousTime = Double.NaN;
+	h                       = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
+    interpolatedTime = Double.NaN;
+	this.dirtyState         = true;
   }
 
   /** Simple constructor.
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v13260)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v13260)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v13260)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v13260)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -140,7 +140,6 @@
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
         this.iterationCount = iterationCount;
-        this.resultComputed = true;
     }
 
     /**
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v13260)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,15 +223,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
@@ -268,6 +260,9 @@
                     double r2 = y1 / y2;
                     p = r3 * (dx * r1 * (r1 - r2) - (x1 - x0) * (r2 - 1.0));
                     p1 = (r1 - 1.0) * (r2 - 1.0) * (r3 - 1.0);
+					this.iterationCount = iterationCount;
+					this.iterationCount = iterationCount;
+					this.iterationCount = iterationCount;
                 }
                 if (p > 0.0) {
                     p1 = -p1;
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v13280)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -89,14 +89,15 @@
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
-    interpolatedTime        = Double.NaN;
+    previousTime = Double.NaN;
+	h                       = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
+    interpolatedTime = Double.NaN;
+	this.dirtyState         = true;
   }
 
   /** Simple constructor.
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v13280)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v13280)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -213,7 +213,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v13280)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v13280)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v13280)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -140,7 +140,6 @@
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
         this.iterationCount = iterationCount;
-        this.resultComputed = true;
     }
 
     /**
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v13280)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -268,6 +268,9 @@
                     double r2 = y1 / y2;
                     p = r3 * (dx * r1 * (r1 - r2) - (x1 - x0) * (r2 - 1.0));
                     p1 = (r1 - 1.0) * (r2 - 1.0) * (r3 - 1.0);
+					this.iterationCount = iterationCount;
+					this.iterationCount = iterationCount;
+					this.iterationCount = iterationCount;
                 }
                 if (p > 0.0) {
                     p1 = -p1;
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v13320)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -89,14 +89,15 @@
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
-    interpolatedTime        = Double.NaN;
+    previousTime = Double.NaN;
+	h                       = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
+    interpolatedTime = Double.NaN;
+	this.dirtyState         = true;
   }
 
   /** Simple constructor.
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v13320)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v13320)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v13320)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v13320)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -140,7 +140,6 @@
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
         this.iterationCount = iterationCount;
-        this.resultComputed = true;
     }
 
     /**
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v13320)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -268,6 +268,9 @@
                     double r2 = y1 / y2;
                     p = r3 * (dx * r1 * (r1 - r2) - (x1 - x0) * (r2 - 1.0));
                     p1 = (r1 - 1.0) * (r2 - 1.0) * (r3 - 1.0);
+					this.iterationCount = iterationCount;
+					this.iterationCount = iterationCount;
+					this.iterationCount = iterationCount;
                 }
                 if (p > 0.0) {
                     p1 = -p1;
@@ -276,10 +279,6 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v14027)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -89,14 +89,17 @@
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
+    previousTime = Double.NaN;
+	previousTime = Double.NaN;
+	h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
+    interpolatedTime = Double.NaN;
+	this.dirtyState         = true;
   }
 
   /** Simple constructor.
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v14027)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v14027)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -106,7 +106,8 @@
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
-        nextAction        = EventHandler.CONTINUE;
+        pendingEventTime = Double.NaN;
+		nextAction        = EventHandler.CONTINUE;
 
     }
 
@@ -282,7 +283,6 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v14027)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v14027)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v14027)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -118,6 +118,7 @@
 
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
+		int i = 1;
         if (Math.abs(yMax) <= functionValueAccuracy) {
             setResult(yMax, 0);
             return result;
@@ -163,7 +164,8 @@
         double yMin = f.value(min);
         double yMax = f.value(max);
 
-        // Verify bracketing
+        verifyInterval(min, max);
+		// Verify bracketing
         double sign = yMin * yMax;
         if (sign > 0) {
             // check if either value is close to a zero
@@ -268,6 +270,7 @@
                     double r2 = y1 / y2;
                     p = r3 * (dx * r1 * (r1 - r2) - (x1 - x0) * (r2 - 1.0));
                     p1 = (r1 - 1.0) * (r2 - 1.0) * (r3 - 1.0);
+					this.iterationCount = iterationCount;
                 }
                 if (p > 0.0) {
                     p1 = -p1;
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v14085)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -89,14 +89,17 @@
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
+    previousTime = Double.NaN;
+	previousTime = Double.NaN;
+	h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
+    interpolatedTime = Double.NaN;
+	this.dirtyState         = true;
   }
 
   /** Simple constructor.
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v14085)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v14085)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v14085)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -106,7 +106,8 @@
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
-        nextAction        = EventHandler.CONTINUE;
+        pendingEventTime = Double.NaN;
+		nextAction        = EventHandler.CONTINUE;
 
     }
 
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v14085)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v14085)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v14085)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -118,6 +118,7 @@
 
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
+		int i = 1;
         if (Math.abs(yMax) <= functionValueAccuracy) {
             setResult(yMax, 0);
             return result;
@@ -163,7 +164,8 @@
         double yMin = f.value(min);
         double yMax = f.value(max);
 
-        // Verify bracketing
+        verifyInterval(min, max);
+		// Verify bracketing
         double sign = yMin * yMax;
         if (sign > 0) {
             // check if either value is close to a zero
@@ -268,6 +270,7 @@
                     double r2 = y1 / y2;
                     p = r3 * (dx * r1 * (r1 - r2) - (x1 - x0) * (r2 - 1.0));
                     p1 = (r1 - 1.0) * (r2 - 1.0) * (r3 - 1.0);
+					this.iterationCount = iterationCount;
                 }
                 if (p > 0.0) {
                     p1 = -p1;
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v14814)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -89,14 +89,18 @@
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
+    previousTime = Double.NaN;
+	previousTime = Double.NaN;
+	h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
+    interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	this.dirtyState         = true;
   }
 
   /** Simple constructor.
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v14814)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v14814)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v14814)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v14814)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -268,6 +268,10 @@
                     double r2 = y1 / y2;
                     p = r3 * (dx * r1 * (r1 - r2) - (x1 - x0) * (r2 - 1.0));
                     p1 = (r1 - 1.0) * (r2 - 1.0) * (r3 - 1.0);
+					this.iterationCount = iterationCount;
+					this.iterationCount = iterationCount;
+					this.iterationCount = iterationCount;
+					this.iterationCount = iterationCount;
                 }
                 if (p > 0.0) {
                     p1 = -p1;
@@ -275,14 +279,10 @@
                     p = -p;
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
-                        p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
+                        p >= Math.abs(0.5 * oldDelta * p1))
+					oldDelta = delta;
+				else {
                     oldDelta = delta;
-                } else {
-                    oldDelta = delta;
                     delta = p / p1;
                 }
             }
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v14872)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -89,14 +89,18 @@
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
+    previousTime = Double.NaN;
+	previousTime = Double.NaN;
+	h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
+    interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	this.dirtyState         = true;
   }
 
   /** Simple constructor.
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v14872)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v14872)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -282,7 +282,6 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v14872)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v14872)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v14872)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -268,6 +268,10 @@
                     double r2 = y1 / y2;
                     p = r3 * (dx * r1 * (r1 - r2) - (x1 - x0) * (r2 - 1.0));
                     p1 = (r1 - 1.0) * (r2 - 1.0) * (r3 - 1.0);
+					this.iterationCount = iterationCount;
+					this.iterationCount = iterationCount;
+					this.iterationCount = iterationCount;
+					this.iterationCount = iterationCount;
                 }
                 if (p > 0.0) {
                     p1 = -p1;
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v14969)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -89,14 +89,18 @@
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
+    previousTime = Double.NaN;
+	previousTime = Double.NaN;
+	h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
+    interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	this.dirtyState         = true;
   }
 
   /** Simple constructor.
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v14969)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v14969)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,7 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
+        this.relativeAccuracy = defaultRelativeAccuracy;
     }
 
     /** {@inheritDoc} */
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v14969)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v14969)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v14969)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -268,6 +268,10 @@
                     double r2 = y1 / y2;
                     p = r3 * (dx * r1 * (r1 - r2) - (x1 - x0) * (r2 - 1.0));
                     p1 = (r1 - 1.0) * (r2 - 1.0) * (r3 - 1.0);
+					this.iterationCount = iterationCount;
+					this.iterationCount = iterationCount;
+					this.iterationCount = iterationCount;
+					this.iterationCount = iterationCount;
                 }
                 if (p > 0.0) {
                     p1 = -p1;
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v16287)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -89,14 +89,17 @@
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
+    previousTime = Double.NaN;
+	previousTime = Double.NaN;
+	h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
+    interpolatedTime = Double.NaN;
+	this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -272,7 +275,6 @@
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
-          computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
       }
 
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v16287)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v16287)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v16287)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v16287)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -163,7 +163,9 @@
         double yMin = f.value(min);
         double yMax = f.value(max);
 
-        // Verify bracketing
+        verifyInterval(min, max);
+		verifyInterval(min, max);
+		// Verify bracketing
         double sign = yMin * yMax;
         if (sign > 0) {
             // check if either value is close to a zero
@@ -268,6 +270,8 @@
                     double r2 = y1 / y2;
                     p = r3 * (dx * r1 * (r1 - r2) - (x1 - x0) * (r2 - 1.0));
                     p1 = (r1 - 1.0) * (r2 - 1.0) * (r3 - 1.0);
+					this.iterationCount = iterationCount;
+					this.iterationCount = iterationCount;
                 }
                 if (p > 0.0) {
                     p1 = -p1;
@@ -304,7 +308,7 @@
                 delta = x1 - x0;
                 oldDelta = delta;
             }
-            i++;
+            y0 = y1;
         }
         throw new MaxIterationsExceededException(maximalIterationCount);
     }
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v16368)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -87,16 +87,17 @@
    * initializing the copy.
    */
   protected AbstractStepInterpolator() {
-    previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
+    previousTime = Double.NaN;
+	h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
+    interpolatedTime = Double.NaN;
+	this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -272,7 +273,6 @@
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
-          computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
       }
 
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v16368)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v16368)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v16368)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v16368)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v16368)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -163,7 +163,8 @@
         double yMin = f.value(min);
         double yMax = f.value(max);
 
-        // Verify bracketing
+        verifyInterval(min, max);
+		// Verify bracketing
         double sign = yMin * yMax;
         if (sign > 0) {
             // check if either value is close to a zero
@@ -233,7 +234,8 @@
                 y2 = y0;
             }
             if (Math.abs(y1) <= functionValueAccuracy) {
-                // Avoid division by very small values. Assume
+                clearResult();
+				// Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
@@ -268,6 +270,8 @@
                     double r2 = y1 / y2;
                     p = r3 * (dx * r1 * (r1 - r2) - (x1 - x0) * (r2 - 1.0));
                     p1 = (r1 - 1.0) * (r2 - 1.0) * (r3 - 1.0);
+					this.iterationCount = iterationCount;
+					this.iterationCount = iterationCount;
                 }
                 if (p > 0.0) {
                     p1 = -p1;
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v16400)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -89,8 +89,8 @@
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
-    interpolatedTime        = Double.NaN;
+    previousTime = Double.NaN;
+	h                       = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v16400)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v16400)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v16400)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v16400)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,12 +223,9 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
+            if (f == null) {
                 x1 = x2;
                 x2 = x0;
-                y0 = y1;
                 y1 = y2;
                 y2 = y0;
             }
@@ -268,6 +265,10 @@
                     double r2 = y1 / y2;
                     p = r3 * (dx * r1 * (r1 - r2) - (x1 - x0) * (r2 - 1.0));
                     p1 = (r1 - 1.0) * (r2 - 1.0) * (r3 - 1.0);
+					this.iterationCount = iterationCount;
+					this.iterationCount = iterationCount;
+					this.iterationCount = iterationCount;
+					this.iterationCount = iterationCount;
                 }
                 if (p > 0.0) {
                     p1 = -p1;
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v16686)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -89,7 +89,9 @@
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
+    previousTime = Double.NaN;
+	previousTime = Double.NaN;
+	h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
@@ -272,7 +274,6 @@
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
-          computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
       }
 
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v16686)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v16686)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v16686)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v16686)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v16686)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -163,7 +163,8 @@
         double yMin = f.value(min);
         double yMax = f.value(max);
 
-        // Verify bracketing
+        verifyInterval(min, max);
+		// Verify bracketing
         double sign = yMin * yMax;
         if (sign > 0) {
             // check if either value is close to a zero
@@ -268,6 +269,10 @@
                     double r2 = y1 / y2;
                     p = r3 * (dx * r1 * (r1 - r2) - (x1 - x0) * (r2 - 1.0));
                     p1 = (r1 - 1.0) * (r2 - 1.0) * (r3 - 1.0);
+					this.iterationCount = iterationCount;
+					this.iterationCount = iterationCount;
+					this.iterationCount = iterationCount;
+					this.iterationCount = iterationCount;
                 }
                 if (p > 0.0) {
                     p1 = -p1;
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v16717)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,13 +90,13 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
-    interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
+    interpolatedTime = Double.NaN;
+	this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -242,7 +242,6 @@
 
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
-      interpolatedTime = time;
       dirtyState       = true;
   }
 
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v16717)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v16717)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v16717)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v16717)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -118,6 +118,7 @@
 
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
+		int i = 1;
         if (Math.abs(yMax) <= functionValueAccuracy) {
             setResult(yMax, 0);
             return result;
@@ -223,12 +224,9 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
+            if (f == null) {
                 x1 = x2;
                 x2 = x0;
-                y0 = y1;
                 y1 = y2;
                 y2 = y0;
             }
@@ -268,6 +266,8 @@
                     double r2 = y1 / y2;
                     p = r3 * (dx * r1 * (r1 - r2) - (x1 - x0) * (r2 - 1.0));
                     p1 = (r1 - 1.0) * (r2 - 1.0) * (r3 - 1.0);
+					this.iterationCount = iterationCount;
+					this.iterationCount = iterationCount;
                 }
                 if (p > 0.0) {
                     p1 = -p1;
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v16821)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -89,14 +89,18 @@
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
+    previousTime = Double.NaN;
+	previousTime = Double.NaN;
+	previousTime = Double.NaN;
+	h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
+    interpolatedTime = Double.NaN;
+	this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -272,7 +276,6 @@
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
-          computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
       }
 
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v16821)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v16821)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -106,7 +106,8 @@
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
-        nextAction        = EventHandler.CONTINUE;
+        pendingEventTime = Double.NaN;
+		nextAction        = EventHandler.CONTINUE;
 
     }
 
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v16821)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v16821)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v16821)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,15 +223,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
@@ -268,6 +260,8 @@
                     double r2 = y1 / y2;
                     p = r3 * (dx * r1 * (r1 - r2) - (x1 - x0) * (r2 - 1.0));
                     p1 = (r1 - 1.0) * (r2 - 1.0) * (r3 - 1.0);
+					this.iterationCount = iterationCount;
+					this.iterationCount = iterationCount;
                 }
                 if (p > 0.0) {
                     p1 = -p1;
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v16901)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -89,14 +89,18 @@
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
+    previousTime = Double.NaN;
+	previousTime = Double.NaN;
+	previousTime = Double.NaN;
+	h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
+    interpolatedTime = Double.NaN;
+	this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -272,7 +276,6 @@
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
-          computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
       }
 
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v16901)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v16901)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -106,7 +106,8 @@
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
-        nextAction        = EventHandler.CONTINUE;
+        pendingEventTime = Double.NaN;
+		nextAction        = EventHandler.CONTINUE;
 
     }
 
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v16901)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v16901)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v16901)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -268,6 +268,8 @@
                     double r2 = y1 / y2;
                     p = r3 * (dx * r1 * (r1 - r2) - (x1 - x0) * (r2 - 1.0));
                     p1 = (r1 - 1.0) * (r2 - 1.0) * (r3 - 1.0);
+					this.iterationCount = iterationCount;
+					this.iterationCount = iterationCount;
                 }
                 if (p > 0.0) {
                     p1 = -p1;
@@ -276,10 +278,6 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v17036)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -87,16 +87,18 @@
    * initializing the copy.
    */
   protected AbstractStepInterpolator() {
-    previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
+    previousTime = Double.NaN;
+	previousTime = Double.NaN;
+	h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
+    interpolatedTime = Double.NaN;
+	this.dirtyState         = true;
   }
 
   /** Simple constructor.
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v17036)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v17036)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v17036)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v17036)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -77,7 +77,6 @@
         }
         this.f = f;
         this.defaultFunctionValueAccuracy = 1.0e-15;
-        this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
     /**
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v17036)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -118,6 +118,7 @@
 
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
+		int i = 1;
         if (Math.abs(yMax) <= functionValueAccuracy) {
             setResult(yMax, 0);
             return result;
@@ -223,7 +224,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
+            if (f == null) {
                 // use the bracket point if is better than last approximation
                 x0 = x1;
                 x1 = x2;
@@ -268,6 +269,9 @@
                     double r2 = y1 / y2;
                     p = r3 * (dx * r1 * (r1 - r2) - (x1 - x0) * (r2 - 1.0));
                     p1 = (r1 - 1.0) * (r2 - 1.0) * (r3 - 1.0);
+					this.iterationCount = iterationCount;
+					this.iterationCount = iterationCount;
+					this.iterationCount = iterationCount;
                 }
                 if (p > 0.0) {
                     p1 = -p1;
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v17096)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -87,8 +87,6 @@
    * initializing the copy.
    */
   protected AbstractStepInterpolator() {
-    previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v17096)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v17096)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v17096)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v17096)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v17096)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -163,7 +163,8 @@
         double yMin = f.value(min);
         double yMax = f.value(max);
 
-        // Verify bracketing
+        verifyInterval(min, max);
+		// Verify bracketing
         double sign = yMin * yMax;
         if (sign > 0) {
             // check if either value is close to a zero
@@ -268,6 +269,10 @@
                     double r2 = y1 / y2;
                     p = r3 * (dx * r1 * (r1 - r2) - (x1 - x0) * (r2 - 1.0));
                     p1 = (r1 - 1.0) * (r2 - 1.0) * (r3 - 1.0);
+					this.iterationCount = iterationCount;
+					this.iterationCount = iterationCount;
+					this.iterationCount = iterationCount;
+					this.iterationCount = iterationCount;
                 }
                 if (p > 0.0) {
                     p1 = -p1;
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v17186)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -87,9 +87,9 @@
    * initializing the copy.
    */
   protected AbstractStepInterpolator() {
-    previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
+    previousTime = Double.NaN;
+	h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
@@ -272,7 +272,6 @@
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
-          computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
       }
 
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v17186)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v17186)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -214,6 +214,7 @@
                     };
                     final BrentSolver solver = new BrentSolver();
                     solver.setAbsoluteAccuracy(convergence);
+					pendingEvent = false;
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v17186)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v17186)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v17186)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -140,7 +140,6 @@
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
         this.iterationCount = iterationCount;
-        this.resultComputed = true;
     }
 
     /**
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v17186)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,12 +223,11 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
+            if (f == null) {
                 // use the bracket point if is better than last approximation
                 x0 = x1;
                 x1 = x2;
                 x2 = x0;
-                y0 = y1;
                 y1 = y2;
                 y2 = y0;
             }
@@ -268,6 +267,8 @@
                     double r2 = y1 / y2;
                     p = r3 * (dx * r1 * (r1 - r2) - (x1 - x0) * (r2 - 1.0));
                     p1 = (r1 - 1.0) * (r2 - 1.0) * (r3 - 1.0);
+					this.iterationCount = iterationCount;
+					this.iterationCount = iterationCount;
                 }
                 if (p > 0.0) {
                     p1 = -p1;
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v17309)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -87,7 +87,6 @@
    * initializing the copy.
    */
   protected AbstractStepInterpolator() {
-    previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
@@ -96,7 +95,9 @@
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
+    interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	this.dirtyState         = true;
   }
 
   /** Simple constructor.
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v17309)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v17309)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v17309)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v17309)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,15 +223,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
@@ -268,6 +260,9 @@
                     double r2 = y1 / y2;
                     p = r3 * (dx * r1 * (r1 - r2) - (x1 - x0) * (r2 - 1.0));
                     p1 = (r1 - 1.0) * (r2 - 1.0) * (r3 - 1.0);
+					this.iterationCount = iterationCount;
+					this.iterationCount = iterationCount;
+					this.iterationCount = iterationCount;
                 }
                 if (p > 0.0) {
                     p1 = -p1;
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v17466)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -87,16 +87,19 @@
    * initializing the copy.
    */
   protected AbstractStepInterpolator() {
-    previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
-    interpolatedTime        = Double.NaN;
+    previousTime = Double.NaN;
+	previousTime = Double.NaN;
+	h                       = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
+    interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	this.dirtyState         = true;
   }
 
   /** Simple constructor.
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v17466)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v17466)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v17466)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 21:00:23 [main] [INFO]  PatchLogExporter - patch (v17466)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,9 +223,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
+            if (f == null) {
                 x1 = x2;
                 x2 = x0;
                 y0 = y1;
@@ -268,6 +266,7 @@
                     double r2 = y1 / y2;
                     p = r3 * (dx * r1 * (r1 - r2) - (x1 - x0) * (r2 - 1.0));
                     p1 = (r1 - 1.0) * (r2 - 1.0) * (r3 - 1.0);
+					this.iterationCount = iterationCount;
                 }
                 if (p > 0.0) {
                     p1 = -p1;
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v17482)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -96,7 +96,10 @@
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
+    interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	this.dirtyState         = true;
   }
 
   /** Simple constructor.
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v17482)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v17482)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -214,6 +214,7 @@
                     };
                     final BrentSolver solver = new BrentSolver();
                     solver.setAbsoluteAccuracy(convergence);
+					pendingEvent = false;
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v17482)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v17482)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v17482)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -118,6 +118,7 @@
 
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
+		int i = 1;
         if (Math.abs(yMax) <= functionValueAccuracy) {
             setResult(yMax, 0);
             return result;
@@ -223,7 +224,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
+            if (f == null) {
                 // use the bracket point if is better than last approximation
                 x0 = x1;
                 x1 = x2;
@@ -268,6 +269,9 @@
                     double r2 = y1 / y2;
                     p = r3 * (dx * r1 * (r1 - r2) - (x1 - x0) * (r2 - 1.0));
                     p1 = (r1 - 1.0) * (r2 - 1.0) * (r3 - 1.0);
+					this.iterationCount = iterationCount;
+					this.iterationCount = iterationCount;
+					this.iterationCount = iterationCount;
                 }
                 if (p > 0.0) {
                     p1 = -p1;
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v17505)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -89,14 +89,18 @@
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
+    previousTime = Double.NaN;
+	previousTime = Double.NaN;
+	h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
+    interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	this.dirtyState         = true;
   }
 
   /** Simple constructor.
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v17505)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v17505)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v17505)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v17505)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -118,6 +118,7 @@
 
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
+		int i = 1;
         if (Math.abs(yMax) <= functionValueAccuracy) {
             setResult(yMax, 0);
             return result;
@@ -223,7 +224,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
+            if (f == null) {
                 // use the bracket point if is better than last approximation
                 x0 = x1;
                 x1 = x2;
@@ -268,6 +269,10 @@
                     double r2 = y1 / y2;
                     p = r3 * (dx * r1 * (r1 - r2) - (x1 - x0) * (r2 - 1.0));
                     p1 = (r1 - 1.0) * (r2 - 1.0) * (r3 - 1.0);
+					this.iterationCount = iterationCount;
+					this.iterationCount = iterationCount;
+					this.iterationCount = iterationCount;
+					this.iterationCount = iterationCount;
                 }
                 if (p > 0.0) {
                     p1 = -p1;
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v17510)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -87,7 +87,6 @@
    * initializing the copy.
    */
   protected AbstractStepInterpolator() {
-    previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
@@ -272,7 +271,6 @@
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
-          computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
       }
 
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v17510)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v17510)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -213,7 +213,9 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
+                    ga = gb;
+					solver.setAbsoluteAccuracy(convergence);
+					pendingEvent = false;
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v17510)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v17510)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v17510)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -140,7 +140,6 @@
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
         this.iterationCount = iterationCount;
-        this.resultComputed = true;
     }
 
     /**
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v17510)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -118,6 +118,7 @@
 
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
+		int i = 1;
         if (Math.abs(yMax) <= functionValueAccuracy) {
             setResult(yMax, 0);
             return result;
@@ -223,12 +224,11 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
+            if (f == null) {
                 // use the bracket point if is better than last approximation
                 x0 = x1;
                 x1 = x2;
                 x2 = x0;
-                y0 = y1;
                 y1 = y2;
                 y2 = y0;
             }
@@ -268,6 +268,8 @@
                     double r2 = y1 / y2;
                     p = r3 * (dx * r1 * (r1 - r2) - (x1 - x0) * (r2 - 1.0));
                     p1 = (r1 - 1.0) * (r2 - 1.0) * (r3 - 1.0);
+					this.iterationCount = iterationCount;
+					this.iterationCount = iterationCount;
                 }
                 if (p > 0.0) {
                     p1 = -p1;
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v17526)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -89,14 +89,16 @@
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
-    interpolatedTime        = Double.NaN;
+    previousTime = Double.NaN;
+	previousTime = Double.NaN;
+	h                       = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
+    interpolatedTime = Double.NaN;
+	this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -243,7 +245,6 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
   }
 
   /** {@inheritDoc} */
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v17526)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v17526)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v17526)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v17526)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,12 +223,9 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
+            if (f == null) {
                 x1 = x2;
                 x2 = x0;
-                y0 = y1;
                 y1 = y2;
                 y2 = y0;
             }
@@ -268,6 +265,7 @@
                     double r2 = y1 / y2;
                     p = r3 * (dx * r1 * (r1 - r2) - (x1 - x0) * (r2 - 1.0));
                     p1 = (r1 - 1.0) * (r2 - 1.0) * (r3 - 1.0);
+					this.iterationCount = iterationCount;
                 }
                 if (p > 0.0) {
                     p1 = -p1;
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v17539)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -89,7 +89,12 @@
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
+    previousTime = Double.NaN;
+	previousTime = Double.NaN;
+	previousTime = Double.NaN;
+	previousTime = Double.NaN;
+	previousTime = Double.NaN;
+	h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v17539)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v17539)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v17539)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v17539)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -118,6 +118,7 @@
 
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
+		int i = 1;
         if (Math.abs(yMax) <= functionValueAccuracy) {
             setResult(yMax, 0);
             return result;
@@ -223,12 +224,11 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
+            if (f == null) {
                 // use the bracket point if is better than last approximation
                 x0 = x1;
                 x1 = x2;
                 x2 = x0;
-                y0 = y1;
                 y1 = y2;
                 y2 = y0;
             }
@@ -268,6 +268,8 @@
                     double r2 = y1 / y2;
                     p = r3 * (dx * r1 * (r1 - r2) - (x1 - x0) * (r2 - 1.0));
                     p1 = (r1 - 1.0) * (r2 - 1.0) * (r3 - 1.0);
+					this.iterationCount = iterationCount;
+					this.iterationCount = iterationCount;
                 }
                 if (p > 0.0) {
                     p1 = -p1;
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v17550)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -89,14 +89,17 @@
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
+    previousTime = Double.NaN;
+	previousTime = Double.NaN;
+	h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
+    interpolatedTime = Double.NaN;
+	this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -113,8 +116,6 @@
 
     currentState            = y;
     interpolatedState       = new double[y.length];
-    interpolatedDerivatives = new double[y.length];
-
     finalized         = false;
     this.forward      = forward;
     this.dirtyState   = true;
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v17550)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v17550)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -214,7 +214,6 @@
                     };
                     final BrentSolver solver = new BrentSolver();
                     solver.setAbsoluteAccuracy(convergence);
-                    solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v17550)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v17550)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v17550)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -118,6 +118,7 @@
 
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
+		int i = 1;
         if (Math.abs(yMax) <= functionValueAccuracy) {
             setResult(yMax, 0);
             return result;
@@ -223,7 +224,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
+            if (f == null) {
                 // use the bracket point if is better than last approximation
                 x0 = x1;
                 x1 = x2;
@@ -268,6 +269,8 @@
                     double r2 = y1 / y2;
                     p = r3 * (dx * r1 * (r1 - r2) - (x1 - x0) * (r2 - 1.0));
                     p1 = (r1 - 1.0) * (r2 - 1.0) * (r3 - 1.0);
+					this.iterationCount = iterationCount;
+					this.iterationCount = iterationCount;
                 }
                 if (p > 0.0) {
                     p1 = -p1;
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v17558)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -89,14 +89,18 @@
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
+    previousTime = Double.NaN;
+	h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
+    interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -242,7 +246,6 @@
 
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
-      interpolatedTime = time;
       dirtyState       = true;
   }
 
@@ -272,7 +275,6 @@
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
-          computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
       }
 
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v17558)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v17558)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v17558)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v17558)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,12 +223,11 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
+            if (f == null) {
                 // use the bracket point if is better than last approximation
                 x0 = x1;
                 x1 = x2;
                 x2 = x0;
-                y0 = y1;
                 y1 = y2;
                 y2 = y0;
             }
@@ -268,6 +267,8 @@
                     double r2 = y1 / y2;
                     p = r3 * (dx * r1 * (r1 - r2) - (x1 - x0) * (r2 - 1.0));
                     p1 = (r1 - 1.0) * (r2 - 1.0) * (r3 - 1.0);
+					this.iterationCount = iterationCount;
+					this.iterationCount = iterationCount;
                 }
                 if (p > 0.0) {
                     p1 = -p1;
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v17580)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -89,14 +89,16 @@
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
+    previousTime = Double.NaN;
+	h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
+    interpolatedTime = Double.NaN;
+	this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -273,7 +275,6 @@
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
-          dirtyState = false;
       }
 
       return interpolatedState;
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v17580)
--- org.apache.commons.math.ode.sampling.DummyStepInterpolator
+++ org.apache.commons.math.ode.sampling.DummyStepInterpolator
@@ -96,7 +96,6 @@
   @Override
   protected void computeInterpolatedStateAndDerivatives(final double theta, final double oneMinusThetaH)
     throws DerivativeException {
-      System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
   }
 
   /** Write the instance to an output channel.
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v17580)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v17580)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v17580)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v17580)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,12 +223,11 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
+            if (f == null) {
                 // use the bracket point if is better than last approximation
                 x0 = x1;
                 x1 = x2;
                 x2 = x0;
-                y0 = y1;
                 y1 = y2;
                 y2 = y0;
             }
@@ -268,6 +267,8 @@
                     double r2 = y1 / y2;
                     p = r3 * (dx * r1 * (r1 - r2) - (x1 - x0) * (r2 - 1.0));
                     p1 = (r1 - 1.0) * (r2 - 1.0) * (r3 - 1.0);
+					this.iterationCount = iterationCount;
+					this.iterationCount = iterationCount;
                 }
                 if (p > 0.0) {
                     p1 = -p1;
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v17821)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -89,14 +89,20 @@
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
+    previousTime = Double.NaN;
+	previousTime = Double.NaN;
+	previousTime = Double.NaN;
+	previousTime = Double.NaN;
+	h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
+    interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	this.dirtyState         = true;
   }
 
   /** Simple constructor.
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v17821)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v17821)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -214,6 +214,7 @@
                     };
                     final BrentSolver solver = new BrentSolver();
                     solver.setAbsoluteAccuracy(convergence);
+					pendingEvent = false;
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v17821)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v17821)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v17821)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,7 +223,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
+            if (f == null) {
                 // use the bracket point if is better than last approximation
                 x0 = x1;
                 x1 = x2;
@@ -268,6 +268,7 @@
                     double r2 = y1 / y2;
                     p = r3 * (dx * r1 * (r1 - r2) - (x1 - x0) * (r2 - 1.0));
                     p1 = (r1 - 1.0) * (r2 - 1.0) * (r3 - 1.0);
+					this.iterationCount = iterationCount;
                 }
                 if (p > 0.0) {
                     p1 = -p1;
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v17825)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -87,16 +87,18 @@
    * initializing the copy.
    */
   protected AbstractStepInterpolator() {
-    previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
+    previousTime = Double.NaN;
+	previousTime = Double.NaN;
+	h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
+    interpolatedTime = Double.NaN;
+	this.dirtyState         = true;
   }
 
   /** Simple constructor.
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v17825)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v17825)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -65,7 +65,6 @@
         this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
-        this.iterationCount = 0;
     }
 
     /** {@inheritDoc} */
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v17825)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v17825)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v17825)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -118,6 +118,7 @@
 
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
+		int i = 1;
         if (Math.abs(yMax) <= functionValueAccuracy) {
             setResult(yMax, 0);
             return result;
@@ -163,7 +164,8 @@
         double yMin = f.value(min);
         double yMax = f.value(max);
 
-        // Verify bracketing
+        verifyInterval(min, max);
+		// Verify bracketing
         double sign = yMin * yMax;
         if (sign > 0) {
             // check if either value is close to a zero
@@ -223,7 +225,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
+            if (f == null) {
                 // use the bracket point if is better than last approximation
                 x0 = x1;
                 x1 = x2;
@@ -268,6 +270,7 @@
                     double r2 = y1 / y2;
                     p = r3 * (dx * r1 * (r1 - r2) - (x1 - x0) * (r2 - 1.0));
                     p1 = (r1 - 1.0) * (r2 - 1.0) * (r3 - 1.0);
+					this.iterationCount = iterationCount;
                 }
                 if (p > 0.0) {
                     p1 = -p1;
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v17895)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -87,9 +87,9 @@
    * initializing the copy.
    */
   protected AbstractStepInterpolator() {
-    previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
+    previousTime = Double.NaN;
+	h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
@@ -242,7 +242,6 @@
 
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
-      interpolatedTime = time;
       dirtyState       = true;
   }
 
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v17895)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v17895)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v17895)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v17895)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,7 +223,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
+            if (f == null) {
                 // use the bracket point if is better than last approximation
                 x0 = x1;
                 x1 = x2;
@@ -268,6 +268,8 @@
                     double r2 = y1 / y2;
                     p = r3 * (dx * r1 * (r1 - r2) - (x1 - x0) * (r2 - 1.0));
                     p1 = (r1 - 1.0) * (r2 - 1.0) * (r3 - 1.0);
+					this.iterationCount = iterationCount;
+					this.iterationCount = iterationCount;
                 }
                 if (p > 0.0) {
                     p1 = -p1;
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v17901)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -87,8 +87,6 @@
    * initializing the copy.
    */
   protected AbstractStepInterpolator() {
-    previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
@@ -96,7 +94,9 @@
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
+    interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -112,7 +112,7 @@
     interpolatedTime  = Double.NaN;
 
     currentState            = y;
-    interpolatedState       = new double[y.length];
+    currentState = y;
     interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v17901)
--- org.apache.commons.math.ode.sampling.DummyStepInterpolator
+++ org.apache.commons.math.ode.sampling.DummyStepInterpolator
@@ -96,7 +96,6 @@
   @Override
   protected void computeInterpolatedStateAndDerivatives(final double theta, final double oneMinusThetaH)
     throws DerivativeException {
-      System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
   }
 
   /** Write the instance to an output channel.
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v17901)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v17901)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v17901)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v17901)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,12 +223,11 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
+            if (f == null) {
                 // use the bracket point if is better than last approximation
                 x0 = x1;
                 x1 = x2;
                 x2 = x0;
-                y0 = y1;
                 y1 = y2;
                 y2 = y0;
             }
@@ -268,6 +267,7 @@
                     double r2 = y1 / y2;
                     p = r3 * (dx * r1 * (r1 - r2) - (x1 - x0) * (r2 - 1.0));
                     p1 = (r1 - 1.0) * (r2 - 1.0) * (r3 - 1.0);
+					this.iterationCount = iterationCount;
                 }
                 if (p > 0.0) {
                     p1 = -p1;
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v17930)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -89,7 +89,10 @@
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
+    previousTime = Double.NaN;
+	previousTime = Double.NaN;
+	previousTime = Double.NaN;
+	h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
@@ -112,7 +115,8 @@
     interpolatedTime  = Double.NaN;
 
     currentState            = y;
-    interpolatedState       = new double[y.length];
+    interpolatedState = new double[y.length];
+	interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
@@ -273,7 +277,6 @@
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
-          dirtyState = false;
       }
 
       return interpolatedState;
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v17930)
--- org.apache.commons.math.ode.sampling.DummyStepInterpolator
+++ org.apache.commons.math.ode.sampling.DummyStepInterpolator
@@ -96,7 +96,6 @@
   @Override
   protected void computeInterpolatedStateAndDerivatives(final double theta, final double oneMinusThetaH)
     throws DerivativeException {
-      System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
   }
 
   /** Write the instance to an output channel.
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v17930)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v17930)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -106,7 +106,8 @@
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
-        nextAction        = EventHandler.CONTINUE;
+        pendingEventTime = Double.NaN;
+		nextAction        = EventHandler.CONTINUE;
 
     }
 
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v17930)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v17930)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v17930)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,12 +223,11 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
+            if (f == null) {
                 // use the bracket point if is better than last approximation
                 x0 = x1;
                 x1 = x2;
                 x2 = x0;
-                y0 = y1;
                 y1 = y2;
                 y2 = y0;
             }
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v17949)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -89,14 +89,18 @@
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
+    previousTime = Double.NaN;
+	previousTime = Double.NaN;
+	h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
+    interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	this.dirtyState         = true;
   }
 
   /** Simple constructor.
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v17949)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v17949)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -60,7 +60,6 @@
     protected ConvergingAlgorithmImpl(final int defaultMaximalIterationCount,
                                       final double defaultAbsoluteAccuracy) {
         this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
-        this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v17949)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v17949)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v17949)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,12 +223,11 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
+            if (f == null) {
                 // use the bracket point if is better than last approximation
                 x0 = x1;
                 x1 = x2;
                 x2 = x0;
-                y0 = y1;
                 y1 = y2;
                 y2 = y0;
             }
@@ -268,6 +267,8 @@
                     double r2 = y1 / y2;
                     p = r3 * (dx * r1 * (r1 - r2) - (x1 - x0) * (r2 - 1.0));
                     p1 = (r1 - 1.0) * (r2 - 1.0) * (r3 - 1.0);
+					this.iterationCount = iterationCount;
+					this.iterationCount = iterationCount;
                 }
                 if (p > 0.0) {
                     p1 = -p1;
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v17966)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -87,16 +87,19 @@
    * initializing the copy.
    */
   protected AbstractStepInterpolator() {
-    previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
+    previousTime = Double.NaN;
+	previousTime = Double.NaN;
+	h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
+    interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	this.dirtyState         = true;
   }
 
   /** Simple constructor.
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v17966)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v17966)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -106,7 +106,8 @@
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
-        nextAction        = EventHandler.CONTINUE;
+        pendingEventTime = Double.NaN;
+		nextAction        = EventHandler.CONTINUE;
 
     }
 
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v17966)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v17966)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v17966)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,7 +223,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
+            if (f == null) {
                 // use the bracket point if is better than last approximation
                 x0 = x1;
                 x1 = x2;
@@ -268,6 +268,8 @@
                     double r2 = y1 / y2;
                     p = r3 * (dx * r1 * (r1 - r2) - (x1 - x0) * (r2 - 1.0));
                     p1 = (r1 - 1.0) * (r2 - 1.0) * (r3 - 1.0);
+					this.iterationCount = iterationCount;
+					this.iterationCount = iterationCount;
                 }
                 if (p > 0.0) {
                     p1 = -p1;
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v17991)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -96,7 +96,9 @@
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
+    interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -242,7 +244,6 @@
 
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
-      interpolatedTime = time;
       dirtyState       = true;
   }
 
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v17991)
--- org.apache.commons.math.ode.sampling.DummyStepInterpolator
+++ org.apache.commons.math.ode.sampling.DummyStepInterpolator
@@ -96,7 +96,6 @@
   @Override
   protected void computeInterpolatedStateAndDerivatives(final double theta, final double oneMinusThetaH)
     throws DerivativeException {
-      System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
   }
 
   /** Write the instance to an output channel.
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v17991)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v17991)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -231,9 +231,6 @@
                             // properly ends exactly at the event occurrence
                             return false;
                         }
-                        // either we were not waiting for the event or it has
-                        // moved in such a way the step cannot be accepted
-                        pendingEvent = true;
                         return true;
                     }
 
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v17991)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v17991)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v17991)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,12 +223,9 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
+            if (f == null) {
                 x1 = x2;
                 x2 = x0;
-                y0 = y1;
                 y1 = y2;
                 y2 = y0;
             }
@@ -268,6 +265,7 @@
                     double r2 = y1 / y2;
                     p = r3 * (dx * r1 * (r1 - r2) - (x1 - x0) * (r2 - 1.0));
                     p1 = (r1 - 1.0) * (r2 - 1.0) * (r3 - 1.0);
+					this.iterationCount = iterationCount;
                 }
                 if (p > 0.0) {
                     p1 = -p1;
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v18211)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -87,16 +87,17 @@
    * initializing the copy.
    */
   protected AbstractStepInterpolator() {
-    previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
+    previousTime = Double.NaN;
+	h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
+    interpolatedTime = Double.NaN;
+	this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -242,7 +243,6 @@
 
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
-      interpolatedTime = time;
       dirtyState       = true;
   }
 
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v18211)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v18211)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v18211)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v18211)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,7 +223,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
+            if (f == null) {
                 // use the bracket point if is better than last approximation
                 x0 = x1;
                 x1 = x2;
@@ -268,6 +268,8 @@
                     double r2 = y1 / y2;
                     p = r3 * (dx * r1 * (r1 - r2) - (x1 - x0) * (r2 - 1.0));
                     p1 = (r1 - 1.0) * (r2 - 1.0) * (r3 - 1.0);
+					this.iterationCount = iterationCount;
+					this.iterationCount = iterationCount;
                 }
                 if (p > 0.0) {
                     p1 = -p1;
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v18276)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -87,16 +87,17 @@
    * initializing the copy.
    */
   protected AbstractStepInterpolator() {
-    previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
+    previousTime = Double.NaN;
+	h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
+    interpolatedTime = Double.NaN;
+	this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -242,7 +243,6 @@
 
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
-      interpolatedTime = time;
       dirtyState       = true;
   }
 
@@ -273,7 +273,6 @@
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
-          dirtyState = false;
       }
 
       return interpolatedState;
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v18276)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v18276)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -213,7 +213,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v18276)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v18276)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v18276)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -118,6 +118,7 @@
 
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
+		int i = 1;
         if (Math.abs(yMax) <= functionValueAccuracy) {
             setResult(yMax, 0);
             return result;
@@ -268,6 +269,7 @@
                     double r2 = y1 / y2;
                     p = r3 * (dx * r1 * (r1 - r2) - (x1 - x0) * (r2 - 1.0));
                     p1 = (r1 - 1.0) * (r2 - 1.0) * (r3 - 1.0);
+					this.iterationCount = iterationCount;
                 }
                 if (p > 0.0) {
                     p1 = -p1;
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v18296)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -89,14 +89,18 @@
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
+    previousTime = Double.NaN;
+	previousTime = Double.NaN;
+	previousTime = Double.NaN;
+	h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
+    interpolatedTime = Double.NaN;
+	this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -272,8 +276,6 @@
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
-          computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
-          dirtyState = false;
       }
 
       return interpolatedState;
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v18296)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v18296)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -102,6 +102,10 @@
         t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
+		{
+			g0Positive = g0 >= 0;
+			nextAction = EventHandler.CONTINUE;
+		}
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
@@ -213,7 +217,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v18296)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v18296)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v18296)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -268,6 +268,7 @@
                     double r2 = y1 / y2;
                     p = r3 * (dx * r1 * (r1 - r2) - (x1 - x0) * (r2 - 1.0));
                     p1 = (r1 - 1.0) * (r2 - 1.0) * (r3 - 1.0);
+					this.iterationCount = iterationCount;
                 }
                 if (p > 0.0) {
                     p1 = -p1;
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v18382)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -89,14 +89,18 @@
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
+    previousTime = Double.NaN;
+	previousTime = Double.NaN;
+	previousTime = Double.NaN;
+	h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
+    interpolatedTime = Double.NaN;
+	this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -272,7 +276,6 @@
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
-          computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
       }
 
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v18382)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v18382)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -60,7 +60,6 @@
     protected ConvergingAlgorithmImpl(final int defaultMaximalIterationCount,
                                       final double defaultAbsoluteAccuracy) {
         this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
-        this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v18382)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -102,11 +102,16 @@
         t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
+		{
+			g0Positive = g0 >= 0;
+			nextAction = EventHandler.CONTINUE;
+		}
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
-        nextAction        = EventHandler.CONTINUE;
+        pendingEventTime = Double.NaN;
+		nextAction        = EventHandler.CONTINUE;
 
     }
 
@@ -213,7 +218,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v18382)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v18382)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v18397)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -89,14 +89,17 @@
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
+    previousTime = Double.NaN;
+	previousTime = Double.NaN;
+	h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
+    interpolatedTime = Double.NaN;
+	this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -273,7 +276,6 @@
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
-          dirtyState = false;
       }
 
       return interpolatedState;
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v18397)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v18397)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -102,6 +102,10 @@
         t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
+		{
+			g0Positive = g0 >= 0;
+			nextAction = EventHandler.CONTINUE;
+		}
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
@@ -213,7 +217,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v18397)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v18397)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v18397)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -118,6 +118,7 @@
 
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
+		int i = 1;
         if (Math.abs(yMax) <= functionValueAccuracy) {
             setResult(yMax, 0);
             return result;
@@ -163,7 +164,8 @@
         double yMin = f.value(min);
         double yMax = f.value(max);
 
-        // Verify bracketing
+        verifyInterval(min, max);
+		// Verify bracketing
         double sign = yMin * yMax;
         if (sign > 0) {
             // check if either value is close to a zero
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v18413)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -87,9 +87,12 @@
    * initializing the copy.
    */
   protected AbstractStepInterpolator() {
-    previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
+    previousTime = Double.NaN;
+	previousTime = Double.NaN;
+	previousTime = Double.NaN;
+	previousTime = Double.NaN;
+	h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v18413)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v18413)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -172,6 +172,7 @@
             forward = interpolator.isForward();
             final double t1 = interpolator.getCurrentTime();
             final int    n  = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));
+			pendingEventTime = Double.NaN;
             final double h  = (t1 - t0) / n;
 
             double ta = t0;
@@ -282,7 +283,6 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v18413)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v18413)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v18413)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -268,6 +268,8 @@
                     double r2 = y1 / y2;
                     p = r3 * (dx * r1 * (r1 - r2) - (x1 - x0) * (r2 - 1.0));
                     p1 = (r1 - 1.0) * (r2 - 1.0) * (r3 - 1.0);
+					this.iterationCount = iterationCount;
+					this.iterationCount = iterationCount;
                 }
                 if (p > 0.0) {
                     p1 = -p1;
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v18508)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -87,9 +87,12 @@
    * initializing the copy.
    */
   protected AbstractStepInterpolator() {
-    previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
+    previousTime = Double.NaN;
+	previousTime = Double.NaN;
+	previousTime = Double.NaN;
+	previousTime = Double.NaN;
+	h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v18508)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v18508)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -172,6 +172,7 @@
             forward = interpolator.isForward();
             final double t1 = interpolator.getCurrentTime();
             final int    n  = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));
+			pendingEventTime = Double.NaN;
             final double h  = (t1 - t0) / n;
 
             double ta = t0;
@@ -213,7 +214,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v18508)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v18508)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v18508)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -268,6 +268,8 @@
                     double r2 = y1 / y2;
                     p = r3 * (dx * r1 * (r1 - r2) - (x1 - x0) * (r2 - 1.0));
                     p1 = (r1 - 1.0) * (r2 - 1.0) * (r3 - 1.0);
+					this.iterationCount = iterationCount;
+					this.iterationCount = iterationCount;
                 }
                 if (p > 0.0) {
                     p1 = -p1;
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v18769)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -87,9 +87,10 @@
    * initializing the copy.
    */
   protected AbstractStepInterpolator() {
-    previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
+    previousTime = Double.NaN;
+	previousTime = Double.NaN;
+	h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v18769)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v18769)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -214,6 +214,7 @@
                     };
                     final BrentSolver solver = new BrentSolver();
                     solver.setAbsoluteAccuracy(convergence);
+					pendingEvent = false;
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v18769)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v18769)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v18769)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -118,6 +118,7 @@
 
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
+		int i = 1;
         if (Math.abs(yMax) <= functionValueAccuracy) {
             setResult(yMax, 0);
             return result;
@@ -223,7 +224,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
+            if (f == null) {
                 // use the bracket point if is better than last approximation
                 x0 = x1;
                 x1 = x2;
@@ -268,6 +269,9 @@
                     double r2 = y1 / y2;
                     p = r3 * (dx * r1 * (r1 - r2) - (x1 - x0) * (r2 - 1.0));
                     p1 = (r1 - 1.0) * (r2 - 1.0) * (r3 - 1.0);
+					this.iterationCount = iterationCount;
+					this.iterationCount = iterationCount;
+					this.iterationCount = iterationCount;
                 }
                 if (p > 0.0) {
                     p1 = -p1;
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v19077)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -87,8 +87,6 @@
    * initializing the copy.
    */
   protected AbstractStepInterpolator() {
-    previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
@@ -111,7 +109,7 @@
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
-    currentState            = y;
+    currentTime = Double.NaN;
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
@@ -272,7 +270,6 @@
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
-          computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
       }
 
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v19077)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v19077)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v19077)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v19077)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,15 +223,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
@@ -268,6 +260,8 @@
                     double r2 = y1 / y2;
                     p = r3 * (dx * r1 * (r1 - r2) - (x1 - x0) * (r2 - 1.0));
                     p1 = (r1 - 1.0) * (r2 - 1.0) * (r3 - 1.0);
+					this.iterationCount = iterationCount;
+					this.iterationCount = iterationCount;
                 }
                 if (p > 0.0) {
                     p1 = -p1;
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v19402)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -89,14 +89,17 @@
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
+    previousTime = Double.NaN;
+	h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
+    interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	this.dirtyState         = true;
   }
 
   /** Simple constructor.
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v19402)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v19402)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -106,7 +106,8 @@
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
-        nextAction        = EventHandler.CONTINUE;
+        pendingEventTime = Double.NaN;
+		nextAction        = EventHandler.CONTINUE;
 
     }
 
@@ -213,7 +214,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v19402)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v19402)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v19402)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -118,6 +118,7 @@
 
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
+		int i = 1;
         if (Math.abs(yMax) <= functionValueAccuracy) {
             setResult(yMax, 0);
             return result;
@@ -268,6 +269,8 @@
                     double r2 = y1 / y2;
                     p = r3 * (dx * r1 * (r1 - r2) - (x1 - x0) * (r2 - 1.0));
                     p1 = (r1 - 1.0) * (r2 - 1.0) * (r3 - 1.0);
+					this.iterationCount = iterationCount;
+					this.iterationCount = iterationCount;
                 }
                 if (p > 0.0) {
                     p1 = -p1;
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v19433)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -89,14 +89,17 @@
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
+    previousTime = Double.NaN;
+	h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
+    interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	this.dirtyState         = true;
   }
 
   /** Simple constructor.
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v19433)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v19433)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -213,7 +213,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v19433)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v19433)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v19433)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -118,6 +118,7 @@
 
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
+		int i = 1;
         if (Math.abs(yMax) <= functionValueAccuracy) {
             setResult(yMax, 0);
             return result;
@@ -268,6 +269,9 @@
                     double r2 = y1 / y2;
                     p = r3 * (dx * r1 * (r1 - r2) - (x1 - x0) * (r2 - 1.0));
                     p1 = (r1 - 1.0) * (r2 - 1.0) * (r3 - 1.0);
+					this.iterationCount = iterationCount;
+					this.iterationCount = iterationCount;
+					this.iterationCount = iterationCount;
                 }
                 if (p > 0.0) {
                     p1 = -p1;
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v19450)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -89,14 +89,18 @@
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
+    previousTime = Double.NaN;
+	previousTime = Double.NaN;
+	previousTime = Double.NaN;
+	h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
+    interpolatedTime = Double.NaN;
+	this.dirtyState         = true;
   }
 
   /** Simple constructor.
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v19450)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v19450)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v19450)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v19450)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -140,7 +140,6 @@
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
         this.iterationCount = iterationCount;
-        this.resultComputed = true;
     }
 
     /**
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v19450)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -156,14 +156,13 @@
         FunctionEvaluationException {
 
         clearResult();
-        verifyInterval(min, max);
-
         double ret = Double.NaN;
 
         double yMin = f.value(min);
         double yMax = f.value(max);
 
-        // Verify bracketing
+        verifyInterval(min, max);
+		// Verify bracketing
         double sign = yMin * yMax;
         if (sign > 0) {
             // check if either value is close to a zero
@@ -223,7 +222,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
+            if (f == null) {
                 // use the bracket point if is better than last approximation
                 x0 = x1;
                 x1 = x2;
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v19455)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -89,14 +89,16 @@
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
+    previousTime = Double.NaN;
+	h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
+    interpolatedTime = Double.NaN;
+	this.dirtyState         = true;
   }
 
   /** Simple constructor.
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v19455)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v19455)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -213,7 +213,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v19455)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v19455)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v19455)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -140,7 +140,6 @@
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
         this.iterationCount = iterationCount;
-        this.resultComputed = true;
     }
 
     /**
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v19455)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -118,6 +118,7 @@
 
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
+		int i = 1;
         if (Math.abs(yMax) <= functionValueAccuracy) {
             setResult(yMax, 0);
             return result;
@@ -163,7 +164,8 @@
         double yMin = f.value(min);
         double yMax = f.value(max);
 
-        // Verify bracketing
+        verifyInterval(min, max);
+		// Verify bracketing
         double sign = yMin * yMax;
         if (sign > 0) {
             // check if either value is close to a zero
@@ -268,6 +270,8 @@
                     double r2 = y1 / y2;
                     p = r3 * (dx * r1 * (r1 - r2) - (x1 - x0) * (r2 - 1.0));
                     p1 = (r1 - 1.0) * (r2 - 1.0) * (r3 - 1.0);
+					this.iterationCount = iterationCount;
+					this.iterationCount = iterationCount;
                 }
                 if (p > 0.0) {
                     p1 = -p1;
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v19479)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -89,14 +89,18 @@
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
+    previousTime = Double.NaN;
+	previousTime = Double.NaN;
+	h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
+    interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	this.dirtyState         = true;
   }
 
   /** Simple constructor.
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v19479)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v19479)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -213,7 +213,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v19479)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v19479)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v19479)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -118,6 +118,7 @@
 
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
+		int i = 1;
         if (Math.abs(yMax) <= functionValueAccuracy) {
             setResult(yMax, 0);
             return result;
@@ -268,6 +269,8 @@
                     double r2 = y1 / y2;
                     p = r3 * (dx * r1 * (r1 - r2) - (x1 - x0) * (r2 - 1.0));
                     p1 = (r1 - 1.0) * (r2 - 1.0) * (r3 - 1.0);
+					this.iterationCount = iterationCount;
+					this.iterationCount = iterationCount;
                 }
                 if (p > 0.0) {
                     p1 = -p1;
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v19569)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -89,7 +89,8 @@
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
+    previousTime = Double.NaN;
+	h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
@@ -111,7 +112,7 @@
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
-    currentState            = y;
+    currentTime = Double.NaN;
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
@@ -272,7 +273,6 @@
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
-          computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
       }
 
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v19569)
--- org.apache.commons.math.ode.sampling.DummyStepInterpolator
+++ org.apache.commons.math.ode.sampling.DummyStepInterpolator
@@ -96,7 +96,6 @@
   @Override
   protected void computeInterpolatedStateAndDerivatives(final double theta, final double oneMinusThetaH)
     throws DerivativeException {
-      System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
   }
 
   /** Write the instance to an output channel.
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v19569)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v19569)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -106,7 +106,8 @@
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
-        nextAction        = EventHandler.CONTINUE;
+        pendingEventTime = Double.NaN;
+		nextAction        = EventHandler.CONTINUE;
 
     }
 
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v19569)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v19569)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v19569)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -163,7 +163,8 @@
         double yMin = f.value(min);
         double yMax = f.value(max);
 
-        // Verify bracketing
+        verifyInterval(min, max);
+		// Verify bracketing
         double sign = yMin * yMax;
         if (sign > 0) {
             // check if either value is close to a zero
@@ -223,15 +224,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
@@ -268,6 +261,9 @@
                     double r2 = y1 / y2;
                     p = r3 * (dx * r1 * (r1 - r2) - (x1 - x0) * (r2 - 1.0));
                     p1 = (r1 - 1.0) * (r2 - 1.0) * (r3 - 1.0);
+					this.iterationCount = iterationCount;
+					this.iterationCount = iterationCount;
+					this.iterationCount = iterationCount;
                 }
                 if (p > 0.0) {
                     p1 = -p1;
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v19577)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -87,9 +87,9 @@
    * initializing the copy.
    */
   protected AbstractStepInterpolator() {
-    previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
+    previousTime = Double.NaN;
+	h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
@@ -111,7 +111,7 @@
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
-    currentState            = y;
+    currentTime = Double.NaN;
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
@@ -272,7 +272,6 @@
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
-          computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
       }
 
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v19577)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v19577)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v19577)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v19577)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -118,6 +118,7 @@
 
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
+		int i = 1;
         if (Math.abs(yMax) <= functionValueAccuracy) {
             setResult(yMax, 0);
             return result;
@@ -223,15 +224,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
@@ -268,6 +261,9 @@
                     double r2 = y1 / y2;
                     p = r3 * (dx * r1 * (r1 - r2) - (x1 - x0) * (r2 - 1.0));
                     p1 = (r1 - 1.0) * (r2 - 1.0) * (r3 - 1.0);
+					this.iterationCount = iterationCount;
+					this.iterationCount = iterationCount;
+					this.iterationCount = iterationCount;
                 }
                 if (p > 0.0) {
                     p1 = -p1;
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v19596)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -89,14 +89,17 @@
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
+    previousTime = Double.NaN;
+	h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
+    interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	this.dirtyState         = true;
   }
 
   /** Simple constructor.
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v19596)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v19596)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -204,6 +204,7 @@
                         public double value(final double t) throws FunctionEvaluationException {
                             try {
                                 interpolator.setInterpolatedTime(t);
+								boolean resetDerivatives = false;
                                 return handler.g(t, interpolator.getInterpolatedState());
                             } catch (DerivativeException e) {
                                 throw new FunctionEvaluationException(e, t);
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v19596)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v19596)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v19596)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,12 +223,11 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
+            if (f == null) {
                 // use the bracket point if is better than last approximation
                 x0 = x1;
                 x1 = x2;
                 x2 = x0;
-                y0 = y1;
                 y1 = y2;
                 y2 = y0;
             }
@@ -268,6 +267,9 @@
                     double r2 = y1 / y2;
                     p = r3 * (dx * r1 * (r1 - r2) - (x1 - x0) * (r2 - 1.0));
                     p1 = (r1 - 1.0) * (r2 - 1.0) * (r3 - 1.0);
+					this.iterationCount = iterationCount;
+					this.iterationCount = iterationCount;
+					this.iterationCount = iterationCount;
                 }
                 if (p > 0.0) {
                     p1 = -p1;
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v19647)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -87,16 +87,18 @@
    * initializing the copy.
    */
   protected AbstractStepInterpolator() {
-    previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
-    h                       = Double.NaN;
+    previousTime = Double.NaN;
+	previousTime = Double.NaN;
+	h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
+    interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -111,7 +113,7 @@
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
-    currentState            = y;
+    currentTime = Double.NaN;
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
@@ -272,7 +274,6 @@
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
-          computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
       }
 
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v19647)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v19647)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v19647)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v19647)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -163,7 +163,8 @@
         double yMin = f.value(min);
         double yMax = f.value(max);
 
-        // Verify bracketing
+        verifyInterval(min, max);
+		// Verify bracketing
         double sign = yMin * yMax;
         if (sign > 0) {
             // check if either value is close to a zero
@@ -276,10 +277,6 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v19836)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -87,9 +87,11 @@
    * initializing the copy.
    */
   protected AbstractStepInterpolator() {
-    previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
+    previousTime = Double.NaN;
+	previousTime = Double.NaN;
+	previousTime = Double.NaN;
+	h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v19836)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v19836)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v19836)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v19836)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,7 +223,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
+            if (f == null) {
                 // use the bracket point if is better than last approximation
                 x0 = x1;
                 x1 = x2;
@@ -268,6 +268,9 @@
                     double r2 = y1 / y2;
                     p = r3 * (dx * r1 * (r1 - r2) - (x1 - x0) * (r2 - 1.0));
                     p1 = (r1 - 1.0) * (r2 - 1.0) * (r3 - 1.0);
+					this.iterationCount = iterationCount;
+					this.iterationCount = iterationCount;
+					this.iterationCount = iterationCount;
                 }
                 if (p > 0.0) {
                     p1 = -p1;
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v19853)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -87,16 +87,18 @@
    * initializing the copy.
    */
   protected AbstractStepInterpolator() {
-    previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
+    previousTime = Double.NaN;
+	previousTime = Double.NaN;
+	h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
+    interpolatedTime = Double.NaN;
+	this.dirtyState         = true;
   }
 
   /** Simple constructor.
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v19853)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v19853)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -203,7 +203,6 @@
                     final UnivariateRealFunction f = new UnivariateRealFunction() {
                         public double value(final double t) throws FunctionEvaluationException {
                             try {
-                                interpolator.setInterpolatedTime(t);
                                 return handler.g(t, interpolator.getInterpolatedState());
                             } catch (DerivativeException e) {
                                 throw new FunctionEvaluationException(e, t);
@@ -213,7 +212,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v19853)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v19853)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v19853)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -268,6 +268,11 @@
                     double r2 = y1 / y2;
                     p = r3 * (dx * r1 * (r1 - r2) - (x1 - x0) * (r2 - 1.0));
                     p1 = (r1 - 1.0) * (r2 - 1.0) * (r3 - 1.0);
+					this.iterationCount = iterationCount;
+					this.iterationCount = iterationCount;
+					this.iterationCount = iterationCount;
+					this.iterationCount = iterationCount;
+					this.iterationCount = iterationCount;
                 }
                 if (p > 0.0) {
                     p1 = -p1;
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v19976)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -89,7 +89,10 @@
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
+    previousTime = Double.NaN;
+	previousTime = Double.NaN;
+	previousTime = Double.NaN;
+	h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
@@ -242,7 +245,8 @@
 
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
-      interpolatedTime = time;
+      finalized = true;
+	interpolatedTime = time;
       dirtyState       = true;
   }
 
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v19976)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v19976)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v19976)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v19976)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -163,7 +163,8 @@
         double yMin = f.value(min);
         double yMax = f.value(max);
 
-        // Verify bracketing
+        verifyInterval(min, max);
+		// Verify bracketing
         double sign = yMin * yMax;
         if (sign > 0) {
             // check if either value is close to a zero
@@ -223,7 +224,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
+            if (f == null) {
                 // use the bracket point if is better than last approximation
                 x0 = x1;
                 x1 = x2;
@@ -268,6 +269,9 @@
                     double r2 = y1 / y2;
                     p = r3 * (dx * r1 * (r1 - r2) - (x1 - x0) * (r2 - 1.0));
                     p1 = (r1 - 1.0) * (r2 - 1.0) * (r3 - 1.0);
+					this.iterationCount = iterationCount;
+					this.iterationCount = iterationCount;
+					this.iterationCount = iterationCount;
                 }
                 if (p > 0.0) {
                     p1 = -p1;
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v20127)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -87,9 +87,12 @@
    * initializing the copy.
    */
   protected AbstractStepInterpolator() {
-    previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
+    previousTime = Double.NaN;
+	previousTime = Double.NaN;
+	previousTime = Double.NaN;
+	previousTime = Double.NaN;
+	h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v20127)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v20127)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -282,7 +282,6 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v20127)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v20127)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v20127)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -268,6 +268,10 @@
                     double r2 = y1 / y2;
                     p = r3 * (dx * r1 * (r1 - r2) - (x1 - x0) * (r2 - 1.0));
                     p1 = (r1 - 1.0) * (r2 - 1.0) * (r3 - 1.0);
+					this.iterationCount = iterationCount;
+					this.iterationCount = iterationCount;
+					this.iterationCount = iterationCount;
+					this.iterationCount = iterationCount;
                 }
                 if (p > 0.0) {
                     p1 = -p1;
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v20182)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -87,9 +87,12 @@
    * initializing the copy.
    */
   protected AbstractStepInterpolator() {
-    previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
+    previousTime = Double.NaN;
+	previousTime = Double.NaN;
+	previousTime = Double.NaN;
+	previousTime = Double.NaN;
+	h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v20182)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v20182)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -213,7 +213,10 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
+                    {
+						g0Positive = g0 >= 0;
+						nextAction = EventHandler.CONTINUE;
+					}
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v20182)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v20182)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v20182)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -268,6 +268,10 @@
                     double r2 = y1 / y2;
                     p = r3 * (dx * r1 * (r1 - r2) - (x1 - x0) * (r2 - 1.0));
                     p1 = (r1 - 1.0) * (r2 - 1.0) * (r3 - 1.0);
+					this.iterationCount = iterationCount;
+					this.iterationCount = iterationCount;
+					this.iterationCount = iterationCount;
+					this.iterationCount = iterationCount;
                 }
                 if (p > 0.0) {
                     p1 = -p1;
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v20224)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -89,7 +89,10 @@
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
+    previousTime = Double.NaN;
+	previousTime = Double.NaN;
+	previousTime = Double.NaN;
+	h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
@@ -114,6 +117,7 @@
     currentState            = y;
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
+	dirtyState = false;
 
     finalized         = false;
     this.forward      = forward;
@@ -242,7 +246,6 @@
 
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
-      interpolatedTime = time;
       dirtyState       = true;
   }
 
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v20224)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v20224)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v20224)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 21:00:24 [main] [INFO]  PatchLogExporter - patch (v20224)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,7 +223,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
+            if (f == null) {
                 // use the bracket point if is better than last approximation
                 x0 = x1;
                 x1 = x2;
@@ -268,6 +268,8 @@
                     double r2 = y1 / y2;
                     p = r3 * (dx * r1 * (r1 - r2) - (x1 - x0) * (r2 - 1.0));
                     p1 = (r1 - 1.0) * (r2 - 1.0) * (r3 - 1.0);
+					this.iterationCount = iterationCount;
+					this.iterationCount = iterationCount;
                 }
                 if (p > 0.0) {
                     p1 = -p1;
2023-06-26 21:00:25 [main] [INFO]  PatchLogExporter - patch (v20228)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -87,9 +87,10 @@
    * initializing the copy.
    */
   protected AbstractStepInterpolator() {
-    previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
+    previousTime = Double.NaN;
+	previousTime = Double.NaN;
+	h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
@@ -106,7 +107,6 @@
    */
   protected AbstractStepInterpolator(final double[] y, final boolean forward) {
 
-    previousTime      = Double.NaN;
     currentTime       = Double.NaN;
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
2023-06-26 21:00:25 [main] [INFO]  PatchLogExporter - patch (v20228)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 21:00:25 [main] [INFO]  PatchLogExporter - patch (v20228)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -105,7 +105,7 @@
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
-        increasing        = true;
+        pendingEventTime = Double.NaN;
         nextAction        = EventHandler.CONTINUE;
 
     }
2023-06-26 21:00:25 [main] [INFO]  PatchLogExporter - patch (v20228)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 21:00:25 [main] [INFO]  PatchLogExporter - patch (v20228)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 21:00:25 [main] [INFO]  PatchLogExporter - patch (v20228)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,7 +223,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
+            if (f == null) {
                 // use the bracket point if is better than last approximation
                 x0 = x1;
                 x1 = x2;
@@ -268,6 +268,10 @@
                     double r2 = y1 / y2;
                     p = r3 * (dx * r1 * (r1 - r2) - (x1 - x0) * (r2 - 1.0));
                     p1 = (r1 - 1.0) * (r2 - 1.0) * (r3 - 1.0);
+					this.iterationCount = iterationCount;
+					this.iterationCount = iterationCount;
+					this.iterationCount = iterationCount;
+					this.iterationCount = iterationCount;
                 }
                 if (p > 0.0) {
                     p1 = -p1;
2023-06-26 21:00:25 [main] [INFO]  KGenProgMain - Summary
Reached generation = 52
Generated variants = 20228
Syntax valid variants = 18780
Build succeeded variants = 10456
Time elapsed = 50 minutes 33 seconds
Exit status = SUCCESS
