2023-06-25 23:57:15 [main] [WARN]  Configuration$Builder - The directory where kGenProg is running is different from the root directory of the given target project.
2023-06-25 23:57:15 [main] [WARN]  Configuration$Builder - If the target project includes test cases with file I/O, such test cases won't run correctly.
2023-06-25 23:57:15 [main] [WARN]  Configuration$Builder - We recommend you running kGenProg with the root directory of the target project as the current directory.
2023-06-25 23:57:16 [main] [INFO]  KGenProgMain - 
==================== kGenProg Configuration ====================
configPath = /Users/haradakanon/Downloads/kGenProg-1.8.2/example/math78/kgenprog-78.toml (set by command line)
rootDir = /Users/haradakanon/Downloads/kGenProg-1.8.2/example/math78 (set in config file)
productPaths = [/Users/haradakanon/Downloads/kGenProg-1.8.2/example/math78/src/main] (set in config file)
testPaths = [/Users/haradakanon/Downloads/kGenProg-1.8.2/example/math78/src/test] (set in config file)
classPaths = []
executionTests = [org.apache.commons.math.ode.events.EventStateTest] (set in config file)
outDir = kgenprog-out
logLevel = INFO (set in config file)
mutationGeneratingCount = 200 (set in config file)
crossoverGeneratingCount = 200 (set in config file)
headcount = 100
maxGeneration = 1000 (set in config file)
timeLimit = PT277H46M40S (set in config file)
testTimeLimit = PT3M (set in config file)
requiredSolutionsCount = 100 (set in config file)
randomSeed = 3 (set by command line)
scope = PACKAGE (set in config file)
faultLocalization = Zoltar (set in config file)
mutationType = Simple
crossoverType = Random
firstVariantSelectionStrategy = Random
secondVariantSelectionStrategy = Random
isPatchOutput = true (set in config file)
isHistoryRecord = false
currentDirectory = /Users/haradakanon/Desktop/研究/実験データ/afterResearch
version = 1.8.2
================================================================
2023-06-25 23:57:32 [main] [INFO]  KGenProgMain - initial failed tests (1/1)
org.apache.commons.math.ode.events.EventStateTest.closeEvents: function values at endpoints do not have different signs.  Endpoints: [89.999, 153.1], Values: [-0.066, -1,142.11]

2023-06-25 23:57:33 [main] [INFO]  KGenProgMain - GA started
2023-06-25 23:57:33 [main] [INFO]  KGenProgMain - entered the era of 1st generation.
2023-06-25 23:57:50 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 17 seconds
Variants: generated 200, build-succeeded 58, build-failed 110, syntax-invalid 13, redundant 19
Fitness: max 1(1), min 0(57), ave 0.017
Test execution time: sum 5276 ms, max 316 ms, min 51 ms
----------------------------------------------------------------

2023-06-25 23:57:50 [main] [INFO]  KGenProgMain - entered the era of 2nd generation.
2023-06-25 23:58:01 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 28 seconds
Variants: generated 200, build-succeeded 50, build-failed 109, syntax-invalid 9, redundant 32
Fitness: max 0(50), min 0(50), ave 0
Test execution time: sum 3215 ms, max 171 ms, min 49 ms
----------------------------------------------------------------

2023-06-25 23:58:01 [main] [INFO]  KGenProgMain - entered the era of 3rd generation.
2023-06-25 23:58:16 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 42 seconds
Variants: generated 400, build-succeeded 78, build-failed 126, syntax-invalid 43, redundant 153
Fitness: max 1(1), min 0(77), ave 0.013
Test execution time: sum 4888 ms, max 212 ms, min 50 ms
----------------------------------------------------------------

2023-06-25 23:58:16 [main] [INFO]  KGenProgMain - entered the era of 4th generation.
2023-06-25 23:58:32 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 59 seconds
Variants: generated 400, build-succeeded 111, build-failed 123, syntax-invalid 19, redundant 147
Fitness: max 1(2), min 0(109), ave 0.018
Test execution time: sum 6360 ms, max 125 ms, min 48 ms
----------------------------------------------------------------

2023-06-25 23:58:32 [main] [INFO]  KGenProgMain - entered the era of 5th generation.
2023-06-26 00:01:50 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 minutes 17 seconds
Variants: generated 400, build-succeeded 144, build-failed 118, syntax-invalid 6, redundant 132
Fitness: max 0(144), min 0(144), ave 0
Test execution time: sum 187959 ms, max 180076 ms, min 48 ms
----------------------------------------------------------------

2023-06-26 00:01:50 [main] [INFO]  KGenProgMain - entered the era of 6th generation.
2023-06-26 00:02:11 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 minutes 38 seconds
Variants: generated 400, build-succeeded 163, build-failed 123, syntax-invalid 14, redundant 100
Fitness: max 0(163), min 0(163), ave 0
Test execution time: sum 9110 ms, max 192 ms, min 48 ms
----------------------------------------------------------------

2023-06-26 00:02:11 [main] [INFO]  KGenProgMain - entered the era of 7th generation.
2023-06-26 00:02:32 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 minutes 59 seconds
Variants: generated 400, build-succeeded 158, build-failed 116, syntax-invalid 26, redundant 100
Fitness: max 0(158), min 0(158), ave 0
Test execution time: sum 8699 ms, max 130 ms, min 48 ms
----------------------------------------------------------------

2023-06-26 00:02:32 [main] [INFO]  KGenProgMain - entered the era of 8th generation.
2023-06-26 00:02:54 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 minutes 20 seconds
Variants: generated 400, build-succeeded 171, build-failed 110, syntax-invalid 40, redundant 79
Fitness: max 1(3), min 0(168), ave 0.018
Test execution time: sum 9507 ms, max 193 ms, min 47 ms
----------------------------------------------------------------

2023-06-26 00:02:54 [main] [INFO]  KGenProgMain - entered the era of 9th generation.
2023-06-26 00:03:17 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 minutes 44 seconds
Variants: generated 400, build-succeeded 183, build-failed 118, syntax-invalid 30, redundant 69
Fitness: max 1(1), min 0(182), ave 0.005
Test execution time: sum 10051 ms, max 164 ms, min 47 ms
----------------------------------------------------------------

2023-06-26 00:03:17 [main] [INFO]  KGenProgMain - entered the era of 10th generation.
2023-06-26 00:06:41 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 minutes 8 seconds
Variants: generated 400, build-succeeded 185, build-failed 113, syntax-invalid 46, redundant 56
Fitness: max 1(2), min 0(183), ave 0.011
Test execution time: sum 190365 ms, max 180053 ms, min 48 ms
----------------------------------------------------------------

2023-06-26 00:06:41 [main] [INFO]  KGenProgMain - entered the era of 11th generation.
2023-06-26 00:07:09 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 minutes 36 seconds
Variants: generated 400, build-succeeded 208, build-failed 123, syntax-invalid 26, redundant 43
Fitness: max 1(4), min 0(204), ave 0.019
Test execution time: sum 12701 ms, max 203 ms, min 48 ms
----------------------------------------------------------------

2023-06-26 00:07:09 [main] [INFO]  KGenProgMain - entered the era of 12th generation.
2023-06-26 00:07:37 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 10 minutes 4 seconds
Variants: generated 400, build-succeeded 203, build-failed 126, syntax-invalid 23, redundant 48
Fitness: max 0(203), min 0(203), ave 0
Test execution time: sum 11718 ms, max 190 ms, min 47 ms
----------------------------------------------------------------

2023-06-26 00:07:37 [main] [INFO]  KGenProgMain - entered the era of 13th generation.
2023-06-26 00:08:02 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 10 minutes 28 seconds
Variants: generated 400, build-succeeded 197, build-failed 116, syntax-invalid 39, redundant 48
Fitness: max 1(1), min 0(196), ave 0.005
Test execution time: sum 11269 ms, max 202 ms, min 48 ms
----------------------------------------------------------------

2023-06-26 00:08:02 [main] [INFO]  KGenProgMain - entered the era of 14th generation.
2023-06-26 00:08:27 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 10 minutes 53 seconds
Variants: generated 400, build-succeeded 209, build-failed 118, syntax-invalid 33, redundant 40
Fitness: max 0(209), min 0(209), ave 0
Test execution time: sum 11547 ms, max 195 ms, min 48 ms
----------------------------------------------------------------

2023-06-26 00:08:27 [main] [INFO]  KGenProgMain - entered the era of 15th generation.
2023-06-26 00:08:56 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 minutes 23 seconds
Variants: generated 400, build-succeeded 208, build-failed 132, syntax-invalid 19, redundant 41
Fitness: max 0(208), min 0(208), ave 0
Test execution time: sum 12222 ms, max 191 ms, min 48 ms
----------------------------------------------------------------

2023-06-26 00:08:56 [main] [INFO]  KGenProgMain - entered the era of 16th generation.
2023-06-26 00:09:21 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 minutes 48 seconds
Variants: generated 400, build-succeeded 198, build-failed 121, syntax-invalid 31, redundant 50
Fitness: max 0(198), min 0(198), ave 0
Test execution time: sum 11060 ms, max 188 ms, min 47 ms
----------------------------------------------------------------

2023-06-26 00:09:21 [main] [INFO]  KGenProgMain - entered the era of 17th generation.
2023-06-26 00:09:51 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 minutes 18 seconds
Variants: generated 400, build-succeeded 208, build-failed 127, syntax-invalid 19, redundant 46
Fitness: max 1(1), min 0(207), ave 0.005
Test execution time: sum 12100 ms, max 205 ms, min 47 ms
----------------------------------------------------------------

2023-06-26 00:09:51 [main] [INFO]  KGenProgMain - entered the era of 18th generation.
2023-06-26 00:10:21 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 minutes 48 seconds
Variants: generated 400, build-succeeded 222, build-failed 125, syntax-invalid 19, redundant 34
Fitness: max 0(222), min 0(222), ave 0
Test execution time: sum 13198 ms, max 185 ms, min 48 ms
----------------------------------------------------------------

2023-06-26 00:10:21 [main] [INFO]  KGenProgMain - entered the era of 19th generation.
2023-06-26 00:10:50 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 13 minutes 17 seconds
Variants: generated 400, build-succeeded 207, build-failed 138, syntax-invalid 31, redundant 24
Fitness: max 0(207), min 0(207), ave 0
Test execution time: sum 11831 ms, max 184 ms, min 48 ms
----------------------------------------------------------------

2023-06-26 00:10:50 [main] [INFO]  KGenProgMain - entered the era of 20th generation.
2023-06-26 00:11:18 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 13 minutes 45 seconds
Variants: generated 400, build-succeeded 202, build-failed 133, syntax-invalid 32, redundant 33
Fitness: max 0(202), min 0(202), ave 0
Test execution time: sum 11239 ms, max 190 ms, min 48 ms
----------------------------------------------------------------

2023-06-26 00:11:18 [main] [INFO]  KGenProgMain - entered the era of 21st generation.
2023-06-26 00:11:46 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 14 minutes 12 seconds
Variants: generated 400, build-succeeded 204, build-failed 138, syntax-invalid 33, redundant 25
Fitness: max 0(204), min 0(204), ave 0
Test execution time: sum 11475 ms, max 173 ms, min 48 ms
----------------------------------------------------------------

2023-06-26 00:11:46 [main] [INFO]  KGenProgMain - entered the era of 22nd generation.
2023-06-26 00:12:14 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 14 minutes 41 seconds
Variants: generated 400, build-succeeded 208, build-failed 121, syntax-invalid 36, redundant 35
Fitness: max 0(208), min 0(208), ave 0
Test execution time: sum 11338 ms, max 183 ms, min 48 ms
----------------------------------------------------------------

2023-06-26 00:12:14 [main] [INFO]  KGenProgMain - entered the era of 23rd generation.
2023-06-26 00:12:41 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 15 minutes 8 seconds
Variants: generated 400, build-succeeded 201, build-failed 115, syntax-invalid 58, redundant 26
Fitness: max 0(201), min 0(201), ave 0
Test execution time: sum 11343 ms, max 178 ms, min 48 ms
----------------------------------------------------------------

2023-06-26 00:12:41 [main] [INFO]  KGenProgMain - entered the era of 24th generation.
2023-06-26 00:13:11 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 15 minutes 38 seconds
Variants: generated 400, build-succeeded 219, build-failed 117, syntax-invalid 27, redundant 37
Fitness: max 0(219), min 0(219), ave 0
Test execution time: sum 12070 ms, max 176 ms, min 48 ms
----------------------------------------------------------------

2023-06-26 00:13:11 [main] [INFO]  KGenProgMain - entered the era of 25th generation.
2023-06-26 00:13:41 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 16 minutes 8 seconds
Variants: generated 400, build-succeeded 206, build-failed 114, syntax-invalid 45, redundant 35
Fitness: max 0(206), min 0(206), ave 0
Test execution time: sum 11585 ms, max 163 ms, min 49 ms
----------------------------------------------------------------

2023-06-26 00:13:41 [main] [INFO]  KGenProgMain - entered the era of 26th generation.
2023-06-26 00:14:12 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 16 minutes 39 seconds
Variants: generated 400, build-succeeded 197, build-failed 112, syntax-invalid 46, redundant 45
Fitness: max 0(197), min 0(197), ave 0
Test execution time: sum 10519 ms, max 122 ms, min 47 ms
----------------------------------------------------------------

2023-06-26 00:14:12 [main] [INFO]  KGenProgMain - entered the era of 27th generation.
2023-06-26 00:14:40 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 17 minutes 7 seconds
Variants: generated 400, build-succeeded 184, build-failed 117, syntax-invalid 66, redundant 33
Fitness: max 0(184), min 0(184), ave 0
Test execution time: sum 10078 ms, max 173 ms, min 48 ms
----------------------------------------------------------------

2023-06-26 00:14:40 [main] [INFO]  KGenProgMain - entered the era of 28th generation.
2023-06-26 00:15:08 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 17 minutes 35 seconds
Variants: generated 400, build-succeeded 178, build-failed 124, syntax-invalid 63, redundant 35
Fitness: max 0(178), min 0(178), ave 0
Test execution time: sum 9645 ms, max 109 ms, min 49 ms
----------------------------------------------------------------

2023-06-26 00:15:08 [main] [INFO]  KGenProgMain - entered the era of 29th generation.
2023-06-26 00:15:41 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 18 minutes 8 seconds
Variants: generated 400, build-succeeded 209, build-failed 120, syntax-invalid 40, redundant 31
Fitness: max 0(209), min 0(209), ave 0
Test execution time: sum 11545 ms, max 161 ms, min 48 ms
----------------------------------------------------------------

2023-06-26 00:15:41 [main] [INFO]  KGenProgMain - entered the era of 30th generation.
2023-06-26 00:16:07 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 18 minutes 34 seconds
Variants: generated 400, build-succeeded 181, build-failed 120, syntax-invalid 65, redundant 34
Fitness: max 0(181), min 0(181), ave 0
Test execution time: sum 9678 ms, max 116 ms, min 48 ms
----------------------------------------------------------------

2023-06-26 00:16:07 [main] [INFO]  KGenProgMain - entered the era of 31st generation.
2023-06-26 00:16:36 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 19 minutes 3 seconds
Variants: generated 400, build-succeeded 194, build-failed 128, syntax-invalid 49, redundant 29
Fitness: max 0(194), min 0(194), ave 0
Test execution time: sum 10424 ms, max 127 ms, min 48 ms
----------------------------------------------------------------

2023-06-26 00:16:36 [main] [INFO]  KGenProgMain - entered the era of 32nd generation.
2023-06-26 00:20:05 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 22 minutes 31 seconds
Variants: generated 400, build-succeeded 189, build-failed 127, syntax-invalid 48, redundant 36
Fitness: max 0(189), min 0(189), ave 0
Test execution time: sum 190371 ms, max 180063 ms, min 48 ms
----------------------------------------------------------------

2023-06-26 00:20:05 [main] [INFO]  KGenProgMain - entered the era of 33rd generation.
2023-06-26 00:20:36 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 23 minutes 3 seconds
Variants: generated 400, build-succeeded 215, build-failed 125, syntax-invalid 34, redundant 26
Fitness: max 0(215), min 0(215), ave 0
Test execution time: sum 11736 ms, max 163 ms, min 48 ms
----------------------------------------------------------------

2023-06-26 00:20:36 [main] [INFO]  KGenProgMain - entered the era of 34th generation.
2023-06-26 00:21:06 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 23 minutes 33 seconds
Variants: generated 400, build-succeeded 202, build-failed 113, syntax-invalid 40, redundant 45
Fitness: max 0(202), min 0(202), ave 0
Test execution time: sum 11126 ms, max 174 ms, min 49 ms
----------------------------------------------------------------

2023-06-26 00:21:06 [main] [INFO]  KGenProgMain - entered the era of 35th generation.
2023-06-26 00:21:38 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 24 minutes 4 seconds
Variants: generated 400, build-succeeded 205, build-failed 132, syntax-invalid 33, redundant 30
Fitness: max 0(205), min 0(205), ave 0
Test execution time: sum 11101 ms, max 172 ms, min 48 ms
----------------------------------------------------------------

2023-06-26 00:21:38 [main] [INFO]  KGenProgMain - entered the era of 36th generation.
2023-06-26 00:22:09 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 24 minutes 36 seconds
Variants: generated 400, build-succeeded 206, build-failed 117, syntax-invalid 45, redundant 32
Fitness: max 0(206), min 0(206), ave 0
Test execution time: sum 11546 ms, max 169 ms, min 48 ms
----------------------------------------------------------------

2023-06-26 00:22:09 [main] [INFO]  KGenProgMain - entered the era of 37th generation.
2023-06-26 00:22:39 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 25 minutes 6 seconds
Variants: generated 400, build-succeeded 198, build-failed 122, syntax-invalid 50, redundant 30
Fitness: max 0(198), min 0(198), ave 0
Test execution time: sum 10978 ms, max 163 ms, min 49 ms
----------------------------------------------------------------

2023-06-26 00:22:39 [main] [INFO]  KGenProgMain - entered the era of 38th generation.
2023-06-26 00:23:11 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 25 minutes 38 seconds
Variants: generated 400, build-succeeded 201, build-failed 135, syntax-invalid 33, redundant 31
Fitness: max 0(201), min 0(201), ave 0
Test execution time: sum 11037 ms, max 161 ms, min 48 ms
----------------------------------------------------------------

2023-06-26 00:23:11 [main] [INFO]  KGenProgMain - entered the era of 39th generation.
2023-06-26 00:23:42 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 26 minutes 9 seconds
Variants: generated 400, build-succeeded 206, build-failed 118, syntax-invalid 40, redundant 36
Fitness: max 0(206), min 0(206), ave 0
Test execution time: sum 11268 ms, max 168 ms, min 49 ms
----------------------------------------------------------------

2023-06-26 00:23:42 [main] [INFO]  KGenProgMain - entered the era of 40th generation.
2023-06-26 00:24:15 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 26 minutes 42 seconds
Variants: generated 400, build-succeeded 220, build-failed 122, syntax-invalid 24, redundant 34
Fitness: max 0(220), min 0(220), ave 0
Test execution time: sum 12066 ms, max 165 ms, min 48 ms
----------------------------------------------------------------

2023-06-26 00:24:15 [main] [INFO]  KGenProgMain - entered the era of 41st generation.
2023-06-26 00:24:47 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 27 minutes 14 seconds
Variants: generated 400, build-succeeded 214, build-failed 113, syntax-invalid 40, redundant 33
Fitness: max 0(214), min 0(214), ave 0
Test execution time: sum 11762 ms, max 161 ms, min 48 ms
----------------------------------------------------------------

2023-06-26 00:24:47 [main] [INFO]  KGenProgMain - entered the era of 42nd generation.
2023-06-26 00:25:19 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 27 minutes 46 seconds
Variants: generated 400, build-succeeded 202, build-failed 129, syntax-invalid 53, redundant 16
Fitness: max 1(3), min 0(199), ave 0.015
Test execution time: sum 11129 ms, max 166 ms, min 48 ms
----------------------------------------------------------------

2023-06-26 00:25:19 [main] [INFO]  KGenProgMain - entered the era of 43rd generation.
2023-06-26 00:28:53 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 31 minutes 20 seconds
Variants: generated 400, build-succeeded 209, build-failed 131, syntax-invalid 36, redundant 24
Fitness: max 0(209), min 0(209), ave 0
Test execution time: sum 191359 ms, max 180051 ms, min 48 ms
----------------------------------------------------------------

2023-06-26 00:28:53 [main] [INFO]  KGenProgMain - entered the era of 44th generation.
2023-06-26 00:29:28 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 31 minutes 54 seconds
Variants: generated 400, build-succeeded 235, build-failed 111, syntax-invalid 38, redundant 16
Fitness: max 1(4), min 0(231), ave 0.017
Test execution time: sum 12926 ms, max 113 ms, min 48 ms
----------------------------------------------------------------

2023-06-26 00:29:28 [main] [INFO]  KGenProgMain - entered the era of 45th generation.
2023-06-26 00:30:03 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 32 minutes 30 seconds
Variants: generated 400, build-succeeded 221, build-failed 112, syntax-invalid 34, redundant 33
Fitness: max 0(221), min 0(221), ave 0
Test execution time: sum 12095 ms, max 210 ms, min 48 ms
----------------------------------------------------------------

2023-06-26 00:30:03 [main] [INFO]  KGenProgMain - entered the era of 46th generation.
2023-06-26 00:30:35 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 33 minutes 2 seconds
Variants: generated 400, build-succeeded 218, build-failed 122, syntax-invalid 35, redundant 25
Fitness: max 1(3), min 0(215), ave 0.014
Test execution time: sum 11947 ms, max 115 ms, min 49 ms
----------------------------------------------------------------

2023-06-26 00:30:35 [main] [INFO]  KGenProgMain - entered the era of 47th generation.
2023-06-26 00:31:10 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 33 minutes 37 seconds
Variants: generated 400, build-succeeded 214, build-failed 122, syntax-invalid 29, redundant 35
Fitness: max 0(214), min 0(214), ave 0
Test execution time: sum 12053 ms, max 148 ms, min 49 ms
----------------------------------------------------------------

2023-06-26 00:31:10 [main] [INFO]  KGenProgMain - entered the era of 48th generation.
2023-06-26 00:31:47 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 34 minutes 13 seconds
Variants: generated 400, build-succeeded 219, build-failed 108, syntax-invalid 34, redundant 39
Fitness: max 0(219), min 0(219), ave 0
Test execution time: sum 12844 ms, max 129 ms, min 50 ms
----------------------------------------------------------------

2023-06-26 00:31:47 [main] [INFO]  KGenProgMain - entered the era of 49th generation.
2023-06-26 00:32:22 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 34 minutes 48 seconds
Variants: generated 400, build-succeeded 212, build-failed 112, syntax-invalid 41, redundant 35
Fitness: max 1(1), min 0(211), ave 0.005
Test execution time: sum 12196 ms, max 189 ms, min 50 ms
----------------------------------------------------------------

2023-06-26 00:32:22 [main] [INFO]  KGenProgMain - entered the era of 50th generation.
2023-06-26 00:32:56 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 35 minutes 23 seconds
Variants: generated 400, build-succeeded 210, build-failed 110, syntax-invalid 53, redundant 27
Fitness: max 1(3), min 0(207), ave 0.014
Test execution time: sum 12019 ms, max 174 ms, min 49 ms
----------------------------------------------------------------

2023-06-26 00:32:56 [main] [INFO]  KGenProgMain - entered the era of 51st generation.
2023-06-26 00:33:29 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 35 minutes 56 seconds
Variants: generated 400, build-succeeded 215, build-failed 117, syntax-invalid 43, redundant 25
Fitness: max 0(215), min 0(215), ave 0
Test execution time: sum 11954 ms, max 138 ms, min 50 ms
----------------------------------------------------------------

2023-06-26 00:33:29 [main] [INFO]  KGenProgMain - entered the era of 52nd generation.
2023-06-26 00:34:06 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 36 minutes 33 seconds
Variants: generated 400, build-succeeded 221, build-failed 105, syntax-invalid 44, redundant 30
Fitness: max 0(221), min 0(221), ave 0
Test execution time: sum 12432 ms, max 115 ms, min 50 ms
----------------------------------------------------------------

2023-06-26 00:34:06 [main] [INFO]  KGenProgMain - entered the era of 53rd generation.
2023-06-26 00:34:45 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 37 minutes 11 seconds
Variants: generated 400, build-succeeded 227, build-failed 117, syntax-invalid 37, redundant 19
Fitness: max 0(227), min 0(227), ave 0
Test execution time: sum 12941 ms, max 158 ms, min 49 ms
----------------------------------------------------------------

2023-06-26 00:34:45 [main] [INFO]  KGenProgMain - entered the era of 54th generation.
2023-06-26 00:35:19 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 37 minutes 46 seconds
Variants: generated 400, build-succeeded 211, build-failed 118, syntax-invalid 50, redundant 21
Fitness: max 1(2), min 0(209), ave 0.009
Test execution time: sum 11879 ms, max 120 ms, min 50 ms
----------------------------------------------------------------

2023-06-26 00:35:19 [main] [INFO]  KGenProgMain - entered the era of 55th generation.
2023-06-26 00:35:55 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 38 minutes 22 seconds
Variants: generated 400, build-succeeded 209, build-failed 106, syntax-invalid 54, redundant 31
Fitness: max 1(2), min 0(207), ave 0.01
Test execution time: sum 11737 ms, max 131 ms, min 50 ms
----------------------------------------------------------------

2023-06-26 00:35:55 [main] [INFO]  KGenProgMain - entered the era of 56th generation.
2023-06-26 00:36:31 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 38 minutes 58 seconds
Variants: generated 400, build-succeeded 208, build-failed 125, syntax-invalid 38, redundant 29
Fitness: max 0(208), min 0(208), ave 0
Test execution time: sum 11485 ms, max 123 ms, min 49 ms
----------------------------------------------------------------

2023-06-26 00:36:31 [main] [INFO]  KGenProgMain - entered the era of 57th generation.
2023-06-26 00:37:09 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 39 minutes 36 seconds
Variants: generated 400, build-succeeded 214, build-failed 121, syntax-invalid 31, redundant 34
Fitness: max 0(214), min 0(214), ave 0
Test execution time: sum 12246 ms, max 151 ms, min 50 ms
----------------------------------------------------------------

2023-06-26 00:37:09 [main] [INFO]  KGenProgMain - entered the era of 58th generation.
2023-06-26 00:40:47 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 43 minutes 14 seconds
Variants: generated 400, build-succeeded 223, build-failed 118, syntax-invalid 32, redundant 27
Fitness: max 0(223), min 0(223), ave 0
Test execution time: sum 192289 ms, max 180070 ms, min 49 ms
----------------------------------------------------------------

2023-06-26 00:40:47 [main] [INFO]  KGenProgMain - entered the era of 59th generation.
2023-06-26 00:41:24 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 43 minutes 51 seconds
Variants: generated 400, build-succeeded 219, build-failed 125, syntax-invalid 35, redundant 21
Fitness: max 0(219), min 0(219), ave 0
Test execution time: sum 12241 ms, max 180 ms, min 49 ms
----------------------------------------------------------------

2023-06-26 00:41:24 [main] [INFO]  KGenProgMain - entered the era of 60th generation.
2023-06-26 00:41:59 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 44 minutes 26 seconds
Variants: generated 400, build-succeeded 206, build-failed 107, syntax-invalid 46, redundant 41
Fitness: max 0(206), min 0(206), ave 0
Test execution time: sum 11238 ms, max 171 ms, min 49 ms
----------------------------------------------------------------

2023-06-26 00:41:59 [main] [INFO]  KGenProgMain - entered the era of 61st generation.
2023-06-26 00:42:35 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 45 minutes 2 seconds
Variants: generated 400, build-succeeded 205, build-failed 113, syntax-invalid 58, redundant 24
Fitness: max 1(4), min 0(201), ave 0.02
Test execution time: sum 11694 ms, max 176 ms, min 50 ms
----------------------------------------------------------------

2023-06-26 00:42:35 [main] [INFO]  KGenProgMain - entered the era of 62nd generation.
2023-06-26 00:43:10 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 45 minutes 37 seconds
Variants: generated 400, build-succeeded 205, build-failed 125, syntax-invalid 48, redundant 22
Fitness: max 0(205), min 0(205), ave 0
Test execution time: sum 11192 ms, max 177 ms, min 50 ms
----------------------------------------------------------------

2023-06-26 00:43:10 [main] [INFO]  KGenProgMain - entered the era of 63rd generation.
2023-06-26 00:43:49 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 46 minutes 16 seconds
Variants: generated 400, build-succeeded 223, build-failed 115, syntax-invalid 26, redundant 36
Fitness: max 0(223), min 0(223), ave 0
Test execution time: sum 12370 ms, max 170 ms, min 50 ms
----------------------------------------------------------------

2023-06-26 00:43:49 [main] [INFO]  KGenProgMain - entered the era of 64th generation.
2023-06-26 00:44:27 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 46 minutes 54 seconds
Variants: generated 400, build-succeeded 218, build-failed 123, syntax-invalid 39, redundant 20
Fitness: max 1(1), min 0(217), ave 0.005
Test execution time: sum 12243 ms, max 172 ms, min 50 ms
----------------------------------------------------------------

2023-06-26 00:44:27 [main] [INFO]  KGenProgMain - entered the era of 65th generation.
2023-06-26 00:45:05 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 47 minutes 32 seconds
Variants: generated 400, build-succeeded 217, build-failed 112, syntax-invalid 38, redundant 33
Fitness: max 0(217), min 0(217), ave 0
Test execution time: sum 12041 ms, max 117 ms, min 50 ms
----------------------------------------------------------------

2023-06-26 00:45:05 [main] [INFO]  KGenProgMain - entered the era of 66th generation.
2023-06-26 00:45:44 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 48 minutes 11 seconds
Variants: generated 400, build-succeeded 213, build-failed 119, syntax-invalid 45, redundant 23
Fitness: max 0(213), min 0(213), ave 0
Test execution time: sum 11972 ms, max 183 ms, min 50 ms
----------------------------------------------------------------

2023-06-26 00:45:44 [main] [INFO]  KGenProgMain - entered the era of 67th generation.
2023-06-26 00:46:20 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 48 minutes 46 seconds
Variants: generated 400, build-succeeded 203, build-failed 113, syntax-invalid 54, redundant 30
Fitness: max 0(203), min 0(203), ave 0
Test execution time: sum 11169 ms, max 183 ms, min 49 ms
----------------------------------------------------------------

2023-06-26 00:46:20 [main] [INFO]  KGenProgMain - entered the era of 68th generation.
2023-06-26 00:46:57 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 49 minutes 24 seconds
Variants: generated 400, build-succeeded 198, build-failed 114, syntax-invalid 56, redundant 32
Fitness: max 0(198), min 0(198), ave 0
Test execution time: sum 10958 ms, max 115 ms, min 49 ms
----------------------------------------------------------------

2023-06-26 00:46:57 [main] [INFO]  KGenProgMain - entered the era of 69th generation.
2023-06-26 00:47:33 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 49 minutes 59 seconds
Variants: generated 400, build-succeeded 197, build-failed 119, syntax-invalid 57, redundant 27
Fitness: max 1(5), min 0(192), ave 0.025
Test execution time: sum 11031 ms, max 120 ms, min 50 ms
----------------------------------------------------------------

2023-06-26 00:47:33 [main] [INFO]  KGenProgMain - entered the era of 70th generation.
2023-06-26 00:48:12 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 50 minutes 38 seconds
Variants: generated 400, build-succeeded 215, build-failed 122, syntax-invalid 44, redundant 19
Fitness: max 1(2), min 0(213), ave 0.009
Test execution time: sum 12391 ms, max 134 ms, min 50 ms
----------------------------------------------------------------

2023-06-26 00:48:12 [main] [INFO]  KGenProgMain - entered the era of 71st generation.
2023-06-26 00:48:54 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 51 minutes 21 seconds
Variants: generated 400, build-succeeded 210, build-failed 117, syntax-invalid 48, redundant 25
Fitness: max 1(6), min 0(204), ave 0.029
Test execution time: sum 13039 ms, max 168 ms, min 50 ms
----------------------------------------------------------------

2023-06-26 00:48:54 [main] [INFO]  KGenProgMain - entered the era of 72nd generation.
2023-06-26 00:49:32 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 51 minutes 59 seconds
Variants: generated 400, build-succeeded 204, build-failed 124, syntax-invalid 53, redundant 19
Fitness: max 1(3), min 0(201), ave 0.015
Test execution time: sum 11665 ms, max 112 ms, min 50 ms
----------------------------------------------------------------

2023-06-26 00:49:32 [main] [INFO]  KGenProgMain - entered the era of 73rd generation.
2023-06-26 00:50:11 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 52 minutes 38 seconds
Variants: generated 400, build-succeeded 210, build-failed 118, syntax-invalid 41, redundant 31
Fitness: max 0(210), min 0(210), ave 0
Test execution time: sum 11669 ms, max 166 ms, min 50 ms
----------------------------------------------------------------

2023-06-26 00:50:11 [main] [INFO]  KGenProgMain - entered the era of 74th generation.
2023-06-26 00:50:51 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 53 minutes 17 seconds
Variants: generated 400, build-succeeded 205, build-failed 119, syntax-invalid 53, redundant 23
Fitness: max 1(2), min 0(203), ave 0.01
Test execution time: sum 12091 ms, max 180 ms, min 51 ms
----------------------------------------------------------------

2023-06-26 00:50:51 [main] [INFO]  KGenProgMain - entered the era of 75th generation.
2023-06-26 00:51:29 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 53 minutes 56 seconds
Variants: generated 400, build-succeeded 209, build-failed 123, syntax-invalid 46, redundant 22
Fitness: max 1(3), min 0(206), ave 0.014
Test execution time: sum 12129 ms, max 192 ms, min 51 ms
----------------------------------------------------------------

2023-06-26 00:51:29 [main] [INFO]  KGenProgMain - entered the era of 76th generation.
2023-06-26 00:52:07 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 54 minutes 34 seconds
Variants: generated 400, build-succeeded 204, build-failed 123, syntax-invalid 52, redundant 21
Fitness: max 0(204), min 0(204), ave 0
Test execution time: sum 11844 ms, max 168 ms, min 50 ms
----------------------------------------------------------------

2023-06-26 00:52:07 [main] [INFO]  KGenProgMain - entered the era of 77th generation.
2023-06-26 00:55:49 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 58 minutes 16 seconds
Variants: generated 400, build-succeeded 216, build-failed 117, syntax-invalid 47, redundant 20
Fitness: max 1(3), min 0(213), ave 0.014
Test execution time: sum 192700 ms, max 180065 ms, min 50 ms
----------------------------------------------------------------

2023-06-26 00:55:49 [main] [INFO]  KGenProgMain - entered the era of 78th generation.
2023-06-26 00:56:31 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 58 minutes 58 seconds
Variants: generated 400, build-succeeded 214, build-failed 120, syntax-invalid 35, redundant 31
Fitness: max 1(1), min 0(213), ave 0.005
Test execution time: sum 12561 ms, max 198 ms, min 51 ms
----------------------------------------------------------------

2023-06-26 00:56:31 [main] [INFO]  KGenProgMain - entered the era of 79th generation.
2023-06-26 00:57:11 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 59 minutes 38 seconds
Variants: generated 400, build-succeeded 210, build-failed 106, syntax-invalid 56, redundant 28
Fitness: max 1(2), min 0(208), ave 0.01
Test execution time: sum 12553 ms, max 133 ms, min 51 ms
----------------------------------------------------------------

2023-06-26 00:57:11 [main] [INFO]  KGenProgMain - entered the era of 80th generation.
2023-06-26 00:57:51 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 18 seconds
Variants: generated 400, build-succeeded 194, build-failed 121, syntax-invalid 55, redundant 30
Fitness: max 0(194), min 0(194), ave 0
Test execution time: sum 11399 ms, max 170 ms, min 50 ms
----------------------------------------------------------------

2023-06-26 00:57:51 [main] [INFO]  KGenProgMain - entered the era of 81st generation.
2023-06-26 00:58:34 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 1 minutes 1 seconds
Variants: generated 400, build-succeeded 207, build-failed 116, syntax-invalid 53, redundant 24
Fitness: max 1(4), min 0(203), ave 0.019
Test execution time: sum 12358 ms, max 264 ms, min 50 ms
----------------------------------------------------------------

2023-06-26 00:58:34 [main] [INFO]  KGenProgMain - entered the era of 82nd generation.
2023-06-26 00:59:18 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 1 minutes 45 seconds
Variants: generated 400, build-succeeded 212, build-failed 122, syntax-invalid 38, redundant 28
Fitness: max 1(6), min 0(206), ave 0.028
Test execution time: sum 12557 ms, max 179 ms, min 51 ms
----------------------------------------------------------------

2023-06-26 00:59:18 [main] [INFO]  KGenProgMain - entered the era of 83rd generation.
2023-06-26 01:00:02 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 2 minutes 29 seconds
Variants: generated 400, build-succeeded 211, build-failed 120, syntax-invalid 37, redundant 32
Fitness: max 1(2), min 0(209), ave 0.009
Test execution time: sum 12587 ms, max 198 ms, min 51 ms
----------------------------------------------------------------

2023-06-26 01:00:02 [main] [INFO]  KGenProgMain - entered the era of 84th generation.
2023-06-26 01:00:46 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 3 minutes 13 seconds
Variants: generated 400, build-succeeded 216, build-failed 119, syntax-invalid 36, redundant 29
Fitness: max 1(1), min 0(215), ave 0.005
Test execution time: sum 12577 ms, max 136 ms, min 50 ms
----------------------------------------------------------------

2023-06-26 01:00:46 [main] [INFO]  KGenProgMain - entered the era of 85th generation.
2023-06-26 01:01:31 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 3 minutes 58 seconds
Variants: generated 400, build-succeeded 217, build-failed 110, syntax-invalid 46, redundant 27
Fitness: max 1(1), min 0(216), ave 0.005
Test execution time: sum 12562 ms, max 127 ms, min 51 ms
----------------------------------------------------------------

2023-06-26 01:01:31 [main] [INFO]  KGenProgMain - entered the era of 86th generation.
2023-06-26 01:02:14 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 4 minutes 41 seconds
Variants: generated 400, build-succeeded 210, build-failed 118, syntax-invalid 41, redundant 31
Fitness: max 0(210), min 0(210), ave 0
Test execution time: sum 12153 ms, max 133 ms, min 51 ms
----------------------------------------------------------------

2023-06-26 01:02:14 [main] [INFO]  KGenProgMain - entered the era of 87th generation.
2023-06-26 01:02:58 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 5 minutes 25 seconds
Variants: generated 400, build-succeeded 215, build-failed 111, syntax-invalid 36, redundant 38
Fitness: max 0(215), min 0(215), ave 0
Test execution time: sum 12750 ms, max 150 ms, min 51 ms
----------------------------------------------------------------

2023-06-26 01:02:58 [main] [INFO]  KGenProgMain - entered the era of 88th generation.
2023-06-26 01:12:42 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 15 minutes 8 seconds
Variants: generated 400, build-succeeded 205, build-failed 114, syntax-invalid 59, redundant 22
Fitness: max 1(2), min 0(203), ave 0.01
Test execution time: sum 552292 ms, max 180074 ms, min 51 ms
----------------------------------------------------------------

2023-06-26 01:12:42 [main] [INFO]  KGenProgMain - entered the era of 89th generation.
2023-06-26 01:13:25 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 15 minutes 52 seconds
Variants: generated 400, build-succeeded 187, build-failed 133, syntax-invalid 57, redundant 23
Fitness: max 1(3), min 0(184), ave 0.016
Test execution time: sum 11108 ms, max 171 ms, min 51 ms
----------------------------------------------------------------

2023-06-26 01:13:25 [main] [INFO]  KGenProgMain - entered the era of 90th generation.
2023-06-26 01:14:09 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 16 minutes 36 seconds
Variants: generated 400, build-succeeded 226, build-failed 116, syntax-invalid 24, redundant 34
Fitness: max 0(226), min 0(226), ave 0
Test execution time: sum 12860 ms, max 111 ms, min 50 ms
----------------------------------------------------------------

2023-06-26 01:14:09 [main] [INFO]  KGenProgMain - entered the era of 91st generation.
2023-06-26 01:17:53 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 20 minutes 20 seconds
Variants: generated 400, build-succeeded 203, build-failed 114, syntax-invalid 54, redundant 29
Fitness: max 0(203), min 0(203), ave 0
Test execution time: sum 192014 ms, max 180064 ms, min 51 ms
----------------------------------------------------------------

2023-06-26 01:17:53 [main] [INFO]  KGenProgMain - entered the era of 92nd generation.
2023-06-26 01:18:38 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 21 minutes 4 seconds
Variants: generated 400, build-succeeded 206, build-failed 132, syntax-invalid 39, redundant 23
Fitness: max 1(1), min 0(205), ave 0.005
Test execution time: sum 12078 ms, max 127 ms, min 51 ms
----------------------------------------------------------------

2023-06-26 01:18:38 [main] [INFO]  KGenProgMain - entered the era of 93rd generation.
2023-06-26 01:22:22 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 24 minutes 49 seconds
Variants: generated 400, build-succeeded 198, build-failed 143, syntax-invalid 33, redundant 26
Fitness: max 0(198), min 0(198), ave 0
Test execution time: sum 191415 ms, max 180057 ms, min 52 ms
----------------------------------------------------------------

2023-06-26 01:22:22 [main] [INFO]  KGenProgMain - entered the era of 94th generation.
2023-06-26 01:23:05 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 25 minutes 32 seconds
Variants: generated 400, build-succeeded 203, build-failed 124, syntax-invalid 33, redundant 40
Fitness: max 0(203), min 0(203), ave 0
Test execution time: sum 11765 ms, max 111 ms, min 51 ms
----------------------------------------------------------------

2023-06-26 01:23:05 [main] [INFO]  KGenProgMain - entered the era of 95th generation.
2023-06-26 01:23:52 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 26 minutes 19 seconds
Variants: generated 400, build-succeeded 227, build-failed 122, syntax-invalid 31, redundant 20
Fitness: max 1(2), min 0(225), ave 0.009
Test execution time: sum 13912 ms, max 169 ms, min 52 ms
----------------------------------------------------------------

2023-06-26 01:23:52 [main] [INFO]  KGenProgMain - entered the era of 96th generation.
2023-06-26 01:24:37 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 27 minutes 4 seconds
Variants: generated 400, build-succeeded 212, build-failed 109, syntax-invalid 46, redundant 33
Fitness: max 0(212), min 0(212), ave 0
Test execution time: sum 12207 ms, max 108 ms, min 52 ms
----------------------------------------------------------------

2023-06-26 01:24:37 [main] [INFO]  KGenProgMain - entered the era of 97th generation.
2023-06-26 01:25:23 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 27 minutes 49 seconds
Variants: generated 400, build-succeeded 224, build-failed 103, syntax-invalid 27, redundant 46
Fitness: max 0(224), min 0(224), ave 0
Test execution time: sum 13061 ms, max 168 ms, min 51 ms
----------------------------------------------------------------

2023-06-26 01:25:23 [main] [INFO]  KGenProgMain - entered the era of 98th generation.
2023-06-26 01:26:09 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 28 minutes 35 seconds
Variants: generated 400, build-succeeded 212, build-failed 129, syntax-invalid 41, redundant 18
Fitness: max 1(2), min 0(210), ave 0.009
Test execution time: sum 12652 ms, max 147 ms, min 51 ms
----------------------------------------------------------------

2023-06-26 01:26:09 [main] [INFO]  KGenProgMain - entered the era of 99th generation.
2023-06-26 01:26:57 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 29 minutes 24 seconds
Variants: generated 400, build-succeeded 227, build-failed 130, syntax-invalid 30, redundant 13
Fitness: max 1(1), min 0(226), ave 0.004
Test execution time: sum 13617 ms, max 126 ms, min 51 ms
----------------------------------------------------------------

2023-06-26 01:26:57 [main] [INFO]  KGenProgMain - entered the era of 100th generation.
2023-06-26 01:27:47 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 30 minutes 14 seconds
Variants: generated 400, build-succeeded 244, build-failed 92, syntax-invalid 32, redundant 32
Fitness: max 1(2), min 0(242), ave 0.008
Test execution time: sum 14205 ms, max 122 ms, min 52 ms
----------------------------------------------------------------

2023-06-26 01:27:47 [main] [INFO]  KGenProgMain - entered the era of 101st generation.
2023-06-26 01:28:34 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 31 minutes 1 seconds
Variants: generated 400, build-succeeded 221, build-failed 108, syntax-invalid 33, redundant 38
Fitness: max 1(4), min 0(217), ave 0.018
Test execution time: sum 13007 ms, max 130 ms, min 52 ms
----------------------------------------------------------------

2023-06-26 01:28:34 [main] [INFO]  KGenProgMain - entered the era of 102nd generation.
2023-06-26 01:29:22 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 31 minutes 49 seconds
Variants: generated 400, build-succeeded 220, build-failed 116, syntax-invalid 32, redundant 32
Fitness: max 0(220), min 0(220), ave 0
Test execution time: sum 12780 ms, max 174 ms, min 51 ms
----------------------------------------------------------------

2023-06-26 01:29:22 [main] [INFO]  KGenProgMain - entered the era of 103rd generation.
2023-06-26 01:30:08 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 32 minutes 35 seconds
Variants: generated 400, build-succeeded 216, build-failed 106, syntax-invalid 54, redundant 24
Fitness: max 1(1), min 0(215), ave 0.005
Test execution time: sum 12796 ms, max 117 ms, min 52 ms
----------------------------------------------------------------

2023-06-26 01:30:08 [main] [INFO]  KGenProgMain - entered the era of 104th generation.
2023-06-26 01:30:55 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 33 minutes 22 seconds
Variants: generated 400, build-succeeded 216, build-failed 111, syntax-invalid 34, redundant 39
Fitness: max 0(216), min 0(216), ave 0
Test execution time: sum 12631 ms, max 129 ms, min 52 ms
----------------------------------------------------------------

2023-06-26 01:30:55 [main] [INFO]  KGenProgMain - entered the era of 105th generation.
2023-06-26 01:31:44 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 34 minutes 10 seconds
Variants: generated 400, build-succeeded 225, build-failed 119, syntax-invalid 27, redundant 29
Fitness: max 1(1), min 0(224), ave 0.004
Test execution time: sum 13289 ms, max 154 ms, min 52 ms
----------------------------------------------------------------

2023-06-26 01:31:44 [main] [INFO]  KGenProgMain - entered the era of 106th generation.
2023-06-26 01:32:25 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 34 minutes 52 seconds
Variants: generated 358, build-succeeded 178, build-failed 114, syntax-invalid 29, redundant 37
Fitness: max 1(1), min 0(177), ave 0.006
Test execution time: sum 10210 ms, max 119 ms, min 52 ms
----------------------------------------------------------------

2023-06-26 01:32:25 [main] [INFO]  KGenProgMain - GA stopped
2023-06-26 01:32:28 [main] [INFO]  PatchLogExporter - patch (v92)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 01:32:28 [main] [INFO]  PatchLogExporter - patch (v92)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-06-26 01:32:28 [main] [INFO]  PatchLogExporter - patch (v92)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 01:32:28 [main] [INFO]  PatchLogExporter - patch (v92)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 01:32:28 [main] [INFO]  PatchLogExporter - patch (v480)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -270,7 +270,8 @@
 
       // lazy evaluation of the state
       if (dirtyState) {
-          final double oneMinusThetaH = currentTime - interpolatedTime;
+          dirtyState = true;
+		final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
2023-06-26 01:32:28 [main] [INFO]  PatchLogExporter - patch (v480)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 01:32:28 [main] [INFO]  PatchLogExporter - patch (v480)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 01:32:28 [main] [INFO]  PatchLogExporter - patch (v480)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 01:32:28 [main] [INFO]  PatchLogExporter - patch (v480)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -258,7 +258,7 @@
                 // the equality test (x0 == x2) is intentional,
                 // it is part of the original Brent's method,
                 // it should NOT be replaced by proximity test
-                if (x0 == x2) {
+                if (Math.abs(delta) > tolerance) {
                     // Linear interpolation.
                     p = dx * r3;
                     p1 = 1.0 - r3;
2023-06-26 01:32:28 [main] [INFO]  PatchLogExporter - patch (v887)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,7 +90,6 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
-    interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
@@ -244,6 +243,7 @@
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
       dirtyState       = true;
+	finalized = false;
   }
 
   /** {@inheritDoc} */
2023-06-26 01:32:28 [main] [INFO]  PatchLogExporter - patch (v887)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 01:32:28 [main] [INFO]  PatchLogExporter - patch (v887)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 01:32:28 [main] [INFO]  PatchLogExporter - patch (v887)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 01:32:28 [main] [INFO]  PatchLogExporter - patch (v887)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -276,10 +276,6 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-06-26 01:32:28 [main] [INFO]  PatchLogExporter - patch (v964)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,7 +90,6 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
-    interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
@@ -244,6 +243,7 @@
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
       dirtyState       = true;
+	finalized = false;
   }
 
   /** {@inheritDoc} */
2023-06-26 01:32:28 [main] [INFO]  PatchLogExporter - patch (v964)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 01:32:28 [main] [INFO]  PatchLogExporter - patch (v964)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 01:32:28 [main] [INFO]  PatchLogExporter - patch (v964)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 01:32:28 [main] [INFO]  PatchLogExporter - patch (v964)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,15 +223,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
2023-06-26 01:32:28 [main] [INFO]  PatchLogExporter - patch (v2444)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -242,7 +242,6 @@
 
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
-      interpolatedTime = time;
       dirtyState       = true;
   }
 
2023-06-26 01:32:28 [main] [INFO]  PatchLogExporter - patch (v2444)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 01:32:28 [main] [INFO]  PatchLogExporter - patch (v2444)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -240,7 +240,7 @@
                 } else {
                     // no sign change: there is no event for now
                     ta = tb;
-                    ga = gb;
+                    increasing = gb >= ga;
                 }
 
             }
2023-06-26 01:32:28 [main] [INFO]  PatchLogExporter - patch (v2444)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 01:32:28 [main] [INFO]  PatchLogExporter - patch (v2444)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 01:32:28 [main] [INFO]  PatchLogExporter - patch (v2444)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -174,11 +174,6 @@
                 setResult(max, 0);
                 ret = max;
             } else {
-                // neither value is close to zero and min and max do not bracket root.
-                throw MathRuntimeException.createIllegalArgumentException(
-                        "function values at endpoints do not have different signs.  " +
-                        "Endpoints: [{0}, {1}], Values: [{2}, {3}]",
-                        min, max, yMin, yMax);
             }
         } else if (sign < 0){
             // solve using only the first endpoint as initial guess
@@ -276,10 +271,7 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
+                    delta = (x0 - x1) / (1 - y0 / y1);
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v2496)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -242,7 +242,6 @@
 
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
-      interpolatedTime = time;
       dirtyState       = true;
   }
 
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v2496)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v2496)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -240,7 +240,7 @@
                 } else {
                     // no sign change: there is no event for now
                     ta = tb;
-                    ga = gb;
+                    increasing = gb >= ga;
                 }
 
             }
@@ -282,7 +282,6 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v2496)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v2496)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v2496)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -174,11 +174,6 @@
                 setResult(max, 0);
                 ret = max;
             } else {
-                // neither value is close to zero and min and max do not bracket root.
-                throw MathRuntimeException.createIllegalArgumentException(
-                        "function values at endpoints do not have different signs.  " +
-                        "Endpoints: [{0}, {1}], Values: [{2}, {3}]",
-                        min, max, yMin, yMax);
             }
         } else if (sign < 0){
             // solve using only the first endpoint as initial guess
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v2514)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -242,7 +242,6 @@
 
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
-      interpolatedTime = time;
       dirtyState       = true;
   }
 
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v2514)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v2514)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -240,7 +240,7 @@
                 } else {
                     // no sign change: there is no event for now
                     ta = tb;
-                    ga = gb;
+                    increasing = gb >= ga;
                 }
 
             }
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v2514)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v2514)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v2514)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -174,11 +174,6 @@
                 setResult(max, 0);
                 ret = max;
             } else {
-                // neither value is close to zero and min and max do not bracket root.
-                throw MathRuntimeException.createIllegalArgumentException(
-                        "function values at endpoints do not have different signs.  " +
-                        "Endpoints: [{0}, {1}], Values: [{2}, {3}]",
-                        min, max, yMin, yMax);
             }
         } else if (sign < 0){
             // solve using only the first endpoint as initial guess
@@ -223,7 +218,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
+            if (i <= maximalIterationCount) {
                 // use the bracket point if is better than last approximation
                 x0 = x1;
                 x1 = x2;
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v2957)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -242,7 +242,6 @@
 
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
-      interpolatedTime = time;
       dirtyState       = true;
   }
 
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v2957)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v2957)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -240,7 +240,7 @@
                 } else {
                     // no sign change: there is no event for now
                     ta = tb;
-                    ga = gb;
+                    increasing = gb >= ga;
                 }
 
             }
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v2957)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v2957)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v2957)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -174,11 +174,6 @@
                 setResult(max, 0);
                 ret = max;
             } else {
-                // neither value is close to zero and min and max do not bracket root.
-                throw MathRuntimeException.createIllegalArgumentException(
-                        "function values at endpoints do not have different signs.  " +
-                        "Endpoints: [{0}, {1}], Values: [{2}, {3}]",
-                        min, max, yMin, yMax);
             }
         } else if (sign < 0){
             // solve using only the first endpoint as initial guess
@@ -274,8 +269,7 @@
                 } else {
                     p = -p;
                 }
-                if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
-                        p >= Math.abs(0.5 * oldDelta * p1)) {
+                if (y2 == 0.0) {
                     // Inverse quadratic interpolation gives a value
                     // in the wrong direction, or progress is slow.
                     // Fall back to bisection.
@@ -294,6 +288,7 @@
                 x1 = x1 + delta;
             } else if (dx > 0.0) {
                 x1 = x1 + 0.5 * tolerance;
+				clearResult();
             } else if (dx <= 0.0) {
                 x1 = x1 - 0.5 * tolerance;
             }
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v3352)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -89,7 +89,7 @@
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
+    previousTime = currentTime;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
@@ -242,7 +242,6 @@
 
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
-      interpolatedTime = time;
       dirtyState       = true;
   }
 
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v3352)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v3352)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -240,7 +240,7 @@
                 } else {
                     // no sign change: there is no event for now
                     ta = tb;
-                    ga = gb;
+                    increasing = gb >= ga;
                 }
 
             }
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v3352)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v3352)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v3352)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -174,11 +174,6 @@
                 setResult(max, 0);
                 ret = max;
             } else {
-                // neither value is close to zero and min and max do not bracket root.
-                throw MathRuntimeException.createIllegalArgumentException(
-                        "function values at endpoints do not have different signs.  " +
-                        "Endpoints: [{0}, {1}], Values: [{2}, {3}]",
-                        min, max, yMin, yMax);
             }
         } else if (sign < 0){
             // solve using only the first endpoint as initial guess
@@ -276,10 +271,6 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v3380)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -89,7 +89,7 @@
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
+    previousTime = currentTime;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
@@ -242,7 +242,6 @@
 
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
-      interpolatedTime = time;
       dirtyState       = true;
   }
 
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v3380)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v3380)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v3380)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -240,7 +240,7 @@
                 } else {
                     // no sign change: there is no event for now
                     ta = tb;
-                    ga = gb;
+                    increasing = gb >= ga;
                 }
 
             }
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v3380)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v3380)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v3380)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -174,11 +174,6 @@
                 setResult(max, 0);
                 ret = max;
             } else {
-                // neither value is close to zero and min and max do not bracket root.
-                throw MathRuntimeException.createIllegalArgumentException(
-                        "function values at endpoints do not have different signs.  " +
-                        "Endpoints: [{0}, {1}], Values: [{2}, {3}]",
-                        min, max, yMin, yMax);
             }
         } else if (sign < 0){
             // solve using only the first endpoint as initial guess
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v3707)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v3707)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -102,7 +102,6 @@
         t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
@@ -150,7 +149,10 @@
         throws EventException {
         t0 = tStart;
         g0 = handler.g(tStart, yStart);
-        g0Positive = g0 >= 0;
+        {
+			g0Positive = g0 >= 0;
+			nextAction = EventHandler.CONTINUE;
+		}
     }
 
     /** Evaluate the impact of the proposed step on the event handler.
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v3707)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v3707)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v3707)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -276,10 +276,7 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
+                    clearResult();
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v3713)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v3713)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -102,7 +102,6 @@
         t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
@@ -150,7 +149,10 @@
         throws EventException {
         t0 = tStart;
         g0 = handler.g(tStart, yStart);
-        g0Positive = g0 >= 0;
+        {
+			g0Positive = g0 >= 0;
+			nextAction = EventHandler.CONTINUE;
+		}
     }
 
     /** Evaluate the impact of the proposed step on the event handler.
@@ -213,7 +215,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v3713)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v3713)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v3766)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v3766)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -102,7 +102,6 @@
         t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
@@ -150,7 +149,10 @@
         throws EventException {
         t0 = tStart;
         g0 = handler.g(tStart, yStart);
-        g0Positive = g0 >= 0;
+        {
+			g0Positive = g0 >= 0;
+			nextAction = EventHandler.CONTINUE;
+		}
     }
 
     /** Evaluate the impact of the proposed step on the event handler.
@@ -282,7 +284,7 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
+        boolean resetDerivatives = false;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v3766)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v3766)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v3798)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v3798)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v3798)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -102,7 +102,6 @@
         t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
@@ -150,7 +149,10 @@
         throws EventException {
         t0 = tStart;
         g0 = handler.g(tStart, yStart);
-        g0Positive = g0 >= 0;
+        {
+			g0Positive = g0 >= 0;
+			nextAction = EventHandler.CONTINUE;
+		}
     }
 
     /** Evaluate the impact of the proposed step on the event handler.
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v3798)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v3798)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v4453)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,7 +94,8 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    this.forward = forward;
+	finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v4453)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v4453)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -150,7 +150,10 @@
         throws EventException {
         t0 = tStart;
         g0 = handler.g(tStart, yStart);
-        g0Positive = g0 >= 0;
+        {
+			g0Positive = g0 >= 0;
+			nextAction = EventHandler.CONTINUE;
+		}
     }
 
     /** Evaluate the impact of the proposed step on the event handler.
@@ -247,7 +250,8 @@
 
             // no event during the whole step
             pendingEvent     = false;
-            pendingEventTime = Double.NaN;
+            previousEventTime = Double.NaN;
+			pendingEventTime = Double.NaN;
             return false;
 
         } catch (FunctionEvaluationException e) {
@@ -282,7 +286,6 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v4453)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v4453)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v6306)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v6306)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -247,7 +247,8 @@
 
             // no event during the whole step
             pendingEvent     = false;
-            pendingEventTime = Double.NaN;
+            previousEventTime = Double.NaN;
+			pendingEventTime = Double.NaN;
             return false;
 
         } catch (FunctionEvaluationException e) {
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v6306)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v6306)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v6306)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,7 +223,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
+            if (y0 * y1 >= 0) {
                 // use the bracket point if is better than last approximation
                 x0 = x1;
                 x1 = x2;
@@ -270,7 +270,6 @@
                     p1 = (r1 - 1.0) * (r2 - 1.0) * (r3 - 1.0);
                 }
                 if (p > 0.0) {
-                    p1 = -p1;
                 } else {
                     p = -p;
                 }
@@ -280,7 +279,7 @@
                     // in the wrong direction, or progress is slow.
                     // Fall back to bisection.
                     delta = 0.5 * dx;
-                    oldDelta = delta;
+                    y0 = y1;
                 } else {
                     oldDelta = delta;
                     delta = p / p1;
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v16024)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,7 +94,8 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    this.forward = forward;
+	finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -243,7 +244,6 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
   }
 
   /** {@inheritDoc} */
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v16024)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v16024)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -96,14 +96,19 @@
         this.handler           = handler;
         this.maxCheckInterval  = maxCheckInterval;
         this.convergence       = Math.abs(convergence);
+		increasing = true;
         this.maxIterationCount = maxIterationCount;
 
         // some dummy values ...
         t0                = Double.NaN;
-        g0                = Double.NaN;
-        g0Positive        = true;
+        {
+			g0Positive = g0 >= 0;
+			nextAction = EventHandler.CONTINUE;
+		}
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
+		previousEventTime = Double.NaN;
+		previousEventTime = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
         nextAction        = EventHandler.CONTINUE;
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v16024)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v16024)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v16024)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -276,10 +276,6 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v16039)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,7 +94,8 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    this.forward = forward;
+	finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -243,7 +244,6 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
   }
 
   /** {@inheritDoc} */
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v16039)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v16039)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -96,14 +96,19 @@
         this.handler           = handler;
         this.maxCheckInterval  = maxCheckInterval;
         this.convergence       = Math.abs(convergence);
+		increasing = true;
         this.maxIterationCount = maxIterationCount;
 
         // some dummy values ...
         t0                = Double.NaN;
-        g0                = Double.NaN;
-        g0Positive        = true;
+        {
+			g0Positive = g0 >= 0;
+			nextAction = EventHandler.CONTINUE;
+		}
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
+		previousEventTime = Double.NaN;
+		previousEventTime = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
         nextAction        = EventHandler.CONTINUE;
@@ -213,7 +218,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v16039)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v16039)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v16134)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,7 +94,8 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    this.forward = forward;
+	finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -243,7 +244,6 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
   }
 
   /** {@inheritDoc} */
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v16134)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v16134)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -96,14 +96,19 @@
         this.handler           = handler;
         this.maxCheckInterval  = maxCheckInterval;
         this.convergence       = Math.abs(convergence);
+		increasing = true;
         this.maxIterationCount = maxIterationCount;
 
         // some dummy values ...
         t0                = Double.NaN;
-        g0                = Double.NaN;
-        g0Positive        = true;
+        {
+			g0Positive = g0 >= 0;
+			nextAction = EventHandler.CONTINUE;
+		}
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
+		previousEventTime = Double.NaN;
+		previousEventTime = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
         nextAction        = EventHandler.CONTINUE;
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v16134)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v16134)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v16134)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,15 +223,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v16812)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,7 +94,8 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    this.forward = forward;
+	finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -217,6 +218,11 @@
   public void storeTime(final double t) {
 
     currentTime = t;
+	{
+		currentState = null;
+		interpolatedState = null;
+		interpolatedDerivatives = null;
+	}
     h           = currentTime - previousTime;
     setInterpolatedTime(t);
 
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v16812)
--- org.apache.commons.math.ode.sampling.DummyStepInterpolator
+++ org.apache.commons.math.ode.sampling.DummyStepInterpolator
@@ -96,7 +96,6 @@
   @Override
   protected void computeInterpolatedStateAndDerivatives(final double theta, final double oneMinusThetaH)
     throws DerivativeException {
-      System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
   }
 
   /** Write the instance to an output channel.
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v16812)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v16812)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -96,14 +96,19 @@
         this.handler           = handler;
         this.maxCheckInterval  = maxCheckInterval;
         this.convergence       = Math.abs(convergence);
+		increasing = true;
         this.maxIterationCount = maxIterationCount;
 
         // some dummy values ...
         t0                = Double.NaN;
-        g0                = Double.NaN;
+        {
+			g0Positive = g0 >= 0;
+			nextAction = EventHandler.CONTINUE;
+		}
         g0Positive        = true;
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
+		previousEventTime = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
         nextAction        = EventHandler.CONTINUE;
@@ -213,7 +218,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
@@ -247,7 +251,8 @@
 
             // no event during the whole step
             pendingEvent     = false;
-            pendingEventTime = Double.NaN;
+            previousEventTime = Double.NaN;
+			pendingEventTime = Double.NaN;
             return false;
 
         } catch (FunctionEvaluationException e) {
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v16812)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v16812)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v16812)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -174,11 +174,6 @@
                 setResult(max, 0);
                 ret = max;
             } else {
-                // neither value is close to zero and min and max do not bracket root.
-                throw MathRuntimeException.createIllegalArgumentException(
-                        "function values at endpoints do not have different signs.  " +
-                        "Endpoints: [{0}, {1}], Values: [{2}, {3}]",
-                        min, max, yMin, yMax);
             }
         } else if (sign < 0){
             // solve using only the first endpoint as initial guess
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v16871)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,7 +94,8 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    this.forward = forward;
+	finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -217,6 +218,11 @@
   public void storeTime(final double t) {
 
     currentTime = t;
+	{
+		currentState = null;
+		interpolatedState = null;
+		interpolatedDerivatives = null;
+	}
     h           = currentTime - previousTime;
     setInterpolatedTime(t);
 
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v16871)
--- org.apache.commons.math.ode.sampling.DummyStepInterpolator
+++ org.apache.commons.math.ode.sampling.DummyStepInterpolator
@@ -96,7 +96,6 @@
   @Override
   protected void computeInterpolatedStateAndDerivatives(final double theta, final double oneMinusThetaH)
     throws DerivativeException {
-      System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
   }
 
   /** Write the instance to an output channel.
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v16871)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v16871)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v16871)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -96,14 +96,19 @@
         this.handler           = handler;
         this.maxCheckInterval  = maxCheckInterval;
         this.convergence       = Math.abs(convergence);
+		increasing = true;
         this.maxIterationCount = maxIterationCount;
 
         // some dummy values ...
         t0                = Double.NaN;
-        g0                = Double.NaN;
+        {
+			g0Positive = g0 >= 0;
+			nextAction = EventHandler.CONTINUE;
+		}
         g0Positive        = true;
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
+		previousEventTime = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
         nextAction        = EventHandler.CONTINUE;
@@ -247,7 +252,8 @@
 
             // no event during the whole step
             pendingEvent     = false;
-            pendingEventTime = Double.NaN;
+            previousEventTime = Double.NaN;
+			pendingEventTime = Double.NaN;
             return false;
 
         } catch (FunctionEvaluationException e) {
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v16871)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v16871)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v16871)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -174,11 +174,6 @@
                 setResult(max, 0);
                 ret = max;
             } else {
-                // neither value is close to zero and min and max do not bracket root.
-                throw MathRuntimeException.createIllegalArgumentException(
-                        "function values at endpoints do not have different signs.  " +
-                        "Endpoints: [{0}, {1}], Values: [{2}, {3}]",
-                        min, max, yMin, yMax);
             }
         } else if (sign < 0){
             // solve using only the first endpoint as initial guess
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v16911)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,7 +94,8 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    this.forward = forward;
+	finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -217,6 +218,11 @@
   public void storeTime(final double t) {
 
     currentTime = t;
+	{
+		currentState = null;
+		interpolatedState = null;
+		interpolatedDerivatives = null;
+	}
     h           = currentTime - previousTime;
     setInterpolatedTime(t);
 
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v16911)
--- org.apache.commons.math.ode.sampling.DummyStepInterpolator
+++ org.apache.commons.math.ode.sampling.DummyStepInterpolator
@@ -96,7 +96,6 @@
   @Override
   protected void computeInterpolatedStateAndDerivatives(final double theta, final double oneMinusThetaH)
     throws DerivativeException {
-      System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
   }
 
   /** Write the instance to an output channel.
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v16911)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v16911)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -96,14 +96,19 @@
         this.handler           = handler;
         this.maxCheckInterval  = maxCheckInterval;
         this.convergence       = Math.abs(convergence);
+		increasing = true;
         this.maxIterationCount = maxIterationCount;
 
         // some dummy values ...
         t0                = Double.NaN;
-        g0                = Double.NaN;
+        {
+			g0Positive = g0 >= 0;
+			nextAction = EventHandler.CONTINUE;
+		}
         g0Positive        = true;
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
+		previousEventTime = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
         nextAction        = EventHandler.CONTINUE;
@@ -213,7 +218,7 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
+                    ga = gb;
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
@@ -247,7 +252,8 @@
 
             // no event during the whole step
             pendingEvent     = false;
-            pendingEventTime = Double.NaN;
+            previousEventTime = Double.NaN;
+			pendingEventTime = Double.NaN;
             return false;
 
         } catch (FunctionEvaluationException e) {
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v16911)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v16911)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v16911)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -174,11 +174,6 @@
                 setResult(max, 0);
                 ret = max;
             } else {
-                // neither value is close to zero and min and max do not bracket root.
-                throw MathRuntimeException.createIllegalArgumentException(
-                        "function values at endpoints do not have different signs.  " +
-                        "Endpoints: [{0}, {1}], Values: [{2}, {3}]",
-                        min, max, yMin, yMax);
             }
         } else if (sign < 0){
             // solve using only the first endpoint as initial guess
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v16988)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,7 +94,8 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    this.forward = forward;
+	finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -217,6 +218,11 @@
   public void storeTime(final double t) {
 
     currentTime = t;
+	{
+		currentState = null;
+		interpolatedState = null;
+		interpolatedDerivatives = null;
+	}
     h           = currentTime - previousTime;
     setInterpolatedTime(t);
 
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v16988)
--- org.apache.commons.math.ode.sampling.DummyStepInterpolator
+++ org.apache.commons.math.ode.sampling.DummyStepInterpolator
@@ -96,7 +96,6 @@
   @Override
   protected void computeInterpolatedStateAndDerivatives(final double theta, final double oneMinusThetaH)
     throws DerivativeException {
-      System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
   }
 
   /** Write the instance to an output channel.
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v16988)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v16988)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -96,14 +96,19 @@
         this.handler           = handler;
         this.maxCheckInterval  = maxCheckInterval;
         this.convergence       = Math.abs(convergence);
+		increasing = true;
         this.maxIterationCount = maxIterationCount;
 
         // some dummy values ...
         t0                = Double.NaN;
-        g0                = Double.NaN;
+        {
+			g0Positive = g0 >= 0;
+			nextAction = EventHandler.CONTINUE;
+		}
         g0Positive        = true;
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
+		previousEventTime = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
         nextAction        = EventHandler.CONTINUE;
@@ -247,7 +252,8 @@
 
             // no event during the whole step
             pendingEvent     = false;
-            pendingEventTime = Double.NaN;
+            previousEventTime = Double.NaN;
+			pendingEventTime = Double.NaN;
             return false;
 
         } catch (FunctionEvaluationException e) {
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v16988)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v16988)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v16988)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -174,11 +174,6 @@
                 setResult(max, 0);
                 ret = max;
             } else {
-                // neither value is close to zero and min and max do not bracket root.
-                throw MathRuntimeException.createIllegalArgumentException(
-                        "function values at endpoints do not have different signs.  " +
-                        "Endpoints: [{0}, {1}], Values: [{2}, {3}]",
-                        min, max, yMin, yMax);
             }
         } else if (sign < 0){
             // solve using only the first endpoint as initial guess
@@ -274,8 +269,7 @@
                 } else {
                     p = -p;
                 }
-                if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
-                        p >= Math.abs(0.5 * oldDelta * p1)) {
+                if (Math.abs(oldDelta) < Math.max(relativeAccuracy * Math.abs(x1), absoluteAccuracy)) {
                     // Inverse quadratic interpolation gives a value
                     // in the wrong direction, or progress is slow.
                     // Fall back to bisection.
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v17610)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -243,7 +243,6 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
   }
 
   /** {@inheritDoc} */
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v17610)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v17610)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -59,7 +59,6 @@
      */
     protected ConvergingAlgorithmImpl(final int defaultMaximalIterationCount,
                                       final double defaultAbsoluteAccuracy) {
-        this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
@@ -75,7 +74,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v17610)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -104,9 +104,9 @@
         g0Positive        = true;
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
+		previousEventTime = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
-        nextAction        = EventHandler.CONTINUE;
 
     }
 
@@ -213,6 +213,7 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
+					pendingEventTime = Double.NaN;
                     solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
@@ -240,7 +241,7 @@
                 } else {
                     // no sign change: there is no event for now
                     ta = tb;
-                    ga = gb;
+                    increasing = gb >= ga;
                 }
 
             }
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v17610)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v17610)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v17772)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -243,7 +243,6 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
   }
 
   /** {@inheritDoc} */
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v17772)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v17772)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -59,7 +59,6 @@
      */
     protected ConvergingAlgorithmImpl(final int defaultMaximalIterationCount,
                                       final double defaultAbsoluteAccuracy) {
-        this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v17772)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -104,9 +104,9 @@
         g0Positive        = true;
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
+		previousEventTime = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
-        nextAction        = EventHandler.CONTINUE;
 
     }
 
@@ -213,6 +213,7 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
+					pendingEventTime = Double.NaN;
                     solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
@@ -240,7 +241,7 @@
                 } else {
                     // no sign change: there is no event for now
                     ta = tb;
-                    ga = gb;
+                    increasing = gb >= ga;
                 }
 
             }
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v17772)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v17772)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v17772)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,7 +223,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
+            if (y0 == 0.0) {
                 // use the bracket point if is better than last approximation
                 x0 = x1;
                 x1 = x2;
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v17790)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -243,7 +243,6 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
   }
 
   /** {@inheritDoc} */
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v17790)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v17790)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -59,7 +59,6 @@
      */
     protected ConvergingAlgorithmImpl(final int defaultMaximalIterationCount,
                                       final double defaultAbsoluteAccuracy) {
-        this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v17790)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -104,9 +104,9 @@
         g0Positive        = true;
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
+		previousEventTime = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
-        nextAction        = EventHandler.CONTINUE;
 
     }
 
@@ -213,6 +213,7 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
+					pendingEventTime = Double.NaN;
                     solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
@@ -240,7 +241,7 @@
                 } else {
                     // no sign change: there is no event for now
                     ta = tb;
-                    ga = gb;
+                    increasing = gb >= ga;
                 }
 
             }
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v17790)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v17790)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v17790)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -276,10 +276,6 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v18869)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,7 +94,8 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    this.forward = forward;
+	finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -269,7 +270,7 @@
   public double[] getInterpolatedState() throws DerivativeException {
 
       // lazy evaluation of the state
-      if (dirtyState) {
+      if (!finalized) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v18869)
--- org.apache.commons.math.ode.sampling.DummyStepInterpolator
+++ org.apache.commons.math.ode.sampling.DummyStepInterpolator
@@ -96,7 +96,6 @@
   @Override
   protected void computeInterpolatedStateAndDerivatives(final double theta, final double oneMinusThetaH)
     throws DerivativeException {
-      System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
   }
 
   /** Write the instance to an output channel.
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v18869)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v18869)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -104,6 +104,8 @@
         g0Positive        = true;
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
+		previousEventTime = Double.NaN;
+		previousEventTime = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
         nextAction        = EventHandler.CONTINUE;
@@ -179,8 +181,6 @@
             double tb = t0 + (interpolator.isForward() ? convergence : -convergence);
             for (int i = 0; i < n; ++i) {
 
-                // evaluate handler value at the end of the substep
-                tb += h;
                 interpolator.setInterpolatedTime(tb);
                 final double gb = handler.g(tb, interpolator.getInterpolatedState());
 
@@ -247,8 +247,48 @@
 
             // no event during the whole step
             pendingEvent     = false;
-            pendingEventTime = Double.NaN;
-            return false;
+            previousEventTime = Double.NaN;
+			previousEventTime = Double.NaN;
+			pendingEventTime = Double.NaN;
+            {
+				tb += h;
+				interpolator.setInterpolatedTime(tb);
+				final double gb = handler.g(tb, interpolator.getInterpolatedState());
+				if (g0Positive ^ (gb >= 0)) {
+					increasing = gb >= ga;
+					final UnivariateRealFunction f = new UnivariateRealFunction() {
+						public double value(final double t) throws FunctionEvaluationException {
+							try {
+								interpolator.setInterpolatedTime(t);
+								return handler.g(t, interpolator.getInterpolatedState());
+							} catch (DerivativeException e) {
+								throw new FunctionEvaluationException(e, t);
+							} catch (EventException e) {
+								throw new FunctionEvaluationException(e, t);
+							}
+						}
+					};
+					final BrentSolver solver = new BrentSolver();
+					solver.setAbsoluteAccuracy(convergence);
+					solver.setMaximalIterationCount(maxIterationCount);
+					final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
+					if ((Math.abs(root - ta) <= convergence) && (Math.abs(root - previousEventTime) <= convergence)) {
+						ta = tb;
+						ga = gb;
+					} else if (Double.isNaN(previousEventTime) || (Math.abs(previousEventTime - root) > convergence)) {
+						pendingEventTime = root;
+						if (pendingEvent && (Math.abs(t1 - pendingEventTime) <= convergence)) {
+							return false;
+						}
+						pendingEvent = true;
+						return true;
+					}
+				} else {
+					ta = tb;
+					ga = gb;
+				}
+			}
+			return false;
 
         } catch (FunctionEvaluationException e) {
             final Throwable cause = e.getCause();
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v18869)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v18869)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v19349)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -243,7 +243,6 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
   }
 
   /** {@inheritDoc} */
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v19349)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v19349)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -59,7 +59,6 @@
      */
     protected ConvergingAlgorithmImpl(final int defaultMaximalIterationCount,
                                       final double defaultAbsoluteAccuracy) {
-        this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v19349)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -104,6 +104,8 @@
         g0Positive        = true;
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
+		previousEventTime = Double.NaN;
+		previousEventTime = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
         nextAction        = EventHandler.CONTINUE;
@@ -213,6 +215,8 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
                     solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
@@ -240,7 +244,7 @@
                 } else {
                     // no sign change: there is no event for now
                     ta = tb;
-                    ga = gb;
+                    increasing = gb >= ga;
                 }
 
             }
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v19349)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v19349)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v19349)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,15 +223,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v19384)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -243,7 +243,6 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
   }
 
   /** {@inheritDoc} */
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v19384)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v19384)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -59,7 +59,6 @@
      */
     protected ConvergingAlgorithmImpl(final int defaultMaximalIterationCount,
                                       final double defaultAbsoluteAccuracy) {
-        this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v19384)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -104,6 +104,8 @@
         g0Positive        = true;
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
+		previousEventTime = Double.NaN;
+		previousEventTime = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
         nextAction        = EventHandler.CONTINUE;
@@ -213,6 +215,8 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
                     solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
@@ -240,7 +244,7 @@
                 } else {
                     // no sign change: there is no event for now
                     ta = tb;
-                    ga = gb;
+                    increasing = gb >= ga;
                 }
 
             }
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v19384)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v19384)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v19384)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -276,10 +276,6 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v19391)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -243,7 +243,6 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
   }
 
   /** {@inheritDoc} */
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v19391)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v19391)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -59,7 +59,6 @@
      */
     protected ConvergingAlgorithmImpl(final int defaultMaximalIterationCount,
                                       final double defaultAbsoluteAccuracy) {
-        this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
@@ -75,7 +74,7 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
+        relativeAccuracy = defaultRelativeAccuracy;
     }
 
     /** {@inheritDoc} */
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v19391)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -104,6 +104,8 @@
         g0Positive        = true;
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
+		previousEventTime = Double.NaN;
+		previousEventTime = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
         nextAction        = EventHandler.CONTINUE;
@@ -213,6 +215,8 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
                     solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
@@ -240,7 +244,7 @@
                 } else {
                     // no sign change: there is no event for now
                     ta = tb;
-                    ga = gb;
+                    increasing = gb >= ga;
                 }
 
             }
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v19391)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v19391)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v20899)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -243,7 +243,6 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
   }
 
   /** {@inheritDoc} */
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v20899)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v20899)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -59,7 +59,6 @@
      */
     protected ConvergingAlgorithmImpl(final int defaultMaximalIterationCount,
                                       final double defaultAbsoluteAccuracy) {
-        this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v20899)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -106,7 +106,6 @@
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
-        nextAction        = EventHandler.CONTINUE;
 
     }
 
@@ -174,7 +173,8 @@
             final int    n  = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));
             final double h  = (t1 - t0) / n;
 
-            double ta = t0;
+            pendingEvent = false;
+			double ta = t0;
             double ga = g0;
             double tb = t0 + (interpolator.isForward() ? convergence : -convergence);
             for (int i = 0; i < n; ++i) {
@@ -213,7 +213,8 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
@@ -240,14 +241,15 @@
                 } else {
                     // no sign change: there is no event for now
                     ta = tb;
-                    ga = gb;
+                    increasing = gb >= ga;
                 }
 
             }
 
             // no event during the whole step
             pendingEvent     = false;
-            pendingEventTime = Double.NaN;
+            previousEventTime = Double.NaN;
+			pendingEventTime = Double.NaN;
             return false;
 
         } catch (FunctionEvaluationException e) {
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v20899)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v20899)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v20931)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -243,7 +243,6 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
   }
 
   /** {@inheritDoc} */
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v20931)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v20931)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -59,7 +59,6 @@
      */
     protected ConvergingAlgorithmImpl(final int defaultMaximalIterationCount,
                                       final double defaultAbsoluteAccuracy) {
-        this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v20931)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -106,7 +106,6 @@
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
-        nextAction        = EventHandler.CONTINUE;
 
     }
 
@@ -174,7 +173,8 @@
             final int    n  = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));
             final double h  = (t1 - t0) / n;
 
-            double ta = t0;
+            pendingEvent = false;
+			double ta = t0;
             double ga = g0;
             double tb = t0 + (interpolator.isForward() ? convergence : -convergence);
             for (int i = 0; i < n; ++i) {
@@ -213,6 +213,8 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
                     solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
@@ -240,14 +242,15 @@
                 } else {
                     // no sign change: there is no event for now
                     ta = tb;
-                    ga = gb;
+                    increasing = gb >= ga;
                 }
 
             }
 
             // no event during the whole step
             pendingEvent     = false;
-            pendingEventTime = Double.NaN;
+            previousEventTime = Double.NaN;
+			pendingEventTime = Double.NaN;
             return false;
 
         } catch (FunctionEvaluationException e) {
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v20931)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v20931)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v20931)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -258,7 +258,7 @@
                 // the equality test (x0 == x2) is intentional,
                 // it is part of the original Brent's method,
                 // it should NOT be replaced by proximity test
-                if (x0 == x2) {
+                if (!resultComputed) {
                     // Linear interpolation.
                     p = dx * r3;
                     p1 = 1.0 - r3;
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v21288)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,7 +88,8 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
+    currentTime = Double.NaN;
+	currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
@@ -217,6 +218,11 @@
   public void storeTime(final double t) {
 
     currentTime = t;
+	{
+		currentState = null;
+		interpolatedState = null;
+		interpolatedDerivatives = null;
+	}
     h           = currentTime - previousTime;
     setInterpolatedTime(t);
 
@@ -269,7 +275,7 @@
   public double[] getInterpolatedState() throws DerivativeException {
 
       // lazy evaluation of the state
-      if (dirtyState) {
+      if (!finalized) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v21288)
--- org.apache.commons.math.ode.sampling.DummyStepInterpolator
+++ org.apache.commons.math.ode.sampling.DummyStepInterpolator
@@ -96,7 +96,6 @@
   @Override
   protected void computeInterpolatedStateAndDerivatives(final double theta, final double oneMinusThetaH)
     throws DerivativeException {
-      System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
   }
 
   /** Write the instance to an output channel.
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v21288)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v21288)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -59,7 +59,6 @@
      */
     protected ConvergingAlgorithmImpl(final int defaultMaximalIterationCount,
                                       final double defaultAbsoluteAccuracy) {
-        this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v21288)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -104,6 +104,8 @@
         g0Positive        = true;
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
+		previousEventTime = Double.NaN;
+		previousEventTime = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
         nextAction        = EventHandler.CONTINUE;
@@ -169,7 +171,6 @@
 
         try {
 
-            forward = interpolator.isForward();
             final double t1 = interpolator.getCurrentTime();
             final int    n  = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));
             final double h  = (t1 - t0) / n;
@@ -247,7 +248,8 @@
 
             // no event during the whole step
             pendingEvent     = false;
-            pendingEventTime = Double.NaN;
+            previousEventTime = Double.NaN;
+			pendingEventTime = Double.NaN;
             return false;
 
         } catch (FunctionEvaluationException e) {
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v21288)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v21288)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v21288)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,15 +223,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v21304)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,7 +88,8 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
+    currentTime = Double.NaN;
+	currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
@@ -217,6 +218,11 @@
   public void storeTime(final double t) {
 
     currentTime = t;
+	{
+		currentState = null;
+		interpolatedState = null;
+		interpolatedDerivatives = null;
+	}
     h           = currentTime - previousTime;
     setInterpolatedTime(t);
 
@@ -269,7 +275,7 @@
   public double[] getInterpolatedState() throws DerivativeException {
 
       // lazy evaluation of the state
-      if (dirtyState) {
+      if (!finalized) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v21304)
--- org.apache.commons.math.ode.sampling.DummyStepInterpolator
+++ org.apache.commons.math.ode.sampling.DummyStepInterpolator
@@ -96,7 +96,6 @@
   @Override
   protected void computeInterpolatedStateAndDerivatives(final double theta, final double oneMinusThetaH)
     throws DerivativeException {
-      System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
   }
 
   /** Write the instance to an output channel.
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v21304)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v21304)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -59,7 +59,6 @@
      */
     protected ConvergingAlgorithmImpl(final int defaultMaximalIterationCount,
                                       final double defaultAbsoluteAccuracy) {
-        this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v21304)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -104,6 +104,8 @@
         g0Positive        = true;
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
+		previousEventTime = Double.NaN;
+		previousEventTime = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
         nextAction        = EventHandler.CONTINUE;
@@ -169,7 +171,6 @@
 
         try {
 
-            forward = interpolator.isForward();
             final double t1 = interpolator.getCurrentTime();
             final int    n  = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));
             final double h  = (t1 - t0) / n;
@@ -247,7 +248,8 @@
 
             // no event during the whole step
             pendingEvent     = false;
-            pendingEventTime = Double.NaN;
+            previousEventTime = Double.NaN;
+			pendingEventTime = Double.NaN;
             return false;
 
         } catch (FunctionEvaluationException e) {
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v21304)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v21304)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v21304)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -276,10 +276,6 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v23638)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,8 +88,10 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
-    h                       = Double.NaN;
+    currentTime = Double.NaN;
+	currentTime = Double.NaN;
+	currentTime             = Double.NaN;
+    currentTime = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v23638)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v23638)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -59,7 +59,6 @@
      */
     protected ConvergingAlgorithmImpl(final int defaultMaximalIterationCount,
                                       final double defaultAbsoluteAccuracy) {
-        this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v23638)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -100,10 +100,14 @@
 
         // some dummy values ...
         t0                = Double.NaN;
-        g0                = Double.NaN;
+        {
+			g0Positive = g0 >= 0;
+			nextAction = EventHandler.CONTINUE;
+		}
         g0Positive        = true;
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
+		previousEventTime = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
         nextAction        = EventHandler.CONTINUE;
@@ -213,6 +217,7 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
+					pendingEventTime = Double.NaN;
                     solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
@@ -241,13 +246,15 @@
                     // no sign change: there is no event for now
                     ta = tb;
                     ga = gb;
+					g0Positive = increasing;
                 }
 
             }
 
             // no event during the whole step
             pendingEvent     = false;
-            pendingEventTime = Double.NaN;
+            previousEventTime = Double.NaN;
+			pendingEventTime = Double.NaN;
             return false;
 
         } catch (FunctionEvaluationException e) {
@@ -282,7 +289,7 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
+        boolean resetDerivatives = false;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v23638)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v23638)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v23654)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,8 +88,10 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
-    h                       = Double.NaN;
+    currentTime = Double.NaN;
+	currentTime = Double.NaN;
+	currentTime             = Double.NaN;
+    currentTime = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v23654)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v23654)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -59,7 +59,6 @@
      */
     protected ConvergingAlgorithmImpl(final int defaultMaximalIterationCount,
                                       final double defaultAbsoluteAccuracy) {
-        this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v23654)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -100,10 +100,14 @@
 
         // some dummy values ...
         t0                = Double.NaN;
-        g0                = Double.NaN;
+        {
+			g0Positive = g0 >= 0;
+			nextAction = EventHandler.CONTINUE;
+		}
         g0Positive        = true;
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
+		previousEventTime = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
         nextAction        = EventHandler.CONTINUE;
@@ -213,6 +217,7 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
+					pendingEventTime = Double.NaN;
                     solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
@@ -241,13 +246,15 @@
                     // no sign change: there is no event for now
                     ta = tb;
                     ga = gb;
+					g0Positive = increasing;
                 }
 
             }
 
             // no event during the whole step
             pendingEvent     = false;
-            pendingEventTime = Double.NaN;
+            previousEventTime = Double.NaN;
+			pendingEventTime = Double.NaN;
             return false;
 
         } catch (FunctionEvaluationException e) {
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v23654)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v23654)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v23654)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -274,8 +274,7 @@
                 } else {
                     p = -p;
                 }
-                if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
-                        p >= Math.abs(0.5 * oldDelta * p1)) {
+                if (y0 * y1 >= 0) {
                     // Inverse quadratic interpolation gives a value
                     // in the wrong direction, or progress is slow.
                     // Fall back to bisection.
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v23723)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,8 +88,10 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
-    h                       = Double.NaN;
+    currentTime = Double.NaN;
+	currentTime = Double.NaN;
+	currentTime             = Double.NaN;
+    currentTime = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v23723)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v23723)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -59,7 +59,6 @@
      */
     protected ConvergingAlgorithmImpl(final int defaultMaximalIterationCount,
                                       final double defaultAbsoluteAccuracy) {
-        this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
@@ -75,7 +74,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v23723)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -100,10 +100,14 @@
 
         // some dummy values ...
         t0                = Double.NaN;
-        g0                = Double.NaN;
+        {
+			g0Positive = g0 >= 0;
+			nextAction = EventHandler.CONTINUE;
+		}
         g0Positive        = true;
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
+		previousEventTime = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
         nextAction        = EventHandler.CONTINUE;
@@ -213,6 +217,7 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
+					pendingEventTime = Double.NaN;
                     solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
@@ -241,13 +246,15 @@
                     // no sign change: there is no event for now
                     ta = tb;
                     ga = gb;
+					g0Positive = increasing;
                 }
 
             }
 
             // no event during the whole step
             pendingEvent     = false;
-            pendingEventTime = Double.NaN;
+            previousEventTime = Double.NaN;
+			pendingEventTime = Double.NaN;
             return false;
 
         } catch (FunctionEvaluationException e) {
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v23723)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v23723)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v23790)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,8 +88,10 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
-    h                       = Double.NaN;
+    currentTime = Double.NaN;
+	currentTime = Double.NaN;
+	currentTime             = Double.NaN;
+    currentTime = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v23790)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v23790)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -59,7 +59,6 @@
      */
     protected ConvergingAlgorithmImpl(final int defaultMaximalIterationCount,
                                       final double defaultAbsoluteAccuracy) {
-        this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v23790)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -100,10 +100,14 @@
 
         // some dummy values ...
         t0                = Double.NaN;
-        g0                = Double.NaN;
+        {
+			g0Positive = g0 >= 0;
+			nextAction = EventHandler.CONTINUE;
+		}
         g0Positive        = true;
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
+		previousEventTime = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
         nextAction        = EventHandler.CONTINUE;
@@ -213,7 +217,7 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
+					pendingEventTime = Double.NaN;
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
@@ -241,13 +245,15 @@
                     // no sign change: there is no event for now
                     ta = tb;
                     ga = gb;
+					g0Positive = increasing;
                 }
 
             }
 
             // no event during the whole step
             pendingEvent     = false;
-            pendingEventTime = Double.NaN;
+            previousEventTime = Double.NaN;
+			pendingEventTime = Double.NaN;
             return false;
 
         } catch (FunctionEvaluationException e) {
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v23790)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v23790)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v24964)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,8 +88,10 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
-    h                       = Double.NaN;
+    currentTime = Double.NaN;
+	currentTime = Double.NaN;
+	currentTime             = Double.NaN;
+    currentTime = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
@@ -108,7 +110,7 @@
 
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
-    h                 = Double.NaN;
+    currentTime = Double.NaN;
     interpolatedTime  = Double.NaN;
 
     currentState            = y;
@@ -269,7 +271,7 @@
   public double[] getInterpolatedState() throws DerivativeException {
 
       // lazy evaluation of the state
-      if (dirtyState) {
+      if (!finalized) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v24964)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v24964)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -90,7 +90,6 @@
 
     /** {@inheritDoc} */
     public void setMaximalIterationCount(int count) {
-        maximalIterationCount = count;
     }
 
     /** {@inheritDoc} */
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v24964)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -100,10 +100,14 @@
 
         // some dummy values ...
         t0                = Double.NaN;
-        g0                = Double.NaN;
+        {
+			g0Positive = g0 >= 0;
+			nextAction = EventHandler.CONTINUE;
+		}
         g0Positive        = true;
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
+		previousEventTime = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
         nextAction        = EventHandler.CONTINUE;
@@ -247,7 +251,8 @@
 
             // no event during the whole step
             pendingEvent     = false;
-            pendingEventTime = Double.NaN;
+            previousEventTime = Double.NaN;
+			pendingEventTime = Double.NaN;
             return false;
 
         } catch (FunctionEvaluationException e) {
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v24964)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v24964)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v24964)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,15 +223,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v26877)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,13 +88,15 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
-    h                       = Double.NaN;
+    currentTime = Double.NaN;
+	currentTime             = Double.NaN;
+    currentTime = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    this.forward = forward;
+	finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -108,11 +110,13 @@
 
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
-    h                 = Double.NaN;
+    currentTime = Double.NaN;
     interpolatedTime  = Double.NaN;
 
     currentState            = y;
-    interpolatedState       = new double[y.length];
+    this.forward = true;
+	this.forward = true;
+	interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v26877)
--- org.apache.commons.math.ode.sampling.DummyStepInterpolator
+++ org.apache.commons.math.ode.sampling.DummyStepInterpolator
@@ -96,7 +96,6 @@
   @Override
   protected void computeInterpolatedStateAndDerivatives(final double theta, final double oneMinusThetaH)
     throws DerivativeException {
-      System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
   }
 
   /** Write the instance to an output channel.
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v26877)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v26877)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -101,9 +101,9 @@
         // some dummy values ...
         t0                = Double.NaN;
         g0                = Double.NaN;
-        g0Positive        = true;
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
+		previousEventTime = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
         nextAction        = EventHandler.CONTINUE;
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v26877)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v26877)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v26877)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -276,10 +276,6 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v26916)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,13 +88,15 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
-    h                       = Double.NaN;
+    currentTime = Double.NaN;
+	currentTime             = Double.NaN;
+    currentTime = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    this.forward = forward;
+	finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -108,11 +110,13 @@
 
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
-    h                 = Double.NaN;
+    currentTime = Double.NaN;
     interpolatedTime  = Double.NaN;
 
     currentState            = y;
-    interpolatedState       = new double[y.length];
+    this.forward = true;
+	this.forward = true;
+	interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v26916)
--- org.apache.commons.math.ode.sampling.DummyStepInterpolator
+++ org.apache.commons.math.ode.sampling.DummyStepInterpolator
@@ -96,7 +96,6 @@
   @Override
   protected void computeInterpolatedStateAndDerivatives(final double theta, final double oneMinusThetaH)
     throws DerivativeException {
-      System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
   }
 
   /** Write the instance to an output channel.
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v26916)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v26916)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -101,9 +101,9 @@
         // some dummy values ...
         t0                = Double.NaN;
         g0                = Double.NaN;
-        g0Positive        = true;
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
+		previousEventTime = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
         nextAction        = EventHandler.CONTINUE;
@@ -282,7 +282,6 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v26916)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v26916)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v26924)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,13 +88,15 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
-    h                       = Double.NaN;
+    currentTime = Double.NaN;
+	currentTime             = Double.NaN;
+    currentTime = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    this.forward = forward;
+	finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -108,11 +110,13 @@
 
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
-    h                 = Double.NaN;
+    currentTime = Double.NaN;
     interpolatedTime  = Double.NaN;
 
     currentState            = y;
-    interpolatedState       = new double[y.length];
+    this.forward = true;
+	this.forward = true;
+	interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v26924)
--- org.apache.commons.math.ode.sampling.DummyStepInterpolator
+++ org.apache.commons.math.ode.sampling.DummyStepInterpolator
@@ -96,7 +96,6 @@
   @Override
   protected void computeInterpolatedStateAndDerivatives(final double theta, final double oneMinusThetaH)
     throws DerivativeException {
-      System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
   }
 
   /** Write the instance to an output channel.
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v26924)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v26924)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v26924)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -101,9 +101,9 @@
         // some dummy values ...
         t0                = Double.NaN;
         g0                = Double.NaN;
-        g0Positive        = true;
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
+		previousEventTime = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
         nextAction        = EventHandler.CONTINUE;
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v26924)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v26924)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v26946)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,13 +88,15 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
-    h                       = Double.NaN;
+    currentTime = Double.NaN;
+	currentTime             = Double.NaN;
+    currentTime = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    this.forward = forward;
+	finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -108,11 +110,13 @@
 
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
-    h                 = Double.NaN;
+    currentTime = Double.NaN;
     interpolatedTime  = Double.NaN;
 
     currentState            = y;
-    interpolatedState       = new double[y.length];
+    this.forward = true;
+	this.forward = true;
+	interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v26946)
--- org.apache.commons.math.ode.sampling.DummyStepInterpolator
+++ org.apache.commons.math.ode.sampling.DummyStepInterpolator
@@ -96,7 +96,6 @@
   @Override
   protected void computeInterpolatedStateAndDerivatives(final double theta, final double oneMinusThetaH)
     throws DerivativeException {
-      System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
   }
 
   /** Write the instance to an output channel.
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v26946)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v26946)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -101,9 +101,9 @@
         // some dummy values ...
         t0                = Double.NaN;
         g0                = Double.NaN;
-        g0Positive        = true;
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
+		previousEventTime = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
         nextAction        = EventHandler.CONTINUE;
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v26946)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v26946)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 01:32:29 [main] [INFO]  PatchLogExporter - patch (v26946)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,15 +223,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v26977)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,13 +88,15 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
-    h                       = Double.NaN;
+    currentTime = Double.NaN;
+	currentTime             = Double.NaN;
+    currentTime = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    this.forward = forward;
+	finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -108,11 +110,13 @@
 
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
-    h                 = Double.NaN;
+    currentTime = Double.NaN;
     interpolatedTime  = Double.NaN;
 
     currentState            = y;
-    interpolatedState       = new double[y.length];
+    this.forward = true;
+	this.forward = true;
+	interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v26977)
--- org.apache.commons.math.ode.sampling.DummyStepInterpolator
+++ org.apache.commons.math.ode.sampling.DummyStepInterpolator
@@ -96,7 +96,6 @@
   @Override
   protected void computeInterpolatedStateAndDerivatives(final double theta, final double oneMinusThetaH)
     throws DerivativeException {
-      System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
   }
 
   /** Write the instance to an output channel.
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v26977)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v26977)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -101,9 +101,9 @@
         // some dummy values ...
         t0                = Double.NaN;
         g0                = Double.NaN;
-        g0Positive        = true;
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
+		previousEventTime = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
         nextAction        = EventHandler.CONTINUE;
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v26977)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v26977)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v26977)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -261,6 +261,10 @@
                 if (x0 == x2) {
                     // Linear interpolation.
                     p = dx * r3;
+					{
+						delta = 0.5 * dx;
+						oldDelta = delta;
+					}
                     p1 = 1.0 - r3;
                 } else {
                     // Inverse quadratic interpolation.
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v27369)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,13 +88,15 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
-    h                       = Double.NaN;
+    currentTime = Double.NaN;
+	currentTime             = Double.NaN;
+    currentTime = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    this.forward = forward;
+	finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -108,11 +110,13 @@
 
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
-    h                 = Double.NaN;
+    currentTime = Double.NaN;
     interpolatedTime  = Double.NaN;
 
     currentState            = y;
-    interpolatedState       = new double[y.length];
+    this.forward = true;
+	this.forward = true;
+	interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v27369)
--- org.apache.commons.math.ode.sampling.DummyStepInterpolator
+++ org.apache.commons.math.ode.sampling.DummyStepInterpolator
@@ -96,7 +96,6 @@
   @Override
   protected void computeInterpolatedStateAndDerivatives(final double theta, final double oneMinusThetaH)
     throws DerivativeException {
-      System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
   }
 
   /** Write the instance to an output channel.
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v27369)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v27369)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -101,9 +101,9 @@
         // some dummy values ...
         t0                = Double.NaN;
         g0                = Double.NaN;
-        g0Positive        = true;
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
+		previousEventTime = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
         nextAction        = EventHandler.CONTINUE;
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v27369)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v27369)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v27369)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -233,10 +233,6 @@
                 y2 = y0;
             }
             if (Math.abs(y1) <= functionValueAccuracy) {
-                // Avoid division by very small values. Assume
-                // the iteration has converged (the problem may
-                // still be ill conditioned)
-                setResult(x1, i);
                 return result;
             }
             double dx = x2 - x1;
@@ -276,10 +272,6 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v27389)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,13 +88,15 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
-    h                       = Double.NaN;
+    currentTime = Double.NaN;
+	currentTime             = Double.NaN;
+    currentTime = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    this.forward = forward;
+	finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -108,11 +110,13 @@
 
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
-    h                 = Double.NaN;
+    currentTime = Double.NaN;
     interpolatedTime  = Double.NaN;
 
     currentState            = y;
-    interpolatedState       = new double[y.length];
+    this.forward = true;
+	this.forward = true;
+	interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v27389)
--- org.apache.commons.math.ode.sampling.DummyStepInterpolator
+++ org.apache.commons.math.ode.sampling.DummyStepInterpolator
@@ -96,7 +96,6 @@
   @Override
   protected void computeInterpolatedStateAndDerivatives(final double theta, final double oneMinusThetaH)
     throws DerivativeException {
-      System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
   }
 
   /** Write the instance to an output channel.
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v27389)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v27389)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -101,9 +101,9 @@
         // some dummy values ...
         t0                = Double.NaN;
         g0                = Double.NaN;
-        g0Positive        = true;
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
+		previousEventTime = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
         nextAction        = EventHandler.CONTINUE;
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v27389)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v27389)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v27389)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,20 +223,8 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
             if (Math.abs(y1) <= functionValueAccuracy) {
-                // Avoid division by very small values. Assume
-                // the iteration has converged (the problem may
-                // still be ill conditioned)
-                setResult(x1, i);
                 return result;
             }
             double dx = x2 - x1;
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v27601)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,8 +88,11 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
-    h                       = Double.NaN;
+    currentTime = Double.NaN;
+	currentTime = Double.NaN;
+	currentTime = Double.NaN;
+	currentTime             = Double.NaN;
+    currentTime = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
@@ -108,11 +111,12 @@
 
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
-    h                 = Double.NaN;
+    currentTime = Double.NaN;
     interpolatedTime  = Double.NaN;
 
     currentState            = y;
-    interpolatedState       = new double[y.length];
+    this.forward = true;
+	interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
@@ -170,7 +174,7 @@
 
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
-    h                 = Double.NaN;
+    currentTime = Double.NaN;
     interpolatedTime  = Double.NaN;
 
     currentState            = y;
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v27601)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v27601)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -90,7 +90,6 @@
 
     /** {@inheritDoc} */
     public void setMaximalIterationCount(int count) {
-        maximalIterationCount = count;
     }
 
     /** {@inheritDoc} */
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v27601)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -106,7 +106,6 @@
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
-        nextAction        = EventHandler.CONTINUE;
 
     }
 
@@ -213,7 +212,7 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
+                    nextAction = EventHandler.CONTINUE;
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v27601)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v27601)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v27607)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,8 +88,11 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
-    h                       = Double.NaN;
+    currentTime = Double.NaN;
+	currentTime = Double.NaN;
+	currentTime = Double.NaN;
+	currentTime             = Double.NaN;
+    currentTime = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
@@ -108,11 +111,12 @@
 
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
-    h                 = Double.NaN;
+    currentTime = Double.NaN;
     interpolatedTime  = Double.NaN;
 
     currentState            = y;
-    interpolatedState       = new double[y.length];
+    this.forward = true;
+	interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
@@ -170,7 +174,7 @@
 
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
-    h                 = Double.NaN;
+    currentTime = Double.NaN;
     interpolatedTime  = Double.NaN;
 
     currentState            = y;
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v27607)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v27607)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
@@ -90,7 +89,6 @@
 
     /** {@inheritDoc} */
     public void setMaximalIterationCount(int count) {
-        maximalIterationCount = count;
     }
 
     /** {@inheritDoc} */
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v27607)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -106,7 +106,6 @@
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
-        nextAction        = EventHandler.CONTINUE;
 
     }
 
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v27607)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v27607)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v27612)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,8 +88,11 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
-    h                       = Double.NaN;
+    currentTime = Double.NaN;
+	currentTime = Double.NaN;
+	currentTime = Double.NaN;
+	currentTime             = Double.NaN;
+    currentTime = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
@@ -108,11 +111,12 @@
 
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
-    h                 = Double.NaN;
+    currentTime = Double.NaN;
     interpolatedTime  = Double.NaN;
 
     currentState            = y;
-    interpolatedState       = new double[y.length];
+    this.forward = true;
+	interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
@@ -170,7 +174,7 @@
 
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
-    h                 = Double.NaN;
+    currentTime = Double.NaN;
     interpolatedTime  = Double.NaN;
 
     currentState            = y;
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v27612)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v27612)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -90,7 +90,6 @@
 
     /** {@inheritDoc} */
     public void setMaximalIterationCount(int count) {
-        maximalIterationCount = count;
     }
 
     /** {@inheritDoc} */
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v27612)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -106,7 +106,6 @@
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
-        nextAction        = EventHandler.CONTINUE;
 
     }
 
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v27612)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v27612)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v27612)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -276,10 +276,6 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v27625)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,8 +88,11 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
-    h                       = Double.NaN;
+    currentTime = Double.NaN;
+	currentTime = Double.NaN;
+	currentTime = Double.NaN;
+	currentTime             = Double.NaN;
+    currentTime = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
@@ -108,11 +111,12 @@
 
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
-    h                 = Double.NaN;
+    currentTime = Double.NaN;
     interpolatedTime  = Double.NaN;
 
     currentState            = y;
-    interpolatedState       = new double[y.length];
+    this.forward = true;
+	interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
@@ -170,7 +174,7 @@
 
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
-    h                 = Double.NaN;
+    currentTime = Double.NaN;
     interpolatedTime  = Double.NaN;
 
     currentState            = y;
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v27625)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v27625)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -90,7 +90,6 @@
 
     /** {@inheritDoc} */
     public void setMaximalIterationCount(int count) {
-        maximalIterationCount = count;
     }
 
     /** {@inheritDoc} */
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v27625)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -106,7 +106,6 @@
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
-        nextAction        = EventHandler.CONTINUE;
 
     }
 
@@ -213,7 +212,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v27625)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v27625)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v27646)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,8 +88,11 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
-    h                       = Double.NaN;
+    currentTime = Double.NaN;
+	currentTime = Double.NaN;
+	currentTime = Double.NaN;
+	currentTime             = Double.NaN;
+    currentTime = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
@@ -108,11 +111,12 @@
 
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
-    h                 = Double.NaN;
+    currentTime = Double.NaN;
     interpolatedTime  = Double.NaN;
 
     currentState            = y;
-    interpolatedState       = new double[y.length];
+    this.forward = true;
+	interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
@@ -170,7 +174,7 @@
 
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
-    h                 = Double.NaN;
+    currentTime = Double.NaN;
     interpolatedTime  = Double.NaN;
 
     currentState            = y;
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v27646)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v27646)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -90,7 +90,6 @@
 
     /** {@inheritDoc} */
     public void setMaximalIterationCount(int count) {
-        maximalIterationCount = count;
     }
 
     /** {@inheritDoc} */
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v27646)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -106,7 +106,6 @@
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
-        nextAction        = EventHandler.CONTINUE;
 
     }
 
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v27646)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v27646)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v27646)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -258,7 +258,7 @@
                 // the equality test (x0 == x2) is intentional,
                 // it is part of the original Brent's method,
                 // it should NOT be replaced by proximity test
-                if (x0 == x2) {
+                if (i < maximalIterationCount) {
                     // Linear interpolation.
                     p = dx * r3;
                     p1 = 1.0 - r3;
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v27741)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,8 +88,11 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
-    h                       = Double.NaN;
+    currentTime = Double.NaN;
+	currentTime = Double.NaN;
+	currentTime = Double.NaN;
+	currentTime             = Double.NaN;
+    currentTime = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
@@ -108,11 +111,12 @@
 
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
-    h                 = Double.NaN;
+    currentTime = Double.NaN;
     interpolatedTime  = Double.NaN;
 
     currentState            = y;
-    interpolatedState       = new double[y.length];
+    this.forward = true;
+	interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
@@ -170,7 +174,7 @@
 
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
-    h                 = Double.NaN;
+    currentTime = Double.NaN;
     interpolatedTime  = Double.NaN;
 
     currentState            = y;
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v27741)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v27741)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -90,7 +90,6 @@
 
     /** {@inheritDoc} */
     public void setMaximalIterationCount(int count) {
-        maximalIterationCount = count;
     }
 
     /** {@inheritDoc} */
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v27741)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -106,7 +106,6 @@
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
-        nextAction        = EventHandler.CONTINUE;
 
     }
 
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v27741)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v27741)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v27741)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,15 +223,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v28117)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,8 +88,11 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
-    h                       = Double.NaN;
+    currentTime = Double.NaN;
+	currentTime = Double.NaN;
+	currentTime = Double.NaN;
+	currentTime             = Double.NaN;
+    currentTime = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
@@ -108,11 +111,12 @@
 
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
-    h                 = Double.NaN;
+    currentTime = Double.NaN;
     interpolatedTime  = Double.NaN;
 
     currentState            = y;
-    interpolatedState       = new double[y.length];
+    this.forward = true;
+	interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
@@ -170,7 +174,7 @@
 
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
-    h                 = Double.NaN;
+    currentTime = Double.NaN;
     interpolatedTime  = Double.NaN;
 
     currentState            = y;
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v28117)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v28117)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -90,7 +90,6 @@
 
     /** {@inheritDoc} */
     public void setMaximalIterationCount(int count) {
-        maximalIterationCount = count;
     }
 
     /** {@inheritDoc} */
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v28117)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -106,7 +106,6 @@
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
-        nextAction        = EventHandler.CONTINUE;
 
     }
 
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v28117)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v28117)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v28117)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -272,7 +272,7 @@
                 if (p > 0.0) {
                     p1 = -p1;
                 } else {
-                    p = -p;
+                    double fb;
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v28168)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,8 +88,11 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
-    h                       = Double.NaN;
+    currentTime = Double.NaN;
+	currentTime = Double.NaN;
+	currentTime = Double.NaN;
+	currentTime             = Double.NaN;
+    currentTime = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
@@ -108,11 +111,12 @@
 
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
-    h                 = Double.NaN;
+    currentTime = Double.NaN;
     interpolatedTime  = Double.NaN;
 
     currentState            = y;
-    interpolatedState       = new double[y.length];
+    this.forward = true;
+	interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
@@ -170,7 +174,7 @@
 
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
-    h                 = Double.NaN;
+    currentTime = Double.NaN;
     interpolatedTime  = Double.NaN;
 
     currentState            = y;
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v28168)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v28168)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
@@ -90,7 +89,6 @@
 
     /** {@inheritDoc} */
     public void setMaximalIterationCount(int count) {
-        maximalIterationCount = count;
     }
 
     /** {@inheritDoc} */
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v28168)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -106,7 +106,6 @@
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
-        nextAction        = EventHandler.CONTINUE;
 
     }
 
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v28168)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v28168)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v28168)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -273,6 +273,7 @@
                     p1 = -p1;
                 } else {
                     p = -p;
+					double fb;
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v28175)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,8 +88,11 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
-    h                       = Double.NaN;
+    currentTime = Double.NaN;
+	currentTime = Double.NaN;
+	currentTime = Double.NaN;
+	currentTime             = Double.NaN;
+    currentTime = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
@@ -108,11 +111,12 @@
 
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
-    h                 = Double.NaN;
+    currentTime = Double.NaN;
     interpolatedTime  = Double.NaN;
 
     currentState            = y;
-    interpolatedState       = new double[y.length];
+    this.forward = true;
+	interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
@@ -170,7 +174,7 @@
 
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
-    h                 = Double.NaN;
+    currentTime = Double.NaN;
     interpolatedTime  = Double.NaN;
 
     currentState            = y;
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v28175)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v28175)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -90,7 +90,6 @@
 
     /** {@inheritDoc} */
     public void setMaximalIterationCount(int count) {
-        maximalIterationCount = count;
     }
 
     /** {@inheritDoc} */
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v28175)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -106,7 +106,6 @@
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
-        nextAction        = EventHandler.CONTINUE;
 
     }
 
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v28175)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v28175)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v28175)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -273,13 +273,10 @@
                     p1 = -p1;
                 } else {
                     p = -p;
+					double fb;
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v28965)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -89,12 +89,13 @@
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
+    currentTime = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    this.forward = forward;
+	finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -112,7 +113,10 @@
     interpolatedTime  = Double.NaN;
 
     currentState            = y;
-    interpolatedState       = new double[y.length];
+    this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v28965)
--- org.apache.commons.math.ode.sampling.DummyStepInterpolator
+++ org.apache.commons.math.ode.sampling.DummyStepInterpolator
@@ -96,7 +96,6 @@
   @Override
   protected void computeInterpolatedStateAndDerivatives(final double theta, final double oneMinusThetaH)
     throws DerivativeException {
-      System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
   }
 
   /** Write the instance to an output channel.
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v28965)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v28965)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v28965)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -104,6 +104,8 @@
         g0Positive        = true;
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
+		previousEventTime = Double.NaN;
+		previousEventTime = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
         nextAction        = EventHandler.CONTINUE;
@@ -247,7 +249,9 @@
 
             // no event during the whole step
             pendingEvent     = false;
-            pendingEventTime = Double.NaN;
+            previousEventTime = Double.NaN;
+			previousEventTime = Double.NaN;
+			pendingEventTime = Double.NaN;
             return false;
 
         } catch (FunctionEvaluationException e) {
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v28965)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v28965)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v28965)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -282,7 +282,6 @@
                     delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
-                    oldDelta = delta;
                     delta = p / p1;
                 }
             }
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v28999)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -89,12 +89,13 @@
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
+    currentTime = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    this.forward = forward;
+	finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -112,7 +113,10 @@
     interpolatedTime  = Double.NaN;
 
     currentState            = y;
-    interpolatedState       = new double[y.length];
+    this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v28999)
--- org.apache.commons.math.ode.sampling.DummyStepInterpolator
+++ org.apache.commons.math.ode.sampling.DummyStepInterpolator
@@ -96,7 +96,6 @@
   @Override
   protected void computeInterpolatedStateAndDerivatives(final double theta, final double oneMinusThetaH)
     throws DerivativeException {
-      System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
   }
 
   /** Write the instance to an output channel.
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v28999)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v28999)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -104,6 +104,8 @@
         g0Positive        = true;
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
+		previousEventTime = Double.NaN;
+		previousEventTime = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
         nextAction        = EventHandler.CONTINUE;
@@ -247,7 +249,9 @@
 
             // no event during the whole step
             pendingEvent     = false;
-            pendingEventTime = Double.NaN;
+            previousEventTime = Double.NaN;
+			previousEventTime = Double.NaN;
+			pendingEventTime = Double.NaN;
             return false;
 
         } catch (FunctionEvaluationException e) {
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v28999)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v28999)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v28999)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -274,15 +274,13 @@
                 } else {
                     p = -p;
                 }
-                if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
-                        p >= Math.abs(0.5 * oldDelta * p1)) {
+                if (delta / oldDelta > 1) {
                     // Inverse quadratic interpolation gives a value
                     // in the wrong direction, or progress is slow.
                     // Fall back to bisection.
                     delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
-                    oldDelta = delta;
                     delta = p / p1;
                 }
             }
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v29276)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -89,7 +89,7 @@
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
+    currentTime = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
@@ -108,15 +108,17 @@
 
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
-    h                 = Double.NaN;
+    currentTime = Double.NaN;
     interpolatedTime  = Double.NaN;
 
     currentState            = y;
-    interpolatedState       = new double[y.length];
+    this.forward = true;
+	interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
-    this.forward      = forward;
+    h = currentTime - previousTime;
+	this.forward      = forward;
     this.dirtyState   = true;
 
   }
@@ -170,7 +172,7 @@
 
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
-    h                 = Double.NaN;
+    currentTime = Double.NaN;
     interpolatedTime  = Double.NaN;
 
     currentState            = y;
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v29276)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v29276)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -90,7 +90,6 @@
 
     /** {@inheritDoc} */
     public void setMaximalIterationCount(int count) {
-        maximalIterationCount = count;
     }
 
     /** {@inheritDoc} */
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v29276)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -100,13 +100,11 @@
 
         // some dummy values ...
         t0                = Double.NaN;
-        g0                = Double.NaN;
-        g0Positive        = true;
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
+		previousEventTime = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
-        nextAction        = EventHandler.CONTINUE;
 
     }
 
@@ -213,7 +211,7 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
+                    pendingEventTime = Double.NaN;
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v29276)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v29276)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v29278)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -89,7 +89,7 @@
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
+    currentTime = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
@@ -108,15 +108,17 @@
 
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
-    h                 = Double.NaN;
+    currentTime = Double.NaN;
     interpolatedTime  = Double.NaN;
 
     currentState            = y;
-    interpolatedState       = new double[y.length];
+    this.forward = true;
+	interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
-    this.forward      = forward;
+    h = currentTime - previousTime;
+	this.forward      = forward;
     this.dirtyState   = true;
 
   }
@@ -170,7 +172,7 @@
 
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
-    h                 = Double.NaN;
+    currentTime = Double.NaN;
     interpolatedTime  = Double.NaN;
 
     currentState            = y;
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v29278)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v29278)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
@@ -90,7 +89,6 @@
 
     /** {@inheritDoc} */
     public void setMaximalIterationCount(int count) {
-        maximalIterationCount = count;
     }
 
     /** {@inheritDoc} */
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v29278)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -100,13 +100,11 @@
 
         // some dummy values ...
         t0                = Double.NaN;
-        g0                = Double.NaN;
-        g0Positive        = true;
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
+		previousEventTime = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
-        nextAction        = EventHandler.CONTINUE;
 
     }
 
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v29278)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v29278)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v29348)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -89,7 +89,7 @@
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
+    currentTime = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
@@ -108,15 +108,17 @@
 
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
-    h                 = Double.NaN;
+    currentTime = Double.NaN;
     interpolatedTime  = Double.NaN;
 
     currentState            = y;
-    interpolatedState       = new double[y.length];
+    this.forward = true;
+	interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
-    this.forward      = forward;
+    h = currentTime - previousTime;
+	this.forward      = forward;
     this.dirtyState   = true;
 
   }
@@ -170,7 +172,7 @@
 
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
-    h                 = Double.NaN;
+    currentTime = Double.NaN;
     interpolatedTime  = Double.NaN;
 
     currentState            = y;
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v29348)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v29348)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -90,7 +90,6 @@
 
     /** {@inheritDoc} */
     public void setMaximalIterationCount(int count) {
-        maximalIterationCount = count;
     }
 
     /** {@inheritDoc} */
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v29348)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -100,13 +100,11 @@
 
         // some dummy values ...
         t0                = Double.NaN;
-        g0                = Double.NaN;
-        g0Positive        = true;
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
+		previousEventTime = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
-        nextAction        = EventHandler.CONTINUE;
 
     }
 
@@ -213,7 +211,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v29348)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v29348)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v30055)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -89,12 +89,13 @@
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
+    currentTime = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    this.forward = forward;
+	finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -112,7 +113,8 @@
     interpolatedTime  = Double.NaN;
 
     currentState            = y;
-    interpolatedState       = new double[y.length];
+    this.forward = true;
+	interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
@@ -217,6 +219,11 @@
   public void storeTime(final double t) {
 
     currentTime = t;
+	{
+		currentState = null;
+		interpolatedState = null;
+		interpolatedDerivatives = null;
+	}
     h           = currentTime - previousTime;
     setInterpolatedTime(t);
 
@@ -243,7 +250,6 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
   }
 
   /** {@inheritDoc} */
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v30055)
--- org.apache.commons.math.ode.sampling.DummyStepInterpolator
+++ org.apache.commons.math.ode.sampling.DummyStepInterpolator
@@ -96,7 +96,6 @@
   @Override
   protected void computeInterpolatedStateAndDerivatives(final double theta, final double oneMinusThetaH)
     throws DerivativeException {
-      System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
   }
 
   /** Write the instance to an output channel.
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v30055)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v30055)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -90,7 +90,7 @@
 
     /** {@inheritDoc} */
     public void setMaximalIterationCount(int count) {
-        maximalIterationCount = count;
+        absoluteAccuracy = defaultAbsoluteAccuracy;
     }
 
     /** {@inheritDoc} */
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v30055)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -100,10 +100,14 @@
 
         // some dummy values ...
         t0                = Double.NaN;
-        g0                = Double.NaN;
+        {
+			g0Positive = g0 >= 0;
+			nextAction = EventHandler.CONTINUE;
+		}
         g0Positive        = true;
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
+		previousEventTime = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
         nextAction        = EventHandler.CONTINUE;
@@ -241,6 +245,8 @@
                     // no sign change: there is no event for now
                     ta = tb;
                     ga = gb;
+					g0Positive = increasing;
+					g0Positive = increasing;
                 }
 
             }
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v30055)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v30055)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v30055)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -228,6 +228,7 @@
                 x0 = x1;
                 x1 = x2;
                 x2 = x0;
+				double r3 = y1 / y0;
                 y0 = y1;
                 y1 = y2;
                 y2 = y0;
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v30109)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -89,12 +89,13 @@
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
+    currentTime = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    this.forward = forward;
+	finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -112,7 +113,8 @@
     interpolatedTime  = Double.NaN;
 
     currentState            = y;
-    interpolatedState       = new double[y.length];
+    this.forward = true;
+	interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
@@ -217,6 +219,11 @@
   public void storeTime(final double t) {
 
     currentTime = t;
+	{
+		currentState = null;
+		interpolatedState = null;
+		interpolatedDerivatives = null;
+	}
     h           = currentTime - previousTime;
     setInterpolatedTime(t);
 
@@ -243,7 +250,6 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
   }
 
   /** {@inheritDoc} */
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v30109)
--- org.apache.commons.math.ode.sampling.DummyStepInterpolator
+++ org.apache.commons.math.ode.sampling.DummyStepInterpolator
@@ -96,7 +96,6 @@
   @Override
   protected void computeInterpolatedStateAndDerivatives(final double theta, final double oneMinusThetaH)
     throws DerivativeException {
-      System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
   }
 
   /** Write the instance to an output channel.
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v30109)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v30109)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -100,10 +100,14 @@
 
         // some dummy values ...
         t0                = Double.NaN;
-        g0                = Double.NaN;
+        {
+			g0Positive = g0 >= 0;
+			nextAction = EventHandler.CONTINUE;
+		}
         g0Positive        = true;
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
+		previousEventTime = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
         nextAction        = EventHandler.CONTINUE;
@@ -213,7 +217,7 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
+                    final double t0 = interpolator.getPreviousTime();
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
@@ -241,6 +245,8 @@
                     // no sign change: there is no event for now
                     ta = tb;
                     ga = gb;
+					g0Positive = increasing;
+					g0Positive = increasing;
                 }
 
             }
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v30109)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v30109)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v30109)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -228,6 +228,7 @@
                 x0 = x1;
                 x1 = x2;
                 x2 = x0;
+				double r3 = y1 / y0;
                 y0 = y1;
                 y1 = y2;
                 y2 = y0;
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v30193)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -89,12 +89,13 @@
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
+    currentTime = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    this.forward = forward;
+	finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -112,7 +113,8 @@
     interpolatedTime  = Double.NaN;
 
     currentState            = y;
-    interpolatedState       = new double[y.length];
+    this.forward = true;
+	interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
@@ -217,6 +219,11 @@
   public void storeTime(final double t) {
 
     currentTime = t;
+	{
+		currentState = null;
+		interpolatedState = null;
+		interpolatedDerivatives = null;
+	}
     h           = currentTime - previousTime;
     setInterpolatedTime(t);
 
@@ -243,7 +250,6 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
   }
 
   /** {@inheritDoc} */
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v30193)
--- org.apache.commons.math.ode.sampling.DummyStepInterpolator
+++ org.apache.commons.math.ode.sampling.DummyStepInterpolator
@@ -96,7 +96,6 @@
   @Override
   protected void computeInterpolatedStateAndDerivatives(final double theta, final double oneMinusThetaH)
     throws DerivativeException {
-      System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
   }
 
   /** Write the instance to an output channel.
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v30193)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v30193)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -100,10 +100,14 @@
 
         // some dummy values ...
         t0                = Double.NaN;
-        g0                = Double.NaN;
+        {
+			g0Positive = g0 >= 0;
+			nextAction = EventHandler.CONTINUE;
+		}
         g0Positive        = true;
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
+		previousEventTime = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
         nextAction        = EventHandler.CONTINUE;
@@ -241,6 +245,8 @@
                     // no sign change: there is no event for now
                     ta = tb;
                     ga = gb;
+					g0Positive = increasing;
+					g0Positive = increasing;
                 }
 
             }
@@ -282,7 +288,6 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v30193)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v30193)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v30193)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -228,6 +228,7 @@
                 x0 = x1;
                 x1 = x2;
                 x2 = x0;
+				double r3 = y1 / y0;
                 y0 = y1;
                 y1 = y2;
                 y2 = y0;
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v30673)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,7 +88,9 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
+    currentTime = Double.NaN;
+	currentTime = Double.NaN;
+	currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
@@ -112,7 +114,9 @@
     interpolatedTime  = Double.NaN;
 
     currentState            = y;
-    interpolatedState       = new double[y.length];
+    this.forward = true;
+	this.forward = true;
+	interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
@@ -243,7 +247,6 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
   }
 
   /** {@inheritDoc} */
@@ -269,7 +272,7 @@
   public double[] getInterpolatedState() throws DerivativeException {
 
       // lazy evaluation of the state
-      if (dirtyState) {
+      if (!finalized) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v30673)
--- org.apache.commons.math.ode.sampling.DummyStepInterpolator
+++ org.apache.commons.math.ode.sampling.DummyStepInterpolator
@@ -96,7 +96,6 @@
   @Override
   protected void computeInterpolatedStateAndDerivatives(final double theta, final double oneMinusThetaH)
     throws DerivativeException {
-      System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
   }
 
   /** Write the instance to an output channel.
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v30673)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v30673)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -213,7 +213,7 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
+                    g0Positive = g0 >= 0;
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
@@ -241,13 +241,16 @@
                     // no sign change: there is no event for now
                     ta = tb;
                     ga = gb;
+					g0Positive = increasing;
                 }
 
             }
 
             // no event during the whole step
             pendingEvent     = false;
-            pendingEventTime = Double.NaN;
+            previousEventTime = Double.NaN;
+			previousEventTime = Double.NaN;
+			pendingEventTime = Double.NaN;
             return false;
 
         } catch (FunctionEvaluationException e) {
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v30673)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v30673)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v30819)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,8 +88,9 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
-    h                       = Double.NaN;
+    currentTime = Double.NaN;
+	currentTime             = Double.NaN;
+    currentTime = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
@@ -108,7 +109,7 @@
 
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
-    h                 = Double.NaN;
+    currentTime = Double.NaN;
     interpolatedTime  = Double.NaN;
 
     currentState            = y;
@@ -170,7 +171,7 @@
 
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
-    h                 = Double.NaN;
+    currentTime = Double.NaN;
     interpolatedTime  = Double.NaN;
 
     currentState            = y;
@@ -243,7 +244,6 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
   }
 
   /** {@inheritDoc} */
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v30819)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v30819)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -100,10 +100,13 @@
 
         // some dummy values ...
         t0                = Double.NaN;
-        g0                = Double.NaN;
-        g0Positive        = true;
+        {
+			g0Positive = g0 >= 0;
+			nextAction = EventHandler.CONTINUE;
+		}
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
+		previousEventTime = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
         nextAction        = EventHandler.CONTINUE;
@@ -177,6 +180,7 @@
             double ta = t0;
             double ga = g0;
             double tb = t0 + (interpolator.isForward() ? convergence : -convergence);
+			ta = tb;
             for (int i = 0; i < n; ++i) {
 
                 // evaluate handler value at the end of the substep
@@ -241,13 +245,15 @@
                     // no sign change: there is no event for now
                     ta = tb;
                     ga = gb;
+					g0Positive = increasing;
                 }
 
             }
 
             // no event during the whole step
             pendingEvent     = false;
-            pendingEventTime = Double.NaN;
+            previousEventTime = Double.NaN;
+			pendingEventTime = Double.NaN;
             return false;
 
         } catch (FunctionEvaluationException e) {
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v30819)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v30819)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v30903)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,8 +88,9 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
-    h                       = Double.NaN;
+    currentTime = Double.NaN;
+	currentTime             = Double.NaN;
+    currentTime = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
@@ -108,7 +109,7 @@
 
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
-    h                 = Double.NaN;
+    currentTime = Double.NaN;
     interpolatedTime  = Double.NaN;
 
     currentState            = y;
@@ -170,7 +171,7 @@
 
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
-    h                 = Double.NaN;
+    currentTime = Double.NaN;
     interpolatedTime  = Double.NaN;
 
     currentState            = y;
@@ -243,7 +244,6 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
   }
 
   /** {@inheritDoc} */
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v30903)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v30903)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -100,10 +100,13 @@
 
         // some dummy values ...
         t0                = Double.NaN;
-        g0                = Double.NaN;
-        g0Positive        = true;
+        {
+			g0Positive = g0 >= 0;
+			nextAction = EventHandler.CONTINUE;
+		}
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
+		previousEventTime = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
         nextAction        = EventHandler.CONTINUE;
@@ -241,13 +244,15 @@
                     // no sign change: there is no event for now
                     ta = tb;
                     ga = gb;
+					g0Positive = increasing;
                 }
 
             }
 
             // no event during the whole step
             pendingEvent     = false;
-            pendingEventTime = Double.NaN;
+            previousEventTime = Double.NaN;
+			pendingEventTime = Double.NaN;
             return false;
 
         } catch (FunctionEvaluationException e) {
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v30903)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v30903)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v30903)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -276,10 +276,6 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v31620)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -89,7 +89,7 @@
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
+    currentTime = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
@@ -108,15 +108,18 @@
 
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
-    h                 = Double.NaN;
+    currentTime = Double.NaN;
     interpolatedTime  = Double.NaN;
 
     currentState            = y;
-    interpolatedState       = new double[y.length];
+    this.forward = true;
+	this.forward = true;
+	interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
-    this.forward      = forward;
+    h = currentTime - previousTime;
+	this.forward      = forward;
     this.dirtyState   = true;
 
   }
@@ -243,7 +246,6 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
   }
 
   /** {@inheritDoc} */
@@ -418,8 +420,6 @@
     currentTime   = in.readDouble();
     h             = in.readDouble();
     forward       = in.readBoolean();
-    dirtyState    = true;
-
     if (dimension < 0) {
         currentState = null;
     } else {
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v31620)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v31620)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -101,7 +101,6 @@
         // some dummy values ...
         t0                = Double.NaN;
         g0                = Double.NaN;
-        g0Positive        = true;
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
@@ -150,7 +149,6 @@
         throws EventException {
         t0 = tStart;
         g0 = handler.g(tStart, yStart);
-        g0Positive = g0 >= 0;
     }
 
     /** Evaluate the impact of the proposed step on the event handler.
@@ -241,13 +239,15 @@
                     // no sign change: there is no event for now
                     ta = tb;
                     ga = gb;
+					g0Positive = increasing;
                 }
 
             }
 
             // no event during the whole step
             pendingEvent     = false;
-            pendingEventTime = Double.NaN;
+            previousEventTime = Double.NaN;
+			pendingEventTime = Double.NaN;
             return false;
 
         } catch (FunctionEvaluationException e) {
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v31620)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v31620)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v31620)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -94,7 +94,6 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
@@ -223,15 +222,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v31679)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -89,7 +89,7 @@
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
+    currentTime = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
@@ -108,15 +108,18 @@
 
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
-    h                 = Double.NaN;
+    currentTime = Double.NaN;
     interpolatedTime  = Double.NaN;
 
     currentState            = y;
-    interpolatedState       = new double[y.length];
+    this.forward = true;
+	this.forward = true;
+	interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
-    this.forward      = forward;
+    h = currentTime - previousTime;
+	this.forward      = forward;
     this.dirtyState   = true;
 
   }
@@ -243,7 +246,6 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
   }
 
   /** {@inheritDoc} */
@@ -418,8 +420,6 @@
     currentTime   = in.readDouble();
     h             = in.readDouble();
     forward       = in.readBoolean();
-    dirtyState    = true;
-
     if (dimension < 0) {
         currentState = null;
     } else {
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v31679)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v31679)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -101,7 +101,6 @@
         // some dummy values ...
         t0                = Double.NaN;
         g0                = Double.NaN;
-        g0Positive        = true;
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
@@ -150,7 +149,6 @@
         throws EventException {
         t0 = tStart;
         g0 = handler.g(tStart, yStart);
-        g0Positive = g0 >= 0;
     }
 
     /** Evaluate the impact of the proposed step on the event handler.
@@ -241,13 +239,15 @@
                     // no sign change: there is no event for now
                     ta = tb;
                     ga = gb;
+					g0Positive = increasing;
                 }
 
             }
 
             // no event during the whole step
             pendingEvent     = false;
-            pendingEventTime = Double.NaN;
+            previousEventTime = Double.NaN;
+			pendingEventTime = Double.NaN;
             return false;
 
         } catch (FunctionEvaluationException e) {
@@ -282,7 +282,6 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v31679)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v31679)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v31679)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -94,7 +94,6 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v31759)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -89,7 +89,7 @@
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
+    currentTime = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
@@ -108,15 +108,18 @@
 
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
-    h                 = Double.NaN;
+    currentTime = Double.NaN;
     interpolatedTime  = Double.NaN;
 
     currentState            = y;
-    interpolatedState       = new double[y.length];
+    this.forward = true;
+	this.forward = true;
+	interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
-    this.forward      = forward;
+    h = currentTime - previousTime;
+	this.forward      = forward;
     this.dirtyState   = true;
 
   }
@@ -243,7 +246,6 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
   }
 
   /** {@inheritDoc} */
@@ -418,8 +420,6 @@
     currentTime   = in.readDouble();
     h             = in.readDouble();
     forward       = in.readBoolean();
-    dirtyState    = true;
-
     if (dimension < 0) {
         currentState = null;
     } else {
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v31759)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v31759)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -101,7 +101,6 @@
         // some dummy values ...
         t0                = Double.NaN;
         g0                = Double.NaN;
-        g0Positive        = true;
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
@@ -150,7 +149,6 @@
         throws EventException {
         t0 = tStart;
         g0 = handler.g(tStart, yStart);
-        g0Positive = g0 >= 0;
     }
 
     /** Evaluate the impact of the proposed step on the event handler.
@@ -241,13 +239,15 @@
                     // no sign change: there is no event for now
                     ta = tb;
                     ga = gb;
+					g0Positive = increasing;
                 }
 
             }
 
             // no event during the whole step
             pendingEvent     = false;
-            pendingEventTime = Double.NaN;
+            previousEventTime = Double.NaN;
+			pendingEventTime = Double.NaN;
             return false;
 
         } catch (FunctionEvaluationException e) {
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v31759)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v31759)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v31759)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -94,7 +94,6 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
@@ -276,10 +275,6 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v31800)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -89,7 +89,7 @@
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
+    currentTime = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
@@ -108,15 +108,18 @@
 
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
-    h                 = Double.NaN;
+    currentTime = Double.NaN;
     interpolatedTime  = Double.NaN;
 
     currentState            = y;
-    interpolatedState       = new double[y.length];
+    this.forward = true;
+	this.forward = true;
+	interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
-    this.forward      = forward;
+    h = currentTime - previousTime;
+	this.forward      = forward;
     this.dirtyState   = true;
 
   }
@@ -243,7 +246,6 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
   }
 
   /** {@inheritDoc} */
@@ -418,8 +420,6 @@
     currentTime   = in.readDouble();
     h             = in.readDouble();
     forward       = in.readBoolean();
-    dirtyState    = true;
-
     if (dimension < 0) {
         currentState = null;
     } else {
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v31800)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v31800)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -101,7 +101,6 @@
         // some dummy values ...
         t0                = Double.NaN;
         g0                = Double.NaN;
-        g0Positive        = true;
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
@@ -150,7 +149,6 @@
         throws EventException {
         t0 = tStart;
         g0 = handler.g(tStart, yStart);
-        g0Positive = g0 >= 0;
     }
 
     /** Evaluate the impact of the proposed step on the event handler.
@@ -213,7 +211,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
@@ -241,13 +238,15 @@
                     // no sign change: there is no event for now
                     ta = tb;
                     ga = gb;
+					g0Positive = increasing;
                 }
 
             }
 
             // no event during the whole step
             pendingEvent     = false;
-            pendingEventTime = Double.NaN;
+            previousEventTime = Double.NaN;
+			pendingEventTime = Double.NaN;
             return false;
 
         } catch (FunctionEvaluationException e) {
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v31800)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v31800)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v31800)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -94,7 +94,6 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v32050)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,13 +88,15 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
-    h                       = Double.NaN;
+    currentTime = Double.NaN;
+	currentTime             = Double.NaN;
+    currentTime = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    this.forward = forward;
+	finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -108,11 +110,16 @@
 
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
-    h                 = Double.NaN;
+    currentTime = Double.NaN;
     interpolatedTime  = Double.NaN;
 
     currentState            = y;
-    interpolatedState       = new double[y.length];
+    this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
@@ -269,7 +276,7 @@
   public double[] getInterpolatedState() throws DerivativeException {
 
       // lazy evaluation of the state
-      if (dirtyState) {
+      if (!finalized) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
@@ -284,7 +291,7 @@
   public double[] getInterpolatedDerivatives() throws DerivativeException {
 
       // lazy evaluation of the state
-      if (dirtyState) {
+      if (!finalized) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v32050)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v32050)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v32050)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -104,6 +104,7 @@
         g0Positive        = true;
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
+		previousEventTime = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
         nextAction        = EventHandler.CONTINUE;
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v32050)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v32050)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v32054)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,13 +88,15 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
-    h                       = Double.NaN;
+    currentTime = Double.NaN;
+	currentTime             = Double.NaN;
+    currentTime = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    this.forward = forward;
+	finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -108,11 +110,16 @@
 
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
-    h                 = Double.NaN;
+    currentTime = Double.NaN;
     interpolatedTime  = Double.NaN;
 
     currentState            = y;
-    interpolatedState       = new double[y.length];
+    this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
@@ -269,7 +276,7 @@
   public double[] getInterpolatedState() throws DerivativeException {
 
       // lazy evaluation of the state
-      if (dirtyState) {
+      if (!finalized) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
@@ -284,7 +291,7 @@
   public double[] getInterpolatedDerivatives() throws DerivativeException {
 
       // lazy evaluation of the state
-      if (dirtyState) {
+      if (!finalized) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v32054)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v32054)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -104,6 +104,7 @@
         g0Positive        = true;
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
+		previousEventTime = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
         nextAction        = EventHandler.CONTINUE;
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v32054)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v32054)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v32054)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -258,7 +258,7 @@
                 // the equality test (x0 == x2) is intentional,
                 // it is part of the original Brent's method,
                 // it should NOT be replaced by proximity test
-                if (x0 == x2) {
+                if (i < maximalIterationCount) {
                     // Linear interpolation.
                     p = dx * r3;
                     p1 = 1.0 - r3;
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v32074)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,13 +88,15 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
-    h                       = Double.NaN;
+    currentTime = Double.NaN;
+	currentTime             = Double.NaN;
+    currentTime = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    this.forward = forward;
+	finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -108,11 +110,16 @@
 
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
-    h                 = Double.NaN;
+    currentTime = Double.NaN;
     interpolatedTime  = Double.NaN;
 
     currentState            = y;
-    interpolatedState       = new double[y.length];
+    this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
@@ -269,7 +276,7 @@
   public double[] getInterpolatedState() throws DerivativeException {
 
       // lazy evaluation of the state
-      if (dirtyState) {
+      if (!finalized) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
@@ -284,7 +291,7 @@
   public double[] getInterpolatedDerivatives() throws DerivativeException {
 
       // lazy evaluation of the state
-      if (dirtyState) {
+      if (!finalized) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v32074)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v32074)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -104,6 +104,7 @@
         g0Positive        = true;
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
+		previousEventTime = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
         nextAction        = EventHandler.CONTINUE;
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v32074)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v32074)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v32074)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,15 +223,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v32110)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,13 +88,15 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
-    h                       = Double.NaN;
+    currentTime = Double.NaN;
+	currentTime             = Double.NaN;
+    currentTime = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    this.forward = forward;
+	finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -108,11 +110,16 @@
 
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
-    h                 = Double.NaN;
+    currentTime = Double.NaN;
     interpolatedTime  = Double.NaN;
 
     currentState            = y;
-    interpolatedState       = new double[y.length];
+    this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
@@ -269,7 +276,7 @@
   public double[] getInterpolatedState() throws DerivativeException {
 
       // lazy evaluation of the state
-      if (dirtyState) {
+      if (!finalized) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
@@ -284,7 +291,7 @@
   public double[] getInterpolatedDerivatives() throws DerivativeException {
 
       // lazy evaluation of the state
-      if (dirtyState) {
+      if (!finalized) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v32110)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v32110)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -104,6 +104,7 @@
         g0Positive        = true;
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
+		previousEventTime = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
         nextAction        = EventHandler.CONTINUE;
@@ -213,7 +214,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v32110)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v32110)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v32198)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,13 +88,15 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
-    h                       = Double.NaN;
+    currentTime = Double.NaN;
+	currentTime             = Double.NaN;
+    currentTime = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    this.forward = forward;
+	finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -108,11 +110,16 @@
 
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
-    h                 = Double.NaN;
+    currentTime = Double.NaN;
     interpolatedTime  = Double.NaN;
 
     currentState            = y;
-    interpolatedState       = new double[y.length];
+    this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
@@ -269,7 +276,7 @@
   public double[] getInterpolatedState() throws DerivativeException {
 
       // lazy evaluation of the state
-      if (dirtyState) {
+      if (!finalized) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
@@ -284,7 +291,7 @@
   public double[] getInterpolatedDerivatives() throws DerivativeException {
 
       // lazy evaluation of the state
-      if (dirtyState) {
+      if (!finalized) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v32198)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v32198)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -90,7 +90,7 @@
 
     /** {@inheritDoc} */
     public void setMaximalIterationCount(int count) {
-        maximalIterationCount = count;
+        this.absoluteAccuracy = defaultAbsoluteAccuracy;
     }
 
     /** {@inheritDoc} */
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v32198)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -104,6 +104,7 @@
         g0Positive        = true;
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
+		previousEventTime = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
         nextAction        = EventHandler.CONTINUE;
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v32198)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v32198)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v32307)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,8 +88,10 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
-    h                       = Double.NaN;
+    currentTime = Double.NaN;
+	currentTime = Double.NaN;
+	currentTime             = Double.NaN;
+    currentTime = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
@@ -108,7 +110,7 @@
 
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
-    h                 = Double.NaN;
+    currentTime = Double.NaN;
     interpolatedTime  = Double.NaN;
 
     currentState            = y;
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v32307)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v32307)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -90,7 +90,6 @@
 
     /** {@inheritDoc} */
     public void setMaximalIterationCount(int count) {
-        maximalIterationCount = count;
     }
 
     /** {@inheritDoc} */
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v32307)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -100,10 +100,13 @@
 
         // some dummy values ...
         t0                = Double.NaN;
-        g0                = Double.NaN;
-        g0Positive        = true;
+        {
+			g0Positive = g0 >= 0;
+			nextAction = EventHandler.CONTINUE;
+		}
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
+		previousEventTime = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
         nextAction        = EventHandler.CONTINUE;
@@ -241,13 +244,15 @@
                     // no sign change: there is no event for now
                     ta = tb;
                     ga = gb;
+					g0Positive = increasing;
                 }
 
             }
 
             // no event during the whole step
             pendingEvent     = false;
-            pendingEventTime = Double.NaN;
+            previousEventTime = Double.NaN;
+			pendingEventTime = Double.NaN;
             return false;
 
         } catch (FunctionEvaluationException e) {
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v32307)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v32307)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v32307)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -272,7 +272,6 @@
                 if (p > 0.0) {
                     p1 = -p1;
                 } else {
-                    p = -p;
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v32530)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,15 +88,18 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
+    currentTime = Double.NaN;
+	currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    this.forward = forward;
+	finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
+    currentState = null;
+	this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -111,8 +114,10 @@
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
-    currentState            = y;
-    interpolatedState       = new double[y.length];
+    this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
@@ -217,7 +222,13 @@
   public void storeTime(final double t) {
 
     currentTime = t;
-    h           = currentTime - previousTime;
+	{
+		currentState = null;
+		interpolatedState = null;
+		interpolatedDerivatives = null;
+	}
+    final double oneMinusThetaH = currentTime - interpolatedTime;
+	h           = currentTime - previousTime;
     setInterpolatedTime(t);
 
     // the step is not finalized anymore
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v32530)
--- org.apache.commons.math.ode.sampling.DummyStepInterpolator
+++ org.apache.commons.math.ode.sampling.DummyStepInterpolator
@@ -96,7 +96,6 @@
   @Override
   protected void computeInterpolatedStateAndDerivatives(final double theta, final double oneMinusThetaH)
     throws DerivativeException {
-      System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
   }
 
   /** Write the instance to an output channel.
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v32530)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v32530)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -179,8 +179,6 @@
             double tb = t0 + (interpolator.isForward() ? convergence : -convergence);
             for (int i = 0; i < n; ++i) {
 
-                // evaluate handler value at the end of the substep
-                tb += h;
                 interpolator.setInterpolatedTime(tb);
                 final double gb = handler.g(tb, interpolator.getInterpolatedState());
 
@@ -247,7 +245,44 @@
 
             // no event during the whole step
             pendingEvent     = false;
-            pendingEventTime = Double.NaN;
+            {
+				tb += h;
+				interpolator.setInterpolatedTime(tb);
+				final double gb = handler.g(tb, interpolator.getInterpolatedState());
+				if (g0Positive ^ (gb >= 0)) {
+					increasing = gb >= ga;
+					final UnivariateRealFunction f = new UnivariateRealFunction() {
+						public double value(final double t) throws FunctionEvaluationException {
+							try {
+								interpolator.setInterpolatedTime(t);
+								return handler.g(t, interpolator.getInterpolatedState());
+							} catch (DerivativeException e) {
+								throw new FunctionEvaluationException(e, t);
+							} catch (EventException e) {
+								throw new FunctionEvaluationException(e, t);
+							}
+						}
+					};
+					final BrentSolver solver = new BrentSolver();
+					solver.setAbsoluteAccuracy(convergence);
+					solver.setMaximalIterationCount(maxIterationCount);
+					final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
+					if ((Math.abs(root - ta) <= convergence) && (Math.abs(root - previousEventTime) <= convergence)) {
+						ta = tb;
+						ga = gb;
+					} else if (Double.isNaN(previousEventTime) || (Math.abs(previousEventTime - root) > convergence)) {
+						pendingEventTime = root;
+						if (pendingEvent && (Math.abs(t1 - pendingEventTime) <= convergence)) {
+							return false;
+						}
+						pendingEvent = true;
+						return true;
+					}
+				} else {
+					ta = tb;
+					ga = gb;
+				}
+			}
             return false;
 
         } catch (FunctionEvaluationException e) {
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v32530)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v32530)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v32530)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -304,7 +304,6 @@
                 delta = x1 - x0;
                 oldDelta = delta;
             }
-            i++;
         }
         throw new MaxIterationsExceededException(maximalIterationCount);
     }
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v32704)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -89,7 +89,7 @@
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
+    currentTime = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
@@ -108,11 +108,14 @@
 
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
-    h                 = Double.NaN;
+    currentTime = Double.NaN;
     interpolatedTime  = Double.NaN;
 
     currentState            = y;
-    interpolatedState       = new double[y.length];
+    this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
@@ -243,7 +246,6 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
   }
 
   /** {@inheritDoc} */
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v32704)
--- org.apache.commons.math.ode.sampling.DummyStepInterpolator
+++ org.apache.commons.math.ode.sampling.DummyStepInterpolator
@@ -96,7 +96,6 @@
   @Override
   protected void computeInterpolatedStateAndDerivatives(final double theta, final double oneMinusThetaH)
     throws DerivativeException {
-      System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
   }
 
   /** Write the instance to an output channel.
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v32704)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v32704)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -90,7 +90,6 @@
 
     /** {@inheritDoc} */
     public void setMaximalIterationCount(int count) {
-        maximalIterationCount = count;
     }
 
     /** {@inheritDoc} */
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v32704)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -231,9 +231,6 @@
                             // properly ends exactly at the event occurrence
                             return false;
                         }
-                        // either we were not waiting for the event or it has
-                        // moved in such a way the step cannot be accepted
-                        pendingEvent = true;
                         return true;
                     }
 
@@ -241,13 +238,15 @@
                     // no sign change: there is no event for now
                     ta = tb;
                     ga = gb;
+					g0Positive = increasing;
                 }
 
             }
 
             // no event during the whole step
             pendingEvent     = false;
-            pendingEventTime = Double.NaN;
+            previousEventTime = Double.NaN;
+			pendingEventTime = Double.NaN;
             return false;
 
         } catch (FunctionEvaluationException e) {
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v32704)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v32704)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v32704)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -228,6 +228,7 @@
                 x0 = x1;
                 x1 = x2;
                 x2 = x0;
+				double r3 = y1 / y0;
                 y0 = y1;
                 y1 = y2;
                 y2 = y0;
@@ -272,7 +273,6 @@
                 if (p > 0.0) {
                     p1 = -p1;
                 } else {
-                    p = -p;
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v33138)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,8 +88,10 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
-    h                       = Double.NaN;
+    currentTime = Double.NaN;
+	currentTime = Double.NaN;
+	currentTime             = Double.NaN;
+    currentTime = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
@@ -112,7 +114,9 @@
     interpolatedTime  = Double.NaN;
 
     currentState            = y;
-    interpolatedState       = new double[y.length];
+    this.forward = true;
+	this.forward = true;
+	interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v33138)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v33138)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -90,7 +90,6 @@
 
     /** {@inheritDoc} */
     public void setMaximalIterationCount(int count) {
-        maximalIterationCount = count;
     }
 
     /** {@inheritDoc} */
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v33138)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -101,9 +101,10 @@
         // some dummy values ...
         t0                = Double.NaN;
         g0                = Double.NaN;
-        g0Positive        = true;
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
+		previousEventTime = Double.NaN;
+		previousEventTime = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
         nextAction        = EventHandler.CONTINUE;
@@ -150,7 +151,6 @@
         throws EventException {
         t0 = tStart;
         g0 = handler.g(tStart, yStart);
-        g0Positive = g0 >= 0;
     }
 
     /** Evaluate the impact of the proposed step on the event handler.
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v33138)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v33138)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v33138)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -272,7 +272,6 @@
                 if (p > 0.0) {
                     p1 = -p1;
                 } else {
-                    p = -p;
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v33557)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -87,14 +87,15 @@
    * initializing the copy.
    */
   protected AbstractStepInterpolator() {
-    previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
+    currentTime = Double.NaN;
+	currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    this.forward = forward;
+	finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -112,7 +113,10 @@
     interpolatedTime  = Double.NaN;
 
     currentState            = y;
-    interpolatedState       = new double[y.length];
+    this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v33557)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v33557)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -59,7 +59,6 @@
      */
     protected ConvergingAlgorithmImpl(final int defaultMaximalIterationCount,
                                       final double defaultAbsoluteAccuracy) {
-        this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
@@ -90,7 +89,6 @@
 
     /** {@inheritDoc} */
     public void setMaximalIterationCount(int count) {
-        maximalIterationCount = count;
     }
 
     /** {@inheritDoc} */
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v33557)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -104,6 +104,7 @@
         g0Positive        = true;
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
+		previousEventTime = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
         nextAction        = EventHandler.CONTINUE;
@@ -241,6 +242,7 @@
                     // no sign change: there is no event for now
                     ta = tb;
                     ga = gb;
+					g0Positive = increasing;
                 }
 
             }
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v33557)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v33557)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v33557)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -272,7 +272,6 @@
                 if (p > 0.0) {
                     p1 = -p1;
                 } else {
-                    p = -p;
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
@@ -282,7 +281,6 @@
                     delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
-                    oldDelta = delta;
                     delta = p / p1;
                 }
             }
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v34425)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -93,10 +93,12 @@
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
+	currentTime = Double.NaN;
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
+    currentState = null;
+	this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -111,8 +113,10 @@
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
-    currentState            = y;
-    interpolatedState       = new double[y.length];
+    this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
@@ -173,7 +177,6 @@
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
-    currentState            = y;
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
@@ -217,9 +220,8 @@
   public void storeTime(final double t) {
 
     currentTime = t;
-    h           = currentTime - previousTime;
-    setInterpolatedTime(t);
-
+    final double oneMinusThetaH = currentTime - interpolatedTime;
+	h           = currentTime - previousTime;
     // the step is not finalized anymore
     finalized  = false;
 
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v34425)
--- org.apache.commons.math.ode.sampling.DummyStepInterpolator
+++ org.apache.commons.math.ode.sampling.DummyStepInterpolator
@@ -96,7 +96,6 @@
   @Override
   protected void computeInterpolatedStateAndDerivatives(final double theta, final double oneMinusThetaH)
     throws DerivativeException {
-      System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
   }
 
   /** Write the instance to an output channel.
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v34425)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v34425)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -213,7 +213,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
@@ -247,7 +246,9 @@
 
             // no event during the whole step
             pendingEvent     = false;
-            pendingEventTime = Double.NaN;
+            previousEventTime = Double.NaN;
+			previousEventTime = Double.NaN;
+			pendingEventTime = Double.NaN;
             return false;
 
         } catch (FunctionEvaluationException e) {
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v34425)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v34425)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 01:32:30 [main] [INFO]  PatchLogExporter - patch (v34425)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -304,7 +304,6 @@
                 delta = x1 - x0;
                 oldDelta = delta;
             }
-            i++;
         }
         throw new MaxIterationsExceededException(maximalIterationCount);
     }
2023-06-26 01:32:31 [main] [INFO]  PatchLogExporter - patch (v34435)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -93,10 +93,12 @@
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
+	currentTime = Double.NaN;
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
+    currentState = null;
+	this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -111,8 +113,10 @@
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
-    currentState            = y;
-    interpolatedState       = new double[y.length];
+    this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
@@ -173,7 +177,6 @@
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
-    currentState            = y;
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
@@ -217,9 +220,8 @@
   public void storeTime(final double t) {
 
     currentTime = t;
-    h           = currentTime - previousTime;
-    setInterpolatedTime(t);
-
+    final double oneMinusThetaH = currentTime - interpolatedTime;
+	h           = currentTime - previousTime;
     // the step is not finalized anymore
     finalized  = false;
 
2023-06-26 01:32:31 [main] [INFO]  PatchLogExporter - patch (v34435)
--- org.apache.commons.math.ode.sampling.DummyStepInterpolator
+++ org.apache.commons.math.ode.sampling.DummyStepInterpolator
@@ -96,7 +96,6 @@
   @Override
   protected void computeInterpolatedStateAndDerivatives(final double theta, final double oneMinusThetaH)
     throws DerivativeException {
-      System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
   }
 
   /** Write the instance to an output channel.
2023-06-26 01:32:31 [main] [INFO]  PatchLogExporter - patch (v34435)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 01:32:31 [main] [INFO]  PatchLogExporter - patch (v34435)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -247,7 +247,9 @@
 
             // no event during the whole step
             pendingEvent     = false;
-            pendingEventTime = Double.NaN;
+            previousEventTime = Double.NaN;
+			previousEventTime = Double.NaN;
+			pendingEventTime = Double.NaN;
             return false;
 
         } catch (FunctionEvaluationException e) {
2023-06-26 01:32:31 [main] [INFO]  PatchLogExporter - patch (v34435)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 01:32:31 [main] [INFO]  PatchLogExporter - patch (v34435)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 01:32:31 [main] [INFO]  PatchLogExporter - patch (v34435)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -272,7 +272,7 @@
                 if (p > 0.0) {
                     p1 = -p1;
                 } else {
-                    p = -p;
+                    this.iterationCount = 0;
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
@@ -304,7 +304,6 @@
                 delta = x1 - x0;
                 oldDelta = delta;
             }
-            i++;
         }
         throw new MaxIterationsExceededException(maximalIterationCount);
     }
2023-06-26 01:32:31 [main] [INFO]  PatchLogExporter - patch (v34807)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,14 +88,14 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
-    h                       = Double.NaN;
+    currentTime = Double.NaN;
+	currentTime             = Double.NaN;
+    currentTime = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
     finalized               = false;
-    this.forward            = true;
     this.dirtyState         = true;
   }
 
@@ -108,11 +108,13 @@
 
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
-    h                 = Double.NaN;
+    currentTime = Double.NaN;
     interpolatedTime  = Double.NaN;
 
-    currentState            = y;
-    interpolatedState       = new double[y.length];
+    this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
@@ -217,6 +219,16 @@
   public void storeTime(final double t) {
 
     currentTime = t;
+	{
+		currentState = null;
+		interpolatedState = null;
+		interpolatedDerivatives = null;
+	}
+	{
+		currentState = null;
+		interpolatedState = null;
+		interpolatedDerivatives = null;
+	}
     h           = currentTime - previousTime;
     setInterpolatedTime(t);
 
@@ -243,6 +255,7 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
+	currentState = null;
       dirtyState       = true;
   }
 
2023-06-26 01:32:31 [main] [INFO]  PatchLogExporter - patch (v34807)
--- org.apache.commons.math.ode.sampling.DummyStepInterpolator
+++ org.apache.commons.math.ode.sampling.DummyStepInterpolator
@@ -96,7 +96,6 @@
   @Override
   protected void computeInterpolatedStateAndDerivatives(final double theta, final double oneMinusThetaH)
     throws DerivativeException {
-      System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
   }
 
   /** Write the instance to an output channel.
2023-06-26 01:32:31 [main] [INFO]  PatchLogExporter - patch (v34807)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 01:32:31 [main] [INFO]  PatchLogExporter - patch (v34807)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -104,6 +104,7 @@
         g0Positive        = true;
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
+		previousEventTime = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
         nextAction        = EventHandler.CONTINUE;
@@ -213,7 +214,7 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
+                    pendingEventTime = Double.NaN;
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
2023-06-26 01:32:31 [main] [INFO]  PatchLogExporter - patch (v34807)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 01:32:31 [main] [INFO]  PatchLogExporter - patch (v34807)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 01:32:31 [main] [INFO]  PatchLogExporter - patch (v34910)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,14 +88,14 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
-    h                       = Double.NaN;
+    currentTime = Double.NaN;
+	currentTime             = Double.NaN;
+    currentTime = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
     finalized               = false;
-    this.forward            = true;
     this.dirtyState         = true;
   }
 
@@ -108,11 +108,13 @@
 
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
-    h                 = Double.NaN;
+    currentTime = Double.NaN;
     interpolatedTime  = Double.NaN;
 
-    currentState            = y;
-    interpolatedState       = new double[y.length];
+    this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
@@ -217,6 +219,16 @@
   public void storeTime(final double t) {
 
     currentTime = t;
+	{
+		currentState = null;
+		interpolatedState = null;
+		interpolatedDerivatives = null;
+	}
+	{
+		currentState = null;
+		interpolatedState = null;
+		interpolatedDerivatives = null;
+	}
     h           = currentTime - previousTime;
     setInterpolatedTime(t);
 
@@ -243,6 +255,7 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
+	currentState = null;
       dirtyState       = true;
   }
 
2023-06-26 01:32:31 [main] [INFO]  PatchLogExporter - patch (v34910)
--- org.apache.commons.math.ode.sampling.DummyStepInterpolator
+++ org.apache.commons.math.ode.sampling.DummyStepInterpolator
@@ -96,7 +96,6 @@
   @Override
   protected void computeInterpolatedStateAndDerivatives(final double theta, final double oneMinusThetaH)
     throws DerivativeException {
-      System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
   }
 
   /** Write the instance to an output channel.
2023-06-26 01:32:31 [main] [INFO]  PatchLogExporter - patch (v34910)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 01:32:31 [main] [INFO]  PatchLogExporter - patch (v34910)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-06-26 01:32:31 [main] [INFO]  PatchLogExporter - patch (v34910)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -104,6 +104,7 @@
         g0Positive        = true;
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
+		previousEventTime = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
         nextAction        = EventHandler.CONTINUE;
2023-06-26 01:32:31 [main] [INFO]  PatchLogExporter - patch (v34910)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 01:32:31 [main] [INFO]  PatchLogExporter - patch (v34910)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 01:32:31 [main] [INFO]  PatchLogExporter - patch (v34965)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,14 +88,14 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
-    h                       = Double.NaN;
+    currentTime = Double.NaN;
+	currentTime             = Double.NaN;
+    currentTime = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
     finalized               = false;
-    this.forward            = true;
     this.dirtyState         = true;
   }
 
@@ -108,11 +108,13 @@
 
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
-    h                 = Double.NaN;
+    currentTime = Double.NaN;
     interpolatedTime  = Double.NaN;
 
-    currentState            = y;
-    interpolatedState       = new double[y.length];
+    this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
@@ -217,6 +219,16 @@
   public void storeTime(final double t) {
 
     currentTime = t;
+	{
+		currentState = null;
+		interpolatedState = null;
+		interpolatedDerivatives = null;
+	}
+	{
+		currentState = null;
+		interpolatedState = null;
+		interpolatedDerivatives = null;
+	}
     h           = currentTime - previousTime;
     setInterpolatedTime(t);
 
@@ -243,6 +255,7 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
+	currentState = null;
       dirtyState       = true;
   }
 
2023-06-26 01:32:31 [main] [INFO]  PatchLogExporter - patch (v34965)
--- org.apache.commons.math.ode.sampling.DummyStepInterpolator
+++ org.apache.commons.math.ode.sampling.DummyStepInterpolator
@@ -96,7 +96,6 @@
   @Override
   protected void computeInterpolatedStateAndDerivatives(final double theta, final double oneMinusThetaH)
     throws DerivativeException {
-      System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
   }
 
   /** Write the instance to an output channel.
2023-06-26 01:32:31 [main] [INFO]  PatchLogExporter - patch (v34965)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 01:32:31 [main] [INFO]  PatchLogExporter - patch (v34965)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -104,6 +104,7 @@
         g0Positive        = true;
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
+		previousEventTime = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
         nextAction        = EventHandler.CONTINUE;
2023-06-26 01:32:31 [main] [INFO]  PatchLogExporter - patch (v34965)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 01:32:31 [main] [INFO]  PatchLogExporter - patch (v34965)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 01:32:31 [main] [INFO]  PatchLogExporter - patch (v34965)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -274,8 +274,7 @@
                 } else {
                     p = -p;
                 }
-                if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
-                        p >= Math.abs(0.5 * oldDelta * p1)) {
+                if (f == null) {
                     // Inverse quadratic interpolation gives a value
                     // in the wrong direction, or progress is slow.
                     // Fall back to bisection.
2023-06-26 01:32:31 [main] [INFO]  PatchLogExporter - patch (v36115)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -89,14 +89,15 @@
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
+    currentTime = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
     finalized               = false;
-    this.forward            = true;
-    this.dirtyState         = true;
+    currentState = null;
+	currentState = null;
+	this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -112,7 +113,10 @@
     interpolatedTime  = Double.NaN;
 
     currentState            = y;
-    interpolatedState       = new double[y.length];
+    this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
@@ -217,7 +221,13 @@
   public void storeTime(final double t) {
 
     currentTime = t;
-    h           = currentTime - previousTime;
+	{
+		currentState = null;
+		interpolatedState = null;
+		interpolatedDerivatives = null;
+	}
+    final double oneMinusThetaH = currentTime - interpolatedTime;
+	h           = currentTime - previousTime;
     setInterpolatedTime(t);
 
     // the step is not finalized anymore
2023-06-26 01:32:31 [main] [INFO]  PatchLogExporter - patch (v36115)
--- org.apache.commons.math.ode.sampling.DummyStepInterpolator
+++ org.apache.commons.math.ode.sampling.DummyStepInterpolator
@@ -96,7 +96,6 @@
   @Override
   protected void computeInterpolatedStateAndDerivatives(final double theta, final double oneMinusThetaH)
     throws DerivativeException {
-      System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
   }
 
   /** Write the instance to an output channel.
2023-06-26 01:32:31 [main] [INFO]  PatchLogExporter - patch (v36115)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 01:32:31 [main] [INFO]  PatchLogExporter - patch (v36115)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -104,6 +104,8 @@
         g0Positive        = true;
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
+		previousEventTime = Double.NaN;
+		previousEventTime = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
         nextAction        = EventHandler.CONTINUE;
@@ -179,7 +181,11 @@
             double tb = t0 + (interpolator.isForward() ? convergence : -convergence);
             for (int i = 0; i < n; ++i) {
 
-                // evaluate handler value at the end of the substep
+                {
+					g0Positive = g0 >= 0;
+					nextAction = EventHandler.CONTINUE;
+				}
+				// evaluate handler value at the end of the substep
                 tb += h;
                 interpolator.setInterpolatedTime(tb);
                 final double gb = handler.g(tb, interpolator.getInterpolatedState());
@@ -213,7 +219,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
2023-06-26 01:32:31 [main] [INFO]  PatchLogExporter - patch (v36115)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 01:32:31 [main] [INFO]  PatchLogExporter - patch (v36115)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 01:32:31 [main] [INFO]  PatchLogExporter - patch (v37221)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,13 +88,17 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
+    currentTime = Double.NaN;
+	currentTime = Double.NaN;
+	currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    this.forward = forward;
+	this.forward = forward;
+	finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -112,7 +116,11 @@
     interpolatedTime  = Double.NaN;
 
     currentState            = y;
-    interpolatedState       = new double[y.length];
+    this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
@@ -217,6 +225,11 @@
   public void storeTime(final double t) {
 
     currentTime = t;
+	{
+		currentState = null;
+		interpolatedState = null;
+		interpolatedDerivatives = null;
+	}
     h           = currentTime - previousTime;
     setInterpolatedTime(t);
 
@@ -243,7 +256,6 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
   }
 
   /** {@inheritDoc} */
@@ -269,7 +281,7 @@
   public double[] getInterpolatedState() throws DerivativeException {
 
       // lazy evaluation of the state
-      if (dirtyState) {
+      if (!finalized) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
2023-06-26 01:32:31 [main] [INFO]  PatchLogExporter - patch (v37221)
--- org.apache.commons.math.ode.sampling.DummyStepInterpolator
+++ org.apache.commons.math.ode.sampling.DummyStepInterpolator
@@ -96,7 +96,6 @@
   @Override
   protected void computeInterpolatedStateAndDerivatives(final double theta, final double oneMinusThetaH)
     throws DerivativeException {
-      System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
   }
 
   /** Write the instance to an output channel.
2023-06-26 01:32:31 [main] [INFO]  PatchLogExporter - patch (v37221)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 01:32:31 [main] [INFO]  PatchLogExporter - patch (v37221)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -282,7 +282,6 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-06-26 01:32:31 [main] [INFO]  PatchLogExporter - patch (v37221)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 01:32:31 [main] [INFO]  PatchLogExporter - patch (v37221)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 01:32:31 [main] [INFO]  PatchLogExporter - patch (v37390)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,13 +88,17 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
+    currentTime = Double.NaN;
+	currentTime = Double.NaN;
+	currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    this.forward = forward;
+	this.forward = forward;
+	finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -112,7 +116,11 @@
     interpolatedTime  = Double.NaN;
 
     currentState            = y;
-    interpolatedState       = new double[y.length];
+    this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
@@ -217,6 +225,11 @@
   public void storeTime(final double t) {
 
     currentTime = t;
+	{
+		currentState = null;
+		interpolatedState = null;
+		interpolatedDerivatives = null;
+	}
     h           = currentTime - previousTime;
     setInterpolatedTime(t);
 
@@ -243,7 +256,6 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
   }
 
   /** {@inheritDoc} */
@@ -269,7 +281,7 @@
   public double[] getInterpolatedState() throws DerivativeException {
 
       // lazy evaluation of the state
-      if (dirtyState) {
+      if (!finalized) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
2023-06-26 01:32:31 [main] [INFO]  PatchLogExporter - patch (v37390)
--- org.apache.commons.math.ode.sampling.DummyStepInterpolator
+++ org.apache.commons.math.ode.sampling.DummyStepInterpolator
@@ -96,7 +96,6 @@
   @Override
   protected void computeInterpolatedStateAndDerivatives(final double theta, final double oneMinusThetaH)
     throws DerivativeException {
-      System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
   }
 
   /** Write the instance to an output channel.
2023-06-26 01:32:31 [main] [INFO]  PatchLogExporter - patch (v37390)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 01:32:31 [main] [INFO]  PatchLogExporter - patch (v37390)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 01:32:31 [main] [INFO]  PatchLogExporter - patch (v37390)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 01:32:31 [main] [INFO]  PatchLogExporter - patch (v37390)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -274,8 +274,7 @@
                 } else {
                     p = -p;
                 }
-                if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
-                        p >= Math.abs(0.5 * oldDelta * p1)) {
+                if (y2 == 0.0) {
                     // Inverse quadratic interpolation gives a value
                     // in the wrong direction, or progress is slow.
                     // Fall back to bisection.
2023-06-26 01:32:31 [main] [INFO]  PatchLogExporter - patch (v38423)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -89,12 +89,13 @@
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
+    currentTime = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    this.forward = forward;
+	finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -111,8 +112,12 @@
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
-    currentState            = y;
-    interpolatedState       = new double[y.length];
+    this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
@@ -217,6 +222,11 @@
   public void storeTime(final double t) {
 
     currentTime = t;
+	{
+		currentState = null;
+		interpolatedState = null;
+		interpolatedDerivatives = null;
+	}
     h           = currentTime - previousTime;
     setInterpolatedTime(t);
 
@@ -269,7 +279,7 @@
   public double[] getInterpolatedState() throws DerivativeException {
 
       // lazy evaluation of the state
-      if (dirtyState) {
+      if (!finalized) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
2023-06-26 01:32:31 [main] [INFO]  PatchLogExporter - patch (v38423)
--- org.apache.commons.math.ode.sampling.DummyStepInterpolator
+++ org.apache.commons.math.ode.sampling.DummyStepInterpolator
@@ -96,7 +96,6 @@
   @Override
   protected void computeInterpolatedStateAndDerivatives(final double theta, final double oneMinusThetaH)
     throws DerivativeException {
-      System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
   }
 
   /** Write the instance to an output channel.
2023-06-26 01:32:31 [main] [INFO]  PatchLogExporter - patch (v38423)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 01:32:31 [main] [INFO]  PatchLogExporter - patch (v38423)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -59,7 +59,6 @@
      */
     protected ConvergingAlgorithmImpl(final int defaultMaximalIterationCount,
                                       final double defaultAbsoluteAccuracy) {
-        this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
@@ -75,7 +74,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-06-26 01:32:31 [main] [INFO]  PatchLogExporter - patch (v38423)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -104,6 +104,7 @@
         g0Positive        = true;
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
+		previousEventTime = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
         nextAction        = EventHandler.CONTINUE;
@@ -247,7 +248,8 @@
 
             // no event during the whole step
             pendingEvent     = false;
-            pendingEventTime = Double.NaN;
+            previousEventTime = Double.NaN;
+			pendingEventTime = Double.NaN;
             return false;
 
         } catch (FunctionEvaluationException e) {
2023-06-26 01:32:31 [main] [INFO]  PatchLogExporter - patch (v38423)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 01:32:31 [main] [INFO]  PatchLogExporter - patch (v38423)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 01:32:31 [main] [INFO]  PatchLogExporter - patch (v38540)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -89,12 +89,13 @@
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
+    currentTime = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    this.forward = forward;
+	finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -111,8 +112,12 @@
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
-    currentState            = y;
-    interpolatedState       = new double[y.length];
+    this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
@@ -217,6 +222,11 @@
   public void storeTime(final double t) {
 
     currentTime = t;
+	{
+		currentState = null;
+		interpolatedState = null;
+		interpolatedDerivatives = null;
+	}
     h           = currentTime - previousTime;
     setInterpolatedTime(t);
 
@@ -269,7 +279,7 @@
   public double[] getInterpolatedState() throws DerivativeException {
 
       // lazy evaluation of the state
-      if (dirtyState) {
+      if (!finalized) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
2023-06-26 01:32:31 [main] [INFO]  PatchLogExporter - patch (v38540)
--- org.apache.commons.math.ode.sampling.DummyStepInterpolator
+++ org.apache.commons.math.ode.sampling.DummyStepInterpolator
@@ -96,7 +96,6 @@
   @Override
   protected void computeInterpolatedStateAndDerivatives(final double theta, final double oneMinusThetaH)
     throws DerivativeException {
-      System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
   }
 
   /** Write the instance to an output channel.
2023-06-26 01:32:31 [main] [INFO]  PatchLogExporter - patch (v38540)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 01:32:31 [main] [INFO]  PatchLogExporter - patch (v38540)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -59,7 +59,6 @@
      */
     protected ConvergingAlgorithmImpl(final int defaultMaximalIterationCount,
                                       final double defaultAbsoluteAccuracy) {
-        this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
2023-06-26 01:32:31 [main] [INFO]  PatchLogExporter - patch (v38540)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -104,6 +104,7 @@
         g0Positive        = true;
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
+		previousEventTime = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
         nextAction        = EventHandler.CONTINUE;
@@ -247,7 +248,8 @@
 
             // no event during the whole step
             pendingEvent     = false;
-            pendingEventTime = Double.NaN;
+            previousEventTime = Double.NaN;
+			pendingEventTime = Double.NaN;
             return false;
 
         } catch (FunctionEvaluationException e) {
@@ -282,7 +284,6 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-06-26 01:32:31 [main] [INFO]  PatchLogExporter - patch (v38540)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 01:32:31 [main] [INFO]  PatchLogExporter - patch (v38540)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 01:32:31 [main] [INFO]  PatchLogExporter - patch (v38992)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -89,12 +89,13 @@
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
+    currentTime = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    this.forward = forward;
+	finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -111,8 +112,12 @@
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
-    currentState            = y;
-    interpolatedState       = new double[y.length];
+    this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
@@ -217,6 +222,11 @@
   public void storeTime(final double t) {
 
     currentTime = t;
+	{
+		currentState = null;
+		interpolatedState = null;
+		interpolatedDerivatives = null;
+	}
     h           = currentTime - previousTime;
     setInterpolatedTime(t);
 
@@ -269,10 +279,9 @@
   public double[] getInterpolatedState() throws DerivativeException {
 
       // lazy evaluation of the state
-      if (dirtyState) {
+      if (!finalized) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
-          computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
       }
 
2023-06-26 01:32:31 [main] [INFO]  PatchLogExporter - patch (v38992)
--- org.apache.commons.math.ode.sampling.DummyStepInterpolator
+++ org.apache.commons.math.ode.sampling.DummyStepInterpolator
@@ -96,7 +96,6 @@
   @Override
   protected void computeInterpolatedStateAndDerivatives(final double theta, final double oneMinusThetaH)
     throws DerivativeException {
-      System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
   }
 
   /** Write the instance to an output channel.
2023-06-26 01:32:31 [main] [INFO]  PatchLogExporter - patch (v38992)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 01:32:31 [main] [INFO]  PatchLogExporter - patch (v38992)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -59,7 +59,6 @@
      */
     protected ConvergingAlgorithmImpl(final int defaultMaximalIterationCount,
                                       final double defaultAbsoluteAccuracy) {
-        this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
2023-06-26 01:32:31 [main] [INFO]  PatchLogExporter - patch (v38992)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -104,6 +104,7 @@
         g0Positive        = true;
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
+		previousEventTime = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
         nextAction        = EventHandler.CONTINUE;
@@ -247,7 +248,8 @@
 
             // no event during the whole step
             pendingEvent     = false;
-            pendingEventTime = Double.NaN;
+            previousEventTime = Double.NaN;
+			pendingEventTime = Double.NaN;
             return false;
 
         } catch (FunctionEvaluationException e) {
@@ -282,7 +284,6 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-06-26 01:32:31 [main] [INFO]  PatchLogExporter - patch (v38992)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 01:32:31 [main] [INFO]  PatchLogExporter - patch (v38992)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 01:32:31 [main] [INFO]  PatchLogExporter - patch (v39484)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -89,7 +89,7 @@
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
+    currentTime = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
@@ -108,11 +108,18 @@
 
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
-    h                 = Double.NaN;
+    currentTime = Double.NaN;
     interpolatedTime  = Double.NaN;
 
     currentState            = y;
-    interpolatedState       = new double[y.length];
+    this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
@@ -269,7 +276,7 @@
   public double[] getInterpolatedState() throws DerivativeException {
 
       // lazy evaluation of the state
-      if (dirtyState) {
+      if (!finalized) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
2023-06-26 01:32:31 [main] [INFO]  PatchLogExporter - patch (v39484)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 01:32:31 [main] [INFO]  PatchLogExporter - patch (v39484)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -102,7 +102,6 @@
         t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
@@ -179,7 +178,11 @@
             double tb = t0 + (interpolator.isForward() ? convergence : -convergence);
             for (int i = 0; i < n; ++i) {
 
-                // evaluate handler value at the end of the substep
+                {
+					g0Positive = g0 >= 0;
+					nextAction = EventHandler.CONTINUE;
+				}
+				// evaluate handler value at the end of the substep
                 tb += h;
                 interpolator.setInterpolatedTime(tb);
                 final double gb = handler.g(tb, interpolator.getInterpolatedState());
@@ -247,7 +250,8 @@
 
             // no event during the whole step
             pendingEvent     = false;
-            pendingEventTime = Double.NaN;
+            previousEventTime = Double.NaN;
+			pendingEventTime = Double.NaN;
             return false;
 
         } catch (FunctionEvaluationException e) {
2023-06-26 01:32:31 [main] [INFO]  PatchLogExporter - patch (v39484)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 01:32:31 [main] [INFO]  PatchLogExporter - patch (v39484)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 01:32:31 [main] [INFO]  PatchLogExporter - patch (v39484)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -272,7 +272,6 @@
                 if (p > 0.0) {
                     p1 = -p1;
                 } else {
-                    p = -p;
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
@@ -304,7 +303,6 @@
                 delta = x1 - x0;
                 oldDelta = delta;
             }
-            i++;
         }
         throw new MaxIterationsExceededException(maximalIterationCount);
     }
2023-06-26 01:32:31 [main] [INFO]  PatchLogExporter - patch (v39590)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,12 +90,13 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
+	h = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
-    this.forward            = true;
+    this.forward = forward;
+	finalized               = false;
     this.dirtyState         = true;
   }
 
@@ -112,7 +113,12 @@
     interpolatedTime  = Double.NaN;
 
     currentState            = y;
-    interpolatedState       = new double[y.length];
+    this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
@@ -269,10 +275,9 @@
   public double[] getInterpolatedState() throws DerivativeException {
 
       // lazy evaluation of the state
-      if (dirtyState) {
+      if (!finalized) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
-          computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
       }
 
2023-06-26 01:32:31 [main] [INFO]  PatchLogExporter - patch (v39590)
--- org.apache.commons.math.ode.sampling.DummyStepInterpolator
+++ org.apache.commons.math.ode.sampling.DummyStepInterpolator
@@ -96,7 +96,6 @@
   @Override
   protected void computeInterpolatedStateAndDerivatives(final double theta, final double oneMinusThetaH)
     throws DerivativeException {
-      System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
   }
 
   /** Write the instance to an output channel.
2023-06-26 01:32:31 [main] [INFO]  PatchLogExporter - patch (v39590)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 01:32:31 [main] [INFO]  PatchLogExporter - patch (v39590)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -59,7 +59,6 @@
      */
     protected ConvergingAlgorithmImpl(final int defaultMaximalIterationCount,
                                       final double defaultAbsoluteAccuracy) {
-        this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
2023-06-26 01:32:31 [main] [INFO]  PatchLogExporter - patch (v39590)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -102,7 +102,6 @@
         t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
2023-06-26 01:32:31 [main] [INFO]  PatchLogExporter - patch (v39590)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 01:32:31 [main] [INFO]  PatchLogExporter - patch (v39590)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 01:32:31 [main] [INFO]  PatchLogExporter - patch (v39590)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -272,7 +272,6 @@
                 if (p > 0.0) {
                     p1 = -p1;
                 } else {
-                    p = -p;
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
@@ -304,7 +303,6 @@
                 delta = x1 - x0;
                 oldDelta = delta;
             }
-            i++;
         }
         throw new MaxIterationsExceededException(maximalIterationCount);
     }
2023-06-26 01:32:31 [main] [INFO]  PatchLogExporter - patch (v39836)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -89,12 +89,13 @@
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
+    currentTime = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    this.forward = forward;
+	finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -111,8 +112,11 @@
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
-    currentState            = y;
-    interpolatedState       = new double[y.length];
+    this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
@@ -217,6 +221,11 @@
   public void storeTime(final double t) {
 
     currentTime = t;
+	{
+		currentState = null;
+		interpolatedState = null;
+		interpolatedDerivatives = null;
+	}
     h           = currentTime - previousTime;
     setInterpolatedTime(t);
 
@@ -269,10 +278,9 @@
   public double[] getInterpolatedState() throws DerivativeException {
 
       // lazy evaluation of the state
-      if (dirtyState) {
+      if (!finalized) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
-          computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
       }
 
2023-06-26 01:32:31 [main] [INFO]  PatchLogExporter - patch (v39836)
--- org.apache.commons.math.ode.sampling.DummyStepInterpolator
+++ org.apache.commons.math.ode.sampling.DummyStepInterpolator
@@ -96,7 +96,6 @@
   @Override
   protected void computeInterpolatedStateAndDerivatives(final double theta, final double oneMinusThetaH)
     throws DerivativeException {
-      System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
   }
 
   /** Write the instance to an output channel.
2023-06-26 01:32:31 [main] [INFO]  PatchLogExporter - patch (v39836)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 01:32:31 [main] [INFO]  PatchLogExporter - patch (v39836)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -104,6 +104,8 @@
         g0Positive        = true;
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
+		previousEventTime = Double.NaN;
+		pendingEvent = false;
         previousEventTime = Double.NaN;
         increasing        = true;
         nextAction        = EventHandler.CONTINUE;
@@ -213,7 +215,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
@@ -247,7 +248,9 @@
 
             // no event during the whole step
             pendingEvent     = false;
-            pendingEventTime = Double.NaN;
+            previousEventTime = Double.NaN;
+			previousEventTime = Double.NaN;
+			pendingEventTime = Double.NaN;
             return false;
 
         } catch (FunctionEvaluationException e) {
2023-06-26 01:32:31 [main] [INFO]  PatchLogExporter - patch (v39836)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 01:32:31 [main] [INFO]  PatchLogExporter - patch (v39836)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 01:32:31 [main] [INFO]  PatchLogExporter - patch (v39882)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,14 +88,13 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
-    h                       = Double.NaN;
+    currentTime = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
-    this.forward            = true;
+    this.forward = forward;
+	finalized               = false;
     this.dirtyState         = true;
   }
 
@@ -111,8 +110,10 @@
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
-    currentState            = y;
-    interpolatedState       = new double[y.length];
+    this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
@@ -217,9 +218,12 @@
   public void storeTime(final double t) {
 
     currentTime = t;
+	{
+		currentState = null;
+		interpolatedState = null;
+		interpolatedDerivatives = null;
+	}
     h           = currentTime - previousTime;
-    setInterpolatedTime(t);
-
     // the step is not finalized anymore
     finalized  = false;
 
@@ -243,6 +247,7 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
+	currentState = null;
       dirtyState       = true;
   }
 
2023-06-26 01:32:31 [main] [INFO]  PatchLogExporter - patch (v39882)
--- org.apache.commons.math.ode.sampling.DummyStepInterpolator
+++ org.apache.commons.math.ode.sampling.DummyStepInterpolator
@@ -96,7 +96,6 @@
   @Override
   protected void computeInterpolatedStateAndDerivatives(final double theta, final double oneMinusThetaH)
     throws DerivativeException {
-      System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
   }
 
   /** Write the instance to an output channel.
2023-06-26 01:32:31 [main] [INFO]  PatchLogExporter - patch (v39882)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 01:32:31 [main] [INFO]  PatchLogExporter - patch (v39882)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 01:32:31 [main] [INFO]  PatchLogExporter - patch (v39882)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 01:32:31 [main] [INFO]  PatchLogExporter - patch (v39882)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -272,7 +272,6 @@
                 if (p > 0.0) {
                     p1 = -p1;
                 } else {
-                    p = -p;
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
@@ -304,7 +303,6 @@
                 delta = x1 - x0;
                 oldDelta = delta;
             }
-            i++;
         }
         throw new MaxIterationsExceededException(maximalIterationCount);
     }
2023-06-26 01:32:31 [main] [INFO]  PatchLogExporter - patch (v39896)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,15 +88,17 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
-    h                       = Double.NaN;
+    currentTime = Double.NaN;
+	currentTime             = Double.NaN;
+    currentTime = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    this.forward = forward;
+	finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
+    interpolatedState = null;
   }
 
   /** Simple constructor.
@@ -108,11 +110,16 @@
 
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
-    h                 = Double.NaN;
+    currentTime = Double.NaN;
     interpolatedTime  = Double.NaN;
 
     currentState            = y;
-    interpolatedState       = new double[y.length];
+    interpolatedTime = Double.NaN;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
@@ -269,10 +276,9 @@
   public double[] getInterpolatedState() throws DerivativeException {
 
       // lazy evaluation of the state
-      if (dirtyState) {
+      if (!finalized) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
-          computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
       }
 
2023-06-26 01:32:31 [main] [INFO]  PatchLogExporter - patch (v39896)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 01:32:31 [main] [INFO]  PatchLogExporter - patch (v39896)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -59,7 +59,6 @@
      */
     protected ConvergingAlgorithmImpl(final int defaultMaximalIterationCount,
                                       final double defaultAbsoluteAccuracy) {
-        this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
2023-06-26 01:32:31 [main] [INFO]  PatchLogExporter - patch (v39896)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -104,6 +104,8 @@
         g0Positive        = true;
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
+		previousEventTime = Double.NaN;
+		previousEventTime = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
         nextAction        = EventHandler.CONTINUE;
@@ -149,6 +151,7 @@
     public void reinitializeBegin(final double tStart, final double[] yStart)
         throws EventException {
         t0 = tStart;
+		pendingEvent = false;
         g0 = handler.g(tStart, yStart);
         g0Positive = g0 >= 0;
     }
@@ -213,7 +216,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
2023-06-26 01:32:31 [main] [INFO]  PatchLogExporter - patch (v39896)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 01:32:31 [main] [INFO]  PatchLogExporter - patch (v39896)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 01:32:31 [main] [INFO]  PatchLogExporter - patch (v39912)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,8 +88,9 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
-    h                       = Double.NaN;
+    currentTime = Double.NaN;
+	currentTime             = Double.NaN;
+    currentTime = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
@@ -112,7 +113,10 @@
     interpolatedTime  = Double.NaN;
 
     currentState            = y;
-    interpolatedState       = new double[y.length];
+    this.forward = true;
+	interpolatedTime = Double.NaN;
+	this.forward = true;
+	interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
@@ -217,6 +221,11 @@
   public void storeTime(final double t) {
 
     currentTime = t;
+	{
+		currentState = null;
+		interpolatedState = null;
+		interpolatedDerivatives = null;
+	}
     h           = currentTime - previousTime;
     setInterpolatedTime(t);
 
@@ -243,7 +252,7 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
+	currentState = null;
   }
 
   /** {@inheritDoc} */
2023-06-26 01:32:31 [main] [INFO]  PatchLogExporter - patch (v39912)
--- org.apache.commons.math.ode.sampling.DummyStepInterpolator
+++ org.apache.commons.math.ode.sampling.DummyStepInterpolator
@@ -63,7 +63,6 @@
    * @param forward integration direction indicator
    */
   public DummyStepInterpolator(final double[] y, final boolean forward) {
-    super(y, forward);
   }
 
   /** Copy constructor.
@@ -96,7 +95,6 @@
   @Override
   protected void computeInterpolatedStateAndDerivatives(final double theta, final double oneMinusThetaH)
     throws DerivativeException {
-      System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
   }
 
   /** Write the instance to an output channel.
2023-06-26 01:32:31 [main] [INFO]  PatchLogExporter - patch (v39912)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 01:32:31 [main] [INFO]  PatchLogExporter - patch (v39912)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -104,6 +104,7 @@
         g0Positive        = true;
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
+		previousEventTime = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
         nextAction        = EventHandler.CONTINUE;
@@ -247,7 +248,8 @@
 
             // no event during the whole step
             pendingEvent     = false;
-            pendingEventTime = Double.NaN;
+            previousEventTime = Double.NaN;
+			pendingEventTime = Double.NaN;
             return false;
 
         } catch (FunctionEvaluationException e) {
2023-06-26 01:32:31 [main] [INFO]  PatchLogExporter - patch (v39912)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 01:32:31 [main] [INFO]  PatchLogExporter - patch (v39912)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 01:32:31 [main] [INFO]  PatchLogExporter - patch (v39912)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -272,7 +272,6 @@
                 if (p > 0.0) {
                     p1 = -p1;
                 } else {
-                    p = -p;
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
@@ -304,7 +303,6 @@
                 delta = x1 - x0;
                 oldDelta = delta;
             }
-            i++;
         }
         throw new MaxIterationsExceededException(maximalIterationCount);
     }
2023-06-26 01:32:31 [main] [INFO]  PatchLogExporter - patch (v40632)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,15 +88,16 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
+    currentTime = Double.NaN;
+	currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
-    this.forward            = true;
-    this.dirtyState         = true;
+    this.forward = forward;
+	this.forward = forward;
+	finalized               = false;
   }
 
   /** Simple constructor.
@@ -112,7 +113,12 @@
     interpolatedTime  = Double.NaN;
 
     currentState            = y;
-    interpolatedState       = new double[y.length];
+    this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
@@ -269,7 +275,7 @@
   public double[] getInterpolatedState() throws DerivativeException {
 
       // lazy evaluation of the state
-      if (dirtyState) {
+      if (!finalized) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
2023-06-26 01:32:31 [main] [INFO]  PatchLogExporter - patch (v40632)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 01:32:31 [main] [INFO]  PatchLogExporter - patch (v40632)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -59,7 +59,6 @@
      */
     protected ConvergingAlgorithmImpl(final int defaultMaximalIterationCount,
                                       final double defaultAbsoluteAccuracy) {
-        this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
2023-06-26 01:32:31 [main] [INFO]  PatchLogExporter - patch (v40632)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -247,7 +247,8 @@
 
             // no event during the whole step
             pendingEvent     = false;
-            pendingEventTime = Double.NaN;
+            previousEventTime = Double.NaN;
+			pendingEventTime = Double.NaN;
             return false;
 
         } catch (FunctionEvaluationException e) {
2023-06-26 01:32:31 [main] [INFO]  PatchLogExporter - patch (v40632)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 01:32:31 [main] [INFO]  PatchLogExporter - patch (v40632)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 01:32:31 [main] [INFO]  PatchLogExporter - patch (v40632)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -272,7 +272,6 @@
                 if (p > 0.0) {
                     p1 = -p1;
                 } else {
-                    p = -p;
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
@@ -304,7 +303,6 @@
                 delta = x1 - x0;
                 oldDelta = delta;
             }
-            i++;
         }
         throw new MaxIterationsExceededException(maximalIterationCount);
     }
2023-06-26 01:32:31 [main] [INFO]  PatchLogExporter - patch (v41594)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -89,12 +89,14 @@
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
+    currentTime = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    this.forward = forward;
+	this.forward = forward;
+	finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -108,11 +110,17 @@
 
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
-    h                 = Double.NaN;
+    currentTime = Double.NaN;
     interpolatedTime  = Double.NaN;
 
     currentState            = y;
-    interpolatedState       = new double[y.length];
+    this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
@@ -269,7 +277,7 @@
   public double[] getInterpolatedState() throws DerivativeException {
 
       // lazy evaluation of the state
-      if (dirtyState) {
+      if (!finalized) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
@@ -284,7 +292,7 @@
   public double[] getInterpolatedDerivatives() throws DerivativeException {
 
       // lazy evaluation of the state
-      if (dirtyState) {
+      if (!finalized) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
2023-06-26 01:32:31 [main] [INFO]  PatchLogExporter - patch (v41594)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 01:32:31 [main] [INFO]  PatchLogExporter - patch (v41594)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -247,7 +247,9 @@
 
             // no event during the whole step
             pendingEvent     = false;
-            pendingEventTime = Double.NaN;
+            previousEventTime = Double.NaN;
+			previousEventTime = Double.NaN;
+			pendingEventTime = Double.NaN;
             return false;
 
         } catch (FunctionEvaluationException e) {
@@ -282,7 +284,6 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-06-26 01:32:31 [main] [INFO]  PatchLogExporter - patch (v41594)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 01:32:31 [main] [INFO]  PatchLogExporter - patch (v41594)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 01:32:31 [main] [INFO]  PatchLogExporter - patch (v41958)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,15 +88,19 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
-    h                       = Double.NaN;
+    currentTime = Double.NaN;
+	currentTime = Double.NaN;
+	currentTime             = Double.NaN;
+    currentTime = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    this.forward = forward;
+	finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
+    currentState = null;
+	this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -112,7 +116,13 @@
     interpolatedTime  = Double.NaN;
 
     currentState            = y;
-    interpolatedState       = new double[y.length];
+    this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
@@ -243,6 +253,7 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
+	currentState = null;
       dirtyState       = true;
   }
 
2023-06-26 01:32:31 [main] [INFO]  PatchLogExporter - patch (v41958)
--- org.apache.commons.math.ode.sampling.DummyStepInterpolator
+++ org.apache.commons.math.ode.sampling.DummyStepInterpolator
@@ -96,7 +96,6 @@
   @Override
   protected void computeInterpolatedStateAndDerivatives(final double theta, final double oneMinusThetaH)
     throws DerivativeException {
-      System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
   }
 
   /** Write the instance to an output channel.
2023-06-26 01:32:31 [main] [INFO]  PatchLogExporter - patch (v41958)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 01:32:31 [main] [INFO]  PatchLogExporter - patch (v41958)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -282,12 +282,9 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
-            // force the sign to its value "just after the event"
-            previousEventTime = t;
             g0Positive        = increasing;
             nextAction        = handler.eventOccurred(t, y, !(increasing ^ forward));
         } else {
2023-06-26 01:32:31 [main] [INFO]  PatchLogExporter - patch (v41958)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 01:32:31 [main] [INFO]  PatchLogExporter - patch (v41958)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 01:32:31 [main] [INFO]  KGenProgMain - Summary
Reached generation = 106
Generated variants = 41958
Syntax valid variants = 37809
Build succeeded variants = 21401
Time elapsed = 1 hours 34 minutes 58 seconds
Exit status = SUCCESS
