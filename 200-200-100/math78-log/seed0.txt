2023-06-25 17:42:44 [main] [WARN]  Configuration$Builder - The directory where kGenProg is running is different from the root directory of the given target project.
2023-06-25 17:42:44 [main] [WARN]  Configuration$Builder - If the target project includes test cases with file I/O, such test cases won't run correctly.
2023-06-25 17:42:44 [main] [WARN]  Configuration$Builder - We recommend you running kGenProg with the root directory of the target project as the current directory.
2023-06-25 17:42:45 [main] [INFO]  KGenProgMain - 
==================== kGenProg Configuration ====================
configPath = /Users/haradakanon/Downloads/kGenProg-1.8.2/example/math78/kgenprog-78.toml (set by command line)
rootDir = /Users/haradakanon/Downloads/kGenProg-1.8.2/example/math78 (set in config file)
productPaths = [/Users/haradakanon/Downloads/kGenProg-1.8.2/example/math78/src/main] (set in config file)
testPaths = [/Users/haradakanon/Downloads/kGenProg-1.8.2/example/math78/src/test] (set in config file)
classPaths = []
executionTests = [org.apache.commons.math.ode.events.EventStateTest] (set in config file)
outDir = kgenprog-out
logLevel = INFO (set in config file)
mutationGeneratingCount = 200 (set in config file)
crossoverGeneratingCount = 200 (set in config file)
headcount = 100
maxGeneration = 1000 (set in config file)
timeLimit = PT277H46M40S (set in config file)
testTimeLimit = PT3M (set in config file)
requiredSolutionsCount = 100 (set in config file)
randomSeed = 0 (set by command line)
scope = PACKAGE (set in config file)
faultLocalization = Zoltar (set in config file)
mutationType = Simple
crossoverType = Random
firstVariantSelectionStrategy = Random
secondVariantSelectionStrategy = Random
isPatchOutput = true (set in config file)
isHistoryRecord = false
currentDirectory = /Users/haradakanon/Desktop/研究/実験データ/afterResearch
version = 1.8.2
================================================================
2023-06-25 17:43:04 [main] [INFO]  KGenProgMain - initial failed tests (1/1)
org.apache.commons.math.ode.events.EventStateTest.closeEvents: function values at endpoints do not have different signs.  Endpoints: [89.999, 153.1], Values: [-0.066, -1,142.11]

2023-06-25 17:43:05 [main] [INFO]  KGenProgMain - GA started
2023-06-25 17:43:05 [main] [INFO]  KGenProgMain - entered the era of 1st generation.
2023-06-25 17:43:33 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 27 seconds
Variants: generated 200, build-succeeded 59, build-failed 109, syntax-invalid 11, redundant 21
Fitness: max 1(3), min 0(56), ave 0.051
Test execution time: sum 8478 ms, max 599 ms, min 71 ms
----------------------------------------------------------------

2023-06-25 17:43:33 [main] [INFO]  KGenProgMain - entered the era of 2nd generation.
2023-06-25 17:43:48 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 43 seconds
Variants: generated 200, build-succeeded 53, build-failed 104, syntax-invalid 13, redundant 30
Fitness: max 1(4), min 0(49), ave 0.075
Test execution time: sum 4704 ms, max 156 ms, min 68 ms
----------------------------------------------------------------

2023-06-25 17:43:48 [main] [INFO]  KGenProgMain - entered the era of 3rd generation.
2023-06-25 17:44:08 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 minutes 3 seconds
Variants: generated 400, build-succeeded 95, build-failed 112, syntax-invalid 47, redundant 146
Fitness: max 0(95), min 0(95), ave 0
Test execution time: sum 7741 ms, max 349 ms, min 64 ms
----------------------------------------------------------------

2023-06-25 17:44:08 [main] [INFO]  KGenProgMain - entered the era of 4th generation.
2023-06-25 17:44:32 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 minutes 26 seconds
Variants: generated 400, build-succeeded 126, build-failed 108, syntax-invalid 17, redundant 149
Fitness: max 1(3), min 0(123), ave 0.024
Test execution time: sum 9650 ms, max 179 ms, min 63 ms
----------------------------------------------------------------

2023-06-25 17:44:32 [main] [INFO]  KGenProgMain - entered the era of 5th generation.
2023-06-25 17:44:55 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 minutes 49 seconds
Variants: generated 400, build-succeeded 143, build-failed 106, syntax-invalid 21, redundant 130
Fitness: max 1(2), min 0(141), ave 0.014
Test execution time: sum 10884 ms, max 206 ms, min 63 ms
----------------------------------------------------------------

2023-06-25 17:44:55 [main] [INFO]  KGenProgMain - entered the era of 6th generation.
2023-06-25 17:45:20 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 minutes 15 seconds
Variants: generated 400, build-succeeded 152, build-failed 108, syntax-invalid 26, redundant 114
Fitness: max 1(3), min 0(149), ave 0.02
Test execution time: sum 11747 ms, max 287 ms, min 62 ms
----------------------------------------------------------------

2023-06-25 17:45:20 [main] [INFO]  KGenProgMain - entered the era of 7th generation.
2023-06-25 17:45:50 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 minutes 44 seconds
Variants: generated 400, build-succeeded 169, build-failed 118, syntax-invalid 31, redundant 82
Fitness: max 1(4), min 0(165), ave 0.024
Test execution time: sum 13627 ms, max 366 ms, min 62 ms
----------------------------------------------------------------

2023-06-25 17:45:50 [main] [INFO]  KGenProgMain - entered the era of 8th generation.
2023-06-25 17:46:17 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 minutes 12 seconds
Variants: generated 400, build-succeeded 179, build-failed 121, syntax-invalid 39, redundant 61
Fitness: max 0(179), min 0(179), ave 0
Test execution time: sum 13655 ms, max 231 ms, min 63 ms
----------------------------------------------------------------

2023-06-25 17:46:17 [main] [INFO]  KGenProgMain - entered the era of 9th generation.
2023-06-25 17:46:47 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 minutes 41 seconds
Variants: generated 400, build-succeeded 190, build-failed 110, syntax-invalid 25, redundant 75
Fitness: max 0(190), min 0(190), ave 0
Test execution time: sum 14963 ms, max 203 ms, min 62 ms
----------------------------------------------------------------

2023-06-25 17:46:47 [main] [INFO]  KGenProgMain - entered the era of 10th generation.
2023-06-25 17:47:15 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 minutes 9 seconds
Variants: generated 400, build-succeeded 185, build-failed 105, syntax-invalid 34, redundant 76
Fitness: max 1(1), min 0(184), ave 0.005
Test execution time: sum 14146 ms, max 285 ms, min 62 ms
----------------------------------------------------------------

2023-06-25 17:47:15 [main] [INFO]  KGenProgMain - entered the era of 11th generation.
2023-06-25 17:47:45 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 minutes 40 seconds
Variants: generated 400, build-succeeded 186, build-failed 114, syntax-invalid 19, redundant 81
Fitness: max 0(186), min 0(186), ave 0
Test execution time: sum 14068 ms, max 217 ms, min 62 ms
----------------------------------------------------------------

2023-06-25 17:47:45 [main] [INFO]  KGenProgMain - entered the era of 12th generation.
2023-06-25 17:48:15 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 minutes 10 seconds
Variants: generated 400, build-succeeded 202, build-failed 114, syntax-invalid 23, redundant 61
Fitness: max 0(202), min 0(202), ave 0
Test execution time: sum 15012 ms, max 323 ms, min 62 ms
----------------------------------------------------------------

2023-06-25 17:48:15 [main] [INFO]  KGenProgMain - entered the era of 13th generation.
2023-06-25 17:48:44 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 minutes 39 seconds
Variants: generated 400, build-succeeded 188, build-failed 112, syntax-invalid 32, redundant 68
Fitness: max 1(1), min 0(187), ave 0.005
Test execution time: sum 13982 ms, max 198 ms, min 62 ms
----------------------------------------------------------------

2023-06-25 17:48:44 [main] [INFO]  KGenProgMain - entered the era of 14th generation.
2023-06-25 17:49:17 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 minutes 12 seconds
Variants: generated 400, build-succeeded 198, build-failed 126, syntax-invalid 32, redundant 44
Fitness: max 1(1), min 0(197), ave 0.005
Test execution time: sum 15448 ms, max 230 ms, min 63 ms
----------------------------------------------------------------

2023-06-25 17:49:17 [main] [INFO]  KGenProgMain - entered the era of 15th generation.
2023-06-25 17:49:49 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 minutes 44 seconds
Variants: generated 400, build-succeeded 206, build-failed 106, syntax-invalid 29, redundant 59
Fitness: max 1(1), min 0(205), ave 0.005
Test execution time: sum 15295 ms, max 197 ms, min 62 ms
----------------------------------------------------------------

2023-06-25 17:49:49 [main] [INFO]  KGenProgMain - entered the era of 16th generation.
2023-06-25 17:50:24 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 minutes 18 seconds
Variants: generated 400, build-succeeded 206, build-failed 118, syntax-invalid 34, redundant 42
Fitness: max 1(1), min 0(205), ave 0.005
Test execution time: sum 15661 ms, max 252 ms, min 61 ms
----------------------------------------------------------------

2023-06-25 17:50:24 [main] [INFO]  KGenProgMain - entered the era of 17th generation.
2023-06-25 17:50:59 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 minutes 54 seconds
Variants: generated 400, build-succeeded 209, build-failed 115, syntax-invalid 32, redundant 44
Fitness: max 0(209), min 0(209), ave 0
Test execution time: sum 17271 ms, max 281 ms, min 62 ms
----------------------------------------------------------------

2023-06-25 17:50:59 [main] [INFO]  KGenProgMain - entered the era of 18th generation.
2023-06-25 17:51:34 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 minutes 29 seconds
Variants: generated 400, build-succeeded 206, build-failed 124, syntax-invalid 39, redundant 31
Fitness: max 1(1), min 0(205), ave 0.005
Test execution time: sum 16290 ms, max 199 ms, min 62 ms
----------------------------------------------------------------

2023-06-25 17:51:34 [main] [INFO]  KGenProgMain - entered the era of 19th generation.
2023-06-25 17:52:08 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 minutes 3 seconds
Variants: generated 400, build-succeeded 198, build-failed 108, syntax-invalid 27, redundant 67
Fitness: max 0(198), min 0(198), ave 0
Test execution time: sum 15334 ms, max 275 ms, min 62 ms
----------------------------------------------------------------

2023-06-25 17:52:08 [main] [INFO]  KGenProgMain - entered the era of 20th generation.
2023-06-25 17:55:43 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 minutes 38 seconds
Variants: generated 400, build-succeeded 217, build-failed 119, syntax-invalid 26, redundant 38
Fitness: max 1(1), min 0(216), ave 0.005
Test execution time: sum 195791 ms, max 180098 ms, min 61 ms
----------------------------------------------------------------

2023-06-25 17:55:43 [main] [INFO]  KGenProgMain - entered the era of 21st generation.
2023-06-25 17:56:16 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 13 minutes 11 seconds
Variants: generated 400, build-succeeded 225, build-failed 112, syntax-invalid 28, redundant 35
Fitness: max 0(225), min 0(225), ave 0
Test execution time: sum 15624 ms, max 310 ms, min 60 ms
----------------------------------------------------------------

2023-06-25 17:56:16 [main] [INFO]  KGenProgMain - entered the era of 22nd generation.
2023-06-25 17:56:51 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 13 minutes 46 seconds
Variants: generated 400, build-succeeded 222, build-failed 108, syntax-invalid 18, redundant 52
Fitness: max 0(222), min 0(222), ave 0
Test execution time: sum 15887 ms, max 161 ms, min 60 ms
----------------------------------------------------------------

2023-06-25 17:56:51 [main] [INFO]  KGenProgMain - entered the era of 23rd generation.
2023-06-25 18:03:27 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 20 minutes 22 seconds
Variants: generated 400, build-succeeded 226, build-failed 111, syntax-invalid 22, redundant 41
Fitness: max 0(226), min 0(226), ave 0
Test execution time: sum 376581 ms, max 180078 ms, min 61 ms
----------------------------------------------------------------

2023-06-25 18:03:27 [main] [INFO]  KGenProgMain - entered the era of 24th generation.
2023-06-25 18:04:05 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 20 minutes 59 seconds
Variants: generated 400, build-succeeded 239, build-failed 113, syntax-invalid 18, redundant 30
Fitness: max 0(239), min 0(239), ave 0
Test execution time: sum 17411 ms, max 181 ms, min 60 ms
----------------------------------------------------------------

2023-06-25 18:04:05 [main] [INFO]  KGenProgMain - entered the era of 25th generation.
2023-06-25 18:04:40 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 21 minutes 35 seconds
Variants: generated 400, build-succeeded 226, build-failed 119, syntax-invalid 32, redundant 23
Fitness: max 0(226), min 0(226), ave 0
Test execution time: sum 15516 ms, max 141 ms, min 61 ms
----------------------------------------------------------------

2023-06-25 18:04:40 [main] [INFO]  KGenProgMain - entered the era of 26th generation.
2023-06-25 18:05:19 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 22 minutes 14 seconds
Variants: generated 400, build-succeeded 212, build-failed 129, syntax-invalid 39, redundant 20
Fitness: max 1(3), min 0(209), ave 0.014
Test execution time: sum 16623 ms, max 784 ms, min 61 ms
----------------------------------------------------------------

2023-06-25 18:05:19 [main] [INFO]  KGenProgMain - entered the era of 27th generation.
2023-06-25 18:05:55 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 22 minutes 50 seconds
Variants: generated 400, build-succeeded 227, build-failed 120, syntax-invalid 14, redundant 39
Fitness: max 1(2), min 0(225), ave 0.009
Test execution time: sum 15456 ms, max 235 ms, min 61 ms
----------------------------------------------------------------

2023-06-25 18:05:55 [main] [INFO]  KGenProgMain - entered the era of 28th generation.
2023-06-25 18:06:33 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 23 minutes 27 seconds
Variants: generated 400, build-succeeded 236, build-failed 107, syntax-invalid 9, redundant 48
Fitness: max 1(2), min 0(234), ave 0.008
Test execution time: sum 16634 ms, max 268 ms, min 61 ms
----------------------------------------------------------------

2023-06-25 18:06:33 [main] [INFO]  KGenProgMain - entered the era of 29th generation.
2023-06-25 18:07:08 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 24 minutes 3 seconds
Variants: generated 400, build-succeeded 228, build-failed 117, syntax-invalid 13, redundant 42
Fitness: max 1(8), min 0(220), ave 0.035
Test execution time: sum 15940 ms, max 189 ms, min 61 ms
----------------------------------------------------------------

2023-06-25 18:07:08 [main] [INFO]  KGenProgMain - entered the era of 30th generation.
2023-06-25 18:07:47 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 24 minutes 42 seconds
Variants: generated 400, build-succeeded 230, build-failed 121, syntax-invalid 11, redundant 38
Fitness: max 0(230), min 0(230), ave 0
Test execution time: sum 16368 ms, max 304 ms, min 61 ms
----------------------------------------------------------------

2023-06-25 18:07:47 [main] [INFO]  KGenProgMain - entered the era of 31st generation.
2023-06-25 18:08:25 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 25 minutes 20 seconds
Variants: generated 400, build-succeeded 236, build-failed 106, syntax-invalid 11, redundant 47
Fitness: max 1(5), min 0(231), ave 0.021
Test execution time: sum 16365 ms, max 243 ms, min 62 ms
----------------------------------------------------------------

2023-06-25 18:08:25 [main] [INFO]  KGenProgMain - entered the era of 32nd generation.
2023-06-25 18:09:04 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 25 minutes 58 seconds
Variants: generated 400, build-succeeded 228, build-failed 122, syntax-invalid 24, redundant 26
Fitness: max 1(5), min 0(223), ave 0.022
Test execution time: sum 16451 ms, max 297 ms, min 61 ms
----------------------------------------------------------------

2023-06-25 18:09:04 [main] [INFO]  KGenProgMain - entered the era of 33rd generation.
2023-06-25 18:09:43 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 26 minutes 38 seconds
Variants: generated 400, build-succeeded 237, build-failed 108, syntax-invalid 9, redundant 46
Fitness: max 1(1), min 0(236), ave 0.004
Test execution time: sum 16785 ms, max 219 ms, min 62 ms
----------------------------------------------------------------

2023-06-25 18:09:43 [main] [INFO]  KGenProgMain - entered the era of 34th generation.
2023-06-25 18:10:22 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 27 minutes 17 seconds
Variants: generated 400, build-succeeded 212, build-failed 119, syntax-invalid 24, redundant 45
Fitness: max 0(212), min 0(212), ave 0
Test execution time: sum 16221 ms, max 209 ms, min 62 ms
----------------------------------------------------------------

2023-06-25 18:10:22 [main] [INFO]  KGenProgMain - entered the era of 35th generation.
2023-06-25 18:11:01 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 27 minutes 56 seconds
Variants: generated 400, build-succeeded 234, build-failed 108, syntax-invalid 17, redundant 41
Fitness: max 0(234), min 0(234), ave 0
Test execution time: sum 16635 ms, max 166 ms, min 63 ms
----------------------------------------------------------------

2023-06-25 18:11:01 [main] [INFO]  KGenProgMain - entered the era of 36th generation.
2023-06-25 18:11:42 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 28 minutes 36 seconds
Variants: generated 400, build-succeeded 227, build-failed 98, syntax-invalid 18, redundant 57
Fitness: max 0(227), min 0(227), ave 0
Test execution time: sum 17384 ms, max 364 ms, min 62 ms
----------------------------------------------------------------

2023-06-25 18:11:42 [main] [INFO]  KGenProgMain - entered the era of 37th generation.
2023-06-25 18:12:20 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 29 minutes 15 seconds
Variants: generated 400, build-succeeded 228, build-failed 109, syntax-invalid 33, redundant 30
Fitness: max 1(1), min 0(227), ave 0.004
Test execution time: sum 16594 ms, max 284 ms, min 63 ms
----------------------------------------------------------------

2023-06-25 18:12:20 [main] [INFO]  KGenProgMain - entered the era of 38th generation.
2023-06-25 18:13:01 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 29 minutes 56 seconds
Variants: generated 400, build-succeeded 226, build-failed 109, syntax-invalid 17, redundant 48
Fitness: max 0(226), min 0(226), ave 0
Test execution time: sum 18188 ms, max 296 ms, min 62 ms
----------------------------------------------------------------

2023-06-25 18:13:01 [main] [INFO]  KGenProgMain - entered the era of 39th generation.
2023-06-25 18:13:39 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 30 minutes 34 seconds
Variants: generated 400, build-succeeded 216, build-failed 105, syntax-invalid 18, redundant 61
Fitness: max 0(216), min 0(216), ave 0
Test execution time: sum 15440 ms, max 191 ms, min 62 ms
----------------------------------------------------------------

2023-06-25 18:13:39 [main] [INFO]  KGenProgMain - entered the era of 40th generation.
2023-06-25 18:20:21 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 37 minutes 16 seconds
Variants: generated 400, build-succeeded 222, build-failed 130, syntax-invalid 28, redundant 20
Fitness: max 0(222), min 0(222), ave 0
Test execution time: sum 376920 ms, max 180092 ms, min 62 ms
----------------------------------------------------------------

2023-06-25 18:20:21 [main] [INFO]  KGenProgMain - entered the era of 41st generation.
2023-06-25 18:21:01 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 37 minutes 56 seconds
Variants: generated 400, build-succeeded 235, build-failed 109, syntax-invalid 29, redundant 27
Fitness: max 0(235), min 0(235), ave 0
Test execution time: sum 16576 ms, max 242 ms, min 61 ms
----------------------------------------------------------------

2023-06-25 18:21:01 [main] [INFO]  KGenProgMain - entered the era of 42nd generation.
2023-06-25 18:21:40 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 38 minutes 35 seconds
Variants: generated 400, build-succeeded 225, build-failed 109, syntax-invalid 13, redundant 53
Fitness: max 0(225), min 0(225), ave 0
Test execution time: sum 16041 ms, max 171 ms, min 63 ms
----------------------------------------------------------------

2023-06-25 18:21:40 [main] [INFO]  KGenProgMain - entered the era of 43rd generation.
2023-06-25 18:22:20 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 39 minutes 15 seconds
Variants: generated 400, build-succeeded 223, build-failed 117, syntax-invalid 9, redundant 51
Fitness: max 0(223), min 0(223), ave 0
Test execution time: sum 15820 ms, max 181 ms, min 63 ms
----------------------------------------------------------------

2023-06-25 18:22:20 [main] [INFO]  KGenProgMain - entered the era of 44th generation.
2023-06-25 18:23:01 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 39 minutes 55 seconds
Variants: generated 400, build-succeeded 234, build-failed 100, syntax-invalid 11, redundant 55
Fitness: max 0(234), min 0(234), ave 0
Test execution time: sum 16733 ms, max 158 ms, min 63 ms
----------------------------------------------------------------

2023-06-25 18:23:01 [main] [INFO]  KGenProgMain - entered the era of 45th generation.
2023-06-25 18:23:40 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 40 minutes 34 seconds
Variants: generated 400, build-succeeded 226, build-failed 113, syntax-invalid 14, redundant 47
Fitness: max 0(226), min 0(226), ave 0
Test execution time: sum 16136 ms, max 208 ms, min 62 ms
----------------------------------------------------------------

2023-06-25 18:23:40 [main] [INFO]  KGenProgMain - entered the era of 46th generation.
2023-06-25 18:24:21 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 41 minutes 16 seconds
Variants: generated 400, build-succeeded 217, build-failed 112, syntax-invalid 10, redundant 61
Fitness: max 0(217), min 0(217), ave 0
Test execution time: sum 15442 ms, max 250 ms, min 62 ms
----------------------------------------------------------------

2023-06-25 18:24:21 [main] [INFO]  KGenProgMain - entered the era of 47th generation.
2023-06-25 18:25:01 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 41 minutes 55 seconds
Variants: generated 400, build-succeeded 223, build-failed 112, syntax-invalid 22, redundant 43
Fitness: max 0(223), min 0(223), ave 0
Test execution time: sum 15598 ms, max 133 ms, min 62 ms
----------------------------------------------------------------

2023-06-25 18:25:01 [main] [INFO]  KGenProgMain - entered the era of 48th generation.
2023-06-25 18:25:44 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 42 minutes 39 seconds
Variants: generated 400, build-succeeded 232, build-failed 106, syntax-invalid 10, redundant 52
Fitness: max 0(232), min 0(232), ave 0
Test execution time: sum 17112 ms, max 230 ms, min 62 ms
----------------------------------------------------------------

2023-06-25 18:25:44 [main] [INFO]  KGenProgMain - entered the era of 49th generation.
2023-06-25 18:26:27 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 43 minutes 22 seconds
Variants: generated 400, build-succeeded 220, build-failed 113, syntax-invalid 8, redundant 59
Fitness: max 0(220), min 0(220), ave 0
Test execution time: sum 16909 ms, max 254 ms, min 63 ms
----------------------------------------------------------------

2023-06-25 18:26:27 [main] [INFO]  KGenProgMain - entered the era of 50th generation.
2023-06-25 18:30:08 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 47 minutes 3 seconds
Variants: generated 400, build-succeeded 226, build-failed 124, syntax-invalid 24, redundant 26
Fitness: max 0(226), min 0(226), ave 0
Test execution time: sum 196482 ms, max 180083 ms, min 63 ms
----------------------------------------------------------------

2023-06-25 18:30:08 [main] [INFO]  KGenProgMain - entered the era of 51st generation.
2023-06-25 18:30:55 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 47 minutes 50 seconds
Variants: generated 400, build-succeeded 233, build-failed 99, syntax-invalid 22, redundant 46
Fitness: max 0(233), min 0(233), ave 0
Test execution time: sum 18879 ms, max 389 ms, min 62 ms
----------------------------------------------------------------

2023-06-25 18:30:55 [main] [INFO]  KGenProgMain - entered the era of 52nd generation.
2023-06-25 18:31:43 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 48 minutes 38 seconds
Variants: generated 400, build-succeeded 229, build-failed 120, syntax-invalid 10, redundant 41
Fitness: max 0(229), min 0(229), ave 0
Test execution time: sum 19123 ms, max 329 ms, min 63 ms
----------------------------------------------------------------

2023-06-25 18:31:43 [main] [INFO]  KGenProgMain - entered the era of 53rd generation.
2023-06-25 18:32:29 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 49 minutes 24 seconds
Variants: generated 400, build-succeeded 227, build-failed 120, syntax-invalid 17, redundant 36
Fitness: max 0(227), min 0(227), ave 0
Test execution time: sum 18549 ms, max 263 ms, min 64 ms
----------------------------------------------------------------

2023-06-25 18:32:29 [main] [INFO]  KGenProgMain - entered the era of 54th generation.
2023-06-25 18:33:19 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 50 minutes 14 seconds
Variants: generated 400, build-succeeded 224, build-failed 110, syntax-invalid 16, redundant 50
Fitness: max 0(224), min 0(224), ave 0
Test execution time: sum 19011 ms, max 310 ms, min 64 ms
----------------------------------------------------------------

2023-06-25 18:33:19 [main] [INFO]  KGenProgMain - entered the era of 55th generation.
2023-06-25 18:34:12 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 51 minutes 7 seconds
Variants: generated 400, build-succeeded 220, build-failed 110, syntax-invalid 22, redundant 48
Fitness: max 0(220), min 0(220), ave 0
Test execution time: sum 21298 ms, max 468 ms, min 66 ms
----------------------------------------------------------------

2023-06-25 18:34:12 [main] [INFO]  KGenProgMain - entered the era of 56th generation.
2023-06-25 18:35:09 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 52 minutes 4 seconds
Variants: generated 400, build-succeeded 228, build-failed 110, syntax-invalid 18, redundant 44
Fitness: max 0(228), min 0(228), ave 0
Test execution time: sum 23392 ms, max 429 ms, min 64 ms
----------------------------------------------------------------

2023-06-25 18:35:09 [main] [INFO]  KGenProgMain - entered the era of 57th generation.
2023-06-25 18:36:00 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 52 minutes 55 seconds
Variants: generated 400, build-succeeded 229, build-failed 119, syntax-invalid 17, redundant 35
Fitness: max 0(229), min 0(229), ave 0
Test execution time: sum 17846 ms, max 200 ms, min 63 ms
----------------------------------------------------------------

2023-06-25 18:36:00 [main] [INFO]  KGenProgMain - entered the era of 58th generation.
2023-06-25 18:36:45 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 53 minutes 40 seconds
Variants: generated 400, build-succeeded 220, build-failed 111, syntax-invalid 21, redundant 48
Fitness: max 0(220), min 0(220), ave 0
Test execution time: sum 17125 ms, max 271 ms, min 64 ms
----------------------------------------------------------------

2023-06-25 18:36:45 [main] [INFO]  KGenProgMain - entered the era of 59th generation.
2023-06-25 18:37:32 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 54 minutes 26 seconds
Variants: generated 400, build-succeeded 227, build-failed 114, syntax-invalid 23, redundant 36
Fitness: max 0(227), min 0(227), ave 0
Test execution time: sum 16932 ms, max 254 ms, min 65 ms
----------------------------------------------------------------

2023-06-25 18:37:32 [main] [INFO]  KGenProgMain - entered the era of 60th generation.
2023-06-25 18:38:23 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 55 minutes 18 seconds
Variants: generated 400, build-succeeded 234, build-failed 120, syntax-invalid 16, redundant 30
Fitness: max 0(234), min 0(234), ave 0
Test execution time: sum 18967 ms, max 259 ms, min 64 ms
----------------------------------------------------------------

2023-06-25 18:38:23 [main] [INFO]  KGenProgMain - entered the era of 61st generation.
2023-06-25 18:39:11 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 56 minutes 5 seconds
Variants: generated 400, build-succeeded 222, build-failed 126, syntax-invalid 32, redundant 20
Fitness: max 1(2), min 0(220), ave 0.009
Test execution time: sum 16925 ms, max 251 ms, min 62 ms
----------------------------------------------------------------

2023-06-25 18:39:11 [main] [INFO]  KGenProgMain - entered the era of 62nd generation.
2023-06-25 18:40:01 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 56 minutes 55 seconds
Variants: generated 400, build-succeeded 228, build-failed 113, syntax-invalid 16, redundant 43
Fitness: max 0(228), min 0(228), ave 0
Test execution time: sum 17585 ms, max 249 ms, min 64 ms
----------------------------------------------------------------

2023-06-25 18:40:01 [main] [INFO]  KGenProgMain - entered the era of 63rd generation.
2023-06-25 18:40:48 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 57 minutes 43 seconds
Variants: generated 400, build-succeeded 213, build-failed 113, syntax-invalid 26, redundant 48
Fitness: max 0(213), min 0(213), ave 0
Test execution time: sum 16381 ms, max 268 ms, min 64 ms
----------------------------------------------------------------

2023-06-25 18:40:48 [main] [INFO]  KGenProgMain - entered the era of 64th generation.
2023-06-25 18:41:39 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 58 minutes 33 seconds
Variants: generated 400, build-succeeded 234, build-failed 108, syntax-invalid 16, redundant 42
Fitness: max 0(234), min 0(234), ave 0
Test execution time: sum 18664 ms, max 278 ms, min 64 ms
----------------------------------------------------------------

2023-06-25 18:41:39 [main] [INFO]  KGenProgMain - entered the era of 65th generation.
2023-06-25 18:42:26 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 59 minutes 21 seconds
Variants: generated 400, build-succeeded 214, build-failed 106, syntax-invalid 29, redundant 51
Fitness: max 0(214), min 0(214), ave 0
Test execution time: sum 16425 ms, max 298 ms, min 66 ms
----------------------------------------------------------------

2023-06-25 18:42:26 [main] [INFO]  KGenProgMain - entered the era of 66th generation.
2023-06-25 18:43:14 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 9 seconds
Variants: generated 400, build-succeeded 223, build-failed 114, syntax-invalid 19, redundant 44
Fitness: max 0(223), min 0(223), ave 0
Test execution time: sum 16807 ms, max 254 ms, min 63 ms
----------------------------------------------------------------

2023-06-25 18:43:14 [main] [INFO]  KGenProgMain - entered the era of 67th generation.
2023-06-25 18:44:03 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 58 seconds
Variants: generated 400, build-succeeded 225, build-failed 104, syntax-invalid 26, redundant 45
Fitness: max 0(225), min 0(225), ave 0
Test execution time: sum 16653 ms, max 228 ms, min 63 ms
----------------------------------------------------------------

2023-06-25 18:44:03 [main] [INFO]  KGenProgMain - entered the era of 68th generation.
2023-06-25 18:44:53 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 1 minutes 47 seconds
Variants: generated 400, build-succeeded 224, build-failed 113, syntax-invalid 18, redundant 45
Fitness: max 0(224), min 0(224), ave 0
Test execution time: sum 16802 ms, max 249 ms, min 63 ms
----------------------------------------------------------------

2023-06-25 18:44:53 [main] [INFO]  KGenProgMain - entered the era of 69th generation.
2023-06-25 18:45:42 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 2 minutes 37 seconds
Variants: generated 400, build-succeeded 227, build-failed 117, syntax-invalid 19, redundant 37
Fitness: max 0(227), min 0(227), ave 0
Test execution time: sum 16889 ms, max 259 ms, min 63 ms
----------------------------------------------------------------

2023-06-25 18:45:42 [main] [INFO]  KGenProgMain - entered the era of 70th generation.
2023-06-25 18:46:31 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 3 minutes 26 seconds
Variants: generated 400, build-succeeded 219, build-failed 124, syntax-invalid 20, redundant 37
Fitness: max 0(219), min 0(219), ave 0
Test execution time: sum 16082 ms, max 184 ms, min 64 ms
----------------------------------------------------------------

2023-06-25 18:46:31 [main] [INFO]  KGenProgMain - entered the era of 71st generation.
2023-06-25 18:47:19 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 4 minutes 14 seconds
Variants: generated 400, build-succeeded 221, build-failed 108, syntax-invalid 24, redundant 47
Fitness: max 0(221), min 0(221), ave 0
Test execution time: sum 16001 ms, max 187 ms, min 63 ms
----------------------------------------------------------------

2023-06-25 18:47:19 [main] [INFO]  KGenProgMain - entered the era of 72nd generation.
2023-06-25 18:48:07 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 5 minutes 2 seconds
Variants: generated 400, build-succeeded 222, build-failed 112, syntax-invalid 20, redundant 46
Fitness: max 0(222), min 0(222), ave 0
Test execution time: sum 16559 ms, max 216 ms, min 65 ms
----------------------------------------------------------------

2023-06-25 18:48:07 [main] [INFO]  KGenProgMain - entered the era of 73rd generation.
2023-06-25 18:48:58 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 5 minutes 52 seconds
Variants: generated 400, build-succeeded 221, build-failed 133, syntax-invalid 25, redundant 21
Fitness: max 0(221), min 0(221), ave 0
Test execution time: sum 16081 ms, max 167 ms, min 63 ms
----------------------------------------------------------------

2023-06-25 18:48:58 [main] [INFO]  KGenProgMain - entered the era of 74th generation.
2023-06-25 18:49:45 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 6 minutes 40 seconds
Variants: generated 400, build-succeeded 219, build-failed 109, syntax-invalid 20, redundant 52
Fitness: max 0(219), min 0(219), ave 0
Test execution time: sum 16382 ms, max 217 ms, min 64 ms
----------------------------------------------------------------

2023-06-25 18:49:45 [main] [INFO]  KGenProgMain - entered the era of 75th generation.
2023-06-25 18:50:39 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 7 minutes 34 seconds
Variants: generated 400, build-succeeded 214, build-failed 115, syntax-invalid 28, redundant 43
Fitness: max 0(214), min 0(214), ave 0
Test execution time: sum 18035 ms, max 285 ms, min 65 ms
----------------------------------------------------------------

2023-06-25 18:50:39 [main] [INFO]  KGenProgMain - entered the era of 76th generation.
2023-06-25 18:51:30 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 8 minutes 25 seconds
Variants: generated 400, build-succeeded 227, build-failed 113, syntax-invalid 18, redundant 42
Fitness: max 0(227), min 0(227), ave 0
Test execution time: sum 17818 ms, max 308 ms, min 64 ms
----------------------------------------------------------------

2023-06-25 18:51:30 [main] [INFO]  KGenProgMain - entered the era of 77th generation.
2023-06-25 18:52:20 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 9 minutes 14 seconds
Variants: generated 400, build-succeeded 221, build-failed 110, syntax-invalid 20, redundant 49
Fitness: max 0(221), min 0(221), ave 0
Test execution time: sum 16634 ms, max 251 ms, min 64 ms
----------------------------------------------------------------

2023-06-25 18:52:20 [main] [INFO]  KGenProgMain - entered the era of 78th generation.
2023-06-25 18:53:10 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 10 minutes 4 seconds
Variants: generated 400, build-succeeded 222, build-failed 116, syntax-invalid 40, redundant 22
Fitness: max 1(3), min 0(219), ave 0.014
Test execution time: sum 16311 ms, max 228 ms, min 63 ms
----------------------------------------------------------------

2023-06-25 18:53:10 [main] [INFO]  KGenProgMain - entered the era of 79th generation.
2023-06-25 18:54:01 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 10 minutes 56 seconds
Variants: generated 400, build-succeeded 224, build-failed 110, syntax-invalid 17, redundant 49
Fitness: max 0(224), min 0(224), ave 0
Test execution time: sum 16260 ms, max 225 ms, min 62 ms
----------------------------------------------------------------

2023-06-25 18:54:01 [main] [INFO]  KGenProgMain - entered the era of 80th generation.
2023-06-25 18:54:51 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 11 minutes 45 seconds
Variants: generated 400, build-succeeded 220, build-failed 109, syntax-invalid 27, redundant 44
Fitness: max 0(220), min 0(220), ave 0
Test execution time: sum 16054 ms, max 220 ms, min 61 ms
----------------------------------------------------------------

2023-06-25 18:54:51 [main] [INFO]  KGenProgMain - entered the era of 81st generation.
2023-06-25 18:55:42 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 12 minutes 37 seconds
Variants: generated 400, build-succeeded 222, build-failed 106, syntax-invalid 19, redundant 53
Fitness: max 0(222), min 0(222), ave 0
Test execution time: sum 16494 ms, max 225 ms, min 64 ms
----------------------------------------------------------------

2023-06-25 18:55:42 [main] [INFO]  KGenProgMain - entered the era of 82nd generation.
2023-06-25 18:56:37 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 13 minutes 32 seconds
Variants: generated 400, build-succeeded 240, build-failed 105, syntax-invalid 12, redundant 43
Fitness: max 0(240), min 0(240), ave 0
Test execution time: sum 17877 ms, max 262 ms, min 63 ms
----------------------------------------------------------------

2023-06-25 18:56:37 [main] [INFO]  KGenProgMain - entered the era of 83rd generation.
2023-06-25 18:57:31 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 14 minutes 26 seconds
Variants: generated 400, build-succeeded 225, build-failed 110, syntax-invalid 20, redundant 45
Fitness: max 0(225), min 0(225), ave 0
Test execution time: sum 16731 ms, max 222 ms, min 63 ms
----------------------------------------------------------------

2023-06-25 18:57:31 [main] [INFO]  KGenProgMain - entered the era of 84th generation.
2023-06-25 18:58:23 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 15 minutes 18 seconds
Variants: generated 400, build-succeeded 220, build-failed 113, syntax-invalid 22, redundant 45
Fitness: max 0(220), min 0(220), ave 0
Test execution time: sum 16588 ms, max 236 ms, min 64 ms
----------------------------------------------------------------

2023-06-25 18:58:23 [main] [INFO]  KGenProgMain - entered the era of 85th generation.
2023-06-25 18:59:15 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 16 minutes 9 seconds
Variants: generated 400, build-succeeded 231, build-failed 124, syntax-invalid 21, redundant 24
Fitness: max 0(231), min 0(231), ave 0
Test execution time: sum 16913 ms, max 285 ms, min 61 ms
----------------------------------------------------------------

2023-06-25 18:59:15 [main] [INFO]  KGenProgMain - entered the era of 86th generation.
2023-06-25 19:00:10 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 17 minutes 4 seconds
Variants: generated 400, build-succeeded 241, build-failed 106, syntax-invalid 9, redundant 44
Fitness: max 0(241), min 0(241), ave 0
Test execution time: sum 18511 ms, max 261 ms, min 63 ms
----------------------------------------------------------------

2023-06-25 19:00:10 [main] [INFO]  KGenProgMain - entered the era of 87th generation.
2023-06-25 19:01:06 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 18 minutes 0 seconds
Variants: generated 400, build-succeeded 239, build-failed 105, syntax-invalid 12, redundant 44
Fitness: max 0(239), min 0(239), ave 0
Test execution time: sum 18495 ms, max 219 ms, min 64 ms
----------------------------------------------------------------

2023-06-25 19:01:06 [main] [INFO]  KGenProgMain - entered the era of 88th generation.
2023-06-25 19:01:59 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 18 minutes 53 seconds
Variants: generated 400, build-succeeded 216, build-failed 108, syntax-invalid 12, redundant 64
Fitness: max 0(216), min 0(216), ave 0
Test execution time: sum 16355 ms, max 211 ms, min 64 ms
----------------------------------------------------------------

2023-06-25 19:01:59 [main] [INFO]  KGenProgMain - entered the era of 89th generation.
2023-06-25 19:02:54 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 19 minutes 48 seconds
Variants: generated 400, build-succeeded 243, build-failed 96, syntax-invalid 8, redundant 53
Fitness: max 0(243), min 0(243), ave 0
Test execution time: sum 17818 ms, max 217 ms, min 62 ms
----------------------------------------------------------------

2023-06-25 19:02:54 [main] [INFO]  KGenProgMain - entered the era of 90th generation.
2023-06-25 19:03:47 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 20 minutes 42 seconds
Variants: generated 400, build-succeeded 229, build-failed 115, syntax-invalid 16, redundant 40
Fitness: max 0(229), min 0(229), ave 0
Test execution time: sum 16839 ms, max 244 ms, min 63 ms
----------------------------------------------------------------

2023-06-25 19:03:47 [main] [INFO]  KGenProgMain - entered the era of 91st generation.
2023-06-25 19:04:42 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 21 minutes 37 seconds
Variants: generated 400, build-succeeded 230, build-failed 116, syntax-invalid 15, redundant 39
Fitness: max 0(230), min 0(230), ave 0
Test execution time: sum 17431 ms, max 190 ms, min 64 ms
----------------------------------------------------------------

2023-06-25 19:04:42 [main] [INFO]  KGenProgMain - entered the era of 92nd generation.
2023-06-25 19:05:36 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 22 minutes 31 seconds
Variants: generated 400, build-succeeded 239, build-failed 108, syntax-invalid 6, redundant 47
Fitness: max 0(239), min 0(239), ave 0
Test execution time: sum 17519 ms, max 214 ms, min 63 ms
----------------------------------------------------------------

2023-06-25 19:05:36 [main] [INFO]  KGenProgMain - entered the era of 93rd generation.
2023-06-25 19:06:39 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 23 minutes 34 seconds
Variants: generated 400, build-succeeded 239, build-failed 110, syntax-invalid 8, redundant 43
Fitness: max 0(239), min 0(239), ave 0
Test execution time: sum 21714 ms, max 361 ms, min 66 ms
----------------------------------------------------------------

2023-06-25 19:06:39 [main] [INFO]  KGenProgMain - entered the era of 94th generation.
2023-06-25 19:07:39 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 24 minutes 34 seconds
Variants: generated 400, build-succeeded 234, build-failed 125, syntax-invalid 12, redundant 29
Fitness: max 0(234), min 0(234), ave 0
Test execution time: sum 19350 ms, max 372 ms, min 65 ms
----------------------------------------------------------------

2023-06-25 19:07:39 [main] [INFO]  KGenProgMain - entered the era of 95th generation.
2023-06-25 19:08:50 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 25 minutes 44 seconds
Variants: generated 400, build-succeeded 247, build-failed 109, syntax-invalid 3, redundant 41
Fitness: max 0(247), min 0(247), ave 0
Test execution time: sum 24389 ms, max 274 ms, min 64 ms
----------------------------------------------------------------

2023-06-25 19:08:50 [main] [INFO]  KGenProgMain - entered the era of 96th generation.
2023-06-25 19:09:57 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 26 minutes 52 seconds
Variants: generated 400, build-succeeded 238, build-failed 103, syntax-invalid 11, redundant 48
Fitness: max 0(238), min 0(238), ave 0
Test execution time: sum 24342 ms, max 356 ms, min 66 ms
----------------------------------------------------------------

2023-06-25 19:09:57 [main] [INFO]  KGenProgMain - entered the era of 97th generation.
2023-06-25 19:11:01 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 27 minutes 55 seconds
Variants: generated 400, build-succeeded 223, build-failed 117, syntax-invalid 18, redundant 42
Fitness: max 0(223), min 0(223), ave 0
Test execution time: sum 18628 ms, max 386 ms, min 68 ms
----------------------------------------------------------------

2023-06-25 19:11:01 [main] [INFO]  KGenProgMain - entered the era of 98th generation.
2023-06-25 19:12:03 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 28 minutes 58 seconds
Variants: generated 400, build-succeeded 237, build-failed 117, syntax-invalid 8, redundant 38
Fitness: max 0(237), min 0(237), ave 0
Test execution time: sum 18583 ms, max 197 ms, min 66 ms
----------------------------------------------------------------

2023-06-25 19:12:03 [main] [INFO]  KGenProgMain - entered the era of 99th generation.
2023-06-25 19:13:09 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 30 minutes 4 seconds
Variants: generated 400, build-succeeded 229, build-failed 118, syntax-invalid 21, redundant 32
Fitness: max 0(229), min 0(229), ave 0
Test execution time: sum 22150 ms, max 1951 ms, min 66 ms
----------------------------------------------------------------

2023-06-25 19:13:09 [main] [INFO]  KGenProgMain - entered the era of 100th generation.
2023-06-25 19:14:18 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 31 minutes 12 seconds
Variants: generated 400, build-succeeded 240, build-failed 109, syntax-invalid 4, redundant 47
Fitness: max 0(240), min 0(240), ave 0
Test execution time: sum 22659 ms, max 345 ms, min 56 ms
----------------------------------------------------------------

2023-06-25 19:14:18 [main] [INFO]  KGenProgMain - entered the era of 101st generation.
2023-06-25 19:15:24 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 32 minutes 19 seconds
Variants: generated 400, build-succeeded 233, build-failed 116, syntax-invalid 9, redundant 42
Fitness: max 0(233), min 0(233), ave 0
Test execution time: sum 22283 ms, max 587 ms, min 54 ms
----------------------------------------------------------------

2023-06-25 19:15:24 [main] [INFO]  KGenProgMain - entered the era of 102nd generation.
2023-06-25 19:16:26 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 33 minutes 21 seconds
Variants: generated 400, build-succeeded 240, build-failed 122, syntax-invalid 8, redundant 30
Fitness: max 0(240), min 0(240), ave 0
Test execution time: sum 20842 ms, max 557 ms, min 52 ms
----------------------------------------------------------------

2023-06-25 19:16:26 [main] [INFO]  KGenProgMain - entered the era of 103rd generation.
2023-06-25 19:17:33 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 34 minutes 28 seconds
Variants: generated 400, build-succeeded 238, build-failed 102, syntax-invalid 7, redundant 53
Fitness: max 0(238), min 0(238), ave 0
Test execution time: sum 24269 ms, max 773 ms, min 54 ms
----------------------------------------------------------------

2023-06-25 19:17:33 [main] [INFO]  KGenProgMain - entered the era of 104th generation.
2023-06-25 19:18:30 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 35 minutes 25 seconds
Variants: generated 400, build-succeeded 231, build-failed 116, syntax-invalid 9, redundant 44
Fitness: max 0(231), min 0(231), ave 0
Test execution time: sum 17773 ms, max 316 ms, min 52 ms
----------------------------------------------------------------

2023-06-25 19:18:30 [main] [INFO]  KGenProgMain - entered the era of 105th generation.
2023-06-25 19:19:24 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 36 minutes 19 seconds
Variants: generated 400, build-succeeded 236, build-failed 106, syntax-invalid 13, redundant 45
Fitness: max 0(236), min 0(236), ave 0
Test execution time: sum 16175 ms, max 372 ms, min 50 ms
----------------------------------------------------------------

2023-06-25 19:19:24 [main] [INFO]  KGenProgMain - entered the era of 106th generation.
2023-06-25 19:20:11 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 37 minutes 6 seconds
Variants: generated 400, build-succeeded 229, build-failed 106, syntax-invalid 21, redundant 44
Fitness: max 0(229), min 0(229), ave 0
Test execution time: sum 13710 ms, max 168 ms, min 52 ms
----------------------------------------------------------------

2023-06-25 19:20:11 [main] [INFO]  KGenProgMain - entered the era of 107th generation.
2023-06-25 19:21:02 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 37 minutes 57 seconds
Variants: generated 400, build-succeeded 244, build-failed 114, syntax-invalid 22, redundant 20
Fitness: max 1(3), min 0(241), ave 0.012
Test execution time: sum 15644 ms, max 222 ms, min 52 ms
----------------------------------------------------------------

2023-06-25 19:21:02 [main] [INFO]  KGenProgMain - entered the era of 108th generation.
2023-06-25 19:21:54 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 38 minutes 49 seconds
Variants: generated 400, build-succeeded 237, build-failed 114, syntax-invalid 13, redundant 36
Fitness: max 0(237), min 0(237), ave 0
Test execution time: sum 15303 ms, max 207 ms, min 52 ms
----------------------------------------------------------------

2023-06-25 19:21:54 [main] [INFO]  KGenProgMain - entered the era of 109th generation.
2023-06-25 19:22:49 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 39 minutes 44 seconds
Variants: generated 400, build-succeeded 236, build-failed 117, syntax-invalid 24, redundant 23
Fitness: max 1(1), min 0(235), ave 0.004
Test execution time: sum 16833 ms, max 256 ms, min 52 ms
----------------------------------------------------------------

2023-06-25 19:22:49 [main] [INFO]  KGenProgMain - entered the era of 110th generation.
2023-06-25 19:23:39 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 40 minutes 33 seconds
Variants: generated 400, build-succeeded 226, build-failed 121, syntax-invalid 25, redundant 28
Fitness: max 0(226), min 0(226), ave 0
Test execution time: sum 14576 ms, max 228 ms, min 52 ms
----------------------------------------------------------------

2023-06-25 19:23:39 [main] [INFO]  KGenProgMain - entered the era of 111th generation.
2023-06-25 19:24:29 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 41 minutes 23 seconds
Variants: generated 400, build-succeeded 227, build-failed 116, syntax-invalid 34, redundant 23
Fitness: max 0(227), min 0(227), ave 0
Test execution time: sum 14105 ms, max 142 ms, min 52 ms
----------------------------------------------------------------

2023-06-25 19:24:29 [main] [INFO]  KGenProgMain - entered the era of 112th generation.
2023-06-25 19:25:19 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 42 minutes 14 seconds
Variants: generated 400, build-succeeded 207, build-failed 126, syntax-invalid 37, redundant 30
Fitness: max 1(1), min 0(206), ave 0.005
Test execution time: sum 12801 ms, max 133 ms, min 52 ms
----------------------------------------------------------------

2023-06-25 19:25:19 [main] [INFO]  KGenProgMain - entered the era of 113th generation.
2023-06-25 19:26:08 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 43 minutes 2 seconds
Variants: generated 400, build-succeeded 220, build-failed 121, syntax-invalid 35, redundant 24
Fitness: max 1(6), min 0(214), ave 0.027
Test execution time: sum 13652 ms, max 153 ms, min 52 ms
----------------------------------------------------------------

2023-06-25 19:26:08 [main] [INFO]  KGenProgMain - entered the era of 114th generation.
2023-06-25 19:26:57 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 43 minutes 52 seconds
Variants: generated 400, build-succeeded 220, build-failed 118, syntax-invalid 18, redundant 44
Fitness: max 1(1), min 0(219), ave 0.005
Test execution time: sum 13774 ms, max 217 ms, min 52 ms
----------------------------------------------------------------

2023-06-25 19:26:57 [main] [INFO]  KGenProgMain - entered the era of 115th generation.
2023-06-25 19:27:46 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 44 minutes 41 seconds
Variants: generated 400, build-succeeded 204, build-failed 116, syntax-invalid 31, redundant 49
Fitness: max 1(2), min 0(202), ave 0.01
Test execution time: sum 13065 ms, max 218 ms, min 52 ms
----------------------------------------------------------------

2023-06-25 19:27:46 [main] [INFO]  KGenProgMain - entered the era of 116th generation.
2023-06-25 19:28:35 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 45 minutes 30 seconds
Variants: generated 400, build-succeeded 205, build-failed 130, syntax-invalid 39, redundant 26
Fitness: max 1(5), min 0(200), ave 0.024
Test execution time: sum 13571 ms, max 240 ms, min 52 ms
----------------------------------------------------------------

2023-06-25 19:28:35 [main] [INFO]  KGenProgMain - entered the era of 117th generation.
2023-06-25 19:29:26 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 46 minutes 21 seconds
Variants: generated 400, build-succeeded 202, build-failed 148, syntax-invalid 24, redundant 26
Fitness: max 1(3), min 0(199), ave 0.015
Test execution time: sum 13070 ms, max 211 ms, min 52 ms
----------------------------------------------------------------

2023-06-25 19:29:26 [main] [INFO]  KGenProgMain - entered the era of 118th generation.
2023-06-25 19:30:18 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 47 minutes 13 seconds
Variants: generated 400, build-succeeded 212, build-failed 128, syntax-invalid 13, redundant 47
Fitness: max 1(3), min 0(209), ave 0.014
Test execution time: sum 13853 ms, max 283 ms, min 52 ms
----------------------------------------------------------------

2023-06-25 19:30:18 [main] [INFO]  KGenProgMain - entered the era of 119th generation.
2023-06-25 19:34:11 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 51 minutes 6 seconds
Variants: generated 400, build-succeeded 226, build-failed 119, syntax-invalid 28, redundant 27
Fitness: max 0(226), min 0(226), ave 0
Test execution time: sum 194481 ms, max 180064 ms, min 53 ms
----------------------------------------------------------------

2023-06-25 19:34:11 [main] [INFO]  KGenProgMain - entered the era of 120th generation.
2023-06-25 19:35:02 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 51 minutes 57 seconds
Variants: generated 400, build-succeeded 206, build-failed 134, syntax-invalid 18, redundant 42
Fitness: max 1(2), min 0(204), ave 0.01
Test execution time: sum 12840 ms, max 170 ms, min 52 ms
----------------------------------------------------------------

2023-06-25 19:35:02 [main] [INFO]  KGenProgMain - entered the era of 121st generation.
2023-06-25 19:35:52 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 52 minutes 47 seconds
Variants: generated 400, build-succeeded 207, build-failed 129, syntax-invalid 26, redundant 38
Fitness: max 1(1), min 0(206), ave 0.005
Test execution time: sum 12602 ms, max 188 ms, min 52 ms
----------------------------------------------------------------

2023-06-25 19:35:52 [main] [INFO]  KGenProgMain - entered the era of 122nd generation.
2023-06-25 19:36:39 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 53 minutes 34 seconds
Variants: generated 400, build-succeeded 208, build-failed 125, syntax-invalid 36, redundant 31
Fitness: max 1(4), min 0(204), ave 0.019
Test execution time: sum 12424 ms, max 134 ms, min 52 ms
----------------------------------------------------------------

2023-06-25 19:36:39 [main] [INFO]  KGenProgMain - entered the era of 123rd generation.
2023-06-25 19:37:29 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 54 minutes 24 seconds
Variants: generated 400, build-succeeded 232, build-failed 111, syntax-invalid 10, redundant 47
Fitness: max 1(1), min 0(231), ave 0.004
Test execution time: sum 13603 ms, max 107 ms, min 52 ms
----------------------------------------------------------------

2023-06-25 19:37:29 [main] [INFO]  KGenProgMain - entered the era of 124th generation.
2023-06-25 19:38:19 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 55 minutes 14 seconds
Variants: generated 400, build-succeeded 228, build-failed 120, syntax-invalid 15, redundant 37
Fitness: max 0(228), min 0(228), ave 0
Test execution time: sum 13269 ms, max 108 ms, min 52 ms
----------------------------------------------------------------

2023-06-25 19:38:19 [main] [INFO]  KGenProgMain - entered the era of 125th generation.
2023-06-25 19:39:07 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 56 minutes 2 seconds
Variants: generated 400, build-succeeded 211, build-failed 123, syntax-invalid 27, redundant 39
Fitness: max 0(211), min 0(211), ave 0
Test execution time: sum 12445 ms, max 107 ms, min 52 ms
----------------------------------------------------------------

2023-06-25 19:39:07 [main] [INFO]  KGenProgMain - entered the era of 126th generation.
2023-06-25 19:39:57 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 56 minutes 52 seconds
Variants: generated 400, build-succeeded 219, build-failed 126, syntax-invalid 19, redundant 36
Fitness: max 0(219), min 0(219), ave 0
Test execution time: sum 12752 ms, max 108 ms, min 52 ms
----------------------------------------------------------------

2023-06-25 19:39:57 [main] [INFO]  KGenProgMain - entered the era of 127th generation.
2023-06-25 19:40:47 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 57 minutes 42 seconds
Variants: generated 400, build-succeeded 227, build-failed 121, syntax-invalid 31, redundant 21
Fitness: max 1(1), min 0(226), ave 0.004
Test execution time: sum 13392 ms, max 112 ms, min 51 ms
----------------------------------------------------------------

2023-06-25 19:40:47 [main] [INFO]  KGenProgMain - entered the era of 128th generation.
2023-06-25 19:41:39 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 58 minutes 34 seconds
Variants: generated 400, build-succeeded 227, build-failed 125, syntax-invalid 21, redundant 27
Fitness: max 0(227), min 0(227), ave 0
Test execution time: sum 13670 ms, max 114 ms, min 52 ms
----------------------------------------------------------------

2023-06-25 19:41:39 [main] [INFO]  KGenProgMain - entered the era of 129th generation.
2023-06-25 19:42:47 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 59 minutes 41 seconds
Variants: generated 400, build-succeeded 239, build-failed 116, syntax-invalid 20, redundant 25
Fitness: max 0(239), min 0(239), ave 0
Test execution time: sum 21405 ms, max 787 ms, min 54 ms
----------------------------------------------------------------

2023-06-25 19:42:47 [main] [INFO]  KGenProgMain - entered the era of 130th generation.
2023-06-25 19:43:51 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 46 seconds
Variants: generated 400, build-succeeded 235, build-failed 120, syntax-invalid 22, redundant 23
Fitness: max 0(235), min 0(235), ave 0
Test execution time: sum 16624 ms, max 193 ms, min 53 ms
----------------------------------------------------------------

2023-06-25 19:43:51 [main] [INFO]  KGenProgMain - entered the era of 131st generation.
2023-06-25 19:44:44 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 1 minutes 38 seconds
Variants: generated 400, build-succeeded 225, build-failed 110, syntax-invalid 19, redundant 46
Fitness: max 0(225), min 0(225), ave 0
Test execution time: sum 14034 ms, max 185 ms, min 53 ms
----------------------------------------------------------------

2023-06-25 19:44:44 [main] [INFO]  KGenProgMain - entered the era of 132nd generation.
2023-06-25 19:45:35 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 2 minutes 29 seconds
Variants: generated 400, build-succeeded 226, build-failed 112, syntax-invalid 37, redundant 25
Fitness: max 1(1), min 0(225), ave 0.004
Test execution time: sum 13575 ms, max 132 ms, min 52 ms
----------------------------------------------------------------

2023-06-25 19:45:35 [main] [INFO]  KGenProgMain - entered the era of 133rd generation.
2023-06-25 19:46:27 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 3 minutes 22 seconds
Variants: generated 400, build-succeeded 230, build-failed 114, syntax-invalid 23, redundant 33
Fitness: max 0(230), min 0(230), ave 0
Test execution time: sum 13777 ms, max 117 ms, min 52 ms
----------------------------------------------------------------

2023-06-25 19:46:27 [main] [INFO]  KGenProgMain - entered the era of 134th generation.
2023-06-25 19:47:19 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 4 minutes 14 seconds
Variants: generated 400, build-succeeded 224, build-failed 112, syntax-invalid 21, redundant 43
Fitness: max 0(224), min 0(224), ave 0
Test execution time: sum 13341 ms, max 108 ms, min 53 ms
----------------------------------------------------------------

2023-06-25 19:47:19 [main] [INFO]  KGenProgMain - entered the era of 135th generation.
2023-06-25 19:48:12 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 5 minutes 7 seconds
Variants: generated 400, build-succeeded 232, build-failed 108, syntax-invalid 15, redundant 45
Fitness: max 1(2), min 0(230), ave 0.009
Test execution time: sum 13743 ms, max 108 ms, min 53 ms
----------------------------------------------------------------

2023-06-25 19:48:12 [main] [INFO]  KGenProgMain - entered the era of 136th generation.
2023-06-25 19:49:08 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 6 minutes 3 seconds
Variants: generated 400, build-succeeded 229, build-failed 117, syntax-invalid 14, redundant 40
Fitness: max 0(229), min 0(229), ave 0
Test execution time: sum 13755 ms, max 126 ms, min 53 ms
----------------------------------------------------------------

2023-06-25 19:49:08 [main] [INFO]  KGenProgMain - entered the era of 137th generation.
2023-06-25 19:50:05 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 7 minutes 0 seconds
Variants: generated 400, build-succeeded 233, build-failed 111, syntax-invalid 28, redundant 28
Fitness: max 1(4), min 0(229), ave 0.017
Test execution time: sum 14978 ms, max 130 ms, min 53 ms
----------------------------------------------------------------

2023-06-25 19:50:05 [main] [INFO]  KGenProgMain - entered the era of 138th generation.
2023-06-25 19:50:09 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 7 minutes 4 seconds
Variants: generated 27, build-succeeded 13, build-failed 14, syntax-invalid 0, redundant 0
Fitness: max 1(1), min 0(12), ave 0.077
Test execution time: sum 851 ms, max 111 ms, min 54 ms
----------------------------------------------------------------

2023-06-25 19:50:09 [main] [INFO]  KGenProgMain - GA stopped
2023-06-25 19:50:13 [main] [INFO]  PatchLogExporter - patch (v46)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-25 19:50:13 [main] [INFO]  PatchLogExporter - patch (v46)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-25 19:50:13 [main] [INFO]  PatchLogExporter - patch (v46)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-25 19:50:13 [main] [INFO]  PatchLogExporter - patch (v46)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,15 +223,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
2023-06-25 19:50:13 [main] [INFO]  PatchLogExporter - patch (v136)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-25 19:50:13 [main] [INFO]  PatchLogExporter - patch (v136)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,7 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
+        this.absoluteAccuracy = defaultAbsoluteAccuracy;
     }
 
     /** {@inheritDoc} */
2023-06-25 19:50:13 [main] [INFO]  PatchLogExporter - patch (v136)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-25 19:50:13 [main] [INFO]  PatchLogExporter - patch (v136)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-25 19:50:13 [main] [INFO]  PatchLogExporter - patch (v187)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-25 19:50:13 [main] [INFO]  PatchLogExporter - patch (v187)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-06-25 19:50:13 [main] [INFO]  PatchLogExporter - patch (v187)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-25 19:50:13 [main] [INFO]  PatchLogExporter - patch (v187)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-25 19:50:13 [main] [INFO]  PatchLogExporter - patch (v228)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-25 19:50:13 [main] [INFO]  PatchLogExporter - patch (v228)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-25 19:50:13 [main] [INFO]  PatchLogExporter - patch (v228)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-25 19:50:13 [main] [INFO]  PatchLogExporter - patch (v228)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -162,7 +162,6 @@
      * Convenience function for implementations.
      */
     protected final void clearResult() {
-        this.iterationCount = 0;
         this.resultComputed = false;
     }
 
2023-06-25 19:50:13 [main] [INFO]  PatchLogExporter - patch (v228)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,7 +223,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
+            if (delta / oldDelta > 1) {
                 // use the bracket point if is better than last approximation
                 x0 = x1;
                 x1 = x2;
2023-06-25 19:50:13 [main] [INFO]  PatchLogExporter - patch (v261)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-25 19:50:13 [main] [INFO]  PatchLogExporter - patch (v261)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-25 19:50:13 [main] [INFO]  PatchLogExporter - patch (v261)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-25 19:50:13 [main] [INFO]  PatchLogExporter - patch (v261)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -162,7 +162,6 @@
      * Convenience function for implementations.
      */
     protected final void clearResult() {
-        this.iterationCount = 0;
         this.resultComputed = false;
     }
 
2023-06-25 19:50:13 [main] [INFO]  PatchLogExporter - patch (v261)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -290,7 +290,7 @@
             x0 = x1;
             y0 = y1;
             // Compute new X1, Y1
-            if (Math.abs(delta) > tolerance) {
+            if (!resultComputed) {
                 x1 = x1 + delta;
             } else if (dx > 0.0) {
                 x1 = x1 + 0.5 * tolerance;
2023-06-25 19:50:13 [main] [INFO]  PatchLogExporter - patch (v263)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-25 19:50:13 [main] [INFO]  PatchLogExporter - patch (v263)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-25 19:50:13 [main] [INFO]  PatchLogExporter - patch (v263)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-25 19:50:13 [main] [INFO]  PatchLogExporter - patch (v263)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -162,7 +162,6 @@
      * Convenience function for implementations.
      */
     protected final void clearResult() {
-        this.iterationCount = 0;
         this.resultComputed = false;
     }
 
2023-06-25 19:50:13 [main] [INFO]  PatchLogExporter - patch (v263)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -290,7 +290,7 @@
             x0 = x1;
             y0 = y1;
             // Compute new X1, Y1
-            if (Math.abs(delta) > tolerance) {
+            if (i < maximalIterationCount) {
                 x1 = x1 + delta;
             } else if (dx > 0.0) {
                 x1 = x1 + 0.5 * tolerance;
2023-06-25 19:50:13 [main] [INFO]  PatchLogExporter - patch (v343)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-25 19:50:13 [main] [INFO]  PatchLogExporter - patch (v343)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-25 19:50:13 [main] [INFO]  PatchLogExporter - patch (v343)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-25 19:50:13 [main] [INFO]  PatchLogExporter - patch (v343)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -162,7 +162,6 @@
      * Convenience function for implementations.
      */
     protected final void clearResult() {
-        this.iterationCount = 0;
         this.resultComputed = false;
     }
 
2023-06-25 19:50:13 [main] [INFO]  PatchLogExporter - patch (v343)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -258,7 +258,7 @@
                 // the equality test (x0 == x2) is intentional,
                 // it is part of the original Brent's method,
                 // it should NOT be replaced by proximity test
-                if (x0 == x2) {
+                if (i < maximalIterationCount) {
                     // Linear interpolation.
                     p = dx * r3;
                     p1 = 1.0 - r3;
2023-06-25 19:50:13 [main] [INFO]  PatchLogExporter - patch (v1122)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-25 19:50:13 [main] [INFO]  PatchLogExporter - patch (v1122)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-06-25 19:50:13 [main] [INFO]  PatchLogExporter - patch (v1122)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-25 19:50:13 [main] [INFO]  PatchLogExporter - patch (v1122)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-25 19:50:13 [main] [INFO]  PatchLogExporter - patch (v1122)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -162,7 +162,6 @@
      * Convenience function for implementations.
      */
     protected final void clearResult() {
-        this.iterationCount = 0;
         this.resultComputed = false;
     }
 
2023-06-25 19:50:13 [main] [INFO]  PatchLogExporter - patch (v1161)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-25 19:50:13 [main] [INFO]  PatchLogExporter - patch (v1161)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-06-25 19:50:13 [main] [INFO]  PatchLogExporter - patch (v1161)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -231,7 +231,8 @@
                             // properly ends exactly at the event occurrence
                             return false;
                         }
-                        // either we were not waiting for the event or it has
+                        forward = interpolator.isForward();
+						// either we were not waiting for the event or it has
                         // moved in such a way the step cannot be accepted
                         pendingEvent = true;
                         return true;
2023-06-25 19:50:13 [main] [INFO]  PatchLogExporter - patch (v1161)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-25 19:50:13 [main] [INFO]  PatchLogExporter - patch (v1161)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-25 19:50:13 [main] [INFO]  PatchLogExporter - patch (v1169)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-25 19:50:13 [main] [INFO]  PatchLogExporter - patch (v1169)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -197,9 +197,6 @@
                         // about bracketing
                             // this should never happen
                          
-                    // variation direction, with respect to the integration direction
-                    increasing = gb >= ga;
-
                     final UnivariateRealFunction f = new UnivariateRealFunction() {
                         public double value(final double t) throws FunctionEvaluationException {
                             try {
2023-06-25 19:50:13 [main] [INFO]  PatchLogExporter - patch (v1169)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-25 19:50:13 [main] [INFO]  PatchLogExporter - patch (v1169)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-25 19:50:13 [main] [INFO]  PatchLogExporter - patch (v1169)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,15 +223,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
2023-06-25 19:50:13 [main] [INFO]  PatchLogExporter - patch (v1203)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-25 19:50:13 [main] [INFO]  PatchLogExporter - patch (v1203)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -213,7 +213,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
@@ -286,8 +285,6 @@
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
-            // force the sign to its value "just after the event"
-            previousEventTime = t;
             g0Positive        = increasing;
             nextAction        = handler.eventOccurred(t, y, !(increasing ^ forward));
         } else {
2023-06-25 19:50:13 [main] [INFO]  PatchLogExporter - patch (v1203)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-25 19:50:13 [main] [INFO]  PatchLogExporter - patch (v1203)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-25 19:50:13 [main] [INFO]  PatchLogExporter - patch (v1374)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-25 19:50:13 [main] [INFO]  PatchLogExporter - patch (v1374)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -286,8 +286,6 @@
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
-            // force the sign to its value "just after the event"
-            previousEventTime = t;
             g0Positive        = increasing;
             nextAction        = handler.eventOccurred(t, y, !(increasing ^ forward));
         } else {
2023-06-25 19:50:13 [main] [INFO]  PatchLogExporter - patch (v1374)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-25 19:50:13 [main] [INFO]  PatchLogExporter - patch (v1374)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-25 19:50:13 [main] [INFO]  PatchLogExporter - patch (v1374)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -276,10 +276,6 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-06-25 19:50:13 [main] [INFO]  PatchLogExporter - patch (v1602)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-25 19:50:13 [main] [INFO]  PatchLogExporter - patch (v1602)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-25 19:50:13 [main] [INFO]  PatchLogExporter - patch (v1602)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-25 19:50:13 [main] [INFO]  PatchLogExporter - patch (v1602)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -162,7 +162,6 @@
      * Convenience function for implementations.
      */
     protected final void clearResult() {
-        this.iterationCount = 0;
         this.resultComputed = false;
     }
 
2023-06-25 19:50:13 [main] [INFO]  PatchLogExporter - patch (v1602)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -165,7 +165,7 @@
 
         // Verify bracketing
         double sign = yMin * yMax;
-        if (sign > 0) {
+        if (f == null) {
             // check if either value is close to a zero
             if (Math.abs(yMin) <= functionValueAccuracy) {
                 setResult(min, 0);
@@ -174,11 +174,7 @@
                 setResult(max, 0);
                 ret = max;
             } else {
-                // neither value is close to zero and min and max do not bracket root.
-                throw MathRuntimeException.createIllegalArgumentException(
-                        "function values at endpoints do not have different signs.  " +
-                        "Endpoints: [{0}, {1}], Values: [{2}, {3}]",
-                        min, max, yMin, yMax);
+                double x1 = min;
             }
         } else if (sign < 0){
             // solve using only the first endpoint as initial guess
@@ -223,15 +219,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
2023-06-25 19:50:13 [main] [INFO]  PatchLogExporter - patch (v1627)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-25 19:50:13 [main] [INFO]  PatchLogExporter - patch (v1627)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-25 19:50:13 [main] [INFO]  PatchLogExporter - patch (v1627)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-25 19:50:13 [main] [INFO]  PatchLogExporter - patch (v1627)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -162,7 +162,6 @@
      * Convenience function for implementations.
      */
     protected final void clearResult() {
-        this.iterationCount = 0;
         this.resultComputed = false;
     }
 
2023-06-25 19:50:13 [main] [INFO]  PatchLogExporter - patch (v1627)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -165,7 +165,7 @@
 
         // Verify bracketing
         double sign = yMin * yMax;
-        if (sign > 0) {
+        if (f == null) {
             // check if either value is close to a zero
             if (Math.abs(yMin) <= functionValueAccuracy) {
                 setResult(min, 0);
@@ -174,11 +174,7 @@
                 setResult(max, 0);
                 ret = max;
             } else {
-                // neither value is close to zero and min and max do not bracket root.
-                throw MathRuntimeException.createIllegalArgumentException(
-                        "function values at endpoints do not have different signs.  " +
-                        "Endpoints: [{0}, {1}], Values: [{2}, {3}]",
-                        min, max, yMin, yMax);
+                double x1 = min;
             }
         } else if (sign < 0){
             // solve using only the first endpoint as initial guess
@@ -268,6 +264,7 @@
                     double r2 = y1 / y2;
                     p = r3 * (dx * r1 * (r1 - r2) - (x1 - x0) * (r2 - 1.0));
                     p1 = (r1 - 1.0) * (r2 - 1.0) * (r3 - 1.0);
+					p1 = 1.0 - r3;
                 }
                 if (p > 0.0) {
                     p1 = -p1;
2023-06-25 19:50:13 [main] [INFO]  PatchLogExporter - patch (v1692)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-25 19:50:13 [main] [INFO]  PatchLogExporter - patch (v1692)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-25 19:50:13 [main] [INFO]  PatchLogExporter - patch (v1692)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-25 19:50:13 [main] [INFO]  PatchLogExporter - patch (v1692)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -162,7 +162,6 @@
      * Convenience function for implementations.
      */
     protected final void clearResult() {
-        this.iterationCount = 0;
         this.resultComputed = false;
     }
 
2023-06-25 19:50:13 [main] [INFO]  PatchLogExporter - patch (v1692)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -165,7 +165,7 @@
 
         // Verify bracketing
         double sign = yMin * yMax;
-        if (sign > 0) {
+        if (f == null) {
             // check if either value is close to a zero
             if (Math.abs(yMin) <= functionValueAccuracy) {
                 setResult(min, 0);
@@ -174,11 +174,7 @@
                 setResult(max, 0);
                 ret = max;
             } else {
-                // neither value is close to zero and min and max do not bracket root.
-                throw MathRuntimeException.createIllegalArgumentException(
-                        "function values at endpoints do not have different signs.  " +
-                        "Endpoints: [{0}, {1}], Values: [{2}, {3}]",
-                        min, max, yMin, yMax);
+                double x1 = min;
             }
         } else if (sign < 0){
             // solve using only the first endpoint as initial guess
@@ -274,8 +270,7 @@
                 } else {
                     p = -p;
                 }
-                if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
-                        p >= Math.abs(0.5 * oldDelta * p1)) {
+                if (f == null) {
                     // Inverse quadratic interpolation gives a value
                     // in the wrong direction, or progress is slow.
                     // Fall back to bisection.
2023-06-25 19:50:13 [main] [INFO]  PatchLogExporter - patch (v2100)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-25 19:50:13 [main] [INFO]  PatchLogExporter - patch (v2100)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -63,7 +63,7 @@
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
-        this.defaultMaximalIterationCount = defaultMaximalIterationCount;
+        this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.maximalIterationCount = defaultMaximalIterationCount;
         this.iterationCount = 0;
     }
2023-06-25 19:50:13 [main] [INFO]  PatchLogExporter - patch (v2100)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-25 19:50:13 [main] [INFO]  PatchLogExporter - patch (v2100)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-25 19:50:13 [main] [INFO]  PatchLogExporter - patch (v2100)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -162,7 +162,6 @@
      * Convenience function for implementations.
      */
     protected final void clearResult() {
-        this.iterationCount = 0;
         this.resultComputed = false;
     }
 
2023-06-25 19:50:13 [main] [INFO]  PatchLogExporter - patch (v2100)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -165,7 +165,7 @@
 
         // Verify bracketing
         double sign = yMin * yMax;
-        if (sign > 0) {
+        if (f == null) {
             // check if either value is close to a zero
             if (Math.abs(yMin) <= functionValueAccuracy) {
                 setResult(min, 0);
@@ -174,11 +174,7 @@
                 setResult(max, 0);
                 ret = max;
             } else {
-                // neither value is close to zero and min and max do not bracket root.
-                throw MathRuntimeException.createIllegalArgumentException(
-                        "function values at endpoints do not have different signs.  " +
-                        "Endpoints: [{0}, {1}], Values: [{2}, {3}]",
-                        min, max, yMin, yMax);
+                double x1 = min;
             }
         } else if (sign < 0){
             // solve using only the first endpoint as initial guess
@@ -223,15 +219,8 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
+				this.f = f;
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
2023-06-25 19:50:13 [main] [INFO]  PatchLogExporter - patch (v2107)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-25 19:50:13 [main] [INFO]  PatchLogExporter - patch (v2107)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -63,7 +63,7 @@
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
-        this.defaultMaximalIterationCount = defaultMaximalIterationCount;
+        this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.maximalIterationCount = defaultMaximalIterationCount;
         this.iterationCount = 0;
     }
2023-06-25 19:50:13 [main] [INFO]  PatchLogExporter - patch (v2107)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-25 19:50:13 [main] [INFO]  PatchLogExporter - patch (v2107)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-25 19:50:13 [main] [INFO]  PatchLogExporter - patch (v2107)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -162,7 +162,6 @@
      * Convenience function for implementations.
      */
     protected final void clearResult() {
-        this.iterationCount = 0;
         this.resultComputed = false;
     }
 
2023-06-25 19:50:13 [main] [INFO]  PatchLogExporter - patch (v2107)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -165,7 +165,7 @@
 
         // Verify bracketing
         double sign = yMin * yMax;
-        if (sign > 0) {
+        if (f == null) {
             // check if either value is close to a zero
             if (Math.abs(yMin) <= functionValueAccuracy) {
                 setResult(min, 0);
@@ -174,11 +174,7 @@
                 setResult(max, 0);
                 ret = max;
             } else {
-                // neither value is close to zero and min and max do not bracket root.
-                throw MathRuntimeException.createIllegalArgumentException(
-                        "function values at endpoints do not have different signs.  " +
-                        "Endpoints: [{0}, {1}], Values: [{2}, {3}]",
-                        min, max, yMin, yMax);
+                double x1 = min;
             }
         } else if (sign < 0){
             // solve using only the first endpoint as initial guess
@@ -223,15 +219,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
2023-06-25 19:50:13 [main] [INFO]  PatchLogExporter - patch (v2180)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-25 19:50:13 [main] [INFO]  PatchLogExporter - patch (v2180)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -63,7 +63,7 @@
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
-        this.defaultMaximalIterationCount = defaultMaximalIterationCount;
+        this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.maximalIterationCount = defaultMaximalIterationCount;
         this.iterationCount = 0;
     }
2023-06-25 19:50:13 [main] [INFO]  PatchLogExporter - patch (v2180)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-25 19:50:13 [main] [INFO]  PatchLogExporter - patch (v2180)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-25 19:50:13 [main] [INFO]  PatchLogExporter - patch (v2180)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -162,7 +162,6 @@
      * Convenience function for implementations.
      */
     protected final void clearResult() {
-        this.iterationCount = 0;
         this.resultComputed = false;
     }
 
2023-06-25 19:50:13 [main] [INFO]  PatchLogExporter - patch (v2180)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -165,7 +165,7 @@
 
         // Verify bracketing
         double sign = yMin * yMax;
-        if (sign > 0) {
+        if (f == null) {
             // check if either value is close to a zero
             if (Math.abs(yMin) <= functionValueAccuracy) {
                 setResult(min, 0);
@@ -174,11 +174,7 @@
                 setResult(max, 0);
                 ret = max;
             } else {
-                // neither value is close to zero and min and max do not bracket root.
-                throw MathRuntimeException.createIllegalArgumentException(
-                        "function values at endpoints do not have different signs.  " +
-                        "Endpoints: [{0}, {1}], Values: [{2}, {3}]",
-                        min, max, yMin, yMax);
+                double x1 = min;
             }
         } else if (sign < 0){
             // solve using only the first endpoint as initial guess
@@ -276,10 +272,7 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
+                    final double x3 = 0.5 * (x1 + x2);
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-06-25 19:50:13 [main] [INFO]  PatchLogExporter - patch (v2340)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-25 19:50:13 [main] [INFO]  PatchLogExporter - patch (v2340)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-25 19:50:13 [main] [INFO]  PatchLogExporter - patch (v2340)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-25 19:50:13 [main] [INFO]  PatchLogExporter - patch (v2340)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -165,7 +165,7 @@
 
         // Verify bracketing
         double sign = yMin * yMax;
-        if (sign > 0) {
+        if (f == null) {
             // check if either value is close to a zero
             if (Math.abs(yMin) <= functionValueAccuracy) {
                 setResult(min, 0);
@@ -284,10 +284,9 @@
                 } else {
                     oldDelta = delta;
                     delta = p / p1;
+					x0 = x1;
                 }
             }
-            // Save old X1, Y1
-            x0 = x1;
             y0 = y1;
             // Compute new X1, Y1
             if (Math.abs(delta) > tolerance) {
2023-06-25 19:50:13 [main] [INFO]  PatchLogExporter - patch (v3385)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-25 19:50:13 [main] [INFO]  PatchLogExporter - patch (v3385)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-25 19:50:13 [main] [INFO]  PatchLogExporter - patch (v3385)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-25 19:50:13 [main] [INFO]  PatchLogExporter - patch (v3385)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -162,7 +162,6 @@
      * Convenience function for implementations.
      */
     protected final void clearResult() {
-        this.iterationCount = 0;
         this.resultComputed = false;
     }
 
2023-06-25 19:50:13 [main] [INFO]  PatchLogExporter - patch (v3385)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -165,7 +165,7 @@
 
         // Verify bracketing
         double sign = yMin * yMax;
-        if (sign > 0) {
+        if (f == null) {
             // check if either value is close to a zero
             if (Math.abs(yMin) <= functionValueAccuracy) {
                 setResult(min, 0);
@@ -233,10 +233,6 @@
                 y2 = y0;
             }
             if (Math.abs(y1) <= functionValueAccuracy) {
-                // Avoid division by very small values. Assume
-                // the iteration has converged (the problem may
-                // still be ill conditioned)
-                setResult(x1, i);
                 return result;
             }
             double dx = x2 - x1;
@@ -304,7 +300,7 @@
                 delta = x1 - x0;
                 oldDelta = delta;
             }
-            i++;
+            y0 = y1;
         }
         throw new MaxIterationsExceededException(maximalIterationCount);
     }
2023-06-25 19:50:13 [main] [INFO]  PatchLogExporter - patch (v4760)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -218,6 +218,7 @@
 
     currentTime = t;
     h           = currentTime - previousTime;
+	finalized = true;
     setInterpolatedTime(t);
 
     // the step is not finalized anymore
2023-06-25 19:50:13 [main] [INFO]  PatchLogExporter - patch (v4760)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-25 19:50:13 [main] [INFO]  PatchLogExporter - patch (v4760)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -169,7 +169,7 @@
 
         try {
 
-            forward = interpolator.isForward();
+            final double t0 = interpolator.getPreviousTime();
             final double t1 = interpolator.getCurrentTime();
             final int    n  = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));
             final double h  = (t1 - t0) / n;
2023-06-25 19:50:13 [main] [INFO]  PatchLogExporter - patch (v4760)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-25 19:50:13 [main] [INFO]  PatchLogExporter - patch (v4760)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-25 19:50:13 [main] [INFO]  PatchLogExporter - patch (v4760)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -237,7 +237,6 @@
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
-                return result;
             }
             double dx = x2 - x1;
             double tolerance =
2023-06-25 19:50:13 [main] [INFO]  PatchLogExporter - patch (v5160)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-25 19:50:13 [main] [INFO]  PatchLogExporter - patch (v5160)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -213,7 +213,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
2023-06-25 19:50:13 [main] [INFO]  PatchLogExporter - patch (v5160)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-25 19:50:13 [main] [INFO]  PatchLogExporter - patch (v5160)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-25 19:50:13 [main] [INFO]  PatchLogExporter - patch (v5160)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,6 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
2023-06-25 19:50:13 [main] [INFO]  PatchLogExporter - patch (v5160)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -219,6 +219,8 @@
     throws MaxIterationsExceededException, FunctionEvaluationException {
 
         double delta = x1 - x0;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
         double oldDelta = delta;
 
         int i = 0;
2023-06-25 19:50:13 [main] [INFO]  PatchLogExporter - patch (v5425)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-25 19:50:13 [main] [INFO]  PatchLogExporter - patch (v5425)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -63,7 +63,7 @@
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
-        this.defaultMaximalIterationCount = defaultMaximalIterationCount;
+        this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.maximalIterationCount = defaultMaximalIterationCount;
         this.iterationCount = 0;
     }
2023-06-25 19:50:13 [main] [INFO]  PatchLogExporter - patch (v5425)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-25 19:50:13 [main] [INFO]  PatchLogExporter - patch (v5425)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-25 19:50:13 [main] [INFO]  PatchLogExporter - patch (v5425)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -174,11 +174,7 @@
                 setResult(max, 0);
                 ret = max;
             } else {
-                // neither value is close to zero and min and max do not bracket root.
-                throw MathRuntimeException.createIllegalArgumentException(
-                        "function values at endpoints do not have different signs.  " +
-                        "Endpoints: [{0}, {1}], Values: [{2}, {3}]",
-                        min, max, yMin, yMax);
+                double x1 = min;
             }
         } else if (sign < 0){
             // solve using only the first endpoint as initial guess
@@ -219,6 +215,7 @@
     throws MaxIterationsExceededException, FunctionEvaluationException {
 
         double delta = x1 - x0;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
         double oldDelta = delta;
 
         int i = 0;
@@ -276,10 +273,6 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-06-25 19:50:13 [main] [INFO]  PatchLogExporter - patch (v5993)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -112,7 +112,8 @@
     interpolatedTime  = Double.NaN;
 
     currentState            = y;
-    interpolatedState       = new double[y.length];
+    finalized = false;
+	interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
2023-06-25 19:50:13 [main] [INFO]  PatchLogExporter - patch (v5993)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-25 19:50:13 [main] [INFO]  PatchLogExporter - patch (v5993)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -212,6 +212,7 @@
                             }
                         }
                     };
+					g0Positive = g0 >= 0;
                     final BrentSolver solver = new BrentSolver();
                     solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
2023-06-25 19:50:13 [main] [INFO]  PatchLogExporter - patch (v5993)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-25 19:50:13 [main] [INFO]  PatchLogExporter - patch (v5993)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-25 19:50:13 [main] [INFO]  PatchLogExporter - patch (v5993)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -162,7 +162,6 @@
      * Convenience function for implementations.
      */
     protected final void clearResult() {
-        this.iterationCount = 0;
         this.resultComputed = false;
     }
 
2023-06-25 19:50:13 [main] [INFO]  PatchLogExporter - patch (v5993)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -276,10 +276,6 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-06-25 19:50:13 [main] [INFO]  PatchLogExporter - patch (v6564)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -243,7 +243,6 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
   }
 
   /** {@inheritDoc} */
2023-06-25 19:50:13 [main] [INFO]  PatchLogExporter - patch (v6564)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-25 19:50:13 [main] [INFO]  PatchLogExporter - patch (v6564)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-25 19:50:13 [main] [INFO]  PatchLogExporter - patch (v6564)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-25 19:50:13 [main] [INFO]  PatchLogExporter - patch (v6564)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -174,11 +174,7 @@
                 setResult(max, 0);
                 ret = max;
             } else {
-                // neither value is close to zero and min and max do not bracket root.
-                throw MathRuntimeException.createIllegalArgumentException(
-                        "function values at endpoints do not have different signs.  " +
-                        "Endpoints: [{0}, {1}], Values: [{2}, {3}]",
-                        min, max, yMin, yMax);
+                double x1 = min;
             }
         } else if (sign < 0){
             // solve using only the first endpoint as initial guess
@@ -223,7 +219,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
+            if (i <= maximalIterationCount) {
                 // use the bracket point if is better than last approximation
                 x0 = x1;
                 x1 = x2;
@@ -284,11 +280,11 @@
                 } else {
                     oldDelta = delta;
                     delta = p / p1;
+					x0 = x1;
                 }
             }
             // Save old X1, Y1
             x0 = x1;
-            y0 = y1;
             // Compute new X1, Y1
             if (Math.abs(delta) > tolerance) {
                 x1 = x1 + delta;
2023-06-25 19:50:13 [main] [INFO]  PatchLogExporter - patch (v7572)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -243,7 +243,6 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
   }
 
   /** {@inheritDoc} */
2023-06-25 19:50:13 [main] [INFO]  PatchLogExporter - patch (v7572)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-25 19:50:13 [main] [INFO]  PatchLogExporter - patch (v7572)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -102,7 +102,6 @@
         t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
2023-06-25 19:50:13 [main] [INFO]  PatchLogExporter - patch (v7572)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-25 19:50:13 [main] [INFO]  PatchLogExporter - patch (v7572)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-25 19:50:13 [main] [INFO]  PatchLogExporter - patch (v7572)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -174,11 +174,7 @@
                 setResult(max, 0);
                 ret = max;
             } else {
-                // neither value is close to zero and min and max do not bracket root.
-                throw MathRuntimeException.createIllegalArgumentException(
-                        "function values at endpoints do not have different signs.  " +
-                        "Endpoints: [{0}, {1}], Values: [{2}, {3}]",
-                        min, max, yMin, yMax);
+                double x1 = min;
             }
         } else if (sign < 0){
             // solve using only the first endpoint as initial guess
@@ -284,10 +280,10 @@
                 } else {
                     oldDelta = delta;
                     delta = p / p1;
+					x0 = x1;
                 }
             }
-            // Save old X1, Y1
-            x0 = x1;
+            setResult(x1, i);
             y0 = y1;
             // Compute new X1, Y1
             if (Math.abs(delta) > tolerance) {
2023-06-25 19:50:13 [main] [INFO]  PatchLogExporter - patch (v9823)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-25 19:50:13 [main] [INFO]  PatchLogExporter - patch (v9823)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -103,7 +103,6 @@
         g0                = Double.NaN;
         g0Positive        = true;
         pendingEvent      = false;
-        pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
         nextAction        = EventHandler.CONTINUE;
@@ -245,8 +244,6 @@
 
             }
 
-            // no event during the whole step
-            pendingEvent     = false;
             pendingEventTime = Double.NaN;
             return false;
 
2023-06-25 19:50:13 [main] [INFO]  PatchLogExporter - patch (v9823)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-25 19:50:13 [main] [INFO]  PatchLogExporter - patch (v9823)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-25 19:50:13 [main] [INFO]  PatchLogExporter - patch (v9823)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -226,7 +226,10 @@
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
                 x0 = x1;
-                x1 = x2;
+                x1 = x1 + delta;
+				x1 = x1 + delta;
+				x1 = x1 + delta;
+				x1 = x2;
                 x2 = x0;
                 y0 = y1;
                 y1 = y2;
@@ -276,10 +279,6 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v9830)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -96,7 +96,7 @@
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
+    finalized = true;
   }
 
   /** Simple constructor.
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v9830)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v9830)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -100,6 +100,10 @@
 
         // some dummy values ...
         t0                = Double.NaN;
+		{
+			g0Positive = g0 >= 0;
+			nextAction = EventHandler.CONTINUE;
+		}
         g0                = Double.NaN;
         g0Positive        = true;
         pendingEvent      = false;
@@ -212,6 +216,7 @@
                             }
                         }
                     };
+					g0Positive = g0 >= 0;
                     final BrentSolver solver = new BrentSolver();
                     solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v9830)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v9830)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v9830)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -162,7 +162,6 @@
      * Convenience function for implementations.
      */
     protected final void clearResult() {
-        this.iterationCount = 0;
         this.resultComputed = false;
     }
 
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v9830)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -226,7 +226,8 @@
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
                 x0 = x1;
-                x1 = x2;
+                x1 = x1 + delta;
+				x1 = x2;
                 x2 = x0;
                 y0 = y1;
                 y1 = y2;
@@ -276,10 +277,6 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v9914)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -113,8 +113,6 @@
 
     currentState            = y;
     interpolatedState       = new double[y.length];
-    interpolatedDerivatives = new double[y.length];
-
     finalized         = false;
     this.forward      = forward;
     this.dirtyState   = true;
@@ -243,7 +241,6 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
   }
 
   /** {@inheritDoc} */
@@ -418,7 +415,7 @@
     currentTime   = in.readDouble();
     h             = in.readDouble();
     forward       = in.readBoolean();
-    dirtyState    = true;
+    setInterpolatedTime(getInterpolatedTime());
 
     if (dimension < 0) {
         currentState = null;
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v9914)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v9914)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -103,7 +103,6 @@
         g0                = Double.NaN;
         g0Positive        = true;
         pendingEvent      = false;
-        pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
         nextAction        = EventHandler.CONTINUE;
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v9914)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v9914)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v9914)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -276,10 +276,6 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v10307)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -113,8 +113,6 @@
 
     currentState            = y;
     interpolatedState       = new double[y.length];
-    interpolatedDerivatives = new double[y.length];
-
     finalized         = false;
     this.forward      = forward;
     this.dirtyState   = true;
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v10307)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v10307)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -103,7 +103,6 @@
         g0                = Double.NaN;
         g0Positive        = true;
         pendingEvent      = false;
-        pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
         nextAction        = EventHandler.CONTINUE;
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v10307)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v10307)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v10307)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -226,7 +226,10 @@
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
                 x0 = x1;
-                x1 = x2;
+                x1 = x1 + delta;
+				x1 = x1 + delta;
+				x1 = x1 + delta;
+				x1 = x2;
                 x2 = x0;
                 y0 = y1;
                 y1 = y2;
@@ -276,10 +279,6 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v10339)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -96,7 +96,7 @@
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
+    finalized = true;
   }
 
   /** Simple constructor.
@@ -116,7 +116,7 @@
     interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
-    this.forward      = forward;
+    interpolatedState = new double[y.length];
     this.dirtyState   = true;
 
   }
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v10339)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v10339)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v10339)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v10339)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -226,7 +226,10 @@
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
                 x0 = x1;
-                x1 = x2;
+                x1 = x1 + delta;
+				x1 = x1 + delta;
+				x1 = x1 + delta;
+				x1 = x2;
                 x2 = x0;
                 y0 = y1;
                 y1 = y2;
@@ -276,10 +279,6 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v10718)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -111,7 +111,6 @@
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
-    currentState            = y;
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
@@ -272,7 +271,6 @@
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
-          computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
       }
 
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v10718)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v10718)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v10718)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v10718)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -226,7 +226,10 @@
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
                 x0 = x1;
-                x1 = x2;
+                x1 = x1 + delta;
+				x1 = x1 + delta;
+				x1 = x1 + delta;
+				x1 = x2;
                 x2 = x0;
                 y0 = y1;
                 y1 = y2;
@@ -276,10 +279,6 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v10790)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -87,7 +87,7 @@
    * initializing the copy.
    */
   protected AbstractStepInterpolator() {
-    previousTime            = Double.NaN;
+    finalized = true;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
@@ -243,7 +243,6 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
   }
 
   /** {@inheritDoc} */
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v10790)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v10790)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v10790)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v10790)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -71,7 +71,7 @@
     protected UnivariateRealSolverImpl(final UnivariateRealFunction f,
                                        final int defaultMaximalIterationCount,
                                        final double defaultAbsoluteAccuracy) {
-        super(defaultMaximalIterationCount, defaultAbsoluteAccuracy);
+        super(100, 1E-6);
         if (f == null) {
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v10790)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -226,7 +226,8 @@
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
                 x0 = x1;
-                x1 = x2;
+                x1 = x1 + delta;
+				x1 = x2;
                 x2 = x0;
                 y0 = y1;
                 y1 = y2;
@@ -276,10 +277,6 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v11018)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -243,7 +243,6 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
   }
 
   /** {@inheritDoc} */
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v11018)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v11018)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -103,7 +103,6 @@
         g0                = Double.NaN;
         g0Positive        = true;
         pendingEvent      = false;
-        pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
         nextAction        = EventHandler.CONTINUE;
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v11018)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v11018)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v11018)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -226,7 +226,9 @@
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
                 x0 = x1;
-                x1 = x2;
+                x1 = x1 + delta;
+				x1 = x1 + delta;
+				x1 = x2;
                 x2 = x0;
                 y0 = y1;
                 y1 = y2;
@@ -276,10 +278,6 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v11020)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,7 +88,6 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
@@ -116,7 +115,7 @@
     interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
-    this.forward      = forward;
+    interpolatedState = new double[y.length];
     this.dirtyState   = true;
 
   }
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v11020)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v11020)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -212,6 +212,7 @@
                             }
                         }
                     };
+					g0Positive = g0 >= 0;
                     final BrentSolver solver = new BrentSolver();
                     solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v11020)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v11020)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v11020)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -162,7 +162,6 @@
      * Convenience function for implementations.
      */
     protected final void clearResult() {
-        this.iterationCount = 0;
         this.resultComputed = false;
     }
 
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v11020)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -226,7 +226,8 @@
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
                 x0 = x1;
-                x1 = x2;
+                x1 = x1 + delta;
+				x1 = x2;
                 x2 = x0;
                 y0 = y1;
                 y1 = y2;
@@ -276,10 +277,6 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v11021)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -243,7 +243,6 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
   }
 
   /** {@inheritDoc} */
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v11021)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v11021)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v11021)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v11021)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -162,7 +162,6 @@
      * Convenience function for implementations.
      */
     protected final void clearResult() {
-        this.iterationCount = 0;
         this.resultComputed = false;
     }
 
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v11021)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -226,7 +226,9 @@
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
                 x0 = x1;
-                x1 = x2;
+                x1 = x1 + delta;
+				x1 = x1 + delta;
+				x1 = x2;
                 x2 = x0;
                 y0 = y1;
                 y1 = y2;
@@ -276,10 +278,6 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v11035)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,13 +88,11 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -113,8 +111,6 @@
 
     currentState            = y;
     interpolatedState       = new double[y.length];
-    interpolatedDerivatives = new double[y.length];
-
     finalized         = false;
     this.forward      = forward;
     this.dirtyState   = true;
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v11035)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v11035)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -212,6 +212,7 @@
                             }
                         }
                     };
+					g0Positive = g0 >= 0;
                     final BrentSolver solver = new BrentSolver();
                     solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v11035)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v11035)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v11035)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -71,7 +71,7 @@
     protected UnivariateRealSolverImpl(final UnivariateRealFunction f,
                                        final int defaultMaximalIterationCount,
                                        final double defaultAbsoluteAccuracy) {
-        super(defaultMaximalIterationCount, defaultAbsoluteAccuracy);
+        super(100, 1E-6);
         if (f == null) {
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v11035)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -276,10 +276,6 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v11066)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,6 +88,7 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
+	h = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
@@ -96,7 +97,7 @@
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
+    finalized = true;
   }
 
   /** Simple constructor.
@@ -112,6 +113,7 @@
     interpolatedTime  = Double.NaN;
 
     currentState            = y;
+	interpolatedTime = Double.NaN;
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v11066)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v11066)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v11066)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v11066)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -226,7 +226,8 @@
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
                 x0 = x1;
-                x1 = x2;
+                x1 = x1 + delta;
+				x1 = x2;
                 x2 = x0;
                 y0 = y1;
                 y1 = y2;
@@ -276,10 +277,6 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v11068)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -113,8 +113,6 @@
 
     currentState            = y;
     interpolatedState       = new double[y.length];
-    interpolatedDerivatives = new double[y.length];
-
     finalized         = false;
     this.forward      = forward;
     this.dirtyState   = true;
@@ -272,7 +270,6 @@
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
-          computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
       }
 
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v11068)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v11068)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -98,12 +98,9 @@
         this.convergence       = Math.abs(convergence);
         this.maxIterationCount = maxIterationCount;
 
-        // some dummy values ...
-        t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
         pendingEvent      = false;
-        pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
         nextAction        = EventHandler.CONTINUE;
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v11068)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v11068)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v11068)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -226,7 +226,8 @@
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
                 x0 = x1;
-                x1 = x2;
+                x1 = x1 + delta;
+				x1 = x2;
                 x2 = x0;
                 y0 = y1;
                 y1 = y2;
@@ -276,10 +277,6 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v11153)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,7 +88,6 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
@@ -96,7 +95,7 @@
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
+    finalized = true;
   }
 
   /** Simple constructor.
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v11153)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v11153)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -103,7 +103,6 @@
         g0                = Double.NaN;
         g0Positive        = true;
         pendingEvent      = false;
-        pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
         nextAction        = EventHandler.CONTINUE;
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v11153)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v11153)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v11153)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -226,7 +226,8 @@
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
                 x0 = x1;
-                x1 = x2;
+                x1 = x1 + delta;
+				x1 = x2;
                 x2 = x0;
                 y0 = y1;
                 y1 = y2;
@@ -276,10 +277,6 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v11179)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -87,7 +87,7 @@
    * initializing the copy.
    */
   protected AbstractStepInterpolator() {
-    previousTime            = Double.NaN;
+    finalized = true;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
@@ -272,7 +272,6 @@
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
-          computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
       }
 
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v11179)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v11179)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -103,7 +103,6 @@
         g0                = Double.NaN;
         g0Positive        = true;
         pendingEvent      = false;
-        pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
         nextAction        = EventHandler.CONTINUE;
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v11179)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v11179)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v11179)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -71,7 +71,7 @@
     protected UnivariateRealSolverImpl(final UnivariateRealFunction f,
                                        final int defaultMaximalIterationCount,
                                        final double defaultAbsoluteAccuracy) {
-        super(defaultMaximalIterationCount, defaultAbsoluteAccuracy);
+        super(100, 1E-6);
         if (f == null) {
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v11179)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -226,7 +226,8 @@
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
                 x0 = x1;
-                x1 = x2;
+                x1 = x1 + delta;
+				x1 = x2;
                 x2 = x0;
                 y0 = y1;
                 y1 = y2;
@@ -276,10 +277,6 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v11832)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -243,7 +243,6 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
   }
 
   /** {@inheritDoc} */
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v11832)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v11832)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v11832)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v11832)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -226,7 +226,11 @@
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
                 x0 = x1;
-                x1 = x2;
+                x1 = x1 + delta;
+				x1 = x1 + delta;
+				x1 = x1 + delta;
+				x1 = x1 + delta;
+				x1 = x2;
                 x2 = x0;
                 y0 = y1;
                 y1 = y2;
@@ -276,10 +280,6 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v11922)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -243,7 +243,6 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
   }
 
   /** {@inheritDoc} */
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v11922)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v11922)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v11922)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v11922)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -71,7 +71,7 @@
     protected UnivariateRealSolverImpl(final UnivariateRealFunction f,
                                        final int defaultMaximalIterationCount,
                                        final double defaultAbsoluteAccuracy) {
-        super(defaultMaximalIterationCount, defaultAbsoluteAccuracy);
+        super(100, 1E-6);
         if (f == null) {
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
@@ -162,7 +162,6 @@
      * Convenience function for implementations.
      */
     protected final void clearResult() {
-        this.iterationCount = 0;
         this.resultComputed = false;
     }
 
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v11922)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -226,7 +226,9 @@
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
                 x0 = x1;
-                x1 = x2;
+                x1 = x1 + delta;
+				x1 = x1 + delta;
+				x1 = x2;
                 x2 = x0;
                 y0 = y1;
                 y1 = y2;
@@ -276,10 +278,6 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v11939)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -96,7 +96,7 @@
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
+    finalized = true;
   }
 
   /** Simple constructor.
@@ -113,8 +113,6 @@
 
     currentState            = y;
     interpolatedState       = new double[y.length];
-    interpolatedDerivatives = new double[y.length];
-
     finalized         = false;
     this.forward      = forward;
     this.dirtyState   = true;
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v11939)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v11939)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -105,7 +105,6 @@
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
-        increasing        = true;
         nextAction        = EventHandler.CONTINUE;
 
     }
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v11939)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v11939)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v11939)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -226,7 +226,9 @@
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
                 x0 = x1;
-                x1 = x2;
+                x1 = x1 + delta;
+				x1 = x1 + delta;
+				x1 = x2;
                 x2 = x0;
                 y0 = y1;
                 y1 = y2;
@@ -276,10 +278,6 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v11968)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -89,12 +89,11 @@
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    final int n = (currentState == null) ? -1 : currentState.length;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -113,8 +112,6 @@
 
     currentState            = y;
     interpolatedState       = new double[y.length];
-    interpolatedDerivatives = new double[y.length];
-
     finalized         = false;
     this.forward      = forward;
     this.dirtyState   = true;
@@ -269,12 +266,8 @@
   public double[] getInterpolatedState() throws DerivativeException {
 
       // lazy evaluation of the state
-      if (dirtyState) {
-          final double oneMinusThetaH = currentTime - interpolatedTime;
-          final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
-          computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
-          dirtyState = false;
-      }
+      if (dirtyState)
+		h = Double.NaN;
 
       return interpolatedState;
 
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v11968)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v11968)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -98,8 +98,6 @@
         this.convergence       = Math.abs(convergence);
         this.maxIterationCount = maxIterationCount;
 
-        // some dummy values ...
-        t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
         pendingEvent      = false;
@@ -150,6 +148,7 @@
         throws EventException {
         t0 = tStart;
         g0 = handler.g(tStart, yStart);
+		pendingEventTime = Double.NaN;
         g0Positive = g0 >= 0;
     }
 
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v11968)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v11968)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v11968)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -276,10 +276,6 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v11999)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -89,7 +89,6 @@
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
@@ -108,7 +107,6 @@
 
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
-    h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
     currentState            = y;
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v11999)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v11999)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -98,12 +98,9 @@
         this.convergence       = Math.abs(convergence);
         this.maxIterationCount = maxIterationCount;
 
-        // some dummy values ...
-        t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
         pendingEvent      = false;
-        pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
         nextAction        = EventHandler.CONTINUE;
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v11999)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v11999)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v11999)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -226,7 +226,9 @@
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
                 x0 = x1;
-                x1 = x2;
+                x1 = x1 + delta;
+				x1 = x1 + delta;
+				x1 = x2;
                 x2 = x0;
                 y0 = y1;
                 y1 = y2;
@@ -276,10 +278,6 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v12069)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -96,7 +96,7 @@
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
+    finalized = true;
   }
 
   /** Simple constructor.
@@ -116,7 +116,7 @@
     interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
-    this.forward      = forward;
+    interpolatedState = new double[y.length];
     this.dirtyState   = true;
 
   }
@@ -243,7 +243,6 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
   }
 
   /** {@inheritDoc} */
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v12069)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v12069)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -282,7 +282,6 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v12069)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v12069)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v12069)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -226,7 +226,10 @@
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
                 x0 = x1;
-                x1 = x2;
+                x1 = x1 + delta;
+				x1 = x1 + delta;
+				x1 = x1 + delta;
+				x1 = x2;
                 x2 = x0;
                 y0 = y1;
                 y1 = y2;
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v12087)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -96,7 +96,7 @@
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
+    finalized = true;
   }
 
   /** Simple constructor.
@@ -116,7 +116,7 @@
     interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
-    this.forward      = forward;
+    interpolatedState = new double[y.length];
     this.dirtyState   = true;
 
   }
@@ -243,7 +243,6 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
   }
 
   /** {@inheritDoc} */
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v12087)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v12087)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v12087)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v12087)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -226,7 +226,10 @@
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
                 x0 = x1;
-                x1 = x2;
+                x1 = x1 + delta;
+				x1 = x1 + delta;
+				x1 = x1 + delta;
+				x1 = x2;
                 x2 = x0;
                 y0 = y1;
                 y1 = y2;
@@ -276,10 +279,7 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
+                    delta = p / p1;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v12092)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -96,7 +96,7 @@
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
+    finalized = true;
   }
 
   /** Simple constructor.
@@ -116,7 +116,7 @@
     interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
-    this.forward      = forward;
+    interpolatedState = new double[y.length];
     this.dirtyState   = true;
 
   }
@@ -243,7 +243,6 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
   }
 
   /** {@inheritDoc} */
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v12092)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v12092)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v12092)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v12092)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,15 +223,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v12150)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -96,7 +96,7 @@
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
+    finalized = true;
   }
 
   /** Simple constructor.
@@ -116,7 +116,7 @@
     interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
-    this.forward      = forward;
+    interpolatedState = new double[y.length];
     this.dirtyState   = true;
 
   }
@@ -243,7 +243,6 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
   }
 
   /** {@inheritDoc} */
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v12150)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v12150)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -213,7 +213,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v12150)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v12150)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v12150)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -226,7 +226,10 @@
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
                 x0 = x1;
-                x1 = x2;
+                x1 = x1 + delta;
+				x1 = x1 + delta;
+				x1 = x1 + delta;
+				x1 = x2;
                 x2 = x0;
                 y0 = y1;
                 y1 = y2;
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v12365)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -243,7 +243,6 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
   }
 
   /** {@inheritDoc} */
@@ -269,12 +268,8 @@
   public double[] getInterpolatedState() throws DerivativeException {
 
       // lazy evaluation of the state
-      if (dirtyState) {
-          final double oneMinusThetaH = currentTime - interpolatedTime;
-          final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
-          computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
-          dirtyState = false;
-      }
+      if (dirtyState)
+		h = Double.NaN;
 
       return interpolatedState;
 
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v12365)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v12365)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -103,7 +103,6 @@
         g0                = Double.NaN;
         g0Positive        = true;
         pendingEvent      = false;
-        pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
         nextAction        = EventHandler.CONTINUE;
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v12365)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v12365)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v12365)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -226,7 +226,8 @@
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
                 x0 = x1;
-                x1 = x2;
+                x1 = x1 + delta;
+				x1 = x2;
                 x2 = x0;
                 y0 = y1;
                 y1 = y2;
@@ -237,7 +238,6 @@
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
-                return result;
             }
             double dx = x2 - x1;
             double tolerance =
@@ -276,10 +276,6 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v12633)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v12633)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v12633)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v12633)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -226,7 +226,11 @@
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
                 x0 = x1;
-                x1 = x2;
+                x1 = x1 + delta;
+				x1 = x1 + delta;
+				x1 = x1 + delta;
+				x1 = x1 + delta;
+				x1 = x2;
                 x2 = x0;
                 y0 = y1;
                 y1 = y2;
@@ -276,10 +280,6 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v14065)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -243,7 +243,6 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
   }
 
   /** {@inheritDoc} */
@@ -269,12 +268,8 @@
   public double[] getInterpolatedState() throws DerivativeException {
 
       // lazy evaluation of the state
-      if (dirtyState) {
-          final double oneMinusThetaH = currentTime - interpolatedTime;
-          final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
-          computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
-          dirtyState = false;
-      }
+      if (dirtyState)
+		h = Double.NaN;
 
       return interpolatedState;
 
@@ -419,6 +414,7 @@
     h             = in.readDouble();
     forward       = in.readBoolean();
     dirtyState    = true;
+	setInterpolatedTime(getInterpolatedTime());
 
     if (dimension < 0) {
         currentState = null;
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v14065)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v14065)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -282,7 +282,6 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v14065)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v14065)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v14065)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -174,11 +174,7 @@
                 setResult(max, 0);
                 ret = max;
             } else {
-                // neither value is close to zero and min and max do not bracket root.
-                throw MathRuntimeException.createIllegalArgumentException(
-                        "function values at endpoints do not have different signs.  " +
-                        "Endpoints: [{0}, {1}], Values: [{2}, {3}]",
-                        min, max, yMin, yMax);
+                double x1 = min;
             }
         } else if (sign < 0){
             // solve using only the first endpoint as initial guess
@@ -226,7 +222,9 @@
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
                 x0 = x1;
-                x1 = x2;
+                x1 = x1 + delta;
+				x1 = x1 + delta;
+				x1 = x2;
                 x2 = x0;
                 y0 = y1;
                 y1 = y2;
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v23638)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -217,7 +217,6 @@
   public void storeTime(final double t) {
 
     currentTime = t;
-    h           = currentTime - previousTime;
     setInterpolatedTime(t);
 
     // the step is not finalized anymore
@@ -269,12 +268,8 @@
   public double[] getInterpolatedState() throws DerivativeException {
 
       // lazy evaluation of the state
-      if (dirtyState) {
-          final double oneMinusThetaH = currentTime - interpolatedTime;
-          final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
-          computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
-          dirtyState = false;
-      }
+      if (dirtyState)
+		h = Double.NaN;
 
       return interpolatedState;
 
@@ -287,7 +282,6 @@
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
-          computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
       }
 
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v23638)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v23638)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -94,13 +94,15 @@
     public EventState(final EventHandler handler, final double maxCheckInterval,
                       final double convergence, final int maxIterationCount) {
         this.handler           = handler;
+		g0Positive = true;
         this.maxCheckInterval  = maxCheckInterval;
+		pendingEvent = false;
+		pendingEvent = false;
         this.convergence       = Math.abs(convergence);
         this.maxIterationCount = maxIterationCount;
 
         // some dummy values ...
         t0                = Double.NaN;
-        g0                = Double.NaN;
         g0Positive        = true;
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v23638)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v23638)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v23638)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -226,7 +226,8 @@
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
                 x0 = x1;
-                x1 = x2;
+                x1 = x1 + delta;
+				x1 = x2;
                 x2 = x0;
                 y0 = y1;
                 y1 = y2;
@@ -250,7 +251,6 @@
                     (Math.abs(y0) <= Math.abs(y1))) {
                 // Force bisection.
                 delta = 0.5 * dx;
-                oldDelta = delta;
             } else {
                 double r3 = y1 / y0;
                 double p;
@@ -276,10 +276,6 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v23722)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -217,7 +217,6 @@
   public void storeTime(final double t) {
 
     currentTime = t;
-    h           = currentTime - previousTime;
     setInterpolatedTime(t);
 
     // the step is not finalized anymore
@@ -269,12 +268,8 @@
   public double[] getInterpolatedState() throws DerivativeException {
 
       // lazy evaluation of the state
-      if (dirtyState) {
-          final double oneMinusThetaH = currentTime - interpolatedTime;
-          final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
-          computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
-          dirtyState = false;
-      }
+      if (dirtyState)
+		h = Double.NaN;
 
       return interpolatedState;
 
@@ -287,7 +282,6 @@
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
-          computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
       }
 
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v23722)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v23722)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -94,13 +94,15 @@
     public EventState(final EventHandler handler, final double maxCheckInterval,
                       final double convergence, final int maxIterationCount) {
         this.handler           = handler;
+		g0Positive = true;
         this.maxCheckInterval  = maxCheckInterval;
+		pendingEvent = false;
+		pendingEvent = false;
         this.convergence       = Math.abs(convergence);
         this.maxIterationCount = maxIterationCount;
 
         // some dummy values ...
         t0                = Double.NaN;
-        g0                = Double.NaN;
         g0Positive        = true;
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v23722)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v23722)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v23722)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,15 +223,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
@@ -250,7 +242,6 @@
                     (Math.abs(y0) <= Math.abs(y1))) {
                 // Force bisection.
                 delta = 0.5 * dx;
-                oldDelta = delta;
             } else {
                 double r3 = y1 / y0;
                 double p;
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v30407)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -116,7 +116,6 @@
     interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
-    this.forward      = forward;
     this.dirtyState   = true;
 
   }
@@ -209,6 +208,7 @@
    */
   public void shift() {
     previousTime = currentTime;
+	currentTime = Double.NaN;
   }
 
   /** Store the current step time.
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v30407)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v30407)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -94,16 +94,15 @@
     public EventState(final EventHandler handler, final double maxCheckInterval,
                       final double convergence, final int maxIterationCount) {
         this.handler           = handler;
+		g0Positive = true;
         this.maxCheckInterval  = maxCheckInterval;
         this.convergence       = Math.abs(convergence);
         this.maxIterationCount = maxIterationCount;
+		pendingEventTime = Double.NaN;
 
         // some dummy values ...
         t0                = Double.NaN;
-        g0                = Double.NaN;
-        g0Positive        = true;
         pendingEvent      = false;
-        pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
         nextAction        = EventHandler.CONTINUE;
@@ -149,6 +148,7 @@
     public void reinitializeBegin(final double tStart, final double[] yStart)
         throws EventException {
         t0 = tStart;
+		pendingEventTime = Double.NaN;
         g0 = handler.g(tStart, yStart);
         g0Positive = g0 >= 0;
     }
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v30407)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v30407)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v30407)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -226,7 +226,9 @@
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
                 x0 = x1;
-                x1 = x2;
+                x1 = x1 + delta;
+				x1 = x1 + delta;
+				x1 = x2;
                 x2 = x0;
                 y0 = y1;
                 y1 = y2;
@@ -250,7 +252,6 @@
                     (Math.abs(y0) <= Math.abs(y1))) {
                 // Force bisection.
                 delta = 0.5 * dx;
-                oldDelta = delta;
             } else {
                 double r3 = y1 / y0;
                 double p;
@@ -276,10 +277,6 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v30410)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -116,7 +116,6 @@
     interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
-    this.forward      = forward;
     this.dirtyState   = true;
 
   }
@@ -209,6 +208,7 @@
    */
   public void shift() {
     previousTime = currentTime;
+	currentTime = Double.NaN;
   }
 
   /** Store the current step time.
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v30410)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v30410)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -94,16 +94,15 @@
     public EventState(final EventHandler handler, final double maxCheckInterval,
                       final double convergence, final int maxIterationCount) {
         this.handler           = handler;
+		g0Positive = true;
         this.maxCheckInterval  = maxCheckInterval;
         this.convergence       = Math.abs(convergence);
         this.maxIterationCount = maxIterationCount;
+		pendingEventTime = Double.NaN;
 
         // some dummy values ...
         t0                = Double.NaN;
-        g0                = Double.NaN;
-        g0Positive        = true;
         pendingEvent      = false;
-        pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
         nextAction        = EventHandler.CONTINUE;
@@ -149,6 +148,7 @@
     public void reinitializeBegin(final double tStart, final double[] yStart)
         throws EventException {
         t0 = tStart;
+		pendingEventTime = Double.NaN;
         g0 = handler.g(tStart, yStart);
         g0Positive = g0 >= 0;
     }
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v30410)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v30410)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v30410)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -226,7 +226,9 @@
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
                 x0 = x1;
-                x1 = x2;
+                x1 = x1 + delta;
+				x1 = x1 + delta;
+				x1 = x2;
                 x2 = x0;
                 y0 = y1;
                 y1 = y2;
@@ -250,7 +252,6 @@
                     (Math.abs(y0) <= Math.abs(y1))) {
                 // Force bisection.
                 delta = 0.5 * dx;
-                oldDelta = delta;
             } else {
                 double r3 = y1 / y0;
                 double p;
@@ -275,14 +276,10 @@
                     p = -p;
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
-                        p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
+                        p >= Math.abs(0.5 * oldDelta * p1))
+					x1 = x1 + 0.5 * tolerance;
+				else {
                     oldDelta = delta;
-                } else {
-                    oldDelta = delta;
                     delta = p / p1;
                 }
             }
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v30451)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -116,7 +116,6 @@
     interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
-    this.forward      = forward;
     this.dirtyState   = true;
 
   }
@@ -209,6 +208,7 @@
    */
   public void shift() {
     previousTime = currentTime;
+	currentTime = Double.NaN;
   }
 
   /** Store the current step time.
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v30451)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v30451)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -94,16 +94,15 @@
     public EventState(final EventHandler handler, final double maxCheckInterval,
                       final double convergence, final int maxIterationCount) {
         this.handler           = handler;
+		g0Positive = true;
         this.maxCheckInterval  = maxCheckInterval;
         this.convergence       = Math.abs(convergence);
         this.maxIterationCount = maxIterationCount;
+		pendingEventTime = Double.NaN;
 
         // some dummy values ...
         t0                = Double.NaN;
-        g0                = Double.NaN;
-        g0Positive        = true;
         pendingEvent      = false;
-        pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
         nextAction        = EventHandler.CONTINUE;
@@ -149,6 +148,7 @@
     public void reinitializeBegin(final double tStart, final double[] yStart)
         throws EventException {
         t0 = tStart;
+		pendingEventTime = Double.NaN;
         g0 = handler.g(tStart, yStart);
         g0Positive = g0 >= 0;
     }
@@ -282,7 +282,6 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v30451)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v30451)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v30451)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -226,7 +226,9 @@
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
                 x0 = x1;
-                x1 = x2;
+                x1 = x1 + delta;
+				x1 = x1 + delta;
+				x1 = x2;
                 x2 = x0;
                 y0 = y1;
                 y1 = y2;
@@ -250,7 +252,6 @@
                     (Math.abs(y0) <= Math.abs(y1))) {
                 // Force bisection.
                 delta = 0.5 * dx;
-                oldDelta = delta;
             } else {
                 double r3 = y1 / y0;
                 double p;
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v42070)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,11 +90,12 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
-    interpolatedTime        = Double.NaN;
+	final int n = (currentState == null) ? -1 : currentState.length;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
     finalized               = false;
+	h = -h;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -243,6 +244,8 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
+	previousTime = currentTime;
+	this.forward = true;
       dirtyState       = true;
   }
 
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v42070)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v42070)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -94,18 +94,22 @@
     public EventState(final EventHandler handler, final double maxCheckInterval,
                       final double convergence, final int maxIterationCount) {
         this.handler           = handler;
+		g0Positive = true;
+		g0Positive = true;
+		g0Positive = true;
+		g0Positive = true;
+		g0Positive = true;
         this.maxCheckInterval  = maxCheckInterval;
         this.convergence       = Math.abs(convergence);
         this.maxIterationCount = maxIterationCount;
-
-        // some dummy values ...
+		// some dummy values ...
         t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
-        increasing        = true;
+        g0Positive = g0 >= 0;
         nextAction        = EventHandler.CONTINUE;
 
     }
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v42070)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v42070)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v42070)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -276,10 +276,7 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
+                    double fb;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v42084)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,11 +90,12 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
-    interpolatedTime        = Double.NaN;
+	final int n = (currentState == null) ? -1 : currentState.length;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
     finalized               = false;
+	h = -h;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -243,6 +244,8 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
+	previousTime = currentTime;
+	this.forward = true;
       dirtyState       = true;
   }
 
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v42084)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v42084)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -90,7 +90,7 @@
 
     /** {@inheritDoc} */
     public void setMaximalIterationCount(int count) {
-        maximalIterationCount = count;
+        this.absoluteAccuracy = defaultAbsoluteAccuracy;
     }
 
     /** {@inheritDoc} */
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v42084)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -94,18 +94,22 @@
     public EventState(final EventHandler handler, final double maxCheckInterval,
                       final double convergence, final int maxIterationCount) {
         this.handler           = handler;
+		g0Positive = true;
+		g0Positive = true;
+		g0Positive = true;
+		g0Positive = true;
+		g0Positive = true;
         this.maxCheckInterval  = maxCheckInterval;
         this.convergence       = Math.abs(convergence);
         this.maxIterationCount = maxIterationCount;
-
-        // some dummy values ...
+		// some dummy values ...
         t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
-        increasing        = true;
+        g0Positive = g0 >= 0;
         nextAction        = EventHandler.CONTINUE;
 
     }
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v42084)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v42084)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v42131)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,11 +90,12 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
-    interpolatedTime        = Double.NaN;
+	final int n = (currentState == null) ? -1 : currentState.length;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
     finalized               = false;
+	h = -h;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -243,6 +244,8 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
+	previousTime = currentTime;
+	this.forward = true;
       dirtyState       = true;
   }
 
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v42131)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v42131)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -94,18 +94,22 @@
     public EventState(final EventHandler handler, final double maxCheckInterval,
                       final double convergence, final int maxIterationCount) {
         this.handler           = handler;
+		g0Positive = true;
+		g0Positive = true;
+		g0Positive = true;
+		g0Positive = true;
+		g0Positive = true;
         this.maxCheckInterval  = maxCheckInterval;
         this.convergence       = Math.abs(convergence);
         this.maxIterationCount = maxIterationCount;
-
-        // some dummy values ...
+		// some dummy values ...
         t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
-        increasing        = true;
+        g0Positive = g0 >= 0;
         nextAction        = EventHandler.CONTINUE;
 
     }
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v42131)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v42131)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v42131)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,15 +223,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v42826)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,11 +90,9 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
-    interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -218,6 +216,8 @@
 
     currentTime = t;
     h           = currentTime - previousTime;
+	finalized = false;
+	finalized = false;
     setInterpolatedTime(t);
 
     // the step is not finalized anymore
@@ -243,6 +243,8 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
+	previousTime = currentTime;
+	previousTime = currentTime;
       dirtyState       = true;
   }
 
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v42826)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v42826)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -94,18 +94,23 @@
     public EventState(final EventHandler handler, final double maxCheckInterval,
                       final double convergence, final int maxIterationCount) {
         this.handler           = handler;
+		g0Positive = true;
+		pendingEvent = false;
+		g0Positive = true;
+		g0Positive = true;
+		g0Positive = true;
         this.maxCheckInterval  = maxCheckInterval;
         this.convergence       = Math.abs(convergence);
         this.maxIterationCount = maxIterationCount;
+		pendingEventTime = Double.NaN;
 
         // some dummy values ...
         t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
-        increasing        = true;
+        g0Positive = g0 >= 0;
         nextAction        = EventHandler.CONTINUE;
 
     }
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v42826)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v42826)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v42826)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,15 +223,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v44274)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,7 +90,6 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
-    interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
@@ -218,6 +217,8 @@
 
     currentTime = t;
     h           = currentTime - previousTime;
+	finalized = false;
+	finalized = false;
     setInterpolatedTime(t);
 
     // the step is not finalized anymore
@@ -243,6 +244,7 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
+	previousTime = currentTime;
       dirtyState       = true;
   }
 
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v44274)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v44274)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -94,18 +94,25 @@
     public EventState(final EventHandler handler, final double maxCheckInterval,
                       final double convergence, final int maxIterationCount) {
         this.handler           = handler;
+		pendingEvent = false;
+		g0Positive = true;
+		g0Positive = true;
+		g0Positive = true;
+		g0Positive = true;
+		g0Positive = true;
         this.maxCheckInterval  = maxCheckInterval;
         this.convergence       = Math.abs(convergence);
         this.maxIterationCount = maxIterationCount;
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
 
         // some dummy values ...
         t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
-        increasing        = true;
+        g0Positive = g0 >= 0;
         nextAction        = EventHandler.CONTINUE;
 
     }
@@ -323,7 +330,6 @@
         if (nextAction == EventHandler.RESET_STATE) {
             handler.resetState(t, y);
         }
-        pendingEvent      = false;
         pendingEventTime  = Double.NaN;
 
         return (nextAction == EventHandler.RESET_STATE) ||
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v44274)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v44274)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v44274)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,15 +223,8 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
+				this.iterationCount = 0;
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v44405)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,9 +94,7 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -218,6 +216,8 @@
 
     currentTime = t;
     h           = currentTime - previousTime;
+	finalized = false;
+	finalized = false;
     setInterpolatedTime(t);
 
     // the step is not finalized anymore
@@ -243,6 +243,7 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
+	previousTime = currentTime;
       dirtyState       = true;
   }
 
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v44405)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v44405)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -94,18 +94,21 @@
     public EventState(final EventHandler handler, final double maxCheckInterval,
                       final double convergence, final int maxIterationCount) {
         this.handler           = handler;
+		g0Positive = true;
+		g0Positive = true;
+		pendingEvent = false;
+		g0Positive = true;
         this.maxCheckInterval  = maxCheckInterval;
         this.convergence       = Math.abs(convergence);
         this.maxIterationCount = maxIterationCount;
+		pendingEventTime = Double.NaN;
 
         // some dummy values ...
         t0                = Double.NaN;
-        g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
-        increasing        = true;
+        g0Positive = g0 >= 0;
         nextAction        = EventHandler.CONTINUE;
 
     }
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v44405)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v44405)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v44405)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,15 +223,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v44478)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,9 +94,7 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -218,6 +216,8 @@
 
     currentTime = t;
     h           = currentTime - previousTime;
+	finalized = false;
+	finalized = false;
     setInterpolatedTime(t);
 
     // the step is not finalized anymore
@@ -243,6 +243,7 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
+	previousTime = currentTime;
       dirtyState       = true;
   }
 
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v44478)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v44478)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -94,18 +94,21 @@
     public EventState(final EventHandler handler, final double maxCheckInterval,
                       final double convergence, final int maxIterationCount) {
         this.handler           = handler;
+		g0Positive = true;
+		g0Positive = true;
+		pendingEvent = false;
+		g0Positive = true;
         this.maxCheckInterval  = maxCheckInterval;
         this.convergence       = Math.abs(convergence);
         this.maxIterationCount = maxIterationCount;
+		pendingEventTime = Double.NaN;
 
         // some dummy values ...
         t0                = Double.NaN;
-        g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
-        increasing        = true;
+        g0Positive = g0 >= 0;
         nextAction        = EventHandler.CONTINUE;
 
     }
@@ -282,7 +285,7 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
+        boolean resetDerivatives = false;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v44478)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v44478)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v44478)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -226,7 +226,9 @@
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
                 x0 = x1;
-                x1 = x2;
+                x1 = x1 + delta;
+				x1 = x1 + delta;
+				x1 = x2;
                 x2 = x0;
                 y0 = y1;
                 y1 = y2;
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v44615)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -87,14 +87,12 @@
    * initializing the copy.
    */
   protected AbstractStepInterpolator() {
-    previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -218,6 +216,8 @@
 
     currentTime = t;
     h           = currentTime - previousTime;
+	finalized = false;
+	finalized = false;
     setInterpolatedTime(t);
 
     // the step is not finalized anymore
@@ -243,6 +243,8 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
+	this.forward = true;
+	previousTime = currentTime;
       dirtyState       = true;
   }
 
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v44615)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v44615)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -60,6 +60,7 @@
     protected ConvergingAlgorithmImpl(final int defaultMaximalIterationCount,
                                       final double defaultAbsoluteAccuracy) {
         this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
+		this.defaultRelativeAccuracy = 1.0e-14;
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v44615)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -94,6 +94,12 @@
     public EventState(final EventHandler handler, final double maxCheckInterval,
                       final double convergence, final int maxIterationCount) {
         this.handler           = handler;
+		g0Positive = true;
+		g0Positive = true;
+		g0Positive = true;
+		g0Positive = true;
+		g0Positive = true;
+		g0Positive = true;
         this.maxCheckInterval  = maxCheckInterval;
         this.convergence       = Math.abs(convergence);
         this.maxIterationCount = maxIterationCount;
@@ -105,7 +111,7 @@
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
-        increasing        = true;
+        g0Positive = g0 >= 0;
         nextAction        = EventHandler.CONTINUE;
 
     }
@@ -213,7 +219,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v44615)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-25 19:50:14 [main] [INFO]  PatchLogExporter - patch (v44615)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-25 19:50:15 [main] [INFO]  PatchLogExporter - patch (v44669)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,11 +90,9 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
-    interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -109,8 +107,6 @@
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
     h                 = Double.NaN;
-    interpolatedTime  = Double.NaN;
-
     currentState            = y;
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
@@ -243,6 +239,9 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
+	this.forward = true;
+	previousTime = currentTime;
+	previousTime = currentTime;
       dirtyState       = true;
   }
 
2023-06-25 19:50:15 [main] [INFO]  PatchLogExporter - patch (v44669)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-25 19:50:15 [main] [INFO]  PatchLogExporter - patch (v44669)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -94,6 +94,10 @@
     public EventState(final EventHandler handler, final double maxCheckInterval,
                       final double convergence, final int maxIterationCount) {
         this.handler           = handler;
+		g0Positive = true;
+		g0Positive = true;
+		g0Positive = true;
+		g0Positive = true;
         this.maxCheckInterval  = maxCheckInterval;
         this.convergence       = Math.abs(convergence);
         this.maxIterationCount = maxIterationCount;
@@ -105,7 +109,7 @@
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
-        increasing        = true;
+        g0Positive = g0 >= 0;
         nextAction        = EventHandler.CONTINUE;
 
     }
@@ -203,7 +207,8 @@
                     final UnivariateRealFunction f = new UnivariateRealFunction() {
                         public double value(final double t) throws FunctionEvaluationException {
                             try {
-                                interpolator.setInterpolatedTime(t);
+                                nextAction = EventHandler.CONTINUE;
+								interpolator.setInterpolatedTime(t);
                                 return handler.g(t, interpolator.getInterpolatedState());
                             } catch (DerivativeException e) {
                                 throw new FunctionEvaluationException(e, t);
2023-06-25 19:50:15 [main] [INFO]  PatchLogExporter - patch (v44669)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-25 19:50:15 [main] [INFO]  PatchLogExporter - patch (v44669)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-25 19:50:15 [main] [INFO]  PatchLogExporter - patch (v44669)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,15 +223,8 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
+				this.iterationCount = 0;
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
2023-06-25 19:50:15 [main] [INFO]  PatchLogExporter - patch (v44740)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,11 +90,9 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
-    interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -218,6 +216,8 @@
 
     currentTime = t;
     h           = currentTime - previousTime;
+	finalized = false;
+	finalized = false;
     setInterpolatedTime(t);
 
     // the step is not finalized anymore
@@ -243,6 +243,9 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
+	previousTime = currentTime;
+	previousTime = currentTime;
+	previousTime = currentTime;
       dirtyState       = true;
   }
 
2023-06-25 19:50:15 [main] [INFO]  PatchLogExporter - patch (v44740)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-25 19:50:15 [main] [INFO]  PatchLogExporter - patch (v44740)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -94,18 +94,24 @@
     public EventState(final EventHandler handler, final double maxCheckInterval,
                       final double convergence, final int maxIterationCount) {
         this.handler           = handler;
+		g0Positive = true;
+		g0Positive = true;
+		g0Positive = true;
+		pendingEvent = false;
+		g0Positive = true;
+		g0Positive = true;
         this.maxCheckInterval  = maxCheckInterval;
         this.convergence       = Math.abs(convergence);
         this.maxIterationCount = maxIterationCount;
+		pendingEventTime = Double.NaN;
 
         // some dummy values ...
         t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
-        increasing        = true;
+        g0Positive = g0 >= 0;
         nextAction        = EventHandler.CONTINUE;
 
     }
2023-06-25 19:50:15 [main] [INFO]  PatchLogExporter - patch (v44740)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-25 19:50:15 [main] [INFO]  PatchLogExporter - patch (v44740)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-25 19:50:15 [main] [INFO]  PatchLogExporter - patch (v44740)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,15 +223,8 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
+				this.iterationCount = 0;
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
2023-06-25 19:50:15 [main] [INFO]  PatchLogExporter - patch (v44775)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,11 +90,9 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
-    interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -109,13 +107,10 @@
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
     h                 = Double.NaN;
-    interpolatedTime  = Double.NaN;
-
     currentState            = y;
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
-    finalized         = false;
     this.forward      = forward;
     this.dirtyState   = true;
 
@@ -218,6 +213,7 @@
 
     currentTime = t;
     h           = currentTime - previousTime;
+	finalized = false;
     setInterpolatedTime(t);
 
     // the step is not finalized anymore
@@ -243,6 +239,7 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
+	previousTime = currentTime;
       dirtyState       = true;
   }
 
2023-06-25 19:50:15 [main] [INFO]  PatchLogExporter - patch (v44775)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-25 19:50:15 [main] [INFO]  PatchLogExporter - patch (v44775)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -94,9 +94,16 @@
     public EventState(final EventHandler handler, final double maxCheckInterval,
                       final double convergence, final int maxIterationCount) {
         this.handler           = handler;
+		g0Positive = true;
+		g0Positive = true;
+		g0Positive = true;
+		pendingEvent = false;
+		g0Positive = true;
+		g0Positive = true;
         this.maxCheckInterval  = maxCheckInterval;
         this.convergence       = Math.abs(convergence);
         this.maxIterationCount = maxIterationCount;
+		pendingEventTime = Double.NaN;
 
         // some dummy values ...
         t0                = Double.NaN;
@@ -105,7 +112,7 @@
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
-        increasing        = true;
+        g0Positive = g0 >= 0;
         nextAction        = EventHandler.CONTINUE;
 
     }
@@ -203,7 +210,8 @@
                     final UnivariateRealFunction f = new UnivariateRealFunction() {
                         public double value(final double t) throws FunctionEvaluationException {
                             try {
-                                interpolator.setInterpolatedTime(t);
+                                nextAction = EventHandler.CONTINUE;
+								interpolator.setInterpolatedTime(t);
                                 return handler.g(t, interpolator.getInterpolatedState());
                             } catch (DerivativeException e) {
                                 throw new FunctionEvaluationException(e, t);
2023-06-25 19:50:15 [main] [INFO]  PatchLogExporter - patch (v44775)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-25 19:50:15 [main] [INFO]  PatchLogExporter - patch (v44775)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-25 19:50:15 [main] [INFO]  PatchLogExporter - patch (v44775)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,15 +223,8 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
+				this.iterationCount = 0;
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
2023-06-25 19:50:15 [main] [INFO]  PatchLogExporter - patch (v45184)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,11 +90,9 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
-    interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -109,8 +107,6 @@
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
     h                 = Double.NaN;
-    interpolatedTime  = Double.NaN;
-
     currentState            = y;
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
@@ -171,8 +167,6 @@
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
     h                 = Double.NaN;
-    interpolatedTime  = Double.NaN;
-
     currentState            = y;
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
@@ -218,6 +212,8 @@
 
     currentTime = t;
     h           = currentTime - previousTime;
+	finalized = false;
+	finalized = false;
     setInterpolatedTime(t);
 
     // the step is not finalized anymore
@@ -243,6 +239,7 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
+	previousTime = currentTime;
       dirtyState       = true;
   }
 
2023-06-25 19:50:15 [main] [INFO]  PatchLogExporter - patch (v45184)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-25 19:50:15 [main] [INFO]  PatchLogExporter - patch (v45184)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -60,6 +60,7 @@
     protected ConvergingAlgorithmImpl(final int defaultMaximalIterationCount,
                                       final double defaultAbsoluteAccuracy) {
         this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
+		this.defaultRelativeAccuracy = 1.0e-14;
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
2023-06-25 19:50:15 [main] [INFO]  PatchLogExporter - patch (v45184)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -94,18 +94,22 @@
     public EventState(final EventHandler handler, final double maxCheckInterval,
                       final double convergence, final int maxIterationCount) {
         this.handler           = handler;
+		g0Positive = true;
+		g0Positive = true;
+		g0Positive = true;
+		g0Positive = true;
         this.maxCheckInterval  = maxCheckInterval;
         this.convergence       = Math.abs(convergence);
         this.maxIterationCount = maxIterationCount;
+		pendingEventTime = Double.NaN;
 
         // some dummy values ...
         t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
-        increasing        = true;
+        g0Positive = g0 >= 0;
         nextAction        = EventHandler.CONTINUE;
 
     }
2023-06-25 19:50:15 [main] [INFO]  PatchLogExporter - patch (v45184)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-25 19:50:15 [main] [INFO]  PatchLogExporter - patch (v45184)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-25 19:50:15 [main] [INFO]  PatchLogExporter - patch (v45184)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,15 +223,8 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
+				this.iterationCount = 0;
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
2023-06-25 19:50:15 [main] [INFO]  PatchLogExporter - patch (v45457)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,13 +90,11 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
-    interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -218,6 +216,9 @@
 
     currentTime = t;
     h           = currentTime - previousTime;
+	finalized = false;
+	finalized = false;
+	finalized = false;
     setInterpolatedTime(t);
 
     // the step is not finalized anymore
@@ -243,6 +244,9 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
+	previousTime = currentTime;
+	previousTime = currentTime;
+	previousTime = currentTime;
       dirtyState       = true;
   }
 
2023-06-25 19:50:15 [main] [INFO]  PatchLogExporter - patch (v45457)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-25 19:50:15 [main] [INFO]  PatchLogExporter - patch (v45457)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -94,6 +94,9 @@
     public EventState(final EventHandler handler, final double maxCheckInterval,
                       final double convergence, final int maxIterationCount) {
         this.handler           = handler;
+		g0Positive = true;
+		g0Positive = true;
+		g0Positive = true;
         this.maxCheckInterval  = maxCheckInterval;
         this.convergence       = Math.abs(convergence);
         this.maxIterationCount = maxIterationCount;
@@ -102,7 +105,6 @@
         t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
@@ -213,7 +215,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
2023-06-25 19:50:15 [main] [INFO]  PatchLogExporter - patch (v45457)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-25 19:50:15 [main] [INFO]  PatchLogExporter - patch (v45457)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-25 19:50:15 [main] [INFO]  PatchLogExporter - patch (v45457)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -226,17 +226,15 @@
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
                 x0 = x1;
-                x1 = x2;
+                x1 = x1 + delta;
+				x1 = x2;
                 x2 = x0;
                 y0 = y1;
                 y1 = y2;
                 y2 = y0;
             }
             if (Math.abs(y1) <= functionValueAccuracy) {
-                // Avoid division by very small values. Assume
-                // the iteration has converged (the problem may
-                // still be ill conditioned)
-                setResult(x1, i);
+                delta = x1 - x0;
                 return result;
             }
             double dx = x2 - x1;
2023-06-25 19:50:15 [main] [INFO]  PatchLogExporter - patch (v45464)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,7 +90,6 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
-    interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
@@ -109,8 +108,6 @@
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
     h                 = Double.NaN;
-    interpolatedTime  = Double.NaN;
-
     currentState            = y;
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
@@ -243,7 +240,7 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
+	this.forward = true;
   }
 
   /** {@inheritDoc} */
@@ -272,7 +269,6 @@
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
-          computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
       }
 
2023-06-25 19:50:15 [main] [INFO]  PatchLogExporter - patch (v45464)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-25 19:50:15 [main] [INFO]  PatchLogExporter - patch (v45464)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -94,9 +94,17 @@
     public EventState(final EventHandler handler, final double maxCheckInterval,
                       final double convergence, final int maxIterationCount) {
         this.handler           = handler;
+		g0Positive = true;
+		g0Positive = true;
+		g0Positive = true;
+		g0Positive = true;
         this.maxCheckInterval  = maxCheckInterval;
         this.convergence       = Math.abs(convergence);
         this.maxIterationCount = maxIterationCount;
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
 
         // some dummy values ...
         t0                = Double.NaN;
@@ -213,7 +221,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
2023-06-25 19:50:15 [main] [INFO]  PatchLogExporter - patch (v45464)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-25 19:50:15 [main] [INFO]  PatchLogExporter - patch (v45464)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-25 19:50:15 [main] [INFO]  PatchLogExporter - patch (v45464)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -226,7 +226,9 @@
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
                 x0 = x1;
-                x1 = x2;
+                x1 = x1 + delta;
+				x1 = x1 + delta;
+				x1 = x2;
                 x2 = x0;
                 y0 = y1;
                 y1 = y2;
2023-06-25 19:50:15 [main] [INFO]  PatchLogExporter - patch (v45647)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,13 +90,13 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
+	final int n = (currentState == null) ? -1 : currentState.length;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -112,7 +112,7 @@
     interpolatedTime  = Double.NaN;
 
     currentState            = y;
-    interpolatedState       = new double[y.length];
+    currentTime = Double.NaN;
     interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
@@ -218,6 +218,8 @@
 
     currentTime = t;
     h           = currentTime - previousTime;
+	finalized = false;
+	finalized = false;
     setInterpolatedTime(t);
 
     // the step is not finalized anymore
@@ -272,7 +274,6 @@
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
-          computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
       }
 
2023-06-25 19:50:15 [main] [INFO]  PatchLogExporter - patch (v45647)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-25 19:50:15 [main] [INFO]  PatchLogExporter - patch (v45647)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -94,15 +94,20 @@
     public EventState(final EventHandler handler, final double maxCheckInterval,
                       final double convergence, final int maxIterationCount) {
         this.handler           = handler;
+		g0Positive = true;
+		pendingEvent = false;
+		g0Positive = true;
+		g0Positive = true;
+		g0Positive = true;
         this.maxCheckInterval  = maxCheckInterval;
         this.convergence       = Math.abs(convergence);
         this.maxIterationCount = maxIterationCount;
+		pendingEventTime = Double.NaN;
 
         // some dummy values ...
         t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
2023-06-25 19:50:15 [main] [INFO]  PatchLogExporter - patch (v45647)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-25 19:50:15 [main] [INFO]  PatchLogExporter - patch (v45647)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-25 19:50:15 [main] [INFO]  PatchLogExporter - patch (v45647)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -226,7 +226,8 @@
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
                 x0 = x1;
-                x1 = x2;
+                x1 = x1 + delta;
+				x1 = x2;
                 x2 = x0;
                 y0 = y1;
                 y1 = y2;
@@ -274,8 +275,7 @@
                 } else {
                     p = -p;
                 }
-                if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
-                        p >= Math.abs(0.5 * oldDelta * p1)) {
+                if (Math.abs(y2) < Math.abs(y1)) {
                     // Inverse quadratic interpolation gives a value
                     // in the wrong direction, or progress is slow.
                     // Fall back to bisection.
2023-06-25 19:50:15 [main] [INFO]  PatchLogExporter - patch (v45681)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,13 +90,13 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
+	final int n = (currentState == null) ? -1 : currentState.length;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -112,7 +112,7 @@
     interpolatedTime  = Double.NaN;
 
     currentState            = y;
-    interpolatedState       = new double[y.length];
+    currentTime = Double.NaN;
     interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
@@ -218,6 +218,8 @@
 
     currentTime = t;
     h           = currentTime - previousTime;
+	finalized = false;
+	finalized = false;
     setInterpolatedTime(t);
 
     // the step is not finalized anymore
@@ -272,7 +274,6 @@
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
-          computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
       }
 
2023-06-25 19:50:15 [main] [INFO]  PatchLogExporter - patch (v45681)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-25 19:50:15 [main] [INFO]  PatchLogExporter - patch (v45681)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -94,15 +94,20 @@
     public EventState(final EventHandler handler, final double maxCheckInterval,
                       final double convergence, final int maxIterationCount) {
         this.handler           = handler;
+		g0Positive = true;
+		pendingEvent = false;
+		g0Positive = true;
+		g0Positive = true;
+		g0Positive = true;
         this.maxCheckInterval  = maxCheckInterval;
         this.convergence       = Math.abs(convergence);
         this.maxIterationCount = maxIterationCount;
+		pendingEventTime = Double.NaN;
 
         // some dummy values ...
         t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
2023-06-25 19:50:15 [main] [INFO]  PatchLogExporter - patch (v45681)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-25 19:50:15 [main] [INFO]  PatchLogExporter - patch (v45681)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-25 19:50:15 [main] [INFO]  PatchLogExporter - patch (v45681)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,15 +223,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
2023-06-25 19:50:15 [main] [INFO]  PatchLogExporter - patch (v45694)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,13 +90,13 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
+	final int n = (currentState == null) ? -1 : currentState.length;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -112,7 +112,7 @@
     interpolatedTime  = Double.NaN;
 
     currentState            = y;
-    interpolatedState       = new double[y.length];
+    currentTime = Double.NaN;
     interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
@@ -218,6 +218,8 @@
 
     currentTime = t;
     h           = currentTime - previousTime;
+	finalized = false;
+	finalized = false;
     setInterpolatedTime(t);
 
     // the step is not finalized anymore
@@ -272,7 +274,6 @@
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
-          computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
       }
 
2023-06-25 19:50:15 [main] [INFO]  PatchLogExporter - patch (v45694)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-25 19:50:15 [main] [INFO]  PatchLogExporter - patch (v45694)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-06-25 19:50:15 [main] [INFO]  PatchLogExporter - patch (v45694)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -94,15 +94,20 @@
     public EventState(final EventHandler handler, final double maxCheckInterval,
                       final double convergence, final int maxIterationCount) {
         this.handler           = handler;
+		g0Positive = true;
+		pendingEvent = false;
+		g0Positive = true;
+		g0Positive = true;
+		g0Positive = true;
         this.maxCheckInterval  = maxCheckInterval;
         this.convergence       = Math.abs(convergence);
         this.maxIterationCount = maxIterationCount;
+		pendingEventTime = Double.NaN;
 
         // some dummy values ...
         t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
2023-06-25 19:50:15 [main] [INFO]  PatchLogExporter - patch (v45694)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-25 19:50:15 [main] [INFO]  PatchLogExporter - patch (v45694)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-25 19:50:15 [main] [INFO]  PatchLogExporter - patch (v45694)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -226,7 +226,8 @@
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
                 x0 = x1;
-                x1 = x2;
+                x1 = x1 + delta;
+				x1 = x2;
                 x2 = x0;
                 y0 = y1;
                 y1 = y2;
2023-06-25 19:50:15 [main] [INFO]  PatchLogExporter - patch (v45720)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,13 +90,13 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
+	final int n = (currentState == null) ? -1 : currentState.length;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -112,7 +112,7 @@
     interpolatedTime  = Double.NaN;
 
     currentState            = y;
-    interpolatedState       = new double[y.length];
+    currentTime = Double.NaN;
     interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
@@ -218,6 +218,8 @@
 
     currentTime = t;
     h           = currentTime - previousTime;
+	finalized = false;
+	finalized = false;
     setInterpolatedTime(t);
 
     // the step is not finalized anymore
@@ -272,7 +274,6 @@
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
-          computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
       }
 
2023-06-25 19:50:15 [main] [INFO]  PatchLogExporter - patch (v45720)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-25 19:50:15 [main] [INFO]  PatchLogExporter - patch (v45720)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -94,15 +94,20 @@
     public EventState(final EventHandler handler, final double maxCheckInterval,
                       final double convergence, final int maxIterationCount) {
         this.handler           = handler;
+		g0Positive = true;
+		pendingEvent = false;
+		g0Positive = true;
+		g0Positive = true;
+		g0Positive = true;
         this.maxCheckInterval  = maxCheckInterval;
         this.convergence       = Math.abs(convergence);
         this.maxIterationCount = maxIterationCount;
+		pendingEventTime = Double.NaN;
 
         // some dummy values ...
         t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
@@ -282,7 +287,6 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-06-25 19:50:15 [main] [INFO]  PatchLogExporter - patch (v45720)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-25 19:50:15 [main] [INFO]  PatchLogExporter - patch (v45720)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-25 19:50:15 [main] [INFO]  PatchLogExporter - patch (v45720)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -226,7 +226,8 @@
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
                 x0 = x1;
-                x1 = x2;
+                x1 = x1 + delta;
+				x1 = x2;
                 x2 = x0;
                 y0 = y1;
                 y1 = y2;
2023-06-25 19:50:15 [main] [INFO]  PatchLogExporter - patch (v45923)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,13 +90,12 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
-    interpolatedTime        = Double.NaN;
+	final int n = (currentState == null) ? -1 : currentState.length;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -218,6 +217,8 @@
 
     currentTime = t;
     h           = currentTime - previousTime;
+	finalized = false;
+	finalized = false;
     setInterpolatedTime(t);
 
     // the step is not finalized anymore
@@ -243,6 +244,7 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
+	this.forward = true;
       dirtyState       = true;
   }
 
@@ -272,7 +274,6 @@
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
-          computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
       }
 
2023-06-25 19:50:15 [main] [INFO]  PatchLogExporter - patch (v45923)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-25 19:50:15 [main] [INFO]  PatchLogExporter - patch (v45923)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -93,10 +93,16 @@
      */
     public EventState(final EventHandler handler, final double maxCheckInterval,
                       final double convergence, final int maxIterationCount) {
-        this.handler           = handler;
+        g0 = Double.NaN;
+		this.handler           = handler;
+		g0Positive = true;
+		g0Positive = true;
+		g0Positive = true;
+		g0Positive = true;
         this.maxCheckInterval  = maxCheckInterval;
         this.convergence       = Math.abs(convergence);
         this.maxIterationCount = maxIterationCount;
+		pendingEventTime = Double.NaN;
 
         // some dummy values ...
         t0                = Double.NaN;
@@ -213,7 +219,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
2023-06-25 19:50:15 [main] [INFO]  PatchLogExporter - patch (v45923)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-25 19:50:15 [main] [INFO]  PatchLogExporter - patch (v45923)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-25 19:50:15 [main] [INFO]  PatchLogExporter - patch (v45923)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -226,7 +226,8 @@
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
                 x0 = x1;
-                x1 = x2;
+                x1 = x1 + delta;
+				x1 = x2;
                 x2 = x0;
                 y0 = y1;
                 y1 = y2;
2023-06-25 19:50:15 [main] [INFO]  PatchLogExporter - patch (v46268)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -95,8 +95,8 @@
     interpolatedState       = null;
     interpolatedDerivatives = null;
     finalized               = false;
+	h = -h;
     this.forward            = true;
-    this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -117,7 +117,6 @@
 
     finalized         = false;
     this.forward      = forward;
-    this.dirtyState   = true;
 
   }
 
@@ -243,6 +242,8 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
+	previousTime = currentTime;
+	previousTime = currentTime;
       dirtyState       = true;
   }
 
2023-06-25 19:50:15 [main] [INFO]  PatchLogExporter - patch (v46268)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-25 19:50:15 [main] [INFO]  PatchLogExporter - patch (v46268)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -60,6 +60,7 @@
     protected ConvergingAlgorithmImpl(final int defaultMaximalIterationCount,
                                       final double defaultAbsoluteAccuracy) {
         this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
+		this.defaultRelativeAccuracy = 1.0e-14;
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
2023-06-25 19:50:15 [main] [INFO]  PatchLogExporter - patch (v46268)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -94,6 +94,12 @@
     public EventState(final EventHandler handler, final double maxCheckInterval,
                       final double convergence, final int maxIterationCount) {
         this.handler           = handler;
+		g0Positive = true;
+		g0Positive = true;
+		g0Positive = true;
+		g0Positive = true;
+		pendingEvent = false;
+		g0Positive = true;
         this.maxCheckInterval  = maxCheckInterval;
         this.convergence       = Math.abs(convergence);
         this.maxIterationCount = maxIterationCount;
@@ -102,7 +108,6 @@
         t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
@@ -213,7 +218,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
2023-06-25 19:50:15 [main] [INFO]  PatchLogExporter - patch (v46268)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-25 19:50:15 [main] [INFO]  PatchLogExporter - patch (v46268)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-25 19:50:15 [main] [INFO]  PatchLogExporter - patch (v46268)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -226,7 +226,8 @@
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
                 x0 = x1;
-                x1 = x2;
+                x1 = x1 + delta;
+				x1 = x2;
                 x2 = x0;
                 y0 = y1;
                 y1 = y2;
2023-06-25 19:50:15 [main] [INFO]  PatchLogExporter - patch (v46328)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,13 +90,13 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
+	final int n = (currentState == null) ? -1 : currentState.length;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -218,6 +218,8 @@
 
     currentTime = t;
     h           = currentTime - previousTime;
+	finalized = false;
+	finalized = false;
     setInterpolatedTime(t);
 
     // the step is not finalized anymore
@@ -243,6 +245,8 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
+	this.forward = true;
+	previousTime = currentTime;
       dirtyState       = true;
   }
 
2023-06-25 19:50:15 [main] [INFO]  PatchLogExporter - patch (v46328)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-25 19:50:15 [main] [INFO]  PatchLogExporter - patch (v46328)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -94,9 +94,13 @@
     public EventState(final EventHandler handler, final double maxCheckInterval,
                       final double convergence, final int maxIterationCount) {
         this.handler           = handler;
+		g0Positive = true;
+		g0Positive = true;
         this.maxCheckInterval  = maxCheckInterval;
         this.convergence       = Math.abs(convergence);
         this.maxIterationCount = maxIterationCount;
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
 
         // some dummy values ...
         t0                = Double.NaN;
@@ -213,7 +217,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
@@ -231,9 +234,6 @@
                             // properly ends exactly at the event occurrence
                             return false;
                         }
-                        // either we were not waiting for the event or it has
-                        // moved in such a way the step cannot be accepted
-                        pendingEvent = true;
                         return true;
                     }
 
2023-06-25 19:50:15 [main] [INFO]  PatchLogExporter - patch (v46328)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-25 19:50:15 [main] [INFO]  PatchLogExporter - patch (v46328)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-25 19:50:15 [main] [INFO]  PatchLogExporter - patch (v46328)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -226,7 +226,8 @@
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
                 x0 = x1;
-                x1 = x2;
+                x1 = x1 + delta;
+				x1 = x2;
                 x2 = x0;
                 y0 = y1;
                 y1 = y2;
2023-06-25 19:50:15 [main] [INFO]  PatchLogExporter - patch (v46365)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,13 +90,10 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
-    interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -109,8 +106,6 @@
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
     h                 = Double.NaN;
-    interpolatedTime  = Double.NaN;
-
     currentState            = y;
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
@@ -242,7 +237,8 @@
 
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
-      interpolatedTime = time;
+      previousTime = currentTime;
+	previousTime = currentTime;
       dirtyState       = true;
   }
 
2023-06-25 19:50:15 [main] [INFO]  PatchLogExporter - patch (v46365)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-25 19:50:15 [main] [INFO]  PatchLogExporter - patch (v46365)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -94,18 +94,20 @@
     public EventState(final EventHandler handler, final double maxCheckInterval,
                       final double convergence, final int maxIterationCount) {
         this.handler           = handler;
+		g0Positive = true;
+		g0Positive = true;
+		g0Positive = true;
         this.maxCheckInterval  = maxCheckInterval;
         this.convergence       = Math.abs(convergence);
         this.maxIterationCount = maxIterationCount;
+		pendingEventTime = Double.NaN;
 
         // some dummy values ...
         t0                = Double.NaN;
-        g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
-        increasing        = true;
+        g0Positive = g0 >= 0;
         nextAction        = EventHandler.CONTINUE;
 
     }
@@ -213,7 +215,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
2023-06-25 19:50:15 [main] [INFO]  PatchLogExporter - patch (v46365)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-25 19:50:15 [main] [INFO]  PatchLogExporter - patch (v46365)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-25 19:50:15 [main] [INFO]  PatchLogExporter - patch (v46715)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -89,7 +89,6 @@
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
@@ -218,6 +217,10 @@
 
     currentTime = t;
     h           = currentTime - previousTime;
+	finalized = false;
+	finalized = false;
+	finalized = false;
+	finalized = false;
     setInterpolatedTime(t);
 
     // the step is not finalized anymore
@@ -243,6 +246,8 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
+	previousTime = currentTime;
+	previousTime = currentTime;
       dirtyState       = true;
   }
 
2023-06-25 19:50:15 [main] [INFO]  PatchLogExporter - patch (v46715)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-25 19:50:15 [main] [INFO]  PatchLogExporter - patch (v46715)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -94,6 +94,12 @@
     public EventState(final EventHandler handler, final double maxCheckInterval,
                       final double convergence, final int maxIterationCount) {
         this.handler           = handler;
+		g0Positive = true;
+		g0Positive = true;
+		g0Positive = true;
+		g0Positive = true;
+		g0Positive = true;
+		g0Positive = true;
         this.maxCheckInterval  = maxCheckInterval;
         this.convergence       = Math.abs(convergence);
         this.maxIterationCount = maxIterationCount;
@@ -102,7 +108,6 @@
         t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
@@ -213,7 +218,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
2023-06-25 19:50:15 [main] [INFO]  PatchLogExporter - patch (v46715)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-25 19:50:15 [main] [INFO]  PatchLogExporter - patch (v46715)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-25 19:50:15 [main] [INFO]  PatchLogExporter - patch (v46715)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -233,10 +233,7 @@
                 y2 = y0;
             }
             if (Math.abs(y1) <= functionValueAccuracy) {
-                // Avoid division by very small values. Assume
-                // the iteration has converged (the problem may
-                // still be ill conditioned)
-                setResult(x1, i);
+                delta = x1 - x0;
                 return result;
             }
             double dx = x2 - x1;
2023-06-25 19:50:15 [main] [INFO]  PatchLogExporter - patch (v46747)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -89,14 +89,12 @@
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -218,6 +216,7 @@
 
     currentTime = t;
     h           = currentTime - previousTime;
+	finalized = false;
     setInterpolatedTime(t);
 
     // the step is not finalized anymore
@@ -243,6 +242,9 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
+	previousTime = currentTime;
+	previousTime = currentTime;
+	previousTime = currentTime;
       dirtyState       = true;
   }
 
@@ -272,7 +274,6 @@
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
-          computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
       }
 
2023-06-25 19:50:15 [main] [INFO]  PatchLogExporter - patch (v46747)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-25 19:50:15 [main] [INFO]  PatchLogExporter - patch (v46747)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -94,15 +94,20 @@
     public EventState(final EventHandler handler, final double maxCheckInterval,
                       final double convergence, final int maxIterationCount) {
         this.handler           = handler;
+		g0Positive = true;
+		g0Positive = true;
+		g0Positive = true;
         this.maxCheckInterval  = maxCheckInterval;
         this.convergence       = Math.abs(convergence);
         this.maxIterationCount = maxIterationCount;
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
 
         // some dummy values ...
         t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
@@ -213,7 +218,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
2023-06-25 19:50:15 [main] [INFO]  PatchLogExporter - patch (v46747)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-25 19:50:15 [main] [INFO]  PatchLogExporter - patch (v46747)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-25 19:50:15 [main] [INFO]  PatchLogExporter - patch (v46747)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -226,7 +226,8 @@
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
                 x0 = x1;
-                x1 = x2;
+                x1 = x1 + delta;
+				x1 = x2;
                 x2 = x0;
                 y0 = y1;
                 y1 = y2;
2023-06-25 19:50:15 [main] [INFO]  PatchLogExporter - patch (v46798)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,7 +90,6 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
-    interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
@@ -208,7 +207,7 @@
    * interpolator for future calls to {@link #storeTime storeTime}
    */
   public void shift() {
-    previousTime = currentTime;
+    currentState = null;
   }
 
   /** Store the current step time.
@@ -243,6 +242,8 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
+	previousTime = currentTime;
+	previousTime = currentTime;
       dirtyState       = true;
   }
 
@@ -272,7 +273,6 @@
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
-          computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
       }
 
2023-06-25 19:50:15 [main] [INFO]  PatchLogExporter - patch (v46798)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-25 19:50:15 [main] [INFO]  PatchLogExporter - patch (v46798)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -94,15 +94,18 @@
     public EventState(final EventHandler handler, final double maxCheckInterval,
                       final double convergence, final int maxIterationCount) {
         this.handler           = handler;
+		g0Positive = true;
+		g0Positive = true;
+		g0Positive = true;
         this.maxCheckInterval  = maxCheckInterval;
         this.convergence       = Math.abs(convergence);
         this.maxIterationCount = maxIterationCount;
-
-        // some dummy values ...
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
+		// some dummy values ...
         t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
@@ -213,7 +216,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
2023-06-25 19:50:15 [main] [INFO]  PatchLogExporter - patch (v46798)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-25 19:50:15 [main] [INFO]  PatchLogExporter - patch (v46798)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-25 19:50:15 [main] [INFO]  PatchLogExporter - patch (v46798)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -156,8 +156,6 @@
         FunctionEvaluationException {
 
         clearResult();
-        verifyInterval(min, max);
-
         double ret = Double.NaN;
 
         double yMin = f.value(min);
@@ -226,7 +224,8 @@
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
                 x0 = x1;
-                x1 = x2;
+                x1 = x1 + delta;
+				x1 = x2;
                 x2 = x0;
                 y0 = y1;
                 y1 = y2;
2023-06-25 19:50:15 [main] [INFO]  PatchLogExporter - patch (v47497)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,13 +90,11 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
-    interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -218,6 +216,9 @@
 
     currentTime = t;
     h           = currentTime - previousTime;
+	finalized = false;
+	finalized = false;
+	finalized = false;
     setInterpolatedTime(t);
 
     // the step is not finalized anymore
2023-06-25 19:50:15 [main] [INFO]  PatchLogExporter - patch (v47497)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-25 19:50:15 [main] [INFO]  PatchLogExporter - patch (v47497)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -94,15 +94,22 @@
     public EventState(final EventHandler handler, final double maxCheckInterval,
                       final double convergence, final int maxIterationCount) {
         this.handler           = handler;
+		g0Positive = true;
+		g0Positive = true;
+		g0Positive = true;
+		g0Positive = true;
+		g0Positive = true;
+		g0Positive = true;
+		g0Positive = true;
         this.maxCheckInterval  = maxCheckInterval;
         this.convergence       = Math.abs(convergence);
         this.maxIterationCount = maxIterationCount;
+		pendingEventTime = Double.NaN;
 
         // some dummy values ...
         t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
@@ -213,7 +220,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
2023-06-25 19:50:15 [main] [INFO]  PatchLogExporter - patch (v47497)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-25 19:50:15 [main] [INFO]  PatchLogExporter - patch (v47497)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-25 19:50:15 [main] [INFO]  PatchLogExporter - patch (v47497)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -227,7 +227,8 @@
                 // use the bracket point if is better than last approximation
                 x0 = x1;
                 x1 = x2;
-                x2 = x0;
+                delta = 0.5 * oldDelta;
+				x2 = x0;
                 y0 = y1;
                 y1 = y2;
                 y2 = y0;
2023-06-25 19:50:15 [main] [INFO]  PatchLogExporter - patch (v47548)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,7 +94,6 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -218,6 +217,10 @@
 
     currentTime = t;
     h           = currentTime - previousTime;
+	finalized = false;
+	finalized = false;
+	finalized = false;
+	finalized = false;
     setInterpolatedTime(t);
 
     // the step is not finalized anymore
@@ -243,6 +246,7 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
+	previousTime = currentTime;
       dirtyState       = true;
   }
 
2023-06-25 19:50:15 [main] [INFO]  PatchLogExporter - patch (v47548)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-25 19:50:15 [main] [INFO]  PatchLogExporter - patch (v47548)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -94,9 +94,16 @@
     public EventState(final EventHandler handler, final double maxCheckInterval,
                       final double convergence, final int maxIterationCount) {
         this.handler           = handler;
+		g0Positive = true;
+		g0Positive = true;
+		g0Positive = true;
+		g0Positive = true;
         this.maxCheckInterval  = maxCheckInterval;
         this.convergence       = Math.abs(convergence);
         this.maxIterationCount = maxIterationCount;
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
 
         // some dummy values ...
         t0                = Double.NaN;
@@ -213,7 +220,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
2023-06-25 19:50:15 [main] [INFO]  PatchLogExporter - patch (v47548)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-25 19:50:15 [main] [INFO]  PatchLogExporter - patch (v47548)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-25 19:50:15 [main] [INFO]  PatchLogExporter - patch (v47849)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -218,6 +218,7 @@
 
     currentTime = t;
     h           = currentTime - previousTime;
+	finalized = false;
     setInterpolatedTime(t);
 
     // the step is not finalized anymore
@@ -243,6 +244,8 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
+	previousTime = currentTime;
+	previousTime = currentTime;
       dirtyState       = true;
   }
 
@@ -272,7 +275,6 @@
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
-          computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
       }
 
@@ -287,7 +289,6 @@
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
-          computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
       }
 
2023-06-25 19:50:15 [main] [INFO]  PatchLogExporter - patch (v47849)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-25 19:50:15 [main] [INFO]  PatchLogExporter - patch (v47849)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -94,9 +94,17 @@
     public EventState(final EventHandler handler, final double maxCheckInterval,
                       final double convergence, final int maxIterationCount) {
         this.handler           = handler;
+		pendingEvent = false;
+		g0Positive = true;
+		g0Positive = true;
+		g0Positive = true;
+		g0Positive = true;
+		g0Positive = true;
         this.maxCheckInterval  = maxCheckInterval;
         this.convergence       = Math.abs(convergence);
         this.maxIterationCount = maxIterationCount;
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
 
         // some dummy values ...
         t0                = Double.NaN;
@@ -213,7 +221,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
2023-06-25 19:50:15 [main] [INFO]  PatchLogExporter - patch (v47849)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-25 19:50:15 [main] [INFO]  PatchLogExporter - patch (v47849)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-25 19:50:15 [main] [INFO]  PatchLogExporter - patch (v47849)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -226,7 +226,8 @@
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
                 x0 = x1;
-                x1 = x2;
+                x1 = x1 + delta;
+				x1 = x2;
                 x2 = x0;
                 y0 = y1;
                 y1 = y2;
2023-06-25 19:50:15 [main] [INFO]  PatchLogExporter - patch (v48246)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,13 +90,10 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
-    interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -115,9 +112,9 @@
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
-    finalized         = false;
+    this.h = Math.abs(h);
+	finalized         = false;
     this.forward      = forward;
-    this.dirtyState   = true;
 
   }
 
@@ -218,6 +215,9 @@
 
     currentTime = t;
     h           = currentTime - previousTime;
+	finalized = false;
+	finalized = false;
+	finalized = false;
     setInterpolatedTime(t);
 
     // the step is not finalized anymore
@@ -243,6 +243,8 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
+	previousTime = currentTime;
+	previousTime = currentTime;
       dirtyState       = true;
   }
 
@@ -272,7 +274,6 @@
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
-          computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
       }
 
2023-06-25 19:50:15 [main] [INFO]  PatchLogExporter - patch (v48246)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-25 19:50:15 [main] [INFO]  PatchLogExporter - patch (v48246)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -94,9 +94,13 @@
     public EventState(final EventHandler handler, final double maxCheckInterval,
                       final double convergence, final int maxIterationCount) {
         this.handler           = handler;
+		g0Positive = true;
+		g0Positive = true;
         this.maxCheckInterval  = maxCheckInterval;
         this.convergence       = Math.abs(convergence);
         this.maxIterationCount = maxIterationCount;
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
 
         // some dummy values ...
         t0                = Double.NaN;
@@ -213,7 +217,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
2023-06-25 19:50:15 [main] [INFO]  PatchLogExporter - patch (v48246)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-25 19:50:15 [main] [INFO]  PatchLogExporter - patch (v48246)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-25 19:50:15 [main] [INFO]  PatchLogExporter - patch (v48291)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,9 +94,7 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -115,7 +113,7 @@
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
-    finalized         = false;
+    h = Double.NaN;
     this.forward      = forward;
     this.dirtyState   = true;
 
@@ -218,6 +216,8 @@
 
     currentTime = t;
     h           = currentTime - previousTime;
+	finalized = false;
+	finalized = false;
     setInterpolatedTime(t);
 
     // the step is not finalized anymore
@@ -243,6 +243,8 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
+	previousTime = currentTime;
+	previousTime = currentTime;
       dirtyState       = true;
   }
 
2023-06-25 19:50:15 [main] [INFO]  PatchLogExporter - patch (v48291)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-25 19:50:15 [main] [INFO]  PatchLogExporter - patch (v48291)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -94,18 +94,19 @@
     public EventState(final EventHandler handler, final double maxCheckInterval,
                       final double convergence, final int maxIterationCount) {
         this.handler           = handler;
+		g0Positive = true;
         this.maxCheckInterval  = maxCheckInterval;
         this.convergence       = Math.abs(convergence);
         this.maxIterationCount = maxIterationCount;
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
 
         // some dummy values ...
         t0                = Double.NaN;
         g0                = Double.NaN;
-        g0Positive        = true;
-        pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
-        increasing        = true;
+        g0Positive = g0 >= 0;
         nextAction        = EventHandler.CONTINUE;
 
     }
@@ -213,7 +214,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
2023-06-25 19:50:15 [main] [INFO]  PatchLogExporter - patch (v48291)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-25 19:50:15 [main] [INFO]  PatchLogExporter - patch (v48291)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-25 19:50:15 [main] [INFO]  PatchLogExporter - patch (v48291)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -226,7 +226,8 @@
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
                 x0 = x1;
-                x1 = x2;
+                x1 = x1 + delta;
+				x1 = x2;
                 x2 = x0;
                 y0 = y1;
                 y1 = y2;
2023-06-25 19:50:15 [main] [INFO]  PatchLogExporter - patch (v48339)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,11 +90,9 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
-    interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -109,8 +107,6 @@
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
     h                 = Double.NaN;
-    interpolatedTime  = Double.NaN;
-
     currentState            = y;
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
@@ -218,6 +214,7 @@
 
     currentTime = t;
     h           = currentTime - previousTime;
+	finalized = false;
     setInterpolatedTime(t);
 
     // the step is not finalized anymore
@@ -243,6 +240,7 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
+	previousTime = currentTime;
       dirtyState       = true;
   }
 
@@ -272,7 +270,6 @@
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
-          computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
       }
 
2023-06-25 19:50:15 [main] [INFO]  PatchLogExporter - patch (v48339)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-25 19:50:15 [main] [INFO]  PatchLogExporter - patch (v48339)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -94,9 +94,15 @@
     public EventState(final EventHandler handler, final double maxCheckInterval,
                       final double convergence, final int maxIterationCount) {
         this.handler           = handler;
+		g0Positive = true;
+		g0Positive = true;
+		g0Positive = true;
+		g0Positive = true;
         this.maxCheckInterval  = maxCheckInterval;
         this.convergence       = Math.abs(convergence);
         this.maxIterationCount = maxIterationCount;
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
 
         // some dummy values ...
         t0                = Double.NaN;
@@ -213,7 +219,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
2023-06-25 19:50:15 [main] [INFO]  PatchLogExporter - patch (v48339)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-25 19:50:15 [main] [INFO]  PatchLogExporter - patch (v48339)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-25 19:50:15 [main] [INFO]  PatchLogExporter - patch (v48356)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -89,7 +89,6 @@
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
@@ -113,8 +112,6 @@
 
     currentState            = y;
     interpolatedState       = new double[y.length];
-    interpolatedDerivatives = new double[y.length];
-
     finalized         = false;
     this.forward      = forward;
     this.dirtyState   = true;
@@ -218,6 +215,9 @@
 
     currentTime = t;
     h           = currentTime - previousTime;
+	finalized = false;
+	finalized = false;
+	finalized = false;
     setInterpolatedTime(t);
 
     // the step is not finalized anymore
@@ -272,7 +272,6 @@
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
-          computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
       }
 
2023-06-25 19:50:15 [main] [INFO]  PatchLogExporter - patch (v48356)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-25 19:50:15 [main] [INFO]  PatchLogExporter - patch (v48356)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -94,9 +94,18 @@
     public EventState(final EventHandler handler, final double maxCheckInterval,
                       final double convergence, final int maxIterationCount) {
         this.handler           = handler;
+		g0Positive = true;
+		g0Positive = true;
+		g0Positive = true;
+		g0Positive = true;
+		g0Positive = true;
         this.maxCheckInterval  = maxCheckInterval;
         this.convergence       = Math.abs(convergence);
         this.maxIterationCount = maxIterationCount;
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
 
         // some dummy values ...
         t0                = Double.NaN;
@@ -213,7 +222,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
2023-06-25 19:50:15 [main] [INFO]  PatchLogExporter - patch (v48356)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-25 19:50:15 [main] [INFO]  PatchLogExporter - patch (v48356)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-25 19:50:15 [main] [INFO]  PatchLogExporter - patch (v48702)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,13 +90,10 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
-    interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -117,7 +114,6 @@
 
     finalized         = false;
     this.forward      = forward;
-    this.dirtyState   = true;
 
   }
 
@@ -218,6 +214,8 @@
 
     currentTime = t;
     h           = currentTime - previousTime;
+	finalized = false;
+	finalized = false;
     setInterpolatedTime(t);
 
     // the step is not finalized anymore
@@ -243,6 +241,7 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
+	previousTime = currentTime;
       dirtyState       = true;
   }
 
2023-06-25 19:50:15 [main] [INFO]  PatchLogExporter - patch (v48702)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-25 19:50:15 [main] [INFO]  PatchLogExporter - patch (v48702)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -60,6 +60,7 @@
     protected ConvergingAlgorithmImpl(final int defaultMaximalIterationCount,
                                       final double defaultAbsoluteAccuracy) {
         this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
+		this.defaultRelativeAccuracy = 1.0e-14;
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
2023-06-25 19:50:15 [main] [INFO]  PatchLogExporter - patch (v48702)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -94,6 +94,12 @@
     public EventState(final EventHandler handler, final double maxCheckInterval,
                       final double convergence, final int maxIterationCount) {
         this.handler           = handler;
+		g0Positive = true;
+		g0Positive = true;
+		g0Positive = true;
+		g0Positive = true;
+		pendingEvent = false;
+		g0Positive = true;
         this.maxCheckInterval  = maxCheckInterval;
         this.convergence       = Math.abs(convergence);
         this.maxIterationCount = maxIterationCount;
@@ -102,7 +108,6 @@
         t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
@@ -213,7 +218,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
2023-06-25 19:50:15 [main] [INFO]  PatchLogExporter - patch (v48702)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-25 19:50:15 [main] [INFO]  PatchLogExporter - patch (v48702)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-25 19:50:15 [main] [INFO]  PatchLogExporter - patch (v50078)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,7 +94,6 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -218,6 +217,11 @@
 
     currentTime = t;
     h           = currentTime - previousTime;
+	finalized = false;
+	finalized = false;
+	finalized = false;
+	finalized = false;
+	finalized = false;
     setInterpolatedTime(t);
 
     // the step is not finalized anymore
@@ -243,6 +247,7 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
+	this.forward = true;
       dirtyState       = true;
   }
 
2023-06-25 19:50:15 [main] [INFO]  PatchLogExporter - patch (v50078)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-25 19:50:15 [main] [INFO]  PatchLogExporter - patch (v50078)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -94,9 +94,18 @@
     public EventState(final EventHandler handler, final double maxCheckInterval,
                       final double convergence, final int maxIterationCount) {
         this.handler           = handler;
+		g0Positive = true;
+		g0Positive = true;
+		g0Positive = true;
+		g0Positive = true;
+		g0Positive = true;
+		g0Positive = true;
+		g0Positive = true;
+		g0Positive = true;
         this.maxCheckInterval  = maxCheckInterval;
         this.convergence       = Math.abs(convergence);
         this.maxIterationCount = maxIterationCount;
+		pendingEventTime = Double.NaN;
 
         // some dummy values ...
         t0                = Double.NaN;
2023-06-25 19:50:15 [main] [INFO]  PatchLogExporter - patch (v50078)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-25 19:50:15 [main] [INFO]  PatchLogExporter - patch (v50078)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-25 19:50:15 [main] [INFO]  PatchLogExporter - patch (v50078)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -274,8 +274,7 @@
                 } else {
                     p = -p;
                 }
-                if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
-                        p >= Math.abs(0.5 * oldDelta * p1)) {
+                if (y1 == 0.0) {
                     // Inverse quadratic interpolation gives a value
                     // in the wrong direction, or progress is slow.
                     // Fall back to bisection.
2023-06-25 19:50:16 [main] [INFO]  PatchLogExporter - patch (v52319)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,7 +94,6 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -218,6 +217,9 @@
 
     currentTime = t;
     h           = currentTime - previousTime;
+	finalized = false;
+	finalized = false;
+	finalized = false;
     setInterpolatedTime(t);
 
     // the step is not finalized anymore
@@ -243,6 +245,7 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
+	previousTime = currentTime;
       dirtyState       = true;
   }
 
2023-06-25 19:50:16 [main] [INFO]  PatchLogExporter - patch (v52319)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-25 19:50:16 [main] [INFO]  PatchLogExporter - patch (v52319)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -94,15 +94,18 @@
     public EventState(final EventHandler handler, final double maxCheckInterval,
                       final double convergence, final int maxIterationCount) {
         this.handler           = handler;
-        this.maxCheckInterval  = maxCheckInterval;
+		g0Positive = true;
+		this.maxCheckInterval  = maxCheckInterval;
         this.convergence       = Math.abs(convergence);
         this.maxIterationCount = maxIterationCount;
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
 
         // some dummy values ...
         t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
2023-06-25 19:50:16 [main] [INFO]  PatchLogExporter - patch (v52319)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-25 19:50:16 [main] [INFO]  PatchLogExporter - patch (v52319)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-25 19:50:16 [main] [INFO]  PatchLogExporter - patch (v52319)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -94,7 +94,6 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
@@ -226,7 +225,10 @@
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
                 x0 = x1;
-                x1 = x2;
+                x1 = x1 + delta;
+				x1 = x1 + delta;
+				x1 = x1 + delta;
+				x1 = x2;
                 x2 = x0;
                 y0 = y1;
                 y1 = y2;
@@ -290,7 +292,7 @@
             x0 = x1;
             y0 = y1;
             // Compute new X1, Y1
-            if (Math.abs(delta) > tolerance) {
+            if (y0 * y1 >= 0) {
                 x1 = x1 + delta;
             } else if (dx > 0.0) {
                 x1 = x1 + 0.5 * tolerance;
2023-06-25 19:50:16 [main] [INFO]  PatchLogExporter - patch (v53455)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -96,7 +96,6 @@
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -218,6 +217,8 @@
 
     currentTime = t;
     h           = currentTime - previousTime;
+	finalized = false;
+	finalized = false;
     setInterpolatedTime(t);
 
     // the step is not finalized anymore
@@ -243,6 +244,9 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
+	previousTime = currentTime;
+	previousTime = currentTime;
+	previousTime = currentTime;
       dirtyState       = true;
   }
 
2023-06-25 19:50:16 [main] [INFO]  PatchLogExporter - patch (v53455)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-25 19:50:16 [main] [INFO]  PatchLogExporter - patch (v53455)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -94,9 +94,16 @@
     public EventState(final EventHandler handler, final double maxCheckInterval,
                       final double convergence, final int maxIterationCount) {
         this.handler           = handler;
+		g0Positive = true;
+		g0Positive = true;
+		g0Positive = true;
+		g0Positive = true;
         this.maxCheckInterval  = maxCheckInterval;
         this.convergence       = Math.abs(convergence);
         this.maxIterationCount = maxIterationCount;
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
 
         // some dummy values ...
         t0                = Double.NaN;
@@ -175,7 +182,8 @@
             final double h  = (t1 - t0) / n;
 
             double ta = t0;
-            double ga = g0;
+            pendingEventTime = Double.NaN;
+			double ga = g0;
             double tb = t0 + (interpolator.isForward() ? convergence : -convergence);
             for (int i = 0; i < n; ++i) {
 
2023-06-25 19:50:16 [main] [INFO]  PatchLogExporter - patch (v53455)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-25 19:50:16 [main] [INFO]  PatchLogExporter - patch (v53455)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-25 19:50:16 [main] [INFO]  PatchLogExporter - patch (v53455)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -94,7 +94,6 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
@@ -290,7 +289,7 @@
             x0 = x1;
             y0 = y1;
             // Compute new X1, Y1
-            if (Math.abs(delta) > tolerance) {
+            if (y0 * y1 >= 0) {
                 x1 = x1 + delta;
             } else if (dx > 0.0) {
                 x1 = x1 + 0.5 * tolerance;
2023-06-25 19:50:16 [main] [INFO]  PatchLogExporter - patch (v53494)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -96,7 +96,6 @@
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -218,6 +217,7 @@
 
     currentTime = t;
     h           = currentTime - previousTime;
+	finalized = false;
     setInterpolatedTime(t);
 
     // the step is not finalized anymore
@@ -243,6 +243,8 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
+	previousTime = currentTime;
+	previousTime = currentTime;
       dirtyState       = true;
   }
 
@@ -269,12 +271,8 @@
   public double[] getInterpolatedState() throws DerivativeException {
 
       // lazy evaluation of the state
-      if (dirtyState) {
-          final double oneMinusThetaH = currentTime - interpolatedTime;
-          final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
-          computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
-          dirtyState = false;
-      }
+      if (dirtyState)
+		return interpolatedState;
 
       return interpolatedState;
 
2023-06-25 19:50:16 [main] [INFO]  PatchLogExporter - patch (v53494)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-25 19:50:16 [main] [INFO]  PatchLogExporter - patch (v53494)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -94,14 +94,22 @@
     public EventState(final EventHandler handler, final double maxCheckInterval,
                       final double convergence, final int maxIterationCount) {
         this.handler           = handler;
+		g0Positive = true;
+		g0Positive = true;
+		g0Positive = true;
+		g0Positive = true;
+		g0Positive = true;
         this.maxCheckInterval  = maxCheckInterval;
         this.convergence       = Math.abs(convergence);
         this.maxIterationCount = maxIterationCount;
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
+		g0Positive = g0 >= 0;
 
         // some dummy values ...
         t0                = Double.NaN;
         g0                = Double.NaN;
-        g0Positive        = true;
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
2023-06-25 19:50:16 [main] [INFO]  PatchLogExporter - patch (v53494)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-25 19:50:16 [main] [INFO]  PatchLogExporter - patch (v53494)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-25 19:50:16 [main] [INFO]  PatchLogExporter - patch (v53494)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -94,7 +94,6 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
@@ -290,7 +289,7 @@
             x0 = x1;
             y0 = y1;
             // Compute new X1, Y1
-            if (Math.abs(delta) > tolerance) {
+            if (y0 * y1 >= 0) {
                 x1 = x1 + delta;
             } else if (dx > 0.0) {
                 x1 = x1 + 0.5 * tolerance;
2023-06-25 19:50:16 [main] [INFO]  PatchLogExporter - patch (v54018)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -96,7 +96,6 @@
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -218,6 +217,8 @@
 
     currentTime = t;
     h           = currentTime - previousTime;
+	finalized = false;
+	finalized = false;
     setInterpolatedTime(t);
 
     // the step is not finalized anymore
@@ -243,6 +244,8 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
+	previousTime = currentTime;
+	previousTime = currentTime;
       dirtyState       = true;
   }
 
2023-06-25 19:50:16 [main] [INFO]  PatchLogExporter - patch (v54018)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-25 19:50:16 [main] [INFO]  PatchLogExporter - patch (v54018)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -94,15 +94,22 @@
     public EventState(final EventHandler handler, final double maxCheckInterval,
                       final double convergence, final int maxIterationCount) {
         this.handler           = handler;
+		g0Positive = true;
+		g0Positive = true;
+		g0Positive = true;
+		g0Positive = true;
+		g0Positive = true;
         this.maxCheckInterval  = maxCheckInterval;
         this.convergence       = Math.abs(convergence);
         this.maxIterationCount = maxIterationCount;
+		g0Positive = g0 >= 0;
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
 
         // some dummy values ...
         t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
@@ -169,7 +176,6 @@
 
         try {
 
-            forward = interpolator.isForward();
             final double t1 = interpolator.getCurrentTime();
             final int    n  = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));
             final double h  = (t1 - t0) / n;
@@ -245,7 +251,83 @@
 
             }
 
-            // no event during the whole step
+            {
+				tb += h;
+				interpolator.setInterpolatedTime(tb);
+				final double gb = handler.g(tb, interpolator.getInterpolatedState());
+				if (g0Positive ^ (gb >= 0)) {
+					increasing = gb >= ga;
+					final UnivariateRealFunction f = new UnivariateRealFunction() {
+						public double value(final double t) throws FunctionEvaluationException {
+							try {
+								interpolator.setInterpolatedTime(t);
+								return handler.g(t, interpolator.getInterpolatedState());
+							} catch (DerivativeException e) {
+								throw new FunctionEvaluationException(e, t);
+							} catch (EventException e) {
+								throw new FunctionEvaluationException(e, t);
+							}
+						}
+					};
+					final BrentSolver solver = new BrentSolver();
+					solver.setAbsoluteAccuracy(convergence);
+					solver.setMaximalIterationCount(maxIterationCount);
+					final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
+					if ((Math.abs(root - ta) <= convergence) && (Math.abs(root - previousEventTime) <= convergence)) {
+						ta = tb;
+						ga = gb;
+					} else if (Double.isNaN(previousEventTime) || (Math.abs(previousEventTime - root) > convergence)) {
+						pendingEventTime = root;
+						if (pendingEvent && (Math.abs(t1 - pendingEventTime) <= convergence)) {
+							return false;
+						}
+						pendingEvent = true;
+						return true;
+					}
+				} else {
+					ta = tb;
+					ga = gb;
+				}
+			}
+			{
+				tb += h;
+				interpolator.setInterpolatedTime(tb);
+				final double gb = handler.g(tb, interpolator.getInterpolatedState());
+				if (g0Positive ^ (gb >= 0)) {
+					increasing = gb >= ga;
+					final UnivariateRealFunction f = new UnivariateRealFunction() {
+						public double value(final double t) throws FunctionEvaluationException {
+							try {
+								interpolator.setInterpolatedTime(t);
+								return handler.g(t, interpolator.getInterpolatedState());
+							} catch (DerivativeException e) {
+								throw new FunctionEvaluationException(e, t);
+							} catch (EventException e) {
+								throw new FunctionEvaluationException(e, t);
+							}
+						}
+					};
+					final BrentSolver solver = new BrentSolver();
+					solver.setAbsoluteAccuracy(convergence);
+					solver.setMaximalIterationCount(maxIterationCount);
+					final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
+					if ((Math.abs(root - ta) <= convergence) && (Math.abs(root - previousEventTime) <= convergence)) {
+						ta = tb;
+						ga = gb;
+					} else if (Double.isNaN(previousEventTime) || (Math.abs(previousEventTime - root) > convergence)) {
+						pendingEventTime = root;
+						if (pendingEvent && (Math.abs(t1 - pendingEventTime) <= convergence)) {
+							return false;
+						}
+						pendingEvent = true;
+						return true;
+					}
+				} else {
+					ta = tb;
+					ga = gb;
+				}
+			}
+			// no event during the whole step
             pendingEvent     = false;
             pendingEventTime = Double.NaN;
             return false;
2023-06-25 19:50:16 [main] [INFO]  PatchLogExporter - patch (v54018)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-25 19:50:16 [main] [INFO]  PatchLogExporter - patch (v54018)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-25 19:50:16 [main] [INFO]  PatchLogExporter - patch (v54018)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -226,7 +226,8 @@
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
                 x0 = x1;
-                x1 = x2;
+                x1 = x1 + delta;
+				x1 = x2;
                 x2 = x0;
                 y0 = y1;
                 y1 = y2;
@@ -274,8 +275,7 @@
                 } else {
                     p = -p;
                 }
-                if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
-                        p >= Math.abs(0.5 * oldDelta * p1)) {
+                if (Math.abs(oldDelta) < Math.max(relativeAccuracy * Math.abs(x1), absoluteAccuracy)) {
                     // Inverse quadratic interpolation gives a value
                     // in the wrong direction, or progress is slow.
                     // Fall back to bisection.
2023-06-25 19:50:16 [main] [INFO]  PatchLogExporter - patch (v54108)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -96,7 +96,6 @@
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -218,6 +217,8 @@
 
     currentTime = t;
     h           = currentTime - previousTime;
+	finalized = false;
+	finalized = false;
     setInterpolatedTime(t);
 
     // the step is not finalized anymore
@@ -243,6 +244,8 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
+	previousTime = currentTime;
+	previousTime = currentTime;
       dirtyState       = true;
   }
 
2023-06-25 19:50:16 [main] [INFO]  PatchLogExporter - patch (v54108)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-25 19:50:16 [main] [INFO]  PatchLogExporter - patch (v54108)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -94,15 +94,22 @@
     public EventState(final EventHandler handler, final double maxCheckInterval,
                       final double convergence, final int maxIterationCount) {
         this.handler           = handler;
+		g0Positive = true;
+		g0Positive = true;
+		g0Positive = true;
+		g0Positive = true;
+		g0Positive = true;
         this.maxCheckInterval  = maxCheckInterval;
         this.convergence       = Math.abs(convergence);
         this.maxIterationCount = maxIterationCount;
+		g0Positive = g0 >= 0;
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
 
         // some dummy values ...
         t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
@@ -169,7 +176,6 @@
 
         try {
 
-            forward = interpolator.isForward();
             final double t1 = interpolator.getCurrentTime();
             final int    n  = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));
             final double h  = (t1 - t0) / n;
@@ -245,7 +251,83 @@
 
             }
 
-            // no event during the whole step
+            {
+				tb += h;
+				interpolator.setInterpolatedTime(tb);
+				final double gb = handler.g(tb, interpolator.getInterpolatedState());
+				if (g0Positive ^ (gb >= 0)) {
+					increasing = gb >= ga;
+					final UnivariateRealFunction f = new UnivariateRealFunction() {
+						public double value(final double t) throws FunctionEvaluationException {
+							try {
+								interpolator.setInterpolatedTime(t);
+								return handler.g(t, interpolator.getInterpolatedState());
+							} catch (DerivativeException e) {
+								throw new FunctionEvaluationException(e, t);
+							} catch (EventException e) {
+								throw new FunctionEvaluationException(e, t);
+							}
+						}
+					};
+					final BrentSolver solver = new BrentSolver();
+					solver.setAbsoluteAccuracy(convergence);
+					solver.setMaximalIterationCount(maxIterationCount);
+					final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
+					if ((Math.abs(root - ta) <= convergence) && (Math.abs(root - previousEventTime) <= convergence)) {
+						ta = tb;
+						ga = gb;
+					} else if (Double.isNaN(previousEventTime) || (Math.abs(previousEventTime - root) > convergence)) {
+						pendingEventTime = root;
+						if (pendingEvent && (Math.abs(t1 - pendingEventTime) <= convergence)) {
+							return false;
+						}
+						pendingEvent = true;
+						return true;
+					}
+				} else {
+					ta = tb;
+					ga = gb;
+				}
+			}
+			{
+				tb += h;
+				interpolator.setInterpolatedTime(tb);
+				final double gb = handler.g(tb, interpolator.getInterpolatedState());
+				if (g0Positive ^ (gb >= 0)) {
+					increasing = gb >= ga;
+					final UnivariateRealFunction f = new UnivariateRealFunction() {
+						public double value(final double t) throws FunctionEvaluationException {
+							try {
+								interpolator.setInterpolatedTime(t);
+								return handler.g(t, interpolator.getInterpolatedState());
+							} catch (DerivativeException e) {
+								throw new FunctionEvaluationException(e, t);
+							} catch (EventException e) {
+								throw new FunctionEvaluationException(e, t);
+							}
+						}
+					};
+					final BrentSolver solver = new BrentSolver();
+					solver.setAbsoluteAccuracy(convergence);
+					solver.setMaximalIterationCount(maxIterationCount);
+					final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
+					if ((Math.abs(root - ta) <= convergence) && (Math.abs(root - previousEventTime) <= convergence)) {
+						ta = tb;
+						ga = gb;
+					} else if (Double.isNaN(previousEventTime) || (Math.abs(previousEventTime - root) > convergence)) {
+						pendingEventTime = root;
+						if (pendingEvent && (Math.abs(t1 - pendingEventTime) <= convergence)) {
+							return false;
+						}
+						pendingEvent = true;
+						return true;
+					}
+				} else {
+					ta = tb;
+					ga = gb;
+				}
+			}
+			// no event during the whole step
             pendingEvent     = false;
             pendingEventTime = Double.NaN;
             return false;
2023-06-25 19:50:16 [main] [INFO]  PatchLogExporter - patch (v54108)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-25 19:50:16 [main] [INFO]  PatchLogExporter - patch (v54108)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-25 19:50:16 [main] [INFO]  PatchLogExporter - patch (v54108)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,15 +223,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
2023-06-25 19:50:16 [main] [INFO]  PatchLogExporter - patch (v54136)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -96,7 +96,6 @@
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -218,6 +217,8 @@
 
     currentTime = t;
     h           = currentTime - previousTime;
+	finalized = false;
+	finalized = false;
     setInterpolatedTime(t);
 
     // the step is not finalized anymore
@@ -243,6 +244,8 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
+	previousTime = currentTime;
+	previousTime = currentTime;
       dirtyState       = true;
   }
 
2023-06-25 19:50:16 [main] [INFO]  PatchLogExporter - patch (v54136)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-25 19:50:16 [main] [INFO]  PatchLogExporter - patch (v54136)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -94,15 +94,22 @@
     public EventState(final EventHandler handler, final double maxCheckInterval,
                       final double convergence, final int maxIterationCount) {
         this.handler           = handler;
+		g0Positive = true;
+		g0Positive = true;
+		g0Positive = true;
+		g0Positive = true;
+		g0Positive = true;
         this.maxCheckInterval  = maxCheckInterval;
         this.convergence       = Math.abs(convergence);
         this.maxIterationCount = maxIterationCount;
+		g0Positive = g0 >= 0;
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
 
         // some dummy values ...
         t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
@@ -169,7 +176,6 @@
 
         try {
 
-            forward = interpolator.isForward();
             final double t1 = interpolator.getCurrentTime();
             final int    n  = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));
             final double h  = (t1 - t0) / n;
@@ -245,7 +251,83 @@
 
             }
 
-            // no event during the whole step
+            {
+				tb += h;
+				interpolator.setInterpolatedTime(tb);
+				final double gb = handler.g(tb, interpolator.getInterpolatedState());
+				if (g0Positive ^ (gb >= 0)) {
+					increasing = gb >= ga;
+					final UnivariateRealFunction f = new UnivariateRealFunction() {
+						public double value(final double t) throws FunctionEvaluationException {
+							try {
+								interpolator.setInterpolatedTime(t);
+								return handler.g(t, interpolator.getInterpolatedState());
+							} catch (DerivativeException e) {
+								throw new FunctionEvaluationException(e, t);
+							} catch (EventException e) {
+								throw new FunctionEvaluationException(e, t);
+							}
+						}
+					};
+					final BrentSolver solver = new BrentSolver();
+					solver.setAbsoluteAccuracy(convergence);
+					solver.setMaximalIterationCount(maxIterationCount);
+					final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
+					if ((Math.abs(root - ta) <= convergence) && (Math.abs(root - previousEventTime) <= convergence)) {
+						ta = tb;
+						ga = gb;
+					} else if (Double.isNaN(previousEventTime) || (Math.abs(previousEventTime - root) > convergence)) {
+						pendingEventTime = root;
+						if (pendingEvent && (Math.abs(t1 - pendingEventTime) <= convergence)) {
+							return false;
+						}
+						pendingEvent = true;
+						return true;
+					}
+				} else {
+					ta = tb;
+					ga = gb;
+				}
+			}
+			{
+				tb += h;
+				interpolator.setInterpolatedTime(tb);
+				final double gb = handler.g(tb, interpolator.getInterpolatedState());
+				if (g0Positive ^ (gb >= 0)) {
+					increasing = gb >= ga;
+					final UnivariateRealFunction f = new UnivariateRealFunction() {
+						public double value(final double t) throws FunctionEvaluationException {
+							try {
+								interpolator.setInterpolatedTime(t);
+								return handler.g(t, interpolator.getInterpolatedState());
+							} catch (DerivativeException e) {
+								throw new FunctionEvaluationException(e, t);
+							} catch (EventException e) {
+								throw new FunctionEvaluationException(e, t);
+							}
+						}
+					};
+					final BrentSolver solver = new BrentSolver();
+					solver.setAbsoluteAccuracy(convergence);
+					solver.setMaximalIterationCount(maxIterationCount);
+					final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
+					if ((Math.abs(root - ta) <= convergence) && (Math.abs(root - previousEventTime) <= convergence)) {
+						ta = tb;
+						ga = gb;
+					} else if (Double.isNaN(previousEventTime) || (Math.abs(previousEventTime - root) > convergence)) {
+						pendingEventTime = root;
+						if (pendingEvent && (Math.abs(t1 - pendingEventTime) <= convergence)) {
+							return false;
+						}
+						pendingEvent = true;
+						return true;
+					}
+				} else {
+					ta = tb;
+					ga = gb;
+				}
+			}
+			// no event during the whole step
             pendingEvent     = false;
             pendingEventTime = Double.NaN;
             return false;
2023-06-25 19:50:16 [main] [INFO]  PatchLogExporter - patch (v54136)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-25 19:50:16 [main] [INFO]  PatchLogExporter - patch (v54136)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-25 19:50:16 [main] [INFO]  PatchLogExporter - patch (v54136)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -226,7 +226,8 @@
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
                 x0 = x1;
-                x1 = x2;
+                x1 = x1 + delta;
+				x1 = x2;
                 x2 = x0;
                 y0 = y1;
                 y1 = y2;
@@ -276,11 +277,8 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
                     oldDelta = delta;
+                    oldDelta = delta;
                 } else {
                     oldDelta = delta;
                     delta = p / p1;
2023-06-25 19:50:16 [main] [INFO]  PatchLogExporter - patch (v54268)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -218,6 +218,7 @@
 
     currentTime = t;
     h           = currentTime - previousTime;
+	finalized = false;
     setInterpolatedTime(t);
 
     // the step is not finalized anymore
2023-06-25 19:50:16 [main] [INFO]  PatchLogExporter - patch (v54268)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-25 19:50:16 [main] [INFO]  PatchLogExporter - patch (v54268)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -94,15 +94,24 @@
     public EventState(final EventHandler handler, final double maxCheckInterval,
                       final double convergence, final int maxIterationCount) {
         this.handler           = handler;
+		g0Positive = true;
+		g0Positive = true;
+		g0Positive = true;
+		g0Positive = true;
+		g0Positive = true;
+		g0Positive = true;
+		g0Positive = true;
+		g0Positive = true;
+		g0Positive = true;
         this.maxCheckInterval  = maxCheckInterval;
         this.convergence       = Math.abs(convergence);
         this.maxIterationCount = maxIterationCount;
+		pendingEventTime = Double.NaN;
 
         // some dummy values ...
         t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
@@ -148,7 +157,7 @@
      */
     public void reinitializeBegin(final double tStart, final double[] yStart)
         throws EventException {
-        t0 = tStart;
+        nextAction = EventHandler.CONTINUE;
         g0 = handler.g(tStart, yStart);
         g0Positive = g0 >= 0;
     }
@@ -171,11 +180,13 @@
 
             forward = interpolator.isForward();
             final double t1 = interpolator.getCurrentTime();
-            final int    n  = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));
+            final double t0 = interpolator.getPreviousTime();
+			final int    n  = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));
             final double h  = (t1 - t0) / n;
 
             double ta = t0;
-            double ga = g0;
+            pendingEventTime = Double.NaN;
+			double ga = g0;
             double tb = t0 + (interpolator.isForward() ? convergence : -convergence);
             for (int i = 0; i < n; ++i) {
 
2023-06-25 19:50:16 [main] [INFO]  PatchLogExporter - patch (v54268)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-25 19:50:16 [main] [INFO]  PatchLogExporter - patch (v54268)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-25 19:50:16 [main] [INFO]  PatchLogExporter - patch (v54268)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -94,7 +94,6 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
@@ -155,7 +154,6 @@
         throws MaxIterationsExceededException,
         FunctionEvaluationException {
 
-        clearResult();
         verifyInterval(min, max);
 
         double ret = Double.NaN;
@@ -226,7 +224,8 @@
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
                 x0 = x1;
-                x1 = x2;
+                x1 = x1 + delta;
+				x1 = x2;
                 x2 = x0;
                 y0 = y1;
                 y1 = y2;
@@ -270,7 +269,6 @@
                     p1 = (r1 - 1.0) * (r2 - 1.0) * (r3 - 1.0);
                 }
                 if (p > 0.0) {
-                    p1 = -p1;
                 } else {
                     p = -p;
                 }
2023-06-25 19:50:16 [main] [INFO]  PatchLogExporter - patch (v54427)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -218,6 +218,10 @@
 
     currentTime = t;
     h           = currentTime - previousTime;
+	finalized = false;
+	finalized = false;
+	finalized = false;
+	finalized = false;
     setInterpolatedTime(t);
 
     // the step is not finalized anymore
@@ -242,7 +246,6 @@
 
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
-      interpolatedTime = time;
       dirtyState       = true;
   }
 
@@ -269,12 +272,8 @@
   public double[] getInterpolatedState() throws DerivativeException {
 
       // lazy evaluation of the state
-      if (dirtyState) {
-          final double oneMinusThetaH = currentTime - interpolatedTime;
-          final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
-          computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
-          dirtyState = false;
-      }
+      if (dirtyState)
+		return interpolatedState;
 
       return interpolatedState;
 
2023-06-25 19:50:16 [main] [INFO]  PatchLogExporter - patch (v54427)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-25 19:50:16 [main] [INFO]  PatchLogExporter - patch (v54427)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -60,6 +60,7 @@
     protected ConvergingAlgorithmImpl(final int defaultMaximalIterationCount,
                                       final double defaultAbsoluteAccuracy) {
         this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
+		this.defaultRelativeAccuracy = 1.0e-14;
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
2023-06-25 19:50:16 [main] [INFO]  PatchLogExporter - patch (v54427)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -94,15 +94,20 @@
     public EventState(final EventHandler handler, final double maxCheckInterval,
                       final double convergence, final int maxIterationCount) {
         this.handler           = handler;
+		g0Positive = true;
+		g0Positive = true;
+		g0Positive = true;
+		g0Positive = true;
+		g0Positive = true;
         this.maxCheckInterval  = maxCheckInterval;
         this.convergence       = Math.abs(convergence);
         this.maxIterationCount = maxIterationCount;
+		pendingEventTime = Double.NaN;
 
         // some dummy values ...
         t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
@@ -175,7 +180,8 @@
             final double h  = (t1 - t0) / n;
 
             double ta = t0;
-            double ga = g0;
+            pendingEventTime = Double.NaN;
+			double ga = g0;
             double tb = t0 + (interpolator.isForward() ? convergence : -convergence);
             for (int i = 0; i < n; ++i) {
 
@@ -282,7 +288,7 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
+        pendingEventTime = Double.NaN;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-06-25 19:50:16 [main] [INFO]  PatchLogExporter - patch (v54427)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-25 19:50:16 [main] [INFO]  PatchLogExporter - patch (v54427)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-25 19:50:16 [main] [INFO]  PatchLogExporter - patch (v54427)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -226,7 +226,8 @@
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
                 x0 = x1;
-                x1 = x2;
+                x1 = x1 + delta;
+				x1 = x2;
                 x2 = x0;
                 y0 = y1;
                 y1 = y2;
2023-06-25 19:50:16 [main] [INFO]  KGenProgMain - Summary
Reached generation = 138
Generated variants = 54427
Syntax valid variants = 51606
Build succeeded variants = 29862
Time elapsed = 2 hours 7 minutes 11 seconds
Exit status = SUCCESS
