2023-06-25 21:24:56 [main] [WARN]  Configuration$Builder - The directory where kGenProg is running is different from the root directory of the given target project.
2023-06-25 21:24:56 [main] [WARN]  Configuration$Builder - If the target project includes test cases with file I/O, such test cases won't run correctly.
2023-06-25 21:24:56 [main] [WARN]  Configuration$Builder - We recommend you running kGenProg with the root directory of the target project as the current directory.
2023-06-25 21:24:56 [main] [INFO]  KGenProgMain - 
==================== kGenProg Configuration ====================
configPath = /Users/haradakanon/Downloads/kGenProg-1.8.2/example/math78/kgenprog-78.toml (set by command line)
rootDir = /Users/haradakanon/Downloads/kGenProg-1.8.2/example/math78 (set in config file)
productPaths = [/Users/haradakanon/Downloads/kGenProg-1.8.2/example/math78/src/main] (set in config file)
testPaths = [/Users/haradakanon/Downloads/kGenProg-1.8.2/example/math78/src/test] (set in config file)
classPaths = []
executionTests = [org.apache.commons.math.ode.events.EventStateTest] (set in config file)
outDir = kgenprog-out
logLevel = INFO (set in config file)
mutationGeneratingCount = 200 (set in config file)
crossoverGeneratingCount = 200 (set in config file)
headcount = 100
maxGeneration = 1000 (set in config file)
timeLimit = PT277H46M40S (set in config file)
testTimeLimit = PT3M (set in config file)
requiredSolutionsCount = 100 (set in config file)
randomSeed = 2 (set by command line)
scope = PACKAGE (set in config file)
faultLocalization = Zoltar (set in config file)
mutationType = Simple
crossoverType = Random
firstVariantSelectionStrategy = Random
secondVariantSelectionStrategy = Random
isPatchOutput = true (set in config file)
isHistoryRecord = false
currentDirectory = /Users/haradakanon/Desktop/研究/実験データ/afterResearch
version = 1.8.2
================================================================
2023-06-25 21:25:14 [main] [INFO]  KGenProgMain - initial failed tests (1/1)
org.apache.commons.math.ode.events.EventStateTest.closeEvents: function values at endpoints do not have different signs.  Endpoints: [89.999, 153.1], Values: [-0.066, -1,142.11]

2023-06-25 21:25:14 [main] [INFO]  KGenProgMain - GA started
2023-06-25 21:25:14 [main] [INFO]  KGenProgMain - entered the era of 1st generation.
2023-06-25 21:25:29 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 15 seconds
Variants: generated 200, build-succeeded 52, build-failed 115, syntax-invalid 11, redundant 22
Fitness: max 1(2), min 0(50), ave 0.038
Test execution time: sum 4845 ms, max 237 ms, min 55 ms
----------------------------------------------------------------

2023-06-25 21:25:29 [main] [INFO]  KGenProgMain - entered the era of 2nd generation.
2023-06-25 21:25:40 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 26 seconds
Variants: generated 200, build-succeeded 50, build-failed 113, syntax-invalid 11, redundant 26
Fitness: max 1(3), min 0(47), ave 0.06
Test execution time: sum 3332 ms, max 257 ms, min 51 ms
----------------------------------------------------------------

2023-06-25 21:25:40 [main] [INFO]  KGenProgMain - entered the era of 3rd generation.
2023-06-25 21:25:56 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 42 seconds
Variants: generated 400, build-succeeded 76, build-failed 111, syntax-invalid 54, redundant 159
Fitness: max 1(6), min 0(70), ave 0.079
Test execution time: sum 4745 ms, max 202 ms, min 50 ms
----------------------------------------------------------------

2023-06-25 21:25:56 [main] [INFO]  KGenProgMain - entered the era of 4th generation.
2023-06-25 21:26:13 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 59 seconds
Variants: generated 400, build-succeeded 112, build-failed 123, syntax-invalid 32, redundant 133
Fitness: max 0(112), min 0(112), ave 0
Test execution time: sum 6518 ms, max 150 ms, min 48 ms
----------------------------------------------------------------

2023-06-25 21:26:13 [main] [INFO]  KGenProgMain - entered the era of 5th generation.
2023-06-25 21:26:34 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 minutes 20 seconds
Variants: generated 400, build-succeeded 151, build-failed 128, syntax-invalid 16, redundant 105
Fitness: max 0(151), min 0(151), ave 0
Test execution time: sum 9349 ms, max 229 ms, min 48 ms
----------------------------------------------------------------

2023-06-25 21:26:34 [main] [INFO]  KGenProgMain - entered the era of 6th generation.
2023-06-25 21:27:07 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 minutes 53 seconds
Variants: generated 400, build-succeeded 162, build-failed 116, syntax-invalid 22, redundant 100
Fitness: max 0(162), min 0(162), ave 0
Test execution time: sum 12093 ms, max 203 ms, min 49 ms
----------------------------------------------------------------

2023-06-25 21:27:07 [main] [INFO]  KGenProgMain - entered the era of 7th generation.
2023-06-25 21:27:32 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 minutes 17 seconds
Variants: generated 400, build-succeeded 169, build-failed 124, syntax-invalid 27, redundant 80
Fitness: max 0(169), min 0(169), ave 0
Test execution time: sum 10264 ms, max 197 ms, min 48 ms
----------------------------------------------------------------

2023-06-25 21:27:32 [main] [INFO]  KGenProgMain - entered the era of 8th generation.
2023-06-25 21:27:54 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 minutes 40 seconds
Variants: generated 400, build-succeeded 175, build-failed 124, syntax-invalid 32, redundant 69
Fitness: max 0(175), min 0(175), ave 0
Test execution time: sum 9969 ms, max 201 ms, min 48 ms
----------------------------------------------------------------

2023-06-25 21:27:54 [main] [INFO]  KGenProgMain - entered the era of 9th generation.
2023-06-25 21:28:18 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 minutes 4 seconds
Variants: generated 400, build-succeeded 199, build-failed 128, syntax-invalid 19, redundant 54
Fitness: max 0(199), min 0(199), ave 0
Test execution time: sum 11101 ms, max 168 ms, min 48 ms
----------------------------------------------------------------

2023-06-25 21:28:18 [main] [INFO]  KGenProgMain - entered the era of 10th generation.
2023-06-25 21:28:43 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 minutes 29 seconds
Variants: generated 400, build-succeeded 199, build-failed 117, syntax-invalid 22, redundant 62
Fitness: max 1(1), min 0(198), ave 0.005
Test execution time: sum 11289 ms, max 177 ms, min 49 ms
----------------------------------------------------------------

2023-06-25 21:28:43 [main] [INFO]  KGenProgMain - entered the era of 11th generation.
2023-06-25 21:29:18 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 minutes 4 seconds
Variants: generated 400, build-succeeded 197, build-failed 128, syntax-invalid 37, redundant 38
Fitness: max 0(197), min 0(197), ave 0
Test execution time: sum 13373 ms, max 199 ms, min 48 ms
----------------------------------------------------------------

2023-06-25 21:29:18 [main] [INFO]  KGenProgMain - entered the era of 12th generation.
2023-06-25 21:29:45 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 minutes 31 seconds
Variants: generated 400, build-succeeded 213, build-failed 129, syntax-invalid 19, redundant 39
Fitness: max 0(213), min 0(213), ave 0
Test execution time: sum 11833 ms, max 122 ms, min 48 ms
----------------------------------------------------------------

2023-06-25 21:29:45 [main] [INFO]  KGenProgMain - entered the era of 13th generation.
2023-06-25 21:30:12 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 minutes 57 seconds
Variants: generated 400, build-succeeded 210, build-failed 108, syntax-invalid 28, redundant 54
Fitness: max 1(1), min 0(209), ave 0.005
Test execution time: sum 11897 ms, max 126 ms, min 48 ms
----------------------------------------------------------------

2023-06-25 21:30:12 [main] [INFO]  KGenProgMain - entered the era of 14th generation.
2023-06-25 21:30:46 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 minutes 32 seconds
Variants: generated 400, build-succeeded 220, build-failed 114, syntax-invalid 34, redundant 32
Fitness: max 0(220), min 0(220), ave 0
Test execution time: sum 14064 ms, max 201 ms, min 49 ms
----------------------------------------------------------------

2023-06-25 21:30:46 [main] [INFO]  KGenProgMain - entered the era of 15th generation.
2023-06-25 21:31:14 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 minutes 0 seconds
Variants: generated 400, build-succeeded 205, build-failed 120, syntax-invalid 29, redundant 46
Fitness: max 1(2), min 0(203), ave 0.01
Test execution time: sum 12138 ms, max 191 ms, min 49 ms
----------------------------------------------------------------

2023-06-25 21:31:14 [main] [INFO]  KGenProgMain - entered the era of 16th generation.
2023-06-25 21:31:47 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 minutes 32 seconds
Variants: generated 400, build-succeeded 197, build-failed 134, syntax-invalid 28, redundant 41
Fitness: max 1(2), min 0(195), ave 0.01
Test execution time: sum 12744 ms, max 214 ms, min 49 ms
----------------------------------------------------------------

2023-06-25 21:31:47 [main] [INFO]  KGenProgMain - entered the era of 17th generation.
2023-06-25 21:35:17 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 10 minutes 2 seconds
Variants: generated 400, build-succeeded 208, build-failed 119, syntax-invalid 34, redundant 39
Fitness: max 1(3), min 0(205), ave 0.014
Test execution time: sum 192215 ms, max 180069 ms, min 49 ms
----------------------------------------------------------------

2023-06-25 21:35:17 [main] [INFO]  KGenProgMain - entered the era of 18th generation.
2023-06-25 21:41:47 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 16 minutes 33 seconds
Variants: generated 400, build-succeeded 211, build-failed 117, syntax-invalid 36, redundant 36
Fitness: max 1(3), min 0(208), ave 0.014
Test execution time: sum 372711 ms, max 180069 ms, min 49 ms
----------------------------------------------------------------

2023-06-25 21:41:47 [main] [INFO]  KGenProgMain - entered the era of 19th generation.
2023-06-25 21:51:20 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 26 minutes 6 seconds
Variants: generated 400, build-succeeded 202, build-failed 137, syntax-invalid 27, redundant 34
Fitness: max 0(202), min 0(202), ave 0
Test execution time: sum 552289 ms, max 180073 ms, min 50 ms
----------------------------------------------------------------

2023-06-25 21:51:20 [main] [INFO]  KGenProgMain - entered the era of 20th generation.
2023-06-25 22:03:53 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 38 minutes 39 seconds
Variants: generated 400, build-succeeded 210, build-failed 120, syntax-invalid 41, redundant 29
Fitness: max 0(210), min 0(210), ave 0
Test execution time: sum 732907 ms, max 180102 ms, min 48 ms
----------------------------------------------------------------

2023-06-25 22:03:53 [main] [INFO]  KGenProgMain - entered the era of 21st generation.
2023-06-25 22:10:37 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 45 minutes 23 seconds
Variants: generated 400, build-succeeded 200, build-failed 121, syntax-invalid 50, redundant 29
Fitness: max 0(200), min 0(200), ave 0
Test execution time: sum 374066 ms, max 180071 ms, min 48 ms
----------------------------------------------------------------

2023-06-25 22:10:37 [main] [INFO]  KGenProgMain - entered the era of 22nd generation.
2023-06-25 22:20:27 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 55 minutes 13 seconds
Variants: generated 400, build-succeeded 222, build-failed 118, syntax-invalid 21, redundant 39
Fitness: max 1(4), min 0(218), ave 0.018
Test execution time: sum 556031 ms, max 180193 ms, min 49 ms
----------------------------------------------------------------

2023-06-25 22:20:27 [main] [INFO]  KGenProgMain - entered the era of 23rd generation.
2023-06-25 22:24:14 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 58 minutes 59 seconds
Variants: generated 400, build-succeeded 217, build-failed 118, syntax-invalid 33, redundant 32
Fitness: max 1(1), min 0(216), ave 0.005
Test execution time: sum 195210 ms, max 180052 ms, min 48 ms
----------------------------------------------------------------

2023-06-25 22:24:14 [main] [INFO]  KGenProgMain - entered the era of 24th generation.
2023-06-25 22:24:56 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 59 minutes 41 seconds
Variants: generated 400, build-succeeded 226, build-failed 119, syntax-invalid 27, redundant 28
Fitness: max 1(5), min 0(221), ave 0.022
Test execution time: sum 15060 ms, max 185 ms, min 48 ms
----------------------------------------------------------------

2023-06-25 22:24:56 [main] [INFO]  KGenProgMain - entered the era of 25th generation.
2023-06-25 22:25:36 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 21 seconds
Variants: generated 400, build-succeeded 215, build-failed 120, syntax-invalid 32, redundant 33
Fitness: max 1(2), min 0(213), ave 0.009
Test execution time: sum 13956 ms, max 183 ms, min 48 ms
----------------------------------------------------------------

2023-06-25 22:25:36 [main] [INFO]  KGenProgMain - entered the era of 26th generation.
2023-06-25 22:26:18 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 1 minutes 4 seconds
Variants: generated 400, build-succeeded 207, build-failed 128, syntax-invalid 37, redundant 28
Fitness: max 1(2), min 0(205), ave 0.01
Test execution time: sum 13851 ms, max 178 ms, min 48 ms
----------------------------------------------------------------

2023-06-25 22:26:18 [main] [INFO]  KGenProgMain - entered the era of 27th generation.
2023-06-25 22:26:57 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 1 minutes 42 seconds
Variants: generated 400, build-succeeded 208, build-failed 134, syntax-invalid 25, redundant 33
Fitness: max 1(1), min 0(207), ave 0.005
Test execution time: sum 12958 ms, max 202 ms, min 48 ms
----------------------------------------------------------------

2023-06-25 22:26:57 [main] [INFO]  KGenProgMain - entered the era of 28th generation.
2023-06-25 22:27:36 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 2 minutes 22 seconds
Variants: generated 400, build-succeeded 235, build-failed 106, syntax-invalid 30, redundant 29
Fitness: max 1(4), min 0(231), ave 0.017
Test execution time: sum 14345 ms, max 173 ms, min 48 ms
----------------------------------------------------------------

2023-06-25 22:27:36 [main] [INFO]  KGenProgMain - entered the era of 29th generation.
2023-06-25 22:28:20 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 3 minutes 6 seconds
Variants: generated 400, build-succeeded 220, build-failed 125, syntax-invalid 39, redundant 16
Fitness: max 0(220), min 0(220), ave 0
Test execution time: sum 14378 ms, max 179 ms, min 49 ms
----------------------------------------------------------------

2023-06-25 22:28:20 [main] [INFO]  KGenProgMain - entered the era of 30th generation.
2023-06-25 22:29:04 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 3 minutes 50 seconds
Variants: generated 400, build-succeeded 216, build-failed 139, syntax-invalid 32, redundant 13
Fitness: max 1(3), min 0(213), ave 0.014
Test execution time: sum 15001 ms, max 202 ms, min 49 ms
----------------------------------------------------------------

2023-06-25 22:29:04 [main] [INFO]  KGenProgMain - entered the era of 31st generation.
2023-06-25 22:29:42 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 4 minutes 28 seconds
Variants: generated 400, build-succeeded 233, build-failed 111, syntax-invalid 26, redundant 30
Fitness: max 1(1), min 0(232), ave 0.004
Test execution time: sum 13865 ms, max 206 ms, min 48 ms
----------------------------------------------------------------

2023-06-25 22:29:42 [main] [INFO]  KGenProgMain - entered the era of 32nd generation.
2023-06-25 22:30:17 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 5 minutes 3 seconds
Variants: generated 400, build-succeeded 217, build-failed 121, syntax-invalid 39, redundant 23
Fitness: max 0(217), min 0(217), ave 0
Test execution time: sum 12565 ms, max 184 ms, min 49 ms
----------------------------------------------------------------

2023-06-25 22:30:17 [main] [INFO]  KGenProgMain - entered the era of 33rd generation.
2023-06-25 22:33:54 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 8 minutes 40 seconds
Variants: generated 400, build-succeeded 218, build-failed 112, syntax-invalid 47, redundant 23
Fitness: max 1(2), min 0(216), ave 0.009
Test execution time: sum 193449 ms, max 180073 ms, min 48 ms
----------------------------------------------------------------

2023-06-25 22:33:54 [main] [INFO]  KGenProgMain - entered the era of 34th generation.
2023-06-25 22:34:27 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 9 minutes 13 seconds
Variants: generated 400, build-succeeded 200, build-failed 125, syntax-invalid 56, redundant 19
Fitness: max 1(1), min 0(199), ave 0.005
Test execution time: sum 11989 ms, max 190 ms, min 48 ms
----------------------------------------------------------------

2023-06-25 22:34:27 [main] [INFO]  KGenProgMain - entered the era of 35th generation.
2023-06-25 22:41:02 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 15 minutes 48 seconds
Variants: generated 400, build-succeeded 214, build-failed 118, syntax-invalid 47, redundant 21
Fitness: max 0(214), min 0(214), ave 0
Test execution time: sum 373340 ms, max 180061 ms, min 49 ms
----------------------------------------------------------------

2023-06-25 22:41:02 [main] [INFO]  KGenProgMain - entered the era of 36th generation.
2023-06-25 22:41:41 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 16 minutes 27 seconds
Variants: generated 400, build-succeeded 214, build-failed 118, syntax-invalid 43, redundant 25
Fitness: max 0(214), min 0(214), ave 0
Test execution time: sum 13715 ms, max 171 ms, min 50 ms
----------------------------------------------------------------

2023-06-25 22:41:41 [main] [INFO]  KGenProgMain - entered the era of 37th generation.
2023-06-25 22:42:16 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 17 minutes 2 seconds
Variants: generated 400, build-succeeded 210, build-failed 120, syntax-invalid 50, redundant 20
Fitness: max 1(1), min 0(209), ave 0.005
Test execution time: sum 12814 ms, max 175 ms, min 48 ms
----------------------------------------------------------------

2023-06-25 22:42:16 [main] [INFO]  KGenProgMain - entered the era of 38th generation.
2023-06-25 22:42:51 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 17 minutes 36 seconds
Variants: generated 400, build-succeeded 216, build-failed 115, syntax-invalid 50, redundant 19
Fitness: max 1(1), min 0(215), ave 0.005
Test execution time: sum 12538 ms, max 156 ms, min 48 ms
----------------------------------------------------------------

2023-06-25 22:42:51 [main] [INFO]  KGenProgMain - entered the era of 39th generation.
2023-06-25 22:43:29 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 18 minutes 15 seconds
Variants: generated 400, build-succeeded 214, build-failed 121, syntax-invalid 47, redundant 18
Fitness: max 1(1), min 0(213), ave 0.005
Test execution time: sum 13529 ms, max 186 ms, min 49 ms
----------------------------------------------------------------

2023-06-25 22:43:29 [main] [INFO]  KGenProgMain - entered the era of 40th generation.
2023-06-25 22:44:10 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 18 minutes 56 seconds
Variants: generated 400, build-succeeded 233, build-failed 104, syntax-invalid 35, redundant 28
Fitness: max 1(3), min 0(230), ave 0.013
Test execution time: sum 15151 ms, max 188 ms, min 49 ms
----------------------------------------------------------------

2023-06-25 22:44:10 [main] [INFO]  KGenProgMain - entered the era of 41st generation.
2023-06-25 22:47:43 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 22 minutes 29 seconds
Variants: generated 400, build-succeeded 223, build-failed 113, syntax-invalid 37, redundant 27
Fitness: max 0(223), min 0(223), ave 0
Test execution time: sum 192811 ms, max 180064 ms, min 49 ms
----------------------------------------------------------------

2023-06-25 22:47:43 [main] [INFO]  KGenProgMain - entered the era of 42nd generation.
2023-06-25 22:48:16 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 23 minutes 2 seconds
Variants: generated 400, build-succeeded 208, build-failed 117, syntax-invalid 50, redundant 25
Fitness: max 1(2), min 0(206), ave 0.01
Test execution time: sum 12432 ms, max 177 ms, min 49 ms
----------------------------------------------------------------

2023-06-25 22:48:16 [main] [INFO]  KGenProgMain - entered the era of 43rd generation.
2023-06-25 22:48:49 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 23 minutes 35 seconds
Variants: generated 400, build-succeeded 204, build-failed 116, syntax-invalid 45, redundant 35
Fitness: max 1(1), min 0(203), ave 0.005
Test execution time: sum 11804 ms, max 178 ms, min 49 ms
----------------------------------------------------------------

2023-06-25 22:48:49 [main] [INFO]  KGenProgMain - entered the era of 44th generation.
2023-06-25 22:49:21 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 24 minutes 7 seconds
Variants: generated 400, build-succeeded 208, build-failed 95, syntax-invalid 49, redundant 48
Fitness: max 1(3), min 0(205), ave 0.014
Test execution time: sum 12067 ms, max 131 ms, min 49 ms
----------------------------------------------------------------

2023-06-25 22:49:21 [main] [INFO]  KGenProgMain - entered the era of 45th generation.
2023-06-25 22:55:56 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 30 minutes 42 seconds
Variants: generated 400, build-succeeded 218, build-failed 120, syntax-invalid 40, redundant 22
Fitness: max 1(5), min 0(213), ave 0.023
Test execution time: sum 373081 ms, max 180074 ms, min 49 ms
----------------------------------------------------------------

2023-06-25 22:55:56 [main] [INFO]  KGenProgMain - entered the era of 46th generation.
2023-06-25 22:56:28 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 31 minutes 14 seconds
Variants: generated 400, build-succeeded 203, build-failed 116, syntax-invalid 45, redundant 36
Fitness: max 0(203), min 0(203), ave 0
Test execution time: sum 11449 ms, max 175 ms, min 49 ms
----------------------------------------------------------------

2023-06-25 22:56:28 [main] [INFO]  KGenProgMain - entered the era of 47th generation.
2023-06-25 22:57:01 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 31 minutes 47 seconds
Variants: generated 400, build-succeeded 212, build-failed 110, syntax-invalid 61, redundant 17
Fitness: max 0(212), min 0(212), ave 0
Test execution time: sum 12206 ms, max 111 ms, min 49 ms
----------------------------------------------------------------

2023-06-25 22:57:01 [main] [INFO]  KGenProgMain - entered the era of 48th generation.
2023-06-25 23:00:44 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 35 minutes 30 seconds
Variants: generated 400, build-succeeded 204, build-failed 131, syntax-invalid 41, redundant 24
Fitness: max 1(4), min 0(200), ave 0.02
Test execution time: sum 193750 ms, max 180064 ms, min 49 ms
----------------------------------------------------------------

2023-06-25 23:00:44 [main] [INFO]  KGenProgMain - entered the era of 49th generation.
2023-06-25 23:01:19 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 36 minutes 5 seconds
Variants: generated 400, build-succeeded 214, build-failed 113, syntax-invalid 40, redundant 33
Fitness: max 0(214), min 0(214), ave 0
Test execution time: sum 12028 ms, max 181 ms, min 49 ms
----------------------------------------------------------------

2023-06-25 23:01:19 [main] [INFO]  KGenProgMain - entered the era of 50th generation.
2023-06-25 23:07:54 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 42 minutes 40 seconds
Variants: generated 400, build-succeeded 231, build-failed 105, syntax-invalid 34, redundant 30
Fitness: max 0(231), min 0(231), ave 0
Test execution time: sum 372828 ms, max 180065 ms, min 48 ms
----------------------------------------------------------------

2023-06-25 23:07:54 [main] [INFO]  KGenProgMain - entered the era of 51st generation.
2023-06-25 23:11:29 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 46 minutes 15 seconds
Variants: generated 400, build-succeeded 204, build-failed 119, syntax-invalid 45, redundant 32
Fitness: max 0(204), min 0(204), ave 0
Test execution time: sum 191859 ms, max 180063 ms, min 50 ms
----------------------------------------------------------------

2023-06-25 23:11:29 [main] [INFO]  KGenProgMain - entered the era of 52nd generation.
2023-06-25 23:12:04 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 46 minutes 50 seconds
Variants: generated 400, build-succeeded 203, build-failed 104, syntax-invalid 59, redundant 34
Fitness: max 0(203), min 0(203), ave 0
Test execution time: sum 11548 ms, max 117 ms, min 49 ms
----------------------------------------------------------------

2023-06-25 23:12:04 [main] [INFO]  KGenProgMain - entered the era of 53rd generation.
2023-06-25 23:12:42 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 47 minutes 27 seconds
Variants: generated 400, build-succeeded 201, build-failed 124, syntax-invalid 49, redundant 26
Fitness: max 0(201), min 0(201), ave 0
Test execution time: sum 11932 ms, max 164 ms, min 50 ms
----------------------------------------------------------------

2023-06-25 23:12:42 [main] [INFO]  KGenProgMain - entered the era of 54th generation.
2023-06-25 23:13:14 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 48 minutes 0 seconds
Variants: generated 400, build-succeeded 181, build-failed 116, syntax-invalid 58, redundant 45
Fitness: max 0(181), min 0(181), ave 0
Test execution time: sum 10275 ms, max 163 ms, min 49 ms
----------------------------------------------------------------

2023-06-25 23:13:14 [main] [INFO]  KGenProgMain - entered the era of 55th generation.
2023-06-25 23:13:52 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 48 minutes 38 seconds
Variants: generated 400, build-succeeded 204, build-failed 120, syntax-invalid 43, redundant 33
Fitness: max 0(204), min 0(204), ave 0
Test execution time: sum 12010 ms, max 162 ms, min 49 ms
----------------------------------------------------------------

2023-06-25 23:13:52 [main] [INFO]  KGenProgMain - entered the era of 56th generation.
2023-06-25 23:14:26 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 49 minutes 12 seconds
Variants: generated 400, build-succeeded 188, build-failed 115, syntax-invalid 63, redundant 34
Fitness: max 0(188), min 0(188), ave 0
Test execution time: sum 10388 ms, max 109 ms, min 49 ms
----------------------------------------------------------------

2023-06-25 23:14:26 [main] [INFO]  KGenProgMain - entered the era of 57th generation.
2023-06-25 23:15:00 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 49 minutes 46 seconds
Variants: generated 400, build-succeeded 186, build-failed 106, syntax-invalid 73, redundant 35
Fitness: max 0(186), min 0(186), ave 0
Test execution time: sum 10337 ms, max 168 ms, min 49 ms
----------------------------------------------------------------

2023-06-25 23:15:00 [main] [INFO]  KGenProgMain - entered the era of 58th generation.
2023-06-25 23:18:35 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 53 minutes 21 seconds
Variants: generated 400, build-succeeded 199, build-failed 108, syntax-invalid 70, redundant 23
Fitness: max 1(4), min 0(195), ave 0.02
Test execution time: sum 191367 ms, max 180054 ms, min 49 ms
----------------------------------------------------------------

2023-06-25 23:18:35 [main] [INFO]  KGenProgMain - entered the era of 59th generation.
2023-06-25 23:25:11 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 59 minutes 57 seconds
Variants: generated 400, build-succeeded 197, build-failed 125, syntax-invalid 59, redundant 19
Fitness: max 1(4), min 0(193), ave 0.02
Test execution time: sum 371133 ms, max 180081 ms, min 48 ms
----------------------------------------------------------------

2023-06-25 23:25:11 [main] [INFO]  KGenProgMain - entered the era of 60th generation.
2023-06-25 23:25:47 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 33 seconds
Variants: generated 400, build-succeeded 202, build-failed 111, syntax-invalid 61, redundant 26
Fitness: max 1(2), min 0(200), ave 0.01
Test execution time: sum 11453 ms, max 118 ms, min 49 ms
----------------------------------------------------------------

2023-06-25 23:25:47 [main] [INFO]  KGenProgMain - entered the era of 61st generation.
2023-06-25 23:26:23 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 1 minutes 8 seconds
Variants: generated 400, build-succeeded 196, build-failed 114, syntax-invalid 56, redundant 34
Fitness: max 0(196), min 0(196), ave 0
Test execution time: sum 11222 ms, max 180 ms, min 49 ms
----------------------------------------------------------------

2023-06-25 23:26:23 [main] [INFO]  KGenProgMain - entered the era of 62nd generation.
2023-06-25 23:26:58 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 1 minutes 44 seconds
Variants: generated 400, build-succeeded 188, build-failed 116, syntax-invalid 60, redundant 36
Fitness: max 1(3), min 0(185), ave 0.016
Test execution time: sum 10711 ms, max 114 ms, min 50 ms
----------------------------------------------------------------

2023-06-25 23:26:58 [main] [INFO]  KGenProgMain - entered the era of 63rd generation.
2023-06-25 23:27:36 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 2 minutes 22 seconds
Variants: generated 400, build-succeeded 205, build-failed 107, syntax-invalid 59, redundant 29
Fitness: max 0(205), min 0(205), ave 0
Test execution time: sum 12141 ms, max 173 ms, min 50 ms
----------------------------------------------------------------

2023-06-25 23:27:36 [main] [INFO]  KGenProgMain - entered the era of 64th generation.
2023-06-25 23:28:14 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 3 minutes 0 seconds
Variants: generated 400, build-succeeded 203, build-failed 125, syntax-invalid 52, redundant 20
Fitness: max 0(203), min 0(203), ave 0
Test execution time: sum 11763 ms, max 187 ms, min 50 ms
----------------------------------------------------------------

2023-06-25 23:28:14 [main] [INFO]  KGenProgMain - entered the era of 65th generation.
2023-06-25 23:28:52 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 3 minutes 38 seconds
Variants: generated 400, build-succeeded 193, build-failed 127, syntax-invalid 62, redundant 18
Fitness: max 0(193), min 0(193), ave 0
Test execution time: sum 11199 ms, max 163 ms, min 50 ms
----------------------------------------------------------------

2023-06-25 23:28:52 [main] [INFO]  KGenProgMain - entered the era of 66th generation.
2023-06-25 23:29:31 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 4 minutes 16 seconds
Variants: generated 400, build-succeeded 199, build-failed 112, syntax-invalid 38, redundant 51
Fitness: max 0(199), min 0(199), ave 0
Test execution time: sum 11241 ms, max 176 ms, min 49 ms
----------------------------------------------------------------

2023-06-25 23:29:31 [main] [INFO]  KGenProgMain - entered the era of 67th generation.
2023-06-25 23:30:10 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 4 minutes 56 seconds
Variants: generated 400, build-succeeded 190, build-failed 115, syntax-invalid 53, redundant 42
Fitness: max 0(190), min 0(190), ave 0
Test execution time: sum 10788 ms, max 119 ms, min 50 ms
----------------------------------------------------------------

2023-06-25 23:30:10 [main] [INFO]  KGenProgMain - entered the era of 68th generation.
2023-06-25 23:30:48 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 5 minutes 34 seconds
Variants: generated 400, build-succeeded 198, build-failed 118, syntax-invalid 63, redundant 21
Fitness: max 1(3), min 0(195), ave 0.015
Test execution time: sum 11302 ms, max 159 ms, min 49 ms
----------------------------------------------------------------

2023-06-25 23:30:48 [main] [INFO]  KGenProgMain - entered the era of 69th generation.
2023-06-25 23:31:26 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 6 minutes 12 seconds
Variants: generated 400, build-succeeded 192, build-failed 101, syntax-invalid 47, redundant 60
Fitness: max 0(192), min 0(192), ave 0
Test execution time: sum 10791 ms, max 160 ms, min 50 ms
----------------------------------------------------------------

2023-06-25 23:31:26 [main] [INFO]  KGenProgMain - entered the era of 70th generation.
2023-06-25 23:32:04 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 6 minutes 49 seconds
Variants: generated 400, build-succeeded 184, build-failed 110, syntax-invalid 57, redundant 49
Fitness: max 0(184), min 0(184), ave 0
Test execution time: sum 10652 ms, max 168 ms, min 50 ms
----------------------------------------------------------------

2023-06-25 23:32:04 [main] [INFO]  KGenProgMain - entered the era of 71st generation.
2023-06-25 23:32:40 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 7 minutes 26 seconds
Variants: generated 400, build-succeeded 182, build-failed 120, syntax-invalid 78, redundant 20
Fitness: max 1(3), min 0(179), ave 0.016
Test execution time: sum 10725 ms, max 184 ms, min 51 ms
----------------------------------------------------------------

2023-06-25 23:32:40 [main] [INFO]  KGenProgMain - entered the era of 72nd generation.
2023-06-25 23:33:18 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 8 minutes 4 seconds
Variants: generated 400, build-succeeded 185, build-failed 132, syntax-invalid 55, redundant 28
Fitness: max 0(185), min 0(185), ave 0
Test execution time: sum 10722 ms, max 118 ms, min 50 ms
----------------------------------------------------------------

2023-06-25 23:33:18 [main] [INFO]  KGenProgMain - entered the era of 73rd generation.
2023-06-25 23:33:55 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 8 minutes 41 seconds
Variants: generated 400, build-succeeded 171, build-failed 128, syntax-invalid 63, redundant 38
Fitness: max 0(171), min 0(171), ave 0
Test execution time: sum 9801 ms, max 109 ms, min 50 ms
----------------------------------------------------------------

2023-06-25 23:33:55 [main] [INFO]  KGenProgMain - entered the era of 74th generation.
2023-06-25 23:34:34 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 9 minutes 20 seconds
Variants: generated 400, build-succeeded 190, build-failed 120, syntax-invalid 59, redundant 31
Fitness: max 0(190), min 0(190), ave 0
Test execution time: sum 10758 ms, max 167 ms, min 49 ms
----------------------------------------------------------------

2023-06-25 23:34:34 [main] [INFO]  KGenProgMain - entered the era of 75th generation.
2023-06-25 23:35:12 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 9 minutes 58 seconds
Variants: generated 400, build-succeeded 163, build-failed 120, syntax-invalid 71, redundant 46
Fitness: max 0(163), min 0(163), ave 0
Test execution time: sum 9355 ms, max 170 ms, min 50 ms
----------------------------------------------------------------

2023-06-25 23:35:12 [main] [INFO]  KGenProgMain - entered the era of 76th generation.
2023-06-25 23:35:47 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 10 minutes 33 seconds
Variants: generated 400, build-succeeded 168, build-failed 118, syntax-invalid 81, redundant 33
Fitness: max 0(168), min 0(168), ave 0
Test execution time: sum 9565 ms, max 166 ms, min 50 ms
----------------------------------------------------------------

2023-06-25 23:35:47 [main] [INFO]  KGenProgMain - entered the era of 77th generation.
2023-06-25 23:36:23 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 11 minutes 9 seconds
Variants: generated 400, build-succeeded 162, build-failed 126, syntax-invalid 75, redundant 37
Fitness: max 0(162), min 0(162), ave 0
Test execution time: sum 9175 ms, max 176 ms, min 50 ms
----------------------------------------------------------------

2023-06-25 23:36:23 [main] [INFO]  KGenProgMain - entered the era of 78th generation.
2023-06-25 23:37:02 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 11 minutes 48 seconds
Variants: generated 400, build-succeeded 180, build-failed 116, syntax-invalid 74, redundant 30
Fitness: max 0(180), min 0(180), ave 0
Test execution time: sum 10243 ms, max 140 ms, min 50 ms
----------------------------------------------------------------

2023-06-25 23:37:02 [main] [INFO]  KGenProgMain - entered the era of 79th generation.
2023-06-25 23:37:38 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 12 minutes 24 seconds
Variants: generated 400, build-succeeded 167, build-failed 119, syntax-invalid 78, redundant 36
Fitness: max 0(167), min 0(167), ave 0
Test execution time: sum 9462 ms, max 126 ms, min 51 ms
----------------------------------------------------------------

2023-06-25 23:37:38 [main] [INFO]  KGenProgMain - entered the era of 80th generation.
2023-06-25 23:38:17 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 13 minutes 2 seconds
Variants: generated 400, build-succeeded 192, build-failed 111, syntax-invalid 59, redundant 38
Fitness: max 0(192), min 0(192), ave 0
Test execution time: sum 10969 ms, max 165 ms, min 50 ms
----------------------------------------------------------------

2023-06-25 23:38:17 [main] [INFO]  KGenProgMain - entered the era of 81st generation.
2023-06-25 23:38:56 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 13 minutes 42 seconds
Variants: generated 400, build-succeeded 194, build-failed 114, syntax-invalid 59, redundant 33
Fitness: max 0(194), min 0(194), ave 0
Test execution time: sum 11157 ms, max 117 ms, min 50 ms
----------------------------------------------------------------

2023-06-25 23:38:56 [main] [INFO]  KGenProgMain - entered the era of 82nd generation.
2023-06-25 23:39:35 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 14 minutes 21 seconds
Variants: generated 400, build-succeeded 195, build-failed 106, syntax-invalid 51, redundant 48
Fitness: max 0(195), min 0(195), ave 0
Test execution time: sum 11104 ms, max 115 ms, min 50 ms
----------------------------------------------------------------

2023-06-25 23:39:35 [main] [INFO]  KGenProgMain - entered the era of 83rd generation.
2023-06-25 23:40:15 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 15 minutes 1 seconds
Variants: generated 400, build-succeeded 184, build-failed 132, syntax-invalid 60, redundant 24
Fitness: max 0(184), min 0(184), ave 0
Test execution time: sum 10747 ms, max 134 ms, min 51 ms
----------------------------------------------------------------

2023-06-25 23:40:15 [main] [INFO]  KGenProgMain - entered the era of 84th generation.
2023-06-25 23:40:55 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 15 minutes 41 seconds
Variants: generated 400, build-succeeded 190, build-failed 117, syntax-invalid 57, redundant 36
Fitness: max 0(190), min 0(190), ave 0
Test execution time: sum 11232 ms, max 133 ms, min 51 ms
----------------------------------------------------------------

2023-06-25 23:40:55 [main] [INFO]  KGenProgMain - entered the era of 85th generation.
2023-06-25 23:41:34 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 16 minutes 20 seconds
Variants: generated 400, build-succeeded 179, build-failed 117, syntax-invalid 65, redundant 39
Fitness: max 0(179), min 0(179), ave 0
Test execution time: sum 10499 ms, max 177 ms, min 49 ms
----------------------------------------------------------------

2023-06-25 23:41:34 [main] [INFO]  KGenProgMain - entered the era of 86th generation.
2023-06-25 23:42:17 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 17 minutes 3 seconds
Variants: generated 400, build-succeeded 206, build-failed 119, syntax-invalid 54, redundant 21
Fitness: max 0(206), min 0(206), ave 0
Test execution time: sum 11813 ms, max 124 ms, min 50 ms
----------------------------------------------------------------

2023-06-25 23:42:17 [main] [INFO]  KGenProgMain - entered the era of 87th generation.
2023-06-25 23:42:56 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 17 minutes 42 seconds
Variants: generated 400, build-succeeded 193, build-failed 118, syntax-invalid 71, redundant 18
Fitness: max 0(193), min 0(193), ave 0
Test execution time: sum 11453 ms, max 146 ms, min 51 ms
----------------------------------------------------------------

2023-06-25 23:42:56 [main] [INFO]  KGenProgMain - entered the era of 88th generation.
2023-06-25 23:43:38 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 18 minutes 23 seconds
Variants: generated 400, build-succeeded 177, build-failed 117, syntax-invalid 82, redundant 24
Fitness: max 0(177), min 0(177), ave 0
Test execution time: sum 10371 ms, max 116 ms, min 51 ms
----------------------------------------------------------------

2023-06-25 23:43:38 [main] [INFO]  KGenProgMain - entered the era of 89th generation.
2023-06-25 23:44:17 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 19 minutes 3 seconds
Variants: generated 400, build-succeeded 173, build-failed 119, syntax-invalid 62, redundant 46
Fitness: max 0(173), min 0(173), ave 0
Test execution time: sum 10047 ms, max 111 ms, min 51 ms
----------------------------------------------------------------

2023-06-25 23:44:17 [main] [INFO]  KGenProgMain - entered the era of 90th generation.
2023-06-25 23:44:56 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 19 minutes 41 seconds
Variants: generated 400, build-succeeded 172, build-failed 118, syntax-invalid 75, redundant 35
Fitness: max 0(172), min 0(172), ave 0
Test execution time: sum 10106 ms, max 121 ms, min 51 ms
----------------------------------------------------------------

2023-06-25 23:44:56 [main] [INFO]  KGenProgMain - entered the era of 91st generation.
2023-06-25 23:45:39 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 20 minutes 25 seconds
Variants: generated 400, build-succeeded 200, build-failed 112, syntax-invalid 49, redundant 39
Fitness: max 0(200), min 0(200), ave 0
Test execution time: sum 11694 ms, max 116 ms, min 51 ms
----------------------------------------------------------------

2023-06-25 23:45:39 [main] [INFO]  KGenProgMain - entered the era of 92nd generation.
2023-06-25 23:46:24 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 21 minutes 10 seconds
Variants: generated 400, build-succeeded 194, build-failed 104, syntax-invalid 54, redundant 48
Fitness: max 0(194), min 0(194), ave 0
Test execution time: sum 11388 ms, max 126 ms, min 51 ms
----------------------------------------------------------------

2023-06-25 23:46:24 [main] [INFO]  KGenProgMain - entered the era of 93rd generation.
2023-06-25 23:47:04 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 21 minutes 50 seconds
Variants: generated 400, build-succeeded 169, build-failed 110, syntax-invalid 100, redundant 21
Fitness: max 1(2), min 0(167), ave 0.012
Test execution time: sum 10246 ms, max 181 ms, min 50 ms
----------------------------------------------------------------

2023-06-25 23:47:04 [main] [INFO]  KGenProgMain - entered the era of 94th generation.
2023-06-25 23:50:47 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 25 minutes 33 seconds
Variants: generated 400, build-succeeded 195, build-failed 112, syntax-invalid 68, redundant 25
Fitness: max 0(195), min 0(195), ave 0
Test execution time: sum 191673 ms, max 180055 ms, min 51 ms
----------------------------------------------------------------

2023-06-25 23:50:47 [main] [INFO]  KGenProgMain - entered the era of 95th generation.
2023-06-25 23:51:31 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 26 minutes 17 seconds
Variants: generated 400, build-succeeded 193, build-failed 114, syntax-invalid 76, redundant 17
Fitness: max 1(1), min 0(192), ave 0.005
Test execution time: sum 11743 ms, max 181 ms, min 51 ms
----------------------------------------------------------------

2023-06-25 23:51:31 [main] [INFO]  KGenProgMain - entered the era of 96th generation.
2023-06-25 23:52:17 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 27 minutes 3 seconds
Variants: generated 400, build-succeeded 208, build-failed 109, syntax-invalid 57, redundant 26
Fitness: max 1(4), min 0(204), ave 0.019
Test execution time: sum 12762 ms, max 185 ms, min 51 ms
----------------------------------------------------------------

2023-06-25 23:52:17 [main] [INFO]  KGenProgMain - entered the era of 97th generation.
2023-06-25 23:53:03 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 27 minutes 49 seconds
Variants: generated 400, build-succeeded 199, build-failed 124, syntax-invalid 52, redundant 25
Fitness: max 0(199), min 0(199), ave 0
Test execution time: sum 12197 ms, max 135 ms, min 51 ms
----------------------------------------------------------------

2023-06-25 23:53:03 [main] [INFO]  KGenProgMain - entered the era of 98th generation.
2023-06-25 23:53:50 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 28 minutes 36 seconds
Variants: generated 400, build-succeeded 204, build-failed 111, syntax-invalid 40, redundant 45
Fitness: max 0(204), min 0(204), ave 0
Test execution time: sum 12384 ms, max 118 ms, min 51 ms
----------------------------------------------------------------

2023-06-25 23:53:50 [main] [INFO]  KGenProgMain - entered the era of 99th generation.
2023-06-25 23:54:37 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 29 minutes 23 seconds
Variants: generated 400, build-succeeded 209, build-failed 104, syntax-invalid 44, redundant 43
Fitness: max 0(209), min 0(209), ave 0
Test execution time: sum 12705 ms, max 183 ms, min 51 ms
----------------------------------------------------------------

2023-06-25 23:54:37 [main] [INFO]  KGenProgMain - entered the era of 100th generation.
2023-06-25 23:55:24 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 30 minutes 10 seconds
Variants: generated 400, build-succeeded 203, build-failed 125, syntax-invalid 43, redundant 29
Fitness: max 0(203), min 0(203), ave 0
Test execution time: sum 12125 ms, max 125 ms, min 51 ms
----------------------------------------------------------------

2023-06-25 23:55:24 [main] [INFO]  KGenProgMain - entered the era of 101st generation.
2023-06-25 23:56:12 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 30 minutes 58 seconds
Variants: generated 400, build-succeeded 204, build-failed 110, syntax-invalid 40, redundant 46
Fitness: max 0(204), min 0(204), ave 0
Test execution time: sum 12032 ms, max 119 ms, min 51 ms
----------------------------------------------------------------

2023-06-25 23:56:12 [main] [INFO]  KGenProgMain - entered the era of 102nd generation.
2023-06-25 23:57:01 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 31 minutes 47 seconds
Variants: generated 400, build-succeeded 212, build-failed 121, syntax-invalid 44, redundant 23
Fitness: max 1(2), min 0(210), ave 0.009
Test execution time: sum 12816 ms, max 214 ms, min 51 ms
----------------------------------------------------------------

2023-06-25 23:57:01 [main] [INFO]  KGenProgMain - entered the era of 103rd generation.
2023-06-25 23:57:08 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 31 minutes 54 seconds
Variants: generated 56, build-succeeded 12, build-failed 31, syntax-invalid 9, redundant 4
Fitness: max 1(2), min 0(10), ave 0.167
Test execution time: sum 970 ms, max 183 ms, min 60 ms
----------------------------------------------------------------

2023-06-25 23:57:08 [main] [INFO]  KGenProgMain - GA stopped
2023-06-25 23:57:11 [main] [INFO]  PatchLogExporter - patch (v14)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-25 23:57:11 [main] [INFO]  PatchLogExporter - patch (v14)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -213,7 +213,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
2023-06-25 23:57:11 [main] [INFO]  PatchLogExporter - patch (v14)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-25 23:57:11 [main] [INFO]  PatchLogExporter - patch (v14)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v190)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v190)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v190)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v190)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,15 +223,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v224)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -208,7 +208,6 @@
    * interpolator for future calls to {@link #storeTime storeTime}
    */
   public void shift() {
-    previousTime = currentTime;
   }
 
   /** Store the current step time.
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v224)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v224)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -213,7 +213,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v224)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v224)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v314)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -208,7 +208,6 @@
    * interpolator for future calls to {@link #storeTime storeTime}
    */
   public void shift() {
-    previousTime = currentTime;
   }
 
   /** Store the current step time.
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v314)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v314)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v314)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v314)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -290,7 +290,7 @@
             x0 = x1;
             y0 = y1;
             // Compute new X1, Y1
-            if (Math.abs(delta) > tolerance) {
+            if (y0 * y1 >= 0) {
                 x1 = x1 + delta;
             } else if (dx > 0.0) {
                 x1 = x1 + 0.5 * tolerance;
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v354)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -208,7 +208,6 @@
    * interpolator for future calls to {@link #storeTime storeTime}
    */
   public void shift() {
-    previousTime = currentTime;
   }
 
   /** Store the current step time.
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v354)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v354)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -213,7 +213,7 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
+                    g0Positive = g0 >= 0;
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v354)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v354)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v471)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -208,7 +208,6 @@
    * interpolator for future calls to {@link #storeTime storeTime}
    */
   public void shift() {
-    previousTime = currentTime;
   }
 
   /** Store the current step time.
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v471)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v471)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -104,7 +104,8 @@
         g0Positive        = true;
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
-        previousEventTime = Double.NaN;
+        double ga = g0;
+		previousEventTime = Double.NaN;
         increasing        = true;
         nextAction        = EventHandler.CONTINUE;
 
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v471)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v471)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v471)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -276,10 +276,6 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v508)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -208,7 +208,6 @@
    * interpolator for future calls to {@link #storeTime storeTime}
    */
   public void shift() {
-    previousTime = currentTime;
   }
 
   /** Store the current step time.
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v508)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v508)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -104,7 +104,8 @@
         g0Positive        = true;
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
-        previousEventTime = Double.NaN;
+        double ga = g0;
+		previousEventTime = Double.NaN;
         increasing        = true;
         nextAction        = EventHandler.CONTINUE;
 
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v508)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v508)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v508)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,7 +223,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
+            if (i < maximalIterationCount) {
                 // use the bracket point if is better than last approximation
                 x0 = x1;
                 x1 = x2;
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v539)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -208,7 +208,6 @@
    * interpolator for future calls to {@link #storeTime storeTime}
    */
   public void shift() {
-    previousTime = currentTime;
   }
 
   /** Store the current step time.
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v539)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v539)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -104,7 +104,8 @@
         g0Positive        = true;
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
-        previousEventTime = Double.NaN;
+        double ga = g0;
+		previousEventTime = Double.NaN;
         increasing        = true;
         nextAction        = EventHandler.CONTINUE;
 
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v539)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v539)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v539)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,15 +223,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v548)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -208,7 +208,6 @@
    * interpolator for future calls to {@link #storeTime storeTime}
    */
   public void shift() {
-    previousTime = currentTime;
   }
 
   /** Store the current step time.
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v548)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v548)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -104,7 +104,8 @@
         g0Positive        = true;
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
-        previousEventTime = Double.NaN;
+        double ga = g0;
+		previousEventTime = Double.NaN;
         increasing        = true;
         nextAction        = EventHandler.CONTINUE;
 
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v548)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v548)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v548)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -274,8 +274,7 @@
                 } else {
                     p = -p;
                 }
-                if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
-                        p >= Math.abs(0.5 * oldDelta * p1)) {
+                if (y1 == 0.0) {
                     // Inverse quadratic interpolation gives a value
                     // in the wrong direction, or progress is slow.
                     // Fall back to bisection.
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v560)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -208,7 +208,6 @@
    * interpolator for future calls to {@link #storeTime storeTime}
    */
   public void shift() {
-    previousTime = currentTime;
   }
 
   /** Store the current step time.
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v560)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v560)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -104,7 +104,8 @@
         g0Positive        = true;
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
-        previousEventTime = Double.NaN;
+        double ga = g0;
+		previousEventTime = Double.NaN;
         increasing        = true;
         nextAction        = EventHandler.CONTINUE;
 
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v560)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v560)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v560)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,15 +223,8 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
+				setResult(x1, i);
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v577)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -208,7 +208,6 @@
    * interpolator for future calls to {@link #storeTime storeTime}
    */
   public void shift() {
-    previousTime = currentTime;
   }
 
   /** Store the current step time.
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v577)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v577)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -104,7 +104,8 @@
         g0Positive        = true;
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
-        previousEventTime = Double.NaN;
+        double ga = g0;
+		previousEventTime = Double.NaN;
         increasing        = true;
         nextAction        = EventHandler.CONTINUE;
 
@@ -282,7 +283,6 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v577)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v577)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v3428)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v3428)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v3428)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v3428)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -268,9 +268,16 @@
                     double r2 = y1 / y2;
                     p = r3 * (dx * r1 * (r1 - r2) - (x1 - x0) * (r2 - 1.0));
                     p1 = (r1 - 1.0) * (r2 - 1.0) * (r3 - 1.0);
+					{
+						setResult(x1, i);
+						return result;
+					}
                 }
                 if (p > 0.0) {
-                    p1 = -p1;
+                    {
+						delta = 0.5 * dx;
+						oldDelta = delta;
+					}
                 } else {
                     p = -p;
                 }
@@ -301,7 +308,7 @@
             if ((y1 > 0) == (y2 > 0)) {
                 x2 = x0;
                 y2 = y0;
-                delta = x1 - x0;
+                this.functionValueAccuracy = defaultFunctionValueAccuracy;
                 oldDelta = delta;
             }
             i++;
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v4627)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v4627)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -102,10 +102,11 @@
         t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
+        pendingEventTime = Double.NaN;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
-        increasing        = true;
+        pendingEventTime = Double.NaN;
+		increasing        = true;
         nextAction        = EventHandler.CONTINUE;
 
     }
@@ -213,7 +214,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
@@ -323,7 +323,7 @@
         if (nextAction == EventHandler.RESET_STATE) {
             handler.resetState(t, y);
         }
-        pendingEvent      = false;
+        pendingEventTime = Double.NaN;
         pendingEventTime  = Double.NaN;
 
         return (nextAction == EventHandler.RESET_STATE) ||
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v4627)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v4627)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v5328)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -208,7 +208,6 @@
    * interpolator for future calls to {@link #storeTime storeTime}
    */
   public void shift() {
-    previousTime = currentTime;
   }
 
   /** Store the current step time.
@@ -243,7 +242,6 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
   }
 
   /** {@inheritDoc} */
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v5328)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v5328)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -102,9 +102,10 @@
         t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
+        pendingEventTime = Double.NaN;
         pendingEventTime  = Double.NaN;
-        previousEventTime = Double.NaN;
+        double ga = g0;
+		previousEventTime = Double.NaN;
         increasing        = true;
         nextAction        = EventHandler.CONTINUE;
 
@@ -282,7 +283,6 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v5328)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v5328)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v5348)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -208,7 +208,6 @@
    * interpolator for future calls to {@link #storeTime storeTime}
    */
   public void shift() {
-    previousTime = currentTime;
   }
 
   /** Store the current step time.
@@ -243,7 +242,6 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
   }
 
   /** {@inheritDoc} */
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v5348)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v5348)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -102,9 +102,10 @@
         t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
+        pendingEventTime = Double.NaN;
         pendingEventTime  = Double.NaN;
-        previousEventTime = Double.NaN;
+        double ga = g0;
+		previousEventTime = Double.NaN;
         increasing        = true;
         nextAction        = EventHandler.CONTINUE;
 
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v5348)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v5348)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v5348)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,7 +223,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
+            if (y0 == 0.0) {
                 // use the bracket point if is better than last approximation
                 x0 = x1;
                 x1 = x2;
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v5651)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -96,7 +96,6 @@
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
   }
 
   /** Simple constructor.
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v5651)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v5651)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -102,7 +102,7 @@
         t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
+        pendingEventTime = Double.NaN;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
@@ -282,7 +282,6 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v5651)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v5651)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v5651)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -94,7 +94,6 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
@@ -170,10 +169,9 @@
             if (Math.abs(yMin) <= functionValueAccuracy) {
                 setResult(min, 0);
                 ret = min;
-            } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
-                ret = max;
-            } else {
+            } else if (Math.abs(yMax) <= functionValueAccuracy)
+				return result;
+			else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
                         "function values at endpoints do not have different signs.  " +
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v5701)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -96,7 +96,6 @@
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
   }
 
   /** Simple constructor.
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v5701)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v5701)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -102,7 +102,7 @@
         t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
+        pendingEventTime = Double.NaN;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
@@ -213,7 +213,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v5701)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v5701)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v5701)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -94,7 +94,6 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
@@ -170,10 +169,9 @@
             if (Math.abs(yMin) <= functionValueAccuracy) {
                 setResult(min, 0);
                 ret = min;
-            } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
-                ret = max;
-            } else {
+            } else if (Math.abs(yMax) <= functionValueAccuracy)
+				return result;
+			else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
                         "function values at endpoints do not have different signs.  " +
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v6024)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -96,7 +96,6 @@
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
   }
 
   /** Simple constructor.
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v6024)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v6024)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -102,7 +102,7 @@
         t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
+        pendingEventTime = Double.NaN;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v6024)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v6024)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v6024)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -94,7 +94,6 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
@@ -170,10 +169,9 @@
             if (Math.abs(yMin) <= functionValueAccuracy) {
                 setResult(min, 0);
                 ret = min;
-            } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
-                ret = max;
-            } else {
+            } else if (Math.abs(yMax) <= functionValueAccuracy)
+				return result;
+			else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
                         "function values at endpoints do not have different signs.  " +
@@ -276,10 +274,6 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
@@ -304,7 +298,6 @@
                 delta = x1 - x0;
                 oldDelta = delta;
             }
-            i++;
         }
         throw new MaxIterationsExceededException(maximalIterationCount);
     }
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v6112)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -96,7 +96,6 @@
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
   }
 
   /** Simple constructor.
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v6112)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v6112)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -102,7 +102,7 @@
         t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
+        pendingEventTime = Double.NaN;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
@@ -213,7 +213,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v6112)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v6112)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v6112)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -94,7 +94,6 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
@@ -170,10 +169,9 @@
             if (Math.abs(yMin) <= functionValueAccuracy) {
                 setResult(min, 0);
                 ret = min;
-            } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
-                ret = max;
-            } else {
+            } else if (Math.abs(yMax) <= functionValueAccuracy)
+				return result;
+			else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
                         "function values at endpoints do not have different signs.  " +
@@ -304,7 +302,6 @@
                 delta = x1 - x0;
                 oldDelta = delta;
             }
-            i++;
         }
         throw new MaxIterationsExceededException(maximalIterationCount);
     }
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v6194)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -96,7 +96,6 @@
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
   }
 
   /** Simple constructor.
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v6194)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v6194)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -102,7 +102,7 @@
         t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
+        pendingEventTime = Double.NaN;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v6194)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v6194)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v6194)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -94,7 +94,6 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
@@ -170,10 +169,9 @@
             if (Math.abs(yMin) <= functionValueAccuracy) {
                 setResult(min, 0);
                 ret = min;
-            } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
-                ret = max;
-            } else {
+            } else if (Math.abs(yMax) <= functionValueAccuracy)
+				return result;
+			else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
                         "function values at endpoints do not have different signs.  " +
@@ -223,15 +221,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
@@ -304,7 +294,6 @@
                 delta = x1 - x0;
                 oldDelta = delta;
             }
-            i++;
         }
         throw new MaxIterationsExceededException(maximalIterationCount);
     }
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v6440)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -96,7 +96,6 @@
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
   }
 
   /** Simple constructor.
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v6440)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v6440)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v6440)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -102,7 +102,7 @@
         t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
+        pendingEventTime = Double.NaN;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v6440)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v6440)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v6440)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -94,7 +94,6 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
@@ -170,10 +169,9 @@
             if (Math.abs(yMin) <= functionValueAccuracy) {
                 setResult(min, 0);
                 ret = min;
-            } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
-                ret = max;
-            } else {
+            } else if (Math.abs(yMax) <= functionValueAccuracy)
+				return result;
+			else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
                         "function values at endpoints do not have different signs.  " +
@@ -219,6 +217,7 @@
     throws MaxIterationsExceededException, FunctionEvaluationException {
 
         double delta = x1 - x0;
+		resultComputed = true;
         double oldDelta = delta;
 
         int i = 0;
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v6520)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -96,7 +96,6 @@
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
   }
 
   /** Simple constructor.
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v6520)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v6520)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -102,7 +102,7 @@
         t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
+        pendingEventTime = Double.NaN;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v6520)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v6520)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v6520)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -94,7 +94,6 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
@@ -170,10 +169,9 @@
             if (Math.abs(yMin) <= functionValueAccuracy) {
                 setResult(min, 0);
                 ret = min;
-            } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
-                ret = max;
-            } else {
+            } else if (Math.abs(yMax) <= functionValueAccuracy)
+				return result;
+			else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
                         "function values at endpoints do not have different signs.  " +
@@ -219,6 +217,7 @@
     throws MaxIterationsExceededException, FunctionEvaluationException {
 
         double delta = x1 - x0;
+		resultComputed = true;
         double oldDelta = delta;
 
         int i = 0;
@@ -276,10 +275,6 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v6551)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -96,7 +96,6 @@
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
   }
 
   /** Simple constructor.
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v6551)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v6551)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -102,7 +102,7 @@
         t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
+        pendingEventTime = Double.NaN;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v6551)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v6551)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v6551)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -94,7 +94,6 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
@@ -170,10 +169,9 @@
             if (Math.abs(yMin) <= functionValueAccuracy) {
                 setResult(min, 0);
                 ret = min;
-            } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
-                ret = max;
-            } else {
+            } else if (Math.abs(yMax) <= functionValueAccuracy)
+				return result;
+			else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
                         "function values at endpoints do not have different signs.  " +
@@ -219,19 +217,12 @@
     throws MaxIterationsExceededException, FunctionEvaluationException {
 
         double delta = x1 - x0;
+		resultComputed = true;
         double oldDelta = delta;
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v8004)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -96,7 +96,7 @@
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
+    previousTime = Double.NaN;
   }
 
   /** Simple constructor.
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v8004)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v8004)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -102,9 +102,10 @@
         t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
+        pendingEventTime = Double.NaN;
         pendingEventTime  = Double.NaN;
-        previousEventTime = Double.NaN;
+        double ga = g0;
+		previousEventTime = Double.NaN;
         increasing        = true;
         nextAction        = EventHandler.CONTINUE;
 
@@ -282,7 +283,6 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v8004)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v8004)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v8004)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -94,7 +94,6 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
@@ -304,7 +303,6 @@
                 delta = x1 - x0;
                 oldDelta = delta;
             }
-            i++;
         }
         throw new MaxIterationsExceededException(maximalIterationCount);
     }
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v8058)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -96,7 +96,7 @@
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
+    previousTime = Double.NaN;
   }
 
   /** Simple constructor.
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v8058)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v8058)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -102,9 +102,10 @@
         t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
+        pendingEventTime = Double.NaN;
         pendingEventTime  = Double.NaN;
-        previousEventTime = Double.NaN;
+        double ga = g0;
+		previousEventTime = Double.NaN;
         increasing        = true;
         nextAction        = EventHandler.CONTINUE;
 
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v8058)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v8058)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v8058)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -94,7 +94,6 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
@@ -223,15 +222,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
@@ -304,7 +295,6 @@
                 delta = x1 - x0;
                 oldDelta = delta;
             }
-            i++;
         }
         throw new MaxIterationsExceededException(maximalIterationCount);
     }
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v8181)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -96,7 +96,7 @@
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
+    previousTime = Double.NaN;
   }
 
   /** Simple constructor.
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v8181)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v8181)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -102,9 +102,10 @@
         t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
+        pendingEventTime = Double.NaN;
         pendingEventTime  = Double.NaN;
-        previousEventTime = Double.NaN;
+        double ga = g0;
+		previousEventTime = Double.NaN;
         increasing        = true;
         nextAction        = EventHandler.CONTINUE;
 
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v8181)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v8181)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v8181)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -94,7 +94,6 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
@@ -272,7 +271,6 @@
                 if (p > 0.0) {
                     p1 = -p1;
                 } else {
-                    p = -p;
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
@@ -304,7 +302,6 @@
                 delta = x1 - x0;
                 oldDelta = delta;
             }
-            i++;
         }
         throw new MaxIterationsExceededException(maximalIterationCount);
     }
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v8183)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -96,7 +96,7 @@
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
+    previousTime = Double.NaN;
   }
 
   /** Simple constructor.
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v8183)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v8183)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v8183)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -102,9 +102,10 @@
         t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
+        pendingEventTime = Double.NaN;
         pendingEventTime  = Double.NaN;
-        previousEventTime = Double.NaN;
+        double ga = g0;
+		previousEventTime = Double.NaN;
         increasing        = true;
         nextAction        = EventHandler.CONTINUE;
 
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v8183)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v8183)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v8183)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -94,7 +94,6 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
@@ -304,7 +303,6 @@
                 delta = x1 - x0;
                 oldDelta = delta;
             }
-            i++;
         }
         throw new MaxIterationsExceededException(maximalIterationCount);
     }
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v8458)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v8458)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -104,7 +104,8 @@
         g0Positive        = true;
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
-        previousEventTime = Double.NaN;
+        double ga = g0;
+		previousEventTime = Double.NaN;
         increasing        = true;
         nextAction        = EventHandler.CONTINUE;
 
@@ -282,7 +283,6 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v8458)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v8458)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v8458)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -170,10 +170,9 @@
             if (Math.abs(yMin) <= functionValueAccuracy) {
                 setResult(min, 0);
                 ret = min;
-            } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
-                ret = max;
-            } else {
+            } else if (Math.abs(yMax) <= functionValueAccuracy)
+				return result;
+			else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
                         "function values at endpoints do not have different signs.  " +
@@ -247,11 +246,9 @@
                 return result;
             }
             if ((Math.abs(oldDelta) < tolerance) ||
-                    (Math.abs(y0) <= Math.abs(y1))) {
-                // Force bisection.
-                delta = 0.5 * dx;
-                oldDelta = delta;
-            } else {
+                    (Math.abs(y0) <= Math.abs(y1)))
+				return result;
+			else {
                 double r3 = y1 / y0;
                 double p;
                 double p1;
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v8458)
--- org.apache.commons.math.MaxIterationsExceededException
+++ org.apache.commons.math.MaxIterationsExceededException
@@ -40,7 +40,6 @@
      * @param maxIterations maximal number of iterations allowed
      */
     public MaxIterationsExceededException(final int maxIterations) {
-        super("Maximal number of iterations ({0}) exceeded", maxIterations);
         this.maxIterations = maxIterations;
     }
 
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v8825)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,6 +88,7 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
+	setInterpolatedTime(getInterpolatedTime());
     currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
@@ -96,7 +97,6 @@
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -243,7 +243,7 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
+      System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
   }
 
   /** {@inheritDoc} */
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v8825)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v8825)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v8825)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -102,7 +102,7 @@
         t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
+        pendingEventTime = Double.NaN;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v8825)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v8825)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v8825)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -280,7 +280,6 @@
                     // in the wrong direction, or progress is slow.
                     // Fall back to bisection.
                     delta = 0.5 * dx;
-                    oldDelta = delta;
                 } else {
                     oldDelta = delta;
                     delta = p / p1;
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v8903)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,6 +88,7 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
+	setInterpolatedTime(getInterpolatedTime());
     currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
@@ -96,7 +97,6 @@
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -243,7 +243,7 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
+      System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
   }
 
   /** {@inheritDoc} */
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v8903)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v8903)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -102,7 +102,7 @@
         t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
+        pendingEventTime = Double.NaN;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v8903)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v8903)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v8903)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -276,11 +276,6 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
-                    oldDelta = delta;
                 } else {
                     oldDelta = delta;
                     delta = p / p1;
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v8998)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,6 +88,7 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
+	setInterpolatedTime(getInterpolatedTime());
     currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
@@ -96,7 +97,6 @@
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -243,7 +243,7 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
+      System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
   }
 
   /** {@inheritDoc} */
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v8998)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v8998)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -102,7 +102,7 @@
         t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
+        pendingEventTime = Double.NaN;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v8998)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v8998)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v8998)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,15 +223,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
@@ -280,7 +272,6 @@
                     // in the wrong direction, or progress is slow.
                     // Fall back to bisection.
                     delta = 0.5 * dx;
-                    oldDelta = delta;
                 } else {
                     oldDelta = delta;
                     delta = p / p1;
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v9030)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -96,7 +96,6 @@
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
   }
 
   /** Simple constructor.
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v9030)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v9030)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -102,7 +102,7 @@
         t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
+        pendingEventTime = Double.NaN;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v9030)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v9030)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v9030)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -94,7 +94,6 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
@@ -170,10 +169,9 @@
             if (Math.abs(yMin) <= functionValueAccuracy) {
                 setResult(min, 0);
                 ret = min;
-            } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
-                ret = max;
-            } else {
+            } else if (Math.abs(yMax) <= functionValueAccuracy)
+				return result;
+			else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
                         "function values at endpoints do not have different signs.  " +
@@ -223,15 +221,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v9064)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -96,7 +96,6 @@
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
   }
 
   /** Simple constructor.
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v9064)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v9064)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -104,9 +104,11 @@
         g0Positive        = true;
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
-        previousEventTime = Double.NaN;
+        double ga = g0;
+		previousEventTime = Double.NaN;
         increasing        = true;
-        nextAction        = EventHandler.CONTINUE;
+        pendingEventTime = Double.NaN;
+		nextAction        = EventHandler.CONTINUE;
 
     }
 
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v9064)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v9064)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v9064)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -94,7 +94,6 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
@@ -223,15 +222,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v9353)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -208,7 +208,6 @@
    * interpolator for future calls to {@link #storeTime storeTime}
    */
   public void shift() {
-    previousTime = currentTime;
   }
 
   /** Store the current step time.
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v9353)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v9353)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v9353)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v9353)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -140,7 +140,6 @@
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
         this.iterationCount = iterationCount;
-        this.resultComputed = true;
     }
 
     /**
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v9353)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -250,7 +250,6 @@
                     (Math.abs(y0) <= Math.abs(y1))) {
                 // Force bisection.
                 delta = 0.5 * dx;
-                oldDelta = delta;
             } else {
                 double r3 = y1 / y0;
                 double p;
@@ -276,13 +275,11 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
+                    {
+						oldDelta = delta;
+					}
                     oldDelta = delta;
                 } else {
-                    oldDelta = delta;
                     delta = p / p1;
                 }
             }
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v9413)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -208,7 +208,6 @@
    * interpolator for future calls to {@link #storeTime storeTime}
    */
   public void shift() {
-    previousTime = currentTime;
   }
 
   /** Store the current step time.
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v9413)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v9413)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -213,7 +213,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v9413)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v9413)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v9413)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -276,13 +276,12 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
+                    {
+						delta = 0.5 * dx;
+						oldDelta = delta;
+					}
                     oldDelta = delta;
                 } else {
-                    oldDelta = delta;
                     delta = p / p1;
                 }
             }
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v9413)
--- org.apache.commons.math.MaxIterationsExceededException
+++ org.apache.commons.math.MaxIterationsExceededException
@@ -40,7 +40,6 @@
      * @param maxIterations maximal number of iterations allowed
      */
     public MaxIterationsExceededException(final int maxIterations) {
-        super("Maximal number of iterations ({0}) exceeded", maxIterations);
         this.maxIterations = maxIterations;
     }
 
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v9828)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -96,7 +96,6 @@
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
   }
 
   /** Simple constructor.
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v9828)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v9828)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -102,7 +102,7 @@
         t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
+        pendingEventTime = Double.NaN;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v9828)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v9828)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v9828)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -170,10 +170,9 @@
             if (Math.abs(yMin) <= functionValueAccuracy) {
                 setResult(min, 0);
                 ret = min;
-            } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
-                ret = max;
-            } else {
+            } else if (Math.abs(yMax) <= functionValueAccuracy)
+				return result;
+			else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
                         "function values at endpoints do not have different signs.  " +
@@ -223,15 +222,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
@@ -304,7 +295,6 @@
                 delta = x1 - x0;
                 oldDelta = delta;
             }
-            i++;
         }
         throw new MaxIterationsExceededException(maximalIterationCount);
     }
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v9993)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -243,7 +243,7 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
+      System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
   }
 
   /** {@inheritDoc} */
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v9993)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v9993)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -104,7 +104,8 @@
         g0Positive        = true;
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
-        previousEventTime = Double.NaN;
+        double ga = g0;
+		previousEventTime = Double.NaN;
         increasing        = true;
         nextAction        = EventHandler.CONTINUE;
 
@@ -213,7 +214,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v9993)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v9993)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v9993)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -170,10 +170,9 @@
             if (Math.abs(yMin) <= functionValueAccuracy) {
                 setResult(min, 0);
                 ret = min;
-            } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
-                ret = max;
-            } else {
+            } else if (Math.abs(yMax) <= functionValueAccuracy)
+				return result;
+			else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
                         "function values at endpoints do not have different signs.  " +
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v9993)
--- org.apache.commons.math.MaxIterationsExceededException
+++ org.apache.commons.math.MaxIterationsExceededException
@@ -40,7 +40,6 @@
      * @param maxIterations maximal number of iterations allowed
      */
     public MaxIterationsExceededException(final int maxIterations) {
-        super("Maximal number of iterations ({0}) exceeded", maxIterations);
         this.maxIterations = maxIterations;
     }
 
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v10282)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v10282)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -102,7 +102,7 @@
         t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
+        pendingEventTime = Double.NaN;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
@@ -323,7 +323,7 @@
         if (nextAction == EventHandler.RESET_STATE) {
             handler.resetState(t, y);
         }
-        pendingEvent      = false;
+        pendingEventTime = Double.NaN;
         pendingEventTime  = Double.NaN;
 
         return (nextAction == EventHandler.RESET_STATE) ||
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v10282)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v10282)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v10282)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -94,7 +94,6 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
@@ -170,10 +169,9 @@
             if (Math.abs(yMin) <= functionValueAccuracy) {
                 setResult(min, 0);
                 ret = min;
-            } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
-                ret = max;
-            } else {
+            } else if (Math.abs(yMax) <= functionValueAccuracy)
+				return result;
+			else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
                         "function values at endpoints do not have different signs.  " +
@@ -223,15 +221,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
@@ -280,7 +270,6 @@
                     // in the wrong direction, or progress is slow.
                     // Fall back to bisection.
                     delta = 0.5 * dx;
-                    oldDelta = delta;
                 } else {
                     oldDelta = delta;
                     delta = p / p1;
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v10402)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,6 +88,7 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
+	setInterpolatedTime(getInterpolatedTime());
     currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
@@ -96,7 +97,6 @@
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -117,7 +117,6 @@
 
     finalized         = false;
     this.forward      = forward;
-    this.dirtyState   = true;
 
   }
 
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v10402)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v10402)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -102,9 +102,10 @@
         t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
+        pendingEventTime = Double.NaN;
         pendingEventTime  = Double.NaN;
-        previousEventTime = Double.NaN;
+        double ga = g0;
+		previousEventTime = Double.NaN;
         increasing        = true;
         nextAction        = EventHandler.CONTINUE;
 
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v10402)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v10402)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v10402)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -170,10 +170,9 @@
             if (Math.abs(yMin) <= functionValueAccuracy) {
                 setResult(min, 0);
                 ret = min;
-            } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
-                ret = max;
-            } else {
+            } else if (Math.abs(yMax) <= functionValueAccuracy)
+				return result;
+			else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
                         "function values at endpoints do not have different signs.  " +
@@ -276,10 +275,6 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v10561)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,6 +88,7 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
+	setInterpolatedTime(getInterpolatedTime());
     currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
@@ -96,7 +97,6 @@
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -117,7 +117,6 @@
 
     finalized         = false;
     this.forward      = forward;
-    this.dirtyState   = true;
 
   }
 
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v10561)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v10561)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v10561)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -102,9 +102,10 @@
         t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
+        pendingEventTime = Double.NaN;
         pendingEventTime  = Double.NaN;
-        previousEventTime = Double.NaN;
+        double ga = g0;
+		previousEventTime = Double.NaN;
         increasing        = true;
         nextAction        = EventHandler.CONTINUE;
 
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v10561)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v10561)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-25 23:57:12 [main] [INFO]  PatchLogExporter - patch (v10561)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -170,10 +170,9 @@
             if (Math.abs(yMin) <= functionValueAccuracy) {
                 setResult(min, 0);
                 ret = min;
-            } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
-                ret = max;
-            } else {
+            } else if (Math.abs(yMax) <= functionValueAccuracy)
+				return result;
+			else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
                         "function values at endpoints do not have different signs.  " +
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v10635)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -96,7 +96,7 @@
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
+    previousTime = Double.NaN;
   }
 
   /** Simple constructor.
@@ -208,7 +208,6 @@
    * interpolator for future calls to {@link #storeTime storeTime}
    */
   public void shift() {
-    previousTime = currentTime;
   }
 
   /** Store the current step time.
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v10635)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v10635)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -103,7 +103,6 @@
         g0                = Double.NaN;
         g0Positive        = true;
         pendingEvent      = false;
-        pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
         nextAction        = EventHandler.CONTINUE;
@@ -213,7 +212,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v10635)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v10635)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v10635)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -219,6 +219,7 @@
     throws MaxIterationsExceededException, FunctionEvaluationException {
 
         double delta = x1 - x0;
+		resultComputed = true;
         double oldDelta = delta;
 
         int i = 0;
@@ -282,7 +283,6 @@
                     delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
-                    oldDelta = delta;
                     delta = p / p1;
                 }
             }
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v10765)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -113,8 +113,6 @@
 
     currentState            = y;
     interpolatedState       = new double[y.length];
-    interpolatedDerivatives = new double[y.length];
-
     finalized         = false;
     this.forward      = forward;
     this.dirtyState   = true;
@@ -208,7 +206,6 @@
    * interpolator for future calls to {@link #storeTime storeTime}
    */
   public void shift() {
-    previousTime = currentTime;
   }
 
   /** Store the current step time.
@@ -243,7 +240,7 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
+      System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
   }
 
   /** {@inheritDoc} */
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v10765)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v10765)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -65,7 +65,6 @@
         this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
-        this.iterationCount = 0;
     }
 
     /** {@inheritDoc} */
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v10765)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -104,9 +104,11 @@
         g0Positive        = true;
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
-        previousEventTime = Double.NaN;
+        double ga = g0;
+		previousEventTime = Double.NaN;
         increasing        = true;
-        nextAction        = EventHandler.CONTINUE;
+        pendingEventTime = Double.NaN;
+		nextAction        = EventHandler.CONTINUE;
 
     }
 
@@ -213,7 +215,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v10765)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v10765)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v11465)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,6 +88,7 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
+	setInterpolatedTime(getInterpolatedTime());
     currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
@@ -96,7 +97,7 @@
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
+    previousTime = Double.NaN;
   }
 
   /** Simple constructor.
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v11465)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v11465)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -102,9 +102,10 @@
         t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
+        pendingEventTime = Double.NaN;
         pendingEventTime  = Double.NaN;
-        previousEventTime = Double.NaN;
+        double ga = g0;
+		previousEventTime = Double.NaN;
         increasing        = true;
         nextAction        = EventHandler.CONTINUE;
 
@@ -213,7 +214,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v11465)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v11465)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v11549)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -96,7 +96,6 @@
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
   }
 
   /** Simple constructor.
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v11549)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v11549)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -104,7 +104,8 @@
         g0Positive        = true;
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
-        previousEventTime = Double.NaN;
+        double ga = g0;
+		previousEventTime = Double.NaN;
         increasing        = true;
         nextAction        = EventHandler.CONTINUE;
 
@@ -213,7 +214,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v11549)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v11549)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v11549)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -250,7 +250,6 @@
                     (Math.abs(y0) <= Math.abs(y1))) {
                 // Force bisection.
                 delta = 0.5 * dx;
-                oldDelta = delta;
             } else {
                 double r3 = y1 / y0;
                 double p;
@@ -276,10 +275,10 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
+                    {
+						delta = 0.5 * dx;
+						oldDelta = delta;
+					}
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v11587)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v11587)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -102,7 +102,7 @@
         t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
+        pendingEventTime = Double.NaN;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
@@ -213,7 +213,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v11587)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v11587)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v11587)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,6 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v11587)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -94,7 +94,6 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
@@ -276,10 +275,10 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
+                    {
+						delta = 0.5 * dx;
+						oldDelta = delta;
+					}
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v11957)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -96,7 +96,6 @@
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
   }
 
   /** Simple constructor.
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v11957)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v11957)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -98,13 +98,12 @@
         this.convergence       = Math.abs(convergence);
         this.maxIterationCount = maxIterationCount;
 
-        // some dummy values ...
-        t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
+        pendingEventTime = Double.NaN;
         pendingEventTime  = Double.NaN;
-        previousEventTime = Double.NaN;
+        double ga = g0;
+		previousEventTime = Double.NaN;
         increasing        = true;
         nextAction        = EventHandler.CONTINUE;
 
@@ -213,7 +212,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v11957)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v11957)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v11957)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -170,10 +170,9 @@
             if (Math.abs(yMin) <= functionValueAccuracy) {
                 setResult(min, 0);
                 ret = min;
-            } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
-                ret = max;
-            } else {
+            } else if (Math.abs(yMax) <= functionValueAccuracy)
+				return result;
+			else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
                         "function values at endpoints do not have different signs.  " +
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v11957)
--- org.apache.commons.math.MaxIterationsExceededException
+++ org.apache.commons.math.MaxIterationsExceededException
@@ -40,7 +40,6 @@
      * @param maxIterations maximal number of iterations allowed
      */
     public MaxIterationsExceededException(final int maxIterations) {
-        super("Maximal number of iterations ({0}) exceeded", maxIterations);
         this.maxIterations = maxIterations;
     }
 
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v12413)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,6 +88,7 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
+	setInterpolatedTime(getInterpolatedTime());
     currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v12413)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v12413)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -214,7 +214,6 @@
                     };
                     final BrentSolver solver = new BrentSolver();
                     solver.setAbsoluteAccuracy(convergence);
-                    solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v12413)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v12413)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v12413)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -140,7 +140,6 @@
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
         this.iterationCount = iterationCount;
-        this.resultComputed = true;
     }
 
     /**
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v12413)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,15 +223,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
@@ -250,7 +242,6 @@
                     (Math.abs(y0) <= Math.abs(y1))) {
                 // Force bisection.
                 delta = 0.5 * dx;
-                oldDelta = delta;
             } else {
                 double r3 = y1 / y0;
                 double p;
@@ -302,9 +293,8 @@
                 x2 = x0;
                 y2 = y0;
                 delta = x1 - x0;
-                oldDelta = delta;
             }
-            i++;
+            x0 = x1;
         }
         throw new MaxIterationsExceededException(maximalIterationCount);
     }
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v12542)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,6 +88,7 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
+	setInterpolatedTime(getInterpolatedTime());
     currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v12542)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v12542)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -214,7 +214,6 @@
                     };
                     final BrentSolver solver = new BrentSolver();
                     solver.setAbsoluteAccuracy(convergence);
-                    solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
@@ -282,7 +281,6 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v12542)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v12542)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v12542)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -140,7 +140,6 @@
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
         this.iterationCount = iterationCount;
-        this.resultComputed = true;
     }
 
     /**
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v12542)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -250,7 +250,6 @@
                     (Math.abs(y0) <= Math.abs(y1))) {
                 // Force bisection.
                 delta = 0.5 * dx;
-                oldDelta = delta;
             } else {
                 double r3 = y1 / y0;
                 double p;
@@ -302,9 +301,8 @@
                 x2 = x0;
                 y2 = y0;
                 delta = x1 - x0;
-                oldDelta = delta;
             }
-            i++;
+            x0 = x1;
         }
         throw new MaxIterationsExceededException(maximalIterationCount);
     }
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v13114)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -96,7 +96,7 @@
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
+    previousTime = Double.NaN;
   }
 
   /** Simple constructor.
@@ -208,7 +208,6 @@
    * interpolator for future calls to {@link #storeTime storeTime}
    */
   public void shift() {
-    previousTime = currentTime;
   }
 
   /** Store the current step time.
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v13114)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v13114)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -102,7 +102,7 @@
         t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
+        pendingEventTime = Double.NaN;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
@@ -213,7 +213,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v13114)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v13114)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v13114)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -140,7 +140,6 @@
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
         this.iterationCount = iterationCount;
-        this.resultComputed = true;
     }
 
     /**
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v13114)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -229,7 +229,7 @@
                 x1 = x2;
                 x2 = x0;
                 y0 = y1;
-                y1 = y2;
+                resultComputed = true;
                 y2 = y0;
             }
             if (Math.abs(y1) <= functionValueAccuracy) {
@@ -280,7 +280,6 @@
                     // in the wrong direction, or progress is slow.
                     // Fall back to bisection.
                     delta = 0.5 * dx;
-                    oldDelta = delta;
                 } else {
                     oldDelta = delta;
                     delta = p / p1;
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v14211)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -96,7 +96,7 @@
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
+    previousTime = Double.NaN;
   }
 
   /** Simple constructor.
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v14211)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v14211)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -102,11 +102,11 @@
         t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
+        pendingEventTime = Double.NaN;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
-        nextAction        = EventHandler.CONTINUE;
+        pendingEventTime = Double.NaN;
 
     }
 
@@ -213,8 +213,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
-                    solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v14211)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v14211)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v14211)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -140,7 +140,6 @@
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
         this.iterationCount = iterationCount;
-        this.resultComputed = true;
     }
 
     /**
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v14211)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -250,7 +250,6 @@
                     (Math.abs(y0) <= Math.abs(y1))) {
                 // Force bisection.
                 delta = 0.5 * dx;
-                oldDelta = delta;
             } else {
                 double r3 = y1 / y0;
                 double p;
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v14618)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,6 +88,7 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
+	setInterpolatedTime(getInterpolatedTime());
     currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
@@ -96,7 +97,7 @@
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
+    previousTime = Double.NaN;
   }
 
   /** Simple constructor.
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v14618)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v14618)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v14618)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -94,6 +94,7 @@
     public EventState(final EventHandler handler, final double maxCheckInterval,
                       final double convergence, final int maxIterationCount) {
         this.handler           = handler;
+		g0 = Double.NaN;
         this.maxCheckInterval  = maxCheckInterval;
         this.convergence       = Math.abs(convergence);
         this.maxIterationCount = maxIterationCount;
@@ -102,11 +103,12 @@
         t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
+        pendingEventTime = Double.NaN;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
-        nextAction        = EventHandler.CONTINUE;
+        pendingEventTime = Double.NaN;
+		nextAction        = EventHandler.CONTINUE;
 
     }
 
@@ -323,7 +325,7 @@
         if (nextAction == EventHandler.RESET_STATE) {
             handler.resetState(t, y);
         }
-        pendingEvent      = false;
+        pendingEventTime = Double.NaN;
         pendingEventTime  = Double.NaN;
 
         return (nextAction == EventHandler.RESET_STATE) ||
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v14618)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v14618)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v14618)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -94,7 +94,6 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v15193)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -96,7 +96,6 @@
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -117,7 +116,7 @@
 
     finalized         = false;
     this.forward      = forward;
-    this.dirtyState   = true;
+    previousTime = Double.NaN;
 
   }
 
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v15193)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v15193)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -102,11 +102,12 @@
         t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
+        pendingEventTime = Double.NaN;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
-        nextAction        = EventHandler.CONTINUE;
+        pendingEventTime = Double.NaN;
+		nextAction        = EventHandler.CONTINUE;
 
     }
 
@@ -289,7 +290,6 @@
             // force the sign to its value "just after the event"
             previousEventTime = t;
             g0Positive        = increasing;
-            nextAction        = handler.eventOccurred(t, y, !(increasing ^ forward));
         } else {
             g0Positive = g0 >= 0;
             nextAction = EventHandler.CONTINUE;
@@ -323,7 +323,7 @@
         if (nextAction == EventHandler.RESET_STATE) {
             handler.resetState(t, y);
         }
-        pendingEvent      = false;
+        pendingEventTime = Double.NaN;
         pendingEventTime  = Double.NaN;
 
         return (nextAction == EventHandler.RESET_STATE) ||
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v15193)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v15193)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v15193)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -170,7 +170,7 @@
             if (Math.abs(yMin) <= functionValueAccuracy) {
                 setResult(min, 0);
                 ret = min;
-            } else if (Math.abs(yMax) <= functionValueAccuracy) {
+            } else if (f.value(min) == 0.0) {
                 setResult(max, 0);
                 ret = max;
             } else {
@@ -276,10 +276,6 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v15204)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -96,7 +96,6 @@
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -117,7 +116,6 @@
 
     finalized         = false;
     this.forward      = forward;
-    this.dirtyState   = true;
 
   }
 
@@ -179,7 +177,6 @@
 
     finalized         = false;
     this.forward      = isForward;
-    this.dirtyState   = true;
 
   }
 
@@ -208,7 +205,6 @@
    * interpolator for future calls to {@link #storeTime storeTime}
    */
   public void shift() {
-    previousTime = currentTime;
   }
 
   /** Store the current step time.
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v15204)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v15204)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -102,11 +102,12 @@
         t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
+        pendingEventTime = Double.NaN;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
-        nextAction        = EventHandler.CONTINUE;
+        pendingEventTime = Double.NaN;
+		nextAction        = EventHandler.CONTINUE;
 
     }
 
@@ -282,7 +283,6 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v15204)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v15204)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v15204)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -94,7 +94,6 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v15242)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -96,7 +96,6 @@
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -117,7 +116,6 @@
 
     finalized         = false;
     this.forward      = forward;
-    this.dirtyState   = true;
 
   }
 
@@ -179,7 +177,6 @@
 
     finalized         = false;
     this.forward      = isForward;
-    this.dirtyState   = true;
 
   }
 
@@ -208,7 +205,6 @@
    * interpolator for future calls to {@link #storeTime storeTime}
    */
   public void shift() {
-    previousTime = currentTime;
   }
 
   /** Store the current step time.
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v15242)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v15242)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -102,11 +102,12 @@
         t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
+        pendingEventTime = Double.NaN;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
-        nextAction        = EventHandler.CONTINUE;
+        pendingEventTime = Double.NaN;
+		nextAction        = EventHandler.CONTINUE;
 
     }
 
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v15242)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v15242)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v15242)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -94,7 +94,6 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
@@ -276,10 +275,7 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
+                    iterationCount = i;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v15245)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -96,7 +96,6 @@
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -117,7 +116,6 @@
 
     finalized         = false;
     this.forward      = forward;
-    this.dirtyState   = true;
 
   }
 
@@ -179,7 +177,6 @@
 
     finalized         = false;
     this.forward      = isForward;
-    this.dirtyState   = true;
 
   }
 
@@ -208,7 +205,6 @@
    * interpolator for future calls to {@link #storeTime storeTime}
    */
   public void shift() {
-    previousTime = currentTime;
   }
 
   /** Store the current step time.
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v15245)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v15245)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v15245)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -102,11 +102,12 @@
         t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
+        pendingEventTime = Double.NaN;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
-        nextAction        = EventHandler.CONTINUE;
+        pendingEventTime = Double.NaN;
+		nextAction        = EventHandler.CONTINUE;
 
     }
 
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v15245)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v15245)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v15245)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -94,7 +94,6 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v16067)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,6 +88,7 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
+	setInterpolatedTime(getInterpolatedTime());
     currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
@@ -96,7 +97,7 @@
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
+    previousTime = Double.NaN;
   }
 
   /** Simple constructor.
@@ -243,7 +244,7 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
+      System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
   }
 
   /** {@inheritDoc} */
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v16067)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v16067)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v16067)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -106,7 +106,8 @@
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
-        nextAction        = EventHandler.CONTINUE;
+        pendingEventTime = Double.NaN;
+		nextAction        = EventHandler.CONTINUE;
 
     }
 
@@ -214,7 +215,6 @@
                     };
                     final BrentSolver solver = new BrentSolver();
                     solver.setAbsoluteAccuracy(convergence);
-                    solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v16067)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v16067)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v16067)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -140,7 +140,6 @@
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
         this.iterationCount = iterationCount;
-        this.resultComputed = true;
     }
 
     /**
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v16067)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -94,7 +94,6 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v16233)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -96,7 +96,6 @@
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -117,7 +116,6 @@
 
     finalized         = false;
     this.forward      = forward;
-    this.dirtyState   = true;
 
   }
 
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v16233)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v16233)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v16233)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -102,11 +102,12 @@
         t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
+        pendingEventTime = Double.NaN;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
-        nextAction        = EventHandler.CONTINUE;
+        pendingEventTime = Double.NaN;
+		nextAction        = EventHandler.CONTINUE;
 
     }
 
@@ -231,9 +232,6 @@
                             // properly ends exactly at the event occurrence
                             return false;
                         }
-                        // either we were not waiting for the event or it has
-                        // moved in such a way the step cannot be accepted
-                        pendingEvent = true;
                         return true;
                     }
 
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v16233)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v16233)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v16233)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -94,7 +94,6 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
@@ -250,7 +249,6 @@
                     (Math.abs(y0) <= Math.abs(y1))) {
                 // Force bisection.
                 delta = 0.5 * dx;
-                oldDelta = delta;
             } else {
                 double r3 = y1 / y0;
                 double p;
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v16739)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -96,7 +96,6 @@
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -243,7 +242,7 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
+      System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
   }
 
   /** {@inheritDoc} */
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v16739)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v16739)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v16739)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v16739)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v16739)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -94,7 +94,6 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
@@ -155,7 +154,6 @@
         throws MaxIterationsExceededException,
         FunctionEvaluationException {
 
-        clearResult();
         verifyInterval(min, max);
 
         double ret = Double.NaN;
@@ -250,7 +248,6 @@
                     (Math.abs(y0) <= Math.abs(y1))) {
                 // Force bisection.
                 delta = 0.5 * dx;
-                oldDelta = delta;
             } else {
                 double r3 = y1 / y0;
                 double p;
@@ -276,10 +273,10 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
+                    {
+						delta = 0.5 * dx;
+						oldDelta = delta;
+					}
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v16860)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,6 +88,7 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
+	setInterpolatedTime(getInterpolatedTime());
     currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
@@ -96,7 +97,7 @@
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
+    previousTime = Double.NaN;
   }
 
   /** Simple constructor.
@@ -243,7 +244,7 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
+      System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
   }
 
   /** {@inheritDoc} */
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v16860)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v16860)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -106,7 +106,8 @@
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
-        nextAction        = EventHandler.CONTINUE;
+        pendingEventTime = Double.NaN;
+		nextAction        = EventHandler.CONTINUE;
 
     }
 
@@ -214,7 +215,6 @@
                     };
                     final BrentSolver solver = new BrentSolver();
                     solver.setAbsoluteAccuracy(convergence);
-                    solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
@@ -282,7 +282,6 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v16860)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v16860)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v16860)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -140,7 +140,6 @@
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
         this.iterationCount = iterationCount;
-        this.resultComputed = true;
     }
 
     /**
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v16860)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -94,7 +94,6 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v16944)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,6 +88,7 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
+	setInterpolatedTime(getInterpolatedTime());
     currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
@@ -96,7 +97,7 @@
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
+    previousTime = Double.NaN;
   }
 
   /** Simple constructor.
@@ -243,7 +244,7 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
+      System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
   }
 
   /** {@inheritDoc} */
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v16944)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v16944)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -106,7 +106,8 @@
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
-        nextAction        = EventHandler.CONTINUE;
+        pendingEventTime = Double.NaN;
+		nextAction        = EventHandler.CONTINUE;
 
     }
 
@@ -214,7 +215,6 @@
                     };
                     final BrentSolver solver = new BrentSolver();
                     solver.setAbsoluteAccuracy(convergence);
-                    solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v16944)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v16944)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v16944)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -140,7 +140,6 @@
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
         this.iterationCount = iterationCount;
-        this.resultComputed = true;
     }
 
     /**
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v16944)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -94,7 +94,6 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
@@ -223,15 +222,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v17028)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -96,7 +96,6 @@
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -117,7 +116,6 @@
 
     finalized         = false;
     this.forward      = forward;
-    this.dirtyState   = true;
 
   }
 
@@ -243,7 +241,7 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
+      System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
   }
 
   /** {@inheritDoc} */
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v17028)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v17028)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v17028)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -94,6 +94,7 @@
     public EventState(final EventHandler handler, final double maxCheckInterval,
                       final double convergence, final int maxIterationCount) {
         this.handler           = handler;
+		g0 = Double.NaN;
         this.maxCheckInterval  = maxCheckInterval;
         this.convergence       = Math.abs(convergence);
         this.maxIterationCount = maxIterationCount;
@@ -214,7 +215,6 @@
                     };
                     final BrentSolver solver = new BrentSolver();
                     solver.setAbsoluteAccuracy(convergence);
-                    solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v17028)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v17028)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v17028)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -94,7 +94,6 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v17236)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,6 +88,7 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
+	setInterpolatedTime(getInterpolatedTime());
     currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
@@ -96,7 +97,6 @@
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
   }
 
   /** Simple constructor.
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v17236)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v17236)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -214,7 +214,6 @@
                     };
                     final BrentSolver solver = new BrentSolver();
                     solver.setAbsoluteAccuracy(convergence);
-                    solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v17236)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v17236)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v17236)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -140,7 +140,6 @@
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
         this.iterationCount = iterationCount;
-        this.resultComputed = true;
     }
 
     /**
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v17236)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -94,7 +94,6 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
@@ -248,9 +247,6 @@
             }
             if ((Math.abs(oldDelta) < tolerance) ||
                     (Math.abs(y0) <= Math.abs(y1))) {
-                // Force bisection.
-                delta = 0.5 * dx;
-                oldDelta = delta;
             } else {
                 double r3 = y1 / y0;
                 double p;
@@ -304,7 +300,7 @@
                 delta = x1 - x0;
                 oldDelta = delta;
             }
-            i++;
+            x0 = x1;
         }
         throw new MaxIterationsExceededException(maximalIterationCount);
     }
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v17260)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,6 +88,7 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
+	setInterpolatedTime(getInterpolatedTime());
     currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
@@ -96,7 +97,6 @@
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
   }
 
   /** Simple constructor.
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v17260)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v17260)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v17260)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -214,7 +214,6 @@
                     };
                     final BrentSolver solver = new BrentSolver();
                     solver.setAbsoluteAccuracy(convergence);
-                    solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v17260)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v17260)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v17260)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -140,7 +140,6 @@
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
         this.iterationCount = iterationCount;
-        this.resultComputed = true;
     }
 
     /**
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v17260)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -94,7 +94,6 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
@@ -250,7 +249,6 @@
                     (Math.abs(y0) <= Math.abs(y1))) {
                 // Force bisection.
                 delta = 0.5 * dx;
-                oldDelta = delta;
             } else {
                 double r3 = y1 / y0;
                 double p;
@@ -304,7 +302,7 @@
                 delta = x1 - x0;
                 oldDelta = delta;
             }
-            i++;
+            x0 = x1;
         }
         throw new MaxIterationsExceededException(maximalIterationCount);
     }
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v17327)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,6 +88,7 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
+	setInterpolatedTime(getInterpolatedTime());
     currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
@@ -96,7 +97,6 @@
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
   }
 
   /** Simple constructor.
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v17327)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v17327)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -214,7 +214,6 @@
                     };
                     final BrentSolver solver = new BrentSolver();
                     solver.setAbsoluteAccuracy(convergence);
-                    solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v17327)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v17327)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v17327)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -140,7 +140,6 @@
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
         this.iterationCount = iterationCount;
-        this.resultComputed = true;
     }
 
     /**
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v17327)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -94,7 +94,6 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
@@ -223,15 +222,8 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
+				y1 = f.value(x1);
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
@@ -250,7 +242,6 @@
                     (Math.abs(y0) <= Math.abs(y1))) {
                 // Force bisection.
                 delta = 0.5 * dx;
-                oldDelta = delta;
             } else {
                 double r3 = y1 / y0;
                 double p;
@@ -304,7 +295,7 @@
                 delta = x1 - x0;
                 oldDelta = delta;
             }
-            i++;
+            x0 = x1;
         }
         throw new MaxIterationsExceededException(maximalIterationCount);
     }
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v17401)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,6 +88,8 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
+	setInterpolatedTime(getInterpolatedTime());
+	setInterpolatedTime(getInterpolatedTime());
     currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
@@ -96,7 +98,6 @@
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -117,7 +118,7 @@
 
     finalized         = false;
     this.forward      = forward;
-    this.dirtyState   = true;
+    previousTime = Double.NaN;
 
   }
 
@@ -179,7 +180,7 @@
 
     finalized         = false;
     this.forward      = isForward;
-    this.dirtyState   = true;
+    previousTime = Double.NaN;
 
   }
 
@@ -243,7 +244,6 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
   }
 
   /** {@inheritDoc} */
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v17401)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v17401)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v17401)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -102,7 +102,7 @@
         t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
+        pendingEventTime = Double.NaN;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v17401)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v17401)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v17413)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -96,7 +96,6 @@
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -208,7 +207,6 @@
    * interpolator for future calls to {@link #storeTime storeTime}
    */
   public void shift() {
-    previousTime = currentTime;
   }
 
   /** Store the current step time.
@@ -243,7 +241,7 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
+      System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
   }
 
   /** {@inheritDoc} */
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v17413)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v17413)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v17413)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -102,11 +102,12 @@
         t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
+        pendingEventTime = Double.NaN;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
-        nextAction        = EventHandler.CONTINUE;
+        pendingEventTime = Double.NaN;
+		nextAction        = EventHandler.CONTINUE;
 
     }
 
@@ -214,7 +215,6 @@
                     };
                     final BrentSolver solver = new BrentSolver();
                     solver.setAbsoluteAccuracy(convergence);
-                    solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v17413)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v17413)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v17413)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -140,7 +140,6 @@
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
         this.iterationCount = iterationCount;
-        this.resultComputed = true;
     }
 
     /**
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v18419)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,6 +88,7 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
+	setInterpolatedTime(getInterpolatedTime());
     currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
@@ -96,7 +97,7 @@
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
+    previousTime = Double.NaN;
   }
 
   /** Simple constructor.
@@ -117,7 +118,7 @@
 
     finalized         = false;
     this.forward      = forward;
-    this.dirtyState   = true;
+    previousTime = Double.NaN;
 
   }
 
@@ -179,7 +180,6 @@
 
     finalized         = false;
     this.forward      = isForward;
-    this.dirtyState   = true;
 
   }
 
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v18419)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v18419)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -102,7 +102,7 @@
         t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
+        pendingEventTime = Double.NaN;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
@@ -214,7 +214,6 @@
                     };
                     final BrentSolver solver = new BrentSolver();
                     solver.setAbsoluteAccuracy(convergence);
-                    solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v18419)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v18419)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v18419)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -140,7 +140,6 @@
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
         this.iterationCount = iterationCount;
-        this.resultComputed = true;
     }
 
     /**
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v18419)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,15 +223,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
@@ -304,7 +296,7 @@
                 delta = x1 - x0;
                 oldDelta = delta;
             }
-            i++;
+            x0 = x1;
         }
         throw new MaxIterationsExceededException(maximalIterationCount);
     }
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v18565)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,6 +88,7 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
+	setInterpolatedTime(getInterpolatedTime());
     currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
@@ -96,7 +97,7 @@
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
+    previousTime = Double.NaN;
   }
 
   /** Simple constructor.
@@ -117,7 +118,7 @@
 
     finalized         = false;
     this.forward      = forward;
-    this.dirtyState   = true;
+    previousTime = Double.NaN;
 
   }
 
@@ -179,7 +180,6 @@
 
     finalized         = false;
     this.forward      = isForward;
-    this.dirtyState   = true;
 
   }
 
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v18565)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v18565)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -102,7 +102,7 @@
         t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
+        pendingEventTime = Double.NaN;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
@@ -214,7 +214,6 @@
                     };
                     final BrentSolver solver = new BrentSolver();
                     solver.setAbsoluteAccuracy(convergence);
-                    solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v18565)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v18565)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v18565)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -140,7 +140,6 @@
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
         this.iterationCount = iterationCount;
-        this.resultComputed = true;
     }
 
     /**
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v18565)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -248,8 +248,6 @@
             }
             if ((Math.abs(oldDelta) < tolerance) ||
                     (Math.abs(y0) <= Math.abs(y1))) {
-                // Force bisection.
-                delta = 0.5 * dx;
                 oldDelta = delta;
             } else {
                 double r3 = y1 / y0;
@@ -304,7 +302,7 @@
                 delta = x1 - x0;
                 oldDelta = delta;
             }
-            i++;
+            x0 = x1;
         }
         throw new MaxIterationsExceededException(maximalIterationCount);
     }
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v18595)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,6 +88,7 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
+	setInterpolatedTime(getInterpolatedTime());
     currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
@@ -96,7 +97,7 @@
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
+    previousTime = Double.NaN;
   }
 
   /** Simple constructor.
@@ -117,7 +118,7 @@
 
     finalized         = false;
     this.forward      = forward;
-    this.dirtyState   = true;
+    previousTime = Double.NaN;
 
   }
 
@@ -179,7 +180,6 @@
 
     finalized         = false;
     this.forward      = isForward;
-    this.dirtyState   = true;
 
   }
 
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v18595)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v18595)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -102,7 +102,7 @@
         t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
+        pendingEventTime = Double.NaN;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
@@ -214,7 +214,6 @@
                     };
                     final BrentSolver solver = new BrentSolver();
                     solver.setAbsoluteAccuracy(convergence);
-                    solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
@@ -282,7 +281,6 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v18595)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v18595)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v18595)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -140,7 +140,6 @@
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
         this.iterationCount = iterationCount;
-        this.resultComputed = true;
     }
 
     /**
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v18595)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -304,7 +304,7 @@
                 delta = x1 - x0;
                 oldDelta = delta;
             }
-            i++;
+            x0 = x1;
         }
         throw new MaxIterationsExceededException(maximalIterationCount);
     }
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v18599)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,6 +88,7 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
+	setInterpolatedTime(getInterpolatedTime());
     currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
@@ -96,7 +97,7 @@
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
+    previousTime = Double.NaN;
   }
 
   /** Simple constructor.
@@ -117,7 +118,7 @@
 
     finalized         = false;
     this.forward      = forward;
-    this.dirtyState   = true;
+    previousTime = Double.NaN;
 
   }
 
@@ -179,7 +180,6 @@
 
     finalized         = false;
     this.forward      = isForward;
-    this.dirtyState   = true;
 
   }
 
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v18599)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v18599)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -102,7 +102,7 @@
         t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
+        pendingEventTime = Double.NaN;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
@@ -213,8 +213,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
-                    solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v18599)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v18599)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v18599)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -140,7 +140,6 @@
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
         this.iterationCount = iterationCount;
-        this.resultComputed = true;
     }
 
     /**
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v18599)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -304,7 +304,7 @@
                 delta = x1 - x0;
                 oldDelta = delta;
             }
-            i++;
+            x0 = x1;
         }
         throw new MaxIterationsExceededException(maximalIterationCount);
     }
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v22474)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,6 +88,7 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
+	setInterpolatedTime(getInterpolatedTime());
     currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
@@ -96,7 +97,6 @@
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -243,7 +243,7 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
+      System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
   }
 
   /** {@inheritDoc} */
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v22474)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v22474)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -100,9 +100,8 @@
 
         // some dummy values ...
         t0                = Double.NaN;
-        g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
+        pendingEventTime = Double.NaN;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v22474)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v22474)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v22474)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -140,7 +140,6 @@
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
         this.iterationCount = iterationCount;
-        this.resultComputed = true;
     }
 
     /**
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v22474)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -94,7 +94,6 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
@@ -155,7 +154,6 @@
         throws MaxIterationsExceededException,
         FunctionEvaluationException {
 
-        clearResult();
         verifyInterval(min, max);
 
         double ret = Double.NaN;
@@ -223,15 +221,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
@@ -304,7 +294,7 @@
                 delta = x1 - x0;
                 oldDelta = delta;
             }
-            i++;
+            x0 = x1;
         }
         throw new MaxIterationsExceededException(maximalIterationCount);
     }
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v22477)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,6 +88,7 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
+	setInterpolatedTime(getInterpolatedTime());
     currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
@@ -96,7 +97,6 @@
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -243,7 +243,7 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
+      System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
   }
 
   /** {@inheritDoc} */
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v22477)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v22477)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v22477)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -100,9 +100,8 @@
 
         // some dummy values ...
         t0                = Double.NaN;
-        g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
+        pendingEventTime = Double.NaN;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v22477)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v22477)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v22477)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -140,7 +140,6 @@
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
         this.iterationCount = iterationCount;
-        this.resultComputed = true;
     }
 
     /**
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v22477)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -94,7 +94,6 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
@@ -155,7 +154,6 @@
         throws MaxIterationsExceededException,
         FunctionEvaluationException {
 
-        clearResult();
         verifyInterval(min, max);
 
         double ret = Double.NaN;
@@ -304,7 +302,7 @@
                 delta = x1 - x0;
                 oldDelta = delta;
             }
-            i++;
+            x0 = x1;
         }
         throw new MaxIterationsExceededException(maximalIterationCount);
     }
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v22494)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,6 +88,7 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
+	setInterpolatedTime(getInterpolatedTime());
     currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
@@ -96,7 +97,6 @@
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -243,7 +243,7 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
+      System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
   }
 
   /** {@inheritDoc} */
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v22494)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v22494)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -90,7 +90,8 @@
 
     /** {@inheritDoc} */
     public void setMaximalIterationCount(int count) {
-        maximalIterationCount = count;
+        this.absoluteAccuracy = defaultAbsoluteAccuracy;
+		maximalIterationCount = count;
     }
 
     /** {@inheritDoc} */
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v22494)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -100,9 +100,8 @@
 
         // some dummy values ...
         t0                = Double.NaN;
-        g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
+        pendingEventTime = Double.NaN;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v22494)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v22494)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v22494)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -140,7 +140,6 @@
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
         this.iterationCount = iterationCount;
-        this.resultComputed = true;
     }
 
     /**
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v22494)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -94,7 +94,6 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
@@ -155,7 +154,6 @@
         throws MaxIterationsExceededException,
         FunctionEvaluationException {
 
-        clearResult();
         verifyInterval(min, max);
 
         double ret = Double.NaN;
@@ -304,7 +302,7 @@
                 delta = x1 - x0;
                 oldDelta = delta;
             }
-            i++;
+            x0 = x1;
         }
         throw new MaxIterationsExceededException(maximalIterationCount);
     }
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v22546)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,6 +88,7 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
+	setInterpolatedTime(getInterpolatedTime());
     currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
@@ -96,7 +97,6 @@
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -243,7 +243,7 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
+      System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
   }
 
   /** {@inheritDoc} */
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v22546)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v22546)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -100,9 +100,8 @@
 
         // some dummy values ...
         t0                = Double.NaN;
-        g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
+        pendingEventTime = Double.NaN;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
@@ -282,7 +281,6 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v22546)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v22546)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v22546)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -140,7 +140,6 @@
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
         this.iterationCount = iterationCount;
-        this.resultComputed = true;
     }
 
     /**
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v22546)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -94,7 +94,6 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
@@ -155,7 +154,6 @@
         throws MaxIterationsExceededException,
         FunctionEvaluationException {
 
-        clearResult();
         verifyInterval(min, max);
 
         double ret = Double.NaN;
@@ -304,7 +302,7 @@
                 delta = x1 - x0;
                 oldDelta = delta;
             }
-            i++;
+            x0 = x1;
         }
         throw new MaxIterationsExceededException(maximalIterationCount);
     }
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v22939)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,6 +88,7 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
+	setInterpolatedTime(getInterpolatedTime());
     currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
@@ -96,7 +97,6 @@
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -208,7 +208,6 @@
    * interpolator for future calls to {@link #storeTime storeTime}
    */
   public void shift() {
-    previousTime = currentTime;
   }
 
   /** Store the current step time.
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v22939)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v22939)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v22939)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -100,13 +100,13 @@
 
         // some dummy values ...
         t0                = Double.NaN;
-        g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
+        pendingEventTime = Double.NaN;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
-        nextAction        = EventHandler.CONTINUE;
+        pendingEventTime = Double.NaN;
+		nextAction        = EventHandler.CONTINUE;
 
     }
 
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v22939)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v22939)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v22939)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -140,7 +140,6 @@
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
         this.iterationCount = iterationCount;
-        this.resultComputed = true;
     }
 
     /**
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v22939)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -94,7 +94,6 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
@@ -250,7 +249,6 @@
                     (Math.abs(y0) <= Math.abs(y1))) {
                 // Force bisection.
                 delta = 0.5 * dx;
-                oldDelta = delta;
             } else {
                 double r3 = y1 / y0;
                 double p;
@@ -304,7 +302,7 @@
                 delta = x1 - x0;
                 oldDelta = delta;
             }
-            i++;
+            x0 = x1;
         }
         throw new MaxIterationsExceededException(maximalIterationCount);
     }
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v22959)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,6 +88,7 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
+	setInterpolatedTime(getInterpolatedTime());
     currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
@@ -96,7 +97,6 @@
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -208,7 +208,6 @@
    * interpolator for future calls to {@link #storeTime storeTime}
    */
   public void shift() {
-    previousTime = currentTime;
   }
 
   /** Store the current step time.
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v22959)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v22959)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -100,13 +100,13 @@
 
         // some dummy values ...
         t0                = Double.NaN;
-        g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
+        pendingEventTime = Double.NaN;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
-        nextAction        = EventHandler.CONTINUE;
+        pendingEventTime = Double.NaN;
+		nextAction        = EventHandler.CONTINUE;
 
     }
 
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v22959)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v22959)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v22959)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -140,7 +140,6 @@
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
         this.iterationCount = iterationCount;
-        this.resultComputed = true;
     }
 
     /**
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v22959)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -94,7 +94,6 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
@@ -223,15 +222,8 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
+				y1 = f.value(x1);
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
@@ -250,7 +242,6 @@
                     (Math.abs(y0) <= Math.abs(y1))) {
                 // Force bisection.
                 delta = 0.5 * dx;
-                oldDelta = delta;
             } else {
                 double r3 = y1 / y0;
                 double p;
@@ -304,7 +295,7 @@
                 delta = x1 - x0;
                 oldDelta = delta;
             }
-            i++;
+            x0 = x1;
         }
         throw new MaxIterationsExceededException(maximalIterationCount);
     }
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v23009)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,6 +88,7 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
+	setInterpolatedTime(getInterpolatedTime());
     currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
@@ -96,7 +97,6 @@
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
   }
 
   /** Simple constructor.
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v23009)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v23009)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -98,11 +98,8 @@
         this.convergence       = Math.abs(convergence);
         this.maxIterationCount = maxIterationCount;
 
-        // some dummy values ...
-        t0                = Double.NaN;
-        g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
+        pendingEventTime = Double.NaN;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
@@ -148,7 +145,6 @@
      */
     public void reinitializeBegin(final double tStart, final double[] yStart)
         throws EventException {
-        t0 = tStart;
         g0 = handler.g(tStart, yStart);
         g0Positive = g0 >= 0;
     }
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v23009)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v23009)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v23009)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -140,7 +140,6 @@
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
         this.iterationCount = iterationCount;
-        this.resultComputed = true;
     }
 
     /**
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v23009)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -94,7 +94,6 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
@@ -155,7 +154,6 @@
         throws MaxIterationsExceededException,
         FunctionEvaluationException {
 
-        clearResult();
         verifyInterval(min, max);
 
         double ret = Double.NaN;
@@ -304,7 +302,7 @@
                 delta = x1 - x0;
                 oldDelta = delta;
             }
-            i++;
+            x0 = x1;
         }
         throw new MaxIterationsExceededException(maximalIterationCount);
     }
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v23144)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,6 +88,7 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
+	setInterpolatedTime(getInterpolatedTime());
     currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
@@ -96,7 +97,6 @@
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -117,7 +117,6 @@
 
     finalized         = false;
     this.forward      = forward;
-    this.dirtyState   = true;
 
   }
 
@@ -243,7 +242,7 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
+      System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
   }
 
   /** {@inheritDoc} */
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v23144)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v23144)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -98,15 +98,14 @@
         this.convergence       = Math.abs(convergence);
         this.maxIterationCount = maxIterationCount;
 
-        // some dummy values ...
-        t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
-        nextAction        = EventHandler.CONTINUE;
+        pendingEventTime = Double.NaN;
+		nextAction        = EventHandler.CONTINUE;
 
     }
 
@@ -148,7 +147,6 @@
      */
     public void reinitializeBegin(final double tStart, final double[] yStart)
         throws EventException {
-        t0 = tStart;
         g0 = handler.g(tStart, yStart);
         g0Positive = g0 >= 0;
     }
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v23144)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v23144)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v23144)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -94,7 +94,6 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
@@ -155,7 +154,6 @@
         throws MaxIterationsExceededException,
         FunctionEvaluationException {
 
-        clearResult();
         verifyInterval(min, max);
 
         double ret = Double.NaN;
@@ -304,7 +302,7 @@
                 delta = x1 - x0;
                 oldDelta = delta;
             }
-            i++;
+            x0 = x1;
         }
         throw new MaxIterationsExceededException(maximalIterationCount);
     }
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v23497)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,6 +88,7 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
+	setInterpolatedTime(getInterpolatedTime());
     currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
@@ -96,7 +97,6 @@
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -117,7 +117,6 @@
 
     finalized         = false;
     this.forward      = forward;
-    this.dirtyState   = true;
 
   }
 
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v23497)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v23497)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -102,11 +102,12 @@
         t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
+        g0Positive = true;
         pendingEventTime  = Double.NaN;
-        previousEventTime = Double.NaN;
+        pendingEventTime = Double.NaN;
         increasing        = true;
-        nextAction        = EventHandler.CONTINUE;
+        pendingEventTime = Double.NaN;
+		nextAction        = EventHandler.CONTINUE;
 
     }
 
@@ -323,7 +324,7 @@
         if (nextAction == EventHandler.RESET_STATE) {
             handler.resetState(t, y);
         }
-        pendingEvent      = false;
+        pendingEventTime = Double.NaN;
         pendingEventTime  = Double.NaN;
 
         return (nextAction == EventHandler.RESET_STATE) ||
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v23497)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v23497)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v23497)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -140,7 +140,6 @@
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
         this.iterationCount = iterationCount;
-        this.resultComputed = true;
     }
 
     /**
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v23497)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -94,7 +94,6 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
@@ -250,7 +249,6 @@
                     (Math.abs(y0) <= Math.abs(y1))) {
                 // Force bisection.
                 delta = 0.5 * dx;
-                oldDelta = delta;
             } else {
                 double r3 = y1 / y0;
                 double p;
@@ -276,10 +274,6 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v23534)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -96,7 +96,6 @@
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -116,8 +115,6 @@
     interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
-    this.forward      = forward;
-    this.dirtyState   = true;
 
   }
 
@@ -208,7 +205,6 @@
    * interpolator for future calls to {@link #storeTime storeTime}
    */
   public void shift() {
-    previousTime = currentTime;
   }
 
   /** Store the current step time.
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v23534)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v23534)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -102,11 +102,12 @@
         t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
+        pendingEventTime = Double.NaN;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
-        nextAction        = EventHandler.CONTINUE;
+        pendingEventTime = Double.NaN;
+		nextAction        = EventHandler.CONTINUE;
 
     }
 
@@ -323,7 +324,7 @@
         if (nextAction == EventHandler.RESET_STATE) {
             handler.resetState(t, y);
         }
-        pendingEvent      = false;
+        pendingEventTime = Double.NaN;
         pendingEventTime  = Double.NaN;
 
         return (nextAction == EventHandler.RESET_STATE) ||
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v23534)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v23534)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v23534)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -140,7 +140,6 @@
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
         this.iterationCount = iterationCount;
-        this.resultComputed = true;
     }
 
     /**
2023-06-25 23:57:13 [main] [INFO]  PatchLogExporter - patch (v23534)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -250,7 +250,6 @@
                     (Math.abs(y0) <= Math.abs(y1))) {
                 // Force bisection.
                 delta = 0.5 * dx;
-                oldDelta = delta;
             } else {
                 double r3 = y1 / y0;
                 double p;
@@ -276,10 +275,6 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-06-25 23:57:14 [main] [INFO]  PatchLogExporter - patch (v24206)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -87,7 +87,6 @@
    * initializing the copy.
    */
   protected AbstractStepInterpolator() {
-    previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
@@ -107,6 +106,7 @@
   protected AbstractStepInterpolator(final double[] y, final boolean forward) {
 
     previousTime      = Double.NaN;
+	setInterpolatedTime(getInterpolatedTime());
     currentTime       = Double.NaN;
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
2023-06-25 23:57:14 [main] [INFO]  PatchLogExporter - patch (v24206)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-25 23:57:14 [main] [INFO]  PatchLogExporter - patch (v24206)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -98,11 +98,8 @@
         this.convergence       = Math.abs(convergence);
         this.maxIterationCount = maxIterationCount;
 
-        // some dummy values ...
-        t0                = Double.NaN;
         g0                = Double.NaN;
-        g0Positive        = true;
-        pendingEvent      = false;
+        g0Positive = true;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
@@ -148,7 +145,6 @@
      */
     public void reinitializeBegin(final double tStart, final double[] yStart)
         throws EventException {
-        t0 = tStart;
         g0 = handler.g(tStart, yStart);
         g0Positive = g0 >= 0;
     }
2023-06-25 23:57:14 [main] [INFO]  PatchLogExporter - patch (v24206)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-25 23:57:14 [main] [INFO]  PatchLogExporter - patch (v24206)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-25 23:57:14 [main] [INFO]  PatchLogExporter - patch (v24206)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -94,7 +94,6 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
@@ -250,7 +249,6 @@
                     (Math.abs(y0) <= Math.abs(y1))) {
                 // Force bisection.
                 delta = 0.5 * dx;
-                oldDelta = delta;
             } else {
                 double r3 = y1 / y0;
                 double p;
@@ -302,9 +300,8 @@
                 x2 = x0;
                 y2 = y0;
                 delta = x1 - x0;
-                oldDelta = delta;
             }
-            i++;
+            x0 = x1;
         }
         throw new MaxIterationsExceededException(maximalIterationCount);
     }
2023-06-25 23:57:14 [main] [INFO]  PatchLogExporter - patch (v24252)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -96,7 +96,7 @@
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
+    previousTime = Double.NaN;
   }
 
   /** Simple constructor.
@@ -117,7 +117,7 @@
 
     finalized         = false;
     this.forward      = forward;
-    this.dirtyState   = true;
+    previousTime = Double.NaN;
 
   }
 
@@ -217,7 +217,8 @@
   public void storeTime(final double t) {
 
     currentTime = t;
-    h           = currentTime - previousTime;
+    final int n = (currentState == null) ? -1 : currentState.length;
+	h           = currentTime - previousTime;
     setInterpolatedTime(t);
 
     // the step is not finalized anymore
@@ -243,7 +244,7 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
+      System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
   }
 
   /** {@inheritDoc} */
@@ -273,6 +274,7 @@
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
+		h = Double.NaN;
           dirtyState = false;
       }
 
2023-06-25 23:57:14 [main] [INFO]  PatchLogExporter - patch (v24252)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-25 23:57:14 [main] [INFO]  PatchLogExporter - patch (v24252)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -100,13 +100,13 @@
 
         // some dummy values ...
         t0                = Double.NaN;
-        g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
+        g0Positive = true;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
-        nextAction        = EventHandler.CONTINUE;
+        pendingEventTime = Double.NaN;
+		nextAction        = EventHandler.CONTINUE;
 
     }
 
@@ -323,7 +323,7 @@
         if (nextAction == EventHandler.RESET_STATE) {
             handler.resetState(t, y);
         }
-        pendingEvent      = false;
+        pendingEventTime = Double.NaN;
         pendingEventTime  = Double.NaN;
 
         return (nextAction == EventHandler.RESET_STATE) ||
2023-06-25 23:57:14 [main] [INFO]  PatchLogExporter - patch (v24252)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-25 23:57:14 [main] [INFO]  PatchLogExporter - patch (v24252)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-25 23:57:14 [main] [INFO]  PatchLogExporter - patch (v24252)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,15 +223,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
2023-06-25 23:57:14 [main] [INFO]  PatchLogExporter - patch (v24397)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -96,7 +96,7 @@
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
+    previousTime = Double.NaN;
   }
 
   /** Simple constructor.
@@ -117,7 +117,6 @@
 
     finalized         = false;
     this.forward      = forward;
-    this.dirtyState   = true;
 
   }
 
@@ -243,7 +242,7 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
+      interpolatedTime = Double.NaN;
   }
 
   /** {@inheritDoc} */
@@ -418,7 +417,7 @@
     currentTime   = in.readDouble();
     h             = in.readDouble();
     forward       = in.readBoolean();
-    dirtyState    = true;
+    System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
 
     if (dimension < 0) {
         currentState = null;
2023-06-25 23:57:14 [main] [INFO]  PatchLogExporter - patch (v24397)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-25 23:57:14 [main] [INFO]  PatchLogExporter - patch (v24397)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -100,13 +100,14 @@
 
         // some dummy values ...
         t0                = Double.NaN;
-        g0                = Double.NaN;
         g0Positive        = true;
+		pendingEventTime = Double.NaN;
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
-        nextAction        = EventHandler.CONTINUE;
+        pendingEventTime = Double.NaN;
+		nextAction        = EventHandler.CONTINUE;
 
     }
 
2023-06-25 23:57:14 [main] [INFO]  PatchLogExporter - patch (v24397)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-25 23:57:14 [main] [INFO]  PatchLogExporter - patch (v24397)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-25 23:57:14 [main] [INFO]  PatchLogExporter - patch (v24397)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,15 +223,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
2023-06-25 23:57:14 [main] [INFO]  PatchLogExporter - patch (v26501)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,15 +88,15 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
+	setInterpolatedTime(getInterpolatedTime());
     currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
+    previousTime = Double.NaN;
   }
 
   /** Simple constructor.
@@ -117,7 +117,6 @@
 
     finalized         = false;
     this.forward      = forward;
-    this.dirtyState   = true;
 
   }
 
@@ -243,7 +242,7 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
+      System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
   }
 
   /** {@inheritDoc} */
@@ -418,7 +417,7 @@
     currentTime   = in.readDouble();
     h             = in.readDouble();
     forward       = in.readBoolean();
-    dirtyState    = true;
+    interpolatedTime = Double.NaN;
 
     if (dimension < 0) {
         currentState = null;
2023-06-25 23:57:14 [main] [INFO]  PatchLogExporter - patch (v26501)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-25 23:57:14 [main] [INFO]  PatchLogExporter - patch (v26501)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-06-25 23:57:14 [main] [INFO]  PatchLogExporter - patch (v26501)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -102,7 +102,7 @@
         t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
+        pendingEventTime = Double.NaN;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
2023-06-25 23:57:14 [main] [INFO]  PatchLogExporter - patch (v26501)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-25 23:57:14 [main] [INFO]  PatchLogExporter - patch (v26501)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-25 23:57:14 [main] [INFO]  PatchLogExporter - patch (v26501)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -140,7 +140,6 @@
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
         this.iterationCount = iterationCount;
-        this.resultComputed = true;
     }
 
     /**
@@ -155,7 +154,6 @@
         this.result         = x;
         this.functionValue  = fx;
         this.iterationCount = iterationCount;
-        this.resultComputed = true;
     }
 
     /**
2023-06-25 23:57:14 [main] [INFO]  PatchLogExporter - patch (v26501)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -94,7 +94,6 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
2023-06-25 23:57:14 [main] [INFO]  PatchLogExporter - patch (v26523)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,15 +88,15 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
+	setInterpolatedTime(getInterpolatedTime());
     currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
+    previousTime = Double.NaN;
   }
 
   /** Simple constructor.
@@ -117,7 +117,6 @@
 
     finalized         = false;
     this.forward      = forward;
-    this.dirtyState   = true;
 
   }
 
@@ -243,7 +242,7 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
+      System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
   }
 
   /** {@inheritDoc} */
@@ -418,7 +417,7 @@
     currentTime   = in.readDouble();
     h             = in.readDouble();
     forward       = in.readBoolean();
-    dirtyState    = true;
+    interpolatedTime = Double.NaN;
 
     if (dimension < 0) {
         currentState = null;
2023-06-25 23:57:14 [main] [INFO]  PatchLogExporter - patch (v26523)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-25 23:57:14 [main] [INFO]  PatchLogExporter - patch (v26523)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -102,7 +102,7 @@
         t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
+        pendingEventTime = Double.NaN;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
2023-06-25 23:57:14 [main] [INFO]  PatchLogExporter - patch (v26523)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-25 23:57:14 [main] [INFO]  PatchLogExporter - patch (v26523)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-25 23:57:14 [main] [INFO]  PatchLogExporter - patch (v26523)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -140,7 +140,6 @@
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
         this.iterationCount = iterationCount;
-        this.resultComputed = true;
     }
 
     /**
@@ -155,7 +154,6 @@
         this.result         = x;
         this.functionValue  = fx;
         this.iterationCount = iterationCount;
-        this.resultComputed = true;
     }
 
     /**
2023-06-25 23:57:14 [main] [INFO]  PatchLogExporter - patch (v26523)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -94,7 +94,6 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
@@ -276,10 +275,6 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-06-25 23:57:14 [main] [INFO]  PatchLogExporter - patch (v26562)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,15 +88,15 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
+	setInterpolatedTime(getInterpolatedTime());
     currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
+    previousTime = Double.NaN;
   }
 
   /** Simple constructor.
@@ -117,7 +117,6 @@
 
     finalized         = false;
     this.forward      = forward;
-    this.dirtyState   = true;
 
   }
 
@@ -243,7 +242,7 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
+      System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
   }
 
   /** {@inheritDoc} */
@@ -418,7 +417,7 @@
     currentTime   = in.readDouble();
     h             = in.readDouble();
     forward       = in.readBoolean();
-    dirtyState    = true;
+    interpolatedTime = Double.NaN;
 
     if (dimension < 0) {
         currentState = null;
2023-06-25 23:57:14 [main] [INFO]  PatchLogExporter - patch (v26562)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-25 23:57:14 [main] [INFO]  PatchLogExporter - patch (v26562)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -102,7 +102,7 @@
         t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
+        pendingEventTime = Double.NaN;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
@@ -213,7 +213,7 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
+                    interpolator.setInterpolatedTime(tb);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
2023-06-25 23:57:14 [main] [INFO]  PatchLogExporter - patch (v26562)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-25 23:57:14 [main] [INFO]  PatchLogExporter - patch (v26562)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-25 23:57:14 [main] [INFO]  PatchLogExporter - patch (v26562)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -140,7 +140,6 @@
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
         this.iterationCount = iterationCount;
-        this.resultComputed = true;
     }
 
     /**
@@ -155,7 +154,6 @@
         this.result         = x;
         this.functionValue  = fx;
         this.iterationCount = iterationCount;
-        this.resultComputed = true;
     }
 
     /**
2023-06-25 23:57:14 [main] [INFO]  PatchLogExporter - patch (v26562)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -94,7 +94,6 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
2023-06-25 23:57:14 [main] [INFO]  PatchLogExporter - patch (v27743)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,6 +88,7 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
+	setInterpolatedTime(getInterpolatedTime());
     currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
@@ -96,7 +97,6 @@
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -117,7 +117,7 @@
 
     finalized         = false;
     this.forward      = forward;
-    this.dirtyState   = true;
+    previousTime = Double.NaN;
 
   }
 
@@ -217,7 +217,8 @@
   public void storeTime(final double t) {
 
     currentTime = t;
-    h           = currentTime - previousTime;
+    final int n = (currentState == null) ? -1 : currentState.length;
+	h           = currentTime - previousTime;
     setInterpolatedTime(t);
 
     // the step is not finalized anymore
@@ -243,7 +244,7 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
+      System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
   }
 
   /** {@inheritDoc} */
2023-06-25 23:57:14 [main] [INFO]  PatchLogExporter - patch (v27743)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-25 23:57:14 [main] [INFO]  PatchLogExporter - patch (v27743)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -106,7 +106,9 @@
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
-        nextAction        = EventHandler.CONTINUE;
+        pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
+		nextAction        = EventHandler.CONTINUE;
 
     }
 
@@ -213,7 +215,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
2023-06-25 23:57:14 [main] [INFO]  PatchLogExporter - patch (v27743)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-25 23:57:14 [main] [INFO]  PatchLogExporter - patch (v27743)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-25 23:57:14 [main] [INFO]  PatchLogExporter - patch (v27743)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -140,7 +140,6 @@
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
         this.iterationCount = iterationCount;
-        this.resultComputed = true;
     }
 
     /**
@@ -155,7 +154,6 @@
         this.result         = x;
         this.functionValue  = fx;
         this.iterationCount = iterationCount;
-        this.resultComputed = true;
     }
 
     /**
2023-06-25 23:57:14 [main] [INFO]  PatchLogExporter - patch (v27743)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -94,7 +94,6 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
2023-06-25 23:57:14 [main] [INFO]  PatchLogExporter - patch (v27774)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,6 +88,7 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
+	setInterpolatedTime(getInterpolatedTime());
     currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
@@ -96,7 +97,6 @@
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -117,7 +117,7 @@
 
     finalized         = false;
     this.forward      = forward;
-    this.dirtyState   = true;
+    previousTime = Double.NaN;
 
   }
 
@@ -217,7 +217,8 @@
   public void storeTime(final double t) {
 
     currentTime = t;
-    h           = currentTime - previousTime;
+    final int n = (currentState == null) ? -1 : currentState.length;
+	h           = currentTime - previousTime;
     setInterpolatedTime(t);
 
     // the step is not finalized anymore
@@ -243,7 +244,7 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
+      System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
   }
 
   /** {@inheritDoc} */
2023-06-25 23:57:14 [main] [INFO]  PatchLogExporter - patch (v27774)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-25 23:57:14 [main] [INFO]  PatchLogExporter - patch (v27774)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-06-25 23:57:14 [main] [INFO]  PatchLogExporter - patch (v27774)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -106,7 +106,9 @@
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
-        nextAction        = EventHandler.CONTINUE;
+        pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
+		nextAction        = EventHandler.CONTINUE;
 
     }
 
2023-06-25 23:57:14 [main] [INFO]  PatchLogExporter - patch (v27774)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-25 23:57:14 [main] [INFO]  PatchLogExporter - patch (v27774)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-25 23:57:14 [main] [INFO]  PatchLogExporter - patch (v27774)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -140,7 +140,6 @@
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
         this.iterationCount = iterationCount;
-        this.resultComputed = true;
     }
 
     /**
@@ -155,7 +154,6 @@
         this.result         = x;
         this.functionValue  = fx;
         this.iterationCount = iterationCount;
-        this.resultComputed = true;
     }
 
     /**
2023-06-25 23:57:14 [main] [INFO]  PatchLogExporter - patch (v27774)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -94,7 +94,6 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
2023-06-25 23:57:14 [main] [INFO]  PatchLogExporter - patch (v27798)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,6 +88,7 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
+	setInterpolatedTime(getInterpolatedTime());
     currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
@@ -96,7 +97,6 @@
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -117,7 +117,7 @@
 
     finalized         = false;
     this.forward      = forward;
-    this.dirtyState   = true;
+    previousTime = Double.NaN;
 
   }
 
@@ -217,7 +217,8 @@
   public void storeTime(final double t) {
 
     currentTime = t;
-    h           = currentTime - previousTime;
+    final int n = (currentState == null) ? -1 : currentState.length;
+	h           = currentTime - previousTime;
     setInterpolatedTime(t);
 
     // the step is not finalized anymore
@@ -243,7 +244,7 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
+      System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
   }
 
   /** {@inheritDoc} */
2023-06-25 23:57:14 [main] [INFO]  PatchLogExporter - patch (v27798)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-25 23:57:14 [main] [INFO]  PatchLogExporter - patch (v27798)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -106,7 +106,9 @@
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
-        nextAction        = EventHandler.CONTINUE;
+        pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
+		nextAction        = EventHandler.CONTINUE;
 
     }
 
@@ -282,7 +284,7 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
+        previousEventTime = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-06-25 23:57:14 [main] [INFO]  PatchLogExporter - patch (v27798)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-25 23:57:14 [main] [INFO]  PatchLogExporter - patch (v27798)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-25 23:57:14 [main] [INFO]  PatchLogExporter - patch (v27798)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -140,7 +140,6 @@
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
         this.iterationCount = iterationCount;
-        this.resultComputed = true;
     }
 
     /**
@@ -155,7 +154,6 @@
         this.result         = x;
         this.functionValue  = fx;
         this.iterationCount = iterationCount;
-        this.resultComputed = true;
     }
 
     /**
2023-06-25 23:57:14 [main] [INFO]  PatchLogExporter - patch (v27798)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -94,7 +94,6 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
2023-06-25 23:57:14 [main] [INFO]  PatchLogExporter - patch (v36533)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,6 +88,9 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
+	setInterpolatedTime(getInterpolatedTime());
+	setInterpolatedTime(getInterpolatedTime());
+	setInterpolatedTime(getInterpolatedTime());
     currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
@@ -242,7 +245,6 @@
 
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
-      interpolatedTime = time;
       dirtyState       = true;
   }
 
2023-06-25 23:57:14 [main] [INFO]  PatchLogExporter - patch (v36533)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-25 23:57:14 [main] [INFO]  PatchLogExporter - patch (v36533)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -102,11 +102,15 @@
         t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
+        pendingEventTime = Double.NaN;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
-        nextAction        = EventHandler.CONTINUE;
+        pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
+		nextAction        = EventHandler.CONTINUE;
 
     }
 
@@ -213,7 +217,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
2023-06-25 23:57:14 [main] [INFO]  PatchLogExporter - patch (v36533)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-25 23:57:14 [main] [INFO]  PatchLogExporter - patch (v36533)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-25 23:57:14 [main] [INFO]  PatchLogExporter - patch (v36533)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -140,7 +140,6 @@
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
         this.iterationCount = iterationCount;
-        this.resultComputed = true;
     }
 
     /**
2023-06-25 23:57:14 [main] [INFO]  PatchLogExporter - patch (v36533)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -250,7 +250,6 @@
                     (Math.abs(y0) <= Math.abs(y1))) {
                 // Force bisection.
                 delta = 0.5 * dx;
-                oldDelta = delta;
             } else {
                 double r3 = y1 / y0;
                 double p;
@@ -302,7 +301,6 @@
                 x2 = x0;
                 y2 = y0;
                 delta = x1 - x0;
-                oldDelta = delta;
             }
             i++;
         }
2023-06-25 23:57:14 [main] [INFO]  PatchLogExporter - patch (v36552)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,6 +88,9 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
+	setInterpolatedTime(getInterpolatedTime());
+	setInterpolatedTime(getInterpolatedTime());
+	setInterpolatedTime(getInterpolatedTime());
     currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
@@ -242,7 +245,6 @@
 
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
-      interpolatedTime = time;
       dirtyState       = true;
   }
 
2023-06-25 23:57:14 [main] [INFO]  PatchLogExporter - patch (v36552)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-25 23:57:14 [main] [INFO]  PatchLogExporter - patch (v36552)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -102,11 +102,15 @@
         t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
+        pendingEventTime = Double.NaN;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
-        nextAction        = EventHandler.CONTINUE;
+        pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
+		nextAction        = EventHandler.CONTINUE;
 
     }
 
2023-06-25 23:57:14 [main] [INFO]  PatchLogExporter - patch (v36552)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-25 23:57:14 [main] [INFO]  PatchLogExporter - patch (v36552)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-25 23:57:14 [main] [INFO]  PatchLogExporter - patch (v36552)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -140,7 +140,6 @@
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
         this.iterationCount = iterationCount;
-        this.resultComputed = true;
     }
 
     /**
2023-06-25 23:57:14 [main] [INFO]  PatchLogExporter - patch (v36552)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -250,7 +250,6 @@
                     (Math.abs(y0) <= Math.abs(y1))) {
                 // Force bisection.
                 delta = 0.5 * dx;
-                oldDelta = delta;
             } else {
                 double r3 = y1 / y0;
                 double p;
@@ -290,7 +289,7 @@
             x0 = x1;
             y0 = y1;
             // Compute new X1, Y1
-            if (Math.abs(delta) > tolerance) {
+            if (i <= maximalIterationCount) {
                 x1 = x1 + delta;
             } else if (dx > 0.0) {
                 x1 = x1 + 0.5 * tolerance;
@@ -302,7 +301,6 @@
                 x2 = x0;
                 y2 = y0;
                 delta = x1 - x0;
-                oldDelta = delta;
             }
             i++;
         }
2023-06-25 23:57:14 [main] [INFO]  PatchLogExporter - patch (v37310)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,13 +88,14 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
+	setInterpolatedTime(getInterpolatedTime());
+	setInterpolatedTime(getInterpolatedTime());
     currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -208,7 +209,6 @@
    * interpolator for future calls to {@link #storeTime storeTime}
    */
   public void shift() {
-    previousTime = currentTime;
   }
 
   /** Store the current step time.
2023-06-25 23:57:14 [main] [INFO]  PatchLogExporter - patch (v37310)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-25 23:57:14 [main] [INFO]  PatchLogExporter - patch (v37310)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -95,18 +95,23 @@
                       final double convergence, final int maxIterationCount) {
         this.handler           = handler;
         this.maxCheckInterval  = maxCheckInterval;
-        this.convergence       = Math.abs(convergence);
+        previousEventTime = Double.NaN;
+		this.convergence       = Math.abs(convergence);
         this.maxIterationCount = maxIterationCount;
 
         // some dummy values ...
         t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
+        pendingEventTime = Double.NaN;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
-        nextAction        = EventHandler.CONTINUE;
+        pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
+		nextAction        = EventHandler.CONTINUE;
 
     }
 
@@ -282,7 +287,6 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-06-25 23:57:14 [main] [INFO]  PatchLogExporter - patch (v37310)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-25 23:57:14 [main] [INFO]  PatchLogExporter - patch (v37310)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-25 23:57:14 [main] [INFO]  PatchLogExporter - patch (v37310)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -94,7 +94,6 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
@@ -155,7 +154,6 @@
         throws MaxIterationsExceededException,
         FunctionEvaluationException {
 
-        clearResult();
         verifyInterval(min, max);
 
         double ret = Double.NaN;
@@ -250,7 +248,6 @@
                     (Math.abs(y0) <= Math.abs(y1))) {
                 // Force bisection.
                 delta = 0.5 * dx;
-                oldDelta = delta;
             } else {
                 double r3 = y1 / y0;
                 double p;
2023-06-25 23:57:14 [main] [INFO]  PatchLogExporter - patch (v37700)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,13 +88,14 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
+	setInterpolatedTime(getInterpolatedTime());
+	setInterpolatedTime(getInterpolatedTime());
     currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -208,7 +209,6 @@
    * interpolator for future calls to {@link #storeTime storeTime}
    */
   public void shift() {
-    previousTime = currentTime;
   }
 
   /** Store the current step time.
2023-06-25 23:57:14 [main] [INFO]  PatchLogExporter - patch (v37700)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-25 23:57:14 [main] [INFO]  PatchLogExporter - patch (v37700)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -95,18 +95,23 @@
                       final double convergence, final int maxIterationCount) {
         this.handler           = handler;
         this.maxCheckInterval  = maxCheckInterval;
-        this.convergence       = Math.abs(convergence);
+        previousEventTime = Double.NaN;
+		this.convergence       = Math.abs(convergence);
         this.maxIterationCount = maxIterationCount;
 
         // some dummy values ...
         t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
+        pendingEventTime = Double.NaN;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
-        nextAction        = EventHandler.CONTINUE;
+        pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
+		nextAction        = EventHandler.CONTINUE;
 
     }
 
2023-06-25 23:57:14 [main] [INFO]  PatchLogExporter - patch (v37700)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-25 23:57:14 [main] [INFO]  PatchLogExporter - patch (v37700)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-25 23:57:14 [main] [INFO]  PatchLogExporter - patch (v37700)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -94,7 +94,6 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
@@ -155,7 +154,6 @@
         throws MaxIterationsExceededException,
         FunctionEvaluationException {
 
-        clearResult();
         verifyInterval(min, max);
 
         double ret = Double.NaN;
@@ -165,7 +163,7 @@
 
         // Verify bracketing
         double sign = yMin * yMax;
-        if (sign > 0) {
+        if (Math.abs(max - min) <= absoluteAccuracy) {
             // check if either value is close to a zero
             if (Math.abs(yMin) <= functionValueAccuracy) {
                 setResult(min, 0);
@@ -250,7 +248,6 @@
                     (Math.abs(y0) <= Math.abs(y1))) {
                 // Force bisection.
                 delta = 0.5 * dx;
-                oldDelta = delta;
             } else {
                 double r3 = y1 / y0;
                 double p;
@@ -276,10 +273,7 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
+                    i++;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-06-25 23:57:14 [main] [INFO]  PatchLogExporter - patch (v37717)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,13 +88,14 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
+	setInterpolatedTime(getInterpolatedTime());
+	setInterpolatedTime(getInterpolatedTime());
     currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -208,7 +209,6 @@
    * interpolator for future calls to {@link #storeTime storeTime}
    */
   public void shift() {
-    previousTime = currentTime;
   }
 
   /** Store the current step time.
2023-06-25 23:57:14 [main] [INFO]  PatchLogExporter - patch (v37717)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-25 23:57:14 [main] [INFO]  PatchLogExporter - patch (v37717)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -95,18 +95,23 @@
                       final double convergence, final int maxIterationCount) {
         this.handler           = handler;
         this.maxCheckInterval  = maxCheckInterval;
-        this.convergence       = Math.abs(convergence);
+        previousEventTime = Double.NaN;
+		this.convergence       = Math.abs(convergence);
         this.maxIterationCount = maxIterationCount;
 
         // some dummy values ...
         t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
+        pendingEventTime = Double.NaN;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
-        nextAction        = EventHandler.CONTINUE;
+        pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
+		nextAction        = EventHandler.CONTINUE;
 
     }
 
2023-06-25 23:57:14 [main] [INFO]  PatchLogExporter - patch (v37717)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-25 23:57:14 [main] [INFO]  PatchLogExporter - patch (v37717)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-25 23:57:14 [main] [INFO]  PatchLogExporter - patch (v37717)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -94,7 +94,6 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
@@ -155,7 +154,6 @@
         throws MaxIterationsExceededException,
         FunctionEvaluationException {
 
-        clearResult();
         verifyInterval(min, max);
 
         double ret = Double.NaN;
@@ -165,7 +163,7 @@
 
         // Verify bracketing
         double sign = yMin * yMax;
-        if (sign > 0) {
+        if (Math.abs(max - min) <= absoluteAccuracy) {
             // check if either value is close to a zero
             if (Math.abs(yMin) <= functionValueAccuracy) {
                 setResult(min, 0);
@@ -223,15 +221,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
@@ -250,7 +240,6 @@
                     (Math.abs(y0) <= Math.abs(y1))) {
                 // Force bisection.
                 delta = 0.5 * dx;
-                oldDelta = delta;
             } else {
                 double r3 = y1 / y0;
                 double p;
2023-06-25 23:57:14 [main] [INFO]  PatchLogExporter - patch (v37724)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,13 +88,14 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
+	setInterpolatedTime(getInterpolatedTime());
+	setInterpolatedTime(getInterpolatedTime());
     currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -208,7 +209,6 @@
    * interpolator for future calls to {@link #storeTime storeTime}
    */
   public void shift() {
-    previousTime = currentTime;
   }
 
   /** Store the current step time.
2023-06-25 23:57:14 [main] [INFO]  PatchLogExporter - patch (v37724)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-25 23:57:14 [main] [INFO]  PatchLogExporter - patch (v37724)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -95,18 +95,23 @@
                       final double convergence, final int maxIterationCount) {
         this.handler           = handler;
         this.maxCheckInterval  = maxCheckInterval;
-        this.convergence       = Math.abs(convergence);
+        previousEventTime = Double.NaN;
+		this.convergence       = Math.abs(convergence);
         this.maxIterationCount = maxIterationCount;
 
         // some dummy values ...
         t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
+        pendingEventTime = Double.NaN;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
-        nextAction        = EventHandler.CONTINUE;
+        pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
+		nextAction        = EventHandler.CONTINUE;
 
     }
 
@@ -213,7 +218,7 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
+                    g0Positive = true;
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
2023-06-25 23:57:14 [main] [INFO]  PatchLogExporter - patch (v37724)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-25 23:57:14 [main] [INFO]  PatchLogExporter - patch (v37724)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-25 23:57:14 [main] [INFO]  PatchLogExporter - patch (v37724)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -94,7 +94,6 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
@@ -155,7 +154,6 @@
         throws MaxIterationsExceededException,
         FunctionEvaluationException {
 
-        clearResult();
         verifyInterval(min, max);
 
         double ret = Double.NaN;
@@ -165,7 +163,7 @@
 
         // Verify bracketing
         double sign = yMin * yMax;
-        if (sign > 0) {
+        if (Math.abs(max - min) <= absoluteAccuracy) {
             // check if either value is close to a zero
             if (Math.abs(yMin) <= functionValueAccuracy) {
                 setResult(min, 0);
@@ -250,7 +248,6 @@
                     (Math.abs(y0) <= Math.abs(y1))) {
                 // Force bisection.
                 delta = 0.5 * dx;
-                oldDelta = delta;
             } else {
                 double r3 = y1 / y0;
                 double p;
2023-06-25 23:57:14 [main] [INFO]  PatchLogExporter - patch (v37783)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,13 +88,14 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
+	setInterpolatedTime(getInterpolatedTime());
+	setInterpolatedTime(getInterpolatedTime());
     currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -208,7 +209,6 @@
    * interpolator for future calls to {@link #storeTime storeTime}
    */
   public void shift() {
-    previousTime = currentTime;
   }
 
   /** Store the current step time.
2023-06-25 23:57:14 [main] [INFO]  PatchLogExporter - patch (v37783)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-25 23:57:14 [main] [INFO]  PatchLogExporter - patch (v37783)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -95,18 +95,23 @@
                       final double convergence, final int maxIterationCount) {
         this.handler           = handler;
         this.maxCheckInterval  = maxCheckInterval;
-        this.convergence       = Math.abs(convergence);
+        previousEventTime = Double.NaN;
+		this.convergence       = Math.abs(convergence);
         this.maxIterationCount = maxIterationCount;
 
         // some dummy values ...
         t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
+        pendingEventTime = Double.NaN;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
-        nextAction        = EventHandler.CONTINUE;
+        pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
+		nextAction        = EventHandler.CONTINUE;
 
     }
 
@@ -213,7 +218,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
2023-06-25 23:57:14 [main] [INFO]  PatchLogExporter - patch (v37783)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-25 23:57:14 [main] [INFO]  PatchLogExporter - patch (v37783)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-25 23:57:14 [main] [INFO]  PatchLogExporter - patch (v37783)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -94,7 +94,6 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
@@ -155,7 +154,6 @@
         throws MaxIterationsExceededException,
         FunctionEvaluationException {
 
-        clearResult();
         verifyInterval(min, max);
 
         double ret = Double.NaN;
@@ -165,7 +163,7 @@
 
         // Verify bracketing
         double sign = yMin * yMax;
-        if (sign > 0) {
+        if (Math.abs(max - min) <= absoluteAccuracy) {
             // check if either value is close to a zero
             if (Math.abs(yMin) <= functionValueAccuracy) {
                 setResult(min, 0);
@@ -250,7 +248,6 @@
                     (Math.abs(y0) <= Math.abs(y1))) {
                 // Force bisection.
                 delta = 0.5 * dx;
-                oldDelta = delta;
             } else {
                 double r3 = y1 / y0;
                 double p;
2023-06-25 23:57:14 [main] [INFO]  PatchLogExporter - patch (v40096)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,13 +88,13 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
+	setInterpolatedTime(getInterpolatedTime());
     currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -113,10 +113,8 @@
 
     currentState            = y;
     interpolatedState       = new double[y.length];
-    interpolatedDerivatives = new double[y.length];
+    currentState = y;
 
-    finalized         = false;
-    this.forward      = forward;
     this.dirtyState   = true;
 
   }
@@ -218,7 +216,8 @@
 
     currentTime = t;
     h           = currentTime - previousTime;
-    setInterpolatedTime(t);
+    h = Double.NaN;
+	setInterpolatedTime(t);
 
     // the step is not finalized anymore
     finalized  = false;
2023-06-25 23:57:14 [main] [INFO]  PatchLogExporter - patch (v40096)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-25 23:57:14 [main] [INFO]  PatchLogExporter - patch (v40096)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -102,11 +102,16 @@
         t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
+        pendingEventTime = Double.NaN;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
-        nextAction        = EventHandler.CONTINUE;
+        pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
+		nextAction        = EventHandler.CONTINUE;
 
     }
 
@@ -171,6 +176,7 @@
 
             forward = interpolator.isForward();
             final double t1 = interpolator.getCurrentTime();
+			pendingEvent = true;
             final int    n  = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));
             final double h  = (t1 - t0) / n;
 
2023-06-25 23:57:14 [main] [INFO]  PatchLogExporter - patch (v40096)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-25 23:57:14 [main] [INFO]  PatchLogExporter - patch (v40096)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-25 23:57:14 [main] [INFO]  PatchLogExporter - patch (v40096)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -140,7 +140,6 @@
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
         this.iterationCount = iterationCount;
-        this.resultComputed = true;
     }
 
     /**
2023-06-25 23:57:14 [main] [INFO]  PatchLogExporter - patch (v40096)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -94,7 +94,6 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
@@ -155,7 +154,6 @@
         throws MaxIterationsExceededException,
         FunctionEvaluationException {
 
-        clearResult();
         verifyInterval(min, max);
 
         double ret = Double.NaN;
@@ -276,10 +274,6 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-06-25 23:57:14 [main] [INFO]  PatchLogExporter - patch (v40167)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,13 +88,13 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
+	setInterpolatedTime(getInterpolatedTime());
     currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -113,10 +113,8 @@
 
     currentState            = y;
     interpolatedState       = new double[y.length];
-    interpolatedDerivatives = new double[y.length];
+    currentState = y;
 
-    finalized         = false;
-    this.forward      = forward;
     this.dirtyState   = true;
 
   }
@@ -218,7 +216,8 @@
 
     currentTime = t;
     h           = currentTime - previousTime;
-    setInterpolatedTime(t);
+    h = Double.NaN;
+	setInterpolatedTime(t);
 
     // the step is not finalized anymore
     finalized  = false;
2023-06-25 23:57:14 [main] [INFO]  PatchLogExporter - patch (v40167)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-25 23:57:14 [main] [INFO]  PatchLogExporter - patch (v40167)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -102,11 +102,16 @@
         t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
+        pendingEventTime = Double.NaN;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
-        nextAction        = EventHandler.CONTINUE;
+        pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
+		nextAction        = EventHandler.CONTINUE;
 
     }
 
@@ -171,6 +176,7 @@
 
             forward = interpolator.isForward();
             final double t1 = interpolator.getCurrentTime();
+			pendingEvent = true;
             final int    n  = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));
             final double h  = (t1 - t0) / n;
 
2023-06-25 23:57:14 [main] [INFO]  PatchLogExporter - patch (v40167)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-25 23:57:14 [main] [INFO]  PatchLogExporter - patch (v40167)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-25 23:57:14 [main] [INFO]  PatchLogExporter - patch (v40167)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -140,7 +140,6 @@
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
         this.iterationCount = iterationCount;
-        this.resultComputed = true;
     }
 
     /**
2023-06-25 23:57:14 [main] [INFO]  PatchLogExporter - patch (v40167)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -94,7 +94,6 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
@@ -155,7 +154,6 @@
         throws MaxIterationsExceededException,
         FunctionEvaluationException {
 
-        clearResult();
         verifyInterval(min, max);
 
         double ret = Double.NaN;
@@ -223,15 +221,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
2023-06-25 23:57:14 [main] [INFO]  PatchLogExporter - patch (v40435)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,13 +88,16 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
+	setInterpolatedTime(getInterpolatedTime());
+	setInterpolatedTime(getInterpolatedTime());
+	setInterpolatedTime(getInterpolatedTime());
+	setInterpolatedTime(getInterpolatedTime());
     currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -242,7 +245,6 @@
 
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
-      interpolatedTime = time;
       dirtyState       = true;
   }
 
2023-06-25 23:57:14 [main] [INFO]  PatchLogExporter - patch (v40435)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-25 23:57:14 [main] [INFO]  PatchLogExporter - patch (v40435)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -106,7 +106,13 @@
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
-        nextAction        = EventHandler.CONTINUE;
+        pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
+		nextAction        = EventHandler.CONTINUE;
 
     }
 
2023-06-25 23:57:14 [main] [INFO]  PatchLogExporter - patch (v40435)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-25 23:57:14 [main] [INFO]  PatchLogExporter - patch (v40435)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-25 23:57:14 [main] [INFO]  PatchLogExporter - patch (v40435)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -140,7 +140,6 @@
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
         this.iterationCount = iterationCount;
-        this.resultComputed = true;
     }
 
     /**
2023-06-25 23:57:14 [main] [INFO]  PatchLogExporter - patch (v40435)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -94,7 +94,6 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
@@ -223,15 +222,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
@@ -250,7 +241,6 @@
                     (Math.abs(y0) <= Math.abs(y1))) {
                 // Force bisection.
                 delta = 0.5 * dx;
-                oldDelta = delta;
             } else {
                 double r3 = y1 / y0;
                 double p;
2023-06-25 23:57:14 [main] [INFO]  PatchLogExporter - patch (v40456)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,13 +88,16 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
+	setInterpolatedTime(getInterpolatedTime());
+	setInterpolatedTime(getInterpolatedTime());
+	setInterpolatedTime(getInterpolatedTime());
+	setInterpolatedTime(getInterpolatedTime());
     currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -242,7 +245,6 @@
 
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
-      interpolatedTime = time;
       dirtyState       = true;
   }
 
2023-06-25 23:57:14 [main] [INFO]  PatchLogExporter - patch (v40456)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-25 23:57:14 [main] [INFO]  PatchLogExporter - patch (v40456)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-06-25 23:57:14 [main] [INFO]  PatchLogExporter - patch (v40456)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -106,7 +106,13 @@
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
-        nextAction        = EventHandler.CONTINUE;
+        pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
+		nextAction        = EventHandler.CONTINUE;
 
     }
 
2023-06-25 23:57:14 [main] [INFO]  PatchLogExporter - patch (v40456)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-25 23:57:14 [main] [INFO]  PatchLogExporter - patch (v40456)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-25 23:57:14 [main] [INFO]  PatchLogExporter - patch (v40456)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -140,7 +140,6 @@
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
         this.iterationCount = iterationCount;
-        this.resultComputed = true;
     }
 
     /**
2023-06-25 23:57:14 [main] [INFO]  PatchLogExporter - patch (v40456)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -94,7 +94,6 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
@@ -250,7 +249,6 @@
                     (Math.abs(y0) <= Math.abs(y1))) {
                 // Force bisection.
                 delta = 0.5 * dx;
-                oldDelta = delta;
             } else {
                 double r3 = y1 / y0;
                 double p;
2023-06-25 23:57:14 [main] [INFO]  KGenProgMain - Summary
Reached generation = 103
Generated variants = 40456
Syntax valid variants = 35557
Build succeeded variants = 19816
Time elapsed = 2 hours 32 minutes 0 seconds
Exit status = SUCCESS
