2023-06-26 21:00:25 [main] [WARN]  Configuration$Builder - The directory where kGenProg is running is different from the root directory of the given target project.
2023-06-26 21:00:25 [main] [WARN]  Configuration$Builder - If the target project includes test cases with file I/O, such test cases won't run correctly.
2023-06-26 21:00:25 [main] [WARN]  Configuration$Builder - We recommend you running kGenProg with the root directory of the target project as the current directory.
2023-06-26 21:00:26 [main] [INFO]  KGenProgMain - 
==================== kGenProg Configuration ====================
configPath = /Users/haradakanon/Downloads/kGenProg-1.8.2/example/math78/kgenprog-78.toml (set by command line)
rootDir = /Users/haradakanon/Downloads/kGenProg-1.8.2/example/math78 (set in config file)
productPaths = [/Users/haradakanon/Downloads/kGenProg-1.8.2/example/math78/src/main] (set in config file)
testPaths = [/Users/haradakanon/Downloads/kGenProg-1.8.2/example/math78/src/test] (set in config file)
classPaths = []
executionTests = [org.apache.commons.math.ode.events.EventStateTest] (set in config file)
outDir = kgenprog-out
logLevel = INFO (set in config file)
mutationGeneratingCount = 200 (set in config file)
crossoverGeneratingCount = 200 (set in config file)
headcount = 100
maxGeneration = 1000 (set in config file)
timeLimit = PT277H46M40S (set in config file)
testTimeLimit = PT3M (set in config file)
requiredSolutionsCount = 100 (set in config file)
randomSeed = 8 (set by command line)
scope = PACKAGE (set in config file)
faultLocalization = Zoltar (set in config file)
mutationType = Simple
crossoverType = Random
firstVariantSelectionStrategy = Random
secondVariantSelectionStrategy = Random
isPatchOutput = true (set in config file)
isHistoryRecord = false
currentDirectory = /Users/haradakanon/Desktop/研究/実験データ/afterResearch
version = 1.8.2
================================================================
2023-06-26 21:00:44 [main] [INFO]  KGenProgMain - initial failed tests (1/1)
org.apache.commons.math.ode.events.EventStateTest.closeEvents: function values at endpoints do not have different signs.  Endpoints: [89.999, 153.1], Values: [-0.066, -1,142.11]

2023-06-26 21:00:45 [main] [INFO]  KGenProgMain - GA started
2023-06-26 21:00:45 [main] [INFO]  KGenProgMain - entered the era of 1st generation.
2023-06-26 21:01:03 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 18 seconds
Variants: generated 200, build-succeeded 48, build-failed 126, syntax-invalid 10, redundant 16
Fitness: max 1(1), min 0(47), ave 0.021
Test execution time: sum 5130 ms, max 354 ms, min 58 ms
----------------------------------------------------------------

2023-06-26 21:01:03 [main] [INFO]  KGenProgMain - entered the era of 2nd generation.
2023-06-26 21:01:15 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 30 seconds
Variants: generated 200, build-succeeded 47, build-failed 122, syntax-invalid 12, redundant 19
Fitness: max 0(47), min 0(47), ave 0
Test execution time: sum 3325 ms, max 165 ms, min 55 ms
----------------------------------------------------------------

2023-06-26 21:01:15 [main] [INFO]  KGenProgMain - entered the era of 3rd generation.
2023-06-26 21:01:32 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 47 seconds
Variants: generated 400, build-succeeded 86, build-failed 120, syntax-invalid 14, redundant 180
Fitness: max 0(86), min 0(86), ave 0
Test execution time: sum 5430 ms, max 213 ms, min 52 ms
----------------------------------------------------------------

2023-06-26 21:01:32 [main] [INFO]  KGenProgMain - entered the era of 4th generation.
2023-06-26 21:01:50 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 minutes 5 seconds
Variants: generated 400, build-succeeded 116, build-failed 127, syntax-invalid 16, redundant 141
Fitness: max 0(116), min 0(116), ave 0
Test execution time: sum 6928 ms, max 152 ms, min 51 ms
----------------------------------------------------------------

2023-06-26 21:01:50 [main] [INFO]  KGenProgMain - entered the era of 5th generation.
2023-06-26 21:02:09 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 minutes 24 seconds
Variants: generated 400, build-succeeded 132, build-failed 123, syntax-invalid 13, redundant 132
Fitness: max 0(132), min 0(132), ave 0
Test execution time: sum 7401 ms, max 127 ms, min 50 ms
----------------------------------------------------------------

2023-06-26 21:02:09 [main] [INFO]  KGenProgMain - entered the era of 6th generation.
2023-06-26 21:02:32 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 minutes 47 seconds
Variants: generated 400, build-succeeded 164, build-failed 123, syntax-invalid 18, redundant 95
Fitness: max 0(164), min 0(164), ave 0
Test execution time: sum 9469 ms, max 210 ms, min 49 ms
----------------------------------------------------------------

2023-06-26 21:02:32 [main] [INFO]  KGenProgMain - entered the era of 7th generation.
2023-06-26 21:02:57 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 minutes 11 seconds
Variants: generated 400, build-succeeded 186, build-failed 116, syntax-invalid 28, redundant 70
Fitness: max 1(6), min 0(180), ave 0.032
Test execution time: sum 11233 ms, max 205 ms, min 49 ms
----------------------------------------------------------------

2023-06-26 21:02:57 [main] [INFO]  KGenProgMain - entered the era of 8th generation.
2023-06-26 21:03:20 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 minutes 35 seconds
Variants: generated 400, build-succeeded 184, build-failed 118, syntax-invalid 29, redundant 69
Fitness: max 0(184), min 0(184), ave 0
Test execution time: sum 10607 ms, max 206 ms, min 50 ms
----------------------------------------------------------------

2023-06-26 21:03:20 [main] [INFO]  KGenProgMain - entered the era of 9th generation.
2023-06-26 21:03:45 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 minutes 0 seconds
Variants: generated 400, build-succeeded 181, build-failed 123, syntax-invalid 25, redundant 71
Fitness: max 0(181), min 0(181), ave 0
Test execution time: sum 10357 ms, max 208 ms, min 49 ms
----------------------------------------------------------------

2023-06-26 21:03:45 [main] [INFO]  KGenProgMain - entered the era of 10th generation.
2023-06-26 21:04:07 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 minutes 22 seconds
Variants: generated 400, build-succeeded 182, build-failed 127, syntax-invalid 30, redundant 61
Fitness: max 0(182), min 0(182), ave 0
Test execution time: sum 10192 ms, max 204 ms, min 49 ms
----------------------------------------------------------------

2023-06-26 21:04:07 [main] [INFO]  KGenProgMain - entered the era of 11th generation.
2023-06-26 21:04:32 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 minutes 47 seconds
Variants: generated 400, build-succeeded 205, build-failed 115, syntax-invalid 29, redundant 51
Fitness: max 0(205), min 0(205), ave 0
Test execution time: sum 11632 ms, max 247 ms, min 49 ms
----------------------------------------------------------------

2023-06-26 21:04:32 [main] [INFO]  KGenProgMain - entered the era of 12th generation.
2023-06-26 21:05:04 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 minutes 18 seconds
Variants: generated 400, build-succeeded 205, build-failed 113, syntax-invalid 27, redundant 55
Fitness: max 1(3), min 0(202), ave 0.015
Test execution time: sum 13484 ms, max 221 ms, min 51 ms
----------------------------------------------------------------

2023-06-26 21:05:04 [main] [INFO]  KGenProgMain - entered the era of 13th generation.
2023-06-26 21:05:29 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 minutes 44 seconds
Variants: generated 400, build-succeeded 203, build-failed 122, syntax-invalid 24, redundant 51
Fitness: max 0(203), min 0(203), ave 0
Test execution time: sum 11786 ms, max 144 ms, min 49 ms
----------------------------------------------------------------

2023-06-26 21:05:29 [main] [INFO]  KGenProgMain - entered the era of 14th generation.
2023-06-26 21:06:00 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 minutes 15 seconds
Variants: generated 400, build-succeeded 199, build-failed 121, syntax-invalid 21, redundant 59
Fitness: max 1(3), min 0(196), ave 0.015
Test execution time: sum 13084 ms, max 197 ms, min 50 ms
----------------------------------------------------------------

2023-06-26 21:06:00 [main] [INFO]  KGenProgMain - entered the era of 15th generation.
2023-06-26 21:06:27 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 minutes 42 seconds
Variants: generated 400, build-succeeded 215, build-failed 108, syntax-invalid 30, redundant 47
Fitness: max 1(4), min 0(211), ave 0.019
Test execution time: sum 12304 ms, max 143 ms, min 49 ms
----------------------------------------------------------------

2023-06-26 21:06:27 [main] [INFO]  KGenProgMain - entered the era of 16th generation.
2023-06-26 21:06:53 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 minutes 8 seconds
Variants: generated 400, build-succeeded 216, build-failed 122, syntax-invalid 23, redundant 39
Fitness: max 1(3), min 0(213), ave 0.014
Test execution time: sum 12673 ms, max 181 ms, min 50 ms
----------------------------------------------------------------

2023-06-26 21:06:53 [main] [INFO]  KGenProgMain - entered the era of 17th generation.
2023-06-26 21:07:21 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 minutes 36 seconds
Variants: generated 400, build-succeeded 221, build-failed 123, syntax-invalid 19, redundant 37
Fitness: max 1(1), min 0(220), ave 0.005
Test execution time: sum 12693 ms, max 152 ms, min 51 ms
----------------------------------------------------------------

2023-06-26 21:07:21 [main] [INFO]  KGenProgMain - entered the era of 18th generation.
2023-06-26 21:07:49 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 minutes 3 seconds
Variants: generated 400, build-succeeded 224, build-failed 117, syntax-invalid 31, redundant 28
Fitness: max 1(3), min 0(221), ave 0.013
Test execution time: sum 12699 ms, max 177 ms, min 49 ms
----------------------------------------------------------------

2023-06-26 21:07:49 [main] [INFO]  KGenProgMain - entered the era of 19th generation.
2023-06-26 21:08:16 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 minutes 31 seconds
Variants: generated 400, build-succeeded 206, build-failed 115, syntax-invalid 14, redundant 65
Fitness: max 0(206), min 0(206), ave 0
Test execution time: sum 11801 ms, max 161 ms, min 49 ms
----------------------------------------------------------------

2023-06-26 21:08:16 [main] [INFO]  KGenProgMain - entered the era of 20th generation.
2023-06-26 21:08:53 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 minutes 8 seconds
Variants: generated 400, build-succeeded 215, build-failed 113, syntax-invalid 27, redundant 45
Fitness: max 1(2), min 0(213), ave 0.009
Test execution time: sum 14632 ms, max 236 ms, min 51 ms
----------------------------------------------------------------

2023-06-26 21:08:53 [main] [INFO]  KGenProgMain - entered the era of 21st generation.
2023-06-26 21:09:23 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 minutes 38 seconds
Variants: generated 400, build-succeeded 208, build-failed 121, syntax-invalid 42, redundant 29
Fitness: max 1(3), min 0(205), ave 0.014
Test execution time: sum 12072 ms, max 144 ms, min 50 ms
----------------------------------------------------------------

2023-06-26 21:09:23 [main] [INFO]  KGenProgMain - entered the era of 22nd generation.
2023-06-26 21:09:52 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 minutes 7 seconds
Variants: generated 400, build-succeeded 221, build-failed 125, syntax-invalid 21, redundant 33
Fitness: max 0(221), min 0(221), ave 0
Test execution time: sum 12755 ms, max 182 ms, min 48 ms
----------------------------------------------------------------

2023-06-26 21:09:52 [main] [INFO]  KGenProgMain - entered the era of 23rd generation.
2023-06-26 21:10:28 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 minutes 42 seconds
Variants: generated 400, build-succeeded 215, build-failed 119, syntax-invalid 38, redundant 28
Fitness: max 1(1), min 0(214), ave 0.005
Test execution time: sum 13633 ms, max 182 ms, min 51 ms
----------------------------------------------------------------

2023-06-26 21:10:28 [main] [INFO]  KGenProgMain - entered the era of 24th generation.
2023-06-26 21:10:57 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 10 minutes 12 seconds
Variants: generated 400, build-succeeded 228, build-failed 115, syntax-invalid 32, redundant 25
Fitness: max 1(2), min 0(226), ave 0.009
Test execution time: sum 13389 ms, max 179 ms, min 51 ms
----------------------------------------------------------------

2023-06-26 21:10:57 [main] [INFO]  KGenProgMain - entered the era of 25th generation.
2023-06-26 21:14:28 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 13 minutes 43 seconds
Variants: generated 400, build-succeeded 224, build-failed 116, syntax-invalid 31, redundant 29
Fitness: max 1(1), min 0(223), ave 0.004
Test execution time: sum 192866 ms, max 180067 ms, min 48 ms
----------------------------------------------------------------

2023-06-26 21:14:28 [main] [INFO]  KGenProgMain - entered the era of 26th generation.
2023-06-26 21:18:00 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 17 minutes 15 seconds
Variants: generated 400, build-succeeded 218, build-failed 103, syntax-invalid 45, redundant 34
Fitness: max 1(4), min 0(214), ave 0.018
Test execution time: sum 192828 ms, max 180065 ms, min 50 ms
----------------------------------------------------------------

2023-06-26 21:18:00 [main] [INFO]  KGenProgMain - entered the era of 27th generation.
2023-06-26 21:21:43 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 20 minutes 58 seconds
Variants: generated 400, build-succeeded 205, build-failed 116, syntax-invalid 44, redundant 35
Fitness: max 1(1), min 0(204), ave 0.005
Test execution time: sum 194300 ms, max 180066 ms, min 50 ms
----------------------------------------------------------------

2023-06-26 21:21:43 [main] [INFO]  KGenProgMain - entered the era of 28th generation.
2023-06-26 21:28:21 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 27 minutes 36 seconds
Variants: generated 400, build-succeeded 214, build-failed 112, syntax-invalid 36, redundant 38
Fitness: max 0(214), min 0(214), ave 0
Test execution time: sum 373433 ms, max 180072 ms, min 49 ms
----------------------------------------------------------------

2023-06-26 21:28:21 [main] [INFO]  KGenProgMain - entered the era of 29th generation.
2023-06-26 21:44:02 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 43 minutes 17 seconds
Variants: generated 400, build-succeeded 219, build-failed 118, syntax-invalid 33, redundant 30
Fitness: max 0(219), min 0(219), ave 0
Test execution time: sum 913580 ms, max 180113 ms, min 49 ms
----------------------------------------------------------------

2023-06-26 21:44:02 [main] [INFO]  KGenProgMain - entered the era of 30th generation.
2023-06-26 21:53:41 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 52 minutes 55 seconds
Variants: generated 400, build-succeeded 222, build-failed 118, syntax-invalid 23, redundant 37
Fitness: max 0(222), min 0(222), ave 0
Test execution time: sum 553898 ms, max 180069 ms, min 49 ms
----------------------------------------------------------------

2023-06-26 21:53:41 [main] [INFO]  KGenProgMain - entered the era of 31st generation.
2023-06-26 22:03:23 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 2 minutes 38 seconds
Variants: generated 400, build-succeeded 223, build-failed 116, syntax-invalid 30, redundant 31
Fitness: max 1(1), min 0(222), ave 0.004
Test execution time: sum 554311 ms, max 180123 ms, min 50 ms
----------------------------------------------------------------

2023-06-26 22:03:23 [main] [INFO]  KGenProgMain - entered the era of 32nd generation.
2023-06-26 22:13:07 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 12 minutes 20 seconds
Variants: generated 400, build-succeeded 222, build-failed 106, syntax-invalid 37, redundant 35
Fitness: max 1(1), min 0(221), ave 0.005
Test execution time: sum 553906 ms, max 180063 ms, min 50 ms
----------------------------------------------------------------

2023-06-26 22:13:07 [main] [INFO]  KGenProgMain - entered the era of 33rd generation.
2023-06-26 22:16:47 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 16 minutes 0 seconds
Variants: generated 400, build-succeeded 226, build-failed 119, syntax-invalid 31, redundant 24
Fitness: max 1(6), min 0(220), ave 0.027
Test execution time: sum 194139 ms, max 180083 ms, min 50 ms
----------------------------------------------------------------

2023-06-26 22:16:47 [main] [INFO]  KGenProgMain - entered the era of 34th generation.
2023-06-26 22:20:30 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 19 minutes 42 seconds
Variants: generated 400, build-succeeded 236, build-failed 113, syntax-invalid 25, redundant 26
Fitness: max 1(4), min 0(232), ave 0.017
Test execution time: sum 194658 ms, max 180064 ms, min 50 ms
----------------------------------------------------------------

2023-06-26 22:20:30 [main] [INFO]  KGenProgMain - entered the era of 35th generation.
2023-06-26 22:21:10 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 20 minutes 22 seconds
Variants: generated 400, build-succeeded 228, build-failed 124, syntax-invalid 26, redundant 22
Fitness: max 1(7), min 0(221), ave 0.031
Test execution time: sum 14242 ms, max 181 ms, min 49 ms
----------------------------------------------------------------

2023-06-26 22:21:10 [main] [INFO]  KGenProgMain - entered the era of 36th generation.
2023-06-26 22:24:53 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 24 minutes 6 seconds
Variants: generated 400, build-succeeded 239, build-failed 120, syntax-invalid 19, redundant 22
Fitness: max 1(5), min 0(234), ave 0.021
Test execution time: sum 195223 ms, max 180177 ms, min 49 ms
----------------------------------------------------------------

2023-06-26 22:24:53 [main] [INFO]  KGenProgMain - entered the era of 37th generation.
2023-06-26 22:34:35 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 33 minutes 48 seconds
Variants: generated 400, build-succeeded 224, build-failed 129, syntax-invalid 20, redundant 27
Fitness: max 1(4), min 0(220), ave 0.018
Test execution time: sum 553950 ms, max 180095 ms, min 50 ms
----------------------------------------------------------------

2023-06-26 22:34:35 [main] [INFO]  KGenProgMain - entered the era of 38th generation.
2023-06-26 22:35:19 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 34 minutes 32 seconds
Variants: generated 400, build-succeeded 224, build-failed 135, syntax-invalid 18, redundant 23
Fitness: max 1(2), min 0(222), ave 0.009
Test execution time: sum 14363 ms, max 168 ms, min 50 ms
----------------------------------------------------------------

2023-06-26 22:35:19 [main] [INFO]  KGenProgMain - entered the era of 39th generation.
2023-06-26 22:36:00 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 35 minutes 12 seconds
Variants: generated 400, build-succeeded 226, build-failed 123, syntax-invalid 26, redundant 25
Fitness: max 1(1), min 0(225), ave 0.004
Test execution time: sum 13717 ms, max 165 ms, min 50 ms
----------------------------------------------------------------

2023-06-26 22:36:00 [main] [INFO]  KGenProgMain - entered the era of 40th generation.
2023-06-26 22:36:40 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 35 minutes 53 seconds
Variants: generated 400, build-succeeded 223, build-failed 133, syntax-invalid 16, redundant 28
Fitness: max 1(2), min 0(221), ave 0.009
Test execution time: sum 13295 ms, max 171 ms, min 49 ms
----------------------------------------------------------------

2023-06-26 22:36:40 [main] [INFO]  KGenProgMain - entered the era of 41st generation.
2023-06-26 22:37:21 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 36 minutes 34 seconds
Variants: generated 400, build-succeeded 230, build-failed 121, syntax-invalid 25, redundant 24
Fitness: max 1(2), min 0(228), ave 0.009
Test execution time: sum 14047 ms, max 171 ms, min 50 ms
----------------------------------------------------------------

2023-06-26 22:37:21 [main] [INFO]  KGenProgMain - entered the era of 42nd generation.
2023-06-26 22:38:02 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 37 minutes 14 seconds
Variants: generated 400, build-succeeded 216, build-failed 128, syntax-invalid 22, redundant 34
Fitness: max 0(216), min 0(216), ave 0
Test execution time: sum 12978 ms, max 176 ms, min 50 ms
----------------------------------------------------------------

2023-06-26 22:38:02 [main] [INFO]  KGenProgMain - entered the era of 43rd generation.
2023-06-26 22:38:44 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 37 minutes 56 seconds
Variants: generated 400, build-succeeded 227, build-failed 113, syntax-invalid 23, redundant 37
Fitness: max 0(227), min 0(227), ave 0
Test execution time: sum 13488 ms, max 169 ms, min 50 ms
----------------------------------------------------------------

2023-06-26 22:38:44 [main] [INFO]  KGenProgMain - entered the era of 44th generation.
2023-06-26 22:39:27 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 38 minutes 39 seconds
Variants: generated 400, build-succeeded 234, build-failed 122, syntax-invalid 27, redundant 17
Fitness: max 1(1), min 0(233), ave 0.004
Test execution time: sum 14142 ms, max 163 ms, min 49 ms
----------------------------------------------------------------

2023-06-26 22:39:27 [main] [INFO]  KGenProgMain - entered the era of 45th generation.
2023-06-26 22:40:09 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 39 minutes 22 seconds
Variants: generated 400, build-succeeded 227, build-failed 131, syntax-invalid 19, redundant 23
Fitness: max 1(1), min 0(226), ave 0.004
Test execution time: sum 13515 ms, max 180 ms, min 50 ms
----------------------------------------------------------------

2023-06-26 22:40:09 [main] [INFO]  KGenProgMain - entered the era of 46th generation.
2023-06-26 22:40:53 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 40 minutes 5 seconds
Variants: generated 400, build-succeeded 236, build-failed 112, syntax-invalid 29, redundant 23
Fitness: max 0(236), min 0(236), ave 0
Test execution time: sum 14035 ms, max 161 ms, min 50 ms
----------------------------------------------------------------

2023-06-26 22:40:53 [main] [INFO]  KGenProgMain - entered the era of 47th generation.
2023-06-26 22:41:33 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 40 minutes 46 seconds
Variants: generated 400, build-succeeded 225, build-failed 117, syntax-invalid 35, redundant 23
Fitness: max 1(1), min 0(224), ave 0.004
Test execution time: sum 13205 ms, max 162 ms, min 50 ms
----------------------------------------------------------------

2023-06-26 22:41:33 [main] [INFO]  KGenProgMain - entered the era of 48th generation.
2023-06-26 22:42:12 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 41 minutes 25 seconds
Variants: generated 400, build-succeeded 237, build-failed 118, syntax-invalid 21, redundant 24
Fitness: max 0(237), min 0(237), ave 0
Test execution time: sum 13829 ms, max 170 ms, min 50 ms
----------------------------------------------------------------

2023-06-26 22:42:12 [main] [INFO]  KGenProgMain - entered the era of 49th generation.
2023-06-26 22:48:52 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 48 minutes 5 seconds
Variants: generated 400, build-succeeded 226, build-failed 127, syntax-invalid 25, redundant 22
Fitness: max 0(226), min 0(226), ave 0
Test execution time: sum 373484 ms, max 180093 ms, min 50 ms
----------------------------------------------------------------

2023-06-26 22:48:52 [main] [INFO]  KGenProgMain - entered the era of 50th generation.
2023-06-26 22:58:37 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 57 minutes 50 seconds
Variants: generated 400, build-succeeded 233, build-failed 121, syntax-invalid 26, redundant 20
Fitness: max 1(1), min 0(232), ave 0.004
Test execution time: sum 554583 ms, max 180127 ms, min 50 ms
----------------------------------------------------------------

2023-06-26 22:58:37 [main] [INFO]  KGenProgMain - entered the era of 51st generation.
2023-06-26 23:05:25 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 4 minutes 38 seconds
Variants: generated 400, build-succeeded 218, build-failed 119, syntax-invalid 39, redundant 24
Fitness: max 1(1), min 0(217), ave 0.005
Test execution time: sum 374318 ms, max 180079 ms, min 51 ms
----------------------------------------------------------------

2023-06-26 23:05:25 [main] [INFO]  KGenProgMain - entered the era of 52nd generation.
2023-06-26 23:06:14 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 5 minutes 26 seconds
Variants: generated 400, build-succeeded 228, build-failed 117, syntax-invalid 25, redundant 30
Fitness: max 1(2), min 0(226), ave 0.009
Test execution time: sum 14640 ms, max 173 ms, min 50 ms
----------------------------------------------------------------

2023-06-26 23:06:14 [main] [INFO]  KGenProgMain - entered the era of 53rd generation.
2023-06-26 23:07:00 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 6 minutes 13 seconds
Variants: generated 400, build-succeeded 230, build-failed 121, syntax-invalid 30, redundant 19
Fitness: max 1(3), min 0(227), ave 0.013
Test execution time: sum 14710 ms, max 175 ms, min 51 ms
----------------------------------------------------------------

2023-06-26 23:07:00 [main] [INFO]  KGenProgMain - entered the era of 54th generation.
2023-06-26 23:07:47 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 7 minutes 0 seconds
Variants: generated 400, build-succeeded 222, build-failed 124, syntax-invalid 34, redundant 20
Fitness: max 1(2), min 0(220), ave 0.009
Test execution time: sum 14104 ms, max 181 ms, min 51 ms
----------------------------------------------------------------

2023-06-26 23:07:47 [main] [INFO]  KGenProgMain - entered the era of 55th generation.
2023-06-26 23:11:34 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 10 minutes 47 seconds
Variants: generated 400, build-succeeded 219, build-failed 127, syntax-invalid 24, redundant 30
Fitness: max 0(219), min 0(219), ave 0
Test execution time: sum 194074 ms, max 180065 ms, min 51 ms
----------------------------------------------------------------

2023-06-26 23:11:34 [main] [INFO]  KGenProgMain - entered the era of 56th generation.
2023-06-26 23:12:20 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 11 minutes 32 seconds
Variants: generated 400, build-succeeded 226, build-failed 112, syntax-invalid 40, redundant 22
Fitness: max 1(2), min 0(224), ave 0.009
Test execution time: sum 14400 ms, max 176 ms, min 51 ms
----------------------------------------------------------------

2023-06-26 23:12:20 [main] [INFO]  KGenProgMain - entered the era of 57th generation.
2023-06-26 23:13:08 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 12 minutes 21 seconds
Variants: generated 400, build-succeeded 228, build-failed 110, syntax-invalid 41, redundant 21
Fitness: max 1(1), min 0(227), ave 0.004
Test execution time: sum 14499 ms, max 192 ms, min 51 ms
----------------------------------------------------------------

2023-06-26 23:13:08 [main] [INFO]  KGenProgMain - entered the era of 58th generation.
2023-06-26 23:13:55 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 13 minutes 8 seconds
Variants: generated 400, build-succeeded 219, build-failed 114, syntax-invalid 40, redundant 27
Fitness: max 0(219), min 0(219), ave 0
Test execution time: sum 13860 ms, max 165 ms, min 51 ms
----------------------------------------------------------------

2023-06-26 23:13:55 [main] [INFO]  KGenProgMain - entered the era of 59th generation.
2023-06-26 23:17:43 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 16 minutes 56 seconds
Variants: generated 400, build-succeeded 217, build-failed 118, syntax-invalid 38, redundant 27
Fitness: max 0(217), min 0(217), ave 0
Test execution time: sum 194046 ms, max 180107 ms, min 52 ms
----------------------------------------------------------------

2023-06-26 23:17:43 [main] [INFO]  KGenProgMain - entered the era of 60th generation.
2023-06-26 23:18:30 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 17 minutes 43 seconds
Variants: generated 400, build-succeeded 226, build-failed 119, syntax-invalid 32, redundant 23
Fitness: max 0(226), min 0(226), ave 0
Test execution time: sum 14360 ms, max 223 ms, min 52 ms
----------------------------------------------------------------

2023-06-26 23:18:30 [main] [INFO]  KGenProgMain - entered the era of 61st generation.
2023-06-26 23:19:23 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 18 minutes 36 seconds
Variants: generated 400, build-succeeded 212, build-failed 129, syntax-invalid 39, redundant 20
Fitness: max 1(1), min 0(211), ave 0.005
Test execution time: sum 15166 ms, max 192 ms, min 52 ms
----------------------------------------------------------------

2023-06-26 23:19:23 [main] [INFO]  KGenProgMain - entered the era of 62nd generation.
2023-06-26 23:20:10 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 19 minutes 23 seconds
Variants: generated 400, build-succeeded 226, build-failed 118, syntax-invalid 28, redundant 28
Fitness: max 0(226), min 0(226), ave 0
Test execution time: sum 14384 ms, max 184 ms, min 51 ms
----------------------------------------------------------------

2023-06-26 23:20:10 [main] [INFO]  KGenProgMain - entered the era of 63rd generation.
2023-06-26 23:20:59 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 20 minutes 12 seconds
Variants: generated 400, build-succeeded 224, build-failed 124, syntax-invalid 29, redundant 23
Fitness: max 0(224), min 0(224), ave 0
Test execution time: sum 14662 ms, max 195 ms, min 52 ms
----------------------------------------------------------------

2023-06-26 23:20:59 [main] [INFO]  KGenProgMain - entered the era of 64th generation.
2023-06-26 23:21:43 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 20 minutes 55 seconds
Variants: generated 400, build-succeeded 207, build-failed 122, syntax-invalid 43, redundant 28
Fitness: max 0(207), min 0(207), ave 0
Test execution time: sum 13082 ms, max 196 ms, min 52 ms
----------------------------------------------------------------

2023-06-26 23:21:43 [main] [INFO]  KGenProgMain - entered the era of 65th generation.
2023-06-26 23:22:29 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 21 minutes 41 seconds
Variants: generated 400, build-succeeded 220, build-failed 113, syntax-invalid 32, redundant 35
Fitness: max 0(220), min 0(220), ave 0
Test execution time: sum 13804 ms, max 179 ms, min 52 ms
----------------------------------------------------------------

2023-06-26 23:22:29 [main] [INFO]  KGenProgMain - entered the era of 66th generation.
2023-06-26 23:23:14 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 22 minutes 27 seconds
Variants: generated 400, build-succeeded 229, build-failed 118, syntax-invalid 32, redundant 21
Fitness: max 0(229), min 0(229), ave 0
Test execution time: sum 14217 ms, max 180 ms, min 51 ms
----------------------------------------------------------------

2023-06-26 23:23:14 [main] [INFO]  KGenProgMain - entered the era of 67th generation.
2023-06-26 23:24:00 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 23 minutes 13 seconds
Variants: generated 400, build-succeeded 224, build-failed 112, syntax-invalid 23, redundant 41
Fitness: max 0(224), min 0(224), ave 0
Test execution time: sum 14042 ms, max 185 ms, min 52 ms
----------------------------------------------------------------

2023-06-26 23:24:00 [main] [INFO]  KGenProgMain - entered the era of 68th generation.
2023-06-26 23:24:45 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 23 minutes 57 seconds
Variants: generated 400, build-succeeded 203, build-failed 125, syntax-invalid 47, redundant 25
Fitness: max 0(203), min 0(203), ave 0
Test execution time: sum 12797 ms, max 146 ms, min 52 ms
----------------------------------------------------------------

2023-06-26 23:24:45 [main] [INFO]  KGenProgMain - entered the era of 69th generation.
2023-06-26 23:25:31 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 24 minutes 44 seconds
Variants: generated 400, build-succeeded 220, build-failed 121, syntax-invalid 33, redundant 26
Fitness: max 0(220), min 0(220), ave 0
Test execution time: sum 13440 ms, max 170 ms, min 52 ms
----------------------------------------------------------------

2023-06-26 23:25:31 [main] [INFO]  KGenProgMain - entered the era of 70th generation.
2023-06-26 23:26:16 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 25 minutes 28 seconds
Variants: generated 400, build-succeeded 224, build-failed 131, syntax-invalid 21, redundant 24
Fitness: max 0(224), min 0(224), ave 0
Test execution time: sum 13618 ms, max 198 ms, min 52 ms
----------------------------------------------------------------

2023-06-26 23:26:16 [main] [INFO]  KGenProgMain - entered the era of 71st generation.
2023-06-26 23:30:01 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 29 minutes 14 seconds
Variants: generated 400, build-succeeded 220, build-failed 125, syntax-invalid 36, redundant 19
Fitness: max 0(220), min 0(220), ave 0
Test execution time: sum 193836 ms, max 180089 ms, min 51 ms
----------------------------------------------------------------

2023-06-26 23:30:01 [main] [INFO]  KGenProgMain - entered the era of 72nd generation.
2023-06-26 23:30:44 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 29 minutes 57 seconds
Variants: generated 400, build-succeeded 234, build-failed 105, syntax-invalid 20, redundant 41
Fitness: max 0(234), min 0(234), ave 0
Test execution time: sum 14111 ms, max 163 ms, min 51 ms
----------------------------------------------------------------

2023-06-26 23:30:44 [main] [INFO]  KGenProgMain - entered the era of 73rd generation.
2023-06-26 23:31:27 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 30 minutes 40 seconds
Variants: generated 400, build-succeeded 222, build-failed 131, syntax-invalid 29, redundant 18
Fitness: max 0(222), min 0(222), ave 0
Test execution time: sum 13184 ms, max 178 ms, min 52 ms
----------------------------------------------------------------

2023-06-26 23:31:27 [main] [INFO]  KGenProgMain - entered the era of 74th generation.
2023-06-26 23:32:11 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 31 minutes 24 seconds
Variants: generated 400, build-succeeded 224, build-failed 124, syntax-invalid 29, redundant 23
Fitness: max 0(224), min 0(224), ave 0
Test execution time: sum 13563 ms, max 155 ms, min 53 ms
----------------------------------------------------------------

2023-06-26 23:32:11 [main] [INFO]  KGenProgMain - entered the era of 75th generation.
2023-06-26 23:32:55 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 32 minutes 8 seconds
Variants: generated 400, build-succeeded 222, build-failed 109, syntax-invalid 42, redundant 27
Fitness: max 1(2), min 0(220), ave 0.009
Test execution time: sum 13344 ms, max 140 ms, min 52 ms
----------------------------------------------------------------

2023-06-26 23:32:55 [main] [INFO]  KGenProgMain - entered the era of 76th generation.
2023-06-26 23:33:39 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 32 minutes 52 seconds
Variants: generated 400, build-succeeded 218, build-failed 122, syntax-invalid 40, redundant 20
Fitness: max 1(5), min 0(213), ave 0.023
Test execution time: sum 13637 ms, max 180 ms, min 52 ms
----------------------------------------------------------------

2023-06-26 23:33:40 [main] [INFO]  KGenProgMain - entered the era of 77th generation.
2023-06-26 23:34:10 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 33 minutes 22 seconds
Variants: generated 299, build-succeeded 122, build-failed 131, syntax-invalid 21, redundant 25
Fitness: max 1(4), min 0(118), ave 0.033
Test execution time: sum 7201 ms, max 126 ms, min 53 ms
----------------------------------------------------------------

2023-06-26 23:34:10 [main] [INFO]  KGenProgMain - GA stopped
2023-06-26 23:34:13 [main] [INFO]  PatchLogExporter - patch (v13)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 23:34:13 [main] [INFO]  PatchLogExporter - patch (v13)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-06-26 23:34:13 [main] [INFO]  PatchLogExporter - patch (v13)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 23:34:13 [main] [INFO]  PatchLogExporter - patch (v13)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 23:34:13 [main] [INFO]  PatchLogExporter - patch (v2007)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -272,7 +272,7 @@
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
-          computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
+          dirtyState = true;
           dirtyState = false;
       }
 
2023-06-26 23:34:13 [main] [INFO]  PatchLogExporter - patch (v2007)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 23:34:13 [main] [INFO]  PatchLogExporter - patch (v2007)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -63,7 +63,7 @@
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
-        this.defaultMaximalIterationCount = defaultMaximalIterationCount;
+        this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.maximalIterationCount = defaultMaximalIterationCount;
         this.iterationCount = 0;
     }
2023-06-26 23:34:13 [main] [INFO]  PatchLogExporter - patch (v2007)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -213,7 +213,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
2023-06-26 23:34:13 [main] [INFO]  PatchLogExporter - patch (v2007)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 23:34:13 [main] [INFO]  PatchLogExporter - patch (v2007)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 23:34:13 [main] [INFO]  PatchLogExporter - patch (v2052)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -272,7 +272,7 @@
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
-          computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
+          dirtyState = true;
           dirtyState = false;
       }
 
2023-06-26 23:34:13 [main] [INFO]  PatchLogExporter - patch (v2052)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 23:34:13 [main] [INFO]  PatchLogExporter - patch (v2052)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -63,7 +63,7 @@
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
-        this.defaultMaximalIterationCount = defaultMaximalIterationCount;
+        this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.maximalIterationCount = defaultMaximalIterationCount;
         this.iterationCount = 0;
     }
2023-06-26 23:34:13 [main] [INFO]  PatchLogExporter - patch (v2052)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 23:34:13 [main] [INFO]  PatchLogExporter - patch (v2052)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 23:34:13 [main] [INFO]  PatchLogExporter - patch (v2052)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -276,10 +276,7 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
+                    x1 = x1 - 0.5 * tolerance;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-06-26 23:34:13 [main] [INFO]  PatchLogExporter - patch (v2101)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -272,7 +272,7 @@
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
-          computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
+          dirtyState = true;
           dirtyState = false;
       }
 
2023-06-26 23:34:13 [main] [INFO]  PatchLogExporter - patch (v2101)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 23:34:13 [main] [INFO]  PatchLogExporter - patch (v2101)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -63,7 +63,7 @@
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
-        this.defaultMaximalIterationCount = defaultMaximalIterationCount;
+        this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.maximalIterationCount = defaultMaximalIterationCount;
         this.iterationCount = 0;
     }
2023-06-26 23:34:13 [main] [INFO]  PatchLogExporter - patch (v2101)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 23:34:13 [main] [INFO]  PatchLogExporter - patch (v2101)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 23:34:13 [main] [INFO]  PatchLogExporter - patch (v2101)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -276,10 +276,7 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
+                    ++i;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-06-26 23:34:13 [main] [INFO]  PatchLogExporter - patch (v2144)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -272,7 +272,7 @@
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
-          computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
+          dirtyState = true;
           dirtyState = false;
       }
 
2023-06-26 23:34:13 [main] [INFO]  PatchLogExporter - patch (v2144)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 23:34:13 [main] [INFO]  PatchLogExporter - patch (v2144)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -63,7 +63,7 @@
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
-        this.defaultMaximalIterationCount = defaultMaximalIterationCount;
+        this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.maximalIterationCount = defaultMaximalIterationCount;
         this.iterationCount = 0;
     }
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-06-26 23:34:13 [main] [INFO]  PatchLogExporter - patch (v2144)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 23:34:13 [main] [INFO]  PatchLogExporter - patch (v2144)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 23:34:13 [main] [INFO]  PatchLogExporter - patch (v2160)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -272,7 +272,7 @@
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
-          computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
+          dirtyState = true;
           dirtyState = false;
       }
 
2023-06-26 23:34:13 [main] [INFO]  PatchLogExporter - patch (v2160)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 23:34:13 [main] [INFO]  PatchLogExporter - patch (v2160)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -63,7 +63,7 @@
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
-        this.defaultMaximalIterationCount = defaultMaximalIterationCount;
+        this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.maximalIterationCount = defaultMaximalIterationCount;
         this.iterationCount = 0;
     }
2023-06-26 23:34:13 [main] [INFO]  PatchLogExporter - patch (v2160)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 23:34:13 [main] [INFO]  PatchLogExporter - patch (v2160)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 23:34:13 [main] [INFO]  PatchLogExporter - patch (v2160)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,15 +223,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
2023-06-26 23:34:13 [main] [INFO]  PatchLogExporter - patch (v2190)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -272,7 +272,7 @@
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
-          computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
+          dirtyState = true;
           dirtyState = false;
       }
 
2023-06-26 23:34:13 [main] [INFO]  PatchLogExporter - patch (v2190)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 23:34:13 [main] [INFO]  PatchLogExporter - patch (v2190)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -63,7 +63,7 @@
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
-        this.defaultMaximalIterationCount = defaultMaximalIterationCount;
+        this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.maximalIterationCount = defaultMaximalIterationCount;
         this.iterationCount = 0;
     }
2023-06-26 23:34:13 [main] [INFO]  PatchLogExporter - patch (v2190)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 23:34:13 [main] [INFO]  PatchLogExporter - patch (v2190)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 23:34:13 [main] [INFO]  PatchLogExporter - patch (v2190)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -276,10 +276,6 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-06-26 23:34:13 [main] [INFO]  PatchLogExporter - patch (v4144)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -89,7 +89,7 @@
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
+    this.forward = forward;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
@@ -108,7 +108,7 @@
 
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
-    h                 = Double.NaN;
+    interpolatedDerivatives = null;
     interpolatedTime  = Double.NaN;
 
     currentState            = y;
@@ -272,7 +272,7 @@
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
-          computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
+          dirtyState = true;
           dirtyState = false;
       }
 
2023-06-26 23:34:13 [main] [INFO]  PatchLogExporter - patch (v4144)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 23:34:13 [main] [INFO]  PatchLogExporter - patch (v4144)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-06-26 23:34:13 [main] [INFO]  PatchLogExporter - patch (v4144)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 23:34:13 [main] [INFO]  PatchLogExporter - patch (v4144)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 23:34:13 [main] [INFO]  PatchLogExporter - patch (v4146)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -89,7 +89,7 @@
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
+    this.forward = forward;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
@@ -108,7 +108,7 @@
 
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
-    h                 = Double.NaN;
+    interpolatedDerivatives = null;
     interpolatedTime  = Double.NaN;
 
     currentState            = y;
@@ -272,7 +272,7 @@
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
-          computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
+          dirtyState = true;
           dirtyState = false;
       }
 
2023-06-26 23:34:13 [main] [INFO]  PatchLogExporter - patch (v4146)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 23:34:13 [main] [INFO]  PatchLogExporter - patch (v4146)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 23:34:13 [main] [INFO]  PatchLogExporter - patch (v4146)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 23:34:13 [main] [INFO]  PatchLogExporter - patch (v4146)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -274,8 +274,7 @@
                 } else {
                     p = -p;
                 }
-                if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
-                        p >= Math.abs(0.5 * oldDelta * p1)) {
+                if ((y1 > 0) == (y2 > 0)) {
                     // Inverse quadratic interpolation gives a value
                     // in the wrong direction, or progress is slow.
                     // Fall back to bisection.
2023-06-26 23:34:13 [main] [INFO]  PatchLogExporter - patch (v4162)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -89,7 +89,7 @@
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
+    this.forward = forward;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
@@ -108,7 +108,7 @@
 
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
-    h                 = Double.NaN;
+    interpolatedDerivatives = null;
     interpolatedTime  = Double.NaN;
 
     currentState            = y;
@@ -272,7 +272,7 @@
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
-          computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
+          dirtyState = true;
           dirtyState = false;
       }
 
2023-06-26 23:34:13 [main] [INFO]  PatchLogExporter - patch (v4162)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 23:34:13 [main] [INFO]  PatchLogExporter - patch (v4162)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -213,7 +213,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
2023-06-26 23:34:13 [main] [INFO]  PatchLogExporter - patch (v4162)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 23:34:13 [main] [INFO]  PatchLogExporter - patch (v4162)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 23:34:13 [main] [INFO]  PatchLogExporter - patch (v5007)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -272,7 +272,7 @@
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
-          computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
+          dirtyState = true;
           dirtyState = false;
       }
 
2023-06-26 23:34:13 [main] [INFO]  PatchLogExporter - patch (v5007)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 23:34:13 [main] [INFO]  PatchLogExporter - patch (v5007)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -170,9 +170,11 @@
         try {
 
             forward = interpolator.isForward();
-            final double t1 = interpolator.getCurrentTime();
+            forward = interpolator.isForward();
+			final double t1 = interpolator.getCurrentTime();
             final int    n  = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));
-            final double h  = (t1 - t0) / n;
+            final double t0 = interpolator.getPreviousTime();
+			final double h  = (t1 - t0) / n;
 
             double ta = t0;
             double ga = g0;
2023-06-26 23:34:13 [main] [INFO]  PatchLogExporter - patch (v5007)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 23:34:13 [main] [INFO]  PatchLogExporter - patch (v5007)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 23:34:13 [main] [INFO]  PatchLogExporter - patch (v5007)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -165,6 +165,7 @@
 
         // Verify bracketing
         double sign = yMin * yMax;
+		this.resultComputed = true;
         if (sign > 0) {
             // check if either value is close to a zero
             if (Math.abs(yMin) <= functionValueAccuracy) {
2023-06-26 23:34:13 [main] [INFO]  PatchLogExporter - patch (v5030)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -89,7 +89,7 @@
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
+    this.forward = forward;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
@@ -272,7 +272,7 @@
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
-          computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
+          dirtyState = true;
           dirtyState = false;
       }
 
2023-06-26 23:34:13 [main] [INFO]  PatchLogExporter - patch (v5030)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 23:34:13 [main] [INFO]  PatchLogExporter - patch (v5030)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -172,7 +172,8 @@
             forward = interpolator.isForward();
             final double t1 = interpolator.getCurrentTime();
             final int    n  = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));
-            final double h  = (t1 - t0) / n;
+            final double t0 = interpolator.getPreviousTime();
+			final double h  = (t1 - t0) / n;
 
             double ta = t0;
             double ga = g0;
@@ -216,8 +217,7 @@
                     solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
-                    if ((Math.abs(root - ta) <= convergence) &&
-                         (Math.abs(root - previousEventTime) <= convergence)) {
+                    if (nextAction == EventHandler.RESET_STATE) {
                         // we have either found nothing or found (again ?) a past event, we simply ignore it
                         ta = tb;
                         ga = gb;
2023-06-26 23:34:13 [main] [INFO]  PatchLogExporter - patch (v5030)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 23:34:13 [main] [INFO]  PatchLogExporter - patch (v5030)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 23:34:13 [main] [INFO]  PatchLogExporter - patch (v5157)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -89,7 +89,7 @@
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
+    interpolatedDerivatives = null;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
@@ -272,7 +272,7 @@
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
-          computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
+          dirtyState = true;
           dirtyState = false;
       }
 
2023-06-26 23:34:13 [main] [INFO]  PatchLogExporter - patch (v5157)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 23:34:13 [main] [INFO]  PatchLogExporter - patch (v5157)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -172,7 +172,8 @@
             forward = interpolator.isForward();
             final double t1 = interpolator.getCurrentTime();
             final int    n  = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));
-            final double h  = (t1 - t0) / n;
+            final double t0 = interpolator.getPreviousTime();
+			final double h  = (t1 - t0) / n;
 
             double ta = t0;
             double ga = g0;
2023-06-26 23:34:13 [main] [INFO]  PatchLogExporter - patch (v5157)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 23:34:13 [main] [INFO]  PatchLogExporter - patch (v5157)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 23:34:13 [main] [INFO]  PatchLogExporter - patch (v5157)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -165,6 +165,7 @@
 
         // Verify bracketing
         double sign = yMin * yMax;
+		this.resultComputed = true;
         if (sign > 0) {
             // check if either value is close to a zero
             if (Math.abs(yMin) <= functionValueAccuracy) {
2023-06-26 23:34:13 [main] [INFO]  PatchLogExporter - patch (v5205)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -89,7 +89,7 @@
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
+    this.forward = forward;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
@@ -108,7 +108,7 @@
 
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
-    h                 = Double.NaN;
+    this.forward = forward;
     interpolatedTime  = Double.NaN;
 
     currentState            = y;
@@ -170,7 +170,7 @@
 
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
-    h                 = Double.NaN;
+    interpolatedDerivatives = null;
     interpolatedTime  = Double.NaN;
 
     currentState            = y;
@@ -272,7 +272,7 @@
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
-          computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
+          dirtyState = true;
           dirtyState = false;
       }
 
2023-06-26 23:34:13 [main] [INFO]  PatchLogExporter - patch (v5205)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 23:34:13 [main] [INFO]  PatchLogExporter - patch (v5205)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -213,7 +213,7 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
+                    ga = gb;
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
2023-06-26 23:34:13 [main] [INFO]  PatchLogExporter - patch (v5205)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 23:34:13 [main] [INFO]  PatchLogExporter - patch (v5205)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 23:34:13 [main] [INFO]  PatchLogExporter - patch (v5214)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -89,7 +89,7 @@
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
+    this.forward = forward;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
@@ -108,7 +108,7 @@
 
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
-    h                 = Double.NaN;
+    this.forward = forward;
     interpolatedTime  = Double.NaN;
 
     currentState            = y;
@@ -170,7 +170,7 @@
 
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
-    h                 = Double.NaN;
+    interpolatedDerivatives = null;
     interpolatedTime  = Double.NaN;
 
     currentState            = y;
@@ -272,7 +272,7 @@
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
-          computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
+          dirtyState = true;
           dirtyState = false;
       }
 
2023-06-26 23:34:13 [main] [INFO]  PatchLogExporter - patch (v5214)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 23:34:13 [main] [INFO]  PatchLogExporter - patch (v5214)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 23:34:13 [main] [INFO]  PatchLogExporter - patch (v5214)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 23:34:13 [main] [INFO]  PatchLogExporter - patch (v5214)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,15 +223,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
2023-06-26 23:34:13 [main] [INFO]  PatchLogExporter - patch (v5416)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -89,7 +89,7 @@
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
+    this.forward = forward;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
@@ -108,7 +108,7 @@
 
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
-    h                 = Double.NaN;
+    this.forward = forward;
     interpolatedTime  = Double.NaN;
 
     currentState            = y;
2023-06-26 23:34:13 [main] [INFO]  PatchLogExporter - patch (v5416)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 23:34:13 [main] [INFO]  PatchLogExporter - patch (v5416)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -63,7 +63,6 @@
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
-        this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
         this.iterationCount = 0;
     }
@@ -75,7 +74,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-06-26 23:34:13 [main] [INFO]  PatchLogExporter - patch (v5416)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 23:34:13 [main] [INFO]  PatchLogExporter - patch (v5416)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 23:34:13 [main] [INFO]  PatchLogExporter - patch (v5509)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -89,7 +89,7 @@
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
+    this.forward = forward;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
2023-06-26 23:34:13 [main] [INFO]  PatchLogExporter - patch (v5509)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 23:34:13 [main] [INFO]  PatchLogExporter - patch (v5509)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -63,7 +63,7 @@
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
-        this.defaultMaximalIterationCount = defaultMaximalIterationCount;
+        this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.maximalIterationCount = defaultMaximalIterationCount;
         this.iterationCount = 0;
     }
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-06-26 23:34:13 [main] [INFO]  PatchLogExporter - patch (v5509)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -169,7 +169,6 @@
 
         try {
 
-            forward = interpolator.isForward();
             final double t1 = interpolator.getCurrentTime();
             final int    n  = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));
             final double h  = (t1 - t0) / n;
2023-06-26 23:34:13 [main] [INFO]  PatchLogExporter - patch (v5509)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 23:34:13 [main] [INFO]  PatchLogExporter - patch (v5509)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 23:34:13 [main] [INFO]  PatchLogExporter - patch (v5637)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -272,7 +272,7 @@
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
-          computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
+          dirtyState = true;
           dirtyState = false;
       }
 
@@ -287,7 +287,7 @@
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
-          computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
+          dirtyState = true;
           dirtyState = false;
       }
 
2023-06-26 23:34:13 [main] [INFO]  PatchLogExporter - patch (v5637)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 23:34:13 [main] [INFO]  PatchLogExporter - patch (v5637)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -282,7 +282,8 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
+        nextAction = EventHandler.CONTINUE;
+		g0Positive = g0 >= 0;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-06-26 23:34:13 [main] [INFO]  PatchLogExporter - patch (v5637)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 23:34:13 [main] [INFO]  PatchLogExporter - patch (v5637)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 23:34:13 [main] [INFO]  PatchLogExporter - patch (v5689)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -272,7 +272,7 @@
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
-          computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
+          dirtyState = true;
           dirtyState = false;
       }
 
@@ -287,7 +287,7 @@
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
-          computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
+          dirtyState = true;
           dirtyState = false;
       }
 
2023-06-26 23:34:13 [main] [INFO]  PatchLogExporter - patch (v5689)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 23:34:13 [main] [INFO]  PatchLogExporter - patch (v5689)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -282,7 +282,8 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
+        nextAction = EventHandler.CONTINUE;
+		t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-06-26 23:34:13 [main] [INFO]  PatchLogExporter - patch (v5689)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 23:34:13 [main] [INFO]  PatchLogExporter - patch (v5689)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 23:34:13 [main] [INFO]  PatchLogExporter - patch (v5689)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -276,10 +276,6 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-06-26 23:34:13 [main] [INFO]  PatchLogExporter - patch (v5903)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -89,7 +89,7 @@
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
+    this.forward = forward;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
2023-06-26 23:34:13 [main] [INFO]  PatchLogExporter - patch (v5903)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 23:34:13 [main] [INFO]  PatchLogExporter - patch (v5903)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -63,7 +63,6 @@
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
-        this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
         this.iterationCount = 0;
     }
@@ -75,7 +74,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-06-26 23:34:13 [main] [INFO]  PatchLogExporter - patch (v5903)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -103,7 +103,6 @@
         g0                = Double.NaN;
         g0Positive        = true;
         pendingEvent      = false;
-        pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
         nextAction        = EventHandler.CONTINUE;
2023-06-26 23:34:13 [main] [INFO]  PatchLogExporter - patch (v5903)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 23:34:13 [main] [INFO]  PatchLogExporter - patch (v5903)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 23:34:13 [main] [INFO]  PatchLogExporter - patch (v6349)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -89,7 +89,7 @@
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
+    interpolatedDerivatives = null;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
@@ -108,7 +108,7 @@
 
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
-    h                 = Double.NaN;
+    this.forward = forward;
     interpolatedTime  = Double.NaN;
 
     currentState            = y;
@@ -272,7 +272,7 @@
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
-          computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
+          dirtyState = true;
           dirtyState = false;
       }
 
2023-06-26 23:34:13 [main] [INFO]  PatchLogExporter - patch (v6349)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 23:34:13 [main] [INFO]  PatchLogExporter - patch (v6349)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-06-26 23:34:13 [main] [INFO]  PatchLogExporter - patch (v6349)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 23:34:13 [main] [INFO]  PatchLogExporter - patch (v6349)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 23:34:13 [main] [INFO]  PatchLogExporter - patch (v6440)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -89,7 +89,7 @@
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
+    this.forward = forward;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
@@ -108,7 +108,7 @@
 
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
-    h                 = Double.NaN;
+    this.forward = forward;
     interpolatedTime  = Double.NaN;
 
     currentState            = y;
2023-06-26 23:34:13 [main] [INFO]  PatchLogExporter - patch (v6440)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 23:34:13 [main] [INFO]  PatchLogExporter - patch (v6440)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -185,7 +185,7 @@
                 final double gb = handler.g(tb, interpolator.getInterpolatedState());
 
                 // check events occurrence
-                if (g0Positive ^ (gb >= 0)) {
+                if (i < n) {
                     // there is a sign change: an event is expected during this step
 
                         // this is a corner case:
2023-06-26 23:34:13 [main] [INFO]  PatchLogExporter - patch (v6440)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 23:34:13 [main] [INFO]  PatchLogExporter - patch (v6440)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 23:34:13 [main] [INFO]  PatchLogExporter - patch (v6440)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -165,6 +165,7 @@
 
         // Verify bracketing
         double sign = yMin * yMax;
+		this.resultComputed = true;
         if (sign > 0) {
             // check if either value is close to a zero
             if (Math.abs(yMin) <= functionValueAccuracy) {
@@ -276,10 +277,6 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-06-26 23:34:13 [main] [INFO]  PatchLogExporter - patch (v6463)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -89,7 +89,7 @@
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
+    this.forward = forward;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
@@ -108,7 +108,7 @@
 
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
-    h                 = Double.NaN;
+    this.forward = forward;
     interpolatedTime  = Double.NaN;
 
     currentState            = y;
2023-06-26 23:34:13 [main] [INFO]  PatchLogExporter - patch (v6463)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 23:34:13 [main] [INFO]  PatchLogExporter - patch (v6463)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -185,7 +185,7 @@
                 final double gb = handler.g(tb, interpolator.getInterpolatedState());
 
                 // check events occurrence
-                if (g0Positive ^ (gb >= 0)) {
+                if (i < n) {
                     // there is a sign change: an event is expected during this step
 
                         // this is a corner case:
@@ -213,7 +213,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
2023-06-26 23:34:13 [main] [INFO]  PatchLogExporter - patch (v6463)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 23:34:13 [main] [INFO]  PatchLogExporter - patch (v6463)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 23:34:13 [main] [INFO]  PatchLogExporter - patch (v6463)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -165,6 +165,7 @@
 
         // Verify bracketing
         double sign = yMin * yMax;
+		this.resultComputed = true;
         if (sign > 0) {
             // check if either value is close to a zero
             if (Math.abs(yMin) <= functionValueAccuracy) {
2023-06-26 23:34:13 [main] [INFO]  PatchLogExporter - patch (v6559)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -89,7 +89,7 @@
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
+    this.forward = forward;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
@@ -108,7 +108,7 @@
 
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
-    h                 = Double.NaN;
+    this.forward = forward;
     interpolatedTime  = Double.NaN;
 
     currentState            = y;
2023-06-26 23:34:13 [main] [INFO]  PatchLogExporter - patch (v6559)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 23:34:13 [main] [INFO]  PatchLogExporter - patch (v6559)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-06-26 23:34:13 [main] [INFO]  PatchLogExporter - patch (v6559)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -185,7 +185,7 @@
                 final double gb = handler.g(tb, interpolator.getInterpolatedState());
 
                 // check events occurrence
-                if (g0Positive ^ (gb >= 0)) {
+                if (i < n) {
                     // there is a sign change: an event is expected during this step
 
                         // this is a corner case:
2023-06-26 23:34:13 [main] [INFO]  PatchLogExporter - patch (v6559)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 23:34:13 [main] [INFO]  PatchLogExporter - patch (v6559)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 23:34:13 [main] [INFO]  PatchLogExporter - patch (v6559)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -165,6 +165,7 @@
 
         // Verify bracketing
         double sign = yMin * yMax;
+		this.resultComputed = true;
         if (sign > 0) {
             // check if either value is close to a zero
             if (Math.abs(yMin) <= functionValueAccuracy) {
2023-06-26 23:34:13 [main] [INFO]  PatchLogExporter - patch (v7275)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -89,7 +89,7 @@
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
+    this.forward = forward;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
2023-06-26 23:34:13 [main] [INFO]  PatchLogExporter - patch (v7275)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 23:34:13 [main] [INFO]  PatchLogExporter - patch (v7275)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -170,7 +170,8 @@
         try {
 
             forward = interpolator.isForward();
-            final double t1 = interpolator.getCurrentTime();
+            forward = interpolator.isForward();
+			final double t1 = interpolator.getCurrentTime();
             final int    n  = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));
             final double h  = (t1 - t0) / n;
 
@@ -185,7 +186,7 @@
                 final double gb = handler.g(tb, interpolator.getInterpolatedState());
 
                 // check events occurrence
-                if (g0Positive ^ (gb >= 0)) {
+                if (i < n) {
                     // there is a sign change: an event is expected during this step
 
                         // this is a corner case:
2023-06-26 23:34:13 [main] [INFO]  PatchLogExporter - patch (v7275)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 23:34:13 [main] [INFO]  PatchLogExporter - patch (v7275)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 23:34:13 [main] [INFO]  PatchLogExporter - patch (v7275)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,6 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
@@ -91,7 +90,6 @@
     protected UnivariateRealSolverImpl(final int defaultMaximalIterationCount,
                                        final double defaultAbsoluteAccuracy) {
         super(defaultMaximalIterationCount, defaultAbsoluteAccuracy);
-        this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
2023-06-26 23:34:13 [main] [INFO]  PatchLogExporter - patch (v7275)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -290,7 +290,7 @@
             x0 = x1;
             y0 = y1;
             // Compute new X1, Y1
-            if (Math.abs(delta) > tolerance) {
+            if (Math.abs(x1 - x0) <= absoluteAccuracy) {
                 x1 = x1 + delta;
             } else if (dx > 0.0) {
                 x1 = x1 + 0.5 * tolerance;
2023-06-26 23:34:13 [main] [INFO]  PatchLogExporter - patch (v7362)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -89,7 +89,7 @@
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
+    this.forward = forward;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
2023-06-26 23:34:13 [main] [INFO]  PatchLogExporter - patch (v7362)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 23:34:13 [main] [INFO]  PatchLogExporter - patch (v7362)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -170,7 +170,8 @@
         try {
 
             forward = interpolator.isForward();
-            final double t1 = interpolator.getCurrentTime();
+            forward = interpolator.isForward();
+			final double t1 = interpolator.getCurrentTime();
             final int    n  = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));
             final double h  = (t1 - t0) / n;
 
@@ -185,7 +186,7 @@
                 final double gb = handler.g(tb, interpolator.getInterpolatedState());
 
                 // check events occurrence
-                if (g0Positive ^ (gb >= 0)) {
+                if (i < n) {
                     // there is a sign change: an event is expected during this step
 
                         // this is a corner case:
2023-06-26 23:34:13 [main] [INFO]  PatchLogExporter - patch (v7362)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 23:34:13 [main] [INFO]  PatchLogExporter - patch (v7362)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 23:34:13 [main] [INFO]  PatchLogExporter - patch (v7362)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,6 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
@@ -91,7 +90,6 @@
     protected UnivariateRealSolverImpl(final int defaultMaximalIterationCount,
                                        final double defaultAbsoluteAccuracy) {
         super(defaultMaximalIterationCount, defaultAbsoluteAccuracy);
-        this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
2023-06-26 23:34:13 [main] [INFO]  PatchLogExporter - patch (v7362)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -276,10 +276,7 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
+                    clearResult();
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-06-26 23:34:13 [main] [INFO]  PatchLogExporter - patch (v7622)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -89,7 +89,7 @@
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
+    this.forward = forward;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
2023-06-26 23:34:13 [main] [INFO]  PatchLogExporter - patch (v7622)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 23:34:13 [main] [INFO]  PatchLogExporter - patch (v7622)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-06-26 23:34:13 [main] [INFO]  PatchLogExporter - patch (v7622)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -102,7 +102,6 @@
         t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
@@ -170,7 +169,8 @@
         try {
 
             forward = interpolator.isForward();
-            final double t1 = interpolator.getCurrentTime();
+            forward = interpolator.isForward();
+			final double t1 = interpolator.getCurrentTime();
             final int    n  = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));
             final double h  = (t1 - t0) / n;
 
@@ -185,7 +185,7 @@
                 final double gb = handler.g(tb, interpolator.getInterpolatedState());
 
                 // check events occurrence
-                if (g0Positive ^ (gb >= 0)) {
+                if (i < n) {
                     // there is a sign change: an event is expected during this step
 
                         // this is a corner case:
2023-06-26 23:34:13 [main] [INFO]  PatchLogExporter - patch (v7622)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 23:34:13 [main] [INFO]  PatchLogExporter - patch (v7622)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 23:34:13 [main] [INFO]  PatchLogExporter - patch (v7622)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,6 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
@@ -91,7 +90,6 @@
     protected UnivariateRealSolverImpl(final int defaultMaximalIterationCount,
                                        final double defaultAbsoluteAccuracy) {
         super(defaultMaximalIterationCount, defaultAbsoluteAccuracy);
-        this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
2023-06-26 23:34:13 [main] [INFO]  PatchLogExporter - patch (v7700)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -89,7 +89,7 @@
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
+    this.forward = forward;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
2023-06-26 23:34:13 [main] [INFO]  PatchLogExporter - patch (v7700)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 23:34:13 [main] [INFO]  PatchLogExporter - patch (v7700)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -102,7 +102,6 @@
         t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
@@ -170,7 +169,8 @@
         try {
 
             forward = interpolator.isForward();
-            final double t1 = interpolator.getCurrentTime();
+            forward = interpolator.isForward();
+			final double t1 = interpolator.getCurrentTime();
             final int    n  = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));
             final double h  = (t1 - t0) / n;
 
@@ -185,7 +185,7 @@
                 final double gb = handler.g(tb, interpolator.getInterpolatedState());
 
                 // check events occurrence
-                if (g0Positive ^ (gb >= 0)) {
+                if (i < n) {
                     // there is a sign change: an event is expected during this step
 
                         // this is a corner case:
2023-06-26 23:34:13 [main] [INFO]  PatchLogExporter - patch (v7700)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 23:34:13 [main] [INFO]  PatchLogExporter - patch (v7700)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 23:34:13 [main] [INFO]  PatchLogExporter - patch (v7700)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,6 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
@@ -91,7 +90,6 @@
     protected UnivariateRealSolverImpl(final int defaultMaximalIterationCount,
                                        final double defaultAbsoluteAccuracy) {
         super(defaultMaximalIterationCount, defaultAbsoluteAccuracy);
-        this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
2023-06-26 23:34:13 [main] [INFO]  PatchLogExporter - patch (v7700)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,15 +223,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
2023-06-26 23:34:13 [main] [INFO]  PatchLogExporter - patch (v7794)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -89,7 +89,7 @@
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
+    this.forward = forward;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
2023-06-26 23:34:13 [main] [INFO]  PatchLogExporter - patch (v7794)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 23:34:13 [main] [INFO]  PatchLogExporter - patch (v7794)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -102,7 +102,6 @@
         t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
@@ -170,7 +169,8 @@
         try {
 
             forward = interpolator.isForward();
-            final double t1 = interpolator.getCurrentTime();
+            forward = interpolator.isForward();
+			final double t1 = interpolator.getCurrentTime();
             final int    n  = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));
             final double h  = (t1 - t0) / n;
 
@@ -185,7 +185,7 @@
                 final double gb = handler.g(tb, interpolator.getInterpolatedState());
 
                 // check events occurrence
-                if (g0Positive ^ (gb >= 0)) {
+                if (i < n) {
                     // there is a sign change: an event is expected during this step
 
                         // this is a corner case:
@@ -213,7 +213,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
2023-06-26 23:34:13 [main] [INFO]  PatchLogExporter - patch (v7794)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 23:34:13 [main] [INFO]  PatchLogExporter - patch (v7794)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 23:34:13 [main] [INFO]  PatchLogExporter - patch (v7794)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,6 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
@@ -91,7 +90,6 @@
     protected UnivariateRealSolverImpl(final int defaultMaximalIterationCount,
                                        final double defaultAbsoluteAccuracy) {
         super(defaultMaximalIterationCount, defaultAbsoluteAccuracy);
-        this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
2023-06-26 23:34:13 [main] [INFO]  PatchLogExporter - patch (v8519)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -89,14 +89,15 @@
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
+    this.forward = forward;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
+    h = currentTime - previousTime;
+	this.dirtyState         = true;
   }
 
   /** Simple constructor.
2023-06-26 23:34:13 [main] [INFO]  PatchLogExporter - patch (v8519)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 23:34:13 [main] [INFO]  PatchLogExporter - patch (v8519)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -102,7 +102,6 @@
         t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
@@ -170,7 +169,8 @@
         try {
 
             forward = interpolator.isForward();
-            final double t1 = interpolator.getCurrentTime();
+            forward = interpolator.isForward();
+			final double t1 = interpolator.getCurrentTime();
             final int    n  = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));
             final double h  = (t1 - t0) / n;
 
@@ -185,7 +185,7 @@
                 final double gb = handler.g(tb, interpolator.getInterpolatedState());
 
                 // check events occurrence
-                if (g0Positive ^ (gb >= 0)) {
+                if (i < n) {
                     // there is a sign change: an event is expected during this step
 
                         // this is a corner case:
2023-06-26 23:34:13 [main] [INFO]  PatchLogExporter - patch (v8519)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 23:34:13 [main] [INFO]  PatchLogExporter - patch (v8519)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 23:34:13 [main] [INFO]  PatchLogExporter - patch (v8519)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,6 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
@@ -91,7 +90,6 @@
     protected UnivariateRealSolverImpl(final int defaultMaximalIterationCount,
                                        final double defaultAbsoluteAccuracy) {
         super(defaultMaximalIterationCount, defaultAbsoluteAccuracy);
-        this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
2023-06-26 23:34:13 [main] [INFO]  PatchLogExporter - patch (v8519)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,15 +223,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v8809)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v8809)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -63,7 +63,7 @@
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
-        this.defaultMaximalIterationCount = defaultMaximalIterationCount;
+        this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.maximalIterationCount = defaultMaximalIterationCount;
         this.iterationCount = 0;
     }
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v8809)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -197,8 +197,7 @@
                         // about bracketing
                             // this should never happen
                          
-                    // variation direction, with respect to the integration direction
-                    increasing = gb >= ga;
+                    t0 = Double.NaN;
 
                     final UnivariateRealFunction f = new UnivariateRealFunction() {
                         public double value(final double t) throws FunctionEvaluationException {
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v8809)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v8809)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v8809)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -77,6 +77,7 @@
         }
         this.f = f;
         this.defaultFunctionValueAccuracy = 1.0e-15;
+		clearResult();
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v8809)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -165,6 +165,7 @@
 
         // Verify bracketing
         double sign = yMin * yMax;
+		this.resultComputed = true;
         if (sign > 0) {
             // check if either value is close to a zero
             if (Math.abs(yMin) <= functionValueAccuracy) {
@@ -223,15 +224,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v8913)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v8913)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -63,7 +63,7 @@
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
-        this.defaultMaximalIterationCount = defaultMaximalIterationCount;
+        this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.maximalIterationCount = defaultMaximalIterationCount;
         this.iterationCount = 0;
     }
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v8913)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -197,8 +197,7 @@
                         // about bracketing
                             // this should never happen
                          
-                    // variation direction, with respect to the integration direction
-                    increasing = gb >= ga;
+                    t0 = Double.NaN;
 
                     final UnivariateRealFunction f = new UnivariateRealFunction() {
                         public double value(final double t) throws FunctionEvaluationException {
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v8913)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v8913)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v8913)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -77,6 +77,7 @@
         }
         this.f = f;
         this.defaultFunctionValueAccuracy = 1.0e-15;
+		clearResult();
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v8913)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -165,6 +165,7 @@
 
         // Verify bracketing
         double sign = yMin * yMax;
+		this.resultComputed = true;
         if (sign > 0) {
             // check if either value is close to a zero
             if (Math.abs(yMin) <= functionValueAccuracy) {
@@ -223,7 +224,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
+            if ((y1 > 0) == (y2 > 0)) {
                 // use the bracket point if is better than last approximation
                 x0 = x1;
                 x1 = x2;
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v9267)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -89,7 +89,7 @@
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
+    this.forward = forward;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
@@ -108,7 +108,7 @@
 
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
-    h                 = Double.NaN;
+    this.forward = forward;
     interpolatedTime  = Double.NaN;
 
     currentState            = y;
@@ -170,7 +170,7 @@
 
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
-    h                 = Double.NaN;
+    this.forward = forward;
     interpolatedTime  = Double.NaN;
 
     currentState            = y;
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v9267)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v9267)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v9267)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -185,7 +185,7 @@
                 final double gb = handler.g(tb, interpolator.getInterpolatedState());
 
                 // check events occurrence
-                if (g0Positive ^ (gb >= 0)) {
+                if (i < n) {
                     // there is a sign change: an event is expected during this step
 
                         // this is a corner case:
@@ -197,8 +197,7 @@
                         // about bracketing
                             // this should never happen
                          
-                    // variation direction, with respect to the integration direction
-                    increasing = gb >= ga;
+                    t0 = Double.NaN;
 
                     final UnivariateRealFunction f = new UnivariateRealFunction() {
                         public double value(final double t) throws FunctionEvaluationException {
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v9267)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v9267)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v9267)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,6 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v9267)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -165,6 +165,7 @@
 
         // Verify bracketing
         double sign = yMin * yMax;
+		this.resultComputed = true;
         if (sign > 0) {
             // check if either value is close to a zero
             if (Math.abs(yMin) <= functionValueAccuracy) {
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v9681)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -89,7 +89,7 @@
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
+    this.forward = forward;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
@@ -108,7 +108,7 @@
 
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
-    h                 = Double.NaN;
+    this.forward = forward;
     interpolatedTime  = Double.NaN;
 
     currentState            = y;
@@ -170,7 +170,7 @@
 
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
-    h                 = Double.NaN;
+    this.forward = forward;
     interpolatedTime  = Double.NaN;
 
     currentState            = y;
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v9681)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v9681)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -101,7 +101,6 @@
         // some dummy values ...
         t0                = Double.NaN;
         g0                = Double.NaN;
-        g0Positive        = true;
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
@@ -185,7 +184,7 @@
                 final double gb = handler.g(tb, interpolator.getInterpolatedState());
 
                 // check events occurrence
-                if (g0Positive ^ (gb >= 0)) {
+                if (i < n) {
                     // there is a sign change: an event is expected during this step
 
                         // this is a corner case:
@@ -197,8 +196,7 @@
                         // about bracketing
                             // this should never happen
                          
-                    // variation direction, with respect to the integration direction
-                    increasing = gb >= ga;
+                    t0 = Double.NaN;
 
                     final UnivariateRealFunction f = new UnivariateRealFunction() {
                         public double value(final double t) throws FunctionEvaluationException {
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v9681)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v9681)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v9681)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,6 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v9681)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -165,6 +165,7 @@
 
         // Verify bracketing
         double sign = yMin * yMax;
+		this.resultComputed = true;
         if (sign > 0) {
             // check if either value is close to a zero
             if (Math.abs(yMin) <= functionValueAccuracy) {
@@ -223,15 +224,8 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
+				oldDelta = delta;
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v9714)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -89,7 +89,7 @@
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
+    this.forward = forward;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
@@ -108,7 +108,7 @@
 
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
-    h                 = Double.NaN;
+    this.forward = forward;
     interpolatedTime  = Double.NaN;
 
     currentState            = y;
@@ -170,7 +170,7 @@
 
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
-    h                 = Double.NaN;
+    this.forward = forward;
     interpolatedTime  = Double.NaN;
 
     currentState            = y;
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v9714)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v9714)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v9714)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -101,7 +101,6 @@
         // some dummy values ...
         t0                = Double.NaN;
         g0                = Double.NaN;
-        g0Positive        = true;
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
@@ -185,7 +184,7 @@
                 final double gb = handler.g(tb, interpolator.getInterpolatedState());
 
                 // check events occurrence
-                if (g0Positive ^ (gb >= 0)) {
+                if (i < n) {
                     // there is a sign change: an event is expected during this step
 
                         // this is a corner case:
@@ -197,8 +196,7 @@
                         // about bracketing
                             // this should never happen
                          
-                    // variation direction, with respect to the integration direction
-                    increasing = gb >= ga;
+                    t0 = Double.NaN;
 
                     final UnivariateRealFunction f = new UnivariateRealFunction() {
                         public double value(final double t) throws FunctionEvaluationException {
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v9714)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v9714)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v9714)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,6 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v9714)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -165,6 +165,7 @@
 
         // Verify bracketing
         double sign = yMin * yMax;
+		this.resultComputed = true;
         if (sign > 0) {
             // check if either value is close to a zero
             if (Math.abs(yMin) <= functionValueAccuracy) {
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v9733)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -89,7 +89,7 @@
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
+    this.forward = forward;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
@@ -108,7 +108,7 @@
 
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
-    h                 = Double.NaN;
+    this.forward = forward;
     interpolatedTime  = Double.NaN;
 
     currentState            = y;
@@ -170,7 +170,7 @@
 
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
-    h                 = Double.NaN;
+    this.forward = forward;
     interpolatedTime  = Double.NaN;
 
     currentState            = y;
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v9733)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v9733)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -101,7 +101,6 @@
         // some dummy values ...
         t0                = Double.NaN;
         g0                = Double.NaN;
-        g0Positive        = true;
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
@@ -185,7 +184,7 @@
                 final double gb = handler.g(tb, interpolator.getInterpolatedState());
 
                 // check events occurrence
-                if (g0Positive ^ (gb >= 0)) {
+                if (i < n) {
                     // there is a sign change: an event is expected during this step
 
                         // this is a corner case:
@@ -197,8 +196,7 @@
                         // about bracketing
                             // this should never happen
                          
-                    // variation direction, with respect to the integration direction
-                    increasing = gb >= ga;
+                    t0 = Double.NaN;
 
                     final UnivariateRealFunction f = new UnivariateRealFunction() {
                         public double value(final double t) throws FunctionEvaluationException {
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v9733)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v9733)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v9733)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,6 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v9733)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -165,6 +165,7 @@
 
         // Verify bracketing
         double sign = yMin * yMax;
+		this.resultComputed = true;
         if (sign > 0) {
             // check if either value is close to a zero
             if (Math.abs(yMin) <= functionValueAccuracy) {
@@ -223,15 +224,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v9770)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -89,7 +89,7 @@
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
+    this.forward = forward;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
@@ -108,7 +108,7 @@
 
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
-    h                 = Double.NaN;
+    this.forward = forward;
     interpolatedTime  = Double.NaN;
 
     currentState            = y;
@@ -170,7 +170,7 @@
 
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
-    h                 = Double.NaN;
+    this.forward = forward;
     interpolatedTime  = Double.NaN;
 
     currentState            = y;
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v9770)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v9770)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -101,7 +101,6 @@
         // some dummy values ...
         t0                = Double.NaN;
         g0                = Double.NaN;
-        g0Positive        = true;
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
@@ -185,7 +184,7 @@
                 final double gb = handler.g(tb, interpolator.getInterpolatedState());
 
                 // check events occurrence
-                if (g0Positive ^ (gb >= 0)) {
+                if (i < n) {
                     // there is a sign change: an event is expected during this step
 
                         // this is a corner case:
@@ -197,8 +196,7 @@
                         // about bracketing
                             // this should never happen
                          
-                    // variation direction, with respect to the integration direction
-                    increasing = gb >= ga;
+                    t0 = Double.NaN;
 
                     final UnivariateRealFunction f = new UnivariateRealFunction() {
                         public double value(final double t) throws FunctionEvaluationException {
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v9770)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v9770)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v9770)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,6 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v9770)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -165,6 +165,7 @@
 
         // Verify bracketing
         double sign = yMin * yMax;
+		this.resultComputed = true;
         if (sign > 0) {
             // check if either value is close to a zero
             if (Math.abs(yMin) <= functionValueAccuracy) {
@@ -276,10 +277,6 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v10017)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -89,7 +89,7 @@
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
+    this.forward = forward;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
@@ -108,7 +108,7 @@
 
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
-    h                 = Double.NaN;
+    this.forward = forward;
     interpolatedTime  = Double.NaN;
 
     currentState            = y;
@@ -170,7 +170,7 @@
 
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
-    h                 = Double.NaN;
+    this.forward = forward;
     interpolatedTime  = Double.NaN;
 
     currentState            = y;
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v10017)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v10017)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -104,7 +104,6 @@
         g0Positive        = true;
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
-        previousEventTime = Double.NaN;
         increasing        = true;
         nextAction        = EventHandler.CONTINUE;
 
@@ -197,8 +196,7 @@
                         // about bracketing
                             // this should never happen
                          
-                    // variation direction, with respect to the integration direction
-                    increasing = gb >= ga;
+                    t0 = Double.NaN;
 
                     final UnivariateRealFunction f = new UnivariateRealFunction() {
                         public double value(final double t) throws FunctionEvaluationException {
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v10017)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v10017)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v10017)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,6 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v10017)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -165,6 +165,7 @@
 
         // Verify bracketing
         double sign = yMin * yMax;
+		this.resultComputed = true;
         if (sign > 0) {
             // check if either value is close to a zero
             if (Math.abs(yMin) <= functionValueAccuracy) {
@@ -223,15 +224,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v11613)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -271,6 +271,7 @@
       // lazy evaluation of the state
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
+		h = Double.NaN;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v11613)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v11613)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -282,7 +282,8 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
+        nextAction = EventHandler.CONTINUE;
+		t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v11613)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v11613)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v11613)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,6 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
@@ -92,6 +91,7 @@
                                        final double defaultAbsoluteAccuracy) {
         super(defaultMaximalIterationCount, defaultAbsoluteAccuracy);
         this.defaultFunctionValueAccuracy = 1.0e-15;
+		clearResult();
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v11613)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -165,6 +165,8 @@
 
         // Verify bracketing
         double sign = yMin * yMax;
+		this.resultComputed = true;
+		this.resultComputed = true;
         if (sign > 0) {
             // check if either value is close to a zero
             if (Math.abs(yMin) <= functionValueAccuracy) {
@@ -223,15 +225,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v12229)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v12229)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -102,7 +102,6 @@
         t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
@@ -170,7 +169,8 @@
         try {
 
             forward = interpolator.isForward();
-            final double t1 = interpolator.getCurrentTime();
+            forward = interpolator.isForward();
+			final double t1 = interpolator.getCurrentTime();
             final int    n  = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));
             final double h  = (t1 - t0) / n;
 
@@ -213,7 +213,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
@@ -282,7 +281,8 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
+        nextAction = EventHandler.CONTINUE;
+		t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v12229)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v12229)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v12229)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,6 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
@@ -91,7 +90,7 @@
     protected UnivariateRealSolverImpl(final int defaultMaximalIterationCount,
                                        final double defaultAbsoluteAccuracy) {
         super(defaultMaximalIterationCount, defaultAbsoluteAccuracy);
-        this.defaultFunctionValueAccuracy = 1.0e-15;
+        clearResult();
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v12474)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v12474)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -197,8 +197,7 @@
                         // about bracketing
                             // this should never happen
                          
-                    // variation direction, with respect to the integration direction
-                    increasing = gb >= ga;
+                    t0 = Double.NaN;
 
                     final UnivariateRealFunction f = new UnivariateRealFunction() {
                         public double value(final double t) throws FunctionEvaluationException {
@@ -282,7 +281,8 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
+        nextAction = EventHandler.CONTINUE;
+		t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v12474)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v12474)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v12474)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -165,6 +165,8 @@
 
         // Verify bracketing
         double sign = yMin * yMax;
+		this.resultComputed = true;
+		this.resultComputed = true;
         if (sign > 0) {
             // check if either value is close to a zero
             if (Math.abs(yMin) <= functionValueAccuracy) {
@@ -223,15 +225,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v12667)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,7 +90,6 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
-    interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
@@ -271,6 +270,7 @@
       // lazy evaluation of the state
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
+		h = Double.NaN;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v12667)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v12667)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -103,7 +103,6 @@
         g0                = Double.NaN;
         g0Positive        = true;
         pendingEvent      = false;
-        pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
         nextAction        = EventHandler.CONTINUE;
@@ -213,7 +212,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
@@ -282,7 +280,8 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
+        nextAction = EventHandler.CONTINUE;
+		t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v12667)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v12667)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v12667)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -165,6 +165,8 @@
 
         // Verify bracketing
         double sign = yMin * yMax;
+		this.resultComputed = true;
+		this.resultComputed = true;
         if (sign > 0) {
             // check if either value is close to a zero
             if (Math.abs(yMin) <= functionValueAccuracy) {
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v12731)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -89,7 +89,7 @@
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
+    this.forward = forward;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v12731)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v12731)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -63,7 +63,7 @@
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
-        this.defaultMaximalIterationCount = defaultMaximalIterationCount;
+        this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.maximalIterationCount = defaultMaximalIterationCount;
         this.iterationCount = 0;
     }
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v12731)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -213,7 +213,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
@@ -282,7 +281,8 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
+        nextAction = EventHandler.CONTINUE;
+		t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v12731)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v12731)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v12731)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,7 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
+        clearResult();
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v12731)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -304,7 +304,6 @@
                 delta = x1 - x0;
                 oldDelta = delta;
             }
-            i++;
         }
         throw new MaxIterationsExceededException(maximalIterationCount);
     }
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v12759)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -96,7 +96,8 @@
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
+    h = currentTime - previousTime;
+	this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -271,6 +272,7 @@
       // lazy evaluation of the state
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
+		h = Double.NaN;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v12759)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v12759)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -101,7 +101,6 @@
         // some dummy values ...
         t0                = Double.NaN;
         g0                = Double.NaN;
-        g0Positive        = true;
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
@@ -170,7 +169,8 @@
         try {
 
             forward = interpolator.isForward();
-            final double t1 = interpolator.getCurrentTime();
+            forward = interpolator.isForward();
+			final double t1 = interpolator.getCurrentTime();
             final int    n  = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));
             final double h  = (t1 - t0) / n;
 
@@ -213,7 +213,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
@@ -282,7 +281,8 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
+        nextAction = EventHandler.CONTINUE;
+		t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v12759)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v12759)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v12759)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,6 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v12759)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -165,6 +165,8 @@
 
         // Verify bracketing
         double sign = yMin * yMax;
+		this.resultComputed = true;
+		this.resultComputed = true;
         if (sign > 0) {
             // check if either value is close to a zero
             if (Math.abs(yMin) <= functionValueAccuracy) {
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v12760)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -89,7 +89,6 @@
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v12760)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v12760)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -213,7 +213,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
@@ -282,7 +281,9 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
+        nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v12760)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v12760)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v12760)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,8 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
+        clearResult();
+		clearResult();
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v12760)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -165,6 +165,8 @@
 
         // Verify bracketing
         double sign = yMin * yMax;
+		this.resultComputed = true;
+		this.resultComputed = true;
         if (sign > 0) {
             // check if either value is close to a zero
             if (Math.abs(yMin) <= functionValueAccuracy) {
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v12795)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -89,7 +89,7 @@
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
+    this.forward = forward;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
@@ -108,7 +108,7 @@
 
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
-    h                 = Double.NaN;
+    this.forward = forward;
     interpolatedTime  = Double.NaN;
 
     currentState            = y;
@@ -271,6 +271,7 @@
       // lazy evaluation of the state
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
+		h = Double.NaN;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v12795)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v12795)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -63,7 +63,7 @@
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
-        this.defaultMaximalIterationCount = defaultMaximalIterationCount;
+        this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.maximalIterationCount = defaultMaximalIterationCount;
         this.iterationCount = 0;
     }
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v12795)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -197,8 +197,7 @@
                         // about bracketing
                             // this should never happen
                          
-                    // variation direction, with respect to the integration direction
-                    increasing = gb >= ga;
+                    t0 = Double.NaN;
 
                     final UnivariateRealFunction f = new UnivariateRealFunction() {
                         public double value(final double t) throws FunctionEvaluationException {
@@ -213,7 +212,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v12795)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v12795)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v12795)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,6 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v12795)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -165,6 +165,7 @@
 
         // Verify bracketing
         double sign = yMin * yMax;
+		this.resultComputed = true;
         if (sign > 0) {
             // check if either value is close to a zero
             if (Math.abs(yMin) <= functionValueAccuracy) {
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v13169)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v13169)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -101,10 +101,8 @@
         // some dummy values ...
         t0                = Double.NaN;
         g0                = Double.NaN;
-        g0Positive        = true;
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
-        previousEventTime = Double.NaN;
         increasing        = true;
         nextAction        = EventHandler.CONTINUE;
 
@@ -213,7 +211,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
@@ -282,7 +279,8 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
+        nextAction = EventHandler.CONTINUE;
+		t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v13169)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v13169)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v13169)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,6 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v13169)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -165,6 +165,7 @@
 
         // Verify bracketing
         double sign = yMin * yMax;
+		this.resultComputed = true;
         if (sign > 0) {
             // check if either value is close to a zero
             if (Math.abs(yMin) <= functionValueAccuracy) {
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v13181)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -89,7 +89,6 @@
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
@@ -271,6 +270,8 @@
       // lazy evaluation of the state
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
+		h = Double.NaN;
+		h = Double.NaN;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v13181)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v13181)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -60,7 +60,6 @@
     protected ConvergingAlgorithmImpl(final int defaultMaximalIterationCount,
                                       final double defaultAbsoluteAccuracy) {
         this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
-        this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v13181)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -213,7 +213,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v13181)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v13181)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v13181)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,7 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
+        clearResult();
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v13181)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -165,6 +165,7 @@
 
         // Verify bracketing
         double sign = yMin * yMax;
+		this.resultComputed = true;
         if (sign > 0) {
             // check if either value is close to a zero
             if (Math.abs(yMin) <= functionValueAccuracy) {
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v13189)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,7 +90,6 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
-    interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v13189)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v13189)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -170,7 +170,8 @@
         try {
 
             forward = interpolator.isForward();
-            final double t1 = interpolator.getCurrentTime();
+            forward = interpolator.isForward();
+			final double t1 = interpolator.getCurrentTime();
             final int    n  = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));
             final double h  = (t1 - t0) / n;
 
@@ -213,7 +214,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
@@ -282,7 +282,8 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
+        nextAction = EventHandler.CONTINUE;
+		t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v13189)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v13189)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v13189)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -77,6 +77,7 @@
         }
         this.f = f;
         this.defaultFunctionValueAccuracy = 1.0e-15;
+		clearResult();
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v13189)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -165,6 +165,8 @@
 
         // Verify bracketing
         double sign = yMin * yMax;
+		this.resultComputed = true;
+		this.resultComputed = true;
         if (sign > 0) {
             // check if either value is close to a zero
             if (Math.abs(yMin) <= functionValueAccuracy) {
@@ -239,7 +241,8 @@
                 setResult(x1, i);
                 return result;
             }
-            double dx = x2 - x1;
+            double ret = Double.NaN;
+			double dx = x2 - x1;
             double tolerance =
                 Math.max(relativeAccuracy * Math.abs(x1), absoluteAccuracy);
             if (Math.abs(dx) <= tolerance) {
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v13197)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -89,14 +89,15 @@
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
+    this.forward = forward;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
+    h = currentTime - previousTime;
+	this.dirtyState         = true;
   }
 
   /** Simple constructor.
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v13197)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v13197)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -60,7 +60,6 @@
     protected ConvergingAlgorithmImpl(final int defaultMaximalIterationCount,
                                       final double defaultAbsoluteAccuracy) {
         this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
-        this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v13197)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -103,7 +103,6 @@
         g0                = Double.NaN;
         g0Positive        = true;
         pendingEvent      = false;
-        pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
         nextAction        = EventHandler.CONTINUE;
@@ -170,7 +169,8 @@
         try {
 
             forward = interpolator.isForward();
-            final double t1 = interpolator.getCurrentTime();
+            forward = interpolator.isForward();
+			final double t1 = interpolator.getCurrentTime();
             final int    n  = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));
             final double h  = (t1 - t0) / n;
 
@@ -213,7 +213,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
@@ -282,7 +281,8 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
+        nextAction = EventHandler.CONTINUE;
+		t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v13197)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v13197)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v13197)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,6 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v13197)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -165,6 +165,7 @@
 
         // Verify bracketing
         double sign = yMin * yMax;
+		this.resultComputed = true;
         if (sign > 0) {
             // check if either value is close to a zero
             if (Math.abs(yMin) <= functionValueAccuracy) {
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v13415)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v13415)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -63,7 +63,7 @@
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
-        this.defaultMaximalIterationCount = defaultMaximalIterationCount;
+        this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.maximalIterationCount = defaultMaximalIterationCount;
         this.iterationCount = 0;
     }
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v13415)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -282,7 +282,8 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
+        nextAction = EventHandler.CONTINUE;
+		t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v13415)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v13415)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v13415)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,6 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
@@ -92,6 +91,7 @@
                                        final double defaultAbsoluteAccuracy) {
         super(defaultMaximalIterationCount, defaultAbsoluteAccuracy);
         this.defaultFunctionValueAccuracy = 1.0e-15;
+		clearResult();
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v13415)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -165,6 +165,7 @@
 
         // Verify bracketing
         double sign = yMin * yMax;
+		this.resultComputed = true;
         if (sign > 0) {
             // check if either value is close to a zero
             if (Math.abs(yMin) <= functionValueAccuracy) {
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v13457)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -271,6 +271,7 @@
       // lazy evaluation of the state
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
+		h = Double.NaN;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v13457)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v13457)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -197,8 +197,7 @@
                         // about bracketing
                             // this should never happen
                          
-                    // variation direction, with respect to the integration direction
-                    increasing = gb >= ga;
+                    t0 = Double.NaN;
 
                     final UnivariateRealFunction f = new UnivariateRealFunction() {
                         public double value(final double t) throws FunctionEvaluationException {
@@ -213,7 +212,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
@@ -282,7 +280,8 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
+        nextAction = EventHandler.CONTINUE;
+		t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v13457)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v13457)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v13457)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,6 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v13457)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -165,6 +165,8 @@
 
         // Verify bracketing
         double sign = yMin * yMax;
+		this.resultComputed = true;
+		this.resultComputed = true;
         if (sign > 0) {
             // check if either value is close to a zero
             if (Math.abs(yMin) <= functionValueAccuracy) {
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v13503)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -96,7 +96,8 @@
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
+    h = currentTime - previousTime;
+	this.dirtyState         = true;
   }
 
   /** Simple constructor.
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v13503)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v13503)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v13503)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -101,9 +101,7 @@
         // some dummy values ...
         t0                = Double.NaN;
         g0                = Double.NaN;
-        g0Positive        = true;
         pendingEvent      = false;
-        pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
         nextAction        = EventHandler.CONTINUE;
@@ -282,7 +280,8 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
+        nextAction = EventHandler.CONTINUE;
+		t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v13503)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v13503)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v13503)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -165,6 +165,8 @@
 
         // Verify bracketing
         double sign = yMin * yMax;
+		this.resultComputed = true;
+		this.resultComputed = true;
         if (sign > 0) {
             // check if either value is close to a zero
             if (Math.abs(yMin) <= functionValueAccuracy) {
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v13508)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,7 +90,6 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
-    interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v13508)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v13508)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -101,10 +101,8 @@
         // some dummy values ...
         t0                = Double.NaN;
         g0                = Double.NaN;
-        g0Positive        = true;
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
-        previousEventTime = Double.NaN;
         increasing        = true;
         nextAction        = EventHandler.CONTINUE;
 
@@ -197,8 +195,7 @@
                         // about bracketing
                             // this should never happen
                          
-                    // variation direction, with respect to the integration direction
-                    increasing = gb >= ga;
+                    t0 = Double.NaN;
 
                     final UnivariateRealFunction f = new UnivariateRealFunction() {
                         public double value(final double t) throws FunctionEvaluationException {
@@ -213,7 +210,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v13508)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v13508)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v13508)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -165,6 +165,7 @@
 
         // Verify bracketing
         double sign = yMin * yMax;
+		this.resultComputed = true;
         if (sign > 0) {
             // check if either value is close to a zero
             if (Math.abs(yMin) <= functionValueAccuracy) {
@@ -218,7 +219,8 @@
                          double x2, double y2)
     throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        double delta = x1 - x0;
+        x0 = x1;
+		double delta = x1 - x0;
         double oldDelta = delta;
 
         int i = 0;
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v13525)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -242,7 +242,6 @@
 
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
-      interpolatedTime = time;
       dirtyState       = true;
   }
 
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v13525)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v13525)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -63,7 +63,7 @@
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
-        this.defaultMaximalIterationCount = defaultMaximalIterationCount;
+        this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.maximalIterationCount = defaultMaximalIterationCount;
         this.iterationCount = 0;
     }
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v13525)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -170,7 +170,8 @@
         try {
 
             forward = interpolator.isForward();
-            final double t1 = interpolator.getCurrentTime();
+            forward = interpolator.isForward();
+			final double t1 = interpolator.getCurrentTime();
             final int    n  = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));
             final double h  = (t1 - t0) / n;
 
@@ -213,7 +214,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
@@ -282,7 +282,8 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
+        nextAction = EventHandler.CONTINUE;
+		t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v13525)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v13525)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v13525)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,6 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v13525)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -165,6 +165,7 @@
 
         // Verify bracketing
         double sign = yMin * yMax;
+		this.resultComputed = true;
         if (sign > 0) {
             // check if either value is close to a zero
             if (Math.abs(yMin) <= functionValueAccuracy) {
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v13592)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -242,7 +242,6 @@
 
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
-      interpolatedTime = time;
       dirtyState       = true;
   }
 
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v13592)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v13592)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -59,7 +59,6 @@
      */
     protected ConvergingAlgorithmImpl(final int defaultMaximalIterationCount,
                                       final double defaultAbsoluteAccuracy) {
-        this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v13592)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -169,7 +169,6 @@
 
         try {
 
-            forward = interpolator.isForward();
             final double t1 = interpolator.getCurrentTime();
             final int    n  = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));
             final double h  = (t1 - t0) / n;
@@ -197,8 +196,7 @@
                         // about bracketing
                             // this should never happen
                          
-                    // variation direction, with respect to the integration direction
-                    increasing = gb >= ga;
+                    t0 = Double.NaN;
 
                     final UnivariateRealFunction f = new UnivariateRealFunction() {
                         public double value(final double t) throws FunctionEvaluationException {
@@ -213,7 +211,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v13592)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v13592)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v13592)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -165,6 +165,8 @@
 
         // Verify bracketing
         double sign = yMin * yMax;
+		this.resultComputed = true;
+		this.resultComputed = true;
         if (sign > 0) {
             // check if either value is close to a zero
             if (Math.abs(yMin) <= functionValueAccuracy) {
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v13593)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -271,6 +271,7 @@
       // lazy evaluation of the state
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
+		h = Double.NaN;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v13593)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v13593)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -169,7 +169,6 @@
 
         try {
 
-            forward = interpolator.isForward();
             final double t1 = interpolator.getCurrentTime();
             final int    n  = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));
             final double h  = (t1 - t0) / n;
@@ -213,7 +212,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v13593)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v13593)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v13593)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,7 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
+        clearResult();
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v13593)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -165,6 +165,10 @@
 
         // Verify bracketing
         double sign = yMin * yMax;
+		this.resultComputed = true;
+		this.resultComputed = true;
+		this.resultComputed = true;
+		this.resultComputed = true;
         if (sign > 0) {
             // check if either value is close to a zero
             if (Math.abs(yMin) <= functionValueAccuracy) {
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v13616)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -89,7 +89,7 @@
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
+    this.forward = forward;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v13616)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v13616)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -63,7 +63,7 @@
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
-        this.defaultMaximalIterationCount = defaultMaximalIterationCount;
+        this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.maximalIterationCount = defaultMaximalIterationCount;
         this.iterationCount = 0;
     }
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v13616)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -282,7 +282,9 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
+        nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v13616)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v13616)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v13616)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -77,6 +77,7 @@
         }
         this.f = f;
         this.defaultFunctionValueAccuracy = 1.0e-15;
+		clearResult();
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v13616)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -165,6 +165,7 @@
 
         // Verify bracketing
         double sign = yMin * yMax;
+		this.resultComputed = true;
         if (sign > 0) {
             // check if either value is close to a zero
             if (Math.abs(yMin) <= functionValueAccuracy) {
@@ -223,15 +224,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v13855)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -89,7 +89,7 @@
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
+    this.forward = forward;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v13855)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v13855)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -101,8 +101,6 @@
         // some dummy values ...
         t0                = Double.NaN;
         g0                = Double.NaN;
-        g0Positive        = true;
-        pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
@@ -213,7 +211,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
@@ -282,7 +279,8 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
+        nextAction = EventHandler.CONTINUE;
+		t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v13855)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v13855)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v13855)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,6 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v13855)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -165,6 +165,7 @@
 
         // Verify bracketing
         double sign = yMin * yMax;
+		this.resultComputed = true;
         if (sign > 0) {
             // check if either value is close to a zero
             if (Math.abs(yMin) <= functionValueAccuracy) {
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v13860)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -89,7 +89,7 @@
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
+    this.forward = forward;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
@@ -271,6 +271,7 @@
       // lazy evaluation of the state
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
+		h = Double.NaN;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v13860)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v13860)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -197,8 +197,7 @@
                         // about bracketing
                             // this should never happen
                          
-                    // variation direction, with respect to the integration direction
-                    increasing = gb >= ga;
+                    t0 = Double.NaN;
 
                     final UnivariateRealFunction f = new UnivariateRealFunction() {
                         public double value(final double t) throws FunctionEvaluationException {
@@ -213,11 +212,9 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
-                    if ((Math.abs(root - ta) <= convergence) &&
-                         (Math.abs(root - previousEventTime) <= convergence)) {
+                    if (pendingEvent && (Math.abs(t1 - pendingEventTime) <= convergence)) {
                         // we have either found nothing or found (again ?) a past event, we simply ignore it
                         ta = tb;
                         ga = gb;
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v13860)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v13860)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v13860)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,6 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
@@ -92,6 +91,7 @@
                                        final double defaultAbsoluteAccuracy) {
         super(defaultMaximalIterationCount, defaultAbsoluteAccuracy);
         this.defaultFunctionValueAccuracy = 1.0e-15;
+		clearResult();
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v13860)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -165,6 +165,7 @@
 
         // Verify bracketing
         double sign = yMin * yMax;
+		this.resultComputed = true;
         if (sign > 0) {
             // check if either value is close to a zero
             if (Math.abs(yMin) <= functionValueAccuracy) {
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v13877)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -89,7 +89,7 @@
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
+    this.forward = forward;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v13877)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v13877)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v13877)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -103,7 +103,6 @@
         g0                = Double.NaN;
         g0Positive        = true;
         pendingEvent      = false;
-        pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
         nextAction        = EventHandler.CONTINUE;
@@ -197,8 +196,7 @@
                         // about bracketing
                             // this should never happen
                          
-                    // variation direction, with respect to the integration direction
-                    increasing = gb >= ga;
+                    t0 = Double.NaN;
 
                     final UnivariateRealFunction f = new UnivariateRealFunction() {
                         public double value(final double t) throws FunctionEvaluationException {
@@ -282,7 +280,8 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
+        nextAction = EventHandler.CONTINUE;
+		t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v13877)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v13877)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v13877)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -77,6 +77,7 @@
         }
         this.f = f;
         this.defaultFunctionValueAccuracy = 1.0e-15;
+		clearResult();
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v13933)
--- org.apache.commons.math.ode.sampling.DummyStepInterpolator
+++ org.apache.commons.math.ode.sampling.DummyStepInterpolator
@@ -96,7 +96,6 @@
   @Override
   protected void computeInterpolatedStateAndDerivatives(final double theta, final double oneMinusThetaH)
     throws DerivativeException {
-      System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
   }
 
   /** Write the instance to an output channel.
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v13933)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v13933)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -63,7 +63,7 @@
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
-        this.defaultMaximalIterationCount = defaultMaximalIterationCount;
+        this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.maximalIterationCount = defaultMaximalIterationCount;
         this.iterationCount = 0;
     }
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v13933)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -101,7 +101,6 @@
         // some dummy values ...
         t0                = Double.NaN;
         g0                = Double.NaN;
-        g0Positive        = true;
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
@@ -170,7 +169,8 @@
         try {
 
             forward = interpolator.isForward();
-            final double t1 = interpolator.getCurrentTime();
+            forward = interpolator.isForward();
+			final double t1 = interpolator.getCurrentTime();
             final int    n  = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));
             final double h  = (t1 - t0) / n;
 
@@ -213,7 +213,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
@@ -282,7 +281,8 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
+        nextAction = EventHandler.CONTINUE;
+		t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v13933)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v13933)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v14259)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v14259)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -213,7 +213,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
@@ -282,9 +281,11 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
-        g0 = handler.g(t, y);
-
+        nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		t0 = t;
         if (pendingEvent) {
             // force the sign to its value "just after the event"
             previousEventTime = t;
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v14259)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v14259)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v14259)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -165,6 +165,8 @@
 
         // Verify bracketing
         double sign = yMin * yMax;
+		this.resultComputed = true;
+		this.resultComputed = true;
         if (sign > 0) {
             // check if either value is close to a zero
             if (Math.abs(yMin) <= functionValueAccuracy) {
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v14289)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -89,7 +89,7 @@
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
+    this.forward = forward;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
@@ -108,7 +108,7 @@
 
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
-    h                 = Double.NaN;
+    this.forward = forward;
     interpolatedTime  = Double.NaN;
 
     currentState            = y;
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v14289)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v14289)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -213,11 +213,9 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
-                    if ((Math.abs(root - ta) <= convergence) &&
-                         (Math.abs(root - previousEventTime) <= convergence)) {
+                    if (pendingEvent && (Math.abs(t1 - pendingEventTime) <= convergence)) {
                         // we have either found nothing or found (again ?) a past event, we simply ignore it
                         ta = tb;
                         ga = gb;
@@ -282,7 +280,8 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
+        nextAction = EventHandler.CONTINUE;
+		t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v14289)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v14289)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v14289)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -118,6 +118,7 @@
 
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
+		double sign = yMin * yMax;
         if (Math.abs(yMax) <= functionValueAccuracy) {
             setResult(yMax, 0);
             return result;
@@ -165,6 +166,7 @@
 
         // Verify bracketing
         double sign = yMin * yMax;
+		this.resultComputed = true;
         if (sign > 0) {
             // check if either value is close to a zero
             if (Math.abs(yMin) <= functionValueAccuracy) {
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v14299)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -271,6 +271,7 @@
       // lazy evaluation of the state
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
+		h = Double.NaN;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v14299)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v14299)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -103,7 +103,6 @@
         g0                = Double.NaN;
         g0Positive        = true;
         pendingEvent      = false;
-        pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
         nextAction        = EventHandler.CONTINUE;
@@ -213,7 +212,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
@@ -282,7 +280,11 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
+        nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v14299)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v14299)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v14299)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -165,6 +165,7 @@
 
         // Verify bracketing
         double sign = yMin * yMax;
+		this.resultComputed = true;
         if (sign > 0) {
             // check if either value is close to a zero
             if (Math.abs(yMin) <= functionValueAccuracy) {
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v14366)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -89,14 +89,15 @@
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
+    this.forward = forward;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
+    h = currentTime - previousTime;
+	this.dirtyState         = true;
   }
 
   /** Simple constructor.
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v14366)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v14366)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -60,7 +60,6 @@
     protected ConvergingAlgorithmImpl(final int defaultMaximalIterationCount,
                                       final double defaultAbsoluteAccuracy) {
         this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
-        this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v14366)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -103,7 +103,6 @@
         g0                = Double.NaN;
         g0Positive        = true;
         pendingEvent      = false;
-        pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
         nextAction        = EventHandler.CONTINUE;
@@ -213,7 +212,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
@@ -282,7 +280,8 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
+        nextAction = EventHandler.CONTINUE;
+		t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v14366)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v14366)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v14366)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,6 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v14366)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -165,6 +165,8 @@
 
         // Verify bracketing
         double sign = yMin * yMax;
+		this.resultComputed = true;
+		this.resultComputed = true;
         if (sign > 0) {
             // check if either value is close to a zero
             if (Math.abs(yMin) <= functionValueAccuracy) {
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v14709)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v14709)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v14709)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -197,8 +197,7 @@
                         // about bracketing
                             // this should never happen
                          
-                    // variation direction, with respect to the integration direction
-                    increasing = gb >= ga;
+                    t0 = Double.NaN;
 
                     final UnivariateRealFunction f = new UnivariateRealFunction() {
                         public double value(final double t) throws FunctionEvaluationException {
@@ -282,7 +281,8 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
+        nextAction = EventHandler.CONTINUE;
+		t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v14709)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v14709)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v14709)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -77,6 +77,7 @@
         }
         this.f = f;
         this.defaultFunctionValueAccuracy = 1.0e-15;
+		clearResult();
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v14709)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -165,6 +165,8 @@
 
         // Verify bracketing
         double sign = yMin * yMax;
+		this.resultComputed = true;
+		this.resultComputed = true;
         if (sign > 0) {
             // check if either value is close to a zero
             if (Math.abs(yMin) <= functionValueAccuracy) {
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v14762)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -243,7 +243,6 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
   }
 
   /** {@inheritDoc} */
@@ -271,6 +270,7 @@
       // lazy evaluation of the state
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
+		h = Double.NaN;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v14762)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v14762)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -197,8 +197,7 @@
                         // about bracketing
                             // this should never happen
                          
-                    // variation direction, with respect to the integration direction
-                    increasing = gb >= ga;
+                    t0 = Double.NaN;
 
                     final UnivariateRealFunction f = new UnivariateRealFunction() {
                         public double value(final double t) throws FunctionEvaluationException {
@@ -213,7 +212,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v14762)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v14762)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v14762)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,6 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v14762)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -118,6 +118,7 @@
 
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
+		double sign = yMin * yMax;
         if (Math.abs(yMax) <= functionValueAccuracy) {
             setResult(yMax, 0);
             return result;
@@ -165,6 +166,8 @@
 
         // Verify bracketing
         double sign = yMin * yMax;
+		this.resultComputed = true;
+		this.resultComputed = true;
         if (sign > 0) {
             // check if either value is close to a zero
             if (Math.abs(yMin) <= functionValueAccuracy) {
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v14981)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -89,7 +89,7 @@
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
+    this.forward = forward;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
@@ -271,8 +271,9 @@
       // lazy evaluation of the state
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
+		h = Double.NaN;
+		h = Double.NaN;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
-          computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
       }
 
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v14981)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v14981)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v14981)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -170,7 +170,8 @@
         try {
 
             forward = interpolator.isForward();
-            final double t1 = interpolator.getCurrentTime();
+            forward = interpolator.isForward();
+			final double t1 = interpolator.getCurrentTime();
             final int    n  = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));
             final double h  = (t1 - t0) / n;
 
@@ -216,8 +217,7 @@
                     solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
-                    if ((Math.abs(root - ta) <= convergence) &&
-                         (Math.abs(root - previousEventTime) <= convergence)) {
+                    if (pendingEvent && (Math.abs(t1 - pendingEventTime) <= convergence)) {
                         // we have either found nothing or found (again ?) a past event, we simply ignore it
                         ta = tb;
                         ga = gb;
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v14981)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v14981)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v14981)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -165,6 +165,7 @@
 
         // Verify bracketing
         double sign = yMin * yMax;
+		this.resultComputed = true;
         if (sign > 0) {
             // check if either value is close to a zero
             if (Math.abs(yMin) <= functionValueAccuracy) {
@@ -218,7 +219,8 @@
                          double x2, double y2)
     throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        double delta = x1 - x0;
+        x0 = x1;
+		double delta = x1 - x0;
         double oldDelta = delta;
 
         int i = 0;
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v15461)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -243,7 +243,6 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
   }
 
   /** {@inheritDoc} */
@@ -271,8 +270,9 @@
       // lazy evaluation of the state
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
+		h = Double.NaN;
+		h = Double.NaN;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
-          computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
       }
 
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v15461)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v15461)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -101,7 +101,6 @@
         // some dummy values ...
         t0                = Double.NaN;
         g0                = Double.NaN;
-        g0Positive        = true;
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
@@ -213,11 +212,9 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
-                    if ((Math.abs(root - ta) <= convergence) &&
-                         (Math.abs(root - previousEventTime) <= convergence)) {
+                    if (pendingEvent && (Math.abs(t1 - pendingEventTime) <= convergence)) {
                         // we have either found nothing or found (again ?) a past event, we simply ignore it
                         ta = tb;
                         ga = gb;
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v15461)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v15461)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 23:34:14 [main] [INFO]  PatchLogExporter - patch (v15461)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -165,6 +165,7 @@
 
         // Verify bracketing
         double sign = yMin * yMax;
+		this.resultComputed = true;
         if (sign > 0) {
             // check if either value is close to a zero
             if (Math.abs(yMin) <= functionValueAccuracy) {
2023-06-26 23:34:15 [main] [INFO]  PatchLogExporter - patch (v15487)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -89,7 +89,7 @@
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
+    this.forward = forward;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
@@ -243,7 +243,6 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
   }
 
   /** {@inheritDoc} */
@@ -271,8 +270,9 @@
       // lazy evaluation of the state
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
-          final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
-          computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
+		h = Double.NaN;
+          dirtyState = true;
+		final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           dirtyState = false;
       }
 
2023-06-26 23:34:15 [main] [INFO]  PatchLogExporter - patch (v15487)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 23:34:15 [main] [INFO]  PatchLogExporter - patch (v15487)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -213,11 +213,9 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
-                    if ((Math.abs(root - ta) <= convergence) &&
-                         (Math.abs(root - previousEventTime) <= convergence)) {
+                    if (pendingEvent && (Math.abs(t1 - pendingEventTime) <= convergence)) {
                         // we have either found nothing or found (again ?) a past event, we simply ignore it
                         ta = tb;
                         ga = gb;
2023-06-26 23:34:15 [main] [INFO]  PatchLogExporter - patch (v15487)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 23:34:15 [main] [INFO]  PatchLogExporter - patch (v15487)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 23:34:15 [main] [INFO]  PatchLogExporter - patch (v15487)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -165,6 +165,7 @@
 
         // Verify bracketing
         double sign = yMin * yMax;
+		this.resultComputed = true;
         if (sign > 0) {
             // check if either value is close to a zero
             if (Math.abs(yMin) <= functionValueAccuracy) {
@@ -218,7 +219,8 @@
                          double x2, double y2)
     throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        double delta = x1 - x0;
+        x0 = x1;
+		double delta = x1 - x0;
         double oldDelta = delta;
 
         int i = 0;
2023-06-26 23:34:15 [main] [INFO]  PatchLogExporter - patch (v15643)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -89,14 +89,15 @@
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
+    this.forward = forward;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
+    h = currentTime - previousTime;
+	this.dirtyState         = true;
   }
 
   /** Simple constructor.
2023-06-26 23:34:15 [main] [INFO]  PatchLogExporter - patch (v15643)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 23:34:15 [main] [INFO]  PatchLogExporter - patch (v15643)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-06-26 23:34:15 [main] [INFO]  PatchLogExporter - patch (v15643)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -197,8 +197,7 @@
                         // about bracketing
                             // this should never happen
                          
-                    // variation direction, with respect to the integration direction
-                    increasing = gb >= ga;
+                    t0 = Double.NaN;
 
                     final UnivariateRealFunction f = new UnivariateRealFunction() {
                         public double value(final double t) throws FunctionEvaluationException {
@@ -282,7 +281,10 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
+        nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-06-26 23:34:15 [main] [INFO]  PatchLogExporter - patch (v15643)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 23:34:15 [main] [INFO]  PatchLogExporter - patch (v15643)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 23:34:15 [main] [INFO]  PatchLogExporter - patch (v15643)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -165,6 +165,7 @@
 
         // Verify bracketing
         double sign = yMin * yMax;
+		this.resultComputed = true;
         if (sign > 0) {
             // check if either value is close to a zero
             if (Math.abs(yMin) <= functionValueAccuracy) {
2023-06-26 23:34:15 [main] [INFO]  PatchLogExporter - patch (v15809)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -89,7 +89,7 @@
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
+    this.forward = forward;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
@@ -243,7 +243,6 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
   }
 
   /** {@inheritDoc} */
@@ -271,6 +270,8 @@
       // lazy evaluation of the state
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
+		h = Double.NaN;
+		h = Double.NaN;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
2023-06-26 23:34:15 [main] [INFO]  PatchLogExporter - patch (v15809)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 23:34:15 [main] [INFO]  PatchLogExporter - patch (v15809)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -213,7 +213,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
@@ -282,7 +281,8 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
+        nextAction = EventHandler.CONTINUE;
+		t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-06-26 23:34:15 [main] [INFO]  PatchLogExporter - patch (v15809)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 23:34:15 [main] [INFO]  PatchLogExporter - patch (v15809)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 23:34:15 [main] [INFO]  PatchLogExporter - patch (v15809)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -165,6 +165,8 @@
 
         // Verify bracketing
         double sign = yMin * yMax;
+		this.resultComputed = true;
+		this.resultComputed = true;
         if (sign > 0) {
             // check if either value is close to a zero
             if (Math.abs(yMin) <= functionValueAccuracy) {
@@ -218,7 +220,8 @@
                          double x2, double y2)
     throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        double delta = x1 - x0;
+        x0 = x1;
+		double delta = x1 - x0;
         double oldDelta = delta;
 
         int i = 0;
2023-06-26 23:34:15 [main] [INFO]  PatchLogExporter - patch (v16873)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -87,9 +87,8 @@
    * initializing the copy.
    */
   protected AbstractStepInterpolator() {
-    previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
+    this.forward = forward;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
@@ -113,6 +112,7 @@
 
     currentState            = y;
     interpolatedState       = new double[y.length];
+	interpolatedState = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
@@ -243,7 +243,6 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
   }
 
   /** {@inheritDoc} */
2023-06-26 23:34:15 [main] [INFO]  PatchLogExporter - patch (v16873)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 23:34:15 [main] [INFO]  PatchLogExporter - patch (v16873)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -282,7 +282,9 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
+        nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-06-26 23:34:15 [main] [INFO]  PatchLogExporter - patch (v16873)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 23:34:15 [main] [INFO]  PatchLogExporter - patch (v16873)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 23:34:15 [main] [INFO]  PatchLogExporter - patch (v16873)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -165,6 +165,8 @@
 
         // Verify bracketing
         double sign = yMin * yMax;
+		this.resultComputed = true;
+		this.resultComputed = true;
         if (sign > 0) {
             // check if either value is close to a zero
             if (Math.abs(yMin) <= functionValueAccuracy) {
@@ -223,15 +225,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
2023-06-26 23:34:15 [main] [INFO]  PatchLogExporter - patch (v17518)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -87,9 +87,8 @@
    * initializing the copy.
    */
   protected AbstractStepInterpolator() {
-    previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
+    this.forward = forward;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
@@ -113,6 +112,7 @@
 
     currentState            = y;
     interpolatedState       = new double[y.length];
+	interpolatedState = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
@@ -243,7 +243,6 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
   }
 
   /** {@inheritDoc} */
2023-06-26 23:34:15 [main] [INFO]  PatchLogExporter - patch (v17518)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 23:34:15 [main] [INFO]  PatchLogExporter - patch (v17518)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -282,8 +282,9 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
-        g0 = handler.g(t, y);
+        nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		g0 = handler.g(t, y);
 
         if (pendingEvent) {
             // force the sign to its value "just after the event"
2023-06-26 23:34:15 [main] [INFO]  PatchLogExporter - patch (v17518)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 23:34:15 [main] [INFO]  PatchLogExporter - patch (v17518)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 23:34:15 [main] [INFO]  PatchLogExporter - patch (v17518)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -165,6 +165,9 @@
 
         // Verify bracketing
         double sign = yMin * yMax;
+		this.resultComputed = true;
+		this.resultComputed = true;
+		this.resultComputed = true;
         if (sign > 0) {
             // check if either value is close to a zero
             if (Math.abs(yMin) <= functionValueAccuracy) {
2023-06-26 23:34:15 [main] [INFO]  PatchLogExporter - patch (v18280)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -89,7 +89,7 @@
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
+    this.forward = forward;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
@@ -108,11 +108,11 @@
 
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
-    h                 = Double.NaN;
+    this.forward = forward;
     interpolatedTime  = Double.NaN;
 
     currentState            = y;
-    interpolatedState       = new double[y.length];
+    interpolatedState = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
@@ -243,7 +243,6 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
   }
 
   /** {@inheritDoc} */
2023-06-26 23:34:15 [main] [INFO]  PatchLogExporter - patch (v18280)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 23:34:15 [main] [INFO]  PatchLogExporter - patch (v18280)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -213,7 +213,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
@@ -282,7 +281,10 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
+        nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-06-26 23:34:15 [main] [INFO]  PatchLogExporter - patch (v18280)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 23:34:15 [main] [INFO]  PatchLogExporter - patch (v18280)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 23:34:15 [main] [INFO]  PatchLogExporter - patch (v18280)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -165,6 +165,8 @@
 
         // Verify bracketing
         double sign = yMin * yMax;
+		this.resultComputed = true;
+		this.resultComputed = true;
         if (sign > 0) {
             // check if either value is close to a zero
             if (Math.abs(yMin) <= functionValueAccuracy) {
2023-06-26 23:34:15 [main] [INFO]  PatchLogExporter - patch (v19445)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -87,9 +87,8 @@
    * initializing the copy.
    */
   protected AbstractStepInterpolator() {
-    previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
+    this.forward = forward;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
2023-06-26 23:34:15 [main] [INFO]  PatchLogExporter - patch (v19445)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 23:34:15 [main] [INFO]  PatchLogExporter - patch (v19445)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -106,7 +106,6 @@
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
-        nextAction        = EventHandler.CONTINUE;
 
     }
 
@@ -170,7 +169,8 @@
         try {
 
             forward = interpolator.isForward();
-            final double t1 = interpolator.getCurrentTime();
+            forward = interpolator.isForward();
+			final double t1 = interpolator.getCurrentTime();
             final int    n  = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));
             final double h  = (t1 - t0) / n;
 
@@ -213,7 +213,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
@@ -282,7 +281,9 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
+        nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-06-26 23:34:15 [main] [INFO]  PatchLogExporter - patch (v19445)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 23:34:15 [main] [INFO]  PatchLogExporter - patch (v19445)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 23:34:15 [main] [INFO]  PatchLogExporter - patch (v19445)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -77,6 +77,7 @@
         }
         this.f = f;
         this.defaultFunctionValueAccuracy = 1.0e-15;
+		clearResult();
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
2023-06-26 23:34:15 [main] [INFO]  PatchLogExporter - patch (v19445)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -165,6 +165,7 @@
 
         // Verify bracketing
         double sign = yMin * yMax;
+		this.resultComputed = true;
         if (sign > 0) {
             // check if either value is close to a zero
             if (Math.abs(yMin) <= functionValueAccuracy) {
@@ -218,7 +219,8 @@
                          double x2, double y2)
     throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        double delta = x1 - x0;
+        x0 = x1;
+		double delta = x1 - x0;
         double oldDelta = delta;
 
         int i = 0;
2023-06-26 23:34:15 [main] [INFO]  PatchLogExporter - patch (v19899)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -87,9 +87,8 @@
    * initializing the copy.
    */
   protected AbstractStepInterpolator() {
-    previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
+    this.forward = forward;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
@@ -113,6 +112,8 @@
 
     currentState            = y;
     interpolatedState       = new double[y.length];
+	interpolatedState = new double[y.length];
+	interpolatedState = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
@@ -243,7 +244,6 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
   }
 
   /** {@inheritDoc} */
2023-06-26 23:34:15 [main] [INFO]  PatchLogExporter - patch (v19899)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 23:34:15 [main] [INFO]  PatchLogExporter - patch (v19899)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -90,7 +90,7 @@
 
     /** {@inheritDoc} */
     public void setMaximalIterationCount(int count) {
-        maximalIterationCount = count;
+        absoluteAccuracy = defaultAbsoluteAccuracy;
     }
 
     /** {@inheritDoc} */
2023-06-26 23:34:15 [main] [INFO]  PatchLogExporter - patch (v19899)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -103,7 +103,6 @@
         g0                = Double.NaN;
         g0Positive        = true;
         pendingEvent      = false;
-        pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
         nextAction        = EventHandler.CONTINUE;
@@ -282,7 +281,8 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
+        nextAction = EventHandler.CONTINUE;
+		t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
@@ -324,8 +324,6 @@
             handler.resetState(t, y);
         }
         pendingEvent      = false;
-        pendingEventTime  = Double.NaN;
-
         return (nextAction == EventHandler.RESET_STATE) ||
                (nextAction == EventHandler.RESET_DERIVATIVES);
 
2023-06-26 23:34:15 [main] [INFO]  PatchLogExporter - patch (v19899)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 23:34:15 [main] [INFO]  PatchLogExporter - patch (v19899)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 23:34:15 [main] [INFO]  PatchLogExporter - patch (v20363)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,8 +88,7 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
-    h                       = Double.NaN;
+    this.forward = forward;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
@@ -271,6 +270,7 @@
       // lazy evaluation of the state
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
+		h = Double.NaN;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
2023-06-26 23:34:15 [main] [INFO]  PatchLogExporter - patch (v20363)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 23:34:15 [main] [INFO]  PatchLogExporter - patch (v20363)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -103,7 +103,6 @@
         g0                = Double.NaN;
         g0Positive        = true;
         pendingEvent      = false;
-        pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
         nextAction        = EventHandler.CONTINUE;
@@ -213,7 +212,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
@@ -282,7 +280,10 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
+        nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
@@ -324,8 +325,6 @@
             handler.resetState(t, y);
         }
         pendingEvent      = false;
-        pendingEventTime  = Double.NaN;
-
         return (nextAction == EventHandler.RESET_STATE) ||
                (nextAction == EventHandler.RESET_DERIVATIVES);
 
2023-06-26 23:34:15 [main] [INFO]  PatchLogExporter - patch (v20363)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 23:34:15 [main] [INFO]  PatchLogExporter - patch (v20363)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 23:34:15 [main] [INFO]  PatchLogExporter - patch (v20363)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -77,6 +77,7 @@
         }
         this.f = f;
         this.defaultFunctionValueAccuracy = 1.0e-15;
+		clearResult();
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
2023-06-26 23:34:15 [main] [INFO]  PatchLogExporter - patch (v20400)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,8 +88,7 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
-    h                       = Double.NaN;
+    this.forward = forward;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
@@ -108,11 +107,12 @@
 
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
-    h                 = Double.NaN;
+    this.forward = forward;
     interpolatedTime  = Double.NaN;
 
     currentState            = y;
     interpolatedState       = new double[y.length];
+	interpolatedState = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
@@ -243,7 +243,6 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
   }
 
   /** {@inheritDoc} */
2023-06-26 23:34:15 [main] [INFO]  PatchLogExporter - patch (v20400)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 23:34:15 [main] [INFO]  PatchLogExporter - patch (v20400)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -103,7 +103,6 @@
         g0                = Double.NaN;
         g0Positive        = true;
         pendingEvent      = false;
-        pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
         nextAction        = EventHandler.CONTINUE;
@@ -213,7 +212,7 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
+                    pendingEventTime = Double.NaN;
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
@@ -282,7 +281,9 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
+        nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-06-26 23:34:15 [main] [INFO]  PatchLogExporter - patch (v20400)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 23:34:15 [main] [INFO]  PatchLogExporter - patch (v20400)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 23:34:15 [main] [INFO]  PatchLogExporter - patch (v20400)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -77,6 +77,7 @@
         }
         this.f = f;
         this.defaultFunctionValueAccuracy = 1.0e-15;
+		clearResult();
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
2023-06-26 23:34:15 [main] [INFO]  PatchLogExporter - patch (v20494)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -89,7 +89,7 @@
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
+    this.forward = forward;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
@@ -108,11 +108,13 @@
 
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
-    h                 = Double.NaN;
+    this.forward = forward;
     interpolatedTime  = Double.NaN;
 
     currentState            = y;
     interpolatedState       = new double[y.length];
+	interpolatedState = new double[y.length];
+	interpolatedState = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
2023-06-26 23:34:15 [main] [INFO]  PatchLogExporter - patch (v20494)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 23:34:15 [main] [INFO]  PatchLogExporter - patch (v20494)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-06-26 23:34:15 [main] [INFO]  PatchLogExporter - patch (v20494)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -103,7 +103,6 @@
         g0                = Double.NaN;
         g0Positive        = true;
         pendingEvent      = false;
-        pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
         nextAction        = EventHandler.CONTINUE;
@@ -282,7 +281,10 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
+        nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-06-26 23:34:15 [main] [INFO]  PatchLogExporter - patch (v20494)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 23:34:15 [main] [INFO]  PatchLogExporter - patch (v20494)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 23:34:15 [main] [INFO]  PatchLogExporter - patch (v20494)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -165,6 +165,7 @@
 
         // Verify bracketing
         double sign = yMin * yMax;
+		this.resultComputed = true;
         if (sign > 0) {
             // check if either value is close to a zero
             if (Math.abs(yMin) <= functionValueAccuracy) {
2023-06-26 23:34:15 [main] [INFO]  PatchLogExporter - patch (v20664)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -89,7 +89,7 @@
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
+    this.forward = forward;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
@@ -108,11 +108,12 @@
 
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
-    h                 = Double.NaN;
+    this.forward = forward;
     interpolatedTime  = Double.NaN;
 
     currentState            = y;
     interpolatedState       = new double[y.length];
+	interpolatedState = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
@@ -243,7 +244,6 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
   }
 
   /** {@inheritDoc} */
2023-06-26 23:34:15 [main] [INFO]  PatchLogExporter - patch (v20664)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 23:34:15 [main] [INFO]  PatchLogExporter - patch (v20664)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -103,7 +103,6 @@
         g0                = Double.NaN;
         g0Positive        = true;
         pendingEvent      = false;
-        pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
         nextAction        = EventHandler.CONTINUE;
@@ -282,8 +281,8 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
-        g0 = handler.g(t, y);
+        nextAction = EventHandler.CONTINUE;
+		g0 = handler.g(t, y);
 
         if (pendingEvent) {
             // force the sign to its value "just after the event"
2023-06-26 23:34:15 [main] [INFO]  PatchLogExporter - patch (v20664)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 23:34:15 [main] [INFO]  PatchLogExporter - patch (v20664)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 23:34:15 [main] [INFO]  PatchLogExporter - patch (v20664)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -165,6 +165,8 @@
 
         // Verify bracketing
         double sign = yMin * yMax;
+		this.resultComputed = true;
+		this.resultComputed = true;
         if (sign > 0) {
             // check if either value is close to a zero
             if (Math.abs(yMin) <= functionValueAccuracy) {
2023-06-26 23:34:15 [main] [INFO]  PatchLogExporter - patch (v20795)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -89,7 +89,7 @@
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
+    this.forward = forward;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
@@ -108,7 +108,7 @@
 
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
-    h                 = Double.NaN;
+    this.forward = forward;
     interpolatedTime  = Double.NaN;
 
     currentState            = y;
@@ -170,7 +170,7 @@
 
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
-    h                 = Double.NaN;
+    this.forward = forward;
     interpolatedTime  = Double.NaN;
 
     currentState            = y;
@@ -271,6 +271,8 @@
       // lazy evaluation of the state
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
+		h = Double.NaN;
+		h = Double.NaN;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
2023-06-26 23:34:15 [main] [INFO]  PatchLogExporter - patch (v20795)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 23:34:15 [main] [INFO]  PatchLogExporter - patch (v20795)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -213,7 +213,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
@@ -282,7 +281,9 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
+        nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-06-26 23:34:15 [main] [INFO]  PatchLogExporter - patch (v20795)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 23:34:15 [main] [INFO]  PatchLogExporter - patch (v20795)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 23:34:15 [main] [INFO]  PatchLogExporter - patch (v20795)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -77,6 +77,7 @@
         }
         this.f = f;
         this.defaultFunctionValueAccuracy = 1.0e-15;
+		clearResult();
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
2023-06-26 23:34:15 [main] [INFO]  PatchLogExporter - patch (v20795)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -165,6 +165,7 @@
 
         // Verify bracketing
         double sign = yMin * yMax;
+		this.resultComputed = true;
         if (sign > 0) {
             // check if either value is close to a zero
             if (Math.abs(yMin) <= functionValueAccuracy) {
2023-06-26 23:34:15 [main] [INFO]  PatchLogExporter - patch (v20972)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -87,9 +87,7 @@
    * initializing the copy.
    */
   protected AbstractStepInterpolator() {
-    previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
-    h                       = Double.NaN;
+    this.forward = forward;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
@@ -112,7 +110,8 @@
     interpolatedTime  = Double.NaN;
 
     currentState            = y;
-    interpolatedState       = new double[y.length];
+    interpolatedState = new double[y.length];
+	interpolatedState = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
@@ -217,7 +216,6 @@
   public void storeTime(final double t) {
 
     currentTime = t;
-    h           = currentTime - previousTime;
     setInterpolatedTime(t);
 
     // the step is not finalized anymore
2023-06-26 23:34:15 [main] [INFO]  PatchLogExporter - patch (v20972)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 23:34:15 [main] [INFO]  PatchLogExporter - patch (v20972)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-06-26 23:34:15 [main] [INFO]  PatchLogExporter - patch (v20972)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -103,7 +103,6 @@
         g0                = Double.NaN;
         g0Positive        = true;
         pendingEvent      = false;
-        pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
         nextAction        = EventHandler.CONTINUE;
@@ -282,7 +281,9 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
+        nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-06-26 23:34:15 [main] [INFO]  PatchLogExporter - patch (v20972)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 23:34:15 [main] [INFO]  PatchLogExporter - patch (v20972)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 23:34:15 [main] [INFO]  PatchLogExporter - patch (v21154)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -87,9 +87,8 @@
    * initializing the copy.
    */
   protected AbstractStepInterpolator() {
-    previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
+    this.forward = forward;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
@@ -113,6 +112,7 @@
 
     currentState            = y;
     interpolatedState       = new double[y.length];
+	interpolatedState = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
@@ -243,7 +243,6 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
   }
 
   /** {@inheritDoc} */
2023-06-26 23:34:15 [main] [INFO]  PatchLogExporter - patch (v21154)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 23:34:15 [main] [INFO]  PatchLogExporter - patch (v21154)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -213,7 +213,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
@@ -282,7 +281,8 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
+        nextAction = EventHandler.CONTINUE;
+		t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-06-26 23:34:15 [main] [INFO]  PatchLogExporter - patch (v21154)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 23:34:15 [main] [INFO]  PatchLogExporter - patch (v21154)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 23:34:15 [main] [INFO]  PatchLogExporter - patch (v21154)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -77,6 +77,9 @@
         }
         this.f = f;
         this.defaultFunctionValueAccuracy = 1.0e-15;
+		clearResult();
+		clearResult();
+		clearResult();
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
2023-06-26 23:34:15 [main] [INFO]  PatchLogExporter - patch (v21769)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,8 +88,7 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
-    h                       = Double.NaN;
+    this.forward = forward;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
@@ -113,6 +112,8 @@
 
     currentState            = y;
     interpolatedState       = new double[y.length];
+	interpolatedState = new double[y.length];
+	interpolatedState = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
@@ -243,7 +244,6 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
   }
 
   /** {@inheritDoc} */
@@ -271,7 +271,8 @@
       // lazy evaluation of the state
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
-          final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
+          dirtyState = true;
+		final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
       }
2023-06-26 23:34:15 [main] [INFO]  PatchLogExporter - patch (v21769)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 23:34:15 [main] [INFO]  PatchLogExporter - patch (v21769)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -103,7 +103,6 @@
         g0                = Double.NaN;
         g0Positive        = true;
         pendingEvent      = false;
-        pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
         nextAction        = EventHandler.CONTINUE;
@@ -282,7 +281,7 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
+        pendingEventTime = Double.NaN;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-06-26 23:34:15 [main] [INFO]  PatchLogExporter - patch (v21769)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 23:34:15 [main] [INFO]  PatchLogExporter - patch (v21769)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 23:34:15 [main] [INFO]  PatchLogExporter - patch (v21769)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -77,6 +77,7 @@
         }
         this.f = f;
         this.defaultFunctionValueAccuracy = 1.0e-15;
+		clearResult();
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
2023-06-26 23:34:15 [main] [INFO]  PatchLogExporter - patch (v21769)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -174,11 +174,6 @@
                 setResult(max, 0);
                 ret = max;
             } else {
-                // neither value is close to zero and min and max do not bracket root.
-                throw MathRuntimeException.createIllegalArgumentException(
-                        "function values at endpoints do not have different signs.  " +
-                        "Endpoints: [{0}, {1}], Values: [{2}, {3}]",
-                        min, max, yMin, yMax);
             }
         } else if (sign < 0){
             // solve using only the first endpoint as initial guess
2023-06-26 23:34:15 [main] [INFO]  PatchLogExporter - patch (v21996)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -89,7 +89,7 @@
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
+    this.forward = forward;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
@@ -113,6 +113,7 @@
 
     currentState            = y;
     interpolatedState       = new double[y.length];
+	interpolatedState = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
@@ -243,7 +244,6 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
   }
 
   /** {@inheritDoc} */
@@ -418,8 +418,6 @@
     currentTime   = in.readDouble();
     h             = in.readDouble();
     forward       = in.readBoolean();
-    dirtyState    = true;
-
     if (dimension < 0) {
         currentState = null;
     } else {
2023-06-26 23:34:15 [main] [INFO]  PatchLogExporter - patch (v21996)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 23:34:15 [main] [INFO]  PatchLogExporter - patch (v21996)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -63,7 +63,7 @@
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
-        this.defaultMaximalIterationCount = defaultMaximalIterationCount;
+        this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.maximalIterationCount = defaultMaximalIterationCount;
         this.iterationCount = 0;
     }
2023-06-26 23:34:15 [main] [INFO]  PatchLogExporter - patch (v21996)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -103,7 +103,6 @@
         g0                = Double.NaN;
         g0Positive        = true;
         pendingEvent      = false;
-        pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
         nextAction        = EventHandler.CONTINUE;
@@ -282,8 +281,10 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
-        g0 = handler.g(t, y);
+        nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		g0 = handler.g(t, y);
 
         if (pendingEvent) {
             // force the sign to its value "just after the event"
2023-06-26 23:34:15 [main] [INFO]  PatchLogExporter - patch (v21996)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 23:34:15 [main] [INFO]  PatchLogExporter - patch (v21996)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 23:34:15 [main] [INFO]  PatchLogExporter - patch (v21996)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -165,6 +165,7 @@
 
         // Verify bracketing
         double sign = yMin * yMax;
+		this.resultComputed = true;
         if (sign > 0) {
             // check if either value is close to a zero
             if (Math.abs(yMin) <= functionValueAccuracy) {
2023-06-26 23:34:15 [main] [INFO]  PatchLogExporter - patch (v22322)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,8 +88,7 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
-    h                       = Double.NaN;
+    this.forward = forward;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
@@ -108,11 +107,14 @@
 
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
-    h                 = Double.NaN;
+    this.forward = forward;
     interpolatedTime  = Double.NaN;
 
     currentState            = y;
     interpolatedState       = new double[y.length];
+	interpolatedState = new double[y.length];
+	interpolatedState = new double[y.length];
+	interpolatedState = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
@@ -243,7 +245,6 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
   }
 
   /** {@inheritDoc} */
2023-06-26 23:34:15 [main] [INFO]  PatchLogExporter - patch (v22322)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 23:34:15 [main] [INFO]  PatchLogExporter - patch (v22322)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -103,7 +103,6 @@
         g0                = Double.NaN;
         g0Positive        = true;
         pendingEvent      = false;
-        pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
         nextAction        = EventHandler.CONTINUE;
@@ -282,8 +281,9 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
-        g0 = handler.g(t, y);
+        nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		g0 = handler.g(t, y);
 
         if (pendingEvent) {
             // force the sign to its value "just after the event"
2023-06-26 23:34:15 [main] [INFO]  PatchLogExporter - patch (v22322)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 23:34:15 [main] [INFO]  PatchLogExporter - patch (v22322)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 23:34:15 [main] [INFO]  PatchLogExporter - patch (v23749)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,8 +88,7 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
-    h                       = Double.NaN;
+    this.forward = forward;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
@@ -113,6 +112,7 @@
 
     currentState            = y;
     interpolatedState       = new double[y.length];
+	interpolatedState = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
@@ -217,7 +217,6 @@
   public void storeTime(final double t) {
 
     currentTime = t;
-    h           = currentTime - previousTime;
     setInterpolatedTime(t);
 
     // the step is not finalized anymore
@@ -271,7 +270,9 @@
       // lazy evaluation of the state
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
-          final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
+		h = Double.NaN;
+          dirtyState = true;
+		final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
       }
2023-06-26 23:34:15 [main] [INFO]  PatchLogExporter - patch (v23749)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 23:34:15 [main] [INFO]  PatchLogExporter - patch (v23749)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -103,7 +103,6 @@
         g0                = Double.NaN;
         g0Positive        = true;
         pendingEvent      = false;
-        pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
         nextAction        = EventHandler.CONTINUE;
@@ -282,7 +281,8 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
+        nextAction = EventHandler.CONTINUE;
+		t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-06-26 23:34:15 [main] [INFO]  PatchLogExporter - patch (v23749)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 23:34:15 [main] [INFO]  PatchLogExporter - patch (v23749)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 23:34:15 [main] [INFO]  PatchLogExporter - patch (v23749)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -77,6 +77,7 @@
         }
         this.f = f;
         this.defaultFunctionValueAccuracy = 1.0e-15;
+		clearResult();
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
2023-06-26 23:34:15 [main] [INFO]  PatchLogExporter - patch (v23749)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,15 +223,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
2023-06-26 23:34:15 [main] [INFO]  PatchLogExporter - patch (v29528)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,7 +94,7 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    h = Double.NaN;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -113,9 +113,10 @@
 
     currentState            = y;
     interpolatedState       = new double[y.length];
+	interpolatedState = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
-    finalized         = false;
+    h = Double.NaN;
     this.forward      = forward;
     this.dirtyState   = true;
 
@@ -243,7 +244,6 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
   }
 
   /** {@inheritDoc} */
2023-06-26 23:34:15 [main] [INFO]  PatchLogExporter - patch (v29528)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 23:34:15 [main] [INFO]  PatchLogExporter - patch (v29528)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -63,7 +63,7 @@
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
-        this.defaultMaximalIterationCount = defaultMaximalIterationCount;
+        this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.maximalIterationCount = defaultMaximalIterationCount;
         this.iterationCount = 0;
     }
2023-06-26 23:34:15 [main] [INFO]  PatchLogExporter - patch (v29528)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -103,7 +103,6 @@
         g0                = Double.NaN;
         g0Positive        = true;
         pendingEvent      = false;
-        pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
         nextAction        = EventHandler.CONTINUE;
@@ -213,7 +212,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
@@ -282,7 +280,10 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
+        nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-06-26 23:34:15 [main] [INFO]  PatchLogExporter - patch (v29528)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 23:34:15 [main] [INFO]  PatchLogExporter - patch (v29528)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 23:34:15 [main] [INFO]  PatchLogExporter - patch (v29528)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -77,6 +77,7 @@
         }
         this.f = f;
         this.defaultFunctionValueAccuracy = 1.0e-15;
+		clearResult();
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
2023-06-26 23:34:15 [main] [INFO]  PatchLogExporter - patch (v29577)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -89,12 +89,12 @@
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
+    this.forward = forward;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    this.forward = forward;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -113,9 +113,10 @@
 
     currentState            = y;
     interpolatedState       = new double[y.length];
+	interpolatedState = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
-    finalized         = false;
+    h = Double.NaN;
     this.forward      = forward;
     this.dirtyState   = true;
 
@@ -271,6 +272,10 @@
       // lazy evaluation of the state
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
+		{
+			doFinalize();
+			finalized = true;
+		}
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
2023-06-26 23:34:15 [main] [INFO]  PatchLogExporter - patch (v29577)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 23:34:15 [main] [INFO]  PatchLogExporter - patch (v29577)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -203,7 +203,6 @@
                     final UnivariateRealFunction f = new UnivariateRealFunction() {
                         public double value(final double t) throws FunctionEvaluationException {
                             try {
-                                interpolator.setInterpolatedTime(t);
                                 return handler.g(t, interpolator.getInterpolatedState());
                             } catch (DerivativeException e) {
                                 throw new FunctionEvaluationException(e, t);
@@ -213,7 +212,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
@@ -282,7 +280,12 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
+        nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-06-26 23:34:15 [main] [INFO]  PatchLogExporter - patch (v29577)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 23:34:15 [main] [INFO]  PatchLogExporter - patch (v29577)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 23:34:15 [main] [INFO]  PatchLogExporter - patch (v29652)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -89,7 +89,7 @@
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
+    this.forward = forward;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
@@ -108,7 +108,7 @@
 
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
-    h                 = Double.NaN;
+    this.forward = forward;
     interpolatedTime  = Double.NaN;
 
     currentState            = y;
@@ -243,7 +243,7 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
+	this.dirtyState = true;
   }
 
   /** {@inheritDoc} */
2023-06-26 23:34:15 [main] [INFO]  PatchLogExporter - patch (v29652)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 23:34:15 [main] [INFO]  PatchLogExporter - patch (v29652)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -60,7 +60,6 @@
     protected ConvergingAlgorithmImpl(final int defaultMaximalIterationCount,
                                       final double defaultAbsoluteAccuracy) {
         this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
-        this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
2023-06-26 23:34:15 [main] [INFO]  PatchLogExporter - patch (v29652)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -103,7 +103,6 @@
         g0                = Double.NaN;
         g0Positive        = true;
         pendingEvent      = false;
-        pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
         nextAction        = EventHandler.CONTINUE;
@@ -282,7 +281,10 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
+        nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
@@ -324,8 +326,6 @@
             handler.resetState(t, y);
         }
         pendingEvent      = false;
-        pendingEventTime  = Double.NaN;
-
         return (nextAction == EventHandler.RESET_STATE) ||
                (nextAction == EventHandler.RESET_DERIVATIVES);
 
2023-06-26 23:34:15 [main] [INFO]  PatchLogExporter - patch (v29652)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 23:34:15 [main] [INFO]  PatchLogExporter - patch (v29652)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 23:34:15 [main] [INFO]  PatchLogExporter - patch (v29652)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -77,6 +77,7 @@
         }
         this.f = f;
         this.defaultFunctionValueAccuracy = 1.0e-15;
+		clearResult();
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
2023-06-26 23:34:15 [main] [INFO]  PatchLogExporter - patch (v29652)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,15 +223,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
2023-06-26 23:34:15 [main] [INFO]  PatchLogExporter - patch (v29700)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -89,7 +89,7 @@
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
+    this.forward = forward;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
@@ -108,7 +108,7 @@
 
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
-    h                 = Double.NaN;
+    this.forward = forward;
     interpolatedTime  = Double.NaN;
 
     currentState            = y;
@@ -243,7 +243,7 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
+	this.dirtyState = true;
   }
 
   /** {@inheritDoc} */
2023-06-26 23:34:15 [main] [INFO]  PatchLogExporter - patch (v29700)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 23:34:15 [main] [INFO]  PatchLogExporter - patch (v29700)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -60,7 +60,6 @@
     protected ConvergingAlgorithmImpl(final int defaultMaximalIterationCount,
                                       final double defaultAbsoluteAccuracy) {
         this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
-        this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
2023-06-26 23:34:15 [main] [INFO]  PatchLogExporter - patch (v29700)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -103,7 +103,6 @@
         g0                = Double.NaN;
         g0Positive        = true;
         pendingEvent      = false;
-        pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
         nextAction        = EventHandler.CONTINUE;
@@ -213,7 +212,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
@@ -282,7 +280,10 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
+        nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
@@ -324,8 +325,6 @@
             handler.resetState(t, y);
         }
         pendingEvent      = false;
-        pendingEventTime  = Double.NaN;
-
         return (nextAction == EventHandler.RESET_STATE) ||
                (nextAction == EventHandler.RESET_DERIVATIVES);
 
2023-06-26 23:34:15 [main] [INFO]  PatchLogExporter - patch (v29700)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 23:34:15 [main] [INFO]  PatchLogExporter - patch (v29700)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 23:34:15 [main] [INFO]  PatchLogExporter - patch (v29700)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -77,6 +77,7 @@
         }
         this.f = f;
         this.defaultFunctionValueAccuracy = 1.0e-15;
+		clearResult();
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
2023-06-26 23:34:15 [main] [INFO]  PatchLogExporter - patch (v29805)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,13 +88,12 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    h = Double.NaN;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -113,6 +112,7 @@
 
     currentState            = y;
     interpolatedState       = new double[y.length];
+	interpolatedState = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
@@ -271,7 +271,8 @@
       // lazy evaluation of the state
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
-          final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
+          dirtyState = true;
+		final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
       }
2023-06-26 23:34:15 [main] [INFO]  PatchLogExporter - patch (v29805)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 23:34:15 [main] [INFO]  PatchLogExporter - patch (v29805)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -213,7 +213,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
@@ -282,7 +281,12 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
+        nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-06-26 23:34:15 [main] [INFO]  PatchLogExporter - patch (v29805)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 23:34:15 [main] [INFO]  PatchLogExporter - patch (v29805)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 23:34:15 [main] [INFO]  PatchLogExporter - patch (v29805)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -165,6 +165,7 @@
 
         // Verify bracketing
         double sign = yMin * yMax;
+		this.resultComputed = true;
         if (sign > 0) {
             // check if either value is close to a zero
             if (Math.abs(yMin) <= functionValueAccuracy) {
2023-06-26 23:34:15 [main] [INFO]  PatchLogExporter - patch (v29910)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -113,6 +113,7 @@
 
     currentState            = y;
     interpolatedState       = new double[y.length];
+	interpolatedState = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
@@ -243,7 +244,6 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
   }
 
   /** {@inheritDoc} */
@@ -271,7 +271,8 @@
       // lazy evaluation of the state
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
-          final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
+          dirtyState = true;
+		final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
       }
2023-06-26 23:34:15 [main] [INFO]  PatchLogExporter - patch (v29910)
--- org.apache.commons.math.ode.sampling.DummyStepInterpolator
+++ org.apache.commons.math.ode.sampling.DummyStepInterpolator
@@ -96,7 +96,7 @@
   @Override
   protected void computeInterpolatedStateAndDerivatives(final double theta, final double oneMinusThetaH)
     throws DerivativeException {
-      System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
+      finalizeStep();
   }
 
   /** Write the instance to an output channel.
2023-06-26 23:34:15 [main] [INFO]  PatchLogExporter - patch (v29910)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 23:34:15 [main] [INFO]  PatchLogExporter - patch (v29910)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -101,7 +101,6 @@
         // some dummy values ...
         t0                = Double.NaN;
         g0                = Double.NaN;
-        g0Positive        = true;
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
@@ -213,7 +212,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
@@ -282,7 +280,12 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
+        nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-06-26 23:34:15 [main] [INFO]  PatchLogExporter - patch (v29910)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 23:34:15 [main] [INFO]  PatchLogExporter - patch (v29910)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 23:34:15 [main] [INFO]  PatchLogExporter - patch (v29923)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -89,12 +89,12 @@
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
+    this.forward = forward;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    this.forward = forward;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -113,6 +113,7 @@
 
     currentState            = y;
     interpolatedState       = new double[y.length];
+	interpolatedState = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
@@ -271,6 +272,7 @@
       // lazy evaluation of the state
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
+		h = Double.NaN;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
2023-06-26 23:34:15 [main] [INFO]  PatchLogExporter - patch (v29923)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 23:34:15 [main] [INFO]  PatchLogExporter - patch (v29923)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -102,7 +102,6 @@
         t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
@@ -213,7 +212,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
@@ -282,7 +280,12 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
+        nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-06-26 23:34:15 [main] [INFO]  PatchLogExporter - patch (v29923)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 23:34:15 [main] [INFO]  PatchLogExporter - patch (v29923)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 23:34:15 [main] [INFO]  PatchLogExporter - patch (v29923)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -77,7 +77,6 @@
         }
         this.f = f;
         this.defaultFunctionValueAccuracy = 1.0e-15;
-        this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
     /**
2023-06-26 23:34:15 [main] [INFO]  PatchLogExporter - patch (v30204)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -89,12 +89,12 @@
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
+    this.forward = forward;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    this.forward = forward;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -113,6 +113,7 @@
 
     currentState            = y;
     interpolatedState       = new double[y.length];
+	interpolatedState = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
@@ -271,6 +272,7 @@
       // lazy evaluation of the state
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
+		h = Double.NaN;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
2023-06-26 23:34:15 [main] [INFO]  PatchLogExporter - patch (v30204)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 23:34:15 [main] [INFO]  PatchLogExporter - patch (v30204)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -102,8 +102,6 @@
         t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
-        pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
         nextAction        = EventHandler.CONTINUE;
@@ -213,7 +211,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
@@ -282,7 +279,10 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
+        nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
@@ -323,7 +323,6 @@
         if (nextAction == EventHandler.RESET_STATE) {
             handler.resetState(t, y);
         }
-        pendingEvent      = false;
         pendingEventTime  = Double.NaN;
 
         return (nextAction == EventHandler.RESET_STATE) ||
2023-06-26 23:34:15 [main] [INFO]  PatchLogExporter - patch (v30204)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 23:34:15 [main] [INFO]  PatchLogExporter - patch (v30204)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 23:34:15 [main] [INFO]  PatchLogExporter - patch (v30204)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -77,6 +77,7 @@
         }
         this.f = f;
         this.defaultFunctionValueAccuracy = 1.0e-15;
+		clearResult();
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
2023-06-26 23:34:15 [main] [INFO]  PatchLogExporter - patch (v30253)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -89,7 +89,7 @@
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
+    this.forward = forward;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
@@ -108,7 +108,7 @@
 
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
-    h                 = Double.NaN;
+    this.forward = forward;
     interpolatedTime  = Double.NaN;
 
     currentState            = y;
@@ -243,7 +243,7 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
+	this.dirtyState = true;
   }
 
   /** {@inheritDoc} */
2023-06-26 23:34:15 [main] [INFO]  PatchLogExporter - patch (v30253)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 23:34:15 [main] [INFO]  PatchLogExporter - patch (v30253)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -60,7 +60,6 @@
     protected ConvergingAlgorithmImpl(final int defaultMaximalIterationCount,
                                       final double defaultAbsoluteAccuracy) {
         this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
-        this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
2023-06-26 23:34:15 [main] [INFO]  PatchLogExporter - patch (v30253)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -170,7 +170,8 @@
         try {
 
             forward = interpolator.isForward();
-            final double t1 = interpolator.getCurrentTime();
+            increasing = true;
+			final double t1 = interpolator.getCurrentTime();
             final int    n  = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));
             final double h  = (t1 - t0) / n;
 
@@ -213,7 +214,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
@@ -282,7 +282,11 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
+        nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-06-26 23:34:15 [main] [INFO]  PatchLogExporter - patch (v30253)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 23:34:15 [main] [INFO]  PatchLogExporter - patch (v30253)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 23:34:15 [main] [INFO]  PatchLogExporter - patch (v30253)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -77,6 +77,7 @@
         }
         this.f = f;
         this.defaultFunctionValueAccuracy = 1.0e-15;
+		clearResult();
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
2023-06-26 23:34:15 [main] [INFO]  PatchLogExporter - patch (v30253)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -282,7 +282,6 @@
                     delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
-                    oldDelta = delta;
                     delta = p / p1;
                 }
             }
2023-06-26 23:34:15 [main] [INFO]  PatchLogExporter - patch (v30285)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -89,12 +89,12 @@
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
+    this.forward = forward;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    this.forward = forward;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -243,7 +243,6 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
   }
 
   /** {@inheritDoc} */
@@ -271,6 +270,7 @@
       // lazy evaluation of the state
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
+		h = Double.NaN;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
2023-06-26 23:34:15 [main] [INFO]  PatchLogExporter - patch (v30285)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 23:34:15 [main] [INFO]  PatchLogExporter - patch (v30285)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -103,7 +103,6 @@
         g0                = Double.NaN;
         g0Positive        = true;
         pendingEvent      = false;
-        pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
         nextAction        = EventHandler.CONTINUE;
@@ -213,7 +212,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
@@ -282,7 +280,11 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
+        nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
@@ -324,8 +326,6 @@
             handler.resetState(t, y);
         }
         pendingEvent      = false;
-        pendingEventTime  = Double.NaN;
-
         return (nextAction == EventHandler.RESET_STATE) ||
                (nextAction == EventHandler.RESET_DERIVATIVES);
 
2023-06-26 23:34:15 [main] [INFO]  PatchLogExporter - patch (v30285)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 23:34:15 [main] [INFO]  PatchLogExporter - patch (v30285)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 23:34:15 [main] [INFO]  PatchLogExporter - patch (v30285)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -77,6 +77,7 @@
         }
         this.f = f;
         this.defaultFunctionValueAccuracy = 1.0e-15;
+		clearResult();
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
2023-06-26 23:34:15 [main] [INFO]  PatchLogExporter - patch (v30299)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -89,12 +89,12 @@
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
+    this.forward = forward;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    this.forward = forward;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -108,11 +108,12 @@
 
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
-    h                 = Double.NaN;
+    this.forward = forward;
     interpolatedTime  = Double.NaN;
 
     currentState            = y;
     interpolatedState       = new double[y.length];
+	interpolatedState = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
2023-06-26 23:34:15 [main] [INFO]  PatchLogExporter - patch (v30299)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-06-26 23:34:15 [main] [INFO]  PatchLogExporter - patch (v30299)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -102,7 +102,6 @@
         t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
@@ -213,7 +212,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
@@ -282,7 +280,11 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
+        nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		nextAction = EventHandler.CONTINUE;
+		t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
@@ -323,7 +325,6 @@
         if (nextAction == EventHandler.RESET_STATE) {
             handler.resetState(t, y);
         }
-        pendingEvent      = false;
         pendingEventTime  = Double.NaN;
 
         return (nextAction == EventHandler.RESET_STATE) ||
2023-06-26 23:34:15 [main] [INFO]  PatchLogExporter - patch (v30299)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-06-26 23:34:15 [main] [INFO]  PatchLogExporter - patch (v30299)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-06-26 23:34:15 [main] [INFO]  PatchLogExporter - patch (v30299)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -77,6 +77,7 @@
         }
         this.f = f;
         this.defaultFunctionValueAccuracy = 1.0e-15;
+		clearResult();
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
2023-06-26 23:34:15 [main] [INFO]  KGenProgMain - Summary
Reached generation = 77
Generated variants = 30299
Syntax valid variants = 28127
Build succeeded variants = 16055
Time elapsed = 2 hours 33 minutes 28 seconds
Exit status = SUCCESS
