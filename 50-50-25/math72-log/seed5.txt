2023-08-02 10:37:00 [main] [WARN]  Configuration$Builder - The directory where kGenProg is running is different from the root directory of the given target project.
2023-08-02 10:37:00 [main] [WARN]  Configuration$Builder - If the target project includes test cases with file I/O, such test cases won't run correctly.
2023-08-02 10:37:00 [main] [WARN]  Configuration$Builder - We recommend you running kGenProg with the root directory of the target project as the current directory.
2023-08-02 10:37:00 [main] [INFO]  KGenProgMain - 
==================== kGenProg Configuration ====================
configPath = /Users/haradakanon/Downloads/kGenProg-1.8.2/example/math72/kgenprog-72.toml (set by command line)
rootDir = /Users/haradakanon/Downloads/kGenProg-1.8.2/example/math72 (set in config file)
productPaths = [/Users/haradakanon/Downloads/kGenProg-1.8.2/example/math72/src/main] (set in config file)
testPaths = [/Users/haradakanon/Downloads/kGenProg-1.8.2/example/math72/src/test] (set in config file)
classPaths = []
executionTests = [org.apache.commons.math.analysis.solvers.BrentSolverTest] (set in config file)
outDir = kgenprog-out
logLevel = INFO (set in config file)
mutationGeneratingCount = 50 (set in config file)
crossoverGeneratingCount = 50 (set in config file)
headcount = 25
maxGeneration = 500 (set in config file)
timeLimit = PT24H (set in config file)
testTimeLimit = PT3M (set in config file)
requiredSolutionsCount = 100 (set in config file)
randomSeed = 5 (set by command line)
scope = PACKAGE (set in config file)
faultLocalization = Zoltar (set in config file)
mutationType = Simple
crossoverType = Random
firstVariantSelectionStrategy = Random
secondVariantSelectionStrategy = Random
isPatchOutput = true (set in config file)
isHistoryRecord = false
currentDirectory = /Users/haradakanon/Desktop/研究/実験データ/research
version = 1.8.2
================================================================
2023-08-02 10:37:17 [main] [INFO]  KGenProgMain - initial failed tests (1/6)
org.apache.commons.math.analysis.solvers.BrentSolverTest.testRootEndpoints: null

2023-08-02 10:37:17 [main] [INFO]  KGenProgMain - GA started
2023-08-02 10:37:17 [main] [INFO]  KGenProgMain - entered the era of 1st generation.
2023-08-02 10:37:23 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 seconds
Variants: generated 50, build-succeeded 14, build-failed 31, syntax-invalid 2, redundant 3
Fitness: max 0.833(9), min 0.167(2), ave 0.702
Test execution time: sum 2038 ms, max 257 ms, min 84 ms
----------------------------------------------------------------

2023-08-02 10:37:23 [main] [INFO]  KGenProgMain - entered the era of 2nd generation.
2023-08-02 10:37:29 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 seconds
Variants: generated 50, build-succeeded 17, build-failed 29, syntax-invalid 2, redundant 2
Fitness: max 1(1), min 0.167(3), ave 0.637
Test execution time: sum 1823 ms, max 210 ms, min 70 ms
----------------------------------------------------------------

2023-08-02 10:37:29 [main] [INFO]  KGenProgMain - entered the era of 3rd generation.
2023-08-02 10:37:35 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 18 seconds
Variants: generated 100, build-succeeded 28, build-failed 29, syntax-invalid 9, redundant 34
Fitness: max 0.833(12), min 0.167(3), ave 0.667
Test execution time: sum 2160 ms, max 150 ms, min 60 ms
----------------------------------------------------------------

2023-08-02 10:37:35 [main] [INFO]  KGenProgMain - entered the era of 4th generation.
2023-08-02 10:37:41 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 24 seconds
Variants: generated 100, build-succeeded 27, build-failed 36, syntax-invalid 9, redundant 28
Fitness: max 0.833(25), min 0.167(2), ave 0.784
Test execution time: sum 1972 ms, max 165 ms, min 58 ms
----------------------------------------------------------------

2023-08-02 10:37:41 [main] [INFO]  KGenProgMain - entered the era of 5th generation.
2023-08-02 10:37:47 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 29 seconds
Variants: generated 100, build-succeeded 25, build-failed 32, syntax-invalid 9, redundant 34
Fitness: max 0.833(18), min 0.167(7), ave 0.647
Test execution time: sum 1699 ms, max 124 ms, min 57 ms
----------------------------------------------------------------

2023-08-02 10:37:47 [main] [INFO]  KGenProgMain - entered the era of 6th generation.
2023-08-02 10:37:52 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 35 seconds
Variants: generated 100, build-succeeded 28, build-failed 28, syntax-invalid 8, redundant 36
Fitness: max 0.833(26), min 0.167(1), ave 0.804
Test execution time: sum 1914 ms, max 188 ms, min 56 ms
----------------------------------------------------------------

2023-08-02 10:37:52 [main] [INFO]  KGenProgMain - entered the era of 7th generation.
2023-08-02 10:37:58 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 41 seconds
Variants: generated 100, build-succeeded 35, build-failed 33, syntax-invalid 11, redundant 21
Fitness: max 0.833(29), min 0.167(4), ave 0.748
Test execution time: sum 2379 ms, max 198 ms, min 56 ms
----------------------------------------------------------------

2023-08-02 10:37:58 [main] [INFO]  KGenProgMain - entered the era of 8th generation.
2023-08-02 10:38:05 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 47 seconds
Variants: generated 100, build-succeeded 37, build-failed 26, syntax-invalid 18, redundant 19
Fitness: max 0.833(30), min 0.167(5), ave 0.734
Test execution time: sum 2447 ms, max 165 ms, min 55 ms
----------------------------------------------------------------

2023-08-02 10:38:05 [main] [INFO]  KGenProgMain - entered the era of 9th generation.
2023-08-02 10:38:10 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 53 seconds
Variants: generated 100, build-succeeded 32, build-failed 26, syntax-invalid 22, redundant 20
Fitness: max 0.833(27), min 0.167(2), ave 0.776
Test execution time: sum 2053 ms, max 80 ms, min 56 ms
----------------------------------------------------------------

2023-08-02 10:38:10 [main] [INFO]  KGenProgMain - entered the era of 10th generation.
2023-08-02 10:38:17 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 59 seconds
Variants: generated 100, build-succeeded 38, build-failed 25, syntax-invalid 17, redundant 20
Fitness: max 1(1), min 0.167(1), ave 0.803
Test execution time: sum 2508 ms, max 203 ms, min 57 ms
----------------------------------------------------------------

2023-08-02 10:38:17 [main] [INFO]  KGenProgMain - entered the era of 11th generation.
2023-08-02 10:38:23 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 minutes 5 seconds
Variants: generated 100, build-succeeded 32, build-failed 29, syntax-invalid 12, redundant 27
Fitness: max 1(1), min 0.167(9), ave 0.641
Test execution time: sum 2061 ms, max 203 ms, min 55 ms
----------------------------------------------------------------

2023-08-02 10:38:23 [main] [INFO]  KGenProgMain - entered the era of 12th generation.
2023-08-02 10:38:29 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 minutes 11 seconds
Variants: generated 100, build-succeeded 33, build-failed 32, syntax-invalid 18, redundant 17
Fitness: max 0.833(24), min 0.167(5), ave 0.707
Test execution time: sum 2087 ms, max 140 ms, min 55 ms
----------------------------------------------------------------

2023-08-02 10:38:29 [main] [INFO]  KGenProgMain - entered the era of 13th generation.
2023-08-02 10:38:35 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 minutes 18 seconds
Variants: generated 100, build-succeeded 37, build-failed 25, syntax-invalid 19, redundant 19
Fitness: max 1(1), min 0.167(1), ave 0.802
Test execution time: sum 2438 ms, max 185 ms, min 57 ms
----------------------------------------------------------------

2023-08-02 10:38:35 [main] [INFO]  KGenProgMain - entered the era of 14th generation.
2023-08-02 10:38:42 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 minutes 25 seconds
Variants: generated 100, build-succeeded 37, build-failed 29, syntax-invalid 18, redundant 16
Fitness: max 0.833(33), min 0.167(1), ave 0.802
Test execution time: sum 2624 ms, max 223 ms, min 58 ms
----------------------------------------------------------------

2023-08-02 10:38:42 [main] [INFO]  KGenProgMain - entered the era of 15th generation.
2023-08-02 10:38:49 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 minutes 32 seconds
Variants: generated 100, build-succeeded 39, build-failed 29, syntax-invalid 19, redundant 13
Fitness: max 1(2), min 0.167(4), ave 0.774
Test execution time: sum 2573 ms, max 151 ms, min 57 ms
----------------------------------------------------------------

2023-08-02 10:38:49 [main] [INFO]  KGenProgMain - entered the era of 16th generation.
2023-08-02 10:38:56 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 minutes 39 seconds
Variants: generated 100, build-succeeded 40, build-failed 22, syntax-invalid 27, redundant 11
Fitness: max 1(1), min 0.167(4), ave 0.767
Test execution time: sum 2742 ms, max 222 ms, min 57 ms
----------------------------------------------------------------

2023-08-02 10:38:56 [main] [INFO]  KGenProgMain - entered the era of 17th generation.
2023-08-02 10:39:03 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 minutes 45 seconds
Variants: generated 100, build-succeeded 40, build-failed 29, syntax-invalid 22, redundant 9
Fitness: max 1(1), min 0.167(2), ave 0.8
Test execution time: sum 2566 ms, max 89 ms, min 58 ms
----------------------------------------------------------------

2023-08-02 10:39:03 [main] [INFO]  KGenProgMain - entered the era of 18th generation.
2023-08-02 10:39:11 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 minutes 53 seconds
Variants: generated 100, build-succeeded 44, build-failed 30, syntax-invalid 16, redundant 10
Fitness: max 0.833(40), min 0.167(3), ave 0.784
Test execution time: sum 2988 ms, max 230 ms, min 58 ms
----------------------------------------------------------------

2023-08-02 10:39:11 [main] [INFO]  KGenProgMain - entered the era of 19th generation.
2023-08-02 10:39:18 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 minutes 0 seconds
Variants: generated 100, build-succeeded 47, build-failed 28, syntax-invalid 14, redundant 11
Fitness: max 0.833(42), min 0.167(1), ave 0.805
Test execution time: sum 2909 ms, max 117 ms, min 56 ms
----------------------------------------------------------------

2023-08-02 10:39:18 [main] [INFO]  KGenProgMain - entered the era of 20th generation.
2023-08-02 10:39:26 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 minutes 8 seconds
Variants: generated 100, build-succeeded 50, build-failed 32, syntax-invalid 13, redundant 5
Fitness: max 1(1), min 0.167(3), ave 0.79
Test execution time: sum 3239 ms, max 163 ms, min 57 ms
----------------------------------------------------------------

2023-08-02 10:39:26 [main] [INFO]  KGenProgMain - entered the era of 21st generation.
2023-08-02 10:39:33 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 minutes 15 seconds
Variants: generated 100, build-succeeded 44, build-failed 25, syntax-invalid 17, redundant 14
Fitness: max 0.833(33), min 0.167(10), ave 0.678
Test execution time: sum 2753 ms, max 76 ms, min 57 ms
----------------------------------------------------------------

2023-08-02 10:39:33 [main] [INFO]  KGenProgMain - entered the era of 22nd generation.
2023-08-02 10:39:41 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 minutes 23 seconds
Variants: generated 100, build-succeeded 51, build-failed 29, syntax-invalid 18, redundant 2
Fitness: max 1(1), min 0.167(5), ave 0.765
Test execution time: sum 3432 ms, max 217 ms, min 56 ms
----------------------------------------------------------------

2023-08-02 10:39:41 [main] [INFO]  KGenProgMain - entered the era of 23rd generation.
2023-08-02 10:39:47 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 minutes 29 seconds
Variants: generated 100, build-succeeded 45, build-failed 31, syntax-invalid 18, redundant 6
Fitness: max 0.833(42), min 0.667(3), ave 0.822
Test execution time: sum 2764 ms, max 79 ms, min 56 ms
----------------------------------------------------------------

2023-08-02 10:39:47 [main] [INFO]  KGenProgMain - entered the era of 24th generation.
2023-08-02 10:39:54 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 minutes 37 seconds
Variants: generated 100, build-succeeded 48, build-failed 26, syntax-invalid 18, redundant 8
Fitness: max 1(1), min 0.167(4), ave 0.774
Test execution time: sum 3215 ms, max 221 ms, min 56 ms
----------------------------------------------------------------

2023-08-02 10:39:54 [main] [INFO]  KGenProgMain - entered the era of 25th generation.
2023-08-02 10:40:01 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 minutes 43 seconds
Variants: generated 100, build-succeeded 40, build-failed 29, syntax-invalid 20, redundant 11
Fitness: max 1(1), min 0.167(2), ave 0.787
Test execution time: sum 2484 ms, max 94 ms, min 56 ms
----------------------------------------------------------------

2023-08-02 10:40:01 [main] [INFO]  KGenProgMain - entered the era of 26th generation.
2023-08-02 10:40:09 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 minutes 51 seconds
Variants: generated 100, build-succeeded 56, build-failed 26, syntax-invalid 15, redundant 3
Fitness: max 1(1), min 0.167(9), ave 0.723
Test execution time: sum 3833 ms, max 207 ms, min 57 ms
----------------------------------------------------------------

2023-08-02 10:40:09 [main] [INFO]  KGenProgMain - entered the era of 27th generation.
2023-08-02 10:40:16 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 minutes 58 seconds
Variants: generated 100, build-succeeded 46, build-failed 25, syntax-invalid 20, redundant 9
Fitness: max 0.833(35), min 0.167(7), ave 0.717
Test execution time: sum 2882 ms, max 106 ms, min 55 ms
----------------------------------------------------------------

2023-08-02 10:40:16 [main] [INFO]  KGenProgMain - entered the era of 28th generation.
2023-08-02 10:40:22 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 minutes 4 seconds
Variants: generated 100, build-succeeded 41, build-failed 24, syntax-invalid 23, redundant 12
Fitness: max 0.833(32), min 0.167(3), ave 0.752
Test execution time: sum 2552 ms, max 95 ms, min 56 ms
----------------------------------------------------------------

2023-08-02 10:40:22 [main] [INFO]  KGenProgMain - entered the era of 29th generation.
2023-08-02 10:40:29 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 minutes 11 seconds
Variants: generated 100, build-succeeded 33, build-failed 26, syntax-invalid 29, redundant 12
Fitness: max 0.833(29), min 0.167(2), ave 0.783
Test execution time: sum 2290 ms, max 177 ms, min 57 ms
----------------------------------------------------------------

2023-08-02 10:40:29 [main] [INFO]  KGenProgMain - entered the era of 30th generation.
2023-08-02 10:40:36 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 minutes 18 seconds
Variants: generated 100, build-succeeded 42, build-failed 34, syntax-invalid 17, redundant 7
Fitness: max 0.833(35), min 0.167(3), ave 0.77
Test execution time: sum 2599 ms, max 91 ms, min 55 ms
----------------------------------------------------------------

2023-08-02 10:40:36 [main] [INFO]  KGenProgMain - entered the era of 31st generation.
2023-08-02 10:40:43 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 minutes 25 seconds
Variants: generated 100, build-succeeded 44, build-failed 27, syntax-invalid 21, redundant 8
Fitness: max 0.833(38), min 0.167(5), ave 0.754
Test execution time: sum 2693 ms, max 82 ms, min 56 ms
----------------------------------------------------------------

2023-08-02 10:40:43 [main] [INFO]  KGenProgMain - entered the era of 32nd generation.
2023-08-02 10:40:50 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 minutes 33 seconds
Variants: generated 100, build-succeeded 58, build-failed 21, syntax-invalid 14, redundant 7
Fitness: max 0.833(52), min 0.167(5), ave 0.773
Test execution time: sum 3611 ms, max 84 ms, min 56 ms
----------------------------------------------------------------

2023-08-02 10:40:50 [main] [INFO]  KGenProgMain - entered the era of 33rd generation.
2023-08-02 10:40:59 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 minutes 41 seconds
Variants: generated 100, build-succeeded 52, build-failed 28, syntax-invalid 15, redundant 5
Fitness: max 0.833(46), min 0.167(4), ave 0.776
Test execution time: sum 3250 ms, max 133 ms, min 56 ms
----------------------------------------------------------------

2023-08-02 10:40:59 [main] [INFO]  KGenProgMain - entered the era of 34th generation.
2023-08-02 10:41:06 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 minutes 48 seconds
Variants: generated 100, build-succeeded 48, build-failed 28, syntax-invalid 18, redundant 6
Fitness: max 0.833(40), min 0.167(4), ave 0.764
Test execution time: sum 2850 ms, max 85 ms, min 55 ms
----------------------------------------------------------------

2023-08-02 10:41:06 [main] [INFO]  KGenProgMain - entered the era of 35th generation.
2023-08-02 10:41:12 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 minutes 55 seconds
Variants: generated 100, build-succeeded 40, build-failed 34, syntax-invalid 18, redundant 8
Fitness: max 0.833(33), min 0.167(4), ave 0.75
Test execution time: sum 2412 ms, max 83 ms, min 55 ms
----------------------------------------------------------------

2023-08-02 10:41:12 [main] [INFO]  KGenProgMain - entered the era of 36th generation.
2023-08-02 10:41:20 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 minutes 3 seconds
Variants: generated 100, build-succeeded 45, build-failed 28, syntax-invalid 15, redundant 12
Fitness: max 0.833(36), min 0.167(7), ave 0.722
Test execution time: sum 2863 ms, max 148 ms, min 55 ms
----------------------------------------------------------------

2023-08-02 10:41:20 [main] [INFO]  KGenProgMain - entered the era of 37th generation.
2023-08-02 10:41:28 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 minutes 10 seconds
Variants: generated 100, build-succeeded 49, build-failed 27, syntax-invalid 18, redundant 6
Fitness: max 0.833(38), min 0.167(8), ave 0.711
Test execution time: sum 2896 ms, max 78 ms, min 55 ms
----------------------------------------------------------------

2023-08-02 10:41:28 [main] [INFO]  KGenProgMain - entered the era of 38th generation.
2023-08-02 10:41:35 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 minutes 17 seconds
Variants: generated 100, build-succeeded 44, build-failed 29, syntax-invalid 20, redundant 7
Fitness: max 0.833(35), min 0.167(5), ave 0.742
Test execution time: sum 2655 ms, max 77 ms, min 56 ms
----------------------------------------------------------------

2023-08-02 10:41:35 [main] [INFO]  KGenProgMain - entered the era of 39th generation.
2023-08-02 10:41:44 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 minutes 26 seconds
Variants: generated 100, build-succeeded 52, build-failed 30, syntax-invalid 12, redundant 6
Fitness: max 0.833(41), min 0.167(6), ave 0.737
Test execution time: sum 3458 ms, max 217 ms, min 54 ms
----------------------------------------------------------------

2023-08-02 10:41:44 [main] [INFO]  KGenProgMain - entered the era of 40th generation.
2023-08-02 10:41:52 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 minutes 35 seconds
Variants: generated 100, build-succeeded 61, build-failed 26, syntax-invalid 10, redundant 3
Fitness: max 0.833(50), min 0.167(6), ave 0.749
Test execution time: sum 3666 ms, max 80 ms, min 55 ms
----------------------------------------------------------------

2023-08-02 10:41:52 [main] [INFO]  KGenProgMain - entered the era of 41st generation.
2023-08-02 10:42:00 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 minutes 42 seconds
Variants: generated 100, build-succeeded 51, build-failed 29, syntax-invalid 15, redundant 5
Fitness: max 0.833(44), min 0.167(5), ave 0.761
Test execution time: sum 2985 ms, max 78 ms, min 55 ms
----------------------------------------------------------------

2023-08-02 10:42:00 [main] [INFO]  KGenProgMain - entered the era of 42nd generation.
2023-08-02 10:42:08 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 minutes 50 seconds
Variants: generated 100, build-succeeded 52, build-failed 32, syntax-invalid 9, redundant 7
Fitness: max 0.833(47), min 0.167(4), ave 0.779
Test execution time: sum 3164 ms, max 127 ms, min 54 ms
----------------------------------------------------------------

2023-08-02 10:42:08 [main] [INFO]  KGenProgMain - entered the era of 43rd generation.
2023-08-02 10:42:15 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 minutes 58 seconds
Variants: generated 100, build-succeeded 48, build-failed 29, syntax-invalid 14, redundant 9
Fitness: max 0.833(41), min 0(1), ave 0.743
Test execution time: sum 2787 ms, max 79 ms, min 55 ms
----------------------------------------------------------------

2023-08-02 10:42:15 [main] [INFO]  KGenProgMain - entered the era of 44th generation.
2023-08-02 10:42:22 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 minutes 4 seconds
Variants: generated 100, build-succeeded 41, build-failed 34, syntax-invalid 21, redundant 4
Fitness: max 0.833(37), min 0.167(2), ave 0.793
Test execution time: sum 2448 ms, max 72 ms, min 55 ms
----------------------------------------------------------------

2023-08-02 10:42:22 [main] [INFO]  KGenProgMain - entered the era of 45th generation.
2023-08-02 10:42:30 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 minutes 12 seconds
Variants: generated 100, build-succeeded 40, build-failed 37, syntax-invalid 15, redundant 8
Fitness: max 0.833(36), min 0.167(2), ave 0.792
Test execution time: sum 2585 ms, max 129 ms, min 56 ms
----------------------------------------------------------------

2023-08-02 10:42:30 [main] [INFO]  KGenProgMain - entered the era of 46th generation.
2023-08-02 10:42:36 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 minutes 19 seconds
Variants: generated 100, build-succeeded 41, build-failed 30, syntax-invalid 19, redundant 10
Fitness: max 0.833(38), min 0.167(2), ave 0.797
Test execution time: sum 2423 ms, max 96 ms, min 54 ms
----------------------------------------------------------------

2023-08-02 10:42:36 [main] [INFO]  KGenProgMain - entered the era of 47th generation.
2023-08-02 10:42:44 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 minutes 26 seconds
Variants: generated 100, build-succeeded 50, build-failed 27, syntax-invalid 17, redundant 6
Fitness: max 0.833(43), min 0.167(5), ave 0.757
Test execution time: sum 2925 ms, max 74 ms, min 54 ms
----------------------------------------------------------------

2023-08-02 10:42:44 [main] [INFO]  KGenProgMain - entered the era of 48th generation.
2023-08-02 10:42:52 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 minutes 34 seconds
Variants: generated 100, build-succeeded 40, build-failed 35, syntax-invalid 16, redundant 9
Fitness: max 0.833(37), min 0.167(1), ave 0.804
Test execution time: sum 2522 ms, max 128 ms, min 55 ms
----------------------------------------------------------------

2023-08-02 10:42:52 [main] [INFO]  KGenProgMain - entered the era of 49th generation.
2023-08-02 10:43:00 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 minutes 42 seconds
Variants: generated 100, build-succeeded 54, build-failed 28, syntax-invalid 9, redundant 9
Fitness: max 0.833(46), min 0.167(5), ave 0.759
Test execution time: sum 3222 ms, max 128 ms, min 54 ms
----------------------------------------------------------------

2023-08-02 10:43:00 [main] [INFO]  KGenProgMain - entered the era of 50th generation.
2023-08-02 10:43:08 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 minutes 50 seconds
Variants: generated 100, build-succeeded 55, build-failed 25, syntax-invalid 15, redundant 5
Fitness: max 0.833(47), min 0.167(7), ave 0.745
Test execution time: sum 3209 ms, max 77 ms, min 54 ms
----------------------------------------------------------------

2023-08-02 10:43:08 [main] [INFO]  KGenProgMain - entered the era of 51st generation.
2023-08-02 10:43:16 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 minutes 58 seconds
Variants: generated 100, build-succeeded 51, build-failed 27, syntax-invalid 14, redundant 8
Fitness: max 1(1), min 0.167(5), ave 0.771
Test execution time: sum 3298 ms, max 228 ms, min 54 ms
----------------------------------------------------------------

2023-08-02 10:43:16 [main] [INFO]  KGenProgMain - entered the era of 52nd generation.
2023-08-02 10:43:24 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 minutes 6 seconds
Variants: generated 100, build-succeeded 45, build-failed 35, syntax-invalid 14, redundant 6
Fitness: max 0.833(37), min 0.167(3), ave 0.767
Test execution time: sum 2722 ms, max 85 ms, min 55 ms
----------------------------------------------------------------

2023-08-02 10:43:24 [main] [INFO]  KGenProgMain - entered the era of 53rd generation.
2023-08-02 10:43:32 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 minutes 14 seconds
Variants: generated 100, build-succeeded 54, build-failed 25, syntax-invalid 13, redundant 8
Fitness: max 0.833(45), min 0.167(4), ave 0.762
Test execution time: sum 3211 ms, max 77 ms, min 55 ms
----------------------------------------------------------------

2023-08-02 10:43:32 [main] [INFO]  KGenProgMain - entered the era of 54th generation.
2023-08-02 10:43:42 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 minutes 24 seconds
Variants: generated 100, build-succeeded 63, build-failed 30, syntax-invalid 5, redundant 2
Fitness: max 0.833(58), min 0(1), ave 0.794
Test execution time: sum 3970 ms, max 200 ms, min 55 ms
----------------------------------------------------------------

2023-08-02 10:43:42 [main] [INFO]  KGenProgMain - entered the era of 55th generation.
2023-08-02 10:43:50 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 minutes 33 seconds
Variants: generated 100, build-succeeded 53, build-failed 29, syntax-invalid 11, redundant 7
Fitness: max 0.833(50), min 0.167(2), ave 0.805
Test execution time: sum 3109 ms, max 75 ms, min 55 ms
----------------------------------------------------------------

2023-08-02 10:43:50 [main] [INFO]  KGenProgMain - entered the era of 56th generation.
2023-08-02 10:43:58 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 minutes 40 seconds
Variants: generated 100, build-succeeded 49, build-failed 29, syntax-invalid 15, redundant 7
Fitness: max 0.833(45), min 0.167(3), ave 0.789
Test execution time: sum 2849 ms, max 81 ms, min 54 ms
----------------------------------------------------------------

2023-08-02 10:43:58 [main] [INFO]  KGenProgMain - entered the era of 57th generation.
2023-08-02 10:44:07 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 minutes 49 seconds
Variants: generated 100, build-succeeded 47, build-failed 29, syntax-invalid 15, redundant 9
Fitness: max 0.833(43), min 0.167(3), ave 0.787
Test execution time: sum 2984 ms, max 128 ms, min 54 ms
----------------------------------------------------------------

2023-08-02 10:44:07 [main] [INFO]  KGenProgMain - entered the era of 58th generation.
2023-08-02 10:44:14 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 minutes 57 seconds
Variants: generated 100, build-succeeded 40, build-failed 39, syntax-invalid 11, redundant 10
Fitness: max 0.833(37), min 0.667(3), ave 0.821
Test execution time: sum 2358 ms, max 87 ms, min 56 ms
----------------------------------------------------------------

2023-08-02 10:44:14 [main] [INFO]  KGenProgMain - entered the era of 59th generation.
2023-08-02 10:44:22 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 minutes 4 seconds
Variants: generated 100, build-succeeded 46, build-failed 32, syntax-invalid 9, redundant 13
Fitness: max 0.833(42), min 0.167(2), ave 0.797
Test execution time: sum 2786 ms, max 76 ms, min 56 ms
----------------------------------------------------------------

2023-08-02 10:44:22 [main] [INFO]  KGenProgMain - entered the era of 60th generation.
2023-08-02 10:44:31 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 minutes 14 seconds
Variants: generated 100, build-succeeded 52, build-failed 28, syntax-invalid 12, redundant 8
Fitness: max 0.833(48), min 0.167(2), ave 0.798
Test execution time: sum 3293 ms, max 197 ms, min 56 ms
----------------------------------------------------------------

2023-08-02 10:44:31 [main] [INFO]  KGenProgMain - entered the era of 61st generation.
2023-08-02 10:44:39 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 minutes 22 seconds
Variants: generated 100, build-succeeded 47, build-failed 35, syntax-invalid 9, redundant 9
Fitness: max 0.833(45), min 0.167(2), ave 0.805
Test execution time: sum 2813 ms, max 86 ms, min 54 ms
----------------------------------------------------------------

2023-08-02 10:44:39 [main] [INFO]  KGenProgMain - entered the era of 62nd generation.
2023-08-02 10:44:48 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 minutes 30 seconds
Variants: generated 100, build-succeeded 55, build-failed 26, syntax-invalid 11, redundant 8
Fitness: max 0.833(48), min 0.167(6), ave 0.758
Test execution time: sum 3239 ms, max 76 ms, min 54 ms
----------------------------------------------------------------

2023-08-02 10:44:48 [main] [INFO]  KGenProgMain - entered the era of 63rd generation.
2023-08-02 10:44:57 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 minutes 39 seconds
Variants: generated 100, build-succeeded 44, build-failed 29, syntax-invalid 17, redundant 10
Fitness: max 0.833(41), min 0.167(1), ave 0.803
Test execution time: sum 2800 ms, max 133 ms, min 55 ms
----------------------------------------------------------------

2023-08-02 10:44:57 [main] [INFO]  KGenProgMain - entered the era of 64th generation.
2023-08-02 10:45:06 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 minutes 48 seconds
Variants: generated 100, build-succeeded 56, build-failed 23, syntax-invalid 15, redundant 6
Fitness: max 1(1), min 0.167(3), ave 0.777
Test execution time: sum 3363 ms, max 86 ms, min 55 ms
----------------------------------------------------------------

2023-08-02 10:45:06 [main] [INFO]  KGenProgMain - entered the era of 65th generation.
2023-08-02 10:45:15 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 minutes 58 seconds
Variants: generated 100, build-succeeded 56, build-failed 24, syntax-invalid 9, redundant 11
Fitness: max 0.833(49), min 0.167(2), ave 0.795
Test execution time: sum 3417 ms, max 74 ms, min 56 ms
----------------------------------------------------------------

2023-08-02 10:45:15 [main] [INFO]  KGenProgMain - entered the era of 66th generation.
2023-08-02 10:45:25 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 minutes 7 seconds
Variants: generated 100, build-succeeded 44, build-failed 36, syntax-invalid 12, redundant 8
Fitness: max 0.833(36), min 0.167(3), ave 0.761
Test execution time: sum 2952 ms, max 241 ms, min 56 ms
----------------------------------------------------------------

2023-08-02 10:45:25 [main] [INFO]  KGenProgMain - entered the era of 67th generation.
2023-08-02 10:45:34 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 minutes 16 seconds
Variants: generated 100, build-succeeded 54, build-failed 30, syntax-invalid 15, redundant 1
Fitness: max 1(1), min 0.167(1), ave 0.812
Test execution time: sum 3176 ms, max 76 ms, min 54 ms
----------------------------------------------------------------

2023-08-02 10:45:34 [main] [INFO]  KGenProgMain - entered the era of 68th generation.
2023-08-02 10:45:43 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 minutes 26 seconds
Variants: generated 100, build-succeeded 62, build-failed 27, syntax-invalid 5, redundant 6
Fitness: max 0.833(57), min 0.167(1), ave 0.806
Test execution time: sum 3757 ms, max 77 ms, min 55 ms
----------------------------------------------------------------

2023-08-02 10:45:43 [main] [INFO]  KGenProgMain - entered the era of 69th generation.
2023-08-02 10:45:53 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 minutes 36 seconds
Variants: generated 100, build-succeeded 50, build-failed 31, syntax-invalid 6, redundant 13
Fitness: max 0.833(45), min 0.167(3), ave 0.787
Test execution time: sum 3133 ms, max 139 ms, min 56 ms
----------------------------------------------------------------

2023-08-02 10:45:53 [main] [INFO]  KGenProgMain - entered the era of 70th generation.
2023-08-02 11:01:02 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 23 minutes 45 seconds
Variants: generated 100, build-succeeded 47, build-failed 28, syntax-invalid 8, redundant 17
Fitness: max 1(1), min 0.167(2), ave 0.809
Test execution time: sum 903058 ms, max 900120 ms, min 55 ms
----------------------------------------------------------------

2023-08-02 11:01:02 [main] [INFO]  KGenProgMain - entered the era of 71st generation.
2023-08-02 11:01:11 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 23 minutes 53 seconds
Variants: generated 100, build-succeeded 49, build-failed 31, syntax-invalid 17, redundant 3
Fitness: max 0.833(45), min 0.167(1), ave 0.81
Test execution time: sum 3007 ms, max 106 ms, min 56 ms
----------------------------------------------------------------

2023-08-02 11:01:11 [main] [INFO]  KGenProgMain - entered the era of 72nd generation.
2023-08-02 11:01:21 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 24 minutes 4 seconds
Variants: generated 100, build-succeeded 54, build-failed 28, syntax-invalid 12, redundant 6
Fitness: max 0.833(47), min 0.167(1), ave 0.802
Test execution time: sum 3461 ms, max 142 ms, min 56 ms
----------------------------------------------------------------

2023-08-02 11:01:21 [main] [INFO]  KGenProgMain - entered the era of 73rd generation.
2023-08-02 11:01:31 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 24 minutes 13 seconds
Variants: generated 100, build-succeeded 59, build-failed 30, syntax-invalid 8, redundant 3
Fitness: max 0.833(56), min 0.167(1), ave 0.816
Test execution time: sum 3540 ms, max 77 ms, min 57 ms
----------------------------------------------------------------

2023-08-02 11:01:31 [main] [INFO]  KGenProgMain - entered the era of 74th generation.
2023-08-02 11:01:40 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 24 minutes 22 seconds
Variants: generated 100, build-succeeded 49, build-failed 32, syntax-invalid 9, redundant 10
Fitness: max 0.833(44), min 0.167(2), ave 0.793
Test execution time: sum 2925 ms, max 76 ms, min 56 ms
----------------------------------------------------------------

2023-08-02 11:01:40 [main] [INFO]  KGenProgMain - entered the era of 75th generation.
2023-08-02 11:01:50 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 24 minutes 32 seconds
Variants: generated 100, build-succeeded 54, build-failed 31, syntax-invalid 12, redundant 3
Fitness: max 0.833(46), min 0.167(4), ave 0.769
Test execution time: sum 3375 ms, max 140 ms, min 57 ms
----------------------------------------------------------------

2023-08-02 11:01:50 [main] [INFO]  KGenProgMain - entered the era of 76th generation.
2023-08-02 11:01:59 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 24 minutes 42 seconds
Variants: generated 100, build-succeeded 55, build-failed 28, syntax-invalid 11, redundant 6
Fitness: max 1(1), min 0.167(2), ave 0.803
Test execution time: sum 3368 ms, max 93 ms, min 57 ms
----------------------------------------------------------------

2023-08-02 11:01:59 [main] [INFO]  KGenProgMain - entered the era of 77th generation.
2023-08-02 11:02:09 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 24 minutes 52 seconds
Variants: generated 100, build-succeeded 61, build-failed 20, syntax-invalid 15, redundant 4
Fitness: max 0.833(52), min 0.167(4), ave 0.77
Test execution time: sum 3781 ms, max 73 ms, min 56 ms
----------------------------------------------------------------

2023-08-02 11:02:09 [main] [INFO]  KGenProgMain - entered the era of 78th generation.
2023-08-02 11:02:20 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 25 minutes 2 seconds
Variants: generated 100, build-succeeded 56, build-failed 23, syntax-invalid 10, redundant 11
Fitness: max 0.833(48), min 0.167(2), ave 0.792
Test execution time: sum 3453 ms, max 132 ms, min 56 ms
----------------------------------------------------------------

2023-08-02 11:02:20 [main] [INFO]  KGenProgMain - entered the era of 79th generation.
2023-08-02 11:02:30 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 25 minutes 13 seconds
Variants: generated 100, build-succeeded 58, build-failed 29, syntax-invalid 7, redundant 6
Fitness: max 0.833(49), min 0.167(3), ave 0.782
Test execution time: sum 3460 ms, max 81 ms, min 55 ms
----------------------------------------------------------------

2023-08-02 11:02:30 [main] [INFO]  KGenProgMain - entered the era of 80th generation.
2023-08-02 11:02:41 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 25 minutes 23 seconds
Variants: generated 100, build-succeeded 64, build-failed 22, syntax-invalid 10, redundant 4
Fitness: max 1(1), min 0.167(5), ave 0.773
Test execution time: sum 3907 ms, max 79 ms, min 55 ms
----------------------------------------------------------------

2023-08-02 11:02:41 [main] [INFO]  KGenProgMain - entered the era of 81st generation.
2023-08-02 11:02:51 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 25 minutes 34 seconds
Variants: generated 100, build-succeeded 49, build-failed 27, syntax-invalid 17, redundant 7
Fitness: max 0.833(43), min 0.167(1), ave 0.803
Test execution time: sum 3020 ms, max 148 ms, min 56 ms
----------------------------------------------------------------

2023-08-02 11:02:51 [main] [INFO]  KGenProgMain - entered the era of 82nd generation.
2023-08-02 11:03:01 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 25 minutes 44 seconds
Variants: generated 100, build-succeeded 52, build-failed 33, syntax-invalid 13, redundant 2
Fitness: max 0.833(42), min 0.167(2), ave 0.779
Test execution time: sum 3179 ms, max 128 ms, min 56 ms
----------------------------------------------------------------

2023-08-02 11:03:01 [main] [INFO]  KGenProgMain - entered the era of 83rd generation.
2023-08-02 11:03:12 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 25 minutes 54 seconds
Variants: generated 100, build-succeeded 56, build-failed 30, syntax-invalid 10, redundant 4
Fitness: max 0.833(53), min 0.167(1), ave 0.815
Test execution time: sum 3414 ms, max 74 ms, min 57 ms
----------------------------------------------------------------

2023-08-02 11:03:12 [main] [INFO]  KGenProgMain - entered the era of 84th generation.
2023-08-02 11:03:24 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 26 minutes 6 seconds
Variants: generated 100, build-succeeded 62, build-failed 29, syntax-invalid 8, redundant 1
Fitness: max 0.833(52), min 0.5(1), ave 0.804
Test execution time: sum 3907 ms, max 139 ms, min 57 ms
----------------------------------------------------------------

2023-08-02 11:03:24 [main] [INFO]  KGenProgMain - entered the era of 85th generation.
2023-08-02 11:03:35 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 26 minutes 17 seconds
Variants: generated 100, build-succeeded 59, build-failed 26, syntax-invalid 8, redundant 7
Fitness: max 1(1), min 0.167(4), ave 0.782
Test execution time: sum 3519 ms, max 71 ms, min 56 ms
----------------------------------------------------------------

2023-08-02 11:03:35 [main] [INFO]  KGenProgMain - entered the era of 86th generation.
2023-08-02 11:03:46 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 26 minutes 28 seconds
Variants: generated 100, build-succeeded 61, build-failed 27, syntax-invalid 9, redundant 3
Fitness: max 1(1), min 0.167(1), ave 0.814
Test execution time: sum 4045 ms, max 206 ms, min 56 ms
----------------------------------------------------------------

2023-08-02 11:03:46 [main] [INFO]  KGenProgMain - entered the era of 87th generation.
2023-08-02 11:03:58 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 26 minutes 40 seconds
Variants: generated 100, build-succeeded 61, build-failed 30, syntax-invalid 4, redundant 5
Fitness: max 1(1), min 0.167(2), ave 0.803
Test execution time: sum 3740 ms, max 90 ms, min 56 ms
----------------------------------------------------------------

2023-08-02 11:03:58 [main] [INFO]  KGenProgMain - entered the era of 88th generation.
2023-08-02 11:04:09 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 26 minutes 51 seconds
Variants: generated 100, build-succeeded 61, build-failed 32, syntax-invalid 7, redundant 0
Fitness: max 1(1), min 0.667(2), ave 0.831
Test execution time: sum 3712 ms, max 74 ms, min 57 ms
----------------------------------------------------------------

2023-08-02 11:04:09 [main] [INFO]  KGenProgMain - entered the era of 89th generation.
2023-08-02 11:04:21 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 27 minutes 3 seconds
Variants: generated 100, build-succeeded 60, build-failed 30, syntax-invalid 9, redundant 1
Fitness: max 0.833(54), min 0.167(2), ave 0.8
Test execution time: sum 3811 ms, max 151 ms, min 56 ms
----------------------------------------------------------------

2023-08-02 11:04:21 [main] [INFO]  KGenProgMain - entered the era of 90th generation.
2023-08-02 11:04:32 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 27 minutes 14 seconds
Variants: generated 100, build-succeeded 64, build-failed 29, syntax-invalid 2, redundant 5
Fitness: max 0.833(57), min 0.167(1), ave 0.807
Test execution time: sum 3842 ms, max 84 ms, min 56 ms
----------------------------------------------------------------

2023-08-02 11:04:32 [main] [INFO]  KGenProgMain - entered the era of 91st generation.
2023-08-02 11:04:45 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 27 minutes 27 seconds
Variants: generated 100, build-succeeded 63, build-failed 27, syntax-invalid 8, redundant 2
Fitness: max 0.833(56), min 0.167(2), ave 0.794
Test execution time: sum 4169 ms, max 217 ms, min 57 ms
----------------------------------------------------------------

2023-08-02 11:04:45 [main] [INFO]  KGenProgMain - entered the era of 92nd generation.
2023-08-02 11:04:56 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 27 minutes 38 seconds
Variants: generated 100, build-succeeded 58, build-failed 27, syntax-invalid 9, redundant 6
Fitness: max 1(1), min 0.167(4), ave 0.776
Test execution time: sum 3545 ms, max 79 ms, min 55 ms
----------------------------------------------------------------

2023-08-02 11:04:56 [main] [INFO]  KGenProgMain - entered the era of 93rd generation.
2023-08-02 11:05:06 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 27 minutes 49 seconds
Variants: generated 100, build-succeeded 51, build-failed 26, syntax-invalid 16, redundant 7
Fitness: max 0.833(50), min 0.167(1), ave 0.82
Test execution time: sum 3163 ms, max 76 ms, min 58 ms
----------------------------------------------------------------

2023-08-02 11:05:06 [main] [INFO]  KGenProgMain - entered the era of 94th generation.
2023-08-02 11:05:18 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 28 minutes 1 seconds
Variants: generated 100, build-succeeded 51, build-failed 30, syntax-invalid 15, redundant 4
Fitness: max 0.833(45), min 0.167(1), ave 0.804
Test execution time: sum 3431 ms, max 171 ms, min 57 ms
----------------------------------------------------------------

2023-08-02 11:05:18 [main] [INFO]  KGenProgMain - entered the era of 95th generation.
2023-08-02 11:05:28 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 28 minutes 11 seconds
Variants: generated 100, build-succeeded 42, build-failed 35, syntax-invalid 21, redundant 2
Fitness: max 0.833(38), min 0.167(1), ave 0.806
Test execution time: sum 2637 ms, max 87 ms, min 57 ms
----------------------------------------------------------------

2023-08-02 11:05:28 [main] [INFO]  KGenProgMain - entered the era of 96th generation.
2023-08-02 11:05:40 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 28 minutes 22 seconds
Variants: generated 100, build-succeeded 59, build-failed 27, syntax-invalid 10, redundant 4
Fitness: max 0.833(53), min 0.167(3), ave 0.791
Test execution time: sum 3635 ms, max 78 ms, min 56 ms
----------------------------------------------------------------

2023-08-02 11:05:40 [main] [INFO]  KGenProgMain - entered the era of 97th generation.
2023-08-02 11:05:52 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 28 minutes 35 seconds
Variants: generated 100, build-succeeded 58, build-failed 26, syntax-invalid 11, redundant 5
Fitness: max 1(1), min 0.167(1), ave 0.816
Test execution time: sum 3745 ms, max 145 ms, min 57 ms
----------------------------------------------------------------

2023-08-02 11:05:52 [main] [INFO]  KGenProgMain - entered the era of 98th generation.
2023-08-02 11:06:04 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 28 minutes 46 seconds
Variants: generated 100, build-succeeded 56, build-failed 23, syntax-invalid 18, redundant 3
Fitness: max 1(1), min 0.167(3), ave 0.786
Test execution time: sum 3436 ms, max 81 ms, min 57 ms
----------------------------------------------------------------

2023-08-02 11:06:04 [main] [INFO]  KGenProgMain - entered the era of 99th generation.
2023-08-02 11:06:15 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 28 minutes 57 seconds
Variants: generated 100, build-succeeded 57, build-failed 24, syntax-invalid 15, redundant 4
Fitness: max 1(1), min 0.5(1), ave 0.816
Test execution time: sum 3646 ms, max 81 ms, min 58 ms
----------------------------------------------------------------

2023-08-02 11:06:15 [main] [INFO]  KGenProgMain - entered the era of 100th generation.
2023-08-02 11:06:28 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 29 minutes 10 seconds
Variants: generated 100, build-succeeded 58, build-failed 28, syntax-invalid 7, redundant 7
Fitness: max 0.833(54), min 0.167(1), ave 0.813
Test execution time: sum 3651 ms, max 123 ms, min 57 ms
----------------------------------------------------------------

2023-08-02 11:06:28 [main] [INFO]  KGenProgMain - entered the era of 101st generation.
2023-08-02 11:06:39 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 29 minutes 21 seconds
Variants: generated 100, build-succeeded 54, build-failed 28, syntax-invalid 15, redundant 3
Fitness: max 1(1), min 0.167(2), ave 0.796
Test execution time: sum 3358 ms, max 88 ms, min 55 ms
----------------------------------------------------------------

2023-08-02 11:06:39 [main] [INFO]  KGenProgMain - entered the era of 102nd generation.
2023-08-02 11:06:51 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 29 minutes 34 seconds
Variants: generated 100, build-succeeded 59, build-failed 30, syntax-invalid 8, redundant 3
Fitness: max 0.833(56), min 0.667(3), ave 0.825
Test execution time: sum 3799 ms, max 81 ms, min 57 ms
----------------------------------------------------------------

2023-08-02 11:06:51 [main] [INFO]  KGenProgMain - entered the era of 103rd generation.
2023-08-02 11:22:05 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 44 minutes 47 seconds
Variants: generated 100, build-succeeded 63, build-failed 25, syntax-invalid 10, redundant 2
Fitness: max 0.833(55), min 0.167(2), ave 0.791
Test execution time: sum 904283 ms, max 900122 ms, min 56 ms
----------------------------------------------------------------

2023-08-02 11:22:05 [main] [INFO]  KGenProgMain - entered the era of 104th generation.
2023-08-02 11:22:17 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 44 minutes 59 seconds
Variants: generated 100, build-succeeded 60, build-failed 30, syntax-invalid 8, redundant 2
Fitness: max 1(1), min 0.667(5), ave 0.822
Test execution time: sum 3603 ms, max 85 ms, min 56 ms
----------------------------------------------------------------

2023-08-02 11:22:17 [main] [INFO]  KGenProgMain - entered the era of 105th generation.
2023-08-02 11:22:29 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 45 minutes 12 seconds
Variants: generated 100, build-succeeded 57, build-failed 29, syntax-invalid 10, redundant 4
Fitness: max 0.833(53), min 0.167(1), ave 0.813
Test execution time: sum 3804 ms, max 143 ms, min 58 ms
----------------------------------------------------------------

2023-08-02 11:22:29 [main] [INFO]  KGenProgMain - entered the era of 106th generation.
2023-08-02 11:22:41 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 45 minutes 23 seconds
Variants: generated 100, build-succeeded 59, build-failed 26, syntax-invalid 6, redundant 9
Fitness: max 0.833(56), min 0.167(3), ave 0.799
Test execution time: sum 3616 ms, max 78 ms, min 55 ms
----------------------------------------------------------------

2023-08-02 11:22:41 [main] [INFO]  KGenProgMain - entered the era of 107th generation.
2023-08-02 11:22:52 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 45 minutes 35 seconds
Variants: generated 100, build-succeeded 58, build-failed 20, syntax-invalid 16, redundant 6
Fitness: max 0.833(54), min 0.667(4), ave 0.822
Test execution time: sum 3611 ms, max 79 ms, min 57 ms
----------------------------------------------------------------

2023-08-02 11:22:52 [main] [INFO]  KGenProgMain - entered the era of 108th generation.
2023-08-02 11:23:04 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 45 minutes 47 seconds
Variants: generated 100, build-succeeded 52, build-failed 28, syntax-invalid 13, redundant 7
Fitness: max 0.833(50), min 0.167(1), ave 0.817
Test execution time: sum 3416 ms, max 122 ms, min 56 ms
----------------------------------------------------------------

2023-08-02 11:23:04 [main] [INFO]  KGenProgMain - entered the era of 109th generation.
2023-08-02 11:23:17 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 45 minutes 59 seconds
Variants: generated 100, build-succeeded 63, build-failed 27, syntax-invalid 6, redundant 4
Fitness: max 1(1), min 0.167(2), ave 0.81
Test execution time: sum 3929 ms, max 94 ms, min 55 ms
----------------------------------------------------------------

2023-08-02 11:23:17 [main] [INFO]  KGenProgMain - entered the era of 110th generation.
2023-08-02 11:23:29 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 46 minutes 11 seconds
Variants: generated 100, build-succeeded 58, build-failed 30, syntax-invalid 9, redundant 3
Fitness: max 1(1), min 0.167(3), ave 0.799
Test execution time: sum 3673 ms, max 80 ms, min 57 ms
----------------------------------------------------------------

2023-08-02 11:23:29 [main] [INFO]  KGenProgMain - entered the era of 111th generation.
2023-08-02 11:23:42 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 46 minutes 24 seconds
Variants: generated 100, build-succeeded 58, build-failed 30, syntax-invalid 6, redundant 6
Fitness: max 0.833(54), min 0.167(1), ave 0.813
Test execution time: sum 3655 ms, max 131 ms, min 56 ms
----------------------------------------------------------------

2023-08-02 11:23:42 [main] [INFO]  KGenProgMain - entered the era of 112th generation.
2023-08-02 11:23:54 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 46 minutes 36 seconds
Variants: generated 100, build-succeeded 58, build-failed 30, syntax-invalid 10, redundant 2
Fitness: max 1(1), min 0.167(2), ave 0.81
Test execution time: sum 3563 ms, max 79 ms, min 56 ms
----------------------------------------------------------------

2023-08-02 11:23:54 [main] [INFO]  KGenProgMain - entered the era of 113th generation.
2023-08-02 11:24:08 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 46 minutes 50 seconds
Variants: generated 100, build-succeeded 60, build-failed 30, syntax-invalid 5, redundant 5
Fitness: max 0.833(54), min 0.167(4), ave 0.783
Test execution time: sum 4009 ms, max 142 ms, min 55 ms
----------------------------------------------------------------

2023-08-02 11:24:08 [main] [INFO]  KGenProgMain - entered the era of 114th generation.
2023-08-02 11:24:20 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 47 minutes 3 seconds
Variants: generated 100, build-succeeded 58, build-failed 27, syntax-invalid 7, redundant 8
Fitness: max 0.833(57), min 0.667(1), ave 0.83
Test execution time: sum 3655 ms, max 81 ms, min 57 ms
----------------------------------------------------------------

2023-08-02 11:24:20 [main] [INFO]  KGenProgMain - entered the era of 115th generation.
2023-08-02 11:24:34 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 47 minutes 16 seconds
Variants: generated 100, build-succeeded 71, build-failed 26, syntax-invalid 0, redundant 3
Fitness: max 0.833(65), min 0.167(1), ave 0.808
Test execution time: sum 4522 ms, max 86 ms, min 57 ms
----------------------------------------------------------------

2023-08-02 11:24:34 [main] [INFO]  KGenProgMain - entered the era of 116th generation.
2023-08-02 11:24:48 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 47 minutes 30 seconds
Variants: generated 100, build-succeeded 60, build-failed 29, syntax-invalid 9, redundant 2
Fitness: max 0.833(53), min 0.167(1), ave 0.806
Test execution time: sum 3901 ms, max 139 ms, min 58 ms
----------------------------------------------------------------

2023-08-02 11:24:48 [main] [INFO]  KGenProgMain - entered the era of 117th generation.
2023-08-02 11:25:00 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 47 minutes 42 seconds
Variants: generated 100, build-succeeded 54, build-failed 29, syntax-invalid 14, redundant 3
Fitness: max 0.833(49), min 0.167(2), ave 0.799
Test execution time: sum 3412 ms, max 81 ms, min 57 ms
----------------------------------------------------------------

2023-08-02 11:25:00 [main] [INFO]  KGenProgMain - entered the era of 118th generation.
2023-08-02 11:25:12 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 47 minutes 55 seconds
Variants: generated 100, build-succeeded 57, build-failed 26, syntax-invalid 12, redundant 5
Fitness: max 0.833(51), min 0.167(2), ave 0.798
Test execution time: sum 3664 ms, max 78 ms, min 55 ms
----------------------------------------------------------------

2023-08-02 11:25:12 [main] [INFO]  KGenProgMain - entered the era of 119th generation.
2023-08-02 11:25:26 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 48 minutes 8 seconds
Variants: generated 100, build-succeeded 57, build-failed 28, syntax-invalid 14, redundant 1
Fitness: max 1(1), min 0.667(2), ave 0.83
Test execution time: sum 3597 ms, max 138 ms, min 57 ms
----------------------------------------------------------------

2023-08-02 11:25:26 [main] [INFO]  KGenProgMain - entered the era of 120th generation.
2023-08-02 11:25:39 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 48 minutes 21 seconds
Variants: generated 100, build-succeeded 67, build-failed 25, syntax-invalid 6, redundant 2
Fitness: max 1(1), min 0.167(5), ave 0.781
Test execution time: sum 4108 ms, max 82 ms, min 55 ms
----------------------------------------------------------------

2023-08-02 11:25:39 [main] [INFO]  KGenProgMain - entered the era of 121st generation.
2023-08-02 11:25:53 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 48 minutes 35 seconds
Variants: generated 100, build-succeeded 64, build-failed 27, syntax-invalid 6, redundant 3
Fitness: max 0.833(62), min 0.667(2), ave 0.828
Test execution time: sum 4362 ms, max 201 ms, min 58 ms
----------------------------------------------------------------

2023-08-02 11:25:53 [main] [INFO]  KGenProgMain - entered the era of 122nd generation.
2023-08-02 11:26:07 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 48 minutes 49 seconds
Variants: generated 100, build-succeeded 70, build-failed 18, syntax-invalid 9, redundant 3
Fitness: max 0.833(64), min 0.167(2), ave 0.805
Test execution time: sum 4454 ms, max 81 ms, min 57 ms
----------------------------------------------------------------

2023-08-02 11:26:07 [main] [INFO]  KGenProgMain - entered the era of 123rd generation.
2023-08-02 11:41:20 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 4 minutes 2 seconds
Variants: generated 100, build-succeeded 62, build-failed 27, syntax-invalid 8, redundant 3
Fitness: max 1(2), min 0.167(1), ave 0.817
Test execution time: sum 904250 ms, max 900103 ms, min 58 ms
----------------------------------------------------------------

2023-08-02 11:41:20 [main] [INFO]  KGenProgMain - entered the era of 124th generation.
2023-08-02 11:41:34 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 4 minutes 16 seconds
Variants: generated 100, build-succeeded 55, build-failed 29, syntax-invalid 6, redundant 10
Fitness: max 0.833(45), min 0.167(4), ave 0.767
Test execution time: sum 3632 ms, max 135 ms, min 57 ms
----------------------------------------------------------------

2023-08-02 11:41:34 [main] [INFO]  KGenProgMain - entered the era of 125th generation.
2023-08-02 11:41:47 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 4 minutes 29 seconds
Variants: generated 100, build-succeeded 60, build-failed 27, syntax-invalid 7, redundant 6
Fitness: max 0.833(55), min 0.167(1), ave 0.811
Test execution time: sum 3820 ms, max 88 ms, min 56 ms
----------------------------------------------------------------

2023-08-02 11:41:47 [main] [INFO]  KGenProgMain - entered the era of 126th generation.
2023-08-02 11:42:00 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 4 minutes 43 seconds
Variants: generated 100, build-succeeded 61, build-failed 23, syntax-invalid 12, redundant 4
Fitness: max 1(1), min 0.167(2), ave 0.803
Test execution time: sum 3949 ms, max 77 ms, min 56 ms
----------------------------------------------------------------

2023-08-02 11:42:00 [main] [INFO]  KGenProgMain - entered the era of 127th generation.
2023-08-02 11:42:14 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 4 minutes 56 seconds
Variants: generated 100, build-succeeded 56, build-failed 31, syntax-invalid 9, redundant 4
Fitness: max 0.833(52), min 0.167(2), ave 0.804
Test execution time: sum 3655 ms, max 149 ms, min 57 ms
----------------------------------------------------------------

2023-08-02 11:42:14 [main] [INFO]  KGenProgMain - entered the era of 128th generation.
2023-08-02 11:42:26 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 5 minutes 9 seconds
Variants: generated 100, build-succeeded 54, build-failed 34, syntax-invalid 8, redundant 4
Fitness: max 0.833(53), min 0.667(1), ave 0.83
Test execution time: sum 3416 ms, max 81 ms, min 58 ms
----------------------------------------------------------------

2023-08-02 11:42:26 [main] [INFO]  KGenProgMain - entered the era of 129th generation.
2023-08-02 11:42:41 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 5 minutes 23 seconds
Variants: generated 100, build-succeeded 62, build-failed 25, syntax-invalid 7, redundant 6
Fitness: max 0.833(55), min 0.167(4), ave 0.782
Test execution time: sum 4278 ms, max 180 ms, min 57 ms
----------------------------------------------------------------

2023-08-02 11:42:41 [main] [INFO]  KGenProgMain - entered the era of 130th generation.
2023-08-02 11:42:53 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 5 minutes 36 seconds
Variants: generated 100, build-succeeded 49, build-failed 27, syntax-invalid 16, redundant 8
Fitness: max 0.833(45), min 0.167(3), ave 0.789
Test execution time: sum 3094 ms, max 84 ms, min 56 ms
----------------------------------------------------------------

2023-08-02 11:42:53 [main] [INFO]  KGenProgMain - entered the era of 131st generation.
2023-08-02 11:43:07 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 5 minutes 49 seconds
Variants: generated 100, build-succeeded 61, build-failed 30, syntax-invalid 6, redundant 3
Fitness: max 0.833(57), min 0.167(3), ave 0.798
Test execution time: sum 3911 ms, max 104 ms, min 57 ms
----------------------------------------------------------------

2023-08-02 11:43:07 [main] [INFO]  KGenProgMain - entered the era of 132nd generation.
2023-08-02 11:43:20 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 6 minutes 3 seconds
Variants: generated 100, build-succeeded 53, build-failed 27, syntax-invalid 16, redundant 4
Fitness: max 0.833(49), min 0.167(1), ave 0.811
Test execution time: sum 3497 ms, max 152 ms, min 57 ms
----------------------------------------------------------------

2023-08-02 11:43:20 [main] [INFO]  KGenProgMain - entered the era of 133rd generation.
2023-08-02 11:43:33 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 6 minutes 15 seconds
Variants: generated 100, build-succeeded 53, build-failed 30, syntax-invalid 9, redundant 8
Fitness: max 0.833(51), min 0.167(2), ave 0.808
Test execution time: sum 3326 ms, max 90 ms, min 55 ms
----------------------------------------------------------------

2023-08-02 11:43:33 [main] [INFO]  KGenProgMain - entered the era of 134th generation.
2023-08-02 11:43:46 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 6 minutes 28 seconds
Variants: generated 100, build-succeeded 60, build-failed 22, syntax-invalid 12, redundant 6
Fitness: max 0.833(56), min 0.167(2), ave 0.806
Test execution time: sum 3835 ms, max 83 ms, min 56 ms
----------------------------------------------------------------

2023-08-02 11:43:46 [main] [INFO]  KGenProgMain - entered the era of 135th generation.
2023-08-02 11:43:59 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 6 minutes 42 seconds
Variants: generated 100, build-succeeded 51, build-failed 25, syntax-invalid 16, redundant 8
Fitness: max 0.833(45), min 0.167(2), ave 0.791
Test execution time: sum 3312 ms, max 129 ms, min 56 ms
----------------------------------------------------------------

2023-08-02 11:43:59 [main] [INFO]  KGenProgMain - entered the era of 136th generation.
2023-08-02 11:44:13 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 6 minutes 55 seconds
Variants: generated 100, build-succeeded 62, build-failed 24, syntax-invalid 2, redundant 12
Fitness: max 0.833(59), min 0.167(1), ave 0.817
Test execution time: sum 3758 ms, max 79 ms, min 57 ms
----------------------------------------------------------------

2023-08-02 11:44:13 [main] [INFO]  KGenProgMain - entered the era of 137th generation.
2023-08-02 11:44:26 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 7 minutes 8 seconds
Variants: generated 100, build-succeeded 59, build-failed 30, syntax-invalid 6, redundant 5
Fitness: max 0.833(53), min 0.167(3), ave 0.788
Test execution time: sum 3706 ms, max 77 ms, min 54 ms
----------------------------------------------------------------

2023-08-02 11:44:26 [main] [INFO]  KGenProgMain - entered the era of 138th generation.
2023-08-02 11:44:40 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 7 minutes 22 seconds
Variants: generated 100, build-succeeded 54, build-failed 32, syntax-invalid 6, redundant 8
Fitness: max 0.833(52), min 0.667(2), ave 0.827
Test execution time: sum 3383 ms, max 129 ms, min 57 ms
----------------------------------------------------------------

2023-08-02 11:44:40 [main] [INFO]  KGenProgMain - entered the era of 139th generation.
2023-08-02 11:44:53 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 7 minutes 35 seconds
Variants: generated 100, build-succeeded 62, build-failed 23, syntax-invalid 7, redundant 8
Fitness: max 0.833(54), min 0.167(5), ave 0.772
Test execution time: sum 3750 ms, max 78 ms, min 56 ms
----------------------------------------------------------------

2023-08-02 11:44:53 [main] [INFO]  KGenProgMain - entered the era of 140th generation.
2023-08-02 11:45:08 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 7 minutes 50 seconds
Variants: generated 100, build-succeeded 67, build-failed 23, syntax-invalid 6, redundant 4
Fitness: max 0.833(61), min 0.167(2), ave 0.803
Test execution time: sum 4470 ms, max 132 ms, min 55 ms
----------------------------------------------------------------

2023-08-02 11:45:08 [main] [INFO]  KGenProgMain - entered the era of 141st generation.
2023-08-02 11:45:21 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 8 minutes 3 seconds
Variants: generated 100, build-succeeded 57, build-failed 30, syntax-invalid 8, redundant 5
Fitness: max 0.833(52), min 0.167(3), ave 0.792
Test execution time: sum 3449 ms, max 91 ms, min 57 ms
----------------------------------------------------------------

2023-08-02 11:45:21 [main] [INFO]  KGenProgMain - entered the era of 142nd generation.
2023-08-02 11:45:34 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 8 minutes 17 seconds
Variants: generated 100, build-succeeded 58, build-failed 32, syntax-invalid 5, redundant 5
Fitness: max 0.833(55), min 0.167(1), ave 0.816
Test execution time: sum 3600 ms, max 86 ms, min 56 ms
----------------------------------------------------------------

2023-08-02 11:45:34 [main] [INFO]  KGenProgMain - entered the era of 143rd generation.
2023-08-02 11:45:49 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 8 minutes 31 seconds
Variants: generated 100, build-succeeded 57, build-failed 34, syntax-invalid 5, redundant 4
Fitness: max 1(1), min 0.667(2), ave 0.83
Test execution time: sum 3582 ms, max 133 ms, min 58 ms
----------------------------------------------------------------

2023-08-02 11:45:49 [main] [INFO]  KGenProgMain - entered the era of 144th generation.
2023-08-02 11:46:02 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 8 minutes 45 seconds
Variants: generated 100, build-succeeded 60, build-failed 25, syntax-invalid 8, redundant 7
Fitness: max 1(1), min 0.167(3), ave 0.783
Test execution time: sum 3654 ms, max 81 ms, min 57 ms
----------------------------------------------------------------

2023-08-02 11:46:02 [main] [INFO]  KGenProgMain - entered the era of 145th generation.
2023-08-02 11:46:16 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 8 minutes 59 seconds
Variants: generated 100, build-succeeded 58, build-failed 29, syntax-invalid 5, redundant 8
Fitness: max 1(1), min 0.667(3), ave 0.828
Test execution time: sum 3899 ms, max 146 ms, min 58 ms
----------------------------------------------------------------

2023-08-02 11:46:16 [main] [INFO]  KGenProgMain - entered the era of 146th generation.
2023-08-02 11:46:31 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 9 minutes 13 seconds
Variants: generated 100, build-succeeded 62, build-failed 28, syntax-invalid 9, redundant 1
Fitness: max 0.833(55), min 0.167(5), ave 0.774
Test execution time: sum 3779 ms, max 84 ms, min 56 ms
----------------------------------------------------------------

2023-08-02 11:46:31 [main] [INFO]  KGenProgMain - entered the era of 147th generation.
2023-08-02 11:46:44 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 9 minutes 26 seconds
Variants: generated 100, build-succeeded 57, build-failed 30, syntax-invalid 6, redundant 7
Fitness: max 0.833(55), min 0.167(1), ave 0.819
Test execution time: sum 3473 ms, max 81 ms, min 56 ms
----------------------------------------------------------------

2023-08-02 11:46:44 [main] [INFO]  KGenProgMain - entered the era of 148th generation.
2023-08-02 11:46:58 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 9 minutes 41 seconds
Variants: generated 100, build-succeeded 55, build-failed 30, syntax-invalid 9, redundant 6
Fitness: max 0.833(51), min 0.167(2), ave 0.803
Test execution time: sum 3583 ms, max 146 ms, min 59 ms
----------------------------------------------------------------

2023-08-02 11:46:58 [main] [INFO]  KGenProgMain - entered the era of 149th generation.
2023-08-02 11:47:11 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 9 minutes 53 seconds
Variants: generated 100, build-succeeded 51, build-failed 29, syntax-invalid 16, redundant 4
Fitness: max 0.833(46), min 0.167(3), ave 0.788
Test execution time: sum 3148 ms, max 85 ms, min 56 ms
----------------------------------------------------------------

2023-08-02 11:47:11 [main] [INFO]  KGenProgMain - entered the era of 150th generation.
2023-08-02 11:47:24 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 10 minutes 7 seconds
Variants: generated 100, build-succeeded 49, build-failed 34, syntax-invalid 12, redundant 5
Fitness: max 1(2), min 0.167(4), ave 0.786
Test execution time: sum 3153 ms, max 79 ms, min 57 ms
----------------------------------------------------------------

2023-08-02 11:47:24 [main] [INFO]  KGenProgMain - entered the era of 151st generation.
2023-08-02 11:47:39 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 10 minutes 22 seconds
Variants: generated 100, build-succeeded 59, build-failed 27, syntax-invalid 7, redundant 7
Fitness: max 0.833(57), min 0.167(1), ave 0.819
Test execution time: sum 3740 ms, max 121 ms, min 56 ms
----------------------------------------------------------------

2023-08-02 11:47:39 [main] [INFO]  KGenProgMain - entered the era of 152nd generation.
2023-08-02 11:47:53 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 10 minutes 35 seconds
Variants: generated 100, build-succeeded 58, build-failed 26, syntax-invalid 11, redundant 5
Fitness: max 1(1), min 0.167(1), ave 0.816
Test execution time: sum 3550 ms, max 88 ms, min 58 ms
----------------------------------------------------------------

2023-08-02 11:47:53 [main] [INFO]  KGenProgMain - entered the era of 153rd generation.
2023-08-02 11:48:07 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 10 minutes 49 seconds
Variants: generated 100, build-succeeded 59, build-failed 20, syntax-invalid 12, redundant 9
Fitness: max 0.833(54), min 0.667(5), ave 0.819
Test execution time: sum 3781 ms, max 80 ms, min 58 ms
----------------------------------------------------------------

2023-08-02 11:48:07 [main] [INFO]  KGenProgMain - entered the era of 154th generation.
2023-08-02 11:48:21 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 11 minutes 4 seconds
Variants: generated 100, build-succeeded 56, build-failed 31, syntax-invalid 11, redundant 2
Fitness: max 1(2), min 0.167(3), ave 0.798
Test execution time: sum 3622 ms, max 140 ms, min 57 ms
----------------------------------------------------------------

2023-08-02 11:48:21 [main] [INFO]  KGenProgMain - entered the era of 155th generation.
2023-08-02 11:48:35 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 11 minutes 17 seconds
Variants: generated 100, build-succeeded 53, build-failed 28, syntax-invalid 11, redundant 8
Fitness: max 0.833(48), min 0.167(2), ave 0.799
Test execution time: sum 3293 ms, max 83 ms, min 56 ms
----------------------------------------------------------------

2023-08-02 11:48:35 [main] [INFO]  KGenProgMain - entered the era of 156th generation.
2023-08-02 11:48:49 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 11 minutes 31 seconds
Variants: generated 100, build-succeeded 47, build-failed 32, syntax-invalid 16, redundant 5
Fitness: max 0.833(43), min 0.167(3), ave 0.787
Test execution time: sum 3082 ms, max 75 ms, min 57 ms
----------------------------------------------------------------

2023-08-02 11:48:49 [main] [INFO]  KGenProgMain - entered the era of 157th generation.
2023-08-02 11:49:04 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 11 minutes 46 seconds
Variants: generated 100, build-succeeded 59, build-failed 27, syntax-invalid 11, redundant 3
Fitness: max 0.833(54), min 0.167(1), ave 0.811
Test execution time: sum 3831 ms, max 226 ms, min 59 ms
----------------------------------------------------------------

2023-08-02 11:49:04 [main] [INFO]  KGenProgMain - entered the era of 158th generation.
2023-08-02 11:49:19 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 12 minutes 1 seconds
Variants: generated 100, build-succeeded 65, build-failed 22, syntax-invalid 9, redundant 4
Fitness: max 0.833(57), min 0.167(5), ave 0.774
Test execution time: sum 4032 ms, max 77 ms, min 57 ms
----------------------------------------------------------------

2023-08-02 11:49:19 [main] [INFO]  KGenProgMain - entered the era of 159th generation.
2023-08-02 11:49:33 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 12 minutes 16 seconds
Variants: generated 100, build-succeeded 50, build-failed 32, syntax-invalid 15, redundant 3
Fitness: max 1(1), min 0.167(1), ave 0.82
Test execution time: sum 3472 ms, max 216 ms, min 57 ms
----------------------------------------------------------------

2023-08-02 11:49:33 [main] [INFO]  KGenProgMain - entered the era of 160th generation.
2023-08-02 11:49:48 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 12 minutes 30 seconds
Variants: generated 100, build-succeeded 59, build-failed 25, syntax-invalid 13, redundant 3
Fitness: max 0.833(56), min 0.167(2), ave 0.805
Test execution time: sum 3653 ms, max 78 ms, min 58 ms
----------------------------------------------------------------

2023-08-02 11:49:48 [main] [INFO]  KGenProgMain - entered the era of 161st generation.
2023-08-02 11:50:03 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 12 minutes 45 seconds
Variants: generated 100, build-succeeded 60, build-failed 21, syntax-invalid 13, redundant 6
Fitness: max 1(1), min 0.167(4), ave 0.775
Test execution time: sum 3723 ms, max 86 ms, min 57 ms
----------------------------------------------------------------

2023-08-02 11:50:03 [main] [INFO]  KGenProgMain - entered the era of 162nd generation.
2023-08-02 11:50:18 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 13 minutes 1 seconds
Variants: generated 100, build-succeeded 55, build-failed 29, syntax-invalid 11, redundant 5
Fitness: max 0.833(52), min 0.667(3), ave 0.824
Test execution time: sum 3549 ms, max 130 ms, min 58 ms
----------------------------------------------------------------

2023-08-02 11:50:18 [main] [INFO]  KGenProgMain - entered the era of 163rd generation.
2023-08-02 11:50:33 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 13 minutes 15 seconds
Variants: generated 100, build-succeeded 59, build-failed 24, syntax-invalid 10, redundant 7
Fitness: max 1(1), min 0.167(1), ave 0.814
Test execution time: sum 3663 ms, max 83 ms, min 58 ms
----------------------------------------------------------------

2023-08-02 11:50:33 [main] [INFO]  KGenProgMain - entered the era of 164th generation.
2023-08-02 11:50:48 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 13 minutes 31 seconds
Variants: generated 100, build-succeeded 59, build-failed 28, syntax-invalid 7, redundant 6
Fitness: max 1(1), min 0.167(1), ave 0.808
Test execution time: sum 3798 ms, max 77 ms, min 57 ms
----------------------------------------------------------------

2023-08-02 11:50:48 [main] [INFO]  KGenProgMain - entered the era of 165th generation.
2023-08-02 11:51:04 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 13 minutes 46 seconds
Variants: generated 100, build-succeeded 55, build-failed 31, syntax-invalid 12, redundant 2
Fitness: max 0.833(51), min 0.167(1), ave 0.812
Test execution time: sum 3467 ms, max 135 ms, min 56 ms
----------------------------------------------------------------

2023-08-02 11:51:04 [main] [INFO]  KGenProgMain - entered the era of 166th generation.
2023-08-02 11:51:19 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 14 minutes 1 seconds
Variants: generated 100, build-succeeded 59, build-failed 26, syntax-invalid 13, redundant 2
Fitness: max 0.833(51), min 0.167(4), ave 0.777
Test execution time: sum 3670 ms, max 81 ms, min 56 ms
----------------------------------------------------------------

2023-08-02 11:51:19 [main] [INFO]  KGenProgMain - entered the era of 167th generation.
2023-08-02 11:51:35 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 14 minutes 17 seconds
Variants: generated 100, build-succeeded 55, build-failed 28, syntax-invalid 11, redundant 6
Fitness: max 0.833(51), min 0.167(1), ave 0.812
Test execution time: sum 3788 ms, max 194 ms, min 58 ms
----------------------------------------------------------------

2023-08-02 11:51:35 [main] [INFO]  KGenProgMain - entered the era of 168th generation.
2023-08-02 11:51:50 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 14 minutes 32 seconds
Variants: generated 100, build-succeeded 56, build-failed 30, syntax-invalid 11, redundant 3
Fitness: max 1(1), min 0.667(2), ave 0.83
Test execution time: sum 3412 ms, max 82 ms, min 58 ms
----------------------------------------------------------------

2023-08-02 11:51:50 [main] [INFO]  KGenProgMain - entered the era of 169th generation.
2023-08-02 11:52:04 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 14 minutes 47 seconds
Variants: generated 100, build-succeeded 55, build-failed 23, syntax-invalid 18, redundant 4
Fitness: max 1(1), min 0.5(1), ave 0.821
Test execution time: sum 3413 ms, max 76 ms, min 58 ms
----------------------------------------------------------------

2023-08-02 11:52:04 [main] [INFO]  KGenProgMain - entered the era of 170th generation.
2023-08-02 11:52:19 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 15 minutes 2 seconds
Variants: generated 100, build-succeeded 52, build-failed 28, syntax-invalid 14, redundant 6
Fitness: max 1(1), min 0.167(1), ave 0.821
Test execution time: sum 3359 ms, max 124 ms, min 57 ms
----------------------------------------------------------------

2023-08-02 11:52:19 [main] [INFO]  KGenProgMain - entered the era of 171st generation.
2023-08-02 11:52:34 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 15 minutes 17 seconds
Variants: generated 100, build-succeeded 58, build-failed 24, syntax-invalid 14, redundant 4
Fitness: max 0.833(55), min 0.167(1), ave 0.81
Test execution time: sum 3512 ms, max 80 ms, min 57 ms
----------------------------------------------------------------

2023-08-02 11:52:34 [main] [INFO]  KGenProgMain - entered the era of 172nd generation.
2023-08-02 11:52:48 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 15 minutes 31 seconds
Variants: generated 100, build-succeeded 47, build-failed 26, syntax-invalid 21, redundant 6
Fitness: max 0.833(41), min 0.167(4), ave 0.766
Test execution time: sum 2982 ms, max 77 ms, min 57 ms
----------------------------------------------------------------

2023-08-02 11:52:48 [main] [INFO]  KGenProgMain - entered the era of 173rd generation.
2023-08-02 11:53:04 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 15 minutes 46 seconds
Variants: generated 100, build-succeeded 53, build-failed 27, syntax-invalid 17, redundant 3
Fitness: max 1(2), min 0.167(4), ave 0.783
Test execution time: sum 3419 ms, max 133 ms, min 56 ms
----------------------------------------------------------------

2023-08-02 11:53:04 [main] [INFO]  KGenProgMain - entered the era of 174th generation.
2023-08-02 11:53:17 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 15 minutes 59 seconds
Variants: generated 100, build-succeeded 45, build-failed 28, syntax-invalid 22, redundant 5
Fitness: max 0.833(41), min 0.167(1), ave 0.807
Test execution time: sum 2748 ms, max 78 ms, min 56 ms
----------------------------------------------------------------

2023-08-02 11:53:17 [main] [INFO]  KGenProgMain - entered the era of 175th generation.
2023-08-02 11:53:31 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 16 minutes 13 seconds
Variants: generated 100, build-succeeded 44, build-failed 31, syntax-invalid 22, redundant 3
Fitness: max 0.833(40), min 0.167(3), ave 0.784
Test execution time: sum 2822 ms, max 77 ms, min 57 ms
----------------------------------------------------------------

2023-08-02 11:53:31 [main] [INFO]  KGenProgMain - entered the era of 176th generation.
2023-08-02 11:53:47 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 16 minutes 29 seconds
Variants: generated 100, build-succeeded 57, build-failed 24, syntax-invalid 13, redundant 6
Fitness: max 0.833(50), min 0.167(1), ave 0.801
Test execution time: sum 3666 ms, max 135 ms, min 58 ms
----------------------------------------------------------------

2023-08-02 11:53:47 [main] [INFO]  KGenProgMain - entered the era of 177th generation.
2023-08-02 11:54:02 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 16 minutes 44 seconds
Variants: generated 100, build-succeeded 59, build-failed 27, syntax-invalid 8, redundant 6
Fitness: max 1(1), min 0.167(1), ave 0.814
Test execution time: sum 3631 ms, max 80 ms, min 58 ms
----------------------------------------------------------------

2023-08-02 11:54:02 [main] [INFO]  KGenProgMain - entered the era of 178th generation.
2023-08-02 11:54:18 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 17 minutes 1 seconds
Variants: generated 100, build-succeeded 58, build-failed 28, syntax-invalid 9, redundant 5
Fitness: max 0.833(52), min 0.5(1), ave 0.813
Test execution time: sum 3850 ms, max 130 ms, min 59 ms
----------------------------------------------------------------

2023-08-02 11:54:18 [main] [INFO]  KGenProgMain - entered the era of 179th generation.
2023-08-02 11:54:33 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 17 minutes 15 seconds
Variants: generated 100, build-succeeded 54, build-failed 24, syntax-invalid 17, redundant 5
Fitness: max 1(1), min 0.167(3), ave 0.799
Test execution time: sum 3375 ms, max 82 ms, min 58 ms
----------------------------------------------------------------

2023-08-02 11:54:33 [main] [INFO]  KGenProgMain - entered the era of 180th generation.
2023-08-02 11:54:47 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 17 minutes 29 seconds
Variants: generated 100, build-succeeded 43, build-failed 27, syntax-invalid 25, redundant 5
Fitness: max 0.833(38), min 0.167(3), ave 0.779
Test execution time: sum 2653 ms, max 79 ms, min 57 ms
----------------------------------------------------------------

2023-08-02 11:54:47 [main] [INFO]  KGenProgMain - entered the era of 181st generation.
2023-08-02 11:55:03 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 17 minutes 45 seconds
Variants: generated 100, build-succeeded 49, build-failed 30, syntax-invalid 19, redundant 2
Fitness: max 0.833(46), min 0.167(3), ave 0.793
Test execution time: sum 3321 ms, max 139 ms, min 57 ms
----------------------------------------------------------------

2023-08-02 11:55:03 [main] [INFO]  KGenProgMain - entered the era of 182nd generation.
2023-08-02 11:55:18 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 18 minutes 1 seconds
Variants: generated 100, build-succeeded 56, build-failed 28, syntax-invalid 12, redundant 4
Fitness: max 0.833(53), min 0.167(1), ave 0.81
Test execution time: sum 3427 ms, max 77 ms, min 57 ms
----------------------------------------------------------------

2023-08-02 11:55:18 [main] [INFO]  KGenProgMain - entered the era of 183rd generation.
2023-08-02 11:55:34 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 18 minutes 16 seconds
Variants: generated 100, build-succeeded 55, build-failed 23, syntax-invalid 14, redundant 8
Fitness: max 0.833(49), min 0.167(1), ave 0.806
Test execution time: sum 3507 ms, max 79 ms, min 59 ms
----------------------------------------------------------------

2023-08-02 11:55:34 [main] [INFO]  KGenProgMain - entered the era of 184th generation.
2023-08-02 11:55:49 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 18 minutes 32 seconds
Variants: generated 100, build-succeeded 48, build-failed 28, syntax-invalid 22, redundant 2
Fitness: max 0.833(44), min 0.167(2), ave 0.799
Test execution time: sum 3142 ms, max 132 ms, min 59 ms
----------------------------------------------------------------

2023-08-02 11:55:49 [main] [INFO]  KGenProgMain - entered the era of 185th generation.
2023-08-02 11:56:04 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 18 minutes 46 seconds
Variants: generated 100, build-succeeded 48, build-failed 23, syntax-invalid 26, redundant 3
Fitness: max 0.833(47), min 0.667(1), ave 0.83
Test execution time: sum 2942 ms, max 75 ms, min 59 ms
----------------------------------------------------------------

2023-08-02 11:56:04 [main] [INFO]  KGenProgMain - entered the era of 186th generation.
2023-08-02 11:56:18 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 19 minutes 1 seconds
Variants: generated 100, build-succeeded 47, build-failed 27, syntax-invalid 21, redundant 5
Fitness: max 0.833(41), min 0.167(1), ave 0.798
Test execution time: sum 2984 ms, max 77 ms, min 59 ms
----------------------------------------------------------------

2023-08-02 11:56:18 [main] [INFO]  KGenProgMain - entered the era of 187th generation.
2023-08-02 11:56:33 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 19 minutes 15 seconds
Variants: generated 100, build-succeeded 39, build-failed 30, syntax-invalid 24, redundant 7
Fitness: max 0.833(36), min 0.167(2), ave 0.795
Test execution time: sum 2592 ms, max 139 ms, min 59 ms
----------------------------------------------------------------

2023-08-02 11:56:33 [main] [INFO]  KGenProgMain - entered the era of 188th generation.
2023-08-02 11:56:48 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 19 minutes 30 seconds
Variants: generated 100, build-succeeded 49, build-failed 31, syntax-invalid 14, redundant 6
Fitness: max 1(1), min 0.667(4), ave 0.823
Test execution time: sum 3048 ms, max 81 ms, min 58 ms
----------------------------------------------------------------

2023-08-02 11:56:48 [main] [INFO]  KGenProgMain - entered the era of 189th generation.
2023-08-02 11:57:02 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 19 minutes 45 seconds
Variants: generated 100, build-succeeded 50, build-failed 21, syntax-invalid 24, redundant 5
Fitness: max 1(1), min 0.167(1), ave 0.817
Test execution time: sum 3134 ms, max 80 ms, min 57 ms
----------------------------------------------------------------

2023-08-02 11:57:02 [main] [INFO]  KGenProgMain - entered the era of 190th generation.
2023-08-02 11:57:18 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 20 minutes 0 seconds
Variants: generated 100, build-succeeded 47, build-failed 27, syntax-invalid 23, redundant 3
Fitness: max 0.833(40), min 0.167(2), ave 0.787
Test execution time: sum 3073 ms, max 137 ms, min 59 ms
----------------------------------------------------------------

2023-08-02 11:57:18 [main] [INFO]  KGenProgMain - entered the era of 191st generation.
2023-08-02 11:57:33 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 20 minutes 15 seconds
Variants: generated 100, build-succeeded 43, build-failed 30, syntax-invalid 22, redundant 5
Fitness: max 0.833(42), min 0.667(1), ave 0.829
Test execution time: sum 2662 ms, max 74 ms, min 59 ms
----------------------------------------------------------------

2023-08-02 11:57:33 [main] [INFO]  KGenProgMain - entered the era of 192nd generation.
2023-08-02 11:57:48 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 20 minutes 30 seconds
Variants: generated 100, build-succeeded 48, build-failed 28, syntax-invalid 20, redundant 4
Fitness: max 0.833(45), min 0.167(1), ave 0.812
Test execution time: sum 3041 ms, max 77 ms, min 59 ms
----------------------------------------------------------------

2023-08-02 11:57:48 [main] [INFO]  KGenProgMain - entered the era of 193rd generation.
2023-08-02 11:58:04 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 20 minutes 47 seconds
Variants: generated 100, build-succeeded 52, build-failed 32, syntax-invalid 13, redundant 3
Fitness: max 1(1), min 0.5(1), ave 0.827
Test execution time: sum 3428 ms, max 143 ms, min 60 ms
----------------------------------------------------------------

2023-08-02 11:58:04 [main] [INFO]  KGenProgMain - entered the era of 194th generation.
2023-08-02 11:58:19 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 21 minutes 1 seconds
Variants: generated 100, build-succeeded 42, build-failed 29, syntax-invalid 22, redundant 7
Fitness: max 0.833(38), min 0.667(4), ave 0.817
Test execution time: sum 2626 ms, max 81 ms, min 59 ms
----------------------------------------------------------------

2023-08-02 11:58:19 [main] [INFO]  KGenProgMain - entered the era of 195th generation.
2023-08-02 11:58:34 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 21 minutes 16 seconds
Variants: generated 100, build-succeeded 42, build-failed 29, syntax-invalid 24, redundant 5
Fitness: max 1(1), min 0.167(1), ave 0.813
Test execution time: sum 2632 ms, max 71 ms, min 57 ms
----------------------------------------------------------------

2023-08-02 11:58:34 [main] [INFO]  KGenProgMain - entered the era of 196th generation.
2023-08-02 11:58:50 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 21 minutes 32 seconds
Variants: generated 100, build-succeeded 48, build-failed 26, syntax-invalid 22, redundant 4
Fitness: max 0.833(41), min 0.167(2), ave 0.785
Test execution time: sum 3138 ms, max 137 ms, min 59 ms
----------------------------------------------------------------

2023-08-02 11:58:50 [main] [INFO]  KGenProgMain - entered the era of 197th generation.
2023-08-02 11:59:07 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 21 minutes 49 seconds
Variants: generated 100, build-succeeded 60, build-failed 24, syntax-invalid 13, redundant 3
Fitness: max 0.833(55), min 0.167(1), ave 0.806
Test execution time: sum 3709 ms, max 79 ms, min 57 ms
----------------------------------------------------------------

2023-08-02 11:59:07 [main] [INFO]  KGenProgMain - entered the era of 198th generation.
2023-08-02 11:59:23 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 22 minutes 6 seconds
Variants: generated 100, build-succeeded 55, build-failed 22, syntax-invalid 18, redundant 5
Fitness: max 0.833(54), min 0.167(1), ave 0.821
Test execution time: sum 3463 ms, max 77 ms, min 56 ms
----------------------------------------------------------------

2023-08-02 11:59:23 [main] [INFO]  KGenProgMain - entered the era of 199th generation.
2023-08-02 11:59:40 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 22 minutes 22 seconds
Variants: generated 100, build-succeeded 45, build-failed 29, syntax-invalid 20, redundant 6
Fitness: max 0.833(44), min 0.5(1), ave 0.826
Test execution time: sum 2926 ms, max 136 ms, min 59 ms
----------------------------------------------------------------

2023-08-02 11:59:40 [main] [INFO]  KGenProgMain - entered the era of 200th generation.
2023-08-02 11:59:57 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 22 minutes 39 seconds
Variants: generated 100, build-succeeded 55, build-failed 29, syntax-invalid 10, redundant 6
Fitness: max 0.833(51), min 0.167(1), ave 0.812
Test execution time: sum 3435 ms, max 79 ms, min 59 ms
----------------------------------------------------------------

2023-08-02 11:59:57 [main] [INFO]  KGenProgMain - entered the era of 201st generation.
2023-08-02 12:00:12 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 22 minutes 55 seconds
Variants: generated 100, build-succeeded 49, build-failed 28, syntax-invalid 19, redundant 4
Fitness: max 0.833(46), min 0.167(1), ave 0.813
Test execution time: sum 3149 ms, max 72 ms, min 59 ms
----------------------------------------------------------------

2023-08-02 12:00:12 [main] [INFO]  KGenProgMain - entered the era of 202nd generation.
2023-08-02 12:00:29 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 23 minutes 11 seconds
Variants: generated 100, build-succeeded 46, build-failed 35, syntax-invalid 15, redundant 4
Fitness: max 0.833(45), min 0.667(1), ave 0.83
Test execution time: sum 2968 ms, max 144 ms, min 59 ms
----------------------------------------------------------------

2023-08-02 12:00:29 [main] [INFO]  KGenProgMain - entered the era of 203rd generation.
2023-08-02 12:00:44 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 23 minutes 26 seconds
Variants: generated 100, build-succeeded 37, build-failed 36, syntax-invalid 20, redundant 7
Fitness: max 0.833(36), min 0.667(1), ave 0.829
Test execution time: sum 2323 ms, max 80 ms, min 59 ms
----------------------------------------------------------------

2023-08-02 12:00:44 [main] [INFO]  KGenProgMain - entered the era of 204th generation.
2023-08-02 12:00:59 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 23 minutes 42 seconds
Variants: generated 100, build-succeeded 47, build-failed 29, syntax-invalid 23, redundant 1
Fitness: max 0.833(44), min 0.167(1), ave 0.812
Test execution time: sum 2998 ms, max 77 ms, min 57 ms
----------------------------------------------------------------

2023-08-02 12:00:59 [main] [INFO]  KGenProgMain - entered the era of 205th generation.
2023-08-02 12:01:15 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 23 minutes 58 seconds
Variants: generated 100, build-succeeded 43, build-failed 31, syntax-invalid 22, redundant 4
Fitness: max 0.833(43), min 0.833(43), ave 0.833
Test execution time: sum 2798 ms, max 136 ms, min 58 ms
----------------------------------------------------------------

2023-08-02 12:01:15 [main] [INFO]  KGenProgMain - entered the era of 206th generation.
2023-08-02 12:01:31 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 24 minutes 13 seconds
Variants: generated 100, build-succeeded 52, build-failed 26, syntax-invalid 21, redundant 1
Fitness: max 0.833(47), min 0.167(3), ave 0.788
Test execution time: sum 3165 ms, max 78 ms, min 56 ms
----------------------------------------------------------------

2023-08-02 12:01:31 [main] [INFO]  KGenProgMain - entered the era of 207th generation.
2023-08-02 12:01:47 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 24 minutes 30 seconds
Variants: generated 100, build-succeeded 47, build-failed 37, syntax-invalid 14, redundant 2
Fitness: max 0.833(45), min 0.167(1), ave 0.816
Test execution time: sum 2995 ms, max 71 ms, min 58 ms
----------------------------------------------------------------

2023-08-02 12:01:47 [main] [INFO]  KGenProgMain - entered the era of 208th generation.
2023-08-02 12:02:05 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 24 minutes 47 seconds
Variants: generated 100, build-succeeded 55, build-failed 26, syntax-invalid 13, redundant 6
Fitness: max 0.833(51), min 0.167(2), ave 0.803
Test execution time: sum 3418 ms, max 133 ms, min 58 ms
----------------------------------------------------------------

2023-08-02 12:02:05 [main] [INFO]  KGenProgMain - entered the era of 209th generation.
2023-08-02 12:02:21 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 25 minutes 3 seconds
Variants: generated 100, build-succeeded 48, build-failed 32, syntax-invalid 14, redundant 6
Fitness: max 0.833(43), min 0.167(2), ave 0.795
Test execution time: sum 2920 ms, max 74 ms, min 56 ms
----------------------------------------------------------------

2023-08-02 12:02:21 [main] [INFO]  KGenProgMain - entered the era of 210th generation.
2023-08-02 12:02:39 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 25 minutes 22 seconds
Variants: generated 100, build-succeeded 60, build-failed 29, syntax-invalid 9, redundant 2
Fitness: max 0.833(50), min 0.167(5), ave 0.761
Test execution time: sum 3999 ms, max 126 ms, min 56 ms
----------------------------------------------------------------

2023-08-02 12:02:39 [main] [INFO]  KGenProgMain - entered the era of 211th generation.
2023-08-02 12:02:56 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 25 minutes 38 seconds
Variants: generated 100, build-succeeded 49, build-failed 33, syntax-invalid 15, redundant 3
Fitness: max 0.833(47), min 0.167(1), ave 0.816
Test execution time: sum 3062 ms, max 80 ms, min 58 ms
----------------------------------------------------------------

2023-08-02 12:02:56 [main] [INFO]  KGenProgMain - entered the era of 212th generation.
2023-08-02 12:03:14 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 25 minutes 56 seconds
Variants: generated 100, build-succeeded 63, build-failed 22, syntax-invalid 9, redundant 6
Fitness: max 0.833(58), min 0.167(4), ave 0.788
Test execution time: sum 4002 ms, max 77 ms, min 57 ms
----------------------------------------------------------------

2023-08-02 12:03:14 [main] [INFO]  KGenProgMain - entered the era of 213th generation.
2023-08-02 12:03:31 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 26 minutes 14 seconds
Variants: generated 100, build-succeeded 51, build-failed 30, syntax-invalid 12, redundant 7
Fitness: max 0.833(50), min 0.667(1), ave 0.83
Test execution time: sum 3362 ms, max 133 ms, min 59 ms
----------------------------------------------------------------

2023-08-02 12:03:31 [main] [INFO]  KGenProgMain - entered the era of 214th generation.
2023-08-02 12:03:49 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 26 minutes 31 seconds
Variants: generated 100, build-succeeded 56, build-failed 32, syntax-invalid 8, redundant 4
Fitness: max 0.833(52), min 0.167(2), ave 0.804
Test execution time: sum 3504 ms, max 84 ms, min 59 ms
----------------------------------------------------------------

2023-08-02 12:03:49 [main] [INFO]  KGenProgMain - entered the era of 215th generation.
2023-08-02 12:04:06 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 26 minutes 49 seconds
Variants: generated 100, build-succeeded 56, build-failed 30, syntax-invalid 11, redundant 3
Fitness: max 0.833(49), min 0.167(4), ave 0.774
Test execution time: sum 3676 ms, max 79 ms, min 56 ms
----------------------------------------------------------------

2023-08-02 12:04:06 [main] [INFO]  KGenProgMain - entered the era of 216th generation.
2023-08-02 12:04:25 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 27 minutes 7 seconds
Variants: generated 100, build-succeeded 55, build-failed 29, syntax-invalid 13, redundant 3
Fitness: max 0.833(51), min 0.167(2), ave 0.803
Test execution time: sum 3486 ms, max 140 ms, min 57 ms
----------------------------------------------------------------

2023-08-02 12:04:25 [main] [INFO]  KGenProgMain - entered the era of 217th generation.
2023-08-02 12:04:43 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 27 minutes 25 seconds
Variants: generated 100, build-succeeded 56, build-failed 29, syntax-invalid 9, redundant 6
Fitness: max 0.833(51), min 0.167(3), ave 0.786
Test execution time: sum 3564 ms, max 81 ms, min 56 ms
----------------------------------------------------------------

2023-08-02 12:04:43 [main] [INFO]  KGenProgMain - entered the era of 218th generation.
2023-08-02 12:05:02 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 27 minutes 44 seconds
Variants: generated 100, build-succeeded 59, build-failed 26, syntax-invalid 8, redundant 7
Fitness: max 0.833(57), min 0.167(2), ave 0.811
Test execution time: sum 3792 ms, max 131 ms, min 58 ms
----------------------------------------------------------------

2023-08-02 12:05:02 [main] [INFO]  KGenProgMain - entered the era of 219th generation.
2023-08-02 12:05:20 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 28 minutes 2 seconds
Variants: generated 100, build-succeeded 61, build-failed 28, syntax-invalid 6, redundant 5
Fitness: max 0.833(54), min 0.167(4), ave 0.779
Test execution time: sum 3761 ms, max 82 ms, min 56 ms
----------------------------------------------------------------

2023-08-02 12:05:20 [main] [INFO]  KGenProgMain - entered the era of 220th generation.
2023-08-02 12:05:38 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 28 minutes 20 seconds
Variants: generated 100, build-succeeded 55, build-failed 27, syntax-invalid 10, redundant 8
Fitness: max 0.833(47), min 0.167(1), ave 0.782
Test execution time: sum 3649 ms, max 134 ms, min 57 ms
----------------------------------------------------------------

2023-08-02 12:05:38 [main] [INFO]  KGenProgMain - entered the era of 221st generation.
2023-08-02 12:05:56 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 28 minutes 38 seconds
Variants: generated 100, build-succeeded 59, build-failed 28, syntax-invalid 12, redundant 1
Fitness: max 0.833(55), min 0.167(2), ave 0.805
Test execution time: sum 3711 ms, max 80 ms, min 59 ms
----------------------------------------------------------------

2023-08-02 12:05:56 [main] [INFO]  KGenProgMain - entered the era of 222nd generation.
2023-08-02 12:06:13 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 28 minutes 55 seconds
Variants: generated 100, build-succeeded 51, build-failed 32, syntax-invalid 15, redundant 2
Fitness: max 0.833(46), min 0.167(2), ave 0.797
Test execution time: sum 3206 ms, max 75 ms, min 57 ms
----------------------------------------------------------------

2023-08-02 12:06:13 [main] [INFO]  KGenProgMain - entered the era of 223rd generation.
2023-08-02 12:06:31 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 29 minutes 13 seconds
Variants: generated 100, build-succeeded 55, build-failed 20, syntax-invalid 14, redundant 11
Fitness: max 1(1), min 0.167(3), ave 0.785
Test execution time: sum 3601 ms, max 137 ms, min 57 ms
----------------------------------------------------------------

2023-08-02 12:06:31 [main] [INFO]  KGenProgMain - entered the era of 224th generation.
2023-08-02 12:06:49 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 29 minutes 32 seconds
Variants: generated 100, build-succeeded 63, build-failed 23, syntax-invalid 5, redundant 9
Fitness: max 0.833(56), min 0.167(3), ave 0.791
Test execution time: sum 3924 ms, max 85 ms, min 57 ms
----------------------------------------------------------------

2023-08-02 12:06:49 [main] [INFO]  KGenProgMain - entered the era of 225th generation.
2023-08-02 12:07:07 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 29 minutes 50 seconds
Variants: generated 100, build-succeeded 54, build-failed 32, syntax-invalid 9, redundant 5
Fitness: max 1(1), min 0.167(1), ave 0.821
Test execution time: sum 3475 ms, max 74 ms, min 56 ms
----------------------------------------------------------------

2023-08-02 12:07:07 [main] [INFO]  KGenProgMain - entered the era of 226th generation.
2023-08-02 12:07:26 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 30 minutes 9 seconds
Variants: generated 100, build-succeeded 62, build-failed 26, syntax-invalid 5, redundant 7
Fitness: max 1(1), min 0.167(2), ave 0.812
Test execution time: sum 3968 ms, max 145 ms, min 58 ms
----------------------------------------------------------------

2023-08-02 12:07:26 [main] [INFO]  KGenProgMain - entered the era of 227th generation.
2023-08-02 12:07:44 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 30 minutes 26 seconds
Variants: generated 100, build-succeeded 49, build-failed 34, syntax-invalid 11, redundant 6
Fitness: max 0.833(48), min 0.667(1), ave 0.83
Test execution time: sum 3079 ms, max 78 ms, min 60 ms
----------------------------------------------------------------

2023-08-02 12:07:44 [main] [INFO]  KGenProgMain - entered the era of 228th generation.
2023-08-02 12:08:03 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 30 minutes 46 seconds
Variants: generated 100, build-succeeded 63, build-failed 24, syntax-invalid 8, redundant 5
Fitness: max 1(1), min 0.167(3), ave 0.794
Test execution time: sum 4272 ms, max 134 ms, min 58 ms
----------------------------------------------------------------

2023-08-02 12:08:03 [main] [INFO]  KGenProgMain - entered the era of 229th generation.
2023-08-02 12:08:22 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 31 minutes 4 seconds
Variants: generated 100, build-succeeded 53, build-failed 28, syntax-invalid 15, redundant 4
Fitness: max 0.833(48), min 0.167(2), ave 0.799
Test execution time: sum 3282 ms, max 78 ms, min 57 ms
----------------------------------------------------------------

2023-08-02 12:08:22 [main] [INFO]  KGenProgMain - entered the era of 230th generation.
2023-08-02 12:08:41 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 31 minutes 23 seconds
Variants: generated 100, build-succeeded 61, build-failed 23, syntax-invalid 8, redundant 8
Fitness: max 0.833(55), min 0.167(2), ave 0.801
Test execution time: sum 3891 ms, max 79 ms, min 57 ms
----------------------------------------------------------------

2023-08-02 12:08:41 [main] [INFO]  KGenProgMain - entered the era of 231st generation.
2023-08-02 12:09:00 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 31 minutes 42 seconds
Variants: generated 100, build-succeeded 55, build-failed 29, syntax-invalid 14, redundant 2
Fitness: max 1(1), min 0.167(4), ave 0.785
Test execution time: sum 3624 ms, max 120 ms, min 59 ms
----------------------------------------------------------------

2023-08-02 12:09:00 [main] [INFO]  KGenProgMain - entered the era of 232nd generation.
2023-08-02 12:09:19 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 32 minutes 1 seconds
Variants: generated 100, build-succeeded 57, build-failed 23, syntax-invalid 16, redundant 4
Fitness: max 0.833(53), min 0.167(1), ave 0.807
Test execution time: sum 3712 ms, max 86 ms, min 60 ms
----------------------------------------------------------------

2023-08-02 12:09:19 [main] [INFO]  KGenProgMain - entered the era of 233rd generation.
2023-08-02 12:09:37 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 32 minutes 20 seconds
Variants: generated 100, build-succeeded 50, build-failed 27, syntax-invalid 12, redundant 11
Fitness: max 0.833(47), min 0.167(1), ave 0.807
Test execution time: sum 3342 ms, max 78 ms, min 59 ms
----------------------------------------------------------------

2023-08-02 12:09:37 [main] [INFO]  KGenProgMain - entered the era of 234th generation.
2023-08-02 12:09:56 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 32 minutes 38 seconds
Variants: generated 100, build-succeeded 50, build-failed 26, syntax-invalid 18, redundant 6
Fitness: max 0.833(45), min 0.167(1), ave 0.8
Test execution time: sum 3175 ms, max 129 ms, min 57 ms
----------------------------------------------------------------

2023-08-02 12:09:56 [main] [INFO]  KGenProgMain - entered the era of 235th generation.
2023-08-02 12:10:15 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 32 minutes 57 seconds
Variants: generated 100, build-succeeded 56, build-failed 29, syntax-invalid 9, redundant 6
Fitness: max 0.833(51), min 0.167(2), ave 0.795
Test execution time: sum 3475 ms, max 83 ms, min 57 ms
----------------------------------------------------------------

2023-08-02 12:10:15 [main] [INFO]  KGenProgMain - entered the era of 236th generation.
2023-08-02 12:10:34 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 33 minutes 16 seconds
Variants: generated 100, build-succeeded 50, build-failed 30, syntax-invalid 15, redundant 5
Fitness: max 0.833(47), min 0.167(3), ave 0.793
Test execution time: sum 3407 ms, max 148 ms, min 58 ms
----------------------------------------------------------------

2023-08-02 12:10:34 [main] [INFO]  KGenProgMain - entered the era of 237th generation.
2023-08-02 12:10:52 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 33 minutes 35 seconds
Variants: generated 100, build-succeeded 56, build-failed 20, syntax-invalid 19, redundant 5
Fitness: max 0.833(50), min 0.167(5), ave 0.771
Test execution time: sum 3498 ms, max 81 ms, min 59 ms
----------------------------------------------------------------

2023-08-02 12:10:52 [main] [INFO]  KGenProgMain - entered the era of 238th generation.
2023-08-02 12:11:11 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 33 minutes 53 seconds
Variants: generated 100, build-succeeded 54, build-failed 32, syntax-invalid 9, redundant 5
Fitness: max 0.833(47), min 0.167(2), ave 0.784
Test execution time: sum 3430 ms, max 74 ms, min 59 ms
----------------------------------------------------------------

2023-08-02 12:11:11 [main] [INFO]  KGenProgMain - entered the era of 239th generation.
2023-08-02 12:11:31 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 34 minutes 14 seconds
Variants: generated 100, build-succeeded 61, build-failed 26, syntax-invalid 10, redundant 3
Fitness: max 0.833(61), min 0.833(61), ave 0.833
Test execution time: sum 4018 ms, max 129 ms, min 60 ms
----------------------------------------------------------------

2023-08-02 12:11:31 [main] [INFO]  KGenProgMain - entered the era of 240th generation.
2023-08-02 12:11:50 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 34 minutes 33 seconds
Variants: generated 100, build-succeeded 62, build-failed 26, syntax-invalid 8, redundant 4
Fitness: max 0.833(56), min 0.167(1), ave 0.809
Test execution time: sum 3939 ms, max 81 ms, min 59 ms
----------------------------------------------------------------

2023-08-02 12:11:50 [main] [INFO]  KGenProgMain - entered the era of 241st generation.
2023-08-02 12:12:11 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 34 minutes 53 seconds
Variants: generated 100, build-succeeded 64, build-failed 22, syntax-invalid 11, redundant 3
Fitness: max 1(1), min 0.167(7), ave 0.76
Test execution time: sum 4371 ms, max 134 ms, min 59 ms
----------------------------------------------------------------

2023-08-02 12:12:11 [main] [INFO]  KGenProgMain - entered the era of 242nd generation.
2023-08-02 12:12:31 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 35 minutes 13 seconds
Variants: generated 100, build-succeeded 60, build-failed 27, syntax-invalid 9, redundant 4
Fitness: max 0.833(56), min 0.167(2), ave 0.806
Test execution time: sum 3785 ms, max 81 ms, min 58 ms
----------------------------------------------------------------

2023-08-02 12:12:31 [main] [INFO]  KGenProgMain - entered the era of 243rd generation.
2023-08-02 12:12:51 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 35 minutes 33 seconds
Variants: generated 100, build-succeeded 62, build-failed 29, syntax-invalid 5, redundant 4
Fitness: max 1(1), min 0.167(2), ave 0.809
Test execution time: sum 4021 ms, max 82 ms, min 58 ms
----------------------------------------------------------------

2023-08-02 12:12:51 [main] [INFO]  KGenProgMain - entered the era of 244th generation.
2023-08-02 12:13:11 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 35 minutes 53 seconds
Variants: generated 100, build-succeeded 57, build-failed 31, syntax-invalid 11, redundant 1
Fitness: max 0.833(51), min 0.167(2), ave 0.798
Test execution time: sum 3669 ms, max 121 ms, min 57 ms
----------------------------------------------------------------

2023-08-02 12:13:11 [main] [INFO]  KGenProgMain - entered the era of 245th generation.
2023-08-02 12:13:30 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 36 minutes 12 seconds
Variants: generated 100, build-succeeded 56, build-failed 33, syntax-invalid 8, redundant 3
Fitness: max 0.833(55), min 0.667(1), ave 0.83
Test execution time: sum 3487 ms, max 73 ms, min 59 ms
----------------------------------------------------------------

2023-08-02 12:13:30 [main] [INFO]  KGenProgMain - entered the era of 246th generation.
2023-08-02 12:13:51 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 36 minutes 33 seconds
Variants: generated 100, build-succeeded 57, build-failed 25, syntax-invalid 15, redundant 3
Fitness: max 1(2), min 0.167(2), ave 0.81
Test execution time: sum 3938 ms, max 213 ms, min 59 ms
----------------------------------------------------------------

2023-08-02 12:13:51 [main] [INFO]  KGenProgMain - entered the era of 247th generation.
2023-08-02 12:14:12 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 36 minutes 54 seconds
Variants: generated 100, build-succeeded 67, build-failed 23, syntax-invalid 7, redundant 3
Fitness: max 1(2), min 0.167(2), ave 0.801
Test execution time: sum 4274 ms, max 82 ms, min 57 ms
----------------------------------------------------------------

2023-08-02 12:14:12 [main] [INFO]  KGenProgMain - entered the era of 248th generation.
2023-08-02 12:14:32 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 37 minutes 14 seconds
Variants: generated 100, build-succeeded 57, build-failed 29, syntax-invalid 7, redundant 7
Fitness: max 0.833(47), min 0.167(4), ave 0.769
Test execution time: sum 3789 ms, max 80 ms, min 59 ms
----------------------------------------------------------------

2023-08-02 12:14:32 [main] [INFO]  KGenProgMain - entered the era of 249th generation.
2023-08-02 12:14:53 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 37 minutes 35 seconds
Variants: generated 100, build-succeeded 59, build-failed 30, syntax-invalid 7, redundant 4
Fitness: max 0.833(53), min 0.167(1), ave 0.802
Test execution time: sum 3950 ms, max 235 ms, min 58 ms
----------------------------------------------------------------

2023-08-02 12:14:53 [main] [INFO]  KGenProgMain - entered the era of 250th generation.
2023-08-02 12:15:13 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 37 minutes 56 seconds
Variants: generated 100, build-succeeded 62, build-failed 29, syntax-invalid 8, redundant 1
Fitness: max 0.833(60), min 0.167(1), ave 0.82
Test execution time: sum 3962 ms, max 77 ms, min 58 ms
----------------------------------------------------------------

2023-08-02 12:15:13 [main] [INFO]  KGenProgMain - entered the era of 251st generation.
2023-08-02 12:15:34 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 38 minutes 17 seconds
Variants: generated 100, build-succeeded 53, build-failed 29, syntax-invalid 10, redundant 8
Fitness: max 1(1), min 0.167(1), ave 0.821
Test execution time: sum 3665 ms, max 139 ms, min 60 ms
----------------------------------------------------------------

2023-08-02 12:15:34 [main] [INFO]  KGenProgMain - entered the era of 252nd generation.
2023-08-02 12:15:54 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 38 minutes 36 seconds
Variants: generated 100, build-succeeded 55, build-failed 30, syntax-invalid 13, redundant 2
Fitness: max 0.833(48), min 0.167(3), ave 0.779
Test execution time: sum 3507 ms, max 86 ms, min 59 ms
----------------------------------------------------------------

2023-08-02 12:15:54 [main] [INFO]  KGenProgMain - entered the era of 253rd generation.
2023-08-02 12:16:14 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 38 minutes 57 seconds
Variants: generated 100, build-succeeded 56, build-failed 27, syntax-invalid 15, redundant 2
Fitness: max 0.833(54), min 0.167(1), ave 0.818
Test execution time: sum 3713 ms, max 78 ms, min 60 ms
----------------------------------------------------------------

2023-08-02 12:16:14 [main] [INFO]  KGenProgMain - entered the era of 254th generation.
2023-08-02 12:16:36 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 39 minutes 18 seconds
Variants: generated 100, build-succeeded 56, build-failed 32, syntax-invalid 9, redundant 3
Fitness: max 1(1), min 0.167(1), ave 0.821
Test execution time: sum 3688 ms, max 135 ms, min 60 ms
----------------------------------------------------------------

2023-08-02 12:16:36 [main] [INFO]  KGenProgMain - entered the era of 255th generation.
2023-08-02 12:16:56 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 39 minutes 38 seconds
Variants: generated 100, build-succeeded 55, build-failed 25, syntax-invalid 11, redundant 9
Fitness: max 1(1), min 0.167(1), ave 0.812
Test execution time: sum 3554 ms, max 87 ms, min 58 ms
----------------------------------------------------------------

2023-08-02 12:16:56 [main] [INFO]  KGenProgMain - entered the era of 256th generation.
2023-08-02 12:17:17 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 40 minutes 0 seconds
Variants: generated 100, build-succeeded 54, build-failed 26, syntax-invalid 12, redundant 8
Fitness: max 0.833(50), min 0.167(2), ave 0.802
Test execution time: sum 3803 ms, max 145 ms, min 60 ms
----------------------------------------------------------------

2023-08-02 12:17:17 [main] [INFO]  KGenProgMain - entered the era of 257th generation.
2023-08-02 12:17:37 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 40 minutes 20 seconds
Variants: generated 100, build-succeeded 56, build-failed 25, syntax-invalid 13, redundant 6
Fitness: max 1(2), min 0.167(2), ave 0.804
Test execution time: sum 3614 ms, max 87 ms, min 58 ms
----------------------------------------------------------------

2023-08-02 12:17:37 [main] [INFO]  KGenProgMain - entered the era of 258th generation.
2023-08-02 12:17:59 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 40 minutes 41 seconds
Variants: generated 100, build-succeeded 60, build-failed 28, syntax-invalid 8, redundant 4
Fitness: max 0.833(58), min 0.167(1), ave 0.819
Test execution time: sum 3925 ms, max 76 ms, min 60 ms
----------------------------------------------------------------

2023-08-02 12:17:59 [main] [INFO]  KGenProgMain - entered the era of 259th generation.
2023-08-02 12:18:20 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 41 minutes 2 seconds
Variants: generated 100, build-succeeded 55, build-failed 24, syntax-invalid 18, redundant 3
Fitness: max 1(2), min 0.167(3), ave 0.791
Test execution time: sum 3610 ms, max 140 ms, min 60 ms
----------------------------------------------------------------

2023-08-02 12:18:20 [main] [INFO]  KGenProgMain - entered the era of 260th generation.
2023-08-02 12:18:39 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 41 minutes 22 seconds
Variants: generated 100, build-succeeded 51, build-failed 29, syntax-invalid 19, redundant 1
Fitness: max 1(1), min 0.167(1), ave 0.817
Test execution time: sum 3203 ms, max 81 ms, min 57 ms
----------------------------------------------------------------

2023-08-02 12:18:39 [main] [INFO]  KGenProgMain - entered the era of 261st generation.
2023-08-02 12:19:01 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 41 minutes 43 seconds
Variants: generated 100, build-succeeded 58, build-failed 28, syntax-invalid 11, redundant 3
Fitness: max 0.833(55), min 0.667(3), ave 0.825
Test execution time: sum 3902 ms, max 77 ms, min 60 ms
----------------------------------------------------------------

2023-08-02 12:19:01 [main] [INFO]  KGenProgMain - entered the era of 262nd generation.
2023-08-02 12:19:21 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 42 minutes 4 seconds
Variants: generated 100, build-succeeded 45, build-failed 31, syntax-invalid 20, redundant 4
Fitness: max 0.833(40), min 0.167(4), ave 0.77
Test execution time: sum 2906 ms, max 141 ms, min 58 ms
----------------------------------------------------------------

2023-08-02 12:19:21 [main] [INFO]  KGenProgMain - entered the era of 263rd generation.
2023-08-02 12:19:42 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 42 minutes 25 seconds
Variants: generated 100, build-succeeded 56, build-failed 24, syntax-invalid 13, redundant 7
Fitness: max 1(1), min 0.167(3), ave 0.78
Test execution time: sum 3539 ms, max 77 ms, min 58 ms
----------------------------------------------------------------

2023-08-02 12:19:42 [main] [INFO]  KGenProgMain - entered the era of 264th generation.
2023-08-02 12:20:04 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 42 minutes 46 seconds
Variants: generated 100, build-succeeded 54, build-failed 30, syntax-invalid 13, redundant 3
Fitness: max 0.833(48), min 0.167(2), ave 0.796
Test execution time: sum 3663 ms, max 140 ms, min 61 ms
----------------------------------------------------------------

2023-08-02 12:20:04 [main] [INFO]  KGenProgMain - entered the era of 265th generation.
2023-08-02 12:20:25 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 43 minutes 7 seconds
Variants: generated 100, build-succeeded 64, build-failed 20, syntax-invalid 12, redundant 4
Fitness: max 0.833(55), min 0.167(6), ave 0.76
Test execution time: sum 4071 ms, max 83 ms, min 57 ms
----------------------------------------------------------------

2023-08-02 12:20:25 [main] [INFO]  KGenProgMain - entered the era of 266th generation.
2023-08-02 12:20:47 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 43 minutes 30 seconds
Variants: generated 100, build-succeeded 60, build-failed 25, syntax-invalid 6, redundant 9
Fitness: max 0.833(59), min 0.667(1), ave 0.831
Test execution time: sum 4221 ms, max 211 ms, min 60 ms
----------------------------------------------------------------

2023-08-02 12:20:47 [main] [INFO]  KGenProgMain - entered the era of 267th generation.
2023-08-02 12:21:09 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 43 minutes 51 seconds
Variants: generated 100, build-succeeded 58, build-failed 28, syntax-invalid 11, redundant 3
Fitness: max 0.833(54), min 0.167(3), ave 0.796
Test execution time: sum 3689 ms, max 81 ms, min 57 ms
----------------------------------------------------------------

2023-08-02 12:21:09 [main] [INFO]  KGenProgMain - entered the era of 268th generation.
2023-08-02 12:21:30 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 44 minutes 12 seconds
Variants: generated 100, build-succeeded 60, build-failed 24, syntax-invalid 13, redundant 3
Fitness: max 0.833(57), min 0.667(3), ave 0.825
Test execution time: sum 4030 ms, max 82 ms, min 61 ms
----------------------------------------------------------------

2023-08-02 12:21:30 [main] [INFO]  KGenProgMain - entered the era of 269th generation.
2023-08-02 12:21:52 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 44 minutes 34 seconds
Variants: generated 100, build-succeeded 57, build-failed 24, syntax-invalid 14, redundant 5
Fitness: max 0.833(54), min 0.167(2), ave 0.807
Test execution time: sum 3852 ms, max 208 ms, min 59 ms
----------------------------------------------------------------

2023-08-02 12:21:52 [main] [INFO]  KGenProgMain - entered the era of 270th generation.
2023-08-02 12:22:13 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 44 minutes 55 seconds
Variants: generated 100, build-succeeded 55, build-failed 32, syntax-invalid 9, redundant 4
Fitness: max 0.833(53), min 0.167(1), ave 0.818
Test execution time: sum 3581 ms, max 87 ms, min 61 ms
----------------------------------------------------------------

2023-08-02 12:22:13 [main] [INFO]  KGenProgMain - entered the era of 271st generation.
2023-08-02 12:22:35 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 45 minutes 18 seconds
Variants: generated 100, build-succeeded 59, build-failed 26, syntax-invalid 11, redundant 4
Fitness: max 0.833(55), min 0.167(4), ave 0.788
Test execution time: sum 4212 ms, max 211 ms, min 61 ms
----------------------------------------------------------------

2023-08-02 12:22:35 [main] [INFO]  KGenProgMain - entered the era of 272nd generation.
2023-08-02 12:22:55 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 45 minutes 38 seconds
Variants: generated 100, build-succeeded 48, build-failed 31, syntax-invalid 18, redundant 3
Fitness: max 0.833(44), min 0.667(4), ave 0.819
Test execution time: sum 3181 ms, max 84 ms, min 60 ms
----------------------------------------------------------------

2023-08-02 12:22:55 [main] [INFO]  KGenProgMain - entered the era of 273rd generation.
2023-08-02 12:23:16 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 45 minutes 58 seconds
Variants: generated 100, build-succeeded 56, build-failed 24, syntax-invalid 17, redundant 3
Fitness: max 0.833(52), min 0.167(4), ave 0.786
Test execution time: sum 3707 ms, max 79 ms, min 59 ms
----------------------------------------------------------------

2023-08-02 12:23:16 [main] [INFO]  KGenProgMain - entered the era of 274th generation.
2023-08-02 12:23:38 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 46 minutes 20 seconds
Variants: generated 100, build-succeeded 46, build-failed 41, syntax-invalid 11, redundant 2
Fitness: max 0.833(45), min 0.167(1), ave 0.819
Test execution time: sum 3113 ms, max 141 ms, min 60 ms
----------------------------------------------------------------

2023-08-02 12:23:38 [main] [INFO]  KGenProgMain - entered the era of 275th generation.
2023-08-02 12:23:59 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 46 minutes 42 seconds
Variants: generated 100, build-succeeded 58, build-failed 26, syntax-invalid 12, redundant 4
Fitness: max 1(1), min 0.333(1), ave 0.819
Test execution time: sum 3816 ms, max 89 ms, min 61 ms
----------------------------------------------------------------

2023-08-02 12:23:59 [main] [INFO]  KGenProgMain - entered the era of 276th generation.
2023-08-02 12:24:22 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 47 minutes 5 seconds
Variants: generated 100, build-succeeded 58, build-failed 28, syntax-invalid 14, redundant 0
Fitness: max 0.833(51), min 0.167(1), ave 0.805
Test execution time: sum 3982 ms, max 156 ms, min 61 ms
----------------------------------------------------------------

2023-08-02 12:24:22 [main] [INFO]  KGenProgMain - entered the era of 277th generation.
2023-08-02 12:24:45 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 47 minutes 27 seconds
Variants: generated 100, build-succeeded 64, build-failed 28, syntax-invalid 6, redundant 2
Fitness: max 0.833(59), min 0.167(2), ave 0.802
Test execution time: sum 4131 ms, max 78 ms, min 59 ms
----------------------------------------------------------------

2023-08-02 12:24:45 [main] [INFO]  KGenProgMain - entered the era of 278th generation.
2023-08-02 12:25:07 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 47 minutes 49 seconds
Variants: generated 100, build-succeeded 54, build-failed 37, syntax-invalid 6, redundant 3
Fitness: max 0.833(51), min 0.167(1), ave 0.815
Test execution time: sum 3776 ms, max 137 ms, min 61 ms
----------------------------------------------------------------

2023-08-02 12:25:07 [main] [INFO]  KGenProgMain - entered the era of 279th generation.
2023-08-02 12:25:28 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 48 minutes 10 seconds
Variants: generated 100, build-succeeded 51, build-failed 31, syntax-invalid 13, redundant 5
Fitness: max 1(1), min 0.167(2), ave 0.801
Test execution time: sum 3291 ms, max 81 ms, min 61 ms
----------------------------------------------------------------

2023-08-02 12:25:28 [main] [INFO]  KGenProgMain - entered the era of 280th generation.
2023-08-02 12:25:50 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 48 minutes 32 seconds
Variants: generated 100, build-succeeded 62, build-failed 26, syntax-invalid 10, redundant 2
Fitness: max 0.833(55), min 0.167(2), ave 0.796
Test execution time: sum 4075 ms, max 75 ms, min 58 ms
----------------------------------------------------------------

2023-08-02 12:25:50 [main] [INFO]  KGenProgMain - entered the era of 281st generation.
2023-08-02 12:26:13 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 48 minutes 56 seconds
Variants: generated 100, build-succeeded 60, build-failed 34, syntax-invalid 6, redundant 0
Fitness: max 0.833(57), min 0.167(2), ave 0.808
Test execution time: sum 3929 ms, max 151 ms, min 58 ms
----------------------------------------------------------------

2023-08-02 12:26:13 [main] [INFO]  KGenProgMain - entered the era of 282nd generation.
2023-08-02 12:26:35 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 49 minutes 17 seconds
Variants: generated 100, build-succeeded 58, build-failed 25, syntax-invalid 12, redundant 5
Fitness: max 1(1), min 0.667(6), ave 0.819
Test execution time: sum 3735 ms, max 79 ms, min 59 ms
----------------------------------------------------------------

2023-08-02 12:26:35 [main] [INFO]  KGenProgMain - entered the era of 283rd generation.
2023-08-02 12:26:57 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 49 minutes 39 seconds
Variants: generated 100, build-succeeded 50, build-failed 33, syntax-invalid 14, redundant 3
Fitness: max 0.833(49), min 0.667(1), ave 0.83
Test execution time: sum 3418 ms, max 141 ms, min 62 ms
----------------------------------------------------------------

2023-08-02 12:26:57 [main] [INFO]  KGenProgMain - entered the era of 284th generation.
2023-08-02 12:27:18 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 50 minutes 1 seconds
Variants: generated 100, build-succeeded 50, build-failed 31, syntax-invalid 15, redundant 4
Fitness: max 0.833(44), min 0.167(2), ave 0.793
Test execution time: sum 3177 ms, max 78 ms, min 58 ms
----------------------------------------------------------------

2023-08-02 12:27:18 [main] [INFO]  KGenProgMain - entered the era of 285th generation.
2023-08-02 12:27:39 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 50 minutes 21 seconds
Variants: generated 100, build-succeeded 49, build-failed 29, syntax-invalid 18, redundant 4
Fitness: max 0.833(48), min 0.667(1), ave 0.83
Test execution time: sum 3288 ms, max 76 ms, min 62 ms
----------------------------------------------------------------

2023-08-02 12:27:39 [main] [INFO]  KGenProgMain - entered the era of 286th generation.
2023-08-02 12:28:01 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 50 minutes 43 seconds
Variants: generated 100, build-succeeded 52, build-failed 31, syntax-invalid 14, redundant 3
Fitness: max 0.833(46), min 0.167(3), ave 0.782
Test execution time: sum 3440 ms, max 132 ms, min 61 ms
----------------------------------------------------------------

2023-08-02 12:28:01 [main] [INFO]  KGenProgMain - entered the era of 287th generation.
2023-08-02 12:28:22 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 51 minutes 4 seconds
Variants: generated 100, build-succeeded 51, build-failed 29, syntax-invalid 18, redundant 2
Fitness: max 0.833(47), min 0.167(2), ave 0.801
Test execution time: sum 3335 ms, max 81 ms, min 58 ms
----------------------------------------------------------------

2023-08-02 12:28:22 [main] [INFO]  KGenProgMain - entered the era of 288th generation.
2023-08-02 12:28:44 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 51 minutes 26 seconds
Variants: generated 100, build-succeeded 51, build-failed 28, syntax-invalid 16, redundant 5
Fitness: max 0.833(46), min 0.167(3), ave 0.788
Test execution time: sum 3636 ms, max 223 ms, min 59 ms
----------------------------------------------------------------

2023-08-02 12:28:44 [main] [INFO]  KGenProgMain - entered the era of 289th generation.
2023-08-02 12:29:05 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 51 minutes 47 seconds
Variants: generated 100, build-succeeded 50, build-failed 29, syntax-invalid 18, redundant 3
Fitness: max 0.833(44), min 0.167(2), ave 0.793
Test execution time: sum 3227 ms, max 80 ms, min 59 ms
----------------------------------------------------------------

2023-08-02 12:29:05 [main] [INFO]  KGenProgMain - entered the era of 290th generation.
2023-08-02 12:29:27 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 52 minutes 9 seconds
Variants: generated 100, build-succeeded 49, build-failed 29, syntax-invalid 20, redundant 2
Fitness: max 0.833(45), min 0.167(3), ave 0.789
Test execution time: sum 3218 ms, max 80 ms, min 59 ms
----------------------------------------------------------------

2023-08-02 12:29:27 [main] [INFO]  KGenProgMain - entered the era of 291st generation.
2023-08-02 12:29:50 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 52 minutes 32 seconds
Variants: generated 100, build-succeeded 52, build-failed 30, syntax-invalid 17, redundant 1
Fitness: max 1(2), min 0.167(5), ave 0.772
Test execution time: sum 3481 ms, max 143 ms, min 59 ms
----------------------------------------------------------------

2023-08-02 12:29:50 [main] [INFO]  KGenProgMain - entered the era of 292nd generation.
2023-08-02 12:30:12 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 52 minutes 54 seconds
Variants: generated 100, build-succeeded 55, build-failed 25, syntax-invalid 17, redundant 3
Fitness: max 0.833(44), min 0.167(6), ave 0.739
Test execution time: sum 3547 ms, max 74 ms, min 60 ms
----------------------------------------------------------------

2023-08-02 12:30:12 [main] [INFO]  KGenProgMain - entered the era of 293rd generation.
2023-08-02 12:30:34 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 53 minutes 16 seconds
Variants: generated 100, build-succeeded 48, build-failed 26, syntax-invalid 21, redundant 5
Fitness: max 0.833(43), min 0.167(3), ave 0.785
Test execution time: sum 3410 ms, max 203 ms, min 59 ms
----------------------------------------------------------------

2023-08-02 12:30:34 [main] [INFO]  KGenProgMain - entered the era of 294th generation.
2023-08-02 12:30:57 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 53 minutes 39 seconds
Variants: generated 100, build-succeeded 59, build-failed 27, syntax-invalid 12, redundant 2
Fitness: max 0.833(52), min 0.167(4), ave 0.78
Test execution time: sum 3791 ms, max 79 ms, min 60 ms
----------------------------------------------------------------

2023-08-02 12:30:57 [main] [INFO]  KGenProgMain - entered the era of 295th generation.
2023-08-02 12:31:20 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 54 minutes 3 seconds
Variants: generated 100, build-succeeded 63, build-failed 28, syntax-invalid 5, redundant 4
Fitness: max 0.833(56), min 0.167(4), ave 0.78
Test execution time: sum 4236 ms, max 80 ms, min 60 ms
----------------------------------------------------------------

2023-08-02 12:31:20 [main] [INFO]  KGenProgMain - entered the era of 296th generation.
2023-08-02 12:31:44 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 54 minutes 26 seconds
Variants: generated 100, build-succeeded 61, build-failed 22, syntax-invalid 10, redundant 7
Fitness: max 0.833(54), min 0.167(5), ave 0.773
Test execution time: sum 3946 ms, max 129 ms, min 58 ms
----------------------------------------------------------------

2023-08-02 12:31:44 [main] [INFO]  KGenProgMain - entered the era of 297th generation.
2023-08-02 12:32:05 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 54 minutes 48 seconds
Variants: generated 100, build-succeeded 52, build-failed 29, syntax-invalid 14, redundant 5
Fitness: max 0.833(46), min 0.167(1), ave 0.801
Test execution time: sum 3347 ms, max 83 ms, min 58 ms
----------------------------------------------------------------

2023-08-02 12:32:05 [main] [INFO]  KGenProgMain - entered the era of 298th generation.
2023-08-02 12:32:28 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 55 minutes 11 seconds
Variants: generated 100, build-succeeded 55, build-failed 28, syntax-invalid 14, redundant 3
Fitness: max 0.833(49), min 0.167(3), ave 0.788
Test execution time: sum 3745 ms, max 135 ms, min 61 ms
----------------------------------------------------------------

2023-08-02 12:32:28 [main] [INFO]  KGenProgMain - entered the era of 299th generation.
2023-08-02 12:32:48 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 55 minutes 31 seconds
Variants: generated 100, build-succeeded 42, build-failed 34, syntax-invalid 20, redundant 4
Fitness: max 0.833(40), min 0.667(2), ave 0.825
Test execution time: sum 2686 ms, max 83 ms, min 61 ms
----------------------------------------------------------------

2023-08-02 12:32:48 [main] [INFO]  KGenProgMain - entered the era of 300th generation.
2023-08-02 12:33:11 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 55 minutes 53 seconds
Variants: generated 100, build-succeeded 55, build-failed 27, syntax-invalid 14, redundant 4
Fitness: max 0.833(50), min 0.167(2), ave 0.797
Test execution time: sum 3593 ms, max 74 ms, min 57 ms
----------------------------------------------------------------

2023-08-02 12:33:11 [main] [INFO]  KGenProgMain - entered the era of 301st generation.
2023-08-02 12:33:33 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 56 minutes 15 seconds
Variants: generated 100, build-succeeded 45, build-failed 28, syntax-invalid 20, redundant 7
Fitness: max 0.833(42), min 0.167(1), ave 0.811
Test execution time: sum 3120 ms, max 201 ms, min 59 ms
----------------------------------------------------------------

2023-08-02 12:33:33 [main] [INFO]  KGenProgMain - entered the era of 302nd generation.
2023-08-02 12:33:54 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 56 minutes 37 seconds
Variants: generated 100, build-succeeded 54, build-failed 24, syntax-invalid 19, redundant 3
Fitness: max 0.833(45), min 0.167(5), ave 0.759
Test execution time: sum 3507 ms, max 84 ms, min 58 ms
----------------------------------------------------------------

2023-08-02 12:33:54 [main] [INFO]  KGenProgMain - entered the era of 303rd generation.
2023-08-02 12:34:17 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 56 minutes 59 seconds
Variants: generated 100, build-succeeded 56, build-failed 20, syntax-invalid 22, redundant 2
Fitness: max 0.833(48), min 0.167(6), ave 0.756
Test execution time: sum 3874 ms, max 142 ms, min 59 ms
----------------------------------------------------------------

2023-08-02 12:34:17 [main] [INFO]  KGenProgMain - entered the era of 304th generation.
2023-08-02 12:34:40 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 57 minutes 22 seconds
Variants: generated 100, build-succeeded 53, build-failed 28, syntax-invalid 16, redundant 3
Fitness: max 0.833(46), min 0.167(3), ave 0.777
Test execution time: sum 3437 ms, max 92 ms, min 58 ms
----------------------------------------------------------------

2023-08-02 12:34:40 [main] [INFO]  KGenProgMain - entered the era of 305th generation.
2023-08-02 12:35:02 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 57 minutes 44 seconds
Variants: generated 100, build-succeeded 54, build-failed 29, syntax-invalid 14, redundant 3
Fitness: max 0.833(45), min 0.167(7), ave 0.741
Test execution time: sum 3555 ms, max 86 ms, min 58 ms
----------------------------------------------------------------

2023-08-02 12:35:02 [main] [INFO]  KGenProgMain - entered the era of 306th generation.
2023-08-02 12:35:27 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 58 minutes 9 seconds
Variants: generated 100, build-succeeded 55, build-failed 34, syntax-invalid 9, redundant 2
Fitness: max 0.833(53), min 0.333(1), ave 0.821
Test execution time: sum 3717 ms, max 146 ms, min 62 ms
----------------------------------------------------------------

2023-08-02 12:35:27 [main] [INFO]  KGenProgMain - entered the era of 307th generation.
2023-08-02 12:35:51 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 58 minutes 33 seconds
Variants: generated 100, build-succeeded 62, build-failed 25, syntax-invalid 11, redundant 2
Fitness: max 0.833(56), min 0.167(3), ave 0.793
Test execution time: sum 3994 ms, max 82 ms, min 59 ms
----------------------------------------------------------------

2023-08-02 12:35:51 [main] [INFO]  KGenProgMain - entered the era of 308th generation.
2023-08-02 12:36:16 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 58 minutes 58 seconds
Variants: generated 100, build-succeeded 55, build-failed 31, syntax-invalid 10, redundant 4
Fitness: max 0.833(49), min 0.167(3), ave 0.788
Test execution time: sum 3808 ms, max 143 ms, min 58 ms
----------------------------------------------------------------

2023-08-02 12:36:16 [main] [INFO]  KGenProgMain - entered the era of 309th generation.
2023-08-02 12:36:40 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 59 minutes 22 seconds
Variants: generated 100, build-succeeded 60, build-failed 27, syntax-invalid 13, redundant 0
Fitness: max 0.833(55), min 0.167(2), ave 0.794
Test execution time: sum 3920 ms, max 81 ms, min 59 ms
----------------------------------------------------------------

2023-08-02 12:36:40 [main] [INFO]  KGenProgMain - entered the era of 310th generation.
2023-08-02 12:37:06 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 59 minutes 48 seconds
Variants: generated 100, build-succeeded 65, build-failed 29, syntax-invalid 5, redundant 1
Fitness: max 0.833(54), min 0.167(8), ave 0.733
Test execution time: sum 4484 ms, max 147 ms, min 58 ms
----------------------------------------------------------------

2023-08-02 12:37:06 [main] [INFO]  KGenProgMain - entered the era of 311th generation.
2023-08-02 12:37:29 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 11 seconds
Variants: generated 100, build-succeeded 49, build-failed 36, syntax-invalid 15, redundant 0
Fitness: max 0.833(44), min 0.167(4), ave 0.776
Test execution time: sum 3177 ms, max 83 ms, min 59 ms
----------------------------------------------------------------

2023-08-02 12:37:29 [main] [INFO]  KGenProgMain - entered the era of 312th generation.
2023-08-02 12:37:52 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 34 seconds
Variants: generated 100, build-succeeded 56, build-failed 26, syntax-invalid 13, redundant 5
Fitness: max 0.833(50), min 0.167(5), ave 0.771
Test execution time: sum 3740 ms, max 75 ms, min 58 ms
----------------------------------------------------------------

2023-08-02 12:37:52 [main] [INFO]  KGenProgMain - entered the era of 313th generation.
2023-08-02 12:38:17 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 1 minutes 0 seconds
Variants: generated 100, build-succeeded 56, build-failed 32, syntax-invalid 8, redundant 4
Fitness: max 0.833(52), min 0.167(2), ave 0.804
Test execution time: sum 3770 ms, max 140 ms, min 59 ms
----------------------------------------------------------------

2023-08-02 12:38:17 [main] [INFO]  KGenProgMain - entered the era of 314th generation.
2023-08-02 12:38:40 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 1 minutes 22 seconds
Variants: generated 100, build-succeeded 50, build-failed 29, syntax-invalid 14, redundant 7
Fitness: max 0.833(48), min 0.167(1), ave 0.817
Test execution time: sum 3334 ms, max 84 ms, min 59 ms
----------------------------------------------------------------

2023-08-02 12:38:40 [main] [INFO]  KGenProgMain - entered the era of 315th generation.
2023-08-02 12:39:05 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 1 minutes 47 seconds
Variants: generated 100, build-succeeded 55, build-failed 32, syntax-invalid 10, redundant 3
Fitness: max 1(1), min 0.167(4), ave 0.776
Test execution time: sum 3853 ms, max 133 ms, min 61 ms
----------------------------------------------------------------

2023-08-02 12:39:05 [main] [INFO]  KGenProgMain - entered the era of 316th generation.
2023-08-02 12:39:29 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 2 minutes 12 seconds
Variants: generated 100, build-succeeded 59, build-failed 31, syntax-invalid 7, redundant 3
Fitness: max 0.833(53), min 0.167(5), ave 0.774
Test execution time: sum 3811 ms, max 80 ms, min 59 ms
----------------------------------------------------------------

2023-08-02 12:39:29 [main] [INFO]  KGenProgMain - entered the era of 317th generation.
2023-08-02 12:39:55 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 2 minutes 37 seconds
Variants: generated 100, build-succeeded 59, build-failed 27, syntax-invalid 10, redundant 4
Fitness: max 0.833(47), min 0.167(6), ave 0.749
Test execution time: sum 4179 ms, max 129 ms, min 59 ms
----------------------------------------------------------------

2023-08-02 12:39:55 [main] [INFO]  KGenProgMain - entered the era of 318th generation.
2023-08-02 12:40:20 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 3 minutes 3 seconds
Variants: generated 100, build-succeeded 63, build-failed 28, syntax-invalid 8, redundant 1
Fitness: max 0.833(63), min 0.833(63), ave 0.833
Test execution time: sum 4128 ms, max 85 ms, min 62 ms
----------------------------------------------------------------

2023-08-02 12:40:20 [main] [INFO]  KGenProgMain - entered the era of 319th generation.
2023-08-02 12:40:45 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 3 minutes 28 seconds
Variants: generated 100, build-succeeded 60, build-failed 25, syntax-invalid 13, redundant 2
Fitness: max 1(1), min 0.667(3), ave 0.828
Test execution time: sum 4101 ms, max 78 ms, min 62 ms
----------------------------------------------------------------

2023-08-02 12:40:45 [main] [INFO]  KGenProgMain - entered the era of 320th generation.
2023-08-02 12:41:11 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 3 minutes 53 seconds
Variants: generated 100, build-succeeded 60, build-failed 25, syntax-invalid 7, redundant 8
Fitness: max 0.833(54), min 0.167(3), ave 0.792
Test execution time: sum 4002 ms, max 134 ms, min 60 ms
----------------------------------------------------------------

2023-08-02 12:41:11 [main] [INFO]  KGenProgMain - entered the era of 321st generation.
2023-08-02 12:41:36 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 4 minutes 18 seconds
Variants: generated 100, build-succeeded 51, build-failed 33, syntax-invalid 12, redundant 4
Fitness: max 0.833(47), min 0.167(2), ave 0.797
Test execution time: sum 3457 ms, max 85 ms, min 61 ms
----------------------------------------------------------------

2023-08-02 12:41:36 [main] [INFO]  KGenProgMain - entered the era of 322nd generation.
2023-08-02 12:42:01 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 4 minutes 43 seconds
Variants: generated 100, build-succeeded 52, build-failed 31, syntax-invalid 13, redundant 4
Fitness: max 0.833(49), min 0.167(2), ave 0.804
Test execution time: sum 3680 ms, max 131 ms, min 62 ms
----------------------------------------------------------------

2023-08-02 12:42:01 [main] [INFO]  KGenProgMain - entered the era of 323rd generation.
2023-08-02 12:42:26 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 5 minutes 8 seconds
Variants: generated 100, build-succeeded 55, build-failed 33, syntax-invalid 7, redundant 5
Fitness: max 1(1), min 0.167(1), ave 0.818
Test execution time: sum 3573 ms, max 80 ms, min 59 ms
----------------------------------------------------------------

2023-08-02 12:42:26 [main] [INFO]  KGenProgMain - entered the era of 324th generation.
2023-08-02 12:42:52 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 5 minutes 34 seconds
Variants: generated 100, build-succeeded 54, build-failed 35, syntax-invalid 8, redundant 3
Fitness: max 0.833(50), min 0.167(1), ave 0.812
Test execution time: sum 3861 ms, max 135 ms, min 60 ms
----------------------------------------------------------------

2023-08-02 12:42:52 [main] [INFO]  KGenProgMain - entered the era of 325th generation.
2023-08-02 12:43:17 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 5 minutes 59 seconds
Variants: generated 100, build-succeeded 57, build-failed 30, syntax-invalid 11, redundant 2
Fitness: max 0.833(55), min 0.167(1), ave 0.819
Test execution time: sum 3788 ms, max 83 ms, min 63 ms
----------------------------------------------------------------

2023-08-02 12:43:17 [main] [INFO]  KGenProgMain - entered the era of 326th generation.
2023-08-02 12:43:43 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 6 minutes 25 seconds
Variants: generated 100, build-succeeded 60, build-failed 26, syntax-invalid 11, redundant 3
Fitness: max 1(1), min 0.167(1), ave 0.814
Test execution time: sum 4106 ms, max 75 ms, min 63 ms
----------------------------------------------------------------

2023-08-02 12:43:43 [main] [INFO]  KGenProgMain - entered the era of 327th generation.
2023-08-02 12:44:09 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 6 minutes 51 seconds
Variants: generated 100, build-succeeded 59, build-failed 27, syntax-invalid 13, redundant 1
Fitness: max 0.833(53), min 0.167(2), ave 0.794
Test execution time: sum 3936 ms, max 147 ms, min 59 ms
----------------------------------------------------------------

2023-08-02 12:44:09 [main] [INFO]  KGenProgMain - entered the era of 328th generation.
2023-08-02 12:44:32 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 7 minutes 14 seconds
Variants: generated 100, build-succeeded 47, build-failed 36, syntax-invalid 15, redundant 2
Fitness: max 0.833(43), min 0.167(3), ave 0.787
Test execution time: sum 3097 ms, max 79 ms, min 62 ms
----------------------------------------------------------------

2023-08-02 12:44:32 [main] [INFO]  KGenProgMain - entered the era of 329th generation.
2023-08-02 12:44:58 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 7 minutes 40 seconds
Variants: generated 100, build-succeeded 57, build-failed 27, syntax-invalid 12, redundant 4
Fitness: max 1(1), min 0.167(2), ave 0.795
Test execution time: sum 3988 ms, max 137 ms, min 63 ms
----------------------------------------------------------------

2023-08-02 12:44:58 [main] [INFO]  KGenProgMain - entered the era of 330th generation.
2023-08-02 12:45:23 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 8 minutes 5 seconds
Variants: generated 100, build-succeeded 62, build-failed 22, syntax-invalid 14, redundant 2
Fitness: max 0.833(54), min 0.167(4), ave 0.78
Test execution time: sum 4090 ms, max 77 ms, min 59 ms
----------------------------------------------------------------

2023-08-02 12:45:23 [main] [INFO]  KGenProgMain - entered the era of 331st generation.
2023-08-02 12:45:49 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 8 minutes 31 seconds
Variants: generated 100, build-succeeded 55, build-failed 35, syntax-invalid 8, redundant 2
Fitness: max 0.833(51), min 0.667(4), ave 0.821
Test execution time: sum 3936 ms, max 171 ms, min 63 ms
----------------------------------------------------------------

2023-08-02 12:45:49 [main] [INFO]  KGenProgMain - entered the era of 332nd generation.
2023-08-02 12:46:14 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 8 minutes 57 seconds
Variants: generated 100, build-succeeded 57, build-failed 28, syntax-invalid 10, redundant 5
Fitness: max 0.833(53), min 0.667(4), ave 0.822
Test execution time: sum 3725 ms, max 79 ms, min 62 ms
----------------------------------------------------------------

2023-08-02 12:46:14 [main] [INFO]  KGenProgMain - entered the era of 333rd generation.
2023-08-02 12:46:39 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 9 minutes 22 seconds
Variants: generated 100, build-succeeded 58, build-failed 23, syntax-invalid 15, redundant 4
Fitness: max 0.833(53), min 0.167(3), ave 0.793
Test execution time: sum 3952 ms, max 75 ms, min 59 ms
----------------------------------------------------------------

2023-08-02 12:46:39 [main] [INFO]  KGenProgMain - entered the era of 334th generation.
2023-08-02 12:47:06 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 9 minutes 48 seconds
Variants: generated 100, build-succeeded 58, build-failed 26, syntax-invalid 10, redundant 6
Fitness: max 0.833(54), min 0.667(4), ave 0.822
Test execution time: sum 3915 ms, max 133 ms, min 63 ms
----------------------------------------------------------------

2023-08-02 12:47:06 [main] [INFO]  KGenProgMain - entered the era of 335th generation.
2023-08-02 12:47:32 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 10 minutes 15 seconds
Variants: generated 100, build-succeeded 59, build-failed 31, syntax-invalid 5, redundant 5
Fitness: max 0.833(55), min 0.167(2), ave 0.805
Test execution time: sum 3893 ms, max 75 ms, min 63 ms
----------------------------------------------------------------

2023-08-02 12:47:32 [main] [INFO]  KGenProgMain - entered the era of 336th generation.
2023-08-02 12:48:00 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 10 minutes 42 seconds
Variants: generated 100, build-succeeded 61, build-failed 24, syntax-invalid 8, redundant 7
Fitness: max 0.833(58), min 0.167(2), ave 0.809
Test execution time: sum 4193 ms, max 153 ms, min 62 ms
----------------------------------------------------------------

2023-08-02 12:48:00 [main] [INFO]  KGenProgMain - entered the era of 337th generation.
2023-08-02 12:48:27 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 11 minutes 10 seconds
Variants: generated 100, build-succeeded 67, build-failed 23, syntax-invalid 6, redundant 4
Fitness: max 1(1), min 0.167(1), ave 0.823
Test execution time: sum 4336 ms, max 78 ms, min 59 ms
----------------------------------------------------------------

2023-08-02 12:48:27 [main] [INFO]  KGenProgMain - entered the era of 338th generation.
2023-08-02 12:48:56 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 11 minutes 38 seconds
Variants: generated 100, build-succeeded 66, build-failed 22, syntax-invalid 8, redundant 4
Fitness: max 0.833(62), min 0.333(1), ave 0.818
Test execution time: sum 4666 ms, max 143 ms, min 62 ms
----------------------------------------------------------------

2023-08-02 12:48:56 [main] [INFO]  KGenProgMain - entered the era of 339th generation.
2023-08-02 12:49:23 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 12 minutes 5 seconds
Variants: generated 100, build-succeeded 66, build-failed 24, syntax-invalid 6, redundant 4
Fitness: max 1(2), min 0.167(1), ave 0.811
Test execution time: sum 4366 ms, max 82 ms, min 59 ms
----------------------------------------------------------------

2023-08-02 12:49:23 [main] [INFO]  KGenProgMain - entered the era of 340th generation.
2023-08-02 12:49:50 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 12 minutes 33 seconds
Variants: generated 100, build-succeeded 56, build-failed 32, syntax-invalid 8, redundant 4
Fitness: max 0.833(53), min 0.667(3), ave 0.824
Test execution time: sum 4096 ms, max 137 ms, min 63 ms
----------------------------------------------------------------

2023-08-02 12:49:50 [main] [INFO]  KGenProgMain - entered the era of 341st generation.
2023-08-02 12:50:17 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 12 minutes 59 seconds
Variants: generated 100, build-succeeded 51, build-failed 41, syntax-invalid 3, redundant 5
Fitness: max 0.833(46), min 0.167(2), ave 0.797
Test execution time: sum 3400 ms, max 84 ms, min 62 ms
----------------------------------------------------------------

2023-08-02 12:50:17 [main] [INFO]  KGenProgMain - entered the era of 342nd generation.
2023-08-02 12:50:45 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 13 minutes 27 seconds
Variants: generated 100, build-succeeded 60, build-failed 29, syntax-invalid 8, redundant 3
Fitness: max 0.833(55), min 0.167(2), ave 0.797
Test execution time: sum 4273 ms, max 144 ms, min 60 ms
----------------------------------------------------------------

2023-08-02 12:50:45 [main] [INFO]  KGenProgMain - entered the era of 343rd generation.
2023-08-02 12:51:12 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 13 minutes 54 seconds
Variants: generated 100, build-succeeded 61, build-failed 28, syntax-invalid 5, redundant 6
Fitness: max 0.833(58), min 0.167(1), ave 0.814
Test execution time: sum 3947 ms, max 80 ms, min 59 ms
----------------------------------------------------------------

2023-08-02 12:51:12 [main] [INFO]  KGenProgMain - entered the era of 344th generation.
2023-08-02 12:51:40 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 14 minutes 22 seconds
Variants: generated 100, build-succeeded 62, build-failed 28, syntax-invalid 6, redundant 4
Fitness: max 0.833(55), min 0.167(3), ave 0.788
Test execution time: sum 4516 ms, max 214 ms, min 59 ms
----------------------------------------------------------------

2023-08-02 12:51:40 [main] [INFO]  KGenProgMain - entered the era of 345th generation.
2023-08-02 12:52:08 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 14 minutes 51 seconds
Variants: generated 100, build-succeeded 65, build-failed 28, syntax-invalid 4, redundant 3
Fitness: max 1(1), min 0.667(1), ave 0.833
Test execution time: sum 4363 ms, max 83 ms, min 64 ms
----------------------------------------------------------------

2023-08-02 12:52:08 [main] [INFO]  KGenProgMain - entered the era of 346th generation.
2023-08-02 12:52:37 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 15 minutes 19 seconds
Variants: generated 100, build-succeeded 61, build-failed 30, syntax-invalid 6, redundant 3
Fitness: max 0.833(60), min 0.167(1), ave 0.822
Test execution time: sum 4391 ms, max 134 ms, min 64 ms
----------------------------------------------------------------

2023-08-02 12:52:37 [main] [INFO]  KGenProgMain - entered the era of 347th generation.
2023-08-02 12:53:04 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 15 minutes 46 seconds
Variants: generated 100, build-succeeded 60, build-failed 27, syntax-invalid 10, redundant 3
Fitness: max 0.833(57), min 0.667(3), ave 0.825
Test execution time: sum 3952 ms, max 79 ms, min 62 ms
----------------------------------------------------------------

2023-08-02 12:53:04 [main] [INFO]  KGenProgMain - entered the era of 348th generation.
2023-08-02 12:53:32 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 16 minutes 15 seconds
Variants: generated 100, build-succeeded 62, build-failed 27, syntax-invalid 4, redundant 7
Fitness: max 0.833(60), min 0.667(2), ave 0.828
Test execution time: sum 4458 ms, max 221 ms, min 63 ms
----------------------------------------------------------------

2023-08-02 12:53:32 [main] [INFO]  KGenProgMain - entered the era of 349th generation.
2023-08-02 12:54:00 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 16 minutes 42 seconds
Variants: generated 100, build-succeeded 66, build-failed 21, syntax-invalid 9, redundant 4
Fitness: max 0.833(62), min 0.167(1), ave 0.816
Test execution time: sum 4491 ms, max 87 ms, min 61 ms
----------------------------------------------------------------

2023-08-02 12:54:00 [main] [INFO]  KGenProgMain - entered the era of 350th generation.
2023-08-02 12:54:26 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 17 minutes 9 seconds
Variants: generated 100, build-succeeded 51, build-failed 29, syntax-invalid 13, redundant 7
Fitness: max 0.833(46), min 0.167(1), ave 0.807
Test execution time: sum 3581 ms, max 81 ms, min 61 ms
----------------------------------------------------------------

2023-08-02 12:54:26 [main] [INFO]  KGenProgMain - entered the era of 351st generation.
2023-08-02 12:54:53 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 17 minutes 36 seconds
Variants: generated 100, build-succeeded 55, build-failed 29, syntax-invalid 10, redundant 6
Fitness: max 0.833(52), min 0.167(3), ave 0.797
Test execution time: sum 3692 ms, max 126 ms, min 59 ms
----------------------------------------------------------------

2023-08-02 12:54:53 [main] [INFO]  KGenProgMain - entered the era of 352nd generation.
2023-08-02 12:55:19 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 18 minutes 1 seconds
Variants: generated 100, build-succeeded 50, build-failed 31, syntax-invalid 16, redundant 3
Fitness: max 0.833(48), min 0.667(2), ave 0.827
Test execution time: sum 3286 ms, max 76 ms, min 62 ms
----------------------------------------------------------------

2023-08-02 12:55:19 [main] [INFO]  KGenProgMain - entered the era of 353rd generation.
2023-08-02 12:55:47 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 18 minutes 29 seconds
Variants: generated 100, build-succeeded 59, build-failed 25, syntax-invalid 13, redundant 3
Fitness: max 0.833(52), min 0.167(2), ave 0.797
Test execution time: sum 4061 ms, max 133 ms, min 61 ms
----------------------------------------------------------------

2023-08-02 12:55:47 [main] [INFO]  KGenProgMain - entered the era of 354th generation.
2023-08-02 12:56:15 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 18 minutes 57 seconds
Variants: generated 100, build-succeeded 60, build-failed 28, syntax-invalid 11, redundant 1
Fitness: max 0.833(57), min 0.167(2), ave 0.808
Test execution time: sum 3981 ms, max 83 ms, min 59 ms
----------------------------------------------------------------

2023-08-02 12:56:15 [main] [INFO]  KGenProgMain - entered the era of 355th generation.
2023-08-02 12:56:43 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 19 minutes 25 seconds
Variants: generated 100, build-succeeded 50, build-failed 29, syntax-invalid 13, redundant 8
Fitness: max 0.833(48), min 0.167(1), ave 0.817
Test execution time: sum 3696 ms, max 130 ms, min 60 ms
----------------------------------------------------------------

2023-08-02 12:56:43 [main] [INFO]  KGenProgMain - entered the era of 356th generation.
2023-08-02 12:57:11 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 19 minutes 53 seconds
Variants: generated 100, build-succeeded 62, build-failed 29, syntax-invalid 7, redundant 2
Fitness: max 0.833(58), min 0.167(3), ave 0.798
Test execution time: sum 4005 ms, max 74 ms, min 59 ms
----------------------------------------------------------------

2023-08-02 12:57:11 [main] [INFO]  KGenProgMain - entered the era of 357th generation.
2023-08-02 12:57:39 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 20 minutes 21 seconds
Variants: generated 100, build-succeeded 59, build-failed 27, syntax-invalid 10, redundant 4
Fitness: max 1(1), min 0.167(2), ave 0.805
Test execution time: sum 4343 ms, max 228 ms, min 61 ms
----------------------------------------------------------------

2023-08-02 12:57:39 [main] [INFO]  KGenProgMain - entered the era of 358th generation.
2023-08-02 12:58:07 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 20 minutes 49 seconds
Variants: generated 100, build-succeeded 64, build-failed 22, syntax-invalid 11, redundant 3
Fitness: max 0.833(60), min 0.167(2), ave 0.807
Test execution time: sum 4379 ms, max 90 ms, min 61 ms
----------------------------------------------------------------

2023-08-02 12:58:07 [main] [INFO]  KGenProgMain - entered the era of 359th generation.
2023-08-02 12:58:34 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 21 minutes 17 seconds
Variants: generated 100, build-succeeded 53, build-failed 27, syntax-invalid 14, redundant 6
Fitness: max 0.833(49), min 0.167(1), ave 0.808
Test execution time: sum 3779 ms, max 82 ms, min 63 ms
----------------------------------------------------------------

2023-08-02 12:58:34 [main] [INFO]  KGenProgMain - entered the era of 360th generation.
2023-08-02 12:59:03 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 21 minutes 45 seconds
Variants: generated 100, build-succeeded 60, build-failed 26, syntax-invalid 11, redundant 3
Fitness: max 0.833(58), min 0.167(1), ave 0.819
Test execution time: sum 4100 ms, max 141 ms, min 61 ms
----------------------------------------------------------------

2023-08-02 12:59:03 [main] [INFO]  KGenProgMain - entered the era of 361st generation.
2023-08-02 12:59:31 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 22 minutes 14 seconds
Variants: generated 100, build-succeeded 68, build-failed 24, syntax-invalid 6, redundant 2
Fitness: max 1(1), min 0.167(1), ave 0.824
Test execution time: sum 4621 ms, max 83 ms, min 60 ms
----------------------------------------------------------------

2023-08-02 12:59:31 [main] [INFO]  KGenProgMain - entered the era of 362nd generation.
2023-08-02 13:00:00 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 22 minutes 43 seconds
Variants: generated 100, build-succeeded 58, build-failed 26, syntax-invalid 12, redundant 4
Fitness: max 0.833(53), min 0.167(2), ave 0.79
Test execution time: sum 4073 ms, max 154 ms, min 61 ms
----------------------------------------------------------------

2023-08-02 13:00:00 [main] [INFO]  KGenProgMain - entered the era of 363rd generation.
2023-08-02 13:00:28 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 23 minutes 10 seconds
Variants: generated 100, build-succeeded 61, build-failed 29, syntax-invalid 6, redundant 4
Fitness: max 0.833(58), min 0.667(3), ave 0.825
Test execution time: sum 4101 ms, max 83 ms, min 63 ms
----------------------------------------------------------------

2023-08-02 13:00:28 [main] [INFO]  KGenProgMain - entered the era of 364th generation.
2023-08-02 13:00:57 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 23 minutes 39 seconds
Variants: generated 100, build-succeeded 62, build-failed 22, syntax-invalid 9, redundant 7
Fitness: max 0.833(56), min 0.167(2), ave 0.798
Test execution time: sum 4336 ms, max 127 ms, min 60 ms
----------------------------------------------------------------

2023-08-02 13:00:57 [main] [INFO]  KGenProgMain - entered the era of 365th generation.
2023-08-02 13:01:25 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 24 minutes 8 seconds
Variants: generated 100, build-succeeded 62, build-failed 28, syntax-invalid 8, redundant 2
Fitness: max 1(1), min 0.667(2), ave 0.831
Test execution time: sum 4325 ms, max 109 ms, min 64 ms
----------------------------------------------------------------

2023-08-02 13:01:25 [main] [INFO]  KGenProgMain - entered the era of 366th generation.
2023-08-02 13:01:54 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 24 minutes 37 seconds
Variants: generated 100, build-succeeded 59, build-failed 33, syntax-invalid 6, redundant 2
Fitness: max 0.833(56), min 0.667(3), ave 0.825
Test execution time: sum 4264 ms, max 132 ms, min 63 ms
----------------------------------------------------------------

2023-08-02 13:01:54 [main] [INFO]  KGenProgMain - entered the era of 367th generation.
2023-08-02 13:02:23 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 25 minutes 5 seconds
Variants: generated 100, build-succeeded 57, build-failed 32, syntax-invalid 6, redundant 5
Fitness: max 0.833(54), min 0.5(1), ave 0.822
Test execution time: sum 3896 ms, max 84 ms, min 64 ms
----------------------------------------------------------------

2023-08-02 13:02:23 [main] [INFO]  KGenProgMain - entered the era of 368th generation.
2023-08-02 13:02:52 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 25 minutes 34 seconds
Variants: generated 100, build-succeeded 56, build-failed 33, syntax-invalid 8, redundant 3
Fitness: max 0.833(53), min 0.667(3), ave 0.824
Test execution time: sum 4104 ms, max 140 ms, min 63 ms
----------------------------------------------------------------

2023-08-02 13:02:52 [main] [INFO]  KGenProgMain - entered the era of 369th generation.
2023-08-02 13:03:21 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 26 minutes 3 seconds
Variants: generated 100, build-succeeded 61, build-failed 25, syntax-invalid 8, redundant 6
Fitness: max 1(2), min 0.167(1), ave 0.822
Test execution time: sum 4089 ms, max 81 ms, min 59 ms
----------------------------------------------------------------

2023-08-02 13:03:21 [main] [INFO]  KGenProgMain - entered the era of 370th generation.
2023-08-02 13:03:51 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 26 minutes 34 seconds
Variants: generated 100, build-succeeded 66, build-failed 31, syntax-invalid 2, redundant 1
Fitness: max 0.833(62), min 0.167(2), ave 0.808
Test execution time: sum 4695 ms, max 130 ms, min 60 ms
----------------------------------------------------------------

2023-08-02 13:03:51 [main] [INFO]  KGenProgMain - entered the era of 371st generation.
2023-08-02 13:04:19 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 27 minutes 2 seconds
Variants: generated 100, build-succeeded 58, build-failed 22, syntax-invalid 11, redundant 9
Fitness: max 0.833(56), min 0.167(1), ave 0.816
Test execution time: sum 3896 ms, max 80 ms, min 64 ms
----------------------------------------------------------------

2023-08-02 13:04:19 [main] [INFO]  KGenProgMain - entered the era of 372nd generation.
2023-08-02 13:04:50 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 27 minutes 32 seconds
Variants: generated 100, build-succeeded 64, build-failed 26, syntax-invalid 5, redundant 5
Fitness: max 0.833(62), min 0.167(1), ave 0.82
Test execution time: sum 4557 ms, max 134 ms, min 64 ms
----------------------------------------------------------------

2023-08-02 13:04:50 [main] [INFO]  KGenProgMain - entered the era of 373rd generation.
2023-08-02 13:04:56 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 27 minutes 39 seconds
Variants: generated 23, build-succeeded 11, build-failed 8, syntax-invalid 1, redundant 3
Fitness: max 1(1), min 0.5(1), ave 0.803
Test execution time: sum 731 ms, max 83 ms, min 64 ms
----------------------------------------------------------------

2023-08-02 13:04:56 [main] [INFO]  KGenProgMain - GA stopped
2023-08-02 13:05:00 [main] [INFO]  PatchLogExporter - patch (v53)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 13:05:00 [main] [INFO]  PatchLogExporter - patch (v53)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 13:05:00 [main] [INFO]  PatchLogExporter - patch (v53)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 13:05:00 [main] [INFO]  PatchLogExporter - patch (v53)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -111,10 +111,7 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
-        if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
-            return result;
-        }
+        if (Math.abs(yMin) <= functionValueAccuracy)
 
         // reduce interval if min and initial bracket the root
         if (yInitial * yMin < 0) {
@@ -124,7 +121,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
2023-08-02 13:05:00 [main] [INFO]  PatchLogExporter - patch (v812)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 13:05:00 [main] [INFO]  PatchLogExporter - patch (v812)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 13:05:00 [main] [INFO]  PatchLogExporter - patch (v812)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 13:05:00 [main] [INFO]  PatchLogExporter - patch (v812)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -111,7 +111,7 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
-        if (Math.abs(yMin) <= functionValueAccuracy) {
+        if (f.value(max) == 0.0) {
             setResult(yMin, 0);
             return result;
         }
@@ -124,7 +124,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -245,7 +244,7 @@
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
-                return result;
+                oldDelta = x2 - x1;
             }
             double dx = x2 - x1;
             double tolerance =
2023-08-02 13:05:00 [main] [INFO]  PatchLogExporter - patch (v904)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -77,6 +77,7 @@
         }
         this.f = f;
         this.defaultFunctionValueAccuracy = 1.0e-15;
+		iterationCount += this.iterationCount;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
2023-08-02 13:05:00 [main] [INFO]  PatchLogExporter - patch (v904)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 13:05:00 [main] [INFO]  PatchLogExporter - patch (v904)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 13:05:00 [main] [INFO]  PatchLogExporter - patch (v904)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -63,7 +63,6 @@
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
-        this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
         this.iterationCount = 0;
     }
2023-08-02 13:05:00 [main] [INFO]  PatchLogExporter - patch (v904)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 13:05:00 [main] [INFO]  PatchLogExporter - patch (v904)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -111,10 +111,8 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
-        if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
-            return result;
-        }
+		int iterationCount = 0;
+        if (Math.abs(yMin) <= functionValueAccuracy)
 
         // reduce interval if min and initial bracket the root
         if (yInitial * yMin < 0) {
@@ -124,7 +122,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
2023-08-02 13:05:00 [main] [INFO]  PatchLogExporter - patch (v1116)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 13:05:00 [main] [INFO]  PatchLogExporter - patch (v1116)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 13:05:00 [main] [INFO]  PatchLogExporter - patch (v1116)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -63,7 +63,6 @@
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
-        this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
         this.iterationCount = 0;
     }
2023-08-02 13:05:00 [main] [INFO]  PatchLogExporter - patch (v1116)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 13:05:00 [main] [INFO]  PatchLogExporter - patch (v1116)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -111,8 +111,8 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
-        if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
+		int iterationCount = 0;
+        if (f.value(max) == 0.0) {
             return result;
         }
 
@@ -124,7 +124,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
2023-08-02 13:05:00 [main] [INFO]  PatchLogExporter - patch (v1322)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 13:05:00 [main] [INFO]  PatchLogExporter - patch (v1322)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 13:05:00 [main] [INFO]  PatchLogExporter - patch (v1322)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -63,7 +63,6 @@
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
-        this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
         this.iterationCount = 0;
     }
2023-08-02 13:05:00 [main] [INFO]  PatchLogExporter - patch (v1322)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 13:05:00 [main] [INFO]  PatchLogExporter - patch (v1322)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -111,10 +111,7 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
-        if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
-            return result;
-        }
+        if (Math.abs(yMin) <= functionValueAccuracy)
 
         // reduce interval if min and initial bracket the root
         if (yInitial * yMin < 0) {
@@ -124,7 +121,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -236,7 +232,8 @@
                 x0 = x1;
                 x1 = x2;
                 x2 = x0;
-                y0 = y1;
+                this.defaultFunctionValueAccuracy = 1.0e-15;
+				y0 = y1;
                 y1 = y2;
                 y2 = y0;
             }
@@ -245,7 +242,8 @@
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
-                return result;
+                x0 = x1;
+				return result;
             }
             double dx = x2 - x1;
             double tolerance =
2023-08-02 13:05:00 [main] [INFO]  PatchLogExporter - patch (v1328)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 13:05:00 [main] [INFO]  PatchLogExporter - patch (v1328)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 13:05:00 [main] [INFO]  PatchLogExporter - patch (v1328)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 13:05:00 [main] [INFO]  PatchLogExporter - patch (v1328)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -111,8 +111,7 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
-        if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
+        if (f.value(max) == 0.0) {
             return result;
         }
 
@@ -124,7 +123,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -236,7 +234,8 @@
                 x0 = x1;
                 x1 = x2;
                 x2 = x0;
-                y0 = y1;
+                this.defaultFunctionValueAccuracy = 1.0e-15;
+				y0 = y1;
                 y1 = y2;
                 y2 = y0;
             }
2023-08-02 13:05:00 [main] [INFO]  PatchLogExporter - patch (v1411)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 13:05:00 [main] [INFO]  PatchLogExporter - patch (v1411)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 13:05:00 [main] [INFO]  PatchLogExporter - patch (v1411)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 13:05:00 [main] [INFO]  PatchLogExporter - patch (v1411)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -111,7 +111,7 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
-        if (Math.abs(yMin) <= functionValueAccuracy) {
+        if (f.value(max) == 0.0) {
             setResult(yMin, 0);
             return result;
         }
@@ -124,7 +124,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,7 +180,6 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -236,7 +234,8 @@
                 x0 = x1;
                 x1 = x2;
                 x2 = x0;
-                y0 = y1;
+                this.defaultFunctionValueAccuracy = 1.0e-15;
+				y0 = y1;
                 y1 = y2;
                 y2 = y0;
             }
@@ -245,7 +244,6 @@
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
-                return result;
             }
             double dx = x2 - x1;
             double tolerance =
2023-08-02 13:05:00 [main] [INFO]  PatchLogExporter - patch (v1535)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 13:05:00 [main] [INFO]  PatchLogExporter - patch (v1535)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 13:05:00 [main] [INFO]  PatchLogExporter - patch (v1535)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 13:05:00 [main] [INFO]  PatchLogExporter - patch (v1535)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -111,10 +111,7 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
-        if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
-            return result;
-        }
+        if (Math.abs(yMin) <= functionValueAccuracy)
 
         // reduce interval if min and initial bracket the root
         if (yInitial * yMin < 0) {
@@ -124,7 +121,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,7 +177,6 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -236,16 +231,12 @@
                 x0 = x1;
                 x1 = x2;
                 x2 = x0;
-                y0 = y1;
+                this.defaultFunctionValueAccuracy = 1.0e-15;
+				y0 = y1;
                 y1 = y2;
                 y2 = y0;
             }
             if (Math.abs(y1) <= functionValueAccuracy) {
-                // Avoid division by very small values. Assume
-                // the iteration has converged (the problem may
-                // still be ill conditioned)
-                setResult(x1, i);
-                return result;
             }
             double dx = x2 - x1;
             double tolerance =
2023-08-02 13:05:00 [main] [INFO]  PatchLogExporter - patch (v1805)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 13:05:00 [main] [INFO]  PatchLogExporter - patch (v1805)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 13:05:00 [main] [INFO]  PatchLogExporter - patch (v1805)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 13:05:00 [main] [INFO]  PatchLogExporter - patch (v1805)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -111,10 +111,8 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
-        if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
-            return result;
-        }
+		int iterationCount = 0;
+        if (Math.abs(yMin) <= functionValueAccuracy)
 
         // reduce interval if min and initial bracket the root
         if (yInitial * yMin < 0) {
@@ -124,7 +122,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,8 +178,8 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
                 ret = max;
+				setResult(yMin, 0);
             } else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
@@ -241,11 +238,6 @@
                 y2 = y0;
             }
             if (Math.abs(y1) <= functionValueAccuracy) {
-                // Avoid division by very small values. Assume
-                // the iteration has converged (the problem may
-                // still be ill conditioned)
-                setResult(x1, i);
-                return result;
             }
             double dx = x2 - x1;
             double tolerance =
2023-08-02 13:05:00 [main] [INFO]  PatchLogExporter - patch (v2001)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 13:05:00 [main] [INFO]  PatchLogExporter - patch (v2001)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 13:05:00 [main] [INFO]  PatchLogExporter - patch (v2001)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -63,7 +63,6 @@
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
-        this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
         this.iterationCount = 0;
     }
2023-08-02 13:05:00 [main] [INFO]  PatchLogExporter - patch (v2001)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 13:05:00 [main] [INFO]  PatchLogExporter - patch (v2001)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -111,7 +111,8 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
-        if (Math.abs(yMin) <= functionValueAccuracy) {
+		int iterationCount = 0;
+        if (f.value(max) == 0.0) {
             setResult(yMin, 0);
             return result;
         }
@@ -124,7 +125,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,7 +181,7 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
+                int i = 1;
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -245,7 +245,8 @@
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
-                return result;
+                x0 = x1;
+				return result;
             }
             double dx = x2 - x1;
             double tolerance =
2023-08-02 13:05:00 [main] [INFO]  PatchLogExporter - patch (v2229)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -77,7 +77,6 @@
         }
         this.f = f;
         this.defaultFunctionValueAccuracy = 1.0e-15;
-        this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
     /**
2023-08-02 13:05:00 [main] [INFO]  PatchLogExporter - patch (v2229)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 13:05:00 [main] [INFO]  PatchLogExporter - patch (v2229)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 13:05:00 [main] [INFO]  PatchLogExporter - patch (v2229)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -60,9 +60,7 @@
     protected ConvergingAlgorithmImpl(final int defaultMaximalIterationCount,
                                       final double defaultAbsoluteAccuracy) {
         this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
-        this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
-        this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
         this.iterationCount = 0;
2023-08-02 13:05:00 [main] [INFO]  PatchLogExporter - patch (v2229)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 13:05:00 [main] [INFO]  PatchLogExporter - patch (v2229)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -111,10 +111,7 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
-        if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
-            return result;
-        }
+        if (Math.abs(yMin) <= functionValueAccuracy)
 
         // reduce interval if min and initial bracket the root
         if (yInitial * yMin < 0) {
@@ -124,7 +121,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -236,7 +232,8 @@
                 x0 = x1;
                 x1 = x2;
                 x2 = x0;
-                y0 = y1;
+                this.defaultFunctionValueAccuracy = 1.0e-15;
+				y0 = y1;
                 y1 = y2;
                 y2 = y0;
             }
2023-08-02 13:05:00 [main] [INFO]  PatchLogExporter - patch (v2302)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -162,7 +162,6 @@
      * Convenience function for implementations.
      */
     protected final void clearResult() {
-        this.iterationCount = 0;
         this.resultComputed = false;
     }
 
2023-08-02 13:05:00 [main] [INFO]  PatchLogExporter - patch (v2302)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 13:05:00 [main] [INFO]  PatchLogExporter - patch (v2302)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 13:05:00 [main] [INFO]  PatchLogExporter - patch (v2302)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -60,9 +60,7 @@
     protected ConvergingAlgorithmImpl(final int defaultMaximalIterationCount,
                                       final double defaultAbsoluteAccuracy) {
         this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
-        this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
-        this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
         this.iterationCount = 0;
2023-08-02 13:05:00 [main] [INFO]  PatchLogExporter - patch (v2302)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 13:05:00 [main] [INFO]  PatchLogExporter - patch (v2302)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -111,7 +111,7 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
-        if (Math.abs(yMin) <= functionValueAccuracy) {
+        if (f.value(max) == 0.0) {
             setResult(yMin, 0);
             return result;
         }
@@ -123,10 +123,8 @@
 
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
-        if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
-            return result;
-        }
+        if (Math.abs(yMax) <= functionValueAccuracy)
+			return result;
 
         // reduce interval if initial and max bracket the root
         if (yInitial * yMax < 0) {
@@ -181,7 +179,7 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
+                int i = 1;
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -236,7 +234,8 @@
                 x0 = x1;
                 x1 = x2;
                 x2 = x0;
-                y0 = y1;
+                this.defaultFunctionValueAccuracy = 1.0e-15;
+				y0 = y1;
                 y1 = y2;
                 y2 = y0;
             }
2023-08-02 13:05:00 [main] [INFO]  PatchLogExporter - patch (v2412)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -77,6 +77,7 @@
         }
         this.f = f;
         this.defaultFunctionValueAccuracy = 1.0e-15;
+		iterationCount += this.iterationCount;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
@@ -162,7 +163,6 @@
      * Convenience function for implementations.
      */
     protected final void clearResult() {
-        this.iterationCount = 0;
         this.resultComputed = false;
     }
 
2023-08-02 13:05:00 [main] [INFO]  PatchLogExporter - patch (v2412)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 13:05:00 [main] [INFO]  PatchLogExporter - patch (v2412)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 13:05:00 [main] [INFO]  PatchLogExporter - patch (v2412)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -60,10 +60,8 @@
     protected ConvergingAlgorithmImpl(final int defaultMaximalIterationCount,
                                       final double defaultAbsoluteAccuracy) {
         this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
-        this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
-        this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
         this.iterationCount = 0;
     }
2023-08-02 13:05:00 [main] [INFO]  PatchLogExporter - patch (v2412)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 13:05:00 [main] [INFO]  PatchLogExporter - patch (v2412)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -99,7 +99,6 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
@@ -111,10 +110,7 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
-        if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
-            return result;
-        }
+        if (Math.abs(yMin) <= functionValueAccuracy)
 
         // reduce interval if min and initial bracket the root
         if (yInitial * yMin < 0) {
@@ -124,7 +120,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -236,7 +231,8 @@
                 x0 = x1;
                 x1 = x2;
                 x2 = x0;
-                y0 = y1;
+                this.defaultFunctionValueAccuracy = 1.0e-15;
+				y0 = y1;
                 y1 = y2;
                 y2 = y0;
             }
2023-08-02 13:05:00 [main] [INFO]  PatchLogExporter - patch (v4950)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -77,6 +77,7 @@
         }
         this.f = f;
         this.defaultFunctionValueAccuracy = 1.0e-15;
+		iterationCount += this.iterationCount;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
2023-08-02 13:05:00 [main] [INFO]  PatchLogExporter - patch (v4950)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 13:05:00 [main] [INFO]  PatchLogExporter - patch (v4950)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 13:05:00 [main] [INFO]  PatchLogExporter - patch (v4950)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 13:05:00 [main] [INFO]  PatchLogExporter - patch (v4950)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -99,7 +99,6 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
@@ -112,7 +111,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +122,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -183,6 +180,7 @@
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
                 setResult(max, 0);
                 ret = max;
+				return result;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
@@ -235,8 +233,11 @@
                 // use the bracket point if is better than last approximation
                 x0 = x1;
                 x1 = x2;
+				this.resultComputed = true;
                 x2 = x0;
-                y0 = y1;
+                this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				y0 = y1;
                 y1 = y2;
                 y2 = y0;
             }
2023-08-02 13:05:00 [main] [INFO]  PatchLogExporter - patch (v6246)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -77,6 +77,8 @@
         }
         this.f = f;
         this.defaultFunctionValueAccuracy = 1.0e-15;
+		iterationCount += this.iterationCount;
+		iterationCount += this.iterationCount;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
2023-08-02 13:05:00 [main] [INFO]  PatchLogExporter - patch (v6246)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 13:05:00 [main] [INFO]  PatchLogExporter - patch (v6246)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 13:05:00 [main] [INFO]  PatchLogExporter - patch (v6246)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 13:05:00 [main] [INFO]  PatchLogExporter - patch (v6246)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -99,7 +99,6 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
@@ -112,7 +111,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +122,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -236,7 +233,11 @@
                 x0 = x1;
                 x1 = x2;
                 x2 = x0;
-                y0 = y1;
+                this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				y0 = y1;
                 y1 = y2;
                 y2 = y0;
             }
2023-08-02 13:05:00 [main] [INFO]  PatchLogExporter - patch (v6535)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -77,6 +77,7 @@
         }
         this.f = f;
         this.defaultFunctionValueAccuracy = 1.0e-15;
+		iterationCount += this.iterationCount;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
2023-08-02 13:05:00 [main] [INFO]  PatchLogExporter - patch (v6535)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 13:05:00 [main] [INFO]  PatchLogExporter - patch (v6535)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 13:05:00 [main] [INFO]  PatchLogExporter - patch (v6535)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 13:05:00 [main] [INFO]  PatchLogExporter - patch (v6535)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -99,7 +99,6 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
@@ -112,7 +111,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +122,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -227,7 +224,8 @@
     throws MaxIterationsExceededException, FunctionEvaluationException {
 
         double delta = x1 - x0;
-        double oldDelta = delta;
+        double oldx = Double.POSITIVE_INFINITY;
+		double oldDelta = delta;
 
         int i = 0;
         while (i < maximalIterationCount) {
@@ -236,7 +234,11 @@
                 x0 = x1;
                 x1 = x2;
                 x2 = x0;
-                y0 = y1;
+                this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				y0 = y1;
                 y1 = y2;
                 y2 = y0;
             }
@@ -245,7 +247,8 @@
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
-                return result;
+                final double q = (x2 - x1) / (x1 - x0);
+				return result;
             }
             double dx = x2 - x1;
             double tolerance =
2023-08-02 13:05:00 [main] [INFO]  PatchLogExporter - patch (v6804)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -77,6 +77,8 @@
         }
         this.f = f;
         this.defaultFunctionValueAccuracy = 1.0e-15;
+		iterationCount += this.iterationCount;
+		iterationCount += this.iterationCount;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
2023-08-02 13:05:00 [main] [INFO]  PatchLogExporter - patch (v6804)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 13:05:00 [main] [INFO]  PatchLogExporter - patch (v6804)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 13:05:00 [main] [INFO]  PatchLogExporter - patch (v6804)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 13:05:00 [main] [INFO]  PatchLogExporter - patch (v6804)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -99,7 +99,6 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
@@ -112,7 +111,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +122,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -165,7 +162,6 @@
         throws MaxIterationsExceededException,
         FunctionEvaluationException {
 
-        clearResult();
         verifyInterval(min, max);
 
         double ret = Double.NaN;
@@ -181,8 +177,7 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
-                ret = max;
+                return result;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
@@ -235,8 +230,12 @@
                 // use the bracket point if is better than last approximation
                 x0 = x1;
                 x1 = x2;
+				this.resultComputed = true;
                 x2 = x0;
-                y0 = y1;
+                this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				y0 = y1;
                 y1 = y2;
                 y2 = y0;
             }
2023-08-02 13:05:00 [main] [INFO]  PatchLogExporter - patch (v7416)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -77,6 +77,9 @@
         }
         this.f = f;
         this.defaultFunctionValueAccuracy = 1.0e-15;
+		iterationCount += this.iterationCount;
+		iterationCount += this.iterationCount;
+		iterationCount += this.iterationCount;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
2023-08-02 13:05:00 [main] [INFO]  PatchLogExporter - patch (v7416)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 13:05:00 [main] [INFO]  PatchLogExporter - patch (v7416)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 13:05:00 [main] [INFO]  PatchLogExporter - patch (v7416)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 13:05:00 [main] [INFO]  PatchLogExporter - patch (v7416)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -99,7 +99,6 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
@@ -112,7 +111,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +122,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -165,7 +162,6 @@
         throws MaxIterationsExceededException,
         FunctionEvaluationException {
 
-        clearResult();
         verifyInterval(min, max);
 
         double ret = Double.NaN;
@@ -236,7 +232,10 @@
                 x0 = x1;
                 x1 = x2;
                 x2 = x0;
-                y0 = y1;
+                this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				y0 = y1;
                 y1 = y2;
                 y2 = y0;
             }
2023-08-02 13:05:00 [main] [INFO]  PatchLogExporter - patch (v7842)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -77,6 +77,10 @@
         }
         this.f = f;
         this.defaultFunctionValueAccuracy = 1.0e-15;
+		iterationCount += this.iterationCount;
+		iterationCount += this.iterationCount;
+		iterationCount += this.iterationCount;
+		iterationCount += this.iterationCount;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
2023-08-02 13:05:00 [main] [INFO]  PatchLogExporter - patch (v7842)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 13:05:00 [main] [INFO]  PatchLogExporter - patch (v7842)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 13:05:00 [main] [INFO]  PatchLogExporter - patch (v7842)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -65,7 +65,6 @@
         this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
-        this.iterationCount = 0;
     }
 
     /** {@inheritDoc} */
2023-08-02 13:05:00 [main] [INFO]  PatchLogExporter - patch (v7842)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 13:05:00 [main] [INFO]  PatchLogExporter - patch (v7842)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -99,20 +99,19 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
-            return result;
+            verifySequence(min, initial, max);
+			return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +123,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -235,8 +233,12 @@
                 // use the bracket point if is better than last approximation
                 x0 = x1;
                 x1 = x2;
+				this.resultComputed = true;
+				this.resultComputed = true;
                 x2 = x0;
-                y0 = y1;
+                this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				y0 = y1;
                 y1 = y2;
                 y2 = y0;
             }
2023-08-02 13:05:00 [main] [INFO]  PatchLogExporter - patch (v8331)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -77,6 +77,11 @@
         }
         this.f = f;
         this.defaultFunctionValueAccuracy = 1.0e-15;
+		iterationCount += this.iterationCount;
+		iterationCount += this.iterationCount;
+		iterationCount += this.iterationCount;
+		iterationCount += this.iterationCount;
+		iterationCount += this.iterationCount;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
@@ -141,6 +146,7 @@
         this.result         = newResult;
         this.iterationCount = iterationCount;
         this.resultComputed = true;
+		this.f = f;
     }
 
     /**
2023-08-02 13:05:00 [main] [INFO]  PatchLogExporter - patch (v8331)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 13:05:00 [main] [INFO]  PatchLogExporter - patch (v8331)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 13:05:00 [main] [INFO]  PatchLogExporter - patch (v8331)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 13:05:00 [main] [INFO]  PatchLogExporter - patch (v8331)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -99,20 +99,20 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
-            return result;
+            verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +124,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -235,8 +234,10 @@
                 // use the bracket point if is better than last approximation
                 x0 = x1;
                 x1 = x2;
+				this.resultComputed = true;
                 x2 = x0;
-                y0 = y1;
+                this.defaultFunctionValueAccuracy = 1.0e-15;
+				y0 = y1;
                 y1 = y2;
                 y2 = y0;
             }
2023-08-02 13:05:00 [main] [INFO]  PatchLogExporter - patch (v8402)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -77,6 +77,8 @@
         }
         this.f = f;
         this.defaultFunctionValueAccuracy = 1.0e-15;
+		iterationCount += this.iterationCount;
+		iterationCount += this.iterationCount;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
@@ -141,6 +143,7 @@
         this.result         = newResult;
         this.iterationCount = iterationCount;
         this.resultComputed = true;
+		this.f = f;
     }
 
     /**
2023-08-02 13:05:00 [main] [INFO]  PatchLogExporter - patch (v8402)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 13:05:00 [main] [INFO]  PatchLogExporter - patch (v8402)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 13:05:00 [main] [INFO]  PatchLogExporter - patch (v8402)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -60,7 +60,6 @@
     protected ConvergingAlgorithmImpl(final int defaultMaximalIterationCount,
                                       final double defaultAbsoluteAccuracy) {
         this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
-        this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
2023-08-02 13:05:00 [main] [INFO]  PatchLogExporter - patch (v8402)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 13:05:00 [main] [INFO]  PatchLogExporter - patch (v8402)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -99,20 +99,21 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
-            return result;
+            verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +125,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -229,14 +229,17 @@
         double delta = x1 - x0;
         double oldDelta = delta;
 
-        int i = 0;
+        y1 = f.value(x1);
+		int i = 0;
         while (i < maximalIterationCount) {
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
                 x0 = x1;
                 x1 = x2;
                 x2 = x0;
-                y0 = y1;
+                this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				y0 = y1;
                 y1 = y2;
                 y2 = y0;
             }
2023-08-02 13:05:00 [main] [INFO]  PatchLogExporter - patch (v8540)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -77,6 +77,10 @@
         }
         this.f = f;
         this.defaultFunctionValueAccuracy = 1.0e-15;
+		iterationCount += this.iterationCount;
+		iterationCount += this.iterationCount;
+		iterationCount += this.iterationCount;
+		iterationCount += this.iterationCount;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
2023-08-02 13:05:00 [main] [INFO]  PatchLogExporter - patch (v8540)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 13:05:00 [main] [INFO]  PatchLogExporter - patch (v8540)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 13:05:00 [main] [INFO]  PatchLogExporter - patch (v8540)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -62,10 +62,8 @@
         this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
-        this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
-        this.iterationCount = 0;
     }
 
     /** {@inheritDoc} */
2023-08-02 13:05:00 [main] [INFO]  PatchLogExporter - patch (v8540)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 13:05:00 [main] [INFO]  PatchLogExporter - patch (v8540)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -100,19 +100,18 @@
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
         clearResult();
-        verifySequence(min, initial, max);
-
         // return the initial guess if it is good enough
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
-            return result;
+            verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +123,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -236,7 +234,9 @@
                 x0 = x1;
                 x1 = x2;
                 x2 = x0;
-                y0 = y1;
+                this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				y0 = y1;
                 y1 = y2;
                 y2 = y0;
             }
2023-08-02 13:05:00 [main] [INFO]  PatchLogExporter - patch (v8621)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -77,6 +77,10 @@
         }
         this.f = f;
         this.defaultFunctionValueAccuracy = 1.0e-15;
+		iterationCount += this.iterationCount;
+		iterationCount += this.iterationCount;
+		iterationCount += this.iterationCount;
+		iterationCount += this.iterationCount;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
@@ -163,7 +167,6 @@
      */
     protected final void clearResult() {
         this.iterationCount = 0;
-        this.resultComputed = false;
     }
 
     /**
2023-08-02 13:05:00 [main] [INFO]  PatchLogExporter - patch (v8621)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 13:05:00 [main] [INFO]  PatchLogExporter - patch (v8621)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 13:05:00 [main] [INFO]  PatchLogExporter - patch (v8621)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 13:05:00 [main] [INFO]  PatchLogExporter - patch (v8621)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -112,7 +112,6 @@
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +123,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,7 +179,6 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -235,17 +232,15 @@
                 // use the bracket point if is better than last approximation
                 x0 = x1;
                 x1 = x2;
+				this.resultComputed = true;
+				this.resultComputed = true;
                 x2 = x0;
-                y0 = y1;
+                this.defaultFunctionValueAccuracy = 1.0e-15;
+				y0 = y1;
                 y1 = y2;
                 y2 = y0;
             }
             if (Math.abs(y1) <= functionValueAccuracy) {
-                // Avoid division by very small values. Assume
-                // the iteration has converged (the problem may
-                // still be ill conditioned)
-                setResult(x1, i);
-                return result;
             }
             double dx = x2 - x1;
             double tolerance =
2023-08-02 13:05:00 [main] [INFO]  PatchLogExporter - patch (v9008)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -77,6 +77,7 @@
         }
         this.f = f;
         this.defaultFunctionValueAccuracy = 1.0e-15;
+		iterationCount += this.iterationCount;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
@@ -141,6 +142,8 @@
         this.result         = newResult;
         this.iterationCount = iterationCount;
         this.resultComputed = true;
+		this.f = f;
+		this.f = f;
     }
 
     /**
2023-08-02 13:05:00 [main] [INFO]  PatchLogExporter - patch (v9008)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 13:05:00 [main] [INFO]  PatchLogExporter - patch (v9008)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 13:05:00 [main] [INFO]  PatchLogExporter - patch (v9008)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 13:05:00 [main] [INFO]  PatchLogExporter - patch (v9008)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -106,13 +106,16 @@
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
-            return result;
+            verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			resultComputed = true;
+			return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +127,7 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
+            int numIterations = 0;
             return result;
         }
 
@@ -181,7 +184,6 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -229,14 +231,18 @@
         double delta = x1 - x0;
         double oldDelta = delta;
 
-        int i = 0;
+        y1 = f.value(x1);
+		int i = 0;
         while (i < maximalIterationCount) {
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
                 x0 = x1;
                 x1 = x2;
+				this.resultComputed = true;
+				this.resultComputed = true;
                 x2 = x0;
-                y0 = y1;
+                this.defaultFunctionValueAccuracy = 1.0e-15;
+				y0 = y1;
                 y1 = y2;
                 y2 = y0;
             }
2023-08-02 13:05:00 [main] [INFO]  PatchLogExporter - patch (v9539)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -77,6 +77,8 @@
         }
         this.f = f;
         this.defaultFunctionValueAccuracy = 1.0e-15;
+		iterationCount += this.iterationCount;
+		iterationCount += this.iterationCount;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
@@ -141,6 +143,7 @@
         this.result         = newResult;
         this.iterationCount = iterationCount;
         this.resultComputed = true;
+		this.f = f;
     }
 
     /**
2023-08-02 13:05:00 [main] [INFO]  PatchLogExporter - patch (v9539)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 13:05:00 [main] [INFO]  PatchLogExporter - patch (v9539)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 13:05:00 [main] [INFO]  PatchLogExporter - patch (v9539)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 13:05:00 [main] [INFO]  PatchLogExporter - patch (v9539)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -100,19 +100,19 @@
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
         clearResult();
-        verifySequence(min, initial, max);
-
         // return the initial guess if it is good enough
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
-            return result;
+            verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +124,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -235,8 +234,13 @@
                 // use the bracket point if is better than last approximation
                 x0 = x1;
                 x1 = x2;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
                 x2 = x0;
-                y0 = y1;
+                this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				y0 = y1;
                 y1 = y2;
                 y2 = y0;
             }
2023-08-02 13:05:00 [main] [INFO]  PatchLogExporter - patch (v9608)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -77,6 +77,9 @@
         }
         this.f = f;
         this.defaultFunctionValueAccuracy = 1.0e-15;
+		iterationCount += this.iterationCount;
+		iterationCount += this.iterationCount;
+		iterationCount += this.iterationCount;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
2023-08-02 13:05:00 [main] [INFO]  PatchLogExporter - patch (v9608)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 13:05:00 [main] [INFO]  PatchLogExporter - patch (v9608)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 13:05:00 [main] [INFO]  PatchLogExporter - patch (v9608)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 13:05:00 [main] [INFO]  PatchLogExporter - patch (v9608)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -100,19 +100,17 @@
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
         clearResult();
-        verifySequence(min, initial, max);
-
         // return the initial guess if it is good enough
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
-            return result;
+            verifySequence(min, initial, max);
+			return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +122,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,8 +178,7 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
-                ret = max;
+                ret = solve(f, min, yMin, max, yMax, min, yMin);
             } else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
@@ -235,8 +231,14 @@
                 // use the bracket point if is better than last approximation
                 x0 = x1;
                 x1 = x2;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
                 x2 = x0;
-                y0 = y1;
+                this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				y0 = y1;
                 y1 = y2;
                 y2 = y0;
             }
2023-08-02 13:05:00 [main] [INFO]  PatchLogExporter - patch (v9723)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -77,6 +77,10 @@
         }
         this.f = f;
         this.defaultFunctionValueAccuracy = 1.0e-15;
+		iterationCount += this.iterationCount;
+		iterationCount += this.iterationCount;
+		iterationCount += this.iterationCount;
+		iterationCount += this.iterationCount;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
@@ -141,6 +145,7 @@
         this.result         = newResult;
         this.iterationCount = iterationCount;
         this.resultComputed = true;
+		this.f = f;
     }
 
     /**
2023-08-02 13:05:00 [main] [INFO]  PatchLogExporter - patch (v9723)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 13:05:00 [main] [INFO]  PatchLogExporter - patch (v9723)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 13:05:00 [main] [INFO]  PatchLogExporter - patch (v9723)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 13:05:00 [main] [INFO]  PatchLogExporter - patch (v9723)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -106,13 +106,15 @@
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
-            return result;
+            verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +126,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,7 +182,6 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -235,8 +235,11 @@
                 // use the bracket point if is better than last approximation
                 x0 = x1;
                 x1 = x2;
+				this.resultComputed = true;
                 x2 = x0;
-                y0 = y1;
+                this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				y0 = y1;
                 y1 = y2;
                 y2 = y0;
             }
2023-08-02 13:05:00 [main] [INFO]  PatchLogExporter - patch (v9903)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 13:05:00 [main] [INFO]  PatchLogExporter - patch (v9903)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 13:05:00 [main] [INFO]  PatchLogExporter - patch (v9903)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 13:05:00 [main] [INFO]  PatchLogExporter - patch (v9903)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -100,19 +100,19 @@
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
         clearResult();
-        verifySequence(min, initial, max);
-
         // return the initial guess if it is good enough
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
-            return result;
+            verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +124,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,8 +180,7 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
-                ret = max;
+                return result;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
@@ -235,8 +233,16 @@
                 // use the bracket point if is better than last approximation
                 x0 = x1;
                 x1 = x2;
+				this.resultComputed = true;
+				this.resultComputed = true;
                 x2 = x0;
-                y0 = y1;
+                this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				y0 = y1;
                 y1 = y2;
                 y2 = y0;
             }
2023-08-02 13:05:00 [main] [INFO]  PatchLogExporter - patch (v10242)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -77,6 +77,10 @@
         }
         this.f = f;
         this.defaultFunctionValueAccuracy = 1.0e-15;
+		iterationCount += this.iterationCount;
+		iterationCount += this.iterationCount;
+		iterationCount += this.iterationCount;
+		iterationCount += this.iterationCount;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
@@ -141,6 +145,8 @@
         this.result         = newResult;
         this.iterationCount = iterationCount;
         this.resultComputed = true;
+		this.f = f;
+		this.f = f;
     }
 
     /**
2023-08-02 13:05:00 [main] [INFO]  PatchLogExporter - patch (v10242)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 13:05:00 [main] [INFO]  PatchLogExporter - patch (v10242)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 13:05:00 [main] [INFO]  PatchLogExporter - patch (v10242)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 13:05:00 [main] [INFO]  PatchLogExporter - patch (v10242)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -106,13 +106,14 @@
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
-            return result;
+            verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +125,7 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
+            double oldx = Double.POSITIVE_INFINITY;
             return result;
         }
 
@@ -235,8 +236,13 @@
                 // use the bracket point if is better than last approximation
                 x0 = x1;
                 x1 = x2;
+				this.resultComputed = true;
+				this.resultComputed = true;
                 x2 = x0;
-                y0 = y1;
+                this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				y0 = y1;
                 y1 = y2;
                 y2 = y0;
             }
2023-08-02 13:05:00 [main] [INFO]  PatchLogExporter - patch (v10721)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -77,6 +77,8 @@
         }
         this.f = f;
         this.defaultFunctionValueAccuracy = 1.0e-15;
+		iterationCount += this.iterationCount;
+		iterationCount += this.iterationCount;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
@@ -141,6 +143,7 @@
         this.result         = newResult;
         this.iterationCount = iterationCount;
         this.resultComputed = true;
+		this.f = f;
     }
 
     /**
2023-08-02 13:05:00 [main] [INFO]  PatchLogExporter - patch (v10721)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 13:05:00 [main] [INFO]  PatchLogExporter - patch (v10721)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 13:05:00 [main] [INFO]  PatchLogExporter - patch (v10721)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -65,7 +65,6 @@
         this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
-        this.iterationCount = 0;
     }
 
     /** {@inheritDoc} */
2023-08-02 13:05:00 [main] [INFO]  PatchLogExporter - patch (v10721)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 13:05:00 [main] [INFO]  PatchLogExporter - patch (v10721)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -106,13 +106,13 @@
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
-            return result;
+            verifySequence(min, initial, max);
+			return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +124,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,7 +180,6 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -235,8 +233,16 @@
                 // use the bracket point if is better than last approximation
                 x0 = x1;
                 x1 = x2;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
                 x2 = x0;
-                y0 = y1;
+                this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				y0 = y1;
                 y1 = y2;
                 y2 = y0;
             }
2023-08-02 13:05:00 [main] [INFO]  PatchLogExporter - patch (v10833)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -77,6 +77,7 @@
         }
         this.f = f;
         this.defaultFunctionValueAccuracy = 1.0e-15;
+		iterationCount += this.iterationCount;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
@@ -141,6 +142,7 @@
         this.result         = newResult;
         this.iterationCount = iterationCount;
         this.resultComputed = true;
+		this.f = f;
     }
 
     /**
2023-08-02 13:05:00 [main] [INFO]  PatchLogExporter - patch (v10833)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 13:05:00 [main] [INFO]  PatchLogExporter - patch (v10833)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 13:05:00 [main] [INFO]  PatchLogExporter - patch (v10833)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 13:05:00 [main] [INFO]  PatchLogExporter - patch (v10833)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -106,13 +106,17 @@
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
-            return result;
+            verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +128,7 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
+            double x2 = max;
             return result;
         }
 
@@ -235,8 +239,15 @@
                 // use the bracket point if is better than last approximation
                 x0 = x1;
                 x1 = x2;
+				this.resultComputed = true;
+				this.resultComputed = true;
                 x2 = x0;
-                y0 = y1;
+                this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				y0 = y1;
                 y1 = y2;
                 y2 = y0;
             }
2023-08-02 13:05:00 [main] [INFO]  PatchLogExporter - patch (v11029)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -77,6 +77,9 @@
         }
         this.f = f;
         this.defaultFunctionValueAccuracy = 1.0e-15;
+		iterationCount += this.iterationCount;
+		iterationCount += this.iterationCount;
+		iterationCount += this.iterationCount;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
@@ -141,6 +144,10 @@
         this.result         = newResult;
         this.iterationCount = iterationCount;
         this.resultComputed = true;
+		this.f = f;
+		this.f = f;
+		this.f = f;
+		this.f = f;
     }
 
     /**
2023-08-02 13:05:00 [main] [INFO]  PatchLogExporter - patch (v11029)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 13:05:00 [main] [INFO]  PatchLogExporter - patch (v11029)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 13:05:00 [main] [INFO]  PatchLogExporter - patch (v11029)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 13:05:00 [main] [INFO]  PatchLogExporter - patch (v11029)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -99,20 +99,21 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
-            return result;
+            verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifyInterval(min, max);
+			return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +125,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -235,8 +235,13 @@
                 // use the bracket point if is better than last approximation
                 x0 = x1;
                 x1 = x2;
+				this.resultComputed = true;
+				this.resultComputed = true;
                 x2 = x0;
-                y0 = y1;
+                this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				y0 = y1;
                 y1 = y2;
                 y2 = y0;
             }
2023-08-02 13:05:00 [main] [INFO]  PatchLogExporter - patch (v11747)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -77,6 +77,7 @@
         }
         this.f = f;
         this.defaultFunctionValueAccuracy = 1.0e-15;
+		iterationCount += this.iterationCount;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
2023-08-02 13:05:00 [main] [INFO]  PatchLogExporter - patch (v11747)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 13:05:00 [main] [INFO]  PatchLogExporter - patch (v11747)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 13:05:00 [main] [INFO]  PatchLogExporter - patch (v11747)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -59,7 +59,6 @@
      */
     protected ConvergingAlgorithmImpl(final int defaultMaximalIterationCount,
                                       final double defaultAbsoluteAccuracy) {
-        this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
2023-08-02 13:05:00 [main] [INFO]  PatchLogExporter - patch (v11747)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 13:05:00 [main] [INFO]  PatchLogExporter - patch (v11747)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -106,13 +106,15 @@
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
-            return result;
+            verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +126,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -235,8 +236,17 @@
                 // use the bracket point if is better than last approximation
                 x0 = x1;
                 x1 = x2;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
                 x2 = x0;
-                y0 = y1;
+                this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				y0 = y1;
                 y1 = y2;
                 y2 = y0;
             }
2023-08-02 13:05:00 [main] [INFO]  PatchLogExporter - patch (v11813)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -77,6 +77,7 @@
         }
         this.f = f;
         this.defaultFunctionValueAccuracy = 1.0e-15;
+		iterationCount += this.iterationCount;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
2023-08-02 13:05:00 [main] [INFO]  PatchLogExporter - patch (v11813)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 13:05:00 [main] [INFO]  PatchLogExporter - patch (v11813)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 13:05:00 [main] [INFO]  PatchLogExporter - patch (v11813)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 13:05:00 [main] [INFO]  PatchLogExporter - patch (v11813)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -106,13 +106,19 @@
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
-            return result;
+            verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +130,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -235,8 +240,14 @@
                 // use the bracket point if is better than last approximation
                 x0 = x1;
                 x1 = x2;
+				this.resultComputed = true;
+				this.resultComputed = true;
                 x2 = x0;
-                y0 = y1;
+                this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				y0 = y1;
                 y1 = y2;
                 y2 = y0;
             }
2023-08-02 13:05:01 [main] [INFO]  PatchLogExporter - patch (v12104)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -77,6 +77,7 @@
         }
         this.f = f;
         this.defaultFunctionValueAccuracy = 1.0e-15;
+		iterationCount += this.iterationCount;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
@@ -141,6 +142,8 @@
         this.result         = newResult;
         this.iterationCount = iterationCount;
         this.resultComputed = true;
+		this.f = f;
+		this.f = f;
     }
 
     /**
2023-08-02 13:05:01 [main] [INFO]  PatchLogExporter - patch (v12104)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 13:05:01 [main] [INFO]  PatchLogExporter - patch (v12104)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 13:05:01 [main] [INFO]  PatchLogExporter - patch (v12104)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -59,7 +59,6 @@
      */
     protected ConvergingAlgorithmImpl(final int defaultMaximalIterationCount,
                                       final double defaultAbsoluteAccuracy) {
-        this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
2023-08-02 13:05:01 [main] [INFO]  PatchLogExporter - patch (v12104)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 13:05:01 [main] [INFO]  PatchLogExporter - patch (v12104)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -106,13 +106,15 @@
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
-            return result;
+            verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +126,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -235,8 +236,16 @@
                 // use the bracket point if is better than last approximation
                 x0 = x1;
                 x1 = x2;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
                 x2 = x0;
-                y0 = y1;
+                this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				y0 = y1;
                 y1 = y2;
                 y2 = y0;
             }
2023-08-02 13:05:01 [main] [INFO]  PatchLogExporter - patch (v12119)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -77,6 +77,8 @@
         }
         this.f = f;
         this.defaultFunctionValueAccuracy = 1.0e-15;
+		iterationCount += this.iterationCount;
+		iterationCount += this.iterationCount;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
2023-08-02 13:05:01 [main] [INFO]  PatchLogExporter - patch (v12119)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 13:05:01 [main] [INFO]  PatchLogExporter - patch (v12119)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 13:05:01 [main] [INFO]  PatchLogExporter - patch (v12119)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 13:05:01 [main] [INFO]  PatchLogExporter - patch (v12119)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -106,13 +106,15 @@
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
-            return result;
+            verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +126,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -235,8 +236,17 @@
                 // use the bracket point if is better than last approximation
                 x0 = x1;
                 x1 = x2;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
                 x2 = x0;
-                y0 = y1;
+                this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				y0 = y1;
                 y1 = y2;
                 y2 = y0;
             }
2023-08-02 13:05:01 [main] [INFO]  PatchLogExporter - patch (v12412)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -77,6 +77,10 @@
         }
         this.f = f;
         this.defaultFunctionValueAccuracy = 1.0e-15;
+		iterationCount += this.iterationCount;
+		iterationCount += this.iterationCount;
+		iterationCount += this.iterationCount;
+		iterationCount += this.iterationCount;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
@@ -141,6 +145,7 @@
         this.result         = newResult;
         this.iterationCount = iterationCount;
         this.resultComputed = true;
+		this.f = f;
     }
 
     /**
2023-08-02 13:05:01 [main] [INFO]  PatchLogExporter - patch (v12412)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 13:05:01 [main] [INFO]  PatchLogExporter - patch (v12412)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 13:05:01 [main] [INFO]  PatchLogExporter - patch (v12412)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 13:05:01 [main] [INFO]  PatchLogExporter - patch (v12412)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -106,13 +106,16 @@
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
-            return result;
+            verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +127,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -235,8 +237,14 @@
                 // use the bracket point if is better than last approximation
                 x0 = x1;
                 x1 = x2;
+				this.resultComputed = true;
+				this.resultComputed = true;
                 x2 = x0;
-                y0 = y1;
+                this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				y0 = y1;
                 y1 = y2;
                 y2 = y0;
             }
2023-08-02 13:05:01 [main] [INFO]  PatchLogExporter - patch (v14139)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -141,6 +141,11 @@
         this.result         = newResult;
         this.iterationCount = iterationCount;
         this.resultComputed = true;
+		this.f = f;
+		this.f = f;
+		this.f = f;
+		this.f = f;
+		this.f = f;
     }
 
     /**
2023-08-02 13:05:01 [main] [INFO]  PatchLogExporter - patch (v14139)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 13:05:01 [main] [INFO]  PatchLogExporter - patch (v14139)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 13:05:01 [main] [INFO]  PatchLogExporter - patch (v14139)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 13:05:01 [main] [INFO]  PatchLogExporter - patch (v14139)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -106,13 +106,13 @@
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
-            return result;
+            verifySequence(min, initial, max);
+			return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +124,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -235,8 +234,19 @@
                 // use the bracket point if is better than last approximation
                 x0 = x1;
                 x1 = x2;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
                 x2 = x0;
-                y0 = y1;
+                this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				y0 = y1;
                 y1 = y2;
                 y2 = y0;
             }
2023-08-02 13:05:01 [main] [INFO]  PatchLogExporter - patch (v14211)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -141,6 +141,9 @@
         this.result         = newResult;
         this.iterationCount = iterationCount;
         this.resultComputed = true;
+		this.f = f;
+		this.f = f;
+		this.f = f;
     }
 
     /**
2023-08-02 13:05:01 [main] [INFO]  PatchLogExporter - patch (v14211)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 13:05:01 [main] [INFO]  PatchLogExporter - patch (v14211)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 13:05:01 [main] [INFO]  PatchLogExporter - patch (v14211)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 13:05:01 [main] [INFO]  PatchLogExporter - patch (v14211)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -106,13 +106,14 @@
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
-            return result;
+            verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +125,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -235,8 +235,20 @@
                 // use the bracket point if is better than last approximation
                 x0 = x1;
                 x1 = x2;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
                 x2 = x0;
-                y0 = y1;
+                this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				y0 = y1;
                 y1 = y2;
                 y2 = y0;
             }
2023-08-02 13:05:01 [main] [INFO]  PatchLogExporter - patch (v14307)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -141,6 +141,7 @@
         this.result         = newResult;
         this.iterationCount = iterationCount;
         this.resultComputed = true;
+		this.f = f;
     }
 
     /**
2023-08-02 13:05:01 [main] [INFO]  PatchLogExporter - patch (v14307)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 13:05:01 [main] [INFO]  PatchLogExporter - patch (v14307)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 13:05:01 [main] [INFO]  PatchLogExporter - patch (v14307)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 13:05:01 [main] [INFO]  PatchLogExporter - patch (v14307)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -106,13 +106,13 @@
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
-            return result;
+            verifySequence(min, initial, max);
+			return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +124,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -235,8 +234,23 @@
                 // use the bracket point if is better than last approximation
                 x0 = x1;
                 x1 = x2;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
                 x2 = x0;
-                y0 = y1;
+                this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				y0 = y1;
                 y1 = y2;
                 y2 = y0;
             }
2023-08-02 13:05:01 [main] [INFO]  PatchLogExporter - patch (v14821)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -141,6 +141,7 @@
         this.result         = newResult;
         this.iterationCount = iterationCount;
         this.resultComputed = true;
+		this.f = f;
     }
 
     /**
2023-08-02 13:05:01 [main] [INFO]  PatchLogExporter - patch (v14821)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 13:05:01 [main] [INFO]  PatchLogExporter - patch (v14821)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 13:05:01 [main] [INFO]  PatchLogExporter - patch (v14821)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 13:05:01 [main] [INFO]  PatchLogExporter - patch (v14821)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -106,13 +106,13 @@
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
-            return result;
+            verifySequence(min, initial, max);
+			return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +124,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -235,8 +234,21 @@
                 // use the bracket point if is better than last approximation
                 x0 = x1;
                 x1 = x2;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
                 x2 = x0;
-                y0 = y1;
+                this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				y0 = y1;
                 y1 = y2;
                 y2 = y0;
             }
2023-08-02 13:05:01 [main] [INFO]  PatchLogExporter - patch (v14840)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -163,7 +163,6 @@
      */
     protected final void clearResult() {
         this.iterationCount = 0;
-        this.resultComputed = false;
     }
 
     /**
2023-08-02 13:05:01 [main] [INFO]  PatchLogExporter - patch (v14840)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 13:05:01 [main] [INFO]  PatchLogExporter - patch (v14840)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 13:05:01 [main] [INFO]  PatchLogExporter - patch (v14840)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 13:05:01 [main] [INFO]  PatchLogExporter - patch (v14840)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -106,13 +106,13 @@
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
-            return result;
+            verifySequence(min, initial, max);
+			return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +124,7 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
+            int i = 0;
             return result;
         }
 
@@ -235,8 +235,24 @@
                 // use the bracket point if is better than last approximation
                 x0 = x1;
                 x1 = x2;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
                 x2 = x0;
-                y0 = y1;
+                this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				y0 = y1;
                 y1 = y2;
                 y2 = y0;
             }
2023-08-02 13:05:01 [main] [INFO]  PatchLogExporter - patch (v15005)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -163,7 +163,6 @@
      */
     protected final void clearResult() {
         this.iterationCount = 0;
-        this.resultComputed = false;
     }
 
     /**
2023-08-02 13:05:01 [main] [INFO]  PatchLogExporter - patch (v15005)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 13:05:01 [main] [INFO]  PatchLogExporter - patch (v15005)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 13:05:01 [main] [INFO]  PatchLogExporter - patch (v15005)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 13:05:01 [main] [INFO]  PatchLogExporter - patch (v15005)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -106,13 +106,14 @@
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
-            return result;
+            verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +125,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,7 +181,6 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -235,8 +234,23 @@
                 // use the bracket point if is better than last approximation
                 x0 = x1;
                 x1 = x2;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
                 x2 = x0;
-                y0 = y1;
+                this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				y0 = y1;
                 y1 = y2;
                 y2 = y0;
             }
2023-08-02 13:05:01 [main] [INFO]  PatchLogExporter - patch (v15226)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -77,6 +77,7 @@
         }
         this.f = f;
         this.defaultFunctionValueAccuracy = 1.0e-15;
+		iterationCount += this.iterationCount;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
@@ -163,7 +164,6 @@
      */
     protected final void clearResult() {
         this.iterationCount = 0;
-        this.resultComputed = false;
     }
 
     /**
2023-08-02 13:05:01 [main] [INFO]  PatchLogExporter - patch (v15226)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 13:05:01 [main] [INFO]  PatchLogExporter - patch (v15226)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 13:05:01 [main] [INFO]  PatchLogExporter - patch (v15226)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 13:05:01 [main] [INFO]  PatchLogExporter - patch (v15226)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -106,13 +106,13 @@
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
-            return result;
+            verifySequence(min, initial, max);
+			return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +124,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -235,8 +234,22 @@
                 // use the bracket point if is better than last approximation
                 x0 = x1;
                 x1 = x2;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
                 x2 = x0;
-                y0 = y1;
+                this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				y0 = y1;
                 y1 = y2;
                 y2 = y0;
             }
2023-08-02 13:05:01 [main] [INFO]  PatchLogExporter - patch (v15249)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -77,6 +77,7 @@
         }
         this.f = f;
         this.defaultFunctionValueAccuracy = 1.0e-15;
+		iterationCount += this.iterationCount;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
@@ -141,6 +142,9 @@
         this.result         = newResult;
         this.iterationCount = iterationCount;
         this.resultComputed = true;
+		this.f = f;
+		this.f = f;
+		this.f = f;
     }
 
     /**
@@ -163,7 +167,6 @@
      */
     protected final void clearResult() {
         this.iterationCount = 0;
-        this.resultComputed = false;
     }
 
     /**
2023-08-02 13:05:01 [main] [INFO]  PatchLogExporter - patch (v15249)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 13:05:01 [main] [INFO]  PatchLogExporter - patch (v15249)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 13:05:01 [main] [INFO]  PatchLogExporter - patch (v15249)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 13:05:01 [main] [INFO]  PatchLogExporter - patch (v15249)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -106,13 +106,14 @@
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
-            return result;
+            verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +125,7 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
+            double x2 = max;
             return result;
         }
 
@@ -235,8 +236,19 @@
                 // use the bracket point if is better than last approximation
                 x0 = x1;
                 x1 = x2;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
                 x2 = x0;
-                y0 = y1;
+                this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				y0 = y1;
                 y1 = y2;
                 y2 = y0;
             }
2023-08-02 13:05:01 [main] [INFO]  PatchLogExporter - patch (v15729)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -77,6 +77,7 @@
         }
         this.f = f;
         this.defaultFunctionValueAccuracy = 1.0e-15;
+		iterationCount += this.iterationCount;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
2023-08-02 13:05:01 [main] [INFO]  PatchLogExporter - patch (v15729)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 13:05:01 [main] [INFO]  PatchLogExporter - patch (v15729)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 13:05:01 [main] [INFO]  PatchLogExporter - patch (v15729)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 13:05:01 [main] [INFO]  PatchLogExporter - patch (v15729)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -106,13 +106,14 @@
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
-            return result;
+            verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +125,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -235,8 +235,23 @@
                 // use the bracket point if is better than last approximation
                 x0 = x1;
                 x1 = x2;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
                 x2 = x0;
-                y0 = y1;
+                this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				y0 = y1;
                 y1 = y2;
                 y2 = y0;
             }
2023-08-02 13:05:01 [main] [INFO]  PatchLogExporter - patch (v15944)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -141,6 +141,8 @@
         this.result         = newResult;
         this.iterationCount = iterationCount;
         this.resultComputed = true;
+		this.f = f;
+		this.f = f;
     }
 
     /**
2023-08-02 13:05:01 [main] [INFO]  PatchLogExporter - patch (v15944)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 13:05:01 [main] [INFO]  PatchLogExporter - patch (v15944)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 13:05:01 [main] [INFO]  PatchLogExporter - patch (v15944)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 13:05:01 [main] [INFO]  PatchLogExporter - patch (v15944)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -100,19 +100,20 @@
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
         clearResult();
-        verifySequence(min, initial, max);
-
         // return the initial guess if it is good enough
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
-            return result;
+            verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +125,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -235,8 +235,20 @@
                 // use the bracket point if is better than last approximation
                 x0 = x1;
                 x1 = x2;
+				this.resultComputed = true;
+				this.resultComputed = true;
                 x2 = x0;
-                y0 = y1;
+                this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				y0 = y1;
                 y1 = y2;
                 y2 = y0;
             }
2023-08-02 13:05:01 [main] [INFO]  PatchLogExporter - patch (v16121)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -77,6 +77,7 @@
         }
         this.f = f;
         this.defaultFunctionValueAccuracy = 1.0e-15;
+		iterationCount += this.iterationCount;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
2023-08-02 13:05:01 [main] [INFO]  PatchLogExporter - patch (v16121)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 13:05:01 [main] [INFO]  PatchLogExporter - patch (v16121)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 13:05:01 [main] [INFO]  PatchLogExporter - patch (v16121)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 13:05:01 [main] [INFO]  PatchLogExporter - patch (v16121)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -100,19 +100,18 @@
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
         clearResult();
-        verifySequence(min, initial, max);
-
         // return the initial guess if it is good enough
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
-            return result;
+            verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +123,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -235,8 +233,21 @@
                 // use the bracket point if is better than last approximation
                 x0 = x1;
                 x1 = x2;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
                 x2 = x0;
-                y0 = y1;
+                this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				y0 = y1;
                 y1 = y2;
                 y2 = y0;
             }
2023-08-02 13:05:01 [main] [INFO]  PatchLogExporter - patch (v16230)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -141,6 +141,7 @@
         this.result         = newResult;
         this.iterationCount = iterationCount;
         this.resultComputed = true;
+		this.f = f;
     }
 
     /**
@@ -163,7 +164,8 @@
      */
     protected final void clearResult() {
         this.iterationCount = 0;
-        this.resultComputed = false;
+        resultComputed = true;
+		this.resultComputed = false;
     }
 
     /**
2023-08-02 13:05:01 [main] [INFO]  PatchLogExporter - patch (v16230)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 13:05:01 [main] [INFO]  PatchLogExporter - patch (v16230)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 13:05:01 [main] [INFO]  PatchLogExporter - patch (v16230)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 13:05:01 [main] [INFO]  PatchLogExporter - patch (v16230)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -106,13 +106,15 @@
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
-            return result;
+            verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +126,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -235,8 +236,23 @@
                 // use the bracket point if is better than last approximation
                 x0 = x1;
                 x1 = x2;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
                 x2 = x0;
-                y0 = y1;
+                this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				y0 = y1;
                 y1 = y2;
                 y2 = y0;
             }
2023-08-02 13:05:01 [main] [INFO]  PatchLogExporter - patch (v16611)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 13:05:01 [main] [INFO]  PatchLogExporter - patch (v16611)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 13:05:01 [main] [INFO]  PatchLogExporter - patch (v16611)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -63,7 +63,6 @@
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
-        this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
         this.iterationCount = 0;
     }
2023-08-02 13:05:01 [main] [INFO]  PatchLogExporter - patch (v16611)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 13:05:01 [main] [INFO]  PatchLogExporter - patch (v16611)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -106,13 +106,13 @@
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
-            return result;
+            verifySequence(min, initial, max);
+			return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +124,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -235,8 +234,24 @@
                 // use the bracket point if is better than last approximation
                 x0 = x1;
                 x1 = x2;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				y0 = y1;
                 x2 = x0;
-                y0 = y1;
+                this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				y0 = y1;
                 y1 = y2;
                 y2 = y0;
             }
2023-08-02 13:05:01 [main] [INFO]  PatchLogExporter - patch (v16744)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -141,6 +141,7 @@
         this.result         = newResult;
         this.iterationCount = iterationCount;
         this.resultComputed = true;
+		this.f = f;
     }
 
     /**
2023-08-02 13:05:01 [main] [INFO]  PatchLogExporter - patch (v16744)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 13:05:01 [main] [INFO]  PatchLogExporter - patch (v16744)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 13:05:01 [main] [INFO]  PatchLogExporter - patch (v16744)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 13:05:01 [main] [INFO]  PatchLogExporter - patch (v16744)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -106,13 +106,16 @@
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
-            return result;
+            verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +127,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -235,8 +237,26 @@
                 // use the bracket point if is better than last approximation
                 x0 = x1;
                 x1 = x2;
+				this.resultComputed = true;
+				y0 = y1;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
                 x2 = x0;
-                y0 = y1;
+                clearResult();
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				y0 = y1;
                 y1 = y2;
                 y2 = y0;
             }
2023-08-02 13:05:01 [main] [INFO]  PatchLogExporter - patch (v16807)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 13:05:01 [main] [INFO]  PatchLogExporter - patch (v16807)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 13:05:01 [main] [INFO]  PatchLogExporter - patch (v16807)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 13:05:01 [main] [INFO]  PatchLogExporter - patch (v16807)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -106,13 +106,17 @@
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
-            return result;
+            verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +128,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -235,8 +238,23 @@
                 // use the bracket point if is better than last approximation
                 x0 = x1;
                 x1 = x2;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
                 x2 = x0;
-                y0 = y1;
+                clearResult();
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				y0 = y1;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				y0 = y1;
                 y1 = y2;
                 y2 = y0;
             }
2023-08-02 13:05:01 [main] [INFO]  PatchLogExporter - patch (v17121)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -141,6 +141,7 @@
         this.result         = newResult;
         this.iterationCount = iterationCount;
         this.resultComputed = true;
+		this.f = f;
     }
 
     /**
2023-08-02 13:05:01 [main] [INFO]  PatchLogExporter - patch (v17121)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 13:05:01 [main] [INFO]  PatchLogExporter - patch (v17121)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 13:05:01 [main] [INFO]  PatchLogExporter - patch (v17121)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 13:05:01 [main] [INFO]  PatchLogExporter - patch (v17121)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -106,13 +106,15 @@
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
-            return result;
+            verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +126,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -235,8 +236,23 @@
                 // use the bracket point if is better than last approximation
                 x0 = x1;
                 x1 = x2;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
                 x2 = x0;
-                y0 = y1;
+                this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				y0 = y1;
                 y1 = y2;
                 y2 = y0;
             }
2023-08-02 13:05:01 [main] [INFO]  PatchLogExporter - patch (v17130)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 13:05:01 [main] [INFO]  PatchLogExporter - patch (v17130)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 13:05:01 [main] [INFO]  PatchLogExporter - patch (v17130)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 13:05:01 [main] [INFO]  PatchLogExporter - patch (v17130)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -99,22 +99,23 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
-            return result;
+            verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
-        if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
-            return result;
-        }
+        if (Math.abs(yMin) <= functionValueAccuracy)
 
         // reduce interval if min and initial bracket the root
         if (yInitial * yMin < 0) {
@@ -124,7 +125,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -235,8 +235,24 @@
                 // use the bracket point if is better than last approximation
                 x0 = x1;
                 x1 = x2;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
                 x2 = x0;
-                y0 = y1;
+                this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				y0 = y1;
                 y1 = y2;
                 y2 = y0;
             }
2023-08-02 13:05:01 [main] [INFO]  PatchLogExporter - patch (v17517)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -141,6 +141,7 @@
         this.result         = newResult;
         this.iterationCount = iterationCount;
         this.resultComputed = true;
+		this.f = f;
     }
 
     /**
2023-08-02 13:05:01 [main] [INFO]  PatchLogExporter - patch (v17517)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 13:05:01 [main] [INFO]  PatchLogExporter - patch (v17517)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 13:05:01 [main] [INFO]  PatchLogExporter - patch (v17517)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 13:05:01 [main] [INFO]  PatchLogExporter - patch (v17517)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -106,13 +106,14 @@
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
-            return result;
+            verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +125,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,7 +181,6 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -235,8 +234,25 @@
                 // use the bracket point if is better than last approximation
                 x0 = x1;
                 x1 = x2;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
                 x2 = x0;
-                y0 = y1;
+                this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				y0 = y1;
                 y1 = y2;
                 y2 = y0;
             }
2023-08-02 13:05:01 [main] [INFO]  PatchLogExporter - patch (v17728)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -163,7 +163,6 @@
      */
     protected final void clearResult() {
         this.iterationCount = 0;
-        this.resultComputed = false;
     }
 
     /**
2023-08-02 13:05:01 [main] [INFO]  PatchLogExporter - patch (v17728)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 13:05:01 [main] [INFO]  PatchLogExporter - patch (v17728)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 13:05:01 [main] [INFO]  PatchLogExporter - patch (v17728)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 13:05:01 [main] [INFO]  PatchLogExporter - patch (v17728)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -106,13 +106,15 @@
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
-            return result;
+            verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +126,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,7 +182,6 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -235,8 +235,22 @@
                 // use the bracket point if is better than last approximation
                 x0 = x1;
                 x1 = x2;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
                 x2 = x0;
-                y0 = y1;
+                this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				y0 = y1;
                 y1 = y2;
                 y2 = y0;
             }
2023-08-02 13:05:01 [main] [INFO]  PatchLogExporter - patch (v18619)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -163,7 +163,6 @@
      */
     protected final void clearResult() {
         this.iterationCount = 0;
-        this.resultComputed = false;
     }
 
     /**
2023-08-02 13:05:01 [main] [INFO]  PatchLogExporter - patch (v18619)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 13:05:01 [main] [INFO]  PatchLogExporter - patch (v18619)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 13:05:01 [main] [INFO]  PatchLogExporter - patch (v18619)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 13:05:01 [main] [INFO]  PatchLogExporter - patch (v18619)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -106,13 +106,14 @@
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
-            return result;
+            verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +125,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -230,13 +230,29 @@
         double oldDelta = delta;
 
         int i = 0;
-        while (i < maximalIterationCount) {
+        while (i <= maximalIterationCount) {
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
                 x0 = x1;
                 x1 = x2;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
                 x2 = x0;
-                y0 = y1;
+                this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				y0 = y1;
                 y1 = y2;
                 y2 = y0;
             }
2023-08-02 13:05:01 [main] [INFO]  PatchLogExporter - patch (v18722)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -141,6 +141,7 @@
         this.result         = newResult;
         this.iterationCount = iterationCount;
         this.resultComputed = true;
+		this.f = f;
     }
 
     /**
2023-08-02 13:05:01 [main] [INFO]  PatchLogExporter - patch (v18722)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 13:05:01 [main] [INFO]  PatchLogExporter - patch (v18722)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 13:05:01 [main] [INFO]  PatchLogExporter - patch (v18722)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -63,7 +63,6 @@
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
-        this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
         this.iterationCount = 0;
     }
2023-08-02 13:05:01 [main] [INFO]  PatchLogExporter - patch (v18722)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 13:05:01 [main] [INFO]  PatchLogExporter - patch (v18722)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -106,13 +106,14 @@
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
-            return result;
+            verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +125,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -182,7 +182,8 @@
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
                 setResult(max, 0);
-                ret = max;
+                double p1;
+				ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
@@ -230,13 +231,29 @@
         double oldDelta = delta;
 
         int i = 0;
-        while (i < maximalIterationCount) {
+        while (i <= maximalIterationCount) {
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
                 x0 = x1;
                 x1 = x2;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
                 x2 = x0;
-                y0 = y1;
+                this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				y0 = y1;
                 y1 = y2;
                 y2 = y0;
             }
2023-08-02 13:05:01 [main] [INFO]  PatchLogExporter - patch (v19150)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -141,6 +141,7 @@
         this.result         = newResult;
         this.iterationCount = iterationCount;
         this.resultComputed = true;
+		this.f = f;
     }
 
     /**
2023-08-02 13:05:01 [main] [INFO]  PatchLogExporter - patch (v19150)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 13:05:01 [main] [INFO]  PatchLogExporter - patch (v19150)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 13:05:01 [main] [INFO]  PatchLogExporter - patch (v19150)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 13:05:01 [main] [INFO]  PatchLogExporter - patch (v19150)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -106,13 +106,14 @@
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
-            return result;
+            verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +125,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -182,7 +182,8 @@
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
                 setResult(max, 0);
-                ret = max;
+                double p1;
+				ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
@@ -235,8 +236,23 @@
                 // use the bracket point if is better than last approximation
                 x0 = x1;
                 x1 = x2;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
                 x2 = x0;
-                y0 = y1;
+                this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				y0 = y1;
                 y1 = y2;
                 y2 = y0;
             }
2023-08-02 13:05:01 [main] [INFO]  PatchLogExporter - patch (v19308)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 13:05:01 [main] [INFO]  PatchLogExporter - patch (v19308)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 13:05:01 [main] [INFO]  PatchLogExporter - patch (v19308)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -63,7 +63,6 @@
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
-        this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
         this.iterationCount = 0;
     }
2023-08-02 13:05:01 [main] [INFO]  PatchLogExporter - patch (v19308)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 13:05:01 [main] [INFO]  PatchLogExporter - patch (v19308)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -106,13 +106,16 @@
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
-            return result;
+            verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +127,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,7 +183,6 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -235,8 +236,23 @@
                 // use the bracket point if is better than last approximation
                 x0 = x1;
                 x1 = x2;
+				oldDelta = delta;
+				this.resultComputed = true;
+				this.resultComputed = true;
                 x2 = x0;
-                y0 = y1;
+                oldDelta = delta;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				y0 = y1;
                 y1 = y2;
                 y2 = y0;
             }
2023-08-02 13:05:01 [main] [INFO]  PatchLogExporter - patch (v22122)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 13:05:01 [main] [INFO]  PatchLogExporter - patch (v22122)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 13:05:01 [main] [INFO]  PatchLogExporter - patch (v22122)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 13:05:01 [main] [INFO]  PatchLogExporter - patch (v22122)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -106,13 +106,22 @@
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
-            return result;
+            verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
+            verifyBracketing(min, max, f);
             return result;
         }
 
@@ -124,7 +133,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -235,8 +243,24 @@
                 // use the bracket point if is better than last approximation
                 x0 = x1;
                 x1 = x2;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
                 x2 = x0;
-                y0 = y1;
+                this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				y0 = y1;
                 y1 = y2;
                 y2 = y0;
             }
2023-08-02 13:05:01 [main] [INFO]  PatchLogExporter - patch (v22313)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 13:05:01 [main] [INFO]  PatchLogExporter - patch (v22313)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 13:05:01 [main] [INFO]  PatchLogExporter - patch (v22313)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 13:05:01 [main] [INFO]  PatchLogExporter - patch (v22313)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -99,20 +99,28 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
-            return result;
+            verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +132,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -230,22 +237,30 @@
         double oldDelta = delta;
 
         int i = 0;
-        while (i < maximalIterationCount) {
+        while (i <= maximalIterationCount) {
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
                 x0 = x1;
                 x1 = x2;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
                 x2 = x0;
-                y0 = y1;
+                this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				y0 = y1;
                 y1 = y2;
                 y2 = y0;
             }
             if (Math.abs(y1) <= functionValueAccuracy) {
-                // Avoid division by very small values. Assume
-                // the iteration has converged (the problem may
-                // still be ill conditioned)
-                setResult(x1, i);
-                return result;
             }
             double dx = x2 - x1;
             double tolerance =
2023-08-02 13:05:01 [main] [INFO]  PatchLogExporter - patch (v22401)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -181,7 +181,8 @@
         throws FunctionEvaluationException {
         final double f1 = function.value(lower);
         final double f2 = function.value(upper);
-        return (f1 > 0 && f2 < 0) || (f1 < 0 && f2 > 0);
+        int i = 0;
+		return (f1 > 0 && f2 < 0) || (f1 < 0 && f2 > 0);
     }
 
     /**
2023-08-02 13:05:01 [main] [INFO]  PatchLogExporter - patch (v22401)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 13:05:01 [main] [INFO]  PatchLogExporter - patch (v22401)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 13:05:01 [main] [INFO]  PatchLogExporter - patch (v22401)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 13:05:01 [main] [INFO]  PatchLogExporter - patch (v22401)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -106,13 +106,22 @@
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
-            return result;
+            verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
+            verifyBracketing(min, max, f);
             return result;
         }
 
@@ -124,7 +133,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -235,8 +243,24 @@
                 // use the bracket point if is better than last approximation
                 x0 = x1;
                 x1 = x2;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
                 x2 = x0;
-                y0 = y1;
+                this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				y0 = y1;
                 y1 = y2;
                 y2 = y0;
             }
2023-08-02 13:05:01 [main] [INFO]  PatchLogExporter - patch (v22612)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -141,6 +141,7 @@
         this.result         = newResult;
         this.iterationCount = iterationCount;
         this.resultComputed = true;
+		this.f = f;
     }
 
     /**
2023-08-02 13:05:01 [main] [INFO]  PatchLogExporter - patch (v22612)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 13:05:01 [main] [INFO]  PatchLogExporter - patch (v22612)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 13:05:01 [main] [INFO]  PatchLogExporter - patch (v22612)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 13:05:01 [main] [INFO]  PatchLogExporter - patch (v22612)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -106,13 +106,21 @@
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
-            return result;
+            verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +132,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -235,8 +242,25 @@
                 // use the bracket point if is better than last approximation
                 x0 = x1;
                 x1 = x2;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
                 x2 = x0;
-                y0 = y1;
+                this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				y0 = y1;
                 y1 = y2;
                 y2 = y0;
             }
2023-08-02 13:05:01 [main] [INFO]  PatchLogExporter - patch (v22940)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 13:05:01 [main] [INFO]  PatchLogExporter - patch (v22940)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 13:05:01 [main] [INFO]  PatchLogExporter - patch (v22940)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 13:05:01 [main] [INFO]  PatchLogExporter - patch (v22940)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -106,13 +106,23 @@
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
-            return result;
+            verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
+            verifyBracketing(min, max, f);
             return result;
         }
 
@@ -124,7 +134,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,7 +190,6 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -235,8 +243,24 @@
                 // use the bracket point if is better than last approximation
                 x0 = x1;
                 x1 = x2;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
                 x2 = x0;
-                y0 = y1;
+                this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				y0 = y1;
                 y1 = y2;
                 y2 = y0;
             }
2023-08-02 13:05:01 [main] [INFO]  PatchLogExporter - patch (v23913)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 13:05:01 [main] [INFO]  PatchLogExporter - patch (v23913)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 13:05:01 [main] [INFO]  PatchLogExporter - patch (v23913)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 13:05:01 [main] [INFO]  PatchLogExporter - patch (v23913)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -106,13 +106,24 @@
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
-            return result;
+            verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +135,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,7 +191,6 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -228,6 +237,7 @@
 
         double delta = x1 - x0;
         double oldDelta = delta;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
 
         int i = 0;
         while (i < maximalIterationCount) {
@@ -235,8 +245,21 @@
                 // use the bracket point if is better than last approximation
                 x0 = x1;
                 x1 = x2;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
                 x2 = x0;
-                y0 = y1;
+                this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				y0 = y1;
                 y1 = y2;
                 y2 = y0;
             }
2023-08-02 13:05:01 [main] [INFO]  PatchLogExporter - patch (v24142)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 13:05:01 [main] [INFO]  PatchLogExporter - patch (v24142)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 13:05:01 [main] [INFO]  PatchLogExporter - patch (v24142)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 13:05:01 [main] [INFO]  PatchLogExporter - patch (v24142)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -106,13 +106,20 @@
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
-            return result;
+            verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +131,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -228,6 +234,7 @@
 
         double delta = x1 - x0;
         double oldDelta = delta;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
 
         int i = 0;
         while (i < maximalIterationCount) {
@@ -235,8 +242,28 @@
                 // use the bracket point if is better than last approximation
                 x0 = x1;
                 x1 = x2;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
                 x2 = x0;
-                y0 = y1;
+                this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				y0 = y1;
                 y1 = y2;
                 y2 = y0;
             }
2023-08-02 13:05:01 [main] [INFO]  PatchLogExporter - patch (v24419)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 13:05:01 [main] [INFO]  PatchLogExporter - patch (v24419)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 13:05:01 [main] [INFO]  PatchLogExporter - patch (v24419)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 13:05:01 [main] [INFO]  PatchLogExporter - patch (v24419)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -106,13 +106,25 @@
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
-            return result;
+            verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +136,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -228,6 +239,9 @@
 
         double delta = x1 - x0;
         double oldDelta = delta;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
 
         int i = 0;
         while (i < maximalIterationCount) {
@@ -235,8 +249,21 @@
                 // use the bracket point if is better than last approximation
                 x0 = x1;
                 x1 = x2;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
                 x2 = x0;
-                y0 = y1;
+                this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				y0 = y1;
                 y1 = y2;
                 y2 = y0;
             }
2023-08-02 13:05:01 [main] [INFO]  PatchLogExporter - patch (v24430)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 13:05:01 [main] [INFO]  PatchLogExporter - patch (v24430)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 13:05:01 [main] [INFO]  PatchLogExporter - patch (v24430)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 13:05:01 [main] [INFO]  PatchLogExporter - patch (v24430)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -106,13 +106,31 @@
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
-            return result;
+            verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +142,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -228,6 +245,8 @@
 
         double delta = x1 - x0;
         double oldDelta = delta;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
 
         int i = 0;
         while (i < maximalIterationCount) {
@@ -235,8 +254,17 @@
                 // use the bracket point if is better than last approximation
                 x0 = x1;
                 x1 = x2;
+				this.resultComputed = true;
                 x2 = x0;
-                y0 = y1;
+                this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				y0 = y1;
                 y1 = y2;
                 y2 = y0;
             }
2023-08-02 13:05:01 [main] [INFO]  PatchLogExporter - patch (v24510)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 13:05:01 [main] [INFO]  PatchLogExporter - patch (v24510)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 13:05:01 [main] [INFO]  PatchLogExporter - patch (v24510)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 13:05:01 [main] [INFO]  PatchLogExporter - patch (v24510)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -99,20 +99,34 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
-            return result;
+            verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +138,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,7 +194,6 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -228,6 +240,7 @@
 
         double delta = x1 - x0;
         double oldDelta = delta;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
 
         int i = 0;
         while (i < maximalIterationCount) {
@@ -235,8 +248,18 @@
                 // use the bracket point if is better than last approximation
                 x0 = x1;
                 x1 = x2;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
                 x2 = x0;
-                y0 = y1;
+                this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				y0 = y1;
                 y1 = y2;
                 y2 = y0;
             }
2023-08-02 13:05:01 [main] [INFO]  PatchLogExporter - patch (v24525)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 13:05:01 [main] [INFO]  PatchLogExporter - patch (v24525)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 13:05:01 [main] [INFO]  PatchLogExporter - patch (v24525)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 13:05:01 [main] [INFO]  PatchLogExporter - patch (v24525)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -106,13 +106,27 @@
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
-            return result;
+            verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +138,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,8 +194,7 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
-                ret = max;
+                return result;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
@@ -228,6 +240,10 @@
 
         double delta = x1 - x0;
         double oldDelta = delta;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
 
         int i = 0;
         while (i < maximalIterationCount) {
@@ -235,8 +251,18 @@
                 // use the bracket point if is better than last approximation
                 x0 = x1;
                 x1 = x2;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
                 x2 = x0;
-                y0 = y1;
+                this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				y0 = y1;
                 y1 = y2;
                 y2 = y0;
             }
2023-08-02 13:05:01 [main] [INFO]  PatchLogExporter - patch (v24927)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 13:05:01 [main] [INFO]  PatchLogExporter - patch (v24927)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 13:05:01 [main] [INFO]  PatchLogExporter - patch (v24927)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 13:05:01 [main] [INFO]  PatchLogExporter - patch (v24927)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -106,13 +106,22 @@
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
-            return result;
+            verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +133,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,7 +189,6 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -228,6 +235,7 @@
 
         double delta = x1 - x0;
         double oldDelta = delta;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
 
         int i = 0;
         while (i < maximalIterationCount) {
@@ -235,13 +243,32 @@
                 // use the bracket point if is better than last approximation
                 x0 = x1;
                 x1 = x2;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
                 x2 = x0;
-                y0 = y1;
+                this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				y0 = y1;
                 y1 = y2;
                 y2 = y0;
             }
             if (Math.abs(y1) <= functionValueAccuracy) {
-                // Avoid division by very small values. Assume
+                resultComputed = true;
+				// Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
2023-08-02 13:05:01 [main] [INFO]  PatchLogExporter - patch (v25233)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 13:05:01 [main] [INFO]  PatchLogExporter - patch (v25233)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 13:05:01 [main] [INFO]  PatchLogExporter - patch (v25233)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 13:05:01 [main] [INFO]  PatchLogExporter - patch (v25233)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -106,13 +106,22 @@
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
-            return result;
+            verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +133,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,7 +189,6 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -228,6 +235,8 @@
 
         double delta = x1 - x0;
         double oldDelta = delta;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
 
         int i = 0;
         while (i < maximalIterationCount) {
@@ -235,8 +244,26 @@
                 // use the bracket point if is better than last approximation
                 x0 = x1;
                 x1 = x2;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
                 x2 = x0;
-                y0 = y1;
+                this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				y0 = y1;
                 y1 = y2;
                 y2 = y0;
             }
2023-08-02 13:05:01 [main] [INFO]  PatchLogExporter - patch (v25311)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -77,7 +77,6 @@
         }
         this.f = f;
         this.defaultFunctionValueAccuracy = 1.0e-15;
-        this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
     /**
2023-08-02 13:05:01 [main] [INFO]  PatchLogExporter - patch (v25311)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 13:05:01 [main] [INFO]  PatchLogExporter - patch (v25311)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 13:05:01 [main] [INFO]  PatchLogExporter - patch (v25311)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 13:05:01 [main] [INFO]  PatchLogExporter - patch (v25311)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -106,13 +106,22 @@
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
-            return result;
+            verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +133,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,7 +189,6 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -228,6 +235,8 @@
 
         double delta = x1 - x0;
         double oldDelta = delta;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
 
         int i = 0;
         while (i < maximalIterationCount) {
@@ -235,8 +244,26 @@
                 // use the bracket point if is better than last approximation
                 x0 = x1;
                 x1 = x2;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
                 x2 = x0;
-                y0 = y1;
+                this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				y0 = y1;
                 y1 = y2;
                 y2 = y0;
             }
2023-08-02 13:05:02 [main] [INFO]  PatchLogExporter - patch (v25520)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 13:05:02 [main] [INFO]  PatchLogExporter - patch (v25520)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 13:05:02 [main] [INFO]  PatchLogExporter - patch (v25520)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -60,7 +60,6 @@
     protected ConvergingAlgorithmImpl(final int defaultMaximalIterationCount,
                                       final double defaultAbsoluteAccuracy) {
         this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
-        this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
2023-08-02 13:05:02 [main] [INFO]  PatchLogExporter - patch (v25520)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 13:05:02 [main] [INFO]  PatchLogExporter - patch (v25520)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -106,13 +106,26 @@
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
-            return result;
+            verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +137,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -228,6 +240,8 @@
 
         double delta = x1 - x0;
         double oldDelta = delta;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
 
         int i = 0;
         while (i < maximalIterationCount) {
@@ -235,8 +249,21 @@
                 // use the bracket point if is better than last approximation
                 x0 = x1;
                 x1 = x2;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
                 x2 = x0;
-                y0 = y1;
+                this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				y0 = y1;
                 y1 = y2;
                 y2 = y0;
             }
2023-08-02 13:05:02 [main] [INFO]  PatchLogExporter - patch (v25525)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -246,10 +246,6 @@
 
         verifyInterval(lower, upper);
         if (!isBracketing(lower, upper, function)) {
-            throw MathRuntimeException.createIllegalArgumentException(
-                    "function values at endpoints do not have different signs.  " +
-                    "Endpoints: [{0}, {1}], Values: [{2}, {3}]",
-                    lower, upper, function.value(lower), function.value(upper));
         }
     }
 }
2023-08-02 13:05:02 [main] [INFO]  PatchLogExporter - patch (v25525)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 13:05:02 [main] [INFO]  PatchLogExporter - patch (v25525)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 13:05:02 [main] [INFO]  PatchLogExporter - patch (v25525)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -60,7 +60,6 @@
     protected ConvergingAlgorithmImpl(final int defaultMaximalIterationCount,
                                       final double defaultAbsoluteAccuracy) {
         this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
-        this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
2023-08-02 13:05:02 [main] [INFO]  PatchLogExporter - patch (v25525)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 13:05:02 [main] [INFO]  PatchLogExporter - patch (v25525)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -99,20 +99,28 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
-            return result;
+            verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +132,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -228,6 +235,7 @@
 
         double delta = x1 - x0;
         double oldDelta = delta;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
 
         int i = 0;
         while (i < maximalIterationCount) {
@@ -235,8 +243,26 @@
                 // use the bracket point if is better than last approximation
                 x0 = x1;
                 x1 = x2;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
                 x2 = x0;
-                y0 = y1;
+                this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				y0 = y1;
                 y1 = y2;
                 y2 = y0;
             }
2023-08-02 13:05:02 [main] [INFO]  PatchLogExporter - patch (v25707)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -77,7 +77,6 @@
         }
         this.f = f;
         this.defaultFunctionValueAccuracy = 1.0e-15;
-        this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
     /**
@@ -246,10 +245,6 @@
 
         verifyInterval(lower, upper);
         if (!isBracketing(lower, upper, function)) {
-            throw MathRuntimeException.createIllegalArgumentException(
-                    "function values at endpoints do not have different signs.  " +
-                    "Endpoints: [{0}, {1}], Values: [{2}, {3}]",
-                    lower, upper, function.value(lower), function.value(upper));
         }
     }
 }
2023-08-02 13:05:02 [main] [INFO]  PatchLogExporter - patch (v25707)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 13:05:02 [main] [INFO]  PatchLogExporter - patch (v25707)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 13:05:02 [main] [INFO]  PatchLogExporter - patch (v25707)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 13:05:02 [main] [INFO]  PatchLogExporter - patch (v25707)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -106,13 +106,24 @@
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
-            return result;
+            verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +135,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,7 +191,6 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -228,6 +237,7 @@
 
         double delta = x1 - x0;
         double oldDelta = delta;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
 
         int i = 0;
         while (i < maximalIterationCount) {
@@ -235,8 +245,24 @@
                 // use the bracket point if is better than last approximation
                 x0 = x1;
                 x1 = x2;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
                 x2 = x0;
-                y0 = y1;
+                this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				y0 = y1;
                 y1 = y2;
                 y2 = y0;
             }
2023-08-02 13:05:02 [main] [INFO]  PatchLogExporter - patch (v25720)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 13:05:02 [main] [INFO]  PatchLogExporter - patch (v25720)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 13:05:02 [main] [INFO]  PatchLogExporter - patch (v25720)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -60,7 +60,6 @@
     protected ConvergingAlgorithmImpl(final int defaultMaximalIterationCount,
                                       final double defaultAbsoluteAccuracy) {
         this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
-        this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
2023-08-02 13:05:02 [main] [INFO]  PatchLogExporter - patch (v25720)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 13:05:02 [main] [INFO]  PatchLogExporter - patch (v25720)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -106,13 +106,21 @@
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
-            return result;
+            verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +132,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -228,6 +235,9 @@
 
         double delta = x1 - x0;
         double oldDelta = delta;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
 
         int i = 0;
         while (i < maximalIterationCount) {
@@ -235,8 +245,26 @@
                 // use the bracket point if is better than last approximation
                 x0 = x1;
                 x1 = x2;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
                 x2 = x0;
-                y0 = y1;
+                this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				y0 = y1;
                 y1 = y2;
                 y2 = y0;
             }
2023-08-02 13:05:02 [main] [INFO]  PatchLogExporter - patch (v25836)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -77,7 +77,6 @@
         }
         this.f = f;
         this.defaultFunctionValueAccuracy = 1.0e-15;
-        this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
     /**
@@ -246,10 +245,6 @@
 
         verifyInterval(lower, upper);
         if (!isBracketing(lower, upper, function)) {
-            throw MathRuntimeException.createIllegalArgumentException(
-                    "function values at endpoints do not have different signs.  " +
-                    "Endpoints: [{0}, {1}], Values: [{2}, {3}]",
-                    lower, upper, function.value(lower), function.value(upper));
         }
     }
 }
2023-08-02 13:05:02 [main] [INFO]  PatchLogExporter - patch (v25836)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 13:05:02 [main] [INFO]  PatchLogExporter - patch (v25836)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 13:05:02 [main] [INFO]  PatchLogExporter - patch (v25836)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 13:05:02 [main] [INFO]  PatchLogExporter - patch (v25836)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -106,13 +106,25 @@
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
-            return result;
+            verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			clearResult();
+			return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +136,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,7 +192,6 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -228,6 +238,7 @@
 
         double delta = x1 - x0;
         double oldDelta = delta;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
 
         int i = 0;
         while (i < maximalIterationCount) {
@@ -235,8 +246,24 @@
                 // use the bracket point if is better than last approximation
                 x0 = x1;
                 x1 = x2;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
                 x2 = x0;
-                y0 = y1;
+                this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				y0 = y1;
                 y1 = y2;
                 y2 = y0;
             }
2023-08-02 13:05:02 [main] [INFO]  PatchLogExporter - patch (v26103)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -77,7 +77,6 @@
         }
         this.f = f;
         this.defaultFunctionValueAccuracy = 1.0e-15;
-        this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
     /**
2023-08-02 13:05:02 [main] [INFO]  PatchLogExporter - patch (v26103)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 13:05:02 [main] [INFO]  PatchLogExporter - patch (v26103)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 13:05:02 [main] [INFO]  PatchLogExporter - patch (v26103)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -63,7 +63,6 @@
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
-        this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
         this.iterationCount = 0;
     }
2023-08-02 13:05:02 [main] [INFO]  PatchLogExporter - patch (v26103)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 13:05:02 [main] [INFO]  PatchLogExporter - patch (v26103)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -99,20 +99,28 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
-            return result;
+            verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +132,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -165,7 +172,6 @@
         throws MaxIterationsExceededException,
         FunctionEvaluationException {
 
-        clearResult();
         verifyInterval(min, max);
 
         double ret = Double.NaN;
@@ -228,6 +234,8 @@
 
         double delta = x1 - x0;
         double oldDelta = delta;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
 
         int i = 0;
         while (i < maximalIterationCount) {
@@ -235,8 +243,24 @@
                 // use the bracket point if is better than last approximation
                 x0 = x1;
                 x1 = x2;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
                 x2 = x0;
-                y0 = y1;
+                this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				y0 = y1;
                 y1 = y2;
                 y2 = y0;
             }
2023-08-02 13:05:02 [main] [INFO]  PatchLogExporter - patch (v27301)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,6 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
2023-08-02 13:05:02 [main] [INFO]  PatchLogExporter - patch (v27301)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 13:05:02 [main] [INFO]  PatchLogExporter - patch (v27301)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 13:05:02 [main] [INFO]  PatchLogExporter - patch (v27301)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 13:05:02 [main] [INFO]  PatchLogExporter - patch (v27301)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -99,20 +99,31 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
-            return result;
+            verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +135,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -228,6 +238,7 @@
 
         double delta = x1 - x0;
         double oldDelta = delta;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
 
         int i = 0;
         while (i < maximalIterationCount) {
@@ -235,8 +246,23 @@
                 // use the bracket point if is better than last approximation
                 x0 = x1;
                 x1 = x2;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
                 x2 = x0;
-                y0 = y1;
+                this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				y0 = y1;
                 y1 = y2;
                 y2 = y0;
             }
2023-08-02 13:05:02 [main] [INFO]  PatchLogExporter - patch (v27716)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -77,7 +77,6 @@
         }
         this.f = f;
         this.defaultFunctionValueAccuracy = 1.0e-15;
-        this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
     /**
2023-08-02 13:05:02 [main] [INFO]  PatchLogExporter - patch (v27716)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 13:05:02 [main] [INFO]  PatchLogExporter - patch (v27716)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 13:05:02 [main] [INFO]  PatchLogExporter - patch (v27716)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -60,7 +60,6 @@
     protected ConvergingAlgorithmImpl(final int defaultMaximalIterationCount,
                                       final double defaultAbsoluteAccuracy) {
         this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
-        this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
2023-08-02 13:05:02 [main] [INFO]  PatchLogExporter - patch (v27716)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 13:05:02 [main] [INFO]  PatchLogExporter - patch (v27716)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -106,13 +106,26 @@
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
-            return result;
+            verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +137,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -228,6 +240,7 @@
 
         double delta = x1 - x0;
         double oldDelta = delta;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
 
         int i = 0;
         while (i < maximalIterationCount) {
@@ -235,8 +248,24 @@
                 // use the bracket point if is better than last approximation
                 x0 = x1;
                 x1 = x2;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
                 x2 = x0;
-                y0 = y1;
+                this.defaultFunctionValueAccuracy = 1.0e-15;
+				double oldx = Double.POSITIVE_INFINITY;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				y0 = y1;
                 y1 = y2;
                 y2 = y0;
             }
2023-08-02 13:05:02 [main] [INFO]  PatchLogExporter - patch (v28017)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,6 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
2023-08-02 13:05:02 [main] [INFO]  PatchLogExporter - patch (v28017)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 13:05:02 [main] [INFO]  PatchLogExporter - patch (v28017)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 13:05:02 [main] [INFO]  PatchLogExporter - patch (v28017)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 13:05:02 [main] [INFO]  PatchLogExporter - patch (v28017)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -99,20 +99,31 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
-            return result;
+            verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			iterationCount += this.iterationCount;
+			return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +135,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -228,6 +238,7 @@
 
         double delta = x1 - x0;
         double oldDelta = delta;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
 
         int i = 0;
         while (i < maximalIterationCount) {
@@ -235,8 +246,27 @@
                 // use the bracket point if is better than last approximation
                 x0 = x1;
                 x1 = x2;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
                 x2 = x0;
-                y0 = y1;
+                this.defaultFunctionValueAccuracy = 1.0e-15;
+				double oldx = Double.POSITIVE_INFINITY;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				y0 = y1;
                 y1 = y2;
                 y2 = y0;
             }
2023-08-02 13:05:02 [main] [INFO]  PatchLogExporter - patch (v28921)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -139,7 +139,6 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
-        this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
 
2023-08-02 13:05:02 [main] [INFO]  PatchLogExporter - patch (v28921)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 13:05:02 [main] [INFO]  PatchLogExporter - patch (v28921)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 13:05:02 [main] [INFO]  PatchLogExporter - patch (v28921)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 13:05:02 [main] [INFO]  PatchLogExporter - patch (v28921)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -106,13 +106,25 @@
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
-            return result;
+            verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +136,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,7 +192,6 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -228,6 +238,9 @@
 
         double delta = x1 - x0;
         double oldDelta = delta;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
 
         int i = 0;
         while (i < maximalIterationCount) {
@@ -235,8 +248,25 @@
                 // use the bracket point if is better than last approximation
                 x0 = x1;
                 x1 = x2;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
                 x2 = x0;
-                y0 = y1;
+                this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				y0 = y1;
                 y1 = y2;
                 y2 = y0;
             }
2023-08-02 13:05:02 [main] [INFO]  PatchLogExporter - patch (v28929)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -139,7 +139,6 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
-        this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
 
@@ -154,7 +153,6 @@
                                    final int iterationCount) {
         this.result         = x;
         this.functionValue  = fx;
-        this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
 
2023-08-02 13:05:02 [main] [INFO]  PatchLogExporter - patch (v28929)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 13:05:02 [main] [INFO]  PatchLogExporter - patch (v28929)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 13:05:02 [main] [INFO]  PatchLogExporter - patch (v28929)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 13:05:02 [main] [INFO]  PatchLogExporter - patch (v28929)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -106,13 +106,18 @@
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
-            return result;
+            verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +129,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -183,6 +187,7 @@
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
                 setResult(max, 0);
                 ret = max;
+				return max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
                 throw MathRuntimeException.createIllegalArgumentException(
@@ -228,6 +233,7 @@
 
         double delta = x1 - x0;
         double oldDelta = delta;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
 
         int i = 0;
         while (i < maximalIterationCount) {
@@ -235,8 +241,35 @@
                 // use the bracket point if is better than last approximation
                 x0 = x1;
                 x1 = x2;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
                 x2 = x0;
-                y0 = y1;
+                this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				y0 = y1;
                 y1 = y2;
                 y2 = y0;
             }
2023-08-02 13:05:02 [main] [INFO]  PatchLogExporter - patch (v31347)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 13:05:02 [main] [INFO]  PatchLogExporter - patch (v31347)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 13:05:02 [main] [INFO]  PatchLogExporter - patch (v31347)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 13:05:02 [main] [INFO]  PatchLogExporter - patch (v31347)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -106,13 +106,24 @@
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
-            return result;
+            verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +135,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -228,6 +238,9 @@
 
         double delta = x1 - x0;
         double oldDelta = delta;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
 
         int i = 0;
         while (i < maximalIterationCount) {
@@ -235,8 +248,32 @@
                 // use the bracket point if is better than last approximation
                 x0 = x1;
                 x1 = x2;
+				this.resultComputed = true;
+				this.resultComputed = false;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
                 x2 = x0;
-                y0 = y1;
+                this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				y0 = y1;
                 y1 = y2;
                 y2 = y0;
             }
2023-08-02 13:05:02 [main] [INFO]  PatchLogExporter - patch (v31702)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 13:05:02 [main] [INFO]  PatchLogExporter - patch (v31702)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 13:05:02 [main] [INFO]  PatchLogExporter - patch (v31702)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 13:05:02 [main] [INFO]  PatchLogExporter - patch (v31702)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -106,13 +106,25 @@
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
-            return result;
+            verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +136,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -228,6 +239,8 @@
 
         double delta = x1 - x0;
         double oldDelta = delta;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
 
         int i = 0;
         while (i < maximalIterationCount) {
@@ -235,8 +248,33 @@
                 // use the bracket point if is better than last approximation
                 x0 = x1;
                 x1 = x2;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
                 x2 = x0;
-                y0 = y1;
+                this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				y0 = y1;
                 y1 = y2;
                 y2 = y0;
             }
2023-08-02 13:05:02 [main] [INFO]  PatchLogExporter - patch (v32128)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 13:05:02 [main] [INFO]  PatchLogExporter - patch (v32128)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 13:05:02 [main] [INFO]  PatchLogExporter - patch (v32128)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 13:05:02 [main] [INFO]  PatchLogExporter - patch (v32128)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -106,13 +106,20 @@
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
-            return result;
+            verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +131,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,7 +187,6 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -228,15 +233,45 @@
 
         double delta = x1 - x0;
         double oldDelta = delta;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
 
-        int i = 0;
+        clearResult();
+		int i = 0;
         while (i < maximalIterationCount) {
             if (Math.abs(y2) < Math.abs(y1)) {
                 // use the bracket point if is better than last approximation
                 x0 = x1;
                 x1 = x2;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
                 x2 = x0;
-                y0 = y1;
+                this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				y0 = y1;
                 y1 = y2;
                 y2 = y0;
             }
@@ -245,7 +280,6 @@
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
-                return result;
             }
             double dx = x2 - x1;
             double tolerance =
2023-08-02 13:05:02 [main] [INFO]  PatchLogExporter - patch (v32427)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 13:05:02 [main] [INFO]  PatchLogExporter - patch (v32427)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 13:05:02 [main] [INFO]  PatchLogExporter - patch (v32427)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 13:05:02 [main] [INFO]  PatchLogExporter - patch (v32427)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -106,13 +106,21 @@
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
-            return result;
+            verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +132,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -228,6 +235,8 @@
 
         double delta = x1 - x0;
         double oldDelta = delta;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
 
         int i = 0;
         while (i < maximalIterationCount) {
@@ -235,8 +244,36 @@
                 // use the bracket point if is better than last approximation
                 x0 = x1;
                 x1 = x2;
-                x2 = x0;
-                y0 = y1;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				x2 = x0;
+                this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				y0 = y1;
                 y1 = y2;
                 y2 = y0;
             }
2023-08-02 13:05:02 [main] [INFO]  PatchLogExporter - patch (v32707)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 13:05:02 [main] [INFO]  PatchLogExporter - patch (v32707)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 13:05:02 [main] [INFO]  PatchLogExporter - patch (v32707)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 13:05:02 [main] [INFO]  PatchLogExporter - patch (v32707)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -106,13 +106,27 @@
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
-            return result;
+            verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			double fmin;
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +138,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -228,6 +241,8 @@
 
         double delta = x1 - x0;
         double oldDelta = delta;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
 
         int i = 0;
         while (i < maximalIterationCount) {
@@ -235,8 +250,32 @@
                 // use the bracket point if is better than last approximation
                 x0 = x1;
                 x1 = x2;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
                 x2 = x0;
-                y0 = y1;
+                this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				y0 = y1;
                 y1 = y2;
                 y2 = y0;
             }
2023-08-02 13:05:02 [main] [INFO]  PatchLogExporter - patch (v33545)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -139,7 +139,6 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
-        this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
 
2023-08-02 13:05:02 [main] [INFO]  PatchLogExporter - patch (v33545)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 13:05:02 [main] [INFO]  PatchLogExporter - patch (v33545)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 13:05:02 [main] [INFO]  PatchLogExporter - patch (v33545)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 13:05:02 [main] [INFO]  PatchLogExporter - patch (v33545)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -106,15 +106,25 @@
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
-            return result;
+            verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
-        if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
-            return result;
-        }
+        if (Math.abs(yMin) <= functionValueAccuracy)
 
         // reduce interval if min and initial bracket the root
         if (yInitial * yMin < 0) {
@@ -124,7 +134,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -228,6 +237,9 @@
 
         double delta = x1 - x0;
         double oldDelta = delta;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
 
         int i = 0;
         while (i < maximalIterationCount) {
@@ -235,8 +247,32 @@
                 // use the bracket point if is better than last approximation
                 x0 = x1;
                 x1 = x2;
-                x2 = x0;
-                y0 = y1;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				x2 = x0;
+                this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				y0 = y1;
                 y1 = y2;
                 y2 = y0;
             }
2023-08-02 13:05:02 [main] [INFO]  PatchLogExporter - patch (v33708)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -139,7 +139,6 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
-        this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
 
2023-08-02 13:05:02 [main] [INFO]  PatchLogExporter - patch (v33708)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 13:05:02 [main] [INFO]  PatchLogExporter - patch (v33708)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 13:05:02 [main] [INFO]  PatchLogExporter - patch (v33708)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 13:05:02 [main] [INFO]  PatchLogExporter - patch (v33708)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -106,13 +106,23 @@
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
-            return result;
+            verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
+            clearResult();
             return result;
         }
 
@@ -124,7 +134,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -228,6 +237,9 @@
 
         double delta = x1 - x0;
         double oldDelta = delta;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
 
         int i = 0;
         while (i < maximalIterationCount) {
@@ -235,8 +247,38 @@
                 // use the bracket point if is better than last approximation
                 x0 = x1;
                 x1 = x2;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
                 x2 = x0;
-                y0 = y1;
+                this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				y0 = y1;
                 y1 = y2;
                 y2 = y0;
             }
2023-08-02 13:05:02 [main] [INFO]  PatchLogExporter - patch (v33725)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -139,7 +139,6 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
-        this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
 
2023-08-02 13:05:02 [main] [INFO]  PatchLogExporter - patch (v33725)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 13:05:02 [main] [INFO]  PatchLogExporter - patch (v33725)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 13:05:02 [main] [INFO]  PatchLogExporter - patch (v33725)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 13:05:02 [main] [INFO]  PatchLogExporter - patch (v33725)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -106,15 +106,27 @@
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
-            return result;
+            verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
-        if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
-            return result;
-        }
+        if (Math.abs(yMin) <= functionValueAccuracy)
 
         // reduce interval if min and initial bracket the root
         if (yInitial * yMin < 0) {
@@ -124,7 +136,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -228,6 +239,11 @@
 
         double delta = x1 - x0;
         double oldDelta = delta;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
 
         int i = 0;
         while (i < maximalIterationCount) {
@@ -235,8 +251,27 @@
                 // use the bracket point if is better than last approximation
                 x0 = x1;
                 x1 = x2;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
                 x2 = x0;
-                y0 = y1;
+                this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				y0 = y1;
                 y1 = y2;
                 y2 = y0;
             }
2023-08-02 13:05:02 [main] [INFO]  PatchLogExporter - patch (v34343)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -139,7 +139,6 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
-        this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
 
2023-08-02 13:05:02 [main] [INFO]  PatchLogExporter - patch (v34343)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 13:05:02 [main] [INFO]  PatchLogExporter - patch (v34343)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 13:05:02 [main] [INFO]  PatchLogExporter - patch (v34343)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 13:05:02 [main] [INFO]  PatchLogExporter - patch (v34343)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -106,13 +106,26 @@
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
-            return result;
+            verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
+            clearResult();
             return result;
         }
 
@@ -124,7 +137,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -228,6 +240,10 @@
 
         double delta = x1 - x0;
         double oldDelta = delta;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
 
         int i = 0;
         while (i < maximalIterationCount) {
@@ -235,8 +251,33 @@
                 // use the bracket point if is better than last approximation
                 x0 = x1;
                 x1 = x2;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
                 x2 = x0;
-                y0 = y1;
+                this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				y0 = y1;
                 y1 = y2;
                 y2 = y0;
             }
2023-08-02 13:05:02 [main] [INFO]  PatchLogExporter - patch (v35543)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -139,7 +139,6 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
-        this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
 
@@ -154,7 +153,6 @@
                                    final int iterationCount) {
         this.result         = x;
         this.functionValue  = fx;
-        this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
 
2023-08-02 13:05:02 [main] [INFO]  PatchLogExporter - patch (v35543)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 13:05:02 [main] [INFO]  PatchLogExporter - patch (v35543)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 13:05:02 [main] [INFO]  PatchLogExporter - patch (v35543)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 13:05:02 [main] [INFO]  PatchLogExporter - patch (v35543)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -106,15 +106,28 @@
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
-            return result;
+            verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
-        if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
-            return result;
-        }
+        if (Math.abs(yMin) <= functionValueAccuracy)
 
         // reduce interval if min and initial bracket the root
         if (yInitial * yMin < 0) {
@@ -124,7 +137,7 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
+            resultComputed = true;
             return result;
         }
 
@@ -228,6 +241,8 @@
 
         double delta = x1 - x0;
         double oldDelta = delta;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
 
         int i = 0;
         while (i < maximalIterationCount) {
@@ -235,8 +250,31 @@
                 // use the bracket point if is better than last approximation
                 x0 = x1;
                 x1 = x2;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
                 x2 = x0;
-                y0 = y1;
+                this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				y0 = y1;
                 y1 = y2;
                 y2 = y0;
             }
2023-08-02 13:05:02 [main] [INFO]  PatchLogExporter - patch (v35929)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -139,7 +139,6 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
-        this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
 
@@ -154,7 +153,6 @@
                                    final int iterationCount) {
         this.result         = x;
         this.functionValue  = fx;
-        this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
 
2023-08-02 13:05:02 [main] [INFO]  PatchLogExporter - patch (v35929)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 13:05:02 [main] [INFO]  PatchLogExporter - patch (v35929)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 13:05:02 [main] [INFO]  PatchLogExporter - patch (v35929)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 13:05:02 [main] [INFO]  PatchLogExporter - patch (v35929)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -106,15 +106,29 @@
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
-            return result;
+            verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
-        if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
-            return result;
-        }
+        if (Math.abs(yMin) <= functionValueAccuracy)
 
         // reduce interval if min and initial bracket the root
         if (yInitial * yMin < 0) {
@@ -124,7 +138,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -228,6 +241,11 @@
 
         double delta = x1 - x0;
         double oldDelta = delta;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
 
         int i = 0;
         while (i < maximalIterationCount) {
@@ -235,8 +253,27 @@
                 // use the bracket point if is better than last approximation
                 x0 = x1;
                 x1 = x2;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
                 x2 = x0;
-                y0 = y1;
+                this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				y0 = y1;
                 y1 = y2;
                 y2 = y0;
             }
2023-08-02 13:05:02 [main] [INFO]  PatchLogExporter - patch (v36340)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,6 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
2023-08-02 13:05:02 [main] [INFO]  PatchLogExporter - patch (v36340)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 13:05:02 [main] [INFO]  PatchLogExporter - patch (v36340)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 13:05:02 [main] [INFO]  PatchLogExporter - patch (v36340)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 13:05:02 [main] [INFO]  PatchLogExporter - patch (v36340)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -106,15 +106,23 @@
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
-            return result;
+            verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
-        if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
-            return result;
-        }
+        if (Math.abs(yMin) <= functionValueAccuracy)
 
         // reduce interval if min and initial bracket the root
         if (yInitial * yMin < 0) {
@@ -124,7 +132,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -181,7 +188,6 @@
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
                 ret = max;
             } else {
                 // neither value is close to zero and min and max do not bracket root.
@@ -228,6 +234,9 @@
 
         double delta = x1 - x0;
         double oldDelta = delta;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
 
         int i = 0;
         while (i < maximalIterationCount) {
@@ -235,8 +244,38 @@
                 // use the bracket point if is better than last approximation
                 x0 = x1;
                 x1 = x2;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
                 x2 = x0;
-                y0 = y1;
+                this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				y0 = y1;
                 y1 = y2;
                 y2 = y0;
             }
2023-08-02 13:05:02 [main] [INFO]  PatchLogExporter - patch (v36703)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -139,7 +139,6 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
-        this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
 
2023-08-02 13:05:02 [main] [INFO]  PatchLogExporter - patch (v36703)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 13:05:02 [main] [INFO]  PatchLogExporter - patch (v36703)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 13:05:02 [main] [INFO]  PatchLogExporter - patch (v36703)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 13:05:02 [main] [INFO]  PatchLogExporter - patch (v36703)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -106,15 +106,29 @@
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
-            return result;
+            verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
-        if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
-            return result;
-        }
+        if (Math.abs(yMin) <= functionValueAccuracy)
 
         // reduce interval if min and initial bracket the root
         if (yInitial * yMin < 0) {
@@ -124,7 +138,7 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
+            clearResult();
             return result;
         }
 
@@ -228,6 +242,11 @@
 
         double delta = x1 - x0;
         double oldDelta = delta;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
 
         int i = 0;
         while (i < maximalIterationCount) {
@@ -235,8 +254,31 @@
                 // use the bracket point if is better than last approximation
                 x0 = x1;
                 x1 = x2;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
                 x2 = x0;
-                y0 = y1;
+                this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				y0 = y1;
                 y1 = y2;
                 y2 = y0;
             }
2023-08-02 13:05:02 [main] [INFO]  PatchLogExporter - patch (v36740)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -139,7 +139,6 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
-        this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
 
2023-08-02 13:05:02 [main] [INFO]  PatchLogExporter - patch (v36740)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 13:05:02 [main] [INFO]  PatchLogExporter - patch (v36740)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 13:05:02 [main] [INFO]  PatchLogExporter - patch (v36740)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 13:05:02 [main] [INFO]  PatchLogExporter - patch (v36740)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -106,15 +106,27 @@
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
-            return result;
+            verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
-        if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
-            return result;
-        }
+        if (Math.abs(yMin) <= functionValueAccuracy)
 
         // reduce interval if min and initial bracket the root
         if (yInitial * yMin < 0) {
@@ -124,7 +136,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -228,6 +239,16 @@
 
         double delta = x1 - x0;
         double oldDelta = delta;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
 
         int i = 0;
         while (i < maximalIterationCount) {
@@ -235,8 +256,28 @@
                 // use the bracket point if is better than last approximation
                 x0 = x1;
                 x1 = x2;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
                 x2 = x0;
-                y0 = y1;
+                this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				y0 = y1;
                 y1 = y2;
                 y2 = y0;
             }
2023-08-02 13:05:02 [main] [INFO]  PatchLogExporter - patch (v37123)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -174,4 +174,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 13:05:02 [main] [INFO]  PatchLogExporter - patch (v37123)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 13:05:02 [main] [INFO]  PatchLogExporter - patch (v37123)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 13:05:02 [main] [INFO]  PatchLogExporter - patch (v37123)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -106,13 +106,29 @@
         double yInitial = f.value(initial);
         if (Math.abs(yInitial) <= functionValueAccuracy) {
             setResult(initial, 0);
-            return result;
+            verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			verifySequence(min, initial, max);
+			return result;
         }
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
             return result;
         }
 
@@ -124,7 +140,6 @@
         // return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
             return result;
         }
 
@@ -228,6 +243,12 @@
 
         double delta = x1 - x0;
         double oldDelta = delta;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
+		this.defaultFunctionValueAccuracy = 1.0e-15;
 
         int i = 0;
         while (i < maximalIterationCount) {
@@ -235,8 +256,33 @@
                 // use the bracket point if is better than last approximation
                 x0 = x1;
                 x1 = x2;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
+				this.resultComputed = true;
                 x2 = x0;
-                y0 = y1;
+                this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				this.defaultFunctionValueAccuracy = 1.0e-15;
+				y0 = y1;
                 y1 = y2;
                 y2 = y0;
             }
2023-08-02 13:05:02 [main] [INFO]  KGenProgMain - Summary
Reached generation = 373
Generated variants = 37123
Syntax valid variants = 32580
Build succeeded variants = 20051
Time elapsed = 2 hours 27 minutes 44 seconds
Exit status = SUCCESS
