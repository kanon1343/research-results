2023-08-02 14:30:11 [main] [WARN]  Configuration$Builder - The directory where kGenProg is running is different from the root directory of the given target project.
2023-08-02 14:30:11 [main] [WARN]  Configuration$Builder - If the target project includes test cases with file I/O, such test cases won't run correctly.
2023-08-02 14:30:11 [main] [WARN]  Configuration$Builder - We recommend you running kGenProg with the root directory of the target project as the current directory.
2023-08-02 14:30:11 [main] [INFO]  KGenProgMain - 
==================== kGenProg Configuration ====================
configPath = /Users/haradakanon/Downloads/kGenProg-1.8.2/example/math78/kgenprog-78.toml (set by command line)
rootDir = /Users/haradakanon/Downloads/kGenProg-1.8.2/example/math78 (set in config file)
productPaths = [/Users/haradakanon/Downloads/kGenProg-1.8.2/example/math78/src/main] (set in config file)
testPaths = [/Users/haradakanon/Downloads/kGenProg-1.8.2/example/math78/src/test] (set in config file)
classPaths = []
executionTests = [org.apache.commons.math.ode.events.EventStateTest] (set in config file)
outDir = kgenprog-out
logLevel = INFO (set in config file)
mutationGeneratingCount = 50 (set in config file)
crossoverGeneratingCount = 50 (set in config file)
headcount = 25
maxGeneration = 500 (set in config file)
timeLimit = PT24H (set in config file)
testTimeLimit = PT3M (set in config file)
requiredSolutionsCount = 100 (set in config file)
randomSeed = 6 (set by command line)
scope = PACKAGE (set in config file)
faultLocalization = Zoltar (set in config file)
mutationType = Simple
crossoverType = Random
firstVariantSelectionStrategy = Random
secondVariantSelectionStrategy = Random
isPatchOutput = true (set in config file)
isHistoryRecord = false
currentDirectory = /Users/haradakanon/Desktop/研究/実験データ/afterResearch
version = 1.8.2
================================================================
2023-08-02 14:30:29 [main] [INFO]  KGenProgMain - initial failed tests (1/1)
org.apache.commons.math.ode.events.EventStateTest.closeEvents: function values at endpoints do not have different signs.  Endpoints: [89.999, 153.1], Values: [-0.066, -1,142.11]

2023-08-02 14:30:29 [main] [INFO]  KGenProgMain - GA started
2023-08-02 14:30:29 [main] [INFO]  KGenProgMain - entered the era of 1st generation.
2023-08-02 14:30:37 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 seconds
Variants: generated 50, build-succeeded 13, build-failed 32, syntax-invalid 2, redundant 3
Fitness: max 1(2), min 0(11), ave 0.154
Test execution time: sum 2103 ms, max 269 ms, min 81 ms
----------------------------------------------------------------

2023-08-02 14:30:37 [main] [INFO]  KGenProgMain - entered the era of 2nd generation.
2023-08-02 14:30:42 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 seconds
Variants: generated 50, build-succeeded 12, build-failed 31, syntax-invalid 3, redundant 4
Fitness: max 0(12), min 0(12), ave 0
Test execution time: sum 1203 ms, max 223 ms, min 63 ms
----------------------------------------------------------------

2023-08-02 14:30:42 [main] [INFO]  KGenProgMain - entered the era of 3rd generation.
2023-08-02 14:30:47 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 17 seconds
Variants: generated 100, build-succeeded 19, build-failed 37, syntax-invalid 1, redundant 43
Fitness: max 1(1), min 0(18), ave 0.053
Test execution time: sum 1396 ms, max 112 ms, min 57 ms
----------------------------------------------------------------

2023-08-02 14:30:47 [main] [INFO]  KGenProgMain - entered the era of 4th generation.
2023-08-02 14:30:51 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 21 seconds
Variants: generated 100, build-succeeded 23, build-failed 34, syntax-invalid 4, redundant 39
Fitness: max 0(23), min 0(23), ave 0
Test execution time: sum 1575 ms, max 117 ms, min 53 ms
----------------------------------------------------------------

2023-08-02 14:30:51 [main] [INFO]  KGenProgMain - entered the era of 5th generation.
2023-08-02 14:30:57 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 27 seconds
Variants: generated 100, build-succeeded 34, build-failed 32, syntax-invalid 2, redundant 32
Fitness: max 0(34), min 0(34), ave 0
Test execution time: sum 2103 ms, max 130 ms, min 53 ms
----------------------------------------------------------------

2023-08-02 14:30:57 [main] [INFO]  KGenProgMain - entered the era of 6th generation.
2023-08-02 14:31:02 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 33 seconds
Variants: generated 100, build-succeeded 39, build-failed 34, syntax-invalid 4, redundant 23
Fitness: max 0(39), min 0(39), ave 0
Test execution time: sum 2375 ms, max 116 ms, min 51 ms
----------------------------------------------------------------

2023-08-02 14:31:02 [main] [INFO]  KGenProgMain - entered the era of 7th generation.
2023-08-02 14:31:08 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 39 seconds
Variants: generated 100, build-succeeded 36, build-failed 32, syntax-invalid 10, redundant 22
Fitness: max 0(36), min 0(36), ave 0
Test execution time: sum 2282 ms, max 274 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 14:31:08 [main] [INFO]  KGenProgMain - entered the era of 8th generation.
2023-08-02 14:31:14 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 44 seconds
Variants: generated 100, build-succeeded 49, build-failed 28, syntax-invalid 3, redundant 20
Fitness: max 0(49), min 0(49), ave 0
Test execution time: sum 2852 ms, max 76 ms, min 51 ms
----------------------------------------------------------------

2023-08-02 14:31:14 [main] [INFO]  KGenProgMain - entered the era of 9th generation.
2023-08-02 14:31:21 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 51 seconds
Variants: generated 100, build-succeeded 48, build-failed 24, syntax-invalid 10, redundant 18
Fitness: max 0(48), min 0(48), ave 0
Test execution time: sum 2841 ms, max 146 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 14:31:21 [main] [INFO]  KGenProgMain - entered the era of 10th generation.
2023-08-02 14:31:27 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 57 seconds
Variants: generated 100, build-succeeded 39, build-failed 31, syntax-invalid 16, redundant 14
Fitness: max 0(39), min 0(39), ave 0
Test execution time: sum 2471 ms, max 222 ms, min 52 ms
----------------------------------------------------------------

2023-08-02 14:31:27 [main] [INFO]  KGenProgMain - entered the era of 11th generation.
2023-08-02 14:31:33 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 minutes 4 seconds
Variants: generated 100, build-succeeded 48, build-failed 33, syntax-invalid 9, redundant 10
Fitness: max 1(1), min 0(47), ave 0.021
Test execution time: sum 2843 ms, max 77 ms, min 51 ms
----------------------------------------------------------------

2023-08-02 14:31:33 [main] [INFO]  KGenProgMain - entered the era of 12th generation.
2023-08-02 14:31:40 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 minutes 10 seconds
Variants: generated 100, build-succeeded 46, build-failed 33, syntax-invalid 6, redundant 15
Fitness: max 0(46), min 0(46), ave 0
Test execution time: sum 2857 ms, max 152 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 14:31:40 [main] [INFO]  KGenProgMain - entered the era of 13th generation.
2023-08-02 14:31:48 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 minutes 18 seconds
Variants: generated 100, build-succeeded 49, build-failed 32, syntax-invalid 7, redundant 12
Fitness: max 0(49), min 0(49), ave 0
Test execution time: sum 3099 ms, max 199 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 14:31:48 [main] [INFO]  KGenProgMain - entered the era of 14th generation.
2023-08-02 14:31:55 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 minutes 26 seconds
Variants: generated 100, build-succeeded 56, build-failed 30, syntax-invalid 4, redundant 10
Fitness: max 0(56), min 0(56), ave 0
Test execution time: sum 3222 ms, max 138 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 14:31:55 [main] [INFO]  KGenProgMain - entered the era of 15th generation.
2023-08-02 14:32:02 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 minutes 32 seconds
Variants: generated 100, build-succeeded 51, build-failed 31, syntax-invalid 12, redundant 6
Fitness: max 1(1), min 0(50), ave 0.02
Test execution time: sum 2828 ms, max 68 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 14:32:02 [main] [INFO]  KGenProgMain - entered the era of 16th generation.
2023-08-02 14:32:10 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 minutes 40 seconds
Variants: generated 100, build-succeeded 55, build-failed 32, syntax-invalid 3, redundant 10
Fitness: max 0(55), min 0(55), ave 0
Test execution time: sum 3250 ms, max 178 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 14:32:10 [main] [INFO]  KGenProgMain - entered the era of 17th generation.
2023-08-02 14:32:17 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 minutes 47 seconds
Variants: generated 100, build-succeeded 59, build-failed 30, syntax-invalid 1, redundant 10
Fitness: max 0(59), min 0(59), ave 0
Test execution time: sum 3491 ms, max 158 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 14:32:17 [main] [INFO]  KGenProgMain - entered the era of 18th generation.
2023-08-02 14:32:25 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 minutes 55 seconds
Variants: generated 100, build-succeeded 60, build-failed 28, syntax-invalid 2, redundant 10
Fitness: max 0(60), min 0(60), ave 0
Test execution time: sum 3363 ms, max 70 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 14:32:25 [main] [INFO]  KGenProgMain - entered the era of 19th generation.
2023-08-02 14:32:34 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 minutes 4 seconds
Variants: generated 100, build-succeeded 59, build-failed 27, syntax-invalid 4, redundant 10
Fitness: max 0(59), min 0(59), ave 0
Test execution time: sum 3537 ms, max 133 ms, min 48 ms
----------------------------------------------------------------

2023-08-02 14:32:34 [main] [INFO]  KGenProgMain - entered the era of 20th generation.
2023-08-02 14:32:41 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 minutes 11 seconds
Variants: generated 100, build-succeeded 53, build-failed 23, syntax-invalid 9, redundant 15
Fitness: max 0(53), min 0(53), ave 0
Test execution time: sum 2954 ms, max 83 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 14:32:41 [main] [INFO]  KGenProgMain - entered the era of 21st generation.
2023-08-02 14:32:49 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 minutes 19 seconds
Variants: generated 100, build-succeeded 52, build-failed 32, syntax-invalid 8, redundant 8
Fitness: max 0(52), min 0(52), ave 0
Test execution time: sum 2983 ms, max 198 ms, min 48 ms
----------------------------------------------------------------

2023-08-02 14:32:49 [main] [INFO]  KGenProgMain - entered the era of 22nd generation.
2023-08-02 14:32:55 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 minutes 25 seconds
Variants: generated 100, build-succeeded 55, build-failed 31, syntax-invalid 6, redundant 8
Fitness: max 0(55), min 0(55), ave 0
Test execution time: sum 2919 ms, max 79 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 14:32:55 [main] [INFO]  KGenProgMain - entered the era of 23rd generation.
2023-08-02 14:33:03 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 minutes 33 seconds
Variants: generated 100, build-succeeded 51, build-failed 34, syntax-invalid 6, redundant 9
Fitness: max 0(51), min 0(51), ave 0
Test execution time: sum 2989 ms, max 209 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 14:33:03 [main] [INFO]  KGenProgMain - entered the era of 24th generation.
2023-08-02 14:33:09 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 minutes 40 seconds
Variants: generated 100, build-succeeded 48, build-failed 29, syntax-invalid 13, redundant 10
Fitness: max 0(48), min 0(48), ave 0
Test execution time: sum 2515 ms, max 71 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 14:33:09 [main] [INFO]  KGenProgMain - entered the era of 25th generation.
2023-08-02 14:33:17 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 minutes 48 seconds
Variants: generated 100, build-succeeded 54, build-failed 27, syntax-invalid 14, redundant 5
Fitness: max 0(54), min 0(54), ave 0
Test execution time: sum 3226 ms, max 254 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 14:33:17 [main] [INFO]  KGenProgMain - entered the era of 26th generation.
2023-08-02 14:33:24 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 minutes 55 seconds
Variants: generated 100, build-succeeded 53, build-failed 31, syntax-invalid 11, redundant 5
Fitness: max 0(53), min 0(53), ave 0
Test execution time: sum 2842 ms, max 75 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 14:33:24 [main] [INFO]  KGenProgMain - entered the era of 27th generation.
2023-08-02 14:33:33 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 minutes 3 seconds
Variants: generated 100, build-succeeded 56, build-failed 26, syntax-invalid 10, redundant 8
Fitness: max 0(56), min 0(56), ave 0
Test execution time: sum 3232 ms, max 140 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 14:33:33 [main] [INFO]  KGenProgMain - entered the era of 28th generation.
2023-08-02 14:33:40 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 minutes 10 seconds
Variants: generated 100, build-succeeded 58, build-failed 28, syntax-invalid 7, redundant 7
Fitness: max 0(58), min 0(58), ave 0
Test execution time: sum 3016 ms, max 70 ms, min 48 ms
----------------------------------------------------------------

2023-08-02 14:33:40 [main] [INFO]  KGenProgMain - entered the era of 29th generation.
2023-08-02 14:33:48 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 minutes 18 seconds
Variants: generated 100, build-succeeded 51, build-failed 32, syntax-invalid 12, redundant 5
Fitness: max 0(51), min 0(51), ave 0
Test execution time: sum 2714 ms, max 81 ms, min 48 ms
----------------------------------------------------------------

2023-08-02 14:33:48 [main] [INFO]  KGenProgMain - entered the era of 30th generation.
2023-08-02 14:33:55 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 minutes 26 seconds
Variants: generated 100, build-succeeded 39, build-failed 36, syntax-invalid 20, redundant 5
Fitness: max 1(1), min 0(38), ave 0.026
Test execution time: sum 2238 ms, max 129 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 14:33:55 [main] [INFO]  KGenProgMain - entered the era of 31st generation.
2023-08-02 14:34:03 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 minutes 34 seconds
Variants: generated 100, build-succeeded 51, build-failed 33, syntax-invalid 12, redundant 4
Fitness: max 0(51), min 0(51), ave 0
Test execution time: sum 2764 ms, max 94 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 14:34:03 [main] [INFO]  KGenProgMain - entered the era of 32nd generation.
2023-08-02 14:34:12 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 minutes 42 seconds
Variants: generated 100, build-succeeded 55, build-failed 26, syntax-invalid 14, redundant 5
Fitness: max 0(55), min 0(55), ave 0
Test execution time: sum 3081 ms, max 70 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 14:34:12 [main] [INFO]  KGenProgMain - entered the era of 33rd generation.
2023-08-02 14:34:20 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 minutes 50 seconds
Variants: generated 100, build-succeeded 44, build-failed 26, syntax-invalid 26, redundant 4
Fitness: max 0(44), min 0(44), ave 0
Test execution time: sum 2457 ms, max 141 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 14:34:20 [main] [INFO]  KGenProgMain - entered the era of 34th generation.
2023-08-02 14:34:28 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 minutes 58 seconds
Variants: generated 100, build-succeeded 45, build-failed 30, syntax-invalid 18, redundant 7
Fitness: max 0(45), min 0(45), ave 0
Test execution time: sum 2381 ms, max 72 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 14:34:28 [main] [INFO]  KGenProgMain - entered the era of 35th generation.
2023-08-02 14:34:35 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 minutes 6 seconds
Variants: generated 100, build-succeeded 53, build-failed 22, syntax-invalid 15, redundant 10
Fitness: max 0(53), min 0(53), ave 0
Test execution time: sum 2900 ms, max 66 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 14:34:35 [main] [INFO]  KGenProgMain - entered the era of 36th generation.
2023-08-02 14:34:44 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 minutes 14 seconds
Variants: generated 100, build-succeeded 52, build-failed 28, syntax-invalid 15, redundant 5
Fitness: max 0(52), min 0(52), ave 0
Test execution time: sum 2882 ms, max 131 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 14:34:44 [main] [INFO]  KGenProgMain - entered the era of 37th generation.
2023-08-02 14:46:52 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 16 minutes 22 seconds
Variants: generated 100, build-succeeded 45, build-failed 27, syntax-invalid 26, redundant 2
Fitness: max 0(45), min 0(45), ave 0
Test execution time: sum 722557 ms, max 180100 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 14:46:52 [main] [INFO]  KGenProgMain - entered the era of 38th generation.
2023-08-02 14:47:01 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 16 minutes 31 seconds
Variants: generated 100, build-succeeded 48, build-failed 29, syntax-invalid 18, redundant 5
Fitness: max 0(48), min 0(48), ave 0
Test execution time: sum 2740 ms, max 74 ms, min 51 ms
----------------------------------------------------------------

2023-08-02 14:47:01 [main] [INFO]  KGenProgMain - entered the era of 39th generation.
2023-08-02 14:47:10 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 16 minutes 41 seconds
Variants: generated 100, build-succeeded 55, build-failed 32, syntax-invalid 10, redundant 3
Fitness: max 0(55), min 0(55), ave 0
Test execution time: sum 3044 ms, max 134 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 14:47:10 [main] [INFO]  KGenProgMain - entered the era of 40th generation.
2023-08-02 14:47:19 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 16 minutes 49 seconds
Variants: generated 100, build-succeeded 47, build-failed 34, syntax-invalid 14, redundant 5
Fitness: max 0(47), min 0(47), ave 0
Test execution time: sum 2511 ms, max 77 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 14:47:19 [main] [INFO]  KGenProgMain - entered the era of 41st generation.
2023-08-02 14:50:29 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 20 minutes 0 seconds
Variants: generated 100, build-succeeded 59, build-failed 26, syntax-invalid 12, redundant 3
Fitness: max 0(59), min 0(59), ave 0
Test execution time: sum 183422 ms, max 180080 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 14:50:29 [main] [INFO]  KGenProgMain - entered the era of 42nd generation.
2023-08-02 14:50:38 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 20 minutes 9 seconds
Variants: generated 100, build-succeeded 56, build-failed 35, syntax-invalid 6, redundant 3
Fitness: max 0(56), min 0(56), ave 0
Test execution time: sum 2941 ms, max 81 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 14:50:38 [main] [INFO]  KGenProgMain - entered the era of 43rd generation.
2023-08-02 14:50:48 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 20 minutes 18 seconds
Variants: generated 100, build-succeeded 57, build-failed 32, syntax-invalid 7, redundant 4
Fitness: max 0(57), min 0(57), ave 0
Test execution time: sum 3118 ms, max 71 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 14:50:48 [main] [INFO]  KGenProgMain - entered the era of 44th generation.
2023-08-02 14:50:58 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 20 minutes 28 seconds
Variants: generated 100, build-succeeded 58, build-failed 31, syntax-invalid 8, redundant 3
Fitness: max 0(58), min 0(58), ave 0
Test execution time: sum 3126 ms, max 169 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 14:50:58 [main] [INFO]  KGenProgMain - entered the era of 45th generation.
2023-08-02 14:51:08 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 20 minutes 38 seconds
Variants: generated 100, build-succeeded 61, build-failed 26, syntax-invalid 10, redundant 3
Fitness: max 0(61), min 0(61), ave 0
Test execution time: sum 3197 ms, max 73 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 14:51:08 [main] [INFO]  KGenProgMain - entered the era of 46th generation.
2023-08-02 14:51:17 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 20 minutes 47 seconds
Variants: generated 100, build-succeeded 54, build-failed 28, syntax-invalid 14, redundant 4
Fitness: max 0(54), min 0(54), ave 0
Test execution time: sum 3122 ms, max 189 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 14:51:17 [main] [INFO]  KGenProgMain - entered the era of 47th generation.
2023-08-02 14:51:26 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 20 minutes 57 seconds
Variants: generated 100, build-succeeded 57, build-failed 32, syntax-invalid 10, redundant 1
Fitness: max 0(57), min 0(57), ave 0
Test execution time: sum 3073 ms, max 75 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 14:51:26 [main] [INFO]  KGenProgMain - entered the era of 48th generation.
2023-08-02 14:51:36 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 21 minutes 7 seconds
Variants: generated 100, build-succeeded 57, build-failed 31, syntax-invalid 9, redundant 3
Fitness: max 0(57), min 0(57), ave 0
Test execution time: sum 3315 ms, max 139 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 14:51:36 [main] [INFO]  KGenProgMain - entered the era of 49th generation.
2023-08-02 14:51:46 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 21 minutes 17 seconds
Variants: generated 100, build-succeeded 54, build-failed 32, syntax-invalid 14, redundant 0
Fitness: max 0(54), min 0(54), ave 0
Test execution time: sum 2922 ms, max 80 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 14:51:46 [main] [INFO]  KGenProgMain - entered the era of 50th generation.
2023-08-02 14:51:56 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 21 minutes 26 seconds
Variants: generated 100, build-succeeded 58, build-failed 29, syntax-invalid 11, redundant 2
Fitness: max 0(58), min 0(58), ave 0
Test execution time: sum 3162 ms, max 71 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 14:51:56 [main] [INFO]  KGenProgMain - entered the era of 51st generation.
2023-08-02 14:52:06 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 21 minutes 36 seconds
Variants: generated 100, build-succeeded 54, build-failed 26, syntax-invalid 13, redundant 7
Fitness: max 0(54), min 0(54), ave 0
Test execution time: sum 3076 ms, max 123 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 14:52:06 [main] [INFO]  KGenProgMain - entered the era of 52nd generation.
2023-08-02 14:52:16 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 21 minutes 46 seconds
Variants: generated 100, build-succeeded 55, build-failed 33, syntax-invalid 6, redundant 6
Fitness: max 0(55), min 0(55), ave 0
Test execution time: sum 2965 ms, max 71 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 14:52:16 [main] [INFO]  KGenProgMain - entered the era of 53rd generation.
2023-08-02 14:52:26 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 21 minutes 56 seconds
Variants: generated 100, build-succeeded 48, build-failed 27, syntax-invalid 16, redundant 9
Fitness: max 0(48), min 0(48), ave 0
Test execution time: sum 2886 ms, max 197 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 14:52:26 [main] [INFO]  KGenProgMain - entered the era of 54th generation.
2023-08-02 14:52:35 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 22 minutes 6 seconds
Variants: generated 100, build-succeeded 60, build-failed 30, syntax-invalid 9, redundant 1
Fitness: max 0(60), min 0(60), ave 0
Test execution time: sum 3146 ms, max 76 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 14:52:35 [main] [INFO]  KGenProgMain - entered the era of 55th generation.
2023-08-02 14:52:44 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 22 minutes 15 seconds
Variants: generated 100, build-succeeded 46, build-failed 34, syntax-invalid 16, redundant 4
Fitness: max 0(46), min 0(46), ave 0
Test execution time: sum 2510 ms, max 70 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 14:52:44 [main] [INFO]  KGenProgMain - entered the era of 56th generation.
2023-08-02 14:52:55 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 22 minutes 25 seconds
Variants: generated 100, build-succeeded 58, build-failed 33, syntax-invalid 7, redundant 2
Fitness: max 0(58), min 0(58), ave 0
Test execution time: sum 3244 ms, max 126 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 14:52:55 [main] [INFO]  KGenProgMain - entered the era of 57th generation.
2023-08-02 14:53:05 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 22 minutes 35 seconds
Variants: generated 100, build-succeeded 58, build-failed 25, syntax-invalid 13, redundant 4
Fitness: max 0(58), min 0(58), ave 0
Test execution time: sum 3066 ms, max 75 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 14:53:05 [main] [INFO]  KGenProgMain - entered the era of 58th generation.
2023-08-02 14:53:14 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 22 minutes 45 seconds
Variants: generated 100, build-succeeded 42, build-failed 31, syntax-invalid 23, redundant 4
Fitness: max 0(42), min 0(42), ave 0
Test execution time: sum 2519 ms, max 127 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 14:53:14 [main] [INFO]  KGenProgMain - entered the era of 59th generation.
2023-08-02 14:53:24 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 22 minutes 54 seconds
Variants: generated 100, build-succeeded 49, build-failed 36, syntax-invalid 11, redundant 4
Fitness: max 0(49), min 0(49), ave 0
Test execution time: sum 2662 ms, max 79 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 14:53:24 [main] [INFO]  KGenProgMain - entered the era of 60th generation.
2023-08-02 14:53:34 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 23 minutes 4 seconds
Variants: generated 100, build-succeeded 52, build-failed 27, syntax-invalid 16, redundant 5
Fitness: max 0(52), min 0(52), ave 0
Test execution time: sum 2830 ms, max 69 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 14:53:34 [main] [INFO]  KGenProgMain - entered the era of 61st generation.
2023-08-02 14:53:45 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 23 minutes 15 seconds
Variants: generated 100, build-succeeded 52, build-failed 24, syntax-invalid 18, redundant 6
Fitness: max 0(52), min 0(52), ave 0
Test execution time: sum 2936 ms, max 123 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 14:53:45 [main] [INFO]  KGenProgMain - entered the era of 62nd generation.
2023-08-02 14:53:54 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 23 minutes 24 seconds
Variants: generated 100, build-succeeded 48, build-failed 34, syntax-invalid 15, redundant 3
Fitness: max 0(48), min 0(48), ave 0
Test execution time: sum 2526 ms, max 70 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 14:53:54 [main] [INFO]  KGenProgMain - entered the era of 63rd generation.
2023-08-02 14:54:04 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 23 minutes 35 seconds
Variants: generated 100, build-succeeded 53, build-failed 33, syntax-invalid 11, redundant 3
Fitness: max 0(53), min 0(53), ave 0
Test execution time: sum 3007 ms, max 67 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 14:54:04 [main] [INFO]  KGenProgMain - entered the era of 64th generation.
2023-08-02 14:54:15 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 23 minutes 46 seconds
Variants: generated 100, build-succeeded 50, build-failed 33, syntax-invalid 14, redundant 3
Fitness: max 0(50), min 0(50), ave 0
Test execution time: sum 2728 ms, max 124 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 14:54:15 [main] [INFO]  KGenProgMain - entered the era of 65th generation.
2023-08-02 14:54:25 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 23 minutes 55 seconds
Variants: generated 100, build-succeeded 48, build-failed 33, syntax-invalid 18, redundant 1
Fitness: max 0(48), min 0(48), ave 0
Test execution time: sum 2554 ms, max 76 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 14:54:25 [main] [INFO]  KGenProgMain - entered the era of 66th generation.
2023-08-02 14:54:37 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 24 minutes 7 seconds
Variants: generated 100, build-succeeded 57, build-failed 30, syntax-invalid 10, redundant 3
Fitness: max 0(57), min 0(57), ave 0
Test execution time: sum 3345 ms, max 137 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 14:54:37 [main] [INFO]  KGenProgMain - entered the era of 67th generation.
2023-08-02 14:54:48 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 24 minutes 19 seconds
Variants: generated 100, build-succeeded 59, build-failed 31, syntax-invalid 7, redundant 3
Fitness: max 0(59), min 0(59), ave 0
Test execution time: sum 3182 ms, max 76 ms, min 48 ms
----------------------------------------------------------------

2023-08-02 14:54:48 [main] [INFO]  KGenProgMain - entered the era of 68th generation.
2023-08-02 14:54:59 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 24 minutes 29 seconds
Variants: generated 100, build-succeeded 50, build-failed 34, syntax-invalid 11, redundant 5
Fitness: max 0(50), min 0(50), ave 0
Test execution time: sum 2774 ms, max 72 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 14:54:59 [main] [INFO]  KGenProgMain - entered the era of 69th generation.
2023-08-02 14:55:12 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 24 minutes 42 seconds
Variants: generated 100, build-succeeded 57, build-failed 27, syntax-invalid 15, redundant 1
Fitness: max 0(57), min 0(57), ave 0
Test execution time: sum 3237 ms, max 122 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 14:55:12 [main] [INFO]  KGenProgMain - entered the era of 70th generation.
2023-08-02 14:55:22 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 24 minutes 52 seconds
Variants: generated 100, build-succeeded 44, build-failed 38, syntax-invalid 15, redundant 3
Fitness: max 0(44), min 0(44), ave 0
Test execution time: sum 2438 ms, max 76 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 14:55:22 [main] [INFO]  KGenProgMain - entered the era of 71st generation.
2023-08-02 14:55:34 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 25 minutes 4 seconds
Variants: generated 100, build-succeeded 51, build-failed 34, syntax-invalid 14, redundant 1
Fitness: max 0(51), min 0(51), ave 0
Test execution time: sum 3013 ms, max 145 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 14:55:34 [main] [INFO]  KGenProgMain - entered the era of 72nd generation.
2023-08-02 14:55:45 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 25 minutes 15 seconds
Variants: generated 100, build-succeeded 53, build-failed 37, syntax-invalid 6, redundant 4
Fitness: max 0(53), min 0(53), ave 0
Test execution time: sum 2946 ms, max 75 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 14:55:45 [main] [INFO]  KGenProgMain - entered the era of 73rd generation.
2023-08-02 14:55:56 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 25 minutes 27 seconds
Variants: generated 100, build-succeeded 52, build-failed 33, syntax-invalid 14, redundant 1
Fitness: max 1(1), min 0(51), ave 0.019
Test execution time: sum 3053 ms, max 73 ms, min 51 ms
----------------------------------------------------------------

2023-08-02 14:55:56 [main] [INFO]  KGenProgMain - entered the era of 74th generation.
2023-08-02 14:56:08 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 25 minutes 38 seconds
Variants: generated 100, build-succeeded 54, build-failed 26, syntax-invalid 17, redundant 3
Fitness: max 0(54), min 0(54), ave 0
Test execution time: sum 3079 ms, max 129 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 14:56:08 [main] [INFO]  KGenProgMain - entered the era of 75th generation.
2023-08-02 14:56:19 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 25 minutes 50 seconds
Variants: generated 100, build-succeeded 52, build-failed 32, syntax-invalid 13, redundant 3
Fitness: max 0(52), min 0(52), ave 0
Test execution time: sum 2864 ms, max 76 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 14:56:19 [main] [INFO]  KGenProgMain - entered the era of 76th generation.
2023-08-02 14:56:32 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 26 minutes 2 seconds
Variants: generated 100, build-succeeded 53, build-failed 27, syntax-invalid 13, redundant 7
Fitness: max 0(53), min 0(53), ave 0
Test execution time: sum 3163 ms, max 218 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 14:56:32 [main] [INFO]  KGenProgMain - entered the era of 77th generation.
2023-08-02 14:56:42 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 26 minutes 13 seconds
Variants: generated 100, build-succeeded 46, build-failed 25, syntax-invalid 21, redundant 8
Fitness: max 0(46), min 0(46), ave 0
Test execution time: sum 2649 ms, max 91 ms, min 51 ms
----------------------------------------------------------------

2023-08-02 14:56:42 [main] [INFO]  KGenProgMain - entered the era of 78th generation.
2023-08-02 14:56:53 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 26 minutes 23 seconds
Variants: generated 100, build-succeeded 51, build-failed 27, syntax-invalid 16, redundant 6
Fitness: max 0(51), min 0(51), ave 0
Test execution time: sum 2890 ms, max 69 ms, min 51 ms
----------------------------------------------------------------

2023-08-02 14:56:53 [main] [INFO]  KGenProgMain - entered the era of 79th generation.
2023-08-02 14:57:05 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 26 minutes 35 seconds
Variants: generated 100, build-succeeded 49, build-failed 26, syntax-invalid 18, redundant 7
Fitness: max 0(49), min 0(49), ave 0
Test execution time: sum 2751 ms, max 128 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 14:57:05 [main] [INFO]  KGenProgMain - entered the era of 80th generation.
2023-08-02 14:57:16 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 26 minutes 46 seconds
Variants: generated 100, build-succeeded 55, build-failed 33, syntax-invalid 9, redundant 3
Fitness: max 0(55), min 0(55), ave 0
Test execution time: sum 2996 ms, max 73 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 14:57:16 [main] [INFO]  KGenProgMain - entered the era of 81st generation.
2023-08-02 14:57:28 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 26 minutes 58 seconds
Variants: generated 100, build-succeeded 46, build-failed 32, syntax-invalid 17, redundant 5
Fitness: max 0(46), min 0(46), ave 0
Test execution time: sum 2831 ms, max 145 ms, min 51 ms
----------------------------------------------------------------

2023-08-02 14:57:28 [main] [INFO]  KGenProgMain - entered the era of 82nd generation.
2023-08-02 14:57:40 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 27 minutes 10 seconds
Variants: generated 100, build-succeeded 57, build-failed 27, syntax-invalid 12, redundant 4
Fitness: max 1(1), min 0(56), ave 0.018
Test execution time: sum 3214 ms, max 94 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 14:57:40 [main] [INFO]  KGenProgMain - entered the era of 83rd generation.
2023-08-02 14:57:52 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 27 minutes 22 seconds
Variants: generated 100, build-succeeded 52, build-failed 36, syntax-invalid 9, redundant 3
Fitness: max 0(52), min 0(52), ave 0
Test execution time: sum 2897 ms, max 68 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 14:57:52 [main] [INFO]  KGenProgMain - entered the era of 84th generation.
2023-08-02 14:58:05 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 27 minutes 35 seconds
Variants: generated 100, build-succeeded 54, build-failed 31, syntax-invalid 13, redundant 2
Fitness: max 0(54), min 0(54), ave 0
Test execution time: sum 2983 ms, max 117 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 14:58:05 [main] [INFO]  KGenProgMain - entered the era of 85th generation.
2023-08-02 14:58:17 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 27 minutes 47 seconds
Variants: generated 100, build-succeeded 54, build-failed 36, syntax-invalid 8, redundant 2
Fitness: max 0(54), min 0(54), ave 0
Test execution time: sum 2926 ms, max 68 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 14:58:17 [main] [INFO]  KGenProgMain - entered the era of 86th generation.
2023-08-02 14:58:31 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 28 minutes 1 seconds
Variants: generated 100, build-succeeded 66, build-failed 25, syntax-invalid 7, redundant 2
Fitness: max 0(66), min 0(66), ave 0
Test execution time: sum 3791 ms, max 125 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 14:58:31 [main] [INFO]  KGenProgMain - entered the era of 87th generation.
2023-08-02 14:58:43 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 28 minutes 13 seconds
Variants: generated 100, build-succeeded 54, build-failed 33, syntax-invalid 9, redundant 4
Fitness: max 0(54), min 0(54), ave 0
Test execution time: sum 2865 ms, max 71 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 14:58:43 [main] [INFO]  KGenProgMain - entered the era of 88th generation.
2023-08-02 14:58:54 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 28 minutes 24 seconds
Variants: generated 100, build-succeeded 44, build-failed 35, syntax-invalid 14, redundant 7
Fitness: max 0(44), min 0(44), ave 0
Test execution time: sum 2553 ms, max 74 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 14:58:54 [main] [INFO]  KGenProgMain - entered the era of 89th generation.
2023-08-02 14:59:06 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 28 minutes 36 seconds
Variants: generated 100, build-succeeded 43, build-failed 31, syntax-invalid 19, redundant 7
Fitness: max 0(43), min 0(43), ave 0
Test execution time: sum 2369 ms, max 128 ms, min 48 ms
----------------------------------------------------------------

2023-08-02 14:59:06 [main] [INFO]  KGenProgMain - entered the era of 90th generation.
2023-08-02 14:59:18 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 28 minutes 48 seconds
Variants: generated 100, build-succeeded 50, build-failed 31, syntax-invalid 16, redundant 3
Fitness: max 0(50), min 0(50), ave 0
Test execution time: sum 2644 ms, max 65 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 14:59:18 [main] [INFO]  KGenProgMain - entered the era of 91st generation.
2023-08-02 14:59:31 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 29 minutes 1 seconds
Variants: generated 100, build-succeeded 50, build-failed 36, syntax-invalid 13, redundant 1
Fitness: max 1(1), min 0(49), ave 0.02
Test execution time: sum 3009 ms, max 193 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 14:59:31 [main] [INFO]  KGenProgMain - entered the era of 92nd generation.
2023-08-02 14:59:43 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 29 minutes 13 seconds
Variants: generated 100, build-succeeded 56, build-failed 28, syntax-invalid 16, redundant 0
Fitness: max 0(56), min 0(56), ave 0
Test execution time: sum 2994 ms, max 82 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 14:59:43 [main] [INFO]  KGenProgMain - entered the era of 93rd generation.
2023-08-02 14:59:56 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 29 minutes 26 seconds
Variants: generated 100, build-succeeded 55, build-failed 30, syntax-invalid 12, redundant 3
Fitness: max 0(55), min 0(55), ave 0
Test execution time: sum 3006 ms, max 67 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 14:59:56 [main] [INFO]  KGenProgMain - entered the era of 94th generation.
2023-08-02 15:00:10 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 29 minutes 40 seconds
Variants: generated 100, build-succeeded 58, build-failed 25, syntax-invalid 8, redundant 9
Fitness: max 0(58), min 0(58), ave 0
Test execution time: sum 3219 ms, max 137 ms, min 48 ms
----------------------------------------------------------------

2023-08-02 15:00:10 [main] [INFO]  KGenProgMain - entered the era of 95th generation.
2023-08-02 15:00:22 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 29 minutes 52 seconds
Variants: generated 100, build-succeeded 49, build-failed 34, syntax-invalid 13, redundant 4
Fitness: max 0(49), min 0(49), ave 0
Test execution time: sum 2602 ms, max 74 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 15:00:22 [main] [INFO]  KGenProgMain - entered the era of 96th generation.
2023-08-02 15:00:36 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 30 minutes 6 seconds
Variants: generated 100, build-succeeded 54, build-failed 33, syntax-invalid 10, redundant 3
Fitness: max 0(54), min 0(54), ave 0
Test execution time: sum 3194 ms, max 129 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 15:00:36 [main] [INFO]  KGenProgMain - entered the era of 97th generation.
2023-08-02 15:00:47 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 30 minutes 18 seconds
Variants: generated 100, build-succeeded 45, build-failed 31, syntax-invalid 18, redundant 6
Fitness: max 0(45), min 0(45), ave 0
Test execution time: sum 2421 ms, max 71 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 15:00:47 [main] [INFO]  KGenProgMain - entered the era of 98th generation.
2023-08-02 15:01:00 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 30 minutes 31 seconds
Variants: generated 100, build-succeeded 52, build-failed 33, syntax-invalid 11, redundant 4
Fitness: max 0(52), min 0(52), ave 0
Test execution time: sum 2949 ms, max 71 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 15:01:00 [main] [INFO]  KGenProgMain - entered the era of 99th generation.
2023-08-02 15:01:14 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 30 minutes 44 seconds
Variants: generated 100, build-succeeded 51, build-failed 31, syntax-invalid 15, redundant 3
Fitness: max 0(51), min 0(51), ave 0
Test execution time: sum 2805 ms, max 128 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 15:01:14 [main] [INFO]  KGenProgMain - entered the era of 100th generation.
2023-08-02 15:01:27 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 30 minutes 57 seconds
Variants: generated 100, build-succeeded 54, build-failed 28, syntax-invalid 13, redundant 5
Fitness: max 0(54), min 0(54), ave 0
Test execution time: sum 3007 ms, max 73 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 15:01:27 [main] [INFO]  KGenProgMain - entered the era of 101st generation.
2023-08-02 15:01:41 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 31 minutes 11 seconds
Variants: generated 100, build-succeeded 56, build-failed 24, syntax-invalid 14, redundant 6
Fitness: max 0(56), min 0(56), ave 0
Test execution time: sum 3226 ms, max 112 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 15:01:41 [main] [INFO]  KGenProgMain - entered the era of 102nd generation.
2023-08-02 15:01:54 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 31 minutes 24 seconds
Variants: generated 100, build-succeeded 58, build-failed 30, syntax-invalid 9, redundant 3
Fitness: max 1(1), min 0(57), ave 0.017
Test execution time: sum 3087 ms, max 75 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 15:01:54 [main] [INFO]  KGenProgMain - entered the era of 103rd generation.
2023-08-02 15:02:09 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 31 minutes 39 seconds
Variants: generated 100, build-succeeded 59, build-failed 32, syntax-invalid 5, redundant 4
Fitness: max 0(59), min 0(59), ave 0
Test execution time: sum 3469 ms, max 123 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 15:02:09 [main] [INFO]  KGenProgMain - entered the era of 104th generation.
2023-08-02 15:02:22 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 31 minutes 52 seconds
Variants: generated 100, build-succeeded 55, build-failed 30, syntax-invalid 8, redundant 7
Fitness: max 0(55), min 0(55), ave 0
Test execution time: sum 3012 ms, max 65 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 15:02:22 [main] [INFO]  KGenProgMain - entered the era of 105th generation.
2023-08-02 15:02:37 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 32 minutes 7 seconds
Variants: generated 100, build-succeeded 57, build-failed 31, syntax-invalid 10, redundant 2
Fitness: max 1(2), min 0(55), ave 0.035
Test execution time: sum 3328 ms, max 202 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 15:02:37 [main] [INFO]  KGenProgMain - entered the era of 106th generation.
2023-08-02 15:02:50 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 32 minutes 20 seconds
Variants: generated 100, build-succeeded 54, build-failed 31, syntax-invalid 9, redundant 6
Fitness: max 1(1), min 0(53), ave 0.019
Test execution time: sum 2911 ms, max 72 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 15:02:50 [main] [INFO]  KGenProgMain - entered the era of 107th generation.
2023-08-02 15:03:02 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 32 minutes 32 seconds
Variants: generated 100, build-succeeded 45, build-failed 31, syntax-invalid 21, redundant 3
Fitness: max 1(2), min 0(43), ave 0.044
Test execution time: sum 2586 ms, max 72 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 15:03:02 [main] [INFO]  KGenProgMain - entered the era of 108th generation.
2023-08-02 15:03:16 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 32 minutes 46 seconds
Variants: generated 100, build-succeeded 45, build-failed 31, syntax-invalid 17, redundant 7
Fitness: max 0(45), min 0(45), ave 0
Test execution time: sum 2575 ms, max 132 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 15:03:16 [main] [INFO]  KGenProgMain - entered the era of 109th generation.
2023-08-02 15:06:29 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 35 minutes 59 seconds
Variants: generated 100, build-succeeded 51, build-failed 28, syntax-invalid 14, redundant 7
Fitness: max 1(1), min 0(50), ave 0.02
Test execution time: sum 182903 ms, max 180063 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 15:06:29 [main] [INFO]  KGenProgMain - entered the era of 110th generation.
2023-08-02 15:06:43 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 36 minutes 13 seconds
Variants: generated 100, build-succeeded 51, build-failed 29, syntax-invalid 17, redundant 3
Fitness: max 0(51), min 0(51), ave 0
Test execution time: sum 3185 ms, max 140 ms, min 51 ms
----------------------------------------------------------------

2023-08-02 15:06:43 [main] [INFO]  KGenProgMain - entered the era of 111th generation.
2023-08-02 15:06:57 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 36 minutes 27 seconds
Variants: generated 100, build-succeeded 58, build-failed 31, syntax-invalid 7, redundant 4
Fitness: max 0(58), min 0(58), ave 0
Test execution time: sum 3305 ms, max 72 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 15:06:57 [main] [INFO]  KGenProgMain - entered the era of 112th generation.
2023-08-02 15:07:13 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 36 minutes 43 seconds
Variants: generated 100, build-succeeded 59, build-failed 29, syntax-invalid 8, redundant 4
Fitness: max 1(2), min 0(57), ave 0.034
Test execution time: sum 3452 ms, max 137 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 15:07:13 [main] [INFO]  KGenProgMain - entered the era of 113th generation.
2023-08-02 15:07:27 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 36 minutes 58 seconds
Variants: generated 100, build-succeeded 48, build-failed 31, syntax-invalid 15, redundant 6
Fitness: max 0(48), min 0(48), ave 0
Test execution time: sum 2786 ms, max 138 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 15:07:27 [main] [INFO]  KGenProgMain - entered the era of 114th generation.
2023-08-02 15:07:41 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 37 minutes 11 seconds
Variants: generated 100, build-succeeded 53, build-failed 28, syntax-invalid 18, redundant 1
Fitness: max 0(53), min 0(53), ave 0
Test execution time: sum 2919 ms, max 78 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 15:07:41 [main] [INFO]  KGenProgMain - entered the era of 115th generation.
2023-08-02 15:10:57 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 40 minutes 27 seconds
Variants: generated 100, build-succeeded 57, build-failed 28, syntax-invalid 12, redundant 3
Fitness: max 0(57), min 0(57), ave 0
Test execution time: sum 183600 ms, max 180059 ms, min 53 ms
----------------------------------------------------------------

2023-08-02 15:10:57 [main] [INFO]  KGenProgMain - entered the era of 116th generation.
2023-08-02 15:11:11 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 40 minutes 41 seconds
Variants: generated 100, build-succeeded 54, build-failed 26, syntax-invalid 19, redundant 1
Fitness: max 0(54), min 0(54), ave 0
Test execution time: sum 3159 ms, max 73 ms, min 51 ms
----------------------------------------------------------------

2023-08-02 15:11:11 [main] [INFO]  KGenProgMain - entered the era of 117th generation.
2023-08-02 15:11:26 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 40 minutes 56 seconds
Variants: generated 100, build-succeeded 55, build-failed 23, syntax-invalid 17, redundant 5
Fitness: max 0(55), min 0(55), ave 0
Test execution time: sum 3109 ms, max 130 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 15:11:26 [main] [INFO]  KGenProgMain - entered the era of 118th generation.
2023-08-02 15:11:41 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 41 minutes 11 seconds
Variants: generated 100, build-succeeded 58, build-failed 24, syntax-invalid 13, redundant 5
Fitness: max 0(58), min 0(58), ave 0
Test execution time: sum 3116 ms, max 73 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 15:11:41 [main] [INFO]  KGenProgMain - entered the era of 119th generation.
2023-08-02 15:11:57 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 41 minutes 27 seconds
Variants: generated 100, build-succeeded 52, build-failed 35, syntax-invalid 11, redundant 2
Fitness: max 0(52), min 0(52), ave 0
Test execution time: sum 3058 ms, max 122 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 15:11:57 [main] [INFO]  KGenProgMain - entered the era of 120th generation.
2023-08-02 15:12:11 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 41 minutes 41 seconds
Variants: generated 100, build-succeeded 54, build-failed 25, syntax-invalid 11, redundant 10
Fitness: max 0(54), min 0(54), ave 0
Test execution time: sum 2939 ms, max 65 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 15:12:11 [main] [INFO]  KGenProgMain - entered the era of 121st generation.
2023-08-02 15:12:27 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 41 minutes 57 seconds
Variants: generated 100, build-succeeded 60, build-failed 29, syntax-invalid 8, redundant 3
Fitness: max 0(60), min 0(60), ave 0
Test execution time: sum 3415 ms, max 129 ms, min 51 ms
----------------------------------------------------------------

2023-08-02 15:12:27 [main] [INFO]  KGenProgMain - entered the era of 122nd generation.
2023-08-02 15:12:41 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 42 minutes 12 seconds
Variants: generated 100, build-succeeded 47, build-failed 34, syntax-invalid 16, redundant 3
Fitness: max 0(47), min 0(47), ave 0
Test execution time: sum 2599 ms, max 78 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 15:12:41 [main] [INFO]  KGenProgMain - entered the era of 123rd generation.
2023-08-02 15:12:56 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 42 minutes 26 seconds
Variants: generated 100, build-succeeded 42, build-failed 34, syntax-invalid 21, redundant 3
Fitness: max 0(42), min 0(42), ave 0
Test execution time: sum 2505 ms, max 117 ms, min 48 ms
----------------------------------------------------------------

2023-08-02 15:12:56 [main] [INFO]  KGenProgMain - entered the era of 124th generation.
2023-08-02 15:13:11 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 42 minutes 41 seconds
Variants: generated 100, build-succeeded 54, build-failed 31, syntax-invalid 10, redundant 5
Fitness: max 0(54), min 0(54), ave 0
Test execution time: sum 2976 ms, max 75 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 15:13:11 [main] [INFO]  KGenProgMain - entered the era of 125th generation.
2023-08-02 15:13:24 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 42 minutes 54 seconds
Variants: generated 100, build-succeeded 44, build-failed 31, syntax-invalid 18, redundant 7
Fitness: max 0(44), min 0(44), ave 0
Test execution time: sum 2463 ms, max 65 ms, min 51 ms
----------------------------------------------------------------

2023-08-02 15:13:24 [main] [INFO]  KGenProgMain - entered the era of 126th generation.
2023-08-02 15:13:39 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 43 minutes 9 seconds
Variants: generated 100, build-succeeded 46, build-failed 24, syntax-invalid 25, redundant 5
Fitness: max 0(46), min 0(46), ave 0
Test execution time: sum 2680 ms, max 124 ms, min 51 ms
----------------------------------------------------------------

2023-08-02 15:13:39 [main] [INFO]  KGenProgMain - entered the era of 127th generation.
2023-08-02 15:13:53 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 43 minutes 23 seconds
Variants: generated 100, build-succeeded 45, build-failed 26, syntax-invalid 23, redundant 6
Fitness: max 0(45), min 0(45), ave 0
Test execution time: sum 2475 ms, max 75 ms, min 51 ms
----------------------------------------------------------------

2023-08-02 15:13:53 [main] [INFO]  KGenProgMain - entered the era of 128th generation.
2023-08-02 15:14:08 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 43 minutes 38 seconds
Variants: generated 100, build-succeeded 60, build-failed 22, syntax-invalid 14, redundant 4
Fitness: max 1(1), min 0(59), ave 0.017
Test execution time: sum 3585 ms, max 72 ms, min 52 ms
----------------------------------------------------------------

2023-08-02 15:14:08 [main] [INFO]  KGenProgMain - entered the era of 129th generation.
2023-08-02 15:14:24 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 43 minutes 54 seconds
Variants: generated 100, build-succeeded 48, build-failed 29, syntax-invalid 18, redundant 5
Fitness: max 0(48), min 0(48), ave 0
Test execution time: sum 2738 ms, max 137 ms, min 52 ms
----------------------------------------------------------------

2023-08-02 15:14:24 [main] [INFO]  KGenProgMain - entered the era of 130th generation.
2023-08-02 15:14:38 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 44 minutes 8 seconds
Variants: generated 100, build-succeeded 47, build-failed 28, syntax-invalid 23, redundant 2
Fitness: max 1(1), min 0(46), ave 0.021
Test execution time: sum 2625 ms, max 72 ms, min 51 ms
----------------------------------------------------------------

2023-08-02 15:14:38 [main] [INFO]  KGenProgMain - entered the era of 131st generation.
2023-08-02 15:14:53 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 44 minutes 23 seconds
Variants: generated 100, build-succeeded 43, build-failed 32, syntax-invalid 23, redundant 2
Fitness: max 0(43), min 0(43), ave 0
Test execution time: sum 2754 ms, max 209 ms, min 52 ms
----------------------------------------------------------------

2023-08-02 15:14:53 [main] [INFO]  KGenProgMain - entered the era of 132nd generation.
2023-08-02 15:15:08 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 44 minutes 38 seconds
Variants: generated 100, build-succeeded 46, build-failed 28, syntax-invalid 20, redundant 6
Fitness: max 0(46), min 0(46), ave 0
Test execution time: sum 2637 ms, max 84 ms, min 52 ms
----------------------------------------------------------------

2023-08-02 15:15:08 [main] [INFO]  KGenProgMain - entered the era of 133rd generation.
2023-08-02 15:15:21 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 44 minutes 51 seconds
Variants: generated 100, build-succeeded 38, build-failed 33, syntax-invalid 26, redundant 3
Fitness: max 1(1), min 0(37), ave 0.026
Test execution time: sum 2100 ms, max 71 ms, min 52 ms
----------------------------------------------------------------

2023-08-02 15:15:21 [main] [INFO]  KGenProgMain - entered the era of 134th generation.
2023-08-02 15:15:36 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 45 minutes 6 seconds
Variants: generated 100, build-succeeded 37, build-failed 30, syntax-invalid 31, redundant 2
Fitness: max 0(37), min 0(37), ave 0
Test execution time: sum 2291 ms, max 190 ms, min 52 ms
----------------------------------------------------------------

2023-08-02 15:15:36 [main] [INFO]  KGenProgMain - entered the era of 135th generation.
2023-08-02 15:15:49 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 45 minutes 19 seconds
Variants: generated 100, build-succeeded 37, build-failed 26, syntax-invalid 31, redundant 6
Fitness: max 0(37), min 0(37), ave 0
Test execution time: sum 2097 ms, max 71 ms, min 52 ms
----------------------------------------------------------------

2023-08-02 15:15:49 [main] [INFO]  KGenProgMain - entered the era of 136th generation.
2023-08-02 15:16:05 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 45 minutes 35 seconds
Variants: generated 100, build-succeeded 39, build-failed 36, syntax-invalid 24, redundant 1
Fitness: max 0(39), min 0(39), ave 0
Test execution time: sum 2511 ms, max 210 ms, min 53 ms
----------------------------------------------------------------

2023-08-02 15:16:05 [main] [INFO]  KGenProgMain - entered the era of 137th generation.
2023-08-02 15:16:19 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 45 minutes 49 seconds
Variants: generated 100, build-succeeded 45, build-failed 29, syntax-invalid 22, redundant 4
Fitness: max 1(2), min 0(43), ave 0.044
Test execution time: sum 2561 ms, max 77 ms, min 51 ms
----------------------------------------------------------------

2023-08-02 15:16:19 [main] [INFO]  KGenProgMain - entered the era of 138th generation.
2023-08-02 15:16:33 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 46 minutes 4 seconds
Variants: generated 100, build-succeeded 45, build-failed 27, syntax-invalid 26, redundant 2
Fitness: max 0(45), min 0(45), ave 0
Test execution time: sum 2526 ms, max 72 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 15:16:33 [main] [INFO]  KGenProgMain - entered the era of 139th generation.
2023-08-02 15:16:49 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 46 minutes 19 seconds
Variants: generated 100, build-succeeded 42, build-failed 36, syntax-invalid 20, redundant 2
Fitness: max 0(42), min 0(42), ave 0
Test execution time: sum 2485 ms, max 137 ms, min 52 ms
----------------------------------------------------------------

2023-08-02 15:16:49 [main] [INFO]  KGenProgMain - entered the era of 140th generation.
2023-08-02 15:17:03 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 46 minutes 34 seconds
Variants: generated 100, build-succeeded 44, build-failed 31, syntax-invalid 22, redundant 3
Fitness: max 1(1), min 0(43), ave 0.023
Test execution time: sum 2501 ms, max 73 ms, min 52 ms
----------------------------------------------------------------

2023-08-02 15:17:03 [main] [INFO]  KGenProgMain - entered the era of 141st generation.
2023-08-02 15:17:20 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 46 minutes 50 seconds
Variants: generated 100, build-succeeded 47, build-failed 33, syntax-invalid 15, redundant 5
Fitness: max 1(1), min 0(46), ave 0.021
Test execution time: sum 2733 ms, max 138 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 15:17:20 [main] [INFO]  KGenProgMain - entered the era of 142nd generation.
2023-08-02 15:17:33 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 47 minutes 3 seconds
Variants: generated 100, build-succeeded 35, build-failed 33, syntax-invalid 27, redundant 5
Fitness: max 0(35), min 0(35), ave 0
Test execution time: sum 1948 ms, max 72 ms, min 52 ms
----------------------------------------------------------------

2023-08-02 15:17:33 [main] [INFO]  KGenProgMain - entered the era of 143rd generation.
2023-08-02 15:17:49 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 47 minutes 19 seconds
Variants: generated 100, build-succeeded 49, build-failed 31, syntax-invalid 16, redundant 4
Fitness: max 0(49), min 0(49), ave 0
Test execution time: sum 2842 ms, max 70 ms, min 51 ms
----------------------------------------------------------------

2023-08-02 15:17:49 [main] [INFO]  KGenProgMain - entered the era of 144th generation.
2023-08-02 15:18:05 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 47 minutes 35 seconds
Variants: generated 100, build-succeeded 55, build-failed 25, syntax-invalid 17, redundant 3
Fitness: max 1(1), min 0(54), ave 0.018
Test execution time: sum 3094 ms, max 123 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 15:18:05 [main] [INFO]  KGenProgMain - entered the era of 145th generation.
2023-08-02 15:18:21 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 47 minutes 51 seconds
Variants: generated 100, build-succeeded 49, build-failed 33, syntax-invalid 16, redundant 2
Fitness: max 1(1), min 0(48), ave 0.02
Test execution time: sum 2719 ms, max 77 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 15:18:21 [main] [INFO]  KGenProgMain - entered the era of 146th generation.
2023-08-02 15:18:37 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 48 minutes 7 seconds
Variants: generated 100, build-succeeded 46, build-failed 30, syntax-invalid 17, redundant 7
Fitness: max 0(46), min 0(46), ave 0
Test execution time: sum 2828 ms, max 123 ms, min 51 ms
----------------------------------------------------------------

2023-08-02 15:18:37 [main] [INFO]  KGenProgMain - entered the era of 147th generation.
2023-08-02 15:18:53 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 48 minutes 23 seconds
Variants: generated 100, build-succeeded 54, build-failed 28, syntax-invalid 16, redundant 2
Fitness: max 0(54), min 0(54), ave 0
Test execution time: sum 3035 ms, max 72 ms, min 51 ms
----------------------------------------------------------------

2023-08-02 15:18:53 [main] [INFO]  KGenProgMain - entered the era of 148th generation.
2023-08-02 15:19:11 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 48 minutes 41 seconds
Variants: generated 100, build-succeeded 52, build-failed 27, syntax-invalid 15, redundant 6
Fitness: max 0(52), min 0(52), ave 0
Test execution time: sum 3137 ms, max 201 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 15:19:11 [main] [INFO]  KGenProgMain - entered the era of 149th generation.
2023-08-02 15:19:27 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 48 minutes 57 seconds
Variants: generated 100, build-succeeded 50, build-failed 33, syntax-invalid 14, redundant 3
Fitness: max 0(50), min 0(50), ave 0
Test execution time: sum 2852 ms, max 74 ms, min 52 ms
----------------------------------------------------------------

2023-08-02 15:19:27 [main] [INFO]  KGenProgMain - entered the era of 150th generation.
2023-08-02 15:19:45 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 49 minutes 15 seconds
Variants: generated 100, build-succeeded 59, build-failed 29, syntax-invalid 11, redundant 1
Fitness: max 1(2), min 0(57), ave 0.034
Test execution time: sum 3681 ms, max 139 ms, min 52 ms
----------------------------------------------------------------

2023-08-02 15:19:45 [main] [INFO]  KGenProgMain - entered the era of 151st generation.
2023-08-02 15:20:02 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 49 minutes 32 seconds
Variants: generated 100, build-succeeded 61, build-failed 28, syntax-invalid 9, redundant 2
Fitness: max 1(1), min 0(60), ave 0.016
Test execution time: sum 3467 ms, max 76 ms, min 52 ms
----------------------------------------------------------------

2023-08-02 15:20:02 [main] [INFO]  KGenProgMain - entered the era of 152nd generation.
2023-08-02 15:20:20 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 49 minutes 50 seconds
Variants: generated 100, build-succeeded 53, build-failed 31, syntax-invalid 14, redundant 2
Fitness: max 0(53), min 0(53), ave 0
Test execution time: sum 3276 ms, max 119 ms, min 52 ms
----------------------------------------------------------------

2023-08-02 15:20:20 [main] [INFO]  KGenProgMain - entered the era of 153rd generation.
2023-08-02 15:20:37 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 50 minutes 7 seconds
Variants: generated 100, build-succeeded 54, build-failed 34, syntax-invalid 6, redundant 6
Fitness: max 1(1), min 0(53), ave 0.019
Test execution time: sum 3039 ms, max 81 ms, min 51 ms
----------------------------------------------------------------

2023-08-02 15:20:37 [main] [INFO]  KGenProgMain - entered the era of 154th generation.
2023-08-02 15:20:56 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 50 minutes 26 seconds
Variants: generated 100, build-succeeded 67, build-failed 29, syntax-invalid 2, redundant 2
Fitness: max 0(67), min 0(67), ave 0
Test execution time: sum 4097 ms, max 131 ms, min 51 ms
----------------------------------------------------------------

2023-08-02 15:20:56 [main] [INFO]  KGenProgMain - entered the era of 155th generation.
2023-08-02 15:21:13 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 50 minutes 43 seconds
Variants: generated 100, build-succeeded 44, build-failed 37, syntax-invalid 15, redundant 4
Fitness: max 0(44), min 0(44), ave 0
Test execution time: sum 2497 ms, max 68 ms, min 51 ms
----------------------------------------------------------------

2023-08-02 15:21:13 [main] [INFO]  KGenProgMain - entered the era of 156th generation.
2023-08-02 15:21:30 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 51 minutes 0 seconds
Variants: generated 100, build-succeeded 53, build-failed 31, syntax-invalid 14, redundant 2
Fitness: max 0(53), min 0(53), ave 0
Test execution time: sum 3021 ms, max 109 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 15:21:30 [main] [INFO]  KGenProgMain - entered the era of 157th generation.
2023-08-02 15:21:48 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 51 minutes 18 seconds
Variants: generated 100, build-succeeded 57, build-failed 28, syntax-invalid 14, redundant 1
Fitness: max 0(57), min 0(57), ave 0
Test execution time: sum 3212 ms, max 78 ms, min 52 ms
----------------------------------------------------------------

2023-08-02 15:21:48 [main] [INFO]  KGenProgMain - entered the era of 158th generation.
2023-08-02 15:22:05 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 51 minutes 35 seconds
Variants: generated 100, build-succeeded 48, build-failed 32, syntax-invalid 16, redundant 4
Fitness: max 0(48), min 0(48), ave 0
Test execution time: sum 2963 ms, max 119 ms, min 51 ms
----------------------------------------------------------------

2023-08-02 15:22:05 [main] [INFO]  KGenProgMain - entered the era of 159th generation.
2023-08-02 15:22:22 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 51 minutes 52 seconds
Variants: generated 100, build-succeeded 54, build-failed 29, syntax-invalid 12, redundant 5
Fitness: max 1(1), min 0(53), ave 0.019
Test execution time: sum 3112 ms, max 73 ms, min 51 ms
----------------------------------------------------------------

2023-08-02 15:22:22 [main] [INFO]  KGenProgMain - entered the era of 160th generation.
2023-08-02 15:22:41 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 52 minutes 11 seconds
Variants: generated 100, build-succeeded 58, build-failed 32, syntax-invalid 7, redundant 3
Fitness: max 0(58), min 0(58), ave 0
Test execution time: sum 3378 ms, max 115 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 15:22:41 [main] [INFO]  KGenProgMain - entered the era of 161st generation.
2023-08-02 15:22:57 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 52 minutes 28 seconds
Variants: generated 100, build-succeeded 58, build-failed 28, syntax-invalid 14, redundant 0
Fitness: max 0(58), min 0(58), ave 0
Test execution time: sum 3307 ms, max 75 ms, min 52 ms
----------------------------------------------------------------

2023-08-02 15:22:57 [main] [INFO]  KGenProgMain - entered the era of 162nd generation.
2023-08-02 15:23:16 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 52 minutes 46 seconds
Variants: generated 100, build-succeeded 59, build-failed 29, syntax-invalid 8, redundant 4
Fitness: max 1(1), min 0(58), ave 0.017
Test execution time: sum 3480 ms, max 142 ms, min 51 ms
----------------------------------------------------------------

2023-08-02 15:23:16 [main] [INFO]  KGenProgMain - entered the era of 163rd generation.
2023-08-02 15:23:34 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 53 minutes 4 seconds
Variants: generated 100, build-succeeded 62, build-failed 27, syntax-invalid 6, redundant 5
Fitness: max 0(62), min 0(62), ave 0
Test execution time: sum 3512 ms, max 77 ms, min 51 ms
----------------------------------------------------------------

2023-08-02 15:23:34 [main] [INFO]  KGenProgMain - entered the era of 164th generation.
2023-08-02 15:23:52 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 53 minutes 23 seconds
Variants: generated 100, build-succeeded 57, build-failed 27, syntax-invalid 11, redundant 5
Fitness: max 0(57), min 0(57), ave 0
Test execution time: sum 3423 ms, max 133 ms, min 52 ms
----------------------------------------------------------------

2023-08-02 15:23:52 [main] [INFO]  KGenProgMain - entered the era of 165th generation.
2023-08-02 15:24:10 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 53 minutes 41 seconds
Variants: generated 100, build-succeeded 59, build-failed 31, syntax-invalid 7, redundant 3
Fitness: max 1(1), min 0(58), ave 0.017
Test execution time: sum 3465 ms, max 71 ms, min 52 ms
----------------------------------------------------------------

2023-08-02 15:24:10 [main] [INFO]  KGenProgMain - entered the era of 166th generation.
2023-08-02 15:24:29 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 53 minutes 59 seconds
Variants: generated 100, build-succeeded 53, build-failed 26, syntax-invalid 12, redundant 9
Fitness: max 1(1), min 0(52), ave 0.019
Test execution time: sum 3068 ms, max 125 ms, min 51 ms
----------------------------------------------------------------

2023-08-02 15:24:29 [main] [INFO]  KGenProgMain - entered the era of 167th generation.
2023-08-02 15:24:44 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 54 minutes 15 seconds
Variants: generated 100, build-succeeded 38, build-failed 36, syntax-invalid 22, redundant 4
Fitness: max 0(38), min 0(38), ave 0
Test execution time: sum 2131 ms, max 69 ms, min 51 ms
----------------------------------------------------------------

2023-08-02 15:24:44 [main] [INFO]  KGenProgMain - entered the era of 168th generation.
2023-08-02 15:25:03 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 54 minutes 34 seconds
Variants: generated 100, build-succeeded 56, build-failed 27, syntax-invalid 13, redundant 4
Fitness: max 1(2), min 0(54), ave 0.036
Test execution time: sum 3434 ms, max 128 ms, min 52 ms
----------------------------------------------------------------

2023-08-02 15:25:03 [main] [INFO]  KGenProgMain - entered the era of 169th generation.
2023-08-02 15:25:21 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 54 minutes 52 seconds
Variants: generated 100, build-succeeded 57, build-failed 34, syntax-invalid 7, redundant 2
Fitness: max 1(4), min 0(53), ave 0.07
Test execution time: sum 3231 ms, max 82 ms, min 51 ms
----------------------------------------------------------------

2023-08-02 15:25:21 [main] [INFO]  KGenProgMain - entered the era of 170th generation.
2023-08-02 15:25:41 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 55 minutes 11 seconds
Variants: generated 100, build-succeeded 60, build-failed 25, syntax-invalid 10, redundant 5
Fitness: max 0(60), min 0(60), ave 0
Test execution time: sum 3503 ms, max 124 ms, min 51 ms
----------------------------------------------------------------

2023-08-02 15:25:41 [main] [INFO]  KGenProgMain - entered the era of 171st generation.
2023-08-02 15:25:58 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 55 minutes 28 seconds
Variants: generated 100, build-succeeded 55, build-failed 26, syntax-invalid 12, redundant 7
Fitness: max 1(1), min 0(54), ave 0.018
Test execution time: sum 3088 ms, max 69 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 15:25:58 [main] [INFO]  KGenProgMain - entered the era of 172nd generation.
2023-08-02 15:26:17 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 55 minutes 48 seconds
Variants: generated 100, build-succeeded 57, build-failed 31, syntax-invalid 5, redundant 7
Fitness: max 0(57), min 0(57), ave 0
Test execution time: sum 3364 ms, max 120 ms, min 51 ms
----------------------------------------------------------------

2023-08-02 15:26:17 [main] [INFO]  KGenProgMain - entered the era of 173rd generation.
2023-08-02 15:26:36 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 56 minutes 6 seconds
Variants: generated 100, build-succeeded 56, build-failed 31, syntax-invalid 7, redundant 6
Fitness: max 0(56), min 0(56), ave 0
Test execution time: sum 3107 ms, max 76 ms, min 51 ms
----------------------------------------------------------------

2023-08-02 15:26:36 [main] [INFO]  KGenProgMain - entered the era of 174th generation.
2023-08-02 15:26:55 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 56 minutes 25 seconds
Variants: generated 100, build-succeeded 55, build-failed 35, syntax-invalid 9, redundant 1
Fitness: max 0(55), min 0(55), ave 0
Test execution time: sum 3364 ms, max 127 ms, min 52 ms
----------------------------------------------------------------

2023-08-02 15:26:55 [main] [INFO]  KGenProgMain - entered the era of 175th generation.
2023-08-02 15:27:13 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 56 minutes 44 seconds
Variants: generated 100, build-succeeded 53, build-failed 33, syntax-invalid 11, redundant 3
Fitness: max 0(53), min 0(53), ave 0
Test execution time: sum 3056 ms, max 78 ms, min 52 ms
----------------------------------------------------------------

2023-08-02 15:27:13 [main] [INFO]  KGenProgMain - entered the era of 176th generation.
2023-08-02 15:27:33 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 57 minutes 3 seconds
Variants: generated 100, build-succeeded 58, build-failed 35, syntax-invalid 6, redundant 1
Fitness: max 0(58), min 0(58), ave 0
Test execution time: sum 3461 ms, max 127 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 15:27:33 [main] [INFO]  KGenProgMain - entered the era of 177th generation.
2023-08-02 15:27:52 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 57 minutes 22 seconds
Variants: generated 100, build-succeeded 59, build-failed 33, syntax-invalid 5, redundant 3
Fitness: max 1(1), min 0(58), ave 0.017
Test execution time: sum 3384 ms, max 95 ms, min 52 ms
----------------------------------------------------------------

2023-08-02 15:27:52 [main] [INFO]  KGenProgMain - entered the era of 178th generation.
2023-08-02 15:28:12 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 57 minutes 42 seconds
Variants: generated 100, build-succeeded 56, build-failed 34, syntax-invalid 7, redundant 3
Fitness: max 1(1), min 0(55), ave 0.018
Test execution time: sum 3406 ms, max 211 ms, min 52 ms
----------------------------------------------------------------

2023-08-02 15:28:12 [main] [INFO]  KGenProgMain - entered the era of 179th generation.
2023-08-02 15:28:31 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 58 minutes 1 seconds
Variants: generated 100, build-succeeded 57, build-failed 31, syntax-invalid 5, redundant 7
Fitness: max 1(1), min 0(56), ave 0.018
Test execution time: sum 3276 ms, max 72 ms, min 52 ms
----------------------------------------------------------------

2023-08-02 15:28:31 [main] [INFO]  KGenProgMain - entered the era of 180th generation.
2023-08-02 15:28:51 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 58 minutes 21 seconds
Variants: generated 100, build-succeeded 57, build-failed 34, syntax-invalid 4, redundant 5
Fitness: max 0(57), min 0(57), ave 0
Test execution time: sum 3408 ms, max 127 ms, min 51 ms
----------------------------------------------------------------

2023-08-02 15:28:51 [main] [INFO]  KGenProgMain - entered the era of 181st generation.
2023-08-02 15:29:11 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 58 minutes 42 seconds
Variants: generated 100, build-succeeded 62, build-failed 29, syntax-invalid 5, redundant 4
Fitness: max 0(62), min 0(62), ave 0
Test execution time: sum 3861 ms, max 139 ms, min 54 ms
----------------------------------------------------------------

2023-08-02 15:29:11 [main] [INFO]  KGenProgMain - entered the era of 182nd generation.
2023-08-02 15:29:30 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 59 minutes 0 seconds
Variants: generated 100, build-succeeded 49, build-failed 36, syntax-invalid 12, redundant 3
Fitness: max 1(1), min 0(48), ave 0.02
Test execution time: sum 2792 ms, max 72 ms, min 53 ms
----------------------------------------------------------------

2023-08-02 15:29:30 [main] [INFO]  KGenProgMain - entered the era of 183rd generation.
2023-08-02 15:29:48 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 59 minutes 18 seconds
Variants: generated 100, build-succeeded 54, build-failed 29, syntax-invalid 15, redundant 2
Fitness: max 1(1), min 0(53), ave 0.019
Test execution time: sum 3261 ms, max 72 ms, min 54 ms
----------------------------------------------------------------

2023-08-02 15:29:48 [main] [INFO]  KGenProgMain - entered the era of 184th generation.
2023-08-02 15:30:06 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 59 minutes 36 seconds
Variants: generated 100, build-succeeded 40, build-failed 35, syntax-invalid 19, redundant 6
Fitness: max 0(40), min 0(40), ave 0
Test execution time: sum 2422 ms, max 139 ms, min 52 ms
----------------------------------------------------------------

2023-08-02 15:30:06 [main] [INFO]  KGenProgMain - entered the era of 185th generation.
2023-08-02 15:30:25 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 59 minutes 55 seconds
Variants: generated 100, build-succeeded 53, build-failed 35, syntax-invalid 10, redundant 2
Fitness: max 0(53), min 0(53), ave 0
Test execution time: sum 3089 ms, max 78 ms, min 53 ms
----------------------------------------------------------------

2023-08-02 15:30:25 [main] [INFO]  KGenProgMain - entered the era of 186th generation.
2023-08-02 15:30:44 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 14 seconds
Variants: generated 100, build-succeeded 55, build-failed 24, syntax-invalid 13, redundant 8
Fitness: max 0(55), min 0(55), ave 0
Test execution time: sum 3414 ms, max 127 ms, min 51 ms
----------------------------------------------------------------

2023-08-02 15:30:44 [main] [INFO]  KGenProgMain - entered the era of 187th generation.
2023-08-02 15:31:03 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 33 seconds
Variants: generated 100, build-succeeded 49, build-failed 33, syntax-invalid 16, redundant 2
Fitness: max 0(49), min 0(49), ave 0
Test execution time: sum 2961 ms, max 69 ms, min 51 ms
----------------------------------------------------------------

2023-08-02 15:31:03 [main] [INFO]  KGenProgMain - entered the era of 188th generation.
2023-08-02 15:31:22 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 52 seconds
Variants: generated 100, build-succeeded 57, build-failed 28, syntax-invalid 12, redundant 3
Fitness: max 1(1), min 0(56), ave 0.018
Test execution time: sum 3378 ms, max 140 ms, min 53 ms
----------------------------------------------------------------

2023-08-02 15:31:22 [main] [INFO]  KGenProgMain - entered the era of 189th generation.
2023-08-02 15:31:41 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 1 minutes 11 seconds
Variants: generated 100, build-succeeded 50, build-failed 33, syntax-invalid 12, redundant 5
Fitness: max 1(1), min 0(49), ave 0.02
Test execution time: sum 2939 ms, max 79 ms, min 52 ms
----------------------------------------------------------------

2023-08-02 15:31:41 [main] [INFO]  KGenProgMain - entered the era of 190th generation.
2023-08-02 15:32:01 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 1 minutes 31 seconds
Variants: generated 100, build-succeeded 57, build-failed 32, syntax-invalid 8, redundant 3
Fitness: max 1(2), min 0(55), ave 0.035
Test execution time: sum 3477 ms, max 175 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 15:32:01 [main] [INFO]  KGenProgMain - entered the era of 191st generation.
2023-08-02 15:32:20 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 1 minutes 50 seconds
Variants: generated 100, build-succeeded 60, build-failed 29, syntax-invalid 7, redundant 4
Fitness: max 1(1), min 0(59), ave 0.017
Test execution time: sum 3467 ms, max 74 ms, min 51 ms
----------------------------------------------------------------

2023-08-02 15:32:20 [main] [INFO]  KGenProgMain - entered the era of 192nd generation.
2023-08-02 15:32:40 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 2 minutes 10 seconds
Variants: generated 100, build-succeeded 51, build-failed 38, syntax-invalid 10, redundant 1
Fitness: max 0(51), min 0(51), ave 0
Test execution time: sum 3099 ms, max 130 ms, min 51 ms
----------------------------------------------------------------

2023-08-02 15:32:40 [main] [INFO]  KGenProgMain - entered the era of 193rd generation.
2023-08-02 15:33:00 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 2 minutes 30 seconds
Variants: generated 100, build-succeeded 57, build-failed 25, syntax-invalid 13, redundant 5
Fitness: max 0(57), min 0(57), ave 0
Test execution time: sum 3600 ms, max 129 ms, min 52 ms
----------------------------------------------------------------

2023-08-02 15:33:00 [main] [INFO]  KGenProgMain - entered the era of 194th generation.
2023-08-02 15:33:19 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 2 minutes 49 seconds
Variants: generated 100, build-succeeded 55, build-failed 24, syntax-invalid 14, redundant 7
Fitness: max 1(1), min 0(54), ave 0.018
Test execution time: sum 3174 ms, max 75 ms, min 51 ms
----------------------------------------------------------------

2023-08-02 15:33:19 [main] [INFO]  KGenProgMain - entered the era of 195th generation.
2023-08-02 15:33:38 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 3 minutes 8 seconds
Variants: generated 100, build-succeeded 47, build-failed 39, syntax-invalid 11, redundant 3
Fitness: max 0(47), min 0(47), ave 0
Test execution time: sum 2991 ms, max 125 ms, min 53 ms
----------------------------------------------------------------

2023-08-02 15:33:38 [main] [INFO]  KGenProgMain - entered the era of 196th generation.
2023-08-02 15:33:57 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 3 minutes 27 seconds
Variants: generated 100, build-succeeded 51, build-failed 37, syntax-invalid 10, redundant 2
Fitness: max 0(51), min 0(51), ave 0
Test execution time: sum 3062 ms, max 69 ms, min 52 ms
----------------------------------------------------------------

2023-08-02 15:33:57 [main] [INFO]  KGenProgMain - entered the era of 197th generation.
2023-08-02 15:34:17 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 3 minutes 48 seconds
Variants: generated 100, build-succeeded 53, build-failed 32, syntax-invalid 13, redundant 2
Fitness: max 0(53), min 0(53), ave 0
Test execution time: sum 3065 ms, max 119 ms, min 52 ms
----------------------------------------------------------------

2023-08-02 15:34:17 [main] [INFO]  KGenProgMain - entered the era of 198th generation.
2023-08-02 15:34:37 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 4 minutes 7 seconds
Variants: generated 100, build-succeeded 57, build-failed 31, syntax-invalid 8, redundant 4
Fitness: max 0(57), min 0(57), ave 0
Test execution time: sum 3300 ms, max 110 ms, min 52 ms
----------------------------------------------------------------

2023-08-02 15:34:37 [main] [INFO]  KGenProgMain - entered the era of 199th generation.
2023-08-02 15:34:58 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 4 minutes 28 seconds
Variants: generated 100, build-succeeded 55, build-failed 31, syntax-invalid 12, redundant 2
Fitness: max 1(1), min 0(54), ave 0.018
Test execution time: sum 3251 ms, max 128 ms, min 52 ms
----------------------------------------------------------------

2023-08-02 15:34:58 [main] [INFO]  KGenProgMain - entered the era of 200th generation.
2023-08-02 15:35:18 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 4 minutes 48 seconds
Variants: generated 100, build-succeeded 64, build-failed 28, syntax-invalid 4, redundant 4
Fitness: max 0(64), min 0(64), ave 0
Test execution time: sum 3669 ms, max 68 ms, min 52 ms
----------------------------------------------------------------

2023-08-02 15:35:18 [main] [INFO]  KGenProgMain - entered the era of 201st generation.
2023-08-02 15:35:39 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 5 minutes 9 seconds
Variants: generated 100, build-succeeded 55, build-failed 32, syntax-invalid 9, redundant 4
Fitness: max 0(55), min 0(55), ave 0
Test execution time: sum 3338 ms, max 137 ms, min 53 ms
----------------------------------------------------------------

2023-08-02 15:35:39 [main] [INFO]  KGenProgMain - entered the era of 202nd generation.
2023-08-02 15:35:59 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 5 minutes 29 seconds
Variants: generated 100, build-succeeded 62, build-failed 28, syntax-invalid 9, redundant 1
Fitness: max 0(62), min 0(62), ave 0
Test execution time: sum 3722 ms, max 75 ms, min 53 ms
----------------------------------------------------------------

2023-08-02 15:35:59 [main] [INFO]  KGenProgMain - entered the era of 203rd generation.
2023-08-02 15:36:20 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 5 minutes 50 seconds
Variants: generated 100, build-succeeded 58, build-failed 30, syntax-invalid 8, redundant 4
Fitness: max 1(1), min 0(57), ave 0.017
Test execution time: sum 3575 ms, max 211 ms, min 52 ms
----------------------------------------------------------------

2023-08-02 15:36:20 [main] [INFO]  KGenProgMain - entered the era of 204th generation.
2023-08-02 15:36:40 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 6 minutes 10 seconds
Variants: generated 100, build-succeeded 61, build-failed 27, syntax-invalid 10, redundant 2
Fitness: max 0(61), min 0(61), ave 0
Test execution time: sum 3595 ms, max 74 ms, min 53 ms
----------------------------------------------------------------

2023-08-02 15:36:40 [main] [INFO]  KGenProgMain - entered the era of 205th generation.
2023-08-02 15:37:02 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 6 minutes 32 seconds
Variants: generated 100, build-succeeded 56, build-failed 32, syntax-invalid 10, redundant 2
Fitness: max 0(56), min 0(56), ave 0
Test execution time: sum 3365 ms, max 124 ms, min 52 ms
----------------------------------------------------------------

2023-08-02 15:37:02 [main] [INFO]  KGenProgMain - entered the era of 206th generation.
2023-08-02 15:37:22 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 6 minutes 52 seconds
Variants: generated 100, build-succeeded 53, build-failed 32, syntax-invalid 11, redundant 4
Fitness: max 0(53), min 0(53), ave 0
Test execution time: sum 3076 ms, max 83 ms, min 52 ms
----------------------------------------------------------------

2023-08-02 15:37:22 [main] [INFO]  KGenProgMain - entered the era of 207th generation.
2023-08-02 15:37:43 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 7 minutes 13 seconds
Variants: generated 100, build-succeeded 60, build-failed 28, syntax-invalid 11, redundant 1
Fitness: max 0(60), min 0(60), ave 0
Test execution time: sum 3737 ms, max 195 ms, min 52 ms
----------------------------------------------------------------

2023-08-02 15:37:43 [main] [INFO]  KGenProgMain - entered the era of 208th generation.
2023-08-02 15:38:04 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 7 minutes 34 seconds
Variants: generated 100, build-succeeded 63, build-failed 23, syntax-invalid 9, redundant 5
Fitness: max 0(63), min 0(63), ave 0
Test execution time: sum 3706 ms, max 76 ms, min 52 ms
----------------------------------------------------------------

2023-08-02 15:38:04 [main] [INFO]  KGenProgMain - entered the era of 209th generation.
2023-08-02 15:38:24 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 7 minutes 54 seconds
Variants: generated 100, build-succeeded 46, build-failed 29, syntax-invalid 16, redundant 9
Fitness: max 0(46), min 0(46), ave 0
Test execution time: sum 2844 ms, max 131 ms, min 53 ms
----------------------------------------------------------------

2023-08-02 15:38:24 [main] [INFO]  KGenProgMain - entered the era of 210th generation.
2023-08-02 15:38:44 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 8 minutes 15 seconds
Variants: generated 100, build-succeeded 57, build-failed 22, syntax-invalid 15, redundant 6
Fitness: max 0(57), min 0(57), ave 0
Test execution time: sum 3264 ms, max 75 ms, min 52 ms
----------------------------------------------------------------

2023-08-02 15:38:44 [main] [INFO]  KGenProgMain - entered the era of 211th generation.
2023-08-02 15:39:04 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 8 minutes 35 seconds
Variants: generated 100, build-succeeded 47, build-failed 32, syntax-invalid 16, redundant 5
Fitness: max 0(47), min 0(47), ave 0
Test execution time: sum 2991 ms, max 139 ms, min 54 ms
----------------------------------------------------------------

2023-08-02 15:39:04 [main] [INFO]  KGenProgMain - entered the era of 212th generation.
2023-08-02 15:39:24 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 8 minutes 54 seconds
Variants: generated 100, build-succeeded 45, build-failed 36, syntax-invalid 17, redundant 2
Fitness: max 0(45), min 0(45), ave 0
Test execution time: sum 2800 ms, max 72 ms, min 53 ms
----------------------------------------------------------------

2023-08-02 15:39:24 [main] [INFO]  KGenProgMain - entered the era of 213th generation.
2023-08-02 15:39:44 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 9 minutes 14 seconds
Variants: generated 100, build-succeeded 41, build-failed 38, syntax-invalid 20, redundant 1
Fitness: max 0(41), min 0(41), ave 0
Test execution time: sum 2734 ms, max 149 ms, min 56 ms
----------------------------------------------------------------

2023-08-02 15:39:44 [main] [INFO]  KGenProgMain - entered the era of 214th generation.
2023-08-02 15:40:05 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 9 minutes 36 seconds
Variants: generated 100, build-succeeded 50, build-failed 35, syntax-invalid 11, redundant 4
Fitness: max 0(50), min 0(50), ave 0
Test execution time: sum 2974 ms, max 131 ms, min 53 ms
----------------------------------------------------------------

2023-08-02 15:40:05 [main] [INFO]  KGenProgMain - entered the era of 215th generation.
2023-08-02 15:40:26 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 9 minutes 56 seconds
Variants: generated 100, build-succeeded 53, build-failed 29, syntax-invalid 14, redundant 4
Fitness: max 0(53), min 0(53), ave 0
Test execution time: sum 3026 ms, max 69 ms, min 52 ms
----------------------------------------------------------------

2023-08-02 15:40:26 [main] [INFO]  KGenProgMain - entered the era of 216th generation.
2023-08-02 15:40:49 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 10 minutes 19 seconds
Variants: generated 100, build-succeeded 54, build-failed 30, syntax-invalid 6, redundant 10
Fitness: max 0(54), min 0(54), ave 0
Test execution time: sum 3256 ms, max 146 ms, min 52 ms
----------------------------------------------------------------

2023-08-02 15:40:49 [main] [INFO]  KGenProgMain - entered the era of 217th generation.
2023-08-02 15:41:09 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 10 minutes 39 seconds
Variants: generated 100, build-succeeded 48, build-failed 36, syntax-invalid 14, redundant 2
Fitness: max 0(48), min 0(48), ave 0
Test execution time: sum 2829 ms, max 82 ms, min 53 ms
----------------------------------------------------------------

2023-08-02 15:41:09 [main] [INFO]  KGenProgMain - entered the era of 218th generation.
2023-08-02 15:41:31 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 11 minutes 1 seconds
Variants: generated 100, build-succeeded 53, build-failed 32, syntax-invalid 7, redundant 8
Fitness: max 0(53), min 0(53), ave 0
Test execution time: sum 3214 ms, max 112 ms, min 53 ms
----------------------------------------------------------------

2023-08-02 15:41:31 [main] [INFO]  KGenProgMain - entered the era of 219th generation.
2023-08-02 15:41:52 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 11 minutes 23 seconds
Variants: generated 100, build-succeeded 61, build-failed 27, syntax-invalid 7, redundant 5
Fitness: max 0(61), min 0(61), ave 0
Test execution time: sum 3429 ms, max 71 ms, min 52 ms
----------------------------------------------------------------

2023-08-02 15:41:52 [main] [INFO]  KGenProgMain - entered the era of 220th generation.
2023-08-02 15:42:15 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 11 minutes 45 seconds
Variants: generated 100, build-succeeded 54, build-failed 29, syntax-invalid 10, redundant 7
Fitness: max 0(54), min 0(54), ave 0
Test execution time: sum 3270 ms, max 136 ms, min 51 ms
----------------------------------------------------------------

2023-08-02 15:42:15 [main] [INFO]  KGenProgMain - entered the era of 221st generation.
2023-08-02 15:42:36 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 12 minutes 6 seconds
Variants: generated 100, build-succeeded 53, build-failed 27, syntax-invalid 17, redundant 3
Fitness: max 0(53), min 0(53), ave 0
Test execution time: sum 3046 ms, max 74 ms, min 52 ms
----------------------------------------------------------------

2023-08-02 15:42:36 [main] [INFO]  KGenProgMain - entered the era of 222nd generation.
2023-08-02 15:42:58 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 12 minutes 28 seconds
Variants: generated 100, build-succeeded 59, build-failed 28, syntax-invalid 8, redundant 5
Fitness: max 0(59), min 0(59), ave 0
Test execution time: sum 3743 ms, max 209 ms, min 52 ms
----------------------------------------------------------------

2023-08-02 15:42:58 [main] [INFO]  KGenProgMain - entered the era of 223rd generation.
2023-08-02 15:43:19 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 12 minutes 49 seconds
Variants: generated 100, build-succeeded 59, build-failed 25, syntax-invalid 10, redundant 6
Fitness: max 0(59), min 0(59), ave 0
Test execution time: sum 3396 ms, max 82 ms, min 52 ms
----------------------------------------------------------------

2023-08-02 15:43:19 [main] [INFO]  KGenProgMain - entered the era of 224th generation.
2023-08-02 15:43:41 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 13 minutes 11 seconds
Variants: generated 100, build-succeeded 55, build-failed 27, syntax-invalid 12, redundant 6
Fitness: max 0(55), min 0(55), ave 0
Test execution time: sum 3353 ms, max 127 ms, min 51 ms
----------------------------------------------------------------

2023-08-02 15:43:41 [main] [INFO]  KGenProgMain - entered the era of 225th generation.
2023-08-02 15:44:01 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 13 minutes 32 seconds
Variants: generated 100, build-succeeded 54, build-failed 29, syntax-invalid 13, redundant 4
Fitness: max 0(54), min 0(54), ave 0
Test execution time: sum 3120 ms, max 79 ms, min 52 ms
----------------------------------------------------------------

2023-08-02 15:44:01 [main] [INFO]  KGenProgMain - entered the era of 226th generation.
2023-08-02 15:44:24 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 13 minutes 54 seconds
Variants: generated 100, build-succeeded 60, build-failed 24, syntax-invalid 9, redundant 7
Fitness: max 0(60), min 0(60), ave 0
Test execution time: sum 3681 ms, max 136 ms, min 51 ms
----------------------------------------------------------------

2023-08-02 15:44:24 [main] [INFO]  KGenProgMain - entered the era of 227th generation.
2023-08-02 15:44:45 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 14 minutes 15 seconds
Variants: generated 100, build-succeeded 56, build-failed 29, syntax-invalid 11, redundant 4
Fitness: max 1(1), min 0(55), ave 0.018
Test execution time: sum 3401 ms, max 86 ms, min 52 ms
----------------------------------------------------------------

2023-08-02 15:44:45 [main] [INFO]  KGenProgMain - entered the era of 228th generation.
2023-08-02 15:45:08 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 14 minutes 38 seconds
Variants: generated 100, build-succeeded 64, build-failed 29, syntax-invalid 5, redundant 2
Fitness: max 1(1), min 0(63), ave 0.016
Test execution time: sum 3857 ms, max 137 ms, min 52 ms
----------------------------------------------------------------

2023-08-02 15:45:08 [main] [INFO]  KGenProgMain - entered the era of 229th generation.
2023-08-02 15:45:30 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 15 minutes 0 seconds
Variants: generated 100, build-succeeded 60, build-failed 31, syntax-invalid 3, redundant 6
Fitness: max 0(60), min 0(60), ave 0
Test execution time: sum 3537 ms, max 80 ms, min 52 ms
----------------------------------------------------------------

2023-08-02 15:45:30 [main] [INFO]  KGenProgMain - entered the era of 230th generation.
2023-08-02 15:45:54 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 15 minutes 24 seconds
Variants: generated 100, build-succeeded 63, build-failed 31, syntax-invalid 2, redundant 4
Fitness: max 0(63), min 0(63), ave 0
Test execution time: sum 3877 ms, max 139 ms, min 54 ms
----------------------------------------------------------------

2023-08-02 15:45:54 [main] [INFO]  KGenProgMain - entered the era of 231st generation.
2023-08-02 15:46:17 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 15 minutes 47 seconds
Variants: generated 100, build-succeeded 62, build-failed 27, syntax-invalid 6, redundant 5
Fitness: max 1(1), min 0(61), ave 0.016
Test execution time: sum 3698 ms, max 73 ms, min 53 ms
----------------------------------------------------------------

2023-08-02 15:46:17 [main] [INFO]  KGenProgMain - entered the era of 232nd generation.
2023-08-02 15:46:41 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 16 minutes 11 seconds
Variants: generated 100, build-succeeded 60, build-failed 34, syntax-invalid 2, redundant 4
Fitness: max 0(60), min 0(60), ave 0
Test execution time: sum 3607 ms, max 135 ms, min 53 ms
----------------------------------------------------------------

2023-08-02 15:46:41 [main] [INFO]  KGenProgMain - entered the era of 233rd generation.
2023-08-02 15:47:04 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 16 minutes 34 seconds
Variants: generated 100, build-succeeded 66, build-failed 27, syntax-invalid 2, redundant 5
Fitness: max 0(66), min 0(66), ave 0
Test execution time: sum 3957 ms, max 71 ms, min 54 ms
----------------------------------------------------------------

2023-08-02 15:47:04 [main] [INFO]  KGenProgMain - entered the era of 234th generation.
2023-08-02 15:47:27 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 16 minutes 57 seconds
Variants: generated 100, build-succeeded 59, build-failed 35, syntax-invalid 3, redundant 3
Fitness: max 0(59), min 0(59), ave 0
Test execution time: sum 3454 ms, max 127 ms, min 52 ms
----------------------------------------------------------------

2023-08-02 15:47:27 [main] [INFO]  KGenProgMain - entered the era of 235th generation.
2023-08-02 15:47:48 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 17 minutes 19 seconds
Variants: generated 100, build-succeeded 56, build-failed 26, syntax-invalid 6, redundant 12
Fitness: max 0(56), min 0(56), ave 0
Test execution time: sum 3243 ms, max 70 ms, min 53 ms
----------------------------------------------------------------

2023-08-02 15:47:48 [main] [INFO]  KGenProgMain - entered the era of 236th generation.
2023-08-02 15:48:12 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 17 minutes 42 seconds
Variants: generated 100, build-succeeded 59, build-failed 29, syntax-invalid 6, redundant 6
Fitness: max 0(59), min 0(59), ave 0
Test execution time: sum 3516 ms, max 142 ms, min 53 ms
----------------------------------------------------------------

2023-08-02 15:48:12 [main] [INFO]  KGenProgMain - entered the era of 237th generation.
2023-08-02 15:48:33 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 18 minutes 3 seconds
Variants: generated 100, build-succeeded 56, build-failed 26, syntax-invalid 9, redundant 9
Fitness: max 0(56), min 0(56), ave 0
Test execution time: sum 3205 ms, max 72 ms, min 52 ms
----------------------------------------------------------------

2023-08-02 15:48:33 [main] [INFO]  KGenProgMain - entered the era of 238th generation.
2023-08-02 15:48:56 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 18 minutes 26 seconds
Variants: generated 100, build-succeeded 51, build-failed 31, syntax-invalid 14, redundant 4
Fitness: max 1(1), min 0(50), ave 0.02
Test execution time: sum 3053 ms, max 129 ms, min 52 ms
----------------------------------------------------------------

2023-08-02 15:48:56 [main] [INFO]  KGenProgMain - entered the era of 239th generation.
2023-08-02 15:49:18 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 18 minutes 48 seconds
Variants: generated 100, build-succeeded 57, build-failed 26, syntax-invalid 11, redundant 6
Fitness: max 1(1), min 0(56), ave 0.018
Test execution time: sum 3294 ms, max 76 ms, min 53 ms
----------------------------------------------------------------

2023-08-02 15:49:18 [main] [INFO]  KGenProgMain - entered the era of 240th generation.
2023-08-02 15:49:41 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 19 minutes 11 seconds
Variants: generated 100, build-succeeded 52, build-failed 27, syntax-invalid 16, redundant 5
Fitness: max 0(52), min 0(52), ave 0
Test execution time: sum 3170 ms, max 143 ms, min 53 ms
----------------------------------------------------------------

2023-08-02 15:49:41 [main] [INFO]  KGenProgMain - entered the era of 241st generation.
2023-08-02 15:50:04 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 19 minutes 34 seconds
Variants: generated 100, build-succeeded 55, build-failed 32, syntax-invalid 9, redundant 4
Fitness: max 0(55), min 0(55), ave 0
Test execution time: sum 3183 ms, max 78 ms, min 53 ms
----------------------------------------------------------------

2023-08-02 15:50:04 [main] [INFO]  KGenProgMain - entered the era of 242nd generation.
2023-08-02 15:50:28 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 19 minutes 58 seconds
Variants: generated 100, build-succeeded 56, build-failed 27, syntax-invalid 11, redundant 6
Fitness: max 0(56), min 0(56), ave 0
Test execution time: sum 3534 ms, max 187 ms, min 53 ms
----------------------------------------------------------------

2023-08-02 15:50:28 [main] [INFO]  KGenProgMain - entered the era of 243rd generation.
2023-08-02 15:50:51 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 20 minutes 21 seconds
Variants: generated 100, build-succeeded 60, build-failed 29, syntax-invalid 10, redundant 1
Fitness: max 0(60), min 0(60), ave 0
Test execution time: sum 3449 ms, max 75 ms, min 52 ms
----------------------------------------------------------------

2023-08-02 15:50:51 [main] [INFO]  KGenProgMain - entered the era of 244th generation.
2023-08-02 15:51:15 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 20 minutes 45 seconds
Variants: generated 100, build-succeeded 61, build-failed 25, syntax-invalid 7, redundant 7
Fitness: max 0(61), min 0(61), ave 0
Test execution time: sum 3794 ms, max 137 ms, min 53 ms
----------------------------------------------------------------

2023-08-02 15:51:15 [main] [INFO]  KGenProgMain - entered the era of 245th generation.
2023-08-02 15:51:39 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 21 minutes 9 seconds
Variants: generated 100, build-succeeded 60, build-failed 29, syntax-invalid 9, redundant 2
Fitness: max 0(60), min 0(60), ave 0
Test execution time: sum 3544 ms, max 82 ms, min 53 ms
----------------------------------------------------------------

2023-08-02 15:51:39 [main] [INFO]  KGenProgMain - entered the era of 246th generation.
2023-08-02 15:52:03 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 21 minutes 34 seconds
Variants: generated 100, build-succeeded 54, build-failed 31, syntax-invalid 9, redundant 6
Fitness: max 0(54), min 0(54), ave 0
Test execution time: sum 3363 ms, max 128 ms, min 54 ms
----------------------------------------------------------------

2023-08-02 15:52:03 [main] [INFO]  KGenProgMain - entered the era of 247th generation.
2023-08-02 15:52:28 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 21 minutes 58 seconds
Variants: generated 100, build-succeeded 59, build-failed 30, syntax-invalid 8, redundant 3
Fitness: max 0(59), min 0(59), ave 0
Test execution time: sum 3610 ms, max 75 ms, min 53 ms
----------------------------------------------------------------

2023-08-02 15:52:28 [main] [INFO]  KGenProgMain - entered the era of 248th generation.
2023-08-02 15:52:52 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 22 minutes 22 seconds
Variants: generated 100, build-succeeded 52, build-failed 30, syntax-invalid 13, redundant 5
Fitness: max 0(52), min 0(52), ave 0
Test execution time: sum 3123 ms, max 109 ms, min 53 ms
----------------------------------------------------------------

2023-08-02 15:52:52 [main] [INFO]  KGenProgMain - entered the era of 249th generation.
2023-08-02 15:53:16 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 22 minutes 46 seconds
Variants: generated 100, build-succeeded 57, build-failed 26, syntax-invalid 15, redundant 2
Fitness: max 0(57), min 0(57), ave 0
Test execution time: sum 3300 ms, max 69 ms, min 53 ms
----------------------------------------------------------------

2023-08-02 15:53:16 [main] [INFO]  KGenProgMain - entered the era of 250th generation.
2023-08-02 15:53:42 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 23 minutes 12 seconds
Variants: generated 100, build-succeeded 58, build-failed 32, syntax-invalid 5, redundant 5
Fitness: max 1(1), min 0(57), ave 0.017
Test execution time: sum 3526 ms, max 138 ms, min 53 ms
----------------------------------------------------------------

2023-08-02 15:53:42 [main] [INFO]  KGenProgMain - entered the era of 251st generation.
2023-08-02 15:54:06 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 23 minutes 36 seconds
Variants: generated 100, build-succeeded 56, build-failed 29, syntax-invalid 8, redundant 7
Fitness: max 0(56), min 0(56), ave 0
Test execution time: sum 3291 ms, max 68 ms, min 53 ms
----------------------------------------------------------------

2023-08-02 15:54:06 [main] [INFO]  KGenProgMain - entered the era of 252nd generation.
2023-08-02 15:54:31 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 24 minutes 1 seconds
Variants: generated 100, build-succeeded 56, build-failed 30, syntax-invalid 11, redundant 3
Fitness: max 1(1), min 0(55), ave 0.018
Test execution time: sum 3477 ms, max 141 ms, min 53 ms
----------------------------------------------------------------

2023-08-02 15:54:31 [main] [INFO]  KGenProgMain - entered the era of 253rd generation.
2023-08-02 15:54:55 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 24 minutes 26 seconds
Variants: generated 100, build-succeeded 61, build-failed 22, syntax-invalid 11, redundant 6
Fitness: max 1(1), min 0(60), ave 0.016
Test execution time: sum 3906 ms, max 134 ms, min 54 ms
----------------------------------------------------------------

2023-08-02 15:54:55 [main] [INFO]  KGenProgMain - entered the era of 254th generation.
2023-08-02 15:55:20 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 24 minutes 51 seconds
Variants: generated 100, build-succeeded 53, build-failed 31, syntax-invalid 13, redundant 3
Fitness: max 0(53), min 0(53), ave 0
Test execution time: sum 3242 ms, max 121 ms, min 54 ms
----------------------------------------------------------------

2023-08-02 15:55:20 [main] [INFO]  KGenProgMain - entered the era of 255th generation.
2023-08-02 15:55:45 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 25 minutes 15 seconds
Variants: generated 100, build-succeeded 56, build-failed 32, syntax-invalid 6, redundant 6
Fitness: max 0(56), min 0(56), ave 0
Test execution time: sum 3300 ms, max 79 ms, min 53 ms
----------------------------------------------------------------

2023-08-02 15:55:45 [main] [INFO]  KGenProgMain - entered the era of 256th generation.
2023-08-02 15:56:11 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 25 minutes 41 seconds
Variants: generated 100, build-succeeded 55, build-failed 35, syntax-invalid 8, redundant 2
Fitness: max 0(55), min 0(55), ave 0
Test execution time: sum 3394 ms, max 124 ms, min 53 ms
----------------------------------------------------------------

2023-08-02 15:56:11 [main] [INFO]  KGenProgMain - entered the era of 257th generation.
2023-08-02 15:56:35 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 26 minutes 5 seconds
Variants: generated 100, build-succeeded 55, build-failed 32, syntax-invalid 12, redundant 1
Fitness: max 0(55), min 0(55), ave 0
Test execution time: sum 3401 ms, max 78 ms, min 54 ms
----------------------------------------------------------------

2023-08-02 15:56:35 [main] [INFO]  KGenProgMain - entered the era of 258th generation.
2023-08-02 15:57:02 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 26 minutes 32 seconds
Variants: generated 100, build-succeeded 56, build-failed 33, syntax-invalid 8, redundant 3
Fitness: max 0(56), min 0(56), ave 0
Test execution time: sum 3445 ms, max 128 ms, min 54 ms
----------------------------------------------------------------

2023-08-02 15:57:02 [main] [INFO]  KGenProgMain - entered the era of 259th generation.
2023-08-02 15:57:26 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 26 minutes 57 seconds
Variants: generated 100, build-succeeded 55, build-failed 25, syntax-invalid 11, redundant 9
Fitness: max 1(1), min 0(54), ave 0.018
Test execution time: sum 3311 ms, max 74 ms, min 55 ms
----------------------------------------------------------------

2023-08-02 15:57:26 [main] [INFO]  KGenProgMain - entered the era of 260th generation.
2023-08-02 15:57:50 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 27 minutes 20 seconds
Variants: generated 100, build-succeeded 47, build-failed 32, syntax-invalid 17, redundant 4
Fitness: max 0(47), min 0(47), ave 0
Test execution time: sum 2948 ms, max 125 ms, min 55 ms
----------------------------------------------------------------

2023-08-02 15:57:50 [main] [INFO]  KGenProgMain - entered the era of 261st generation.
2023-08-02 15:58:15 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 27 minutes 45 seconds
Variants: generated 100, build-succeeded 58, build-failed 27, syntax-invalid 10, redundant 5
Fitness: max 1(1), min 0(57), ave 0.017
Test execution time: sum 3599 ms, max 80 ms, min 54 ms
----------------------------------------------------------------

2023-08-02 15:58:15 [main] [INFO]  KGenProgMain - entered the era of 262nd generation.
2023-08-02 15:58:39 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 28 minutes 9 seconds
Variants: generated 100, build-succeeded 52, build-failed 31, syntax-invalid 14, redundant 3
Fitness: max 1(2), min 0(50), ave 0.038
Test execution time: sum 3220 ms, max 144 ms, min 55 ms
----------------------------------------------------------------

2023-08-02 15:58:39 [main] [INFO]  KGenProgMain - entered the era of 263rd generation.
2023-08-02 15:59:03 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 28 minutes 33 seconds
Variants: generated 100, build-succeeded 59, build-failed 24, syntax-invalid 13, redundant 4
Fitness: max 1(1), min 0(58), ave 0.017
Test execution time: sum 3502 ms, max 75 ms, min 53 ms
----------------------------------------------------------------

2023-08-02 15:59:03 [main] [INFO]  KGenProgMain - entered the era of 264th generation.
2023-08-02 15:59:28 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 28 minutes 58 seconds
Variants: generated 100, build-succeeded 51, build-failed 31, syntax-invalid 12, redundant 6
Fitness: max 0(51), min 0(51), ave 0
Test execution time: sum 3298 ms, max 195 ms, min 54 ms
----------------------------------------------------------------

2023-08-02 15:59:28 [main] [INFO]  KGenProgMain - entered the era of 265th generation.
2023-08-02 15:59:53 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 29 minutes 23 seconds
Variants: generated 100, build-succeeded 59, build-failed 29, syntax-invalid 11, redundant 1
Fitness: max 0(59), min 0(59), ave 0
Test execution time: sum 3573 ms, max 80 ms, min 53 ms
----------------------------------------------------------------

2023-08-02 15:59:53 [main] [INFO]  KGenProgMain - entered the era of 266th generation.
2023-08-02 16:00:19 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 29 minutes 49 seconds
Variants: generated 100, build-succeeded 55, build-failed 33, syntax-invalid 9, redundant 3
Fitness: max 0(55), min 0(55), ave 0
Test execution time: sum 3445 ms, max 128 ms, min 54 ms
----------------------------------------------------------------

2023-08-02 16:00:19 [main] [INFO]  KGenProgMain - entered the era of 267th generation.
2023-08-02 16:00:43 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 30 minutes 13 seconds
Variants: generated 100, build-succeeded 48, build-failed 30, syntax-invalid 16, redundant 6
Fitness: max 1(1), min 0(47), ave 0.021
Test execution time: sum 3104 ms, max 125 ms, min 53 ms
----------------------------------------------------------------

2023-08-02 16:00:43 [main] [INFO]  KGenProgMain - entered the era of 268th generation.
2023-08-02 16:01:08 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 30 minutes 38 seconds
Variants: generated 100, build-succeeded 57, build-failed 29, syntax-invalid 8, redundant 6
Fitness: max 0(57), min 0(57), ave 0
Test execution time: sum 3354 ms, max 74 ms, min 52 ms
----------------------------------------------------------------

2023-08-02 16:01:08 [main] [INFO]  KGenProgMain - entered the era of 269th generation.
2023-08-02 16:01:33 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 31 minutes 3 seconds
Variants: generated 100, build-succeeded 50, build-failed 29, syntax-invalid 11, redundant 10
Fitness: max 1(1), min 0(49), ave 0.02
Test execution time: sum 3155 ms, max 121 ms, min 52 ms
----------------------------------------------------------------

2023-08-02 16:01:33 [main] [INFO]  KGenProgMain - entered the era of 270th generation.
2023-08-02 16:01:59 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 31 minutes 29 seconds
Variants: generated 100, build-succeeded 58, build-failed 30, syntax-invalid 11, redundant 1
Fitness: max 1(1), min 0(57), ave 0.017
Test execution time: sum 3560 ms, max 76 ms, min 53 ms
----------------------------------------------------------------

2023-08-02 16:01:59 [main] [INFO]  KGenProgMain - entered the era of 271st generation.
2023-08-02 16:02:24 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 31 minutes 54 seconds
Variants: generated 100, build-succeeded 46, build-failed 32, syntax-invalid 17, redundant 5
Fitness: max 0(46), min 0(46), ave 0
Test execution time: sum 2991 ms, max 129 ms, min 53 ms
----------------------------------------------------------------

2023-08-02 16:02:24 [main] [INFO]  KGenProgMain - entered the era of 272nd generation.
2023-08-02 16:02:50 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 32 minutes 20 seconds
Variants: generated 100, build-succeeded 57, build-failed 25, syntax-invalid 10, redundant 8
Fitness: max 0(57), min 0(57), ave 0
Test execution time: sum 3497 ms, max 195 ms, min 53 ms
----------------------------------------------------------------

2023-08-02 16:02:50 [main] [INFO]  KGenProgMain - entered the era of 273rd generation.
2023-08-02 16:03:14 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 32 minutes 44 seconds
Variants: generated 100, build-succeeded 50, build-failed 28, syntax-invalid 14, redundant 8
Fitness: max 0(50), min 0(50), ave 0
Test execution time: sum 2966 ms, max 76 ms, min 54 ms
----------------------------------------------------------------

2023-08-02 16:03:14 [main] [INFO]  KGenProgMain - entered the era of 274th generation.
2023-08-02 16:03:39 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 33 minutes 9 seconds
Variants: generated 100, build-succeeded 50, build-failed 33, syntax-invalid 15, redundant 2
Fitness: max 0(50), min 0(50), ave 0
Test execution time: sum 3199 ms, max 137 ms, min 53 ms
----------------------------------------------------------------

2023-08-02 16:03:39 [main] [INFO]  KGenProgMain - entered the era of 275th generation.
2023-08-02 16:04:04 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 33 minutes 34 seconds
Variants: generated 100, build-succeeded 52, build-failed 30, syntax-invalid 15, redundant 3
Fitness: max 0(52), min 0(52), ave 0
Test execution time: sum 3345 ms, max 137 ms, min 53 ms
----------------------------------------------------------------

2023-08-02 16:04:04 [main] [INFO]  KGenProgMain - entered the era of 276th generation.
2023-08-02 16:04:30 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 34 minutes 0 seconds
Variants: generated 100, build-succeeded 54, build-failed 24, syntax-invalid 16, redundant 6
Fitness: max 0(54), min 0(54), ave 0
Test execution time: sum 3507 ms, max 152 ms, min 53 ms
----------------------------------------------------------------

2023-08-02 16:04:30 [main] [INFO]  KGenProgMain - entered the era of 277th generation.
2023-08-02 16:04:56 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 34 minutes 26 seconds
Variants: generated 100, build-succeeded 52, build-failed 30, syntax-invalid 14, redundant 4
Fitness: max 1(1), min 0(51), ave 0.019
Test execution time: sum 3411 ms, max 124 ms, min 54 ms
----------------------------------------------------------------

2023-08-02 16:04:56 [main] [INFO]  KGenProgMain - entered the era of 278th generation.
2023-08-02 16:05:23 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 34 minutes 53 seconds
Variants: generated 100, build-succeeded 52, build-failed 30, syntax-invalid 8, redundant 10
Fitness: max 0(52), min 0(52), ave 0
Test execution time: sum 3255 ms, max 124 ms, min 53 ms
----------------------------------------------------------------

2023-08-02 16:05:23 [main] [INFO]  KGenProgMain - entered the era of 279th generation.
2023-08-02 16:05:47 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 35 minutes 17 seconds
Variants: generated 100, build-succeeded 48, build-failed 34, syntax-invalid 16, redundant 2
Fitness: max 0(48), min 0(48), ave 0
Test execution time: sum 2843 ms, max 71 ms, min 53 ms
----------------------------------------------------------------

2023-08-02 16:05:47 [main] [INFO]  KGenProgMain - entered the era of 280th generation.
2023-08-02 16:06:14 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 35 minutes 44 seconds
Variants: generated 100, build-succeeded 54, build-failed 32, syntax-invalid 9, redundant 5
Fitness: max 1(2), min 0(52), ave 0.037
Test execution time: sum 3286 ms, max 117 ms, min 54 ms
----------------------------------------------------------------

2023-08-02 16:06:14 [main] [INFO]  KGenProgMain - entered the era of 281st generation.
2023-08-02 16:06:39 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 36 minutes 9 seconds
Variants: generated 100, build-succeeded 57, build-failed 25, syntax-invalid 13, redundant 5
Fitness: max 0(57), min 0(57), ave 0
Test execution time: sum 3397 ms, max 73 ms, min 54 ms
----------------------------------------------------------------

2023-08-02 16:06:39 [main] [INFO]  KGenProgMain - entered the era of 282nd generation.
2023-08-02 16:07:05 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 36 minutes 35 seconds
Variants: generated 100, build-succeeded 48, build-failed 37, syntax-invalid 13, redundant 2
Fitness: max 1(1), min 0(47), ave 0.021
Test execution time: sum 3000 ms, max 132 ms, min 54 ms
----------------------------------------------------------------

2023-08-02 16:07:05 [main] [INFO]  KGenProgMain - entered the era of 283rd generation.
2023-08-02 16:07:30 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 37 minutes 1 seconds
Variants: generated 100, build-succeeded 54, build-failed 32, syntax-invalid 8, redundant 6
Fitness: max 1(1), min 0(53), ave 0.019
Test execution time: sum 3272 ms, max 75 ms, min 55 ms
----------------------------------------------------------------

2023-08-02 16:07:30 [main] [INFO]  KGenProgMain - entered the era of 284th generation.
2023-08-02 16:07:58 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 37 minutes 28 seconds
Variants: generated 100, build-succeeded 50, build-failed 37, syntax-invalid 9, redundant 4
Fitness: max 0(50), min 0(50), ave 0
Test execution time: sum 3081 ms, max 142 ms, min 55 ms
----------------------------------------------------------------

2023-08-02 16:07:58 [main] [INFO]  KGenProgMain - entered the era of 285th generation.
2023-08-02 16:08:22 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 37 minutes 52 seconds
Variants: generated 100, build-succeeded 47, build-failed 36, syntax-invalid 12, redundant 5
Fitness: max 0(47), min 0(47), ave 0
Test execution time: sum 2918 ms, max 72 ms, min 54 ms
----------------------------------------------------------------

2023-08-02 16:08:22 [main] [INFO]  KGenProgMain - entered the era of 286th generation.
2023-08-02 16:08:49 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 38 minutes 19 seconds
Variants: generated 100, build-succeeded 53, build-failed 31, syntax-invalid 14, redundant 2
Fitness: max 0(53), min 0(53), ave 0
Test execution time: sum 3340 ms, max 135 ms, min 53 ms
----------------------------------------------------------------

2023-08-02 16:08:49 [main] [INFO]  KGenProgMain - entered the era of 287th generation.
2023-08-02 16:09:15 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 38 minutes 45 seconds
Variants: generated 100, build-succeeded 59, build-failed 25, syntax-invalid 8, redundant 8
Fitness: max 0(59), min 0(59), ave 0
Test execution time: sum 3594 ms, max 73 ms, min 53 ms
----------------------------------------------------------------

2023-08-02 16:09:15 [main] [INFO]  KGenProgMain - entered the era of 288th generation.
2023-08-02 16:09:43 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 39 minutes 13 seconds
Variants: generated 100, build-succeeded 57, build-failed 31, syntax-invalid 8, redundant 4
Fitness: max 0(57), min 0(57), ave 0
Test execution time: sum 3550 ms, max 134 ms, min 55 ms
----------------------------------------------------------------

2023-08-02 16:09:43 [main] [INFO]  KGenProgMain - entered the era of 289th generation.
2023-08-02 16:10:08 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 39 minutes 38 seconds
Variants: generated 100, build-succeeded 48, build-failed 30, syntax-invalid 19, redundant 3
Fitness: max 0(48), min 0(48), ave 0
Test execution time: sum 2923 ms, max 75 ms, min 56 ms
----------------------------------------------------------------

2023-08-02 16:10:08 [main] [INFO]  KGenProgMain - entered the era of 290th generation.
2023-08-02 16:10:34 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 40 minutes 4 seconds
Variants: generated 100, build-succeeded 50, build-failed 30, syntax-invalid 16, redundant 4
Fitness: max 1(2), min 0(48), ave 0.04
Test execution time: sum 3118 ms, max 119 ms, min 53 ms
----------------------------------------------------------------

2023-08-02 16:10:34 [main] [INFO]  KGenProgMain - entered the era of 291st generation.
2023-08-02 16:11:00 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 40 minutes 30 seconds
Variants: generated 100, build-succeeded 55, build-failed 28, syntax-invalid 14, redundant 3
Fitness: max 1(4), min 0(51), ave 0.073
Test execution time: sum 3356 ms, max 73 ms, min 55 ms
----------------------------------------------------------------

2023-08-02 16:11:00 [main] [INFO]  KGenProgMain - entered the era of 292nd generation.
2023-08-02 16:11:27 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 40 minutes 57 seconds
Variants: generated 100, build-succeeded 55, build-failed 30, syntax-invalid 11, redundant 4
Fitness: max 1(2), min 0(53), ave 0.036
Test execution time: sum 3343 ms, max 117 ms, min 54 ms
----------------------------------------------------------------

2023-08-02 16:11:27 [main] [INFO]  KGenProgMain - entered the era of 293rd generation.
2023-08-02 16:11:53 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 41 minutes 23 seconds
Variants: generated 100, build-succeeded 49, build-failed 33, syntax-invalid 13, redundant 5
Fitness: max 1(1), min 0(48), ave 0.02
Test execution time: sum 2903 ms, max 74 ms, min 53 ms
----------------------------------------------------------------

2023-08-02 16:11:53 [main] [INFO]  KGenProgMain - entered the era of 294th generation.
2023-08-02 16:12:20 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 41 minutes 50 seconds
Variants: generated 100, build-succeeded 47, build-failed 31, syntax-invalid 15, redundant 7
Fitness: max 1(1), min 0(46), ave 0.021
Test execution time: sum 2948 ms, max 148 ms, min 54 ms
----------------------------------------------------------------

2023-08-02 16:12:20 [main] [INFO]  KGenProgMain - entered the era of 295th generation.
2023-08-02 16:12:47 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 42 minutes 17 seconds
Variants: generated 100, build-succeeded 50, build-failed 29, syntax-invalid 17, redundant 4
Fitness: max 0(50), min 0(50), ave 0
Test execution time: sum 3039 ms, max 75 ms, min 54 ms
----------------------------------------------------------------

2023-08-02 16:12:47 [main] [INFO]  KGenProgMain - entered the era of 296th generation.
2023-08-02 16:13:14 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 42 minutes 44 seconds
Variants: generated 100, build-succeeded 46, build-failed 24, syntax-invalid 24, redundant 6
Fitness: max 0(46), min 0(46), ave 0
Test execution time: sum 2965 ms, max 158 ms, min 55 ms
----------------------------------------------------------------

2023-08-02 16:13:14 [main] [INFO]  KGenProgMain - entered the era of 297th generation.
2023-08-02 16:13:40 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 43 minutes 10 seconds
Variants: generated 100, build-succeeded 49, build-failed 29, syntax-invalid 15, redundant 7
Fitness: max 1(1), min 0(48), ave 0.02
Test execution time: sum 2846 ms, max 71 ms, min 53 ms
----------------------------------------------------------------

2023-08-02 16:13:40 [main] [INFO]  KGenProgMain - entered the era of 298th generation.
2023-08-02 16:14:08 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 43 minutes 39 seconds
Variants: generated 100, build-succeeded 51, build-failed 31, syntax-invalid 11, redundant 7
Fitness: max 0(51), min 0(51), ave 0
Test execution time: sum 3300 ms, max 181 ms, min 54 ms
----------------------------------------------------------------

2023-08-02 16:14:08 [main] [INFO]  KGenProgMain - entered the era of 299th generation.
2023-08-02 16:14:34 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 44 minutes 4 seconds
Variants: generated 100, build-succeeded 38, build-failed 38, syntax-invalid 24, redundant 0
Fitness: max 0(38), min 0(38), ave 0
Test execution time: sum 2280 ms, max 77 ms, min 53 ms
----------------------------------------------------------------

2023-08-02 16:14:34 [main] [INFO]  KGenProgMain - entered the era of 300th generation.
2023-08-02 16:15:00 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 44 minutes 30 seconds
Variants: generated 100, build-succeeded 38, build-failed 34, syntax-invalid 23, redundant 5
Fitness: max 0(38), min 0(38), ave 0
Test execution time: sum 2543 ms, max 134 ms, min 55 ms
----------------------------------------------------------------

2023-08-02 16:15:00 [main] [INFO]  KGenProgMain - entered the era of 301st generation.
2023-08-02 16:15:25 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 44 minutes 55 seconds
Variants: generated 100, build-succeeded 40, build-failed 28, syntax-invalid 25, redundant 7
Fitness: max 0(40), min 0(40), ave 0
Test execution time: sum 2379 ms, max 78 ms, min 54 ms
----------------------------------------------------------------

2023-08-02 16:15:25 [main] [INFO]  KGenProgMain - entered the era of 302nd generation.
2023-08-02 16:15:50 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 45 minutes 20 seconds
Variants: generated 100, build-succeeded 35, build-failed 37, syntax-invalid 25, redundant 3
Fitness: max 0(35), min 0(35), ave 0
Test execution time: sum 2250 ms, max 72 ms, min 56 ms
----------------------------------------------------------------

2023-08-02 16:15:50 [main] [INFO]  KGenProgMain - entered the era of 303rd generation.
2023-08-02 16:16:18 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 45 minutes 48 seconds
Variants: generated 100, build-succeeded 49, build-failed 28, syntax-invalid 19, redundant 4
Fitness: max 0(49), min 0(49), ave 0
Test execution time: sum 3008 ms, max 149 ms, min 54 ms
----------------------------------------------------------------

2023-08-02 16:16:18 [main] [INFO]  KGenProgMain - entered the era of 304th generation.
2023-08-02 16:16:46 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 46 minutes 17 seconds
Variants: generated 100, build-succeeded 46, build-failed 34, syntax-invalid 17, redundant 3
Fitness: max 0(46), min 0(46), ave 0
Test execution time: sum 3160 ms, max 144 ms, min 56 ms
----------------------------------------------------------------

2023-08-02 16:16:46 [main] [INFO]  KGenProgMain - entered the era of 305th generation.
2023-08-02 16:17:12 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 46 minutes 42 seconds
Variants: generated 100, build-succeeded 48, build-failed 21, syntax-invalid 16, redundant 15
Fitness: max 0(48), min 0(48), ave 0
Test execution time: sum 2777 ms, max 70 ms, min 53 ms
----------------------------------------------------------------

2023-08-02 16:17:12 [main] [INFO]  KGenProgMain - entered the era of 306th generation.
2023-08-02 16:17:41 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 47 minutes 11 seconds
Variants: generated 100, build-succeeded 50, build-failed 32, syntax-invalid 7, redundant 11
Fitness: max 0(50), min 0(50), ave 0
Test execution time: sum 3138 ms, max 136 ms, min 52 ms
----------------------------------------------------------------

2023-08-02 16:17:41 [main] [INFO]  KGenProgMain - entered the era of 307th generation.
2023-08-02 16:18:07 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 47 minutes 37 seconds
Variants: generated 100, build-succeeded 49, build-failed 32, syntax-invalid 11, redundant 8
Fitness: max 0(49), min 0(49), ave 0
Test execution time: sum 2821 ms, max 110 ms, min 51 ms
----------------------------------------------------------------

2023-08-02 16:18:07 [main] [INFO]  KGenProgMain - entered the era of 308th generation.
2023-08-02 16:18:36 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 48 minutes 6 seconds
Variants: generated 100, build-succeeded 61, build-failed 24, syntax-invalid 8, redundant 7
Fitness: max 0(61), min 0(61), ave 0
Test execution time: sum 3777 ms, max 123 ms, min 53 ms
----------------------------------------------------------------

2023-08-02 16:18:36 [main] [INFO]  KGenProgMain - entered the era of 309th generation.
2023-08-02 16:19:03 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 48 minutes 33 seconds
Variants: generated 100, build-succeeded 45, build-failed 38, syntax-invalid 16, redundant 1
Fitness: max 0(45), min 0(45), ave 0
Test execution time: sum 2611 ms, max 78 ms, min 53 ms
----------------------------------------------------------------

2023-08-02 16:19:03 [main] [INFO]  KGenProgMain - entered the era of 310th generation.
2023-08-02 16:19:31 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 49 minutes 1 seconds
Variants: generated 100, build-succeeded 53, build-failed 27, syntax-invalid 13, redundant 7
Fitness: max 1(1), min 0(52), ave 0.019
Test execution time: sum 3212 ms, max 132 ms, min 52 ms
----------------------------------------------------------------

2023-08-02 16:19:31 [main] [INFO]  KGenProgMain - entered the era of 311th generation.
2023-08-02 16:19:57 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 49 minutes 27 seconds
Variants: generated 100, build-succeeded 46, build-failed 29, syntax-invalid 16, redundant 9
Fitness: max 1(1), min 0(45), ave 0.022
Test execution time: sum 2724 ms, max 110 ms, min 52 ms
----------------------------------------------------------------

2023-08-02 16:19:57 [main] [INFO]  KGenProgMain - entered the era of 312th generation.
2023-08-02 16:20:25 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 49 minutes 55 seconds
Variants: generated 100, build-succeeded 51, build-failed 26, syntax-invalid 13, redundant 10
Fitness: max 0(51), min 0(51), ave 0
Test execution time: sum 3033 ms, max 115 ms, min 53 ms
----------------------------------------------------------------

2023-08-02 16:20:25 [main] [INFO]  KGenProgMain - entered the era of 313th generation.
2023-08-02 16:20:54 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 50 minutes 24 seconds
Variants: generated 100, build-succeeded 62, build-failed 28, syntax-invalid 2, redundant 8
Fitness: max 0(62), min 0(62), ave 0
Test execution time: sum 3551 ms, max 70 ms, min 52 ms
----------------------------------------------------------------

2023-08-02 16:20:54 [main] [INFO]  KGenProgMain - entered the era of 314th generation.
2023-08-02 16:21:23 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 50 minutes 53 seconds
Variants: generated 100, build-succeeded 52, build-failed 33, syntax-invalid 11, redundant 4
Fitness: max 1(1), min 0(51), ave 0.019
Test execution time: sum 3052 ms, max 129 ms, min 51 ms
----------------------------------------------------------------

2023-08-02 16:21:23 [main] [INFO]  KGenProgMain - entered the era of 315th generation.
2023-08-02 16:21:50 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 51 minutes 21 seconds
Variants: generated 100, build-succeeded 53, build-failed 31, syntax-invalid 7, redundant 9
Fitness: max 0(53), min 0(53), ave 0
Test execution time: sum 3191 ms, max 74 ms, min 52 ms
----------------------------------------------------------------

2023-08-02 16:21:50 [main] [INFO]  KGenProgMain - entered the era of 316th generation.
2023-08-02 16:22:20 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 51 minutes 50 seconds
Variants: generated 100, build-succeeded 57, build-failed 29, syntax-invalid 10, redundant 4
Fitness: max 0(57), min 0(57), ave 0
Test execution time: sum 3599 ms, max 133 ms, min 54 ms
----------------------------------------------------------------

2023-08-02 16:22:20 [main] [INFO]  KGenProgMain - entered the era of 317th generation.
2023-08-02 16:22:48 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 52 minutes 18 seconds
Variants: generated 100, build-succeeded 52, build-failed 26, syntax-invalid 17, redundant 5
Fitness: max 1(1), min 0(51), ave 0.019
Test execution time: sum 3444 ms, max 218 ms, min 52 ms
----------------------------------------------------------------

2023-08-02 16:22:48 [main] [INFO]  KGenProgMain - entered the era of 318th generation.
2023-08-02 16:26:16 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 55 minutes 46 seconds
Variants: generated 100, build-succeeded 59, build-failed 24, syntax-invalid 10, redundant 7
Fitness: max 0(59), min 0(59), ave 0
Test execution time: sum 183511 ms, max 180062 ms, min 52 ms
----------------------------------------------------------------

2023-08-02 16:26:16 [main] [INFO]  KGenProgMain - entered the era of 319th generation.
2023-08-02 16:29:46 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 59 minutes 16 seconds
Variants: generated 100, build-succeeded 52, build-failed 31, syntax-invalid 11, redundant 6
Fitness: max 0(52), min 0(52), ave 0
Test execution time: sum 183347 ms, max 180075 ms, min 52 ms
----------------------------------------------------------------

2023-08-02 16:29:46 [main] [INFO]  KGenProgMain - entered the era of 320th generation.
2023-08-02 16:30:14 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 59 minutes 44 seconds
Variants: generated 100, build-succeeded 51, build-failed 30, syntax-invalid 15, redundant 4
Fitness: max 0(51), min 0(51), ave 0
Test execution time: sum 3212 ms, max 76 ms, min 54 ms
----------------------------------------------------------------

2023-08-02 16:30:14 [main] [INFO]  KGenProgMain - entered the era of 321st generation.
2023-08-02 16:30:42 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 13 seconds
Variants: generated 100, build-succeeded 50, build-failed 29, syntax-invalid 19, redundant 2
Fitness: max 1(1), min 0(49), ave 0.02
Test execution time: sum 3083 ms, max 139 ms, min 54 ms
----------------------------------------------------------------

2023-08-02 16:30:42 [main] [INFO]  KGenProgMain - entered the era of 322nd generation.
2023-08-02 16:31:10 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 40 seconds
Variants: generated 100, build-succeeded 46, build-failed 31, syntax-invalid 18, redundant 5
Fitness: max 1(1), min 0(45), ave 0.022
Test execution time: sum 2876 ms, max 81 ms, min 54 ms
----------------------------------------------------------------

2023-08-02 16:31:10 [main] [INFO]  KGenProgMain - entered the era of 323rd generation.
2023-08-02 16:31:39 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 1 minutes 9 seconds
Variants: generated 100, build-succeeded 60, build-failed 21, syntax-invalid 14, redundant 5
Fitness: max 1(2), min 0(58), ave 0.033
Test execution time: sum 3649 ms, max 125 ms, min 54 ms
----------------------------------------------------------------

2023-08-02 16:31:39 [main] [INFO]  KGenProgMain - entered the era of 324th generation.
2023-08-02 16:32:07 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 1 minutes 37 seconds
Variants: generated 100, build-succeeded 51, build-failed 30, syntax-invalid 13, redundant 6
Fitness: max 1(1), min 0(50), ave 0.02
Test execution time: sum 2906 ms, max 69 ms, min 52 ms
----------------------------------------------------------------

2023-08-02 16:32:07 [main] [INFO]  KGenProgMain - entered the era of 325th generation.
2023-08-02 16:32:36 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 2 minutes 6 seconds
Variants: generated 100, build-succeeded 53, build-failed 31, syntax-invalid 12, redundant 4
Fitness: max 0(53), min 0(53), ave 0
Test execution time: sum 3349 ms, max 148 ms, min 54 ms
----------------------------------------------------------------

2023-08-02 16:32:36 [main] [INFO]  KGenProgMain - entered the era of 326th generation.
2023-08-02 16:33:04 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 2 minutes 35 seconds
Variants: generated 100, build-succeeded 55, build-failed 29, syntax-invalid 12, redundant 4
Fitness: max 0(55), min 0(55), ave 0
Test execution time: sum 3360 ms, max 75 ms, min 56 ms
----------------------------------------------------------------

2023-08-02 16:33:04 [main] [INFO]  KGenProgMain - entered the era of 327th generation.
2023-08-02 16:33:34 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 3 minutes 5 seconds
Variants: generated 100, build-succeeded 57, build-failed 30, syntax-invalid 9, redundant 4
Fitness: max 0(57), min 0(57), ave 0
Test execution time: sum 3523 ms, max 133 ms, min 55 ms
----------------------------------------------------------------

2023-08-02 16:33:34 [main] [INFO]  KGenProgMain - entered the era of 328th generation.
2023-08-02 16:34:02 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 3 minutes 32 seconds
Variants: generated 100, build-succeeded 52, build-failed 30, syntax-invalid 14, redundant 4
Fitness: max 1(1), min 0(51), ave 0.019
Test execution time: sum 3196 ms, max 72 ms, min 54 ms
----------------------------------------------------------------

2023-08-02 16:34:02 [main] [INFO]  KGenProgMain - entered the era of 329th generation.
2023-08-02 16:34:32 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 4 minutes 2 seconds
Variants: generated 100, build-succeeded 57, build-failed 29, syntax-invalid 11, redundant 3
Fitness: max 0(57), min 0(57), ave 0
Test execution time: sum 3567 ms, max 136 ms, min 56 ms
----------------------------------------------------------------

2023-08-02 16:34:32 [main] [INFO]  KGenProgMain - entered the era of 330th generation.
2023-08-02 16:35:00 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 4 minutes 31 seconds
Variants: generated 100, build-succeeded 54, build-failed 26, syntax-invalid 17, redundant 3
Fitness: max 1(1), min 0(53), ave 0.019
Test execution time: sum 3283 ms, max 74 ms, min 54 ms
----------------------------------------------------------------

2023-08-02 16:35:00 [main] [INFO]  KGenProgMain - entered the era of 331st generation.
2023-08-02 16:35:29 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 5 minutes 0 seconds
Variants: generated 100, build-succeeded 49, build-failed 24, syntax-invalid 14, redundant 13
Fitness: max 0(49), min 0(49), ave 0
Test execution time: sum 3080 ms, max 136 ms, min 54 ms
----------------------------------------------------------------

2023-08-02 16:35:29 [main] [INFO]  KGenProgMain - entered the era of 332nd generation.
2023-08-02 16:35:56 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 5 minutes 26 seconds
Variants: generated 97, build-succeeded 44, build-failed 36, syntax-invalid 13, redundant 4
Fitness: max 1(2), min 0(42), ave 0.045
Test execution time: sum 2736 ms, max 77 ms, min 55 ms
----------------------------------------------------------------

2023-08-02 16:35:56 [main] [INFO]  KGenProgMain - GA stopped
2023-08-02 16:35:59 [main] [INFO]  PatchLogExporter - patch (v18)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 16:35:59 [main] [INFO]  PatchLogExporter - patch (v18)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 16:35:59 [main] [INFO]  PatchLogExporter - patch (v18)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 16:35:59 [main] [INFO]  PatchLogExporter - patch (v18)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -276,10 +276,6 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-08-02 16:35:59 [main] [INFO]  PatchLogExporter - patch (v41)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 16:35:59 [main] [INFO]  PatchLogExporter - patch (v41)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 16:35:59 [main] [INFO]  PatchLogExporter - patch (v41)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 16:35:59 [main] [INFO]  PatchLogExporter - patch (v41)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,15 +223,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
2023-08-02 16:35:59 [main] [INFO]  PatchLogExporter - patch (v109)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,7 +88,6 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
@@ -217,7 +216,6 @@
   public void storeTime(final double t) {
 
     currentTime = t;
-    h           = currentTime - previousTime;
     setInterpolatedTime(t);
 
     // the step is not finalized anymore
2023-08-02 16:35:59 [main] [INFO]  PatchLogExporter - patch (v109)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 16:35:59 [main] [INFO]  PatchLogExporter - patch (v109)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 16:35:59 [main] [INFO]  PatchLogExporter - patch (v109)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 16:35:59 [main] [INFO]  PatchLogExporter - patch (v109)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -276,10 +276,6 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-08-02 16:35:59 [main] [INFO]  PatchLogExporter - patch (v946)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -217,7 +217,6 @@
   public void storeTime(final double t) {
 
     currentTime = t;
-    h           = currentTime - previousTime;
     setInterpolatedTime(t);
 
     // the step is not finalized anymore
2023-08-02 16:35:59 [main] [INFO]  PatchLogExporter - patch (v946)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 16:35:59 [main] [INFO]  PatchLogExporter - patch (v946)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -64,6 +64,8 @@
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
+		this.absoluteAccuracy = defaultAbsoluteAccuracy;
+		this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.maximalIterationCount = defaultMaximalIterationCount;
         this.iterationCount = 0;
     }
2023-08-02 16:35:59 [main] [INFO]  PatchLogExporter - patch (v946)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -103,7 +103,7 @@
         g0                = Double.NaN;
         g0Positive        = true;
         pendingEvent      = false;
-        pendingEventTime  = Double.NaN;
+        pendingEvent = false;
         previousEventTime = Double.NaN;
         increasing        = true;
         nextAction        = EventHandler.CONTINUE;
2023-08-02 16:35:59 [main] [INFO]  PatchLogExporter - patch (v946)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 16:35:59 [main] [INFO]  PatchLogExporter - patch (v946)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 16:35:59 [main] [INFO]  PatchLogExporter - patch (v946)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -276,10 +276,6 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-08-02 16:35:59 [main] [INFO]  PatchLogExporter - patch (v1311)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,7 +90,6 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
-    interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
@@ -113,8 +112,6 @@
 
     currentState            = y;
     interpolatedState       = new double[y.length];
-    interpolatedDerivatives = new double[y.length];
-
     finalized         = false;
     this.forward      = forward;
     this.dirtyState   = true;
2023-08-02 16:35:59 [main] [INFO]  PatchLogExporter - patch (v1311)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 16:35:59 [main] [INFO]  PatchLogExporter - patch (v1311)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -64,6 +64,7 @@
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
+		this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.maximalIterationCount = defaultMaximalIterationCount;
         this.iterationCount = 0;
     }
2023-08-02 16:35:59 [main] [INFO]  PatchLogExporter - patch (v1311)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -103,7 +103,7 @@
         g0                = Double.NaN;
         g0Positive        = true;
         pendingEvent      = false;
-        pendingEventTime  = Double.NaN;
+        pendingEvent = false;
         previousEventTime = Double.NaN;
         increasing        = true;
         nextAction        = EventHandler.CONTINUE;
@@ -282,7 +282,6 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-08-02 16:35:59 [main] [INFO]  PatchLogExporter - patch (v1311)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 16:35:59 [main] [INFO]  PatchLogExporter - patch (v1311)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 16:35:59 [main] [INFO]  PatchLogExporter - patch (v2833)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -87,10 +87,11 @@
    * initializing the copy.
    */
   protected AbstractStepInterpolator() {
-    previousTime            = Double.NaN;
+    interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
-    interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
2023-08-02 16:35:59 [main] [INFO]  PatchLogExporter - patch (v2833)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 16:35:59 [main] [INFO]  PatchLogExporter - patch (v2833)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -61,7 +61,6 @@
                                       final double defaultAbsoluteAccuracy) {
         this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
         this.defaultRelativeAccuracy = 1.0e-14;
-        this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
2023-08-02 16:35:59 [main] [INFO]  PatchLogExporter - patch (v2833)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -97,6 +97,8 @@
         this.maxCheckInterval  = maxCheckInterval;
         this.convergence       = Math.abs(convergence);
         this.maxIterationCount = maxIterationCount;
+		g0Positive = g0 >= 0;
+		g0Positive = g0 >= 0;
 
         // some dummy values ...
         t0                = Double.NaN;
@@ -104,7 +106,6 @@
         g0Positive        = true;
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
-        previousEventTime = Double.NaN;
         increasing        = true;
         nextAction        = EventHandler.CONTINUE;
 
2023-08-02 16:35:59 [main] [INFO]  PatchLogExporter - patch (v2833)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 16:35:59 [main] [INFO]  PatchLogExporter - patch (v2833)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 16:35:59 [main] [INFO]  PatchLogExporter - patch (v2833)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,15 +223,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
2023-08-02 16:35:59 [main] [INFO]  PatchLogExporter - patch (v7129)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,15 +88,14 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    finalized = false;
+	finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -107,17 +106,13 @@
   protected AbstractStepInterpolator(final double[] y, final boolean forward) {
 
     previousTime      = Double.NaN;
-    currentTime       = Double.NaN;
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
     currentState            = y;
     interpolatedState       = new double[y.length];
-    interpolatedDerivatives = new double[y.length];
-
     finalized         = false;
     this.forward      = forward;
-    this.dirtyState   = true;
 
   }
 
@@ -169,14 +164,11 @@
   protected void reinitialize(final double[] y, final boolean isForward) {
 
     previousTime      = Double.NaN;
-    currentTime       = Double.NaN;
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
     currentState            = y;
     interpolatedState       = new double[y.length];
-    interpolatedDerivatives = new double[y.length];
-
     finalized         = false;
     this.forward      = isForward;
     this.dirtyState   = true;
@@ -271,8 +263,11 @@
       // lazy evaluation of the state
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
-          computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
       }
 
2023-08-02 16:35:59 [main] [INFO]  PatchLogExporter - patch (v7129)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 16:35:59 [main] [INFO]  PatchLogExporter - patch (v7129)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-08-02 16:35:59 [main] [INFO]  PatchLogExporter - patch (v7129)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -169,7 +169,6 @@
 
         try {
 
-            forward = interpolator.isForward();
             final double t1 = interpolator.getCurrentTime();
             final int    n  = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));
             final double h  = (t1 - t0) / n;
2023-08-02 16:35:59 [main] [INFO]  PatchLogExporter - patch (v7129)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 16:35:59 [main] [INFO]  PatchLogExporter - patch (v7129)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 16:35:59 [main] [INFO]  PatchLogExporter - patch (v8016)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,15 +88,13 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
     h                       = Double.NaN;
-    interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    finalized = false;
+	finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -107,14 +105,11 @@
   protected AbstractStepInterpolator(final double[] y, final boolean forward) {
 
     previousTime      = Double.NaN;
-    currentTime       = Double.NaN;
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
     currentState            = y;
     interpolatedState       = new double[y.length];
-    interpolatedDerivatives = new double[y.length];
-
     finalized         = false;
     this.forward      = forward;
     this.dirtyState   = true;
@@ -271,8 +266,12 @@
       // lazy evaluation of the state
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
-          computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
       }
 
2023-08-02 16:35:59 [main] [INFO]  PatchLogExporter - patch (v8016)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 16:35:59 [main] [INFO]  PatchLogExporter - patch (v8016)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -150,6 +150,8 @@
         throws EventException {
         t0 = tStart;
         g0 = handler.g(tStart, yStart);
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
         g0Positive = g0 >= 0;
     }
 
@@ -282,7 +284,6 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-08-02 16:35:59 [main] [INFO]  PatchLogExporter - patch (v8016)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 16:35:59 [main] [INFO]  PatchLogExporter - patch (v8016)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 16:35:59 [main] [INFO]  PatchLogExporter - patch (v8959)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,13 +88,14 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
     h                       = Double.NaN;
-    interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    finalized = false;
+	finalized = false;
+	finalized = false;
+	finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -109,12 +110,8 @@
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
     h                 = Double.NaN;
-    interpolatedTime  = Double.NaN;
-
     currentState            = y;
     interpolatedState       = new double[y.length];
-    interpolatedDerivatives = new double[y.length];
-
     finalized         = false;
     this.forward      = forward;
     this.dirtyState   = true;
@@ -217,7 +214,6 @@
   public void storeTime(final double t) {
 
     currentTime = t;
-    h           = currentTime - previousTime;
     setInterpolatedTime(t);
 
     // the step is not finalized anymore
@@ -271,6 +267,11 @@
       // lazy evaluation of the state
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
2023-08-02 16:35:59 [main] [INFO]  PatchLogExporter - patch (v8959)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 16:35:59 [main] [INFO]  PatchLogExporter - patch (v8959)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-08-02 16:35:59 [main] [INFO]  PatchLogExporter - patch (v8959)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -150,6 +150,8 @@
         throws EventException {
         t0 = tStart;
         g0 = handler.g(tStart, yStart);
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
         g0Positive = g0 >= 0;
     }
 
2023-08-02 16:35:59 [main] [INFO]  PatchLogExporter - patch (v8959)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 16:35:59 [main] [INFO]  PatchLogExporter - patch (v8959)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v10061)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,13 +88,12 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
     h                       = Double.NaN;
-    interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    finalized = false;
+	finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -109,12 +108,8 @@
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
     h                 = Double.NaN;
-    interpolatedTime  = Double.NaN;
-
     currentState            = y;
     interpolatedState       = new double[y.length];
-    interpolatedDerivatives = new double[y.length];
-
     finalized         = false;
     this.forward      = forward;
     this.dirtyState   = true;
@@ -271,6 +266,18 @@
       // lazy evaluation of the state
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v10061)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v10061)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v10061)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v10061)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -274,8 +274,7 @@
                 } else {
                     p = -p;
                 }
-                if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
-                        p >= Math.abs(0.5 * oldDelta * p1)) {
+                if (Math.abs(y1) > Math.abs(y0)) {
                     // Inverse quadratic interpolation gives a value
                     // in the wrong direction, or progress is slow.
                     // Fall back to bisection.
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v10334)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,15 +88,13 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
-    h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    finalized = false;
+	finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -107,7 +105,6 @@
   protected AbstractStepInterpolator(final double[] y, final boolean forward) {
 
     previousTime      = Double.NaN;
-    currentTime       = Double.NaN;
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
@@ -218,7 +215,7 @@
 
     currentTime = t;
     h           = currentTime - previousTime;
-    setInterpolatedTime(t);
+    currentTime = t;
 
     // the step is not finalized anymore
     finalized  = false;
@@ -271,6 +268,17 @@
       // lazy evaluation of the state
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v10334)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v10334)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -105,7 +105,6 @@
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
-        increasing        = true;
         nextAction        = EventHandler.CONTINUE;
 
     }
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v10334)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v10334)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v10334)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,15 +223,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v10392)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,13 +88,14 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
     h                       = Double.NaN;
-    interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    finalized = false;
+	finalized = false;
+	finalized = false;
+	finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -107,7 +108,6 @@
   protected AbstractStepInterpolator(final double[] y, final boolean forward) {
 
     previousTime      = Double.NaN;
-    currentTime       = Double.NaN;
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
@@ -271,6 +271,13 @@
       // lazy evaluation of the state
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v10392)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v10392)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -102,10 +102,9 @@
         t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
+        pendingEventTime = Double.NaN;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
-        increasing        = true;
         nextAction        = EventHandler.CONTINUE;
 
     }
@@ -150,6 +149,7 @@
         throws EventException {
         t0 = tStart;
         g0 = handler.g(tStart, yStart);
+		pendingEventTime = Double.NaN;
         g0Positive = g0 >= 0;
     }
 
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v10392)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v10392)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v10392)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -274,8 +274,7 @@
                 } else {
                     p = -p;
                 }
-                if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
-                        p >= Math.abs(0.5 * oldDelta * p1)) {
+                if (Math.abs(y1) > Math.abs(y0)) {
                     // Inverse quadratic interpolation gives a value
                     // in the wrong direction, or progress is slow.
                     // Fall back to bisection.
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v10474)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,15 +88,12 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
-    h                       = Double.NaN;
-    interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    finalized = false;
+	finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -109,8 +106,6 @@
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
     h                 = Double.NaN;
-    interpolatedTime  = Double.NaN;
-
     currentState            = y;
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
@@ -271,6 +266,16 @@
       // lazy evaluation of the state
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v10474)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v10474)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -102,10 +102,9 @@
         t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
+        pendingEventTime = Double.NaN;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
-        increasing        = true;
         nextAction        = EventHandler.CONTINUE;
 
     }
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v10474)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v10474)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v10474)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -274,8 +274,7 @@
                 } else {
                     p = -p;
                 }
-                if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
-                        p >= Math.abs(0.5 * oldDelta * p1)) {
+                if (Math.abs(y1) > Math.abs(y0)) {
                     // Inverse quadratic interpolation gives a value
                     // in the wrong direction, or progress is slow.
                     // Fall back to bisection.
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v10512)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,9 +88,8 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
     h                       = Double.NaN;
-    interpolatedTime        = Double.NaN;
+    setInterpolatedTime(getInterpolatedTime());
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
@@ -107,14 +106,11 @@
   protected AbstractStepInterpolator(final double[] y, final boolean forward) {
 
     previousTime      = Double.NaN;
-    currentTime       = Double.NaN;
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
     currentState            = y;
     interpolatedState       = new double[y.length];
-    interpolatedDerivatives = new double[y.length];
-
     finalized         = false;
     this.forward      = forward;
     this.dirtyState   = true;
@@ -218,7 +214,7 @@
 
     currentTime = t;
     h           = currentTime - previousTime;
-    setInterpolatedTime(t);
+    currentTime = t;
 
     // the step is not finalized anymore
     finalized  = false;
@@ -271,6 +267,17 @@
       // lazy evaluation of the state
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v10512)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v10512)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -150,6 +150,8 @@
         throws EventException {
         t0 = tStart;
         g0 = handler.g(tStart, yStart);
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
         g0Positive = g0 >= 0;
     }
 
@@ -282,7 +284,6 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v10512)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v10512)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v10563)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,13 +88,13 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
     h                       = Double.NaN;
-    interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    finalized = false;
+	finalized = false;
+	finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -107,14 +107,11 @@
   protected AbstractStepInterpolator(final double[] y, final boolean forward) {
 
     previousTime      = Double.NaN;
-    currentTime       = Double.NaN;
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
     currentState            = y;
     interpolatedState       = new double[y.length];
-    interpolatedDerivatives = new double[y.length];
-
     finalized         = false;
     this.forward      = forward;
     this.dirtyState   = true;
@@ -271,6 +268,15 @@
       // lazy evaluation of the state
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		final int n = (currentState == null) ? -1 : currentState.length;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v10563)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v10563)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -150,6 +150,7 @@
         throws EventException {
         t0 = tStart;
         g0 = handler.g(tStart, yStart);
+		pendingEventTime = Double.NaN;
         g0Positive = g0 >= 0;
     }
 
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v10563)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v10563)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v10563)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -274,8 +274,7 @@
                 } else {
                     p = -p;
                 }
-                if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
-                        p >= Math.abs(0.5 * oldDelta * p1)) {
+                if (Math.abs(y1) > Math.abs(y0)) {
                     // Inverse quadratic interpolation gives a value
                     // in the wrong direction, or progress is slow.
                     // Fall back to bisection.
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v10798)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,15 +88,12 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
-    h                       = Double.NaN;
-    interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
+    interpolatedDerivatives = null;
   }
 
   /** Simple constructor.
@@ -218,7 +215,7 @@
 
     currentTime = t;
     h           = currentTime - previousTime;
-    setInterpolatedTime(t);
+    currentTime = t;
 
     // the step is not finalized anymore
     finalized  = false;
@@ -271,6 +268,17 @@
       // lazy evaluation of the state
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v10798)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v10798)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -150,6 +150,7 @@
         throws EventException {
         t0 = tStart;
         g0 = handler.g(tStart, yStart);
+		pendingEventTime = Double.NaN;
         g0Positive = g0 >= 0;
     }
 
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v10798)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v10798)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v10798)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -274,8 +274,7 @@
                 } else {
                     p = -p;
                 }
-                if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
-                        p >= Math.abs(0.5 * oldDelta * p1)) {
+                if (Math.abs(y1) > Math.abs(y0)) {
                     // Inverse quadratic interpolation gives a value
                     // in the wrong direction, or progress is slow.
                     // Fall back to bisection.
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v11073)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,15 +88,13 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
-    h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    finalized = false;
+	finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -113,11 +111,8 @@
 
     currentState            = y;
     interpolatedState       = new double[y.length];
-    interpolatedDerivatives = new double[y.length];
-
     finalized         = false;
     this.forward      = forward;
-    this.dirtyState   = true;
 
   }
 
@@ -175,11 +170,8 @@
 
     currentState            = y;
     interpolatedState       = new double[y.length];
-    interpolatedDerivatives = new double[y.length];
-
     finalized         = false;
     this.forward      = isForward;
-    this.dirtyState   = true;
 
   }
 
@@ -271,6 +263,16 @@
       // lazy evaluation of the state
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v11073)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v11073)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v11073)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -150,6 +150,7 @@
         throws EventException {
         t0 = tStart;
         g0 = handler.g(tStart, yStart);
+		pendingEventTime = Double.NaN;
         g0Positive = g0 >= 0;
     }
 
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v11073)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v11073)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v11095)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,15 +88,15 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    finalized = false;
+	finalized = false;
+	finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -107,7 +107,6 @@
   protected AbstractStepInterpolator(final double[] y, final boolean forward) {
 
     previousTime      = Double.NaN;
-    currentTime       = Double.NaN;
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
@@ -271,6 +270,16 @@
       // lazy evaluation of the state
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v11095)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v11095)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -65,7 +65,6 @@
         this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
-        this.iterationCount = 0;
     }
 
     /** {@inheritDoc} */
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v11095)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -150,6 +150,8 @@
         throws EventException {
         t0 = tStart;
         g0 = handler.g(tStart, yStart);
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
         g0Positive = g0 >= 0;
     }
 
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v11095)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v11095)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v11095)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -274,8 +274,7 @@
                 } else {
                     p = -p;
                 }
-                if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
-                        p >= Math.abs(0.5 * oldDelta * p1)) {
+                if (Math.abs(y1) > Math.abs(y0)) {
                     // Inverse quadratic interpolation gives a value
                     // in the wrong direction, or progress is slow.
                     // Fall back to bisection.
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v12654)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,13 +88,13 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    finalized = false;
+	finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -107,7 +107,6 @@
   protected AbstractStepInterpolator(final double[] y, final boolean forward) {
 
     previousTime      = Double.NaN;
-    currentTime       = Double.NaN;
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
@@ -271,6 +270,20 @@
       // lazy evaluation of the state
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v12654)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v12654)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -98,9 +98,7 @@
         this.convergence       = Math.abs(convergence);
         this.maxIterationCount = maxIterationCount;
 
-        // some dummy values ...
-        t0                = Double.NaN;
-        g0                = Double.NaN;
+        increasing = true;
         g0Positive        = true;
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
@@ -148,8 +146,9 @@
      */
     public void reinitializeBegin(final double tStart, final double[] yStart)
         throws EventException {
-        t0 = tStart;
         g0 = handler.g(tStart, yStart);
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
         g0Positive = g0 >= 0;
     }
 
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v12654)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v12654)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v12654)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -229,7 +229,8 @@
                 x1 = x2;
                 x2 = x0;
                 y0 = y1;
-                y1 = y2;
+                x0 = x1;
+				y1 = y2;
                 y2 = y0;
             }
             if (Math.abs(y1) <= functionValueAccuracy) {
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v12852)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,8 +88,6 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
-    h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
@@ -107,7 +105,6 @@
   protected AbstractStepInterpolator(final double[] y, final boolean forward) {
 
     previousTime      = Double.NaN;
-    currentTime       = Double.NaN;
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
@@ -271,6 +268,20 @@
       // lazy evaluation of the state
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v12852)
--- org.apache.commons.math.ode.sampling.DummyStepInterpolator
+++ org.apache.commons.math.ode.sampling.DummyStepInterpolator
@@ -96,7 +96,6 @@
   @Override
   protected void computeInterpolatedStateAndDerivatives(final double theta, final double oneMinusThetaH)
     throws DerivativeException {
-      System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
   }
 
   /** Write the instance to an output channel.
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v12852)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v12852)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -98,9 +98,6 @@
         this.convergence       = Math.abs(convergence);
         this.maxIterationCount = maxIterationCount;
 
-        // some dummy values ...
-        t0                = Double.NaN;
-        g0                = Double.NaN;
         g0Positive        = true;
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
@@ -150,6 +147,7 @@
         throws EventException {
         t0 = tStart;
         g0 = handler.g(tStart, yStart);
+		pendingEventTime = Double.NaN;
         g0Positive = g0 >= 0;
     }
 
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v12852)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v12852)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v12852)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -276,10 +276,7 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
+                    i++;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v13167)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,13 +88,13 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    finalized = false;
+	finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -107,7 +107,6 @@
   protected AbstractStepInterpolator(final double[] y, final boolean forward) {
 
     previousTime      = Double.NaN;
-    currentTime       = Double.NaN;
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
@@ -169,7 +168,6 @@
   protected void reinitialize(final double[] y, final boolean isForward) {
 
     previousTime      = Double.NaN;
-    currentTime       = Double.NaN;
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
@@ -217,7 +215,6 @@
   public void storeTime(final double t) {
 
     currentTime = t;
-    h           = currentTime - previousTime;
     setInterpolatedTime(t);
 
     // the step is not finalized anymore
@@ -271,6 +268,22 @@
       // lazy evaluation of the state
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v13167)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v13167)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -64,7 +64,6 @@
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
-        this.maximalIterationCount = defaultMaximalIterationCount;
         this.iterationCount = 0;
     }
 
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v13167)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -150,6 +150,8 @@
         throws EventException {
         t0 = tStart;
         g0 = handler.g(tStart, yStart);
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
         g0Positive = g0 >= 0;
     }
 
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v13167)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v13167)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v13167)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -276,10 +276,7 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
+                    i++;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v13571)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,13 +88,12 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
-    h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    finalized = false;
+	finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -107,7 +106,6 @@
   protected AbstractStepInterpolator(final double[] y, final boolean forward) {
 
     previousTime      = Double.NaN;
-    currentTime       = Double.NaN;
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
@@ -169,7 +167,6 @@
   protected void reinitialize(final double[] y, final boolean isForward) {
 
     previousTime      = Double.NaN;
-    currentTime       = Double.NaN;
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
@@ -271,8 +268,19 @@
       // lazy evaluation of the state
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
-          computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
+          h = Double.NaN;
+		computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
       }
 
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v13571)
--- org.apache.commons.math.ode.sampling.DummyStepInterpolator
+++ org.apache.commons.math.ode.sampling.DummyStepInterpolator
@@ -96,7 +96,6 @@
   @Override
   protected void computeInterpolatedStateAndDerivatives(final double theta, final double oneMinusThetaH)
     throws DerivativeException {
-      System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
   }
 
   /** Write the instance to an output channel.
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v13571)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v13571)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -98,14 +98,12 @@
         this.convergence       = Math.abs(convergence);
         this.maxIterationCount = maxIterationCount;
 
-        // some dummy values ...
-        t0                = Double.NaN;
+        increasing = true;
         g0                = Double.NaN;
         g0Positive        = true;
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
-        increasing        = true;
         nextAction        = EventHandler.CONTINUE;
 
     }
@@ -150,6 +148,9 @@
         throws EventException {
         t0 = tStart;
         g0 = handler.g(tStart, yStart);
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
         g0Positive = g0 >= 0;
     }
 
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v13571)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v13571)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v13571)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -276,10 +276,7 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
+                    i++;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v13581)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,8 +88,6 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
-    h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
@@ -107,7 +105,6 @@
   protected AbstractStepInterpolator(final double[] y, final boolean forward) {
 
     previousTime      = Double.NaN;
-    currentTime       = Double.NaN;
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
@@ -169,7 +166,6 @@
   protected void reinitialize(final double[] y, final boolean isForward) {
 
     previousTime      = Double.NaN;
-    currentTime       = Double.NaN;
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
@@ -271,8 +267,23 @@
       // lazy evaluation of the state
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
-          computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
+          h = Double.NaN;
+		computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
       }
 
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v13581)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v13581)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -98,14 +98,12 @@
         this.convergence       = Math.abs(convergence);
         this.maxIterationCount = maxIterationCount;
 
-        // some dummy values ...
-        t0                = Double.NaN;
+        increasing = true;
         g0                = Double.NaN;
         g0Positive        = true;
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
-        increasing        = true;
         nextAction        = EventHandler.CONTINUE;
 
     }
@@ -150,6 +148,8 @@
         throws EventException {
         t0 = tStart;
         g0 = handler.g(tStart, yStart);
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
         g0Positive = g0 >= 0;
     }
 
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v13581)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v13581)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v13581)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -276,10 +276,7 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
+                    i++;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v13867)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,13 +88,13 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    finalized = false;
+	finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -107,7 +107,6 @@
   protected AbstractStepInterpolator(final double[] y, final boolean forward) {
 
     previousTime      = Double.NaN;
-    currentTime       = Double.NaN;
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
@@ -271,8 +270,23 @@
       // lazy evaluation of the state
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
-          computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
+          h = Double.NaN;
+		computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
       }
 
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v13867)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v13867)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -98,14 +98,12 @@
         this.convergence       = Math.abs(convergence);
         this.maxIterationCount = maxIterationCount;
 
-        // some dummy values ...
-        t0                = Double.NaN;
+        increasing = true;
         g0                = Double.NaN;
         g0Positive        = true;
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
-        increasing        = true;
         nextAction        = EventHandler.CONTINUE;
 
     }
@@ -150,6 +148,7 @@
         throws EventException {
         t0 = tStart;
         g0 = handler.g(tStart, yStart);
+		pendingEventTime = Double.NaN;
         g0Positive = g0 >= 0;
     }
 
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v13867)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v13867)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v13867)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -276,10 +276,7 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
+                    i++;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
@@ -304,7 +301,6 @@
                 delta = x1 - x0;
                 oldDelta = delta;
             }
-            i++;
         }
         throw new MaxIterationsExceededException(maximalIterationCount);
     }
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v13977)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,13 +88,13 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
-    h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    finalized = false;
+	finalized = false;
+	finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -107,8 +107,6 @@
   protected AbstractStepInterpolator(final double[] y, final boolean forward) {
 
     previousTime      = Double.NaN;
-    currentTime       = Double.NaN;
-    h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
     currentState            = y;
@@ -116,7 +114,7 @@
     interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
-    this.forward      = forward;
+    interpolatedState = new double[y.length];
     this.dirtyState   = true;
 
   }
@@ -271,8 +269,22 @@
       // lazy evaluation of the state
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
-          computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
+          h = Double.NaN;
+		computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
       }
 
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v13977)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v13977)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -98,8 +98,7 @@
         this.convergence       = Math.abs(convergence);
         this.maxIterationCount = maxIterationCount;
 
-        // some dummy values ...
-        t0                = Double.NaN;
+        increasing = true;
         g0                = Double.NaN;
         g0Positive        = true;
         pendingEvent      = false;
@@ -150,6 +149,7 @@
         throws EventException {
         t0 = tStart;
         g0 = handler.g(tStart, yStart);
+		pendingEventTime = Double.NaN;
         g0Positive = g0 >= 0;
     }
 
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v13977)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v13977)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v13977)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -276,10 +276,7 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
+                    i++;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v14266)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -89,12 +89,16 @@
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
+    this.dirtyState = true;
+	this.dirtyState = true;
+	this.dirtyState = true;
+	h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    finalized = false;
+	finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -271,8 +275,26 @@
       // lazy evaluation of the state
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
-          computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
+          h = Double.NaN;
+		computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
       }
 
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v14266)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v14266)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -105,7 +105,6 @@
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
-        increasing        = true;
         nextAction        = EventHandler.CONTINUE;
 
     }
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v14266)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v14266)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v14266)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -276,10 +276,7 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
+                    i++;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v14383)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,13 +88,15 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
-    h                       = Double.NaN;
+    this.dirtyState = true;
+	this.dirtyState = true;
+	h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    finalized = false;
+	finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -208,7 +210,8 @@
    * interpolator for future calls to {@link #storeTime storeTime}
    */
   public void shift() {
-    previousTime = currentTime;
+    finalized = true;
+	previousTime = currentTime;
   }
 
   /** Store the current step time.
@@ -271,8 +274,22 @@
       // lazy evaluation of the state
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
-          computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
+          h = Double.NaN;
+		h = Double.NaN;
+		computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
       }
 
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v14383)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v14383)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -105,7 +105,6 @@
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
-        increasing        = true;
         nextAction        = EventHandler.CONTINUE;
 
     }
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v14383)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v14383)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v14383)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -269,13 +269,12 @@
                     p = r3 * (dx * r1 * (r1 - r2) - (x1 - x0) * (r2 - 1.0));
                     p1 = (r1 - 1.0) * (r2 - 1.0) * (r3 - 1.0);
                 }
-                if (p > 0.0) {
+                if (i <= maximalIterationCount) {
                     p1 = -p1;
                 } else {
                     p = -p;
                 }
-                if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
-                        p >= Math.abs(0.5 * oldDelta * p1)) {
+                if (dx > 0.0) {
                     // Inverse quadratic interpolation gives a value
                     // in the wrong direction, or progress is slow.
                     // Fall back to bisection.
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v14852)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,13 +88,18 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
-    h                       = Double.NaN;
+    this.dirtyState = true;
+	this.dirtyState = true;
+	this.dirtyState = true;
+	this.dirtyState = true;
+	this.dirtyState = true;
+	h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    finalized = false;
+	finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -271,6 +276,22 @@
       // lazy evaluation of the state
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v14852)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v14852)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -105,7 +105,6 @@
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
-        increasing        = true;
         nextAction        = EventHandler.CONTINUE;
 
     }
@@ -150,6 +149,7 @@
         throws EventException {
         t0 = tStart;
         g0 = handler.g(tStart, yStart);
+		pendingEventTime = Double.NaN;
         g0Positive = g0 >= 0;
     }
 
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v14852)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v14852)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v14852)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -276,10 +276,7 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
+                    i++;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v14888)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,13 +88,18 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
-    h                       = Double.NaN;
+    this.dirtyState = true;
+	this.dirtyState = true;
+	this.dirtyState = true;
+	this.dirtyState = true;
+	this.dirtyState = true;
+	h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    finalized = false;
+	finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -271,6 +276,24 @@
       // lazy evaluation of the state
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v14888)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v14888)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -105,7 +105,6 @@
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
-        increasing        = true;
         nextAction        = EventHandler.CONTINUE;
 
     }
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v14888)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v14888)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v14888)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -276,10 +276,7 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
+                    i++;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v14953)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,13 +88,15 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    dirtyState = false;
+	finalized = false;
+	finalized = false;
+	finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -271,9 +273,23 @@
       // lazy evaluation of the state
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
-          computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
-          dirtyState = false;
+          h = Double.NaN;
+		h = Double.NaN;
+		computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
       }
 
       return interpolatedState;
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v14953)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v14953)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -105,7 +105,6 @@
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
-        increasing        = true;
         nextAction        = EventHandler.CONTINUE;
 
     }
@@ -150,6 +149,7 @@
         throws EventException {
         t0 = tStart;
         g0 = handler.g(tStart, yStart);
+		pendingEventTime = Double.NaN;
         g0Positive = g0 >= 0;
     }
 
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v14953)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v14953)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v14953)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -276,10 +276,7 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
+                    i++;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v15151)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -89,12 +89,15 @@
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
+    this.dirtyState = true;
+	this.dirtyState = true;
+	h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    finalized = false;
+	finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -271,9 +274,25 @@
       // lazy evaluation of the state
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
-          computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
-          dirtyState = false;
       }
 
       return interpolatedState;
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v15151)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v15151)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -150,6 +150,8 @@
         throws EventException {
         t0 = tStart;
         g0 = handler.g(tStart, yStart);
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
         g0Positive = g0 >= 0;
     }
 
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v15151)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v15151)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v15151)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -276,10 +276,7 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
+                    i++;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v15745)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,13 +88,14 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    finalized = false;
+	finalized = false;
+	finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -242,7 +243,6 @@
 
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
-      interpolatedTime = time;
       dirtyState       = true;
   }
 
@@ -271,8 +271,23 @@
       // lazy evaluation of the state
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
-          computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
       }
 
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v15745)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v15745)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -150,6 +150,8 @@
         throws EventException {
         t0 = tStart;
         g0 = handler.g(tStart, yStart);
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
         g0Positive = g0 >= 0;
     }
 
@@ -282,7 +284,6 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v15745)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v15745)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v15745)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -229,7 +229,10 @@
                 x1 = x2;
                 x2 = x0;
                 y0 = y1;
-                y1 = y2;
+                x0 = x1;
+				x0 = x1;
+				x0 = x1;
+				y1 = y2;
                 y2 = y0;
             }
             if (Math.abs(y1) <= functionValueAccuracy) {
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v16031)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,8 +88,10 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
-    h                       = Double.NaN;
+    this.dirtyState = true;
+	this.dirtyState = true;
+	this.dirtyState = true;
+	h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
@@ -107,7 +109,6 @@
   protected AbstractStepInterpolator(final double[] y, final boolean forward) {
 
     previousTime      = Double.NaN;
-    currentTime       = Double.NaN;
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
@@ -271,9 +272,25 @@
       // lazy evaluation of the state
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
-          dirtyState = false;
+          System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
       }
 
       return interpolatedState;
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v16031)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v16031)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -150,6 +150,8 @@
         throws EventException {
         t0 = tStart;
         g0 = handler.g(tStart, yStart);
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
         g0Positive = g0 >= 0;
     }
 
@@ -282,7 +284,7 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
+        nextAction = handler.eventOccurred(t, y, !(increasing ^ forward));
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v16031)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v16031)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v16031)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -229,7 +229,9 @@
                 x1 = x2;
                 x2 = x0;
                 y0 = y1;
-                y1 = y2;
+                x0 = x1;
+				x0 = x1;
+				y1 = y2;
                 y2 = y0;
             }
             if (Math.abs(y1) <= functionValueAccuracy) {
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v16357)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -89,12 +89,15 @@
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
+    this.dirtyState = true;
+	this.dirtyState = true;
+	h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    finalized = false;
+	finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -271,8 +274,25 @@
       // lazy evaluation of the state
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
-          computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
       }
 
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v16357)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v16357)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -101,6 +101,7 @@
         // some dummy values ...
         t0                = Double.NaN;
         g0                = Double.NaN;
+		previousEventTime = Double.NaN;
         g0Positive        = true;
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
@@ -150,6 +151,10 @@
         throws EventException {
         t0 = tStart;
         g0 = handler.g(tStart, yStart);
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
         g0Positive = g0 >= 0;
     }
 
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v16357)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v16357)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v16357)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -276,10 +276,7 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
+                    i++;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v16493)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,13 +88,18 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
-    h                       = Double.NaN;
+    this.dirtyState = true;
+	this.dirtyState = true;
+	this.dirtyState = true;
+	this.dirtyState = true;
+	h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    finalized = false;
+	finalized = false;
+	finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -107,7 +112,6 @@
   protected AbstractStepInterpolator(final double[] y, final boolean forward) {
 
     previousTime      = Double.NaN;
-    currentTime       = Double.NaN;
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
@@ -271,8 +275,19 @@
       // lazy evaluation of the state
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
-          computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
       }
 
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v16493)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v16493)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v16493)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -102,7 +102,6 @@
         t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
@@ -150,6 +149,7 @@
         throws EventException {
         t0 = tStart;
         g0 = handler.g(tStart, yStart);
+		pendingEventTime = Double.NaN;
         g0Positive = g0 >= 0;
     }
 
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v16493)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v16493)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v16493)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -229,7 +229,9 @@
                 x1 = x2;
                 x2 = x0;
                 y0 = y1;
-                y1 = y2;
+                x0 = x1;
+				x0 = x1;
+				y1 = y2;
                 y2 = y0;
             }
             if (Math.abs(y1) <= functionValueAccuracy) {
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v16674)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -89,7 +89,11 @@
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
+    this.dirtyState = true;
+	this.dirtyState = true;
+	this.dirtyState = true;
+	this.dirtyState = true;
+	h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
@@ -271,9 +275,26 @@
       // lazy evaluation of the state
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
-          dirtyState = false;
+          System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
       }
 
       return interpolatedState;
@@ -288,7 +309,7 @@
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
-          dirtyState = false;
+          System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
       }
 
       return interpolatedDerivatives;
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v16674)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v16674)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -102,7 +102,6 @@
         t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
@@ -150,6 +149,8 @@
         throws EventException {
         t0 = tStart;
         g0 = handler.g(tStart, yStart);
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
         g0Positive = g0 >= 0;
     }
 
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v16674)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v16674)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v16674)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -276,10 +276,7 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
+                    i++;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v16692)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -89,12 +89,22 @@
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
+    this.dirtyState = true;
+	this.dirtyState = true;
+	this.dirtyState = true;
+	this.dirtyState = true;
+	this.dirtyState = true;
+	h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    finalized = false;
+	finalized = false;
+	finalized = false;
+	finalized = false;
+	finalized = false;
+	finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -271,6 +281,21 @@
       // lazy evaluation of the state
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v16692)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v16692)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -102,8 +102,6 @@
         t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
-        pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
         nextAction        = EventHandler.CONTINUE;
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v16692)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v16692)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v16692)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -276,10 +276,7 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
+                    i++;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v16760)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,13 +88,17 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
-    h                       = Double.NaN;
+    this.dirtyState = true;
+	this.dirtyState = true;
+	this.dirtyState = true;
+	h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    finalized = false;
+	finalized = false;
+	finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -242,7 +246,6 @@
 
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
-      interpolatedTime = time;
       dirtyState       = true;
   }
 
@@ -271,8 +274,23 @@
       // lazy evaluation of the state
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
-          computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
       }
 
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v16760)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v16760)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -150,6 +150,8 @@
         throws EventException {
         t0 = tStart;
         g0 = handler.g(tStart, yStart);
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
         g0Positive = g0 >= 0;
     }
 
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v16760)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v16760)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v16760)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -276,10 +276,7 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
+                    i++;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v16770)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,13 +88,17 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
-    h                       = Double.NaN;
+    this.dirtyState = true;
+	h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    finalized = false;
+	finalized = false;
+	finalized = false;
+	finalized = false;
+	finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -107,7 +111,6 @@
   protected AbstractStepInterpolator(final double[] y, final boolean forward) {
 
     previousTime      = Double.NaN;
-    currentTime       = Double.NaN;
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
@@ -271,8 +274,21 @@
       // lazy evaluation of the state
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
-          computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
       }
 
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v16770)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v16770)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -102,8 +102,6 @@
         t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
-        pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
         nextAction        = EventHandler.CONTINUE;
@@ -150,6 +148,8 @@
         throws EventException {
         t0 = tStart;
         g0 = handler.g(tStart, yStart);
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
         g0Positive = g0 >= 0;
     }
 
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v16770)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v16770)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v16770)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -276,10 +276,7 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
+                    i++;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v16798)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,13 +88,15 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
-    h                       = Double.NaN;
+    this.dirtyState = true;
+	this.dirtyState = true;
+	h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    finalized = false;
+	finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -271,9 +273,26 @@
       // lazy evaluation of the state
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
-          dirtyState = false;
+          System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
       }
 
       return interpolatedState;
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v16798)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v16798)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -102,7 +102,6 @@
         t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
@@ -150,6 +149,8 @@
         throws EventException {
         t0 = tStart;
         g0 = handler.g(tStart, yStart);
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
         g0Positive = g0 >= 0;
     }
 
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v16798)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v16798)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v16798)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -276,10 +276,7 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
+                    i++;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v16799)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,13 +88,12 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
-    h                       = Double.NaN;
+    this.dirtyState = true;
+	h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -115,7 +114,6 @@
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
-    finalized         = false;
     this.forward      = forward;
     this.dirtyState   = true;
 
@@ -218,8 +216,6 @@
 
     currentTime = t;
     h           = currentTime - previousTime;
-    setInterpolatedTime(t);
-
     // the step is not finalized anymore
     finalized  = false;
 
@@ -271,9 +267,26 @@
       // lazy evaluation of the state
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
-          dirtyState = false;
+          System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
       }
 
       return interpolatedState;
@@ -288,7 +301,7 @@
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
-          dirtyState = false;
+          System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
       }
 
       return interpolatedDerivatives;
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v16799)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v16799)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -150,6 +150,9 @@
         throws EventException {
         t0 = tStart;
         g0 = handler.g(tStart, yStart);
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
         g0Positive = g0 >= 0;
     }
 
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v16799)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v16799)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v16799)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -276,10 +276,7 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
+                    i++;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v16975)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -89,12 +89,16 @@
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
+    this.dirtyState = true;
+	this.dirtyState = true;
+	h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    finalized = false;
+	finalized = false;
+	finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -271,6 +275,28 @@
       // lazy evaluation of the state
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v16975)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v16975)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -150,6 +150,7 @@
         throws EventException {
         t0 = tStart;
         g0 = handler.g(tStart, yStart);
+		pendingEventTime = Double.NaN;
         g0Positive = g0 >= 0;
     }
 
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v16975)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v16975)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v16975)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -276,10 +276,7 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
+                    i++;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v17556)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -89,12 +89,17 @@
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
+    this.dirtyState = true;
+	this.dirtyState = true;
+	this.dirtyState = true;
+	h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    finalized = false;
+	finalized = false;
+	finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -271,6 +276,25 @@
       // lazy evaluation of the state
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v17556)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v17556)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -150,6 +150,7 @@
         throws EventException {
         t0 = tStart;
         g0 = handler.g(tStart, yStart);
+		pendingEventTime = Double.NaN;
         g0Positive = g0 >= 0;
     }
 
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v17556)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v17556)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v17556)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -276,10 +276,7 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
+                    i++;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v17651)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,13 +88,15 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
-    h                       = Double.NaN;
+    this.dirtyState = true;
+	h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    finalized = false;
+	finalized = false;
+	finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -271,6 +273,25 @@
       // lazy evaluation of the state
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v17651)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v17651)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -150,6 +150,9 @@
         throws EventException {
         t0 = tStart;
         g0 = handler.g(tStart, yStart);
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
         g0Positive = g0 >= 0;
     }
 
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v17651)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v17651)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v17651)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -276,10 +276,7 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
+                    i++;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v17778)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,13 +88,13 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    finalized = false;
+	finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -242,7 +242,6 @@
 
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
-      interpolatedTime = time;
       dirtyState       = true;
   }
 
@@ -271,6 +270,27 @@
       // lazy evaluation of the state
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v17778)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v17778)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -150,6 +150,9 @@
         throws EventException {
         t0 = tStart;
         g0 = handler.g(tStart, yStart);
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
         g0Positive = g0 >= 0;
     }
 
@@ -197,9 +200,6 @@
                         // about bracketing
                             // this should never happen
                          
-                    // variation direction, with respect to the integration direction
-                    increasing = gb >= ga;
-
                     final UnivariateRealFunction f = new UnivariateRealFunction() {
                         public double value(final double t) throws FunctionEvaluationException {
                             try {
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v17778)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v17778)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v17778)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -276,10 +276,7 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
+                    i++;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v18064)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,13 +88,14 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    finalized = false;
+	finalized = false;
+	finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -271,6 +272,30 @@
       // lazy evaluation of the state
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v18064)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v18064)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -150,6 +150,7 @@
         throws EventException {
         t0 = tStart;
         g0 = handler.g(tStart, yStart);
+		pendingEventTime = Double.NaN;
         g0Positive = g0 >= 0;
     }
 
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v18064)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v18064)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v18064)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -276,10 +276,7 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
+                    i++;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v18149)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,13 +88,17 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
-    h                       = Double.NaN;
+    this.dirtyState = true;
+	this.dirtyState = true;
+	h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    finalized = false;
+	finalized = false;
+	finalized = false;
+	finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -107,7 +111,6 @@
   protected AbstractStepInterpolator(final double[] y, final boolean forward) {
 
     previousTime      = Double.NaN;
-    currentTime       = Double.NaN;
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
@@ -271,6 +274,25 @@
       // lazy evaluation of the state
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v18149)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v18149)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -150,6 +150,7 @@
         throws EventException {
         t0 = tStart;
         g0 = handler.g(tStart, yStart);
+		pendingEventTime = Double.NaN;
         g0Positive = g0 >= 0;
     }
 
@@ -197,9 +198,6 @@
                         // about bracketing
                             // this should never happen
                          
-                    // variation direction, with respect to the integration direction
-                    increasing = gb >= ga;
-
                     final UnivariateRealFunction f = new UnivariateRealFunction() {
                         public double value(final double t) throws FunctionEvaluationException {
                             try {
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v18149)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v18149)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v18149)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,15 +223,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v18632)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,13 +88,16 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
-    h                       = Double.NaN;
+    this.dirtyState = true;
+	this.dirtyState = true;
+	h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    finalized = false;
+	finalized = false;
+	finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -271,6 +274,26 @@
       // lazy evaluation of the state
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v18632)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v18632)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -106,7 +106,6 @@
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
-        nextAction        = EventHandler.CONTINUE;
 
     }
 
@@ -150,6 +149,8 @@
         throws EventException {
         t0 = tStart;
         g0 = handler.g(tStart, yStart);
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
         g0Positive = g0 >= 0;
     }
 
@@ -197,9 +198,6 @@
                         // about bracketing
                             // this should never happen
                          
-                    // variation direction, with respect to the integration direction
-                    increasing = gb >= ga;
-
                     final UnivariateRealFunction f = new UnivariateRealFunction() {
                         public double value(final double t) throws FunctionEvaluationException {
                             try {
@@ -213,7 +211,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v18632)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v18632)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v18632)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -229,7 +229,8 @@
                 x1 = x2;
                 x2 = x0;
                 y0 = y1;
-                y1 = y2;
+                x0 = x1;
+				y1 = y2;
                 y2 = y0;
             }
             if (Math.abs(y1) <= functionValueAccuracy) {
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v18721)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,13 +88,16 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    finalized = false;
+	finalized = false;
+	finalized = false;
+	finalized = false;
+	finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -271,6 +274,26 @@
       // lazy evaluation of the state
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v18721)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v18721)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -150,6 +150,8 @@
         throws EventException {
         t0 = tStart;
         g0 = handler.g(tStart, yStart);
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
         g0Positive = g0 >= 0;
     }
 
@@ -197,9 +199,6 @@
                         // about bracketing
                             // this should never happen
                          
-                    // variation direction, with respect to the integration direction
-                    increasing = gb >= ga;
-
                     final UnivariateRealFunction f = new UnivariateRealFunction() {
                         public double value(final double t) throws FunctionEvaluationException {
                             try {
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v18721)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v18721)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 16:36:00 [main] [INFO]  PatchLogExporter - patch (v18721)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -229,7 +229,8 @@
                 x1 = x2;
                 x2 = x0;
                 y0 = y1;
-                y1 = y2;
+                x0 = x1;
+				y1 = y2;
                 y2 = y0;
             }
             if (Math.abs(y1) <= functionValueAccuracy) {
@@ -290,7 +291,7 @@
             x0 = x1;
             y0 = y1;
             // Compute new X1, Y1
-            if (Math.abs(delta) > tolerance) {
+            if (i <= maximalIterationCount) {
                 x1 = x1 + delta;
             } else if (dx > 0.0) {
                 x1 = x1 + 0.5 * tolerance;
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v18809)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,13 +88,13 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    finalized = false;
+	finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -107,7 +107,6 @@
   protected AbstractStepInterpolator(final double[] y, final boolean forward) {
 
     previousTime      = Double.NaN;
-    currentTime       = Double.NaN;
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
@@ -169,7 +168,6 @@
   protected void reinitialize(final double[] y, final boolean isForward) {
 
     previousTime      = Double.NaN;
-    currentTime       = Double.NaN;
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
@@ -271,6 +269,28 @@
       // lazy evaluation of the state
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v18809)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v18809)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -150,6 +150,8 @@
         throws EventException {
         t0 = tStart;
         g0 = handler.g(tStart, yStart);
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
         g0Positive = g0 >= 0;
     }
 
@@ -282,7 +284,7 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
+        double ga = g0;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v18809)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v18809)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v18809)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -229,7 +229,8 @@
                 x1 = x2;
                 x2 = x0;
                 y0 = y1;
-                y1 = y2;
+                x0 = x1;
+				y1 = y2;
                 y2 = y0;
             }
             if (Math.abs(y1) <= functionValueAccuracy) {
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v18850)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,13 +88,13 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    finalized = false;
+	finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -107,7 +107,6 @@
   protected AbstractStepInterpolator(final double[] y, final boolean forward) {
 
     previousTime      = Double.NaN;
-    currentTime       = Double.NaN;
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
@@ -169,7 +168,6 @@
   protected void reinitialize(final double[] y, final boolean isForward) {
 
     previousTime      = Double.NaN;
-    currentTime       = Double.NaN;
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
@@ -271,6 +269,28 @@
       // lazy evaluation of the state
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v18850)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v18850)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v18850)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -150,6 +150,8 @@
         throws EventException {
         t0 = tStart;
         g0 = handler.g(tStart, yStart);
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
         g0Positive = g0 >= 0;
     }
 
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v18850)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v18850)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v18850)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -229,7 +229,8 @@
                 x1 = x2;
                 x2 = x0;
                 y0 = y1;
-                y1 = y2;
+                x0 = x1;
+				y1 = y2;
                 y2 = y0;
             }
             if (Math.abs(y1) <= functionValueAccuracy) {
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v18940)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,7 +94,10 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    finalized = false;
+	finalized = false;
+	finalized = false;
+	finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -271,6 +274,25 @@
       // lazy evaluation of the state
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v18940)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v18940)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -150,6 +150,9 @@
         throws EventException {
         t0 = tStart;
         g0 = handler.g(tStart, yStart);
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
         g0Positive = g0 >= 0;
     }
 
@@ -197,9 +200,6 @@
                         // about bracketing
                             // this should never happen
                          
-                    // variation direction, with respect to the integration direction
-                    increasing = gb >= ga;
-
                     final UnivariateRealFunction f = new UnivariateRealFunction() {
                         public double value(final double t) throws FunctionEvaluationException {
                             try {
@@ -213,7 +213,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v18940)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v18940)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v18940)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -229,7 +229,8 @@
                 x1 = x2;
                 x2 = x0;
                 y0 = y1;
-                y1 = y2;
+                x0 = x1;
+				y1 = y2;
                 y2 = y0;
             }
             if (Math.abs(y1) <= functionValueAccuracy) {
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v19236)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,13 +88,12 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
-    h                       = Double.NaN;
+    this.dirtyState = true;
+	h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -107,7 +106,6 @@
   protected AbstractStepInterpolator(final double[] y, final boolean forward) {
 
     previousTime      = Double.NaN;
-    currentTime       = Double.NaN;
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
@@ -115,7 +113,9 @@
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
-    finalized         = false;
+    finalized = false;
+	finalized = false;
+	finalized         = false;
     this.forward      = forward;
     this.dirtyState   = true;
 
@@ -169,7 +169,6 @@
   protected void reinitialize(final double[] y, final boolean isForward) {
 
     previousTime      = Double.NaN;
-    currentTime       = Double.NaN;
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
@@ -271,6 +270,28 @@
       // lazy evaluation of the state
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v19236)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v19236)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -150,6 +150,8 @@
         throws EventException {
         t0 = tStart;
         g0 = handler.g(tStart, yStart);
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
         g0Positive = g0 >= 0;
     }
 
@@ -282,7 +284,6 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v19236)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v19236)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v19745)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,7 +94,10 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    finalized = false;
+	finalized = false;
+	finalized = false;
+	finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -116,7 +119,7 @@
     interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
-    this.forward      = forward;
+    interpolatedDerivatives = null;
     this.dirtyState   = true;
 
   }
@@ -271,6 +274,28 @@
       // lazy evaluation of the state
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v19745)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v19745)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -150,6 +150,9 @@
         throws EventException {
         t0 = tStart;
         g0 = handler.g(tStart, yStart);
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
         g0Positive = g0 >= 0;
     }
 
@@ -213,7 +216,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v19745)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v19745)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v19745)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -229,7 +229,9 @@
                 x1 = x2;
                 x2 = x0;
                 y0 = y1;
-                y1 = y2;
+                x0 = x1;
+				x0 = x1;
+				y1 = y2;
                 y2 = y0;
             }
             if (Math.abs(y1) <= functionValueAccuracy) {
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v20116)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,7 +88,6 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
@@ -271,7 +270,32 @@
       // lazy evaluation of the state
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
-          final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
       }
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v20116)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v20116)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v20116)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v20116)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v20116)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -229,7 +229,8 @@
                 x1 = x2;
                 x2 = x0;
                 y0 = y1;
-                y1 = y2;
+                x0 = x1;
+				y1 = y2;
                 y2 = y0;
             }
             if (Math.abs(y1) <= functionValueAccuracy) {
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v22505)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -271,6 +271,36 @@
       // lazy evaluation of the state
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v22505)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v22505)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -150,6 +150,11 @@
         throws EventException {
         t0 = tStart;
         g0 = handler.g(tStart, yStart);
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
         g0Positive = g0 >= 0;
     }
 
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v22505)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v22505)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v22505)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,15 +223,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v22632)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,7 +94,8 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    finalized = false;
+	finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -271,6 +272,33 @@
       // lazy evaluation of the state
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v22632)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v22632)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -103,7 +103,6 @@
         g0                = Double.NaN;
         g0Positive        = true;
         pendingEvent      = false;
-        pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
         nextAction        = EventHandler.CONTINUE;
@@ -150,6 +149,13 @@
         throws EventException {
         t0 = tStart;
         g0 = handler.g(tStart, yStart);
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
         g0Positive = g0 >= 0;
     }
 
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v22632)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v22632)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v22632)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,15 +223,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v22918)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,7 +94,9 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    finalized = false;
+	finalized = false;
+	finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -271,6 +273,37 @@
       // lazy evaluation of the state
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v22918)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v22918)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -103,7 +103,6 @@
         g0                = Double.NaN;
         g0Positive        = true;
         pendingEvent      = false;
-        pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
         nextAction        = EventHandler.CONTINUE;
@@ -150,6 +149,9 @@
         throws EventException {
         t0 = tStart;
         g0 = handler.g(tStart, yStart);
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
         g0Positive = g0 >= 0;
     }
 
@@ -282,7 +284,6 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v22918)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v22918)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v22918)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -233,10 +233,6 @@
                 y2 = y0;
             }
             if (Math.abs(y1) <= functionValueAccuracy) {
-                // Avoid division by very small values. Assume
-                // the iteration has converged (the problem may
-                // still be ill conditioned)
-                setResult(x1, i);
                 return result;
             }
             double dx = x2 - x1;
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v23645)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,7 +94,12 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    finalized = false;
+	finalized = false;
+	finalized = false;
+	finalized = false;
+	finalized = false;
+	finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -271,6 +276,30 @@
       // lazy evaluation of the state
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v23645)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v23645)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -63,7 +63,6 @@
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
-        this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
         this.iterationCount = 0;
     }
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v23645)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -103,7 +103,6 @@
         g0                = Double.NaN;
         g0Positive        = true;
         pendingEvent      = false;
-        pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
         nextAction        = EventHandler.CONTINUE;
@@ -150,6 +149,7 @@
         throws EventException {
         t0 = tStart;
         g0 = handler.g(tStart, yStart);
+		pendingEventTime = Double.NaN;
         g0Positive = g0 >= 0;
     }
 
@@ -213,7 +213,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v23645)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v23645)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v23645)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -233,10 +233,6 @@
                 y2 = y0;
             }
             if (Math.abs(y1) <= functionValueAccuracy) {
-                // Avoid division by very small values. Assume
-                // the iteration has converged (the problem may
-                // still be ill conditioned)
-                setResult(x1, i);
                 return result;
             }
             double dx = x2 - x1;
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v23732)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,7 +94,8 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    finalized = false;
+	finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -271,6 +272,36 @@
       // lazy evaluation of the state
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		{
+			doFinalize();
+			finalized = true;
+		}
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v23732)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v23732)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -103,7 +103,6 @@
         g0                = Double.NaN;
         g0Positive        = true;
         pendingEvent      = false;
-        pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
         nextAction        = EventHandler.CONTINUE;
@@ -150,6 +149,11 @@
         throws EventException {
         t0 = tStart;
         g0 = handler.g(tStart, yStart);
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
         g0Positive = g0 >= 0;
     }
 
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v23732)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v23732)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v23732)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,15 +223,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v24838)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,7 +94,12 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    finalized = false;
+	finalized = false;
+	finalized = false;
+	finalized = false;
+	finalized = false;
+	finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -243,7 +248,6 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
   }
 
   /** {@inheritDoc} */
@@ -271,6 +275,42 @@
       // lazy evaluation of the state
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		{
+			doFinalize();
+			finalized = true;
+		}
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v24838)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v24838)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -150,6 +150,9 @@
         throws EventException {
         t0 = tStart;
         g0 = handler.g(tStart, yStart);
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
         g0Positive = g0 >= 0;
     }
 
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v24838)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v24838)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v24838)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -233,10 +233,6 @@
                 y2 = y0;
             }
             if (Math.abs(y1) <= functionValueAccuracy) {
-                // Avoid division by very small values. Assume
-                // the iteration has converged (the problem may
-                // still be ill conditioned)
-                setResult(x1, i);
                 return result;
             }
             double dx = x2 - x1;
@@ -276,10 +272,6 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v25044)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,7 +94,12 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    finalized = false;
+	finalized = false;
+	finalized = false;
+	finalized = false;
+	finalized = false;
+	finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -243,7 +248,6 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
   }
 
   /** {@inheritDoc} */
@@ -271,6 +275,41 @@
       // lazy evaluation of the state
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		{
+			doFinalize();
+			finalized = true;
+		}
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v25044)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v25044)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -65,7 +65,8 @@
         this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
-        this.iterationCount = 0;
+        this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
+		this.iterationCount = 0;
     }
 
     /** {@inheritDoc} */
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v25044)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -150,6 +150,9 @@
         throws EventException {
         t0 = tStart;
         g0 = handler.g(tStart, yStart);
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
         g0Positive = g0 >= 0;
     }
 
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v25044)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v25044)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v25044)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,20 +223,8 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
             if (Math.abs(y1) <= functionValueAccuracy) {
-                // Avoid division by very small values. Assume
-                // the iteration has converged (the problem may
-                // still be ill conditioned)
-                setResult(x1, i);
                 return result;
             }
             double dx = x2 - x1;
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v25138)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,7 +94,13 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    finalized = false;
+	finalized = false;
+	finalized = false;
+	finalized = false;
+	finalized = false;
+	finalized = false;
+	finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -271,6 +277,34 @@
       // lazy evaluation of the state
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		{
+			doFinalize();
+			finalized = true;
+		}
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v25138)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v25138)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -103,7 +103,6 @@
         g0                = Double.NaN;
         g0Positive        = true;
         pendingEvent      = false;
-        pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
         nextAction        = EventHandler.CONTINUE;
@@ -150,6 +149,12 @@
         throws EventException {
         t0 = tStart;
         g0 = handler.g(tStart, yStart);
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
         g0Positive = g0 >= 0;
     }
 
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v25138)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v25138)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v25138)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -233,10 +233,6 @@
                 y2 = y0;
             }
             if (Math.abs(y1) <= functionValueAccuracy) {
-                // Avoid division by very small values. Assume
-                // the iteration has converged (the problem may
-                // still be ill conditioned)
-                setResult(x1, i);
                 return result;
             }
             double dx = x2 - x1;
@@ -276,10 +272,6 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v25712)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,7 +94,13 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    finalized = false;
+	finalized = false;
+	finalized = false;
+	finalized = false;
+	finalized = false;
+	finalized = false;
+	finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -243,7 +249,6 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
   }
 
   /** {@inheritDoc} */
@@ -271,6 +276,41 @@
       // lazy evaluation of the state
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v25712)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v25712)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -150,6 +150,9 @@
         throws EventException {
         t0 = tStart;
         g0 = handler.g(tStart, yStart);
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
         g0Positive = g0 >= 0;
     }
 
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v25712)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v25712)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v25712)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -139,7 +139,6 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
-        this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
 
@@ -154,7 +153,6 @@
                                    final int iterationCount) {
         this.result         = x;
         this.functionValue  = fx;
-        this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
 
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v25712)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,15 +223,8 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
+				oldDelta = x2 - x1;
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
@@ -265,6 +258,7 @@
                 } else {
                     // Inverse quadratic interpolation.
                     double r1 = y0 / y2;
+					double xm = 0.5 * (x0 + x2);
                     double r2 = y1 / y2;
                     p = r3 * (dx * r1 * (r1 - r2) - (x1 - x0) * (r2 - 1.0));
                     p1 = (r1 - 1.0) * (r2 - 1.0) * (r3 - 1.0);
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v25908)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,7 +94,11 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    finalized = false;
+	finalized = false;
+	finalized = false;
+	finalized = false;
+	finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -271,6 +275,37 @@
       // lazy evaluation of the state
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		{
+			doFinalize();
+			finalized = true;
+		}
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v25908)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v25908)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -65,7 +65,8 @@
         this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
-        this.iterationCount = 0;
+        this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
+		this.iterationCount = 0;
     }
 
     /** {@inheritDoc} */
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v25908)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -150,6 +150,9 @@
         throws EventException {
         t0 = tStart;
         g0 = handler.g(tStart, yStart);
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
         g0Positive = g0 >= 0;
     }
 
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v25908)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v25908)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v25908)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -233,11 +233,7 @@
                 y2 = y0;
             }
             if (Math.abs(y1) <= functionValueAccuracy) {
-                // Avoid division by very small values. Assume
-                // the iteration has converged (the problem may
-                // still be ill conditioned)
-                setResult(x1, i);
-                return result;
+                checkResultComputed();
             }
             double dx = x2 - x1;
             double tolerance =
@@ -276,10 +272,6 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v26007)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,7 +94,11 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    finalized = false;
+	finalized = false;
+	finalized = false;
+	finalized = false;
+	finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -271,6 +275,37 @@
       // lazy evaluation of the state
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
+		this.dirtyState = true;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		{
+			doFinalize();
+			finalized = true;
+		}
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v26007)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v26007)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -65,7 +65,8 @@
         this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
-        this.iterationCount = 0;
+        this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
+		this.iterationCount = 0;
     }
 
     /** {@inheritDoc} */
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v26007)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -150,6 +150,9 @@
         throws EventException {
         t0 = tStart;
         g0 = handler.g(tStart, yStart);
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
         g0Positive = g0 >= 0;
     }
 
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v26007)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v26007)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v26007)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -233,10 +233,6 @@
                 y2 = y0;
             }
             if (Math.abs(y1) <= functionValueAccuracy) {
-                // Avoid division by very small values. Assume
-                // the iteration has converged (the problem may
-                // still be ill conditioned)
-                setResult(x1, i);
                 return result;
             }
             double dx = x2 - x1;
@@ -276,10 +272,6 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v26015)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,7 +94,11 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    finalized = false;
+	finalized = false;
+	finalized = false;
+	finalized = false;
+	finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -271,6 +275,37 @@
       // lazy evaluation of the state
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
+		this.dirtyState = true;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		{
+			doFinalize();
+			finalized = true;
+		}
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v26015)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v26015)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -65,7 +65,8 @@
         this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
-        this.iterationCount = 0;
+        this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
+		this.iterationCount = 0;
     }
 
     /** {@inheritDoc} */
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v26015)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -150,6 +150,9 @@
         throws EventException {
         t0 = tStart;
         g0 = handler.g(tStart, yStart);
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
         g0Positive = g0 >= 0;
     }
 
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v26015)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v26015)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v26015)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -233,10 +233,6 @@
                 y2 = y0;
             }
             if (Math.abs(y1) <= functionValueAccuracy) {
-                // Avoid division by very small values. Assume
-                // the iteration has converged (the problem may
-                // still be ill conditioned)
-                setResult(x1, i);
                 return result;
             }
             double dx = x2 - x1;
@@ -290,7 +286,7 @@
             x0 = x1;
             y0 = y1;
             // Compute new X1, Y1
-            if (Math.abs(delta) > tolerance) {
+            if (i <= maximalIterationCount) {
                 x1 = x1 + delta;
             } else if (dx > 0.0) {
                 x1 = x1 + 0.5 * tolerance;
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v26103)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,7 +94,14 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    finalized = false;
+	finalized = false;
+	finalized = false;
+	finalized = false;
+	finalized = false;
+	finalized = false;
+	finalized = false;
+	finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -271,6 +278,37 @@
       // lazy evaluation of the state
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		{
+			doFinalize();
+			finalized = true;
+		}
+		previousTime = currentTime;
+		previousTime = currentTime;
+		{
+			doFinalize();
+			finalized = true;
+		}
+		previousTime = currentTime;
+		previousTime = currentTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v26103)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v26103)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -102,8 +102,6 @@
         t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
-        pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
         nextAction        = EventHandler.CONTINUE;
@@ -150,6 +148,8 @@
         throws EventException {
         t0 = tStart;
         g0 = handler.g(tStart, yStart);
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
         g0Positive = g0 >= 0;
     }
 
@@ -213,7 +213,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v26103)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v26103)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v26103)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -139,7 +139,6 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
-        this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
 
@@ -154,7 +153,6 @@
                                    final int iterationCount) {
         this.result         = x;
         this.functionValue  = fx;
-        this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
 
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v26103)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -233,10 +233,6 @@
                 y2 = y0;
             }
             if (Math.abs(y1) <= functionValueAccuracy) {
-                // Avoid division by very small values. Assume
-                // the iteration has converged (the problem may
-                // still be ill conditioned)
-                setResult(x1, i);
                 return result;
             }
             double dx = x2 - x1;
@@ -265,6 +261,7 @@
                 } else {
                     // Inverse quadratic interpolation.
                     double r1 = y0 / y2;
+					double xm = 0.5 * (x0 + x2);
                     double r2 = y1 / y2;
                     p = r3 * (dx * r1 * (r1 - r2) - (x1 - x0) * (r2 - 1.0));
                     p1 = (r1 - 1.0) * (r2 - 1.0) * (r3 - 1.0);
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v26530)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,7 +94,10 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    finalized = false;
+	finalized = false;
+	finalized = false;
+	finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -243,7 +246,6 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
   }
 
   /** {@inheritDoc} */
@@ -271,6 +273,38 @@
       // lazy evaluation of the state
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		{
+			doFinalize();
+			finalized = true;
+		}
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		{
+			doFinalize();
+			finalized = true;
+		}
+		previousTime = currentTime;
+		previousTime = currentTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v26530)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v26530)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -150,6 +150,9 @@
         throws EventException {
         t0 = tStart;
         g0 = handler.g(tStart, yStart);
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
         g0Positive = g0 >= 0;
     }
 
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v26530)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v26530)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v26530)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,7 +223,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
+            if (f == null) {
                 // use the bracket point if is better than last approximation
                 x0 = x1;
                 x1 = x2;
@@ -233,11 +233,7 @@
                 y2 = y0;
             }
             if (Math.abs(y1) <= functionValueAccuracy) {
-                // Avoid division by very small values. Assume
-                // the iteration has converged (the problem may
-                // still be ill conditioned)
-                setResult(x1, i);
-                return result;
+                checkResultComputed();
             }
             double dx = x2 - x1;
             double tolerance =
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v26795)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,7 +94,11 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    finalized = false;
+	finalized = false;
+	finalized = false;
+	finalized = false;
+	finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -243,7 +247,7 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
+      interpolatedTime = Double.NaN;
   }
 
   /** {@inheritDoc} */
@@ -271,6 +275,39 @@
       // lazy evaluation of the state
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		{
+			doFinalize();
+			finalized = true;
+		}
+		previousTime = currentTime;
+		{
+			doFinalize();
+			finalized = true;
+		}
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v26795)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v26795)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -150,6 +150,10 @@
         throws EventException {
         t0 = tStart;
         g0 = handler.g(tStart, yStart);
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
         g0Positive = g0 >= 0;
     }
 
@@ -177,6 +181,7 @@
             double ta = t0;
             double ga = g0;
             double tb = t0 + (interpolator.isForward() ? convergence : -convergence);
+			ta = tb;
             for (int i = 0; i < n; ++i) {
 
                 // evaluate handler value at the end of the substep
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v26795)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v26795)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v26795)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -233,11 +233,7 @@
                 y2 = y0;
             }
             if (Math.abs(y1) <= functionValueAccuracy) {
-                // Avoid division by very small values. Assume
-                // the iteration has converged (the problem may
-                // still be ill conditioned)
-                setResult(x1, i);
-                return result;
+                checkResultComputed();
             }
             double dx = x2 - x1;
             double tolerance =
@@ -265,6 +261,7 @@
                 } else {
                     // Inverse quadratic interpolation.
                     double r1 = y0 / y2;
+					double xm = 0.5 * (x0 + x2);
                     double r2 = y1 / y2;
                     p = r3 * (dx * r1 * (r1 - r2) - (x1 - x0) * (r2 - 1.0));
                     p1 = (r1 - 1.0) * (r2 - 1.0) * (r3 - 1.0);
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v26818)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,7 +94,13 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    finalized = false;
+	finalized = false;
+	finalized = false;
+	finalized = false;
+	finalized = false;
+	finalized = false;
+	finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -243,7 +249,8 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
+      interpolatedTime = Double.NaN;
+	dirtyState       = true;
   }
 
   /** {@inheritDoc} */
@@ -271,6 +278,41 @@
       // lazy evaluation of the state
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		{
+			doFinalize();
+			finalized = true;
+		}
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v26818)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v26818)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -103,7 +103,6 @@
         g0                = Double.NaN;
         g0Positive        = true;
         pendingEvent      = false;
-        pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
         nextAction        = EventHandler.CONTINUE;
@@ -150,6 +149,11 @@
         throws EventException {
         t0 = tStart;
         g0 = handler.g(tStart, yStart);
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
         g0Positive = g0 >= 0;
     }
 
@@ -282,7 +286,6 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v26818)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v26818)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v26818)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -233,10 +233,6 @@
                 y2 = y0;
             }
             if (Math.abs(y1) <= functionValueAccuracy) {
-                // Avoid division by very small values. Assume
-                // the iteration has converged (the problem may
-                // still be ill conditioned)
-                setResult(x1, i);
                 return result;
             }
             double dx = x2 - x1;
@@ -267,6 +263,7 @@
                     double r1 = y0 / y2;
                     double r2 = y1 / y2;
                     p = r3 * (dx * r1 * (r1 - r2) - (x1 - x0) * (r2 - 1.0));
+					double x;
                     p1 = (r1 - 1.0) * (r2 - 1.0) * (r3 - 1.0);
                 }
                 if (p > 0.0) {
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v27525)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -89,12 +89,13 @@
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    finalized = false;
+	finalized = false;
+	finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -243,7 +244,6 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
   }
 
   /** {@inheritDoc} */
@@ -271,6 +271,41 @@
       // lazy evaluation of the state
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		{
+			doFinalize();
+			finalized = true;
+		}
+		this.forward = forward;
+		{
+			doFinalize();
+			finalized = true;
+		}
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		{
+			doFinalize();
+			finalized = true;
+		}
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
@@ -418,7 +453,8 @@
     currentTime   = in.readDouble();
     h             = in.readDouble();
     forward       = in.readBoolean();
-    dirtyState    = true;
+    interpolatedTime = Double.NaN;
+	dirtyState    = true;
 
     if (dimension < 0) {
         currentState = null;
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v27525)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v27525)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -65,7 +65,8 @@
         this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
-        this.iterationCount = 0;
+        this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
+		this.iterationCount = 0;
     }
 
     /** {@inheritDoc} */
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v27525)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -150,6 +150,10 @@
         throws EventException {
         t0 = tStart;
         g0 = handler.g(tStart, yStart);
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
         g0Positive = g0 >= 0;
     }
 
@@ -213,7 +217,8 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
+                    g0Positive = increasing;
+					solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v27525)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v27525)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v27525)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -233,10 +233,6 @@
                 y2 = y0;
             }
             if (Math.abs(y1) <= functionValueAccuracy) {
-                // Avoid division by very small values. Assume
-                // the iteration has converged (the problem may
-                // still be ill conditioned)
-                setResult(x1, i);
                 return result;
             }
             double dx = x2 - x1;
@@ -276,10 +272,6 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v27848)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -243,7 +243,6 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
   }
 
   /** {@inheritDoc} */
@@ -271,6 +270,54 @@
       // lazy evaluation of the state
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		{
+			doFinalize();
+			finalized = true;
+		}
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		{
+			doFinalize();
+			finalized = true;
+		}
+		previousTime = currentTime;
+		final int n = (currentState == null) ? -1 : currentState.length;
+		{
+			doFinalize();
+			finalized = true;
+		}
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		{
+			doFinalize();
+			finalized = true;
+		}
+		previousTime = currentTime;
+		previousTime = currentTime;
+		{
+			doFinalize();
+			finalized = true;
+		}
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v27848)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v27848)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -65,7 +65,8 @@
         this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
-        this.iterationCount = 0;
+        this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
+		this.iterationCount = 0;
     }
 
     /** {@inheritDoc} */
@@ -75,7 +76,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v27848)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -150,6 +150,7 @@
         throws EventException {
         t0 = tStart;
         g0 = handler.g(tStart, yStart);
+		pendingEventTime = Double.NaN;
         g0Positive = g0 >= 0;
     }
 
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v27848)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v27848)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v27848)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -233,11 +233,7 @@
                 y2 = y0;
             }
             if (Math.abs(y1) <= functionValueAccuracy) {
-                // Avoid division by very small values. Assume
-                // the iteration has converged (the problem may
-                // still be ill conditioned)
-                setResult(x1, i);
-                return result;
+                checkResultComputed();
             }
             double dx = x2 - x1;
             double tolerance =
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v27850)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -243,7 +243,6 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
   }
 
   /** {@inheritDoc} */
@@ -271,6 +270,54 @@
       // lazy evaluation of the state
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		{
+			doFinalize();
+			finalized = true;
+		}
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		{
+			doFinalize();
+			finalized = true;
+		}
+		previousTime = currentTime;
+		final int n = (currentState == null) ? -1 : currentState.length;
+		{
+			doFinalize();
+			finalized = true;
+		}
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		{
+			doFinalize();
+			finalized = true;
+		}
+		previousTime = currentTime;
+		previousTime = currentTime;
+		{
+			doFinalize();
+			finalized = true;
+		}
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v27850)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v27850)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -65,7 +65,8 @@
         this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
-        this.iterationCount = 0;
+        this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
+		this.iterationCount = 0;
     }
 
     /** {@inheritDoc} */
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v27850)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -150,6 +150,7 @@
         throws EventException {
         t0 = tStart;
         g0 = handler.g(tStart, yStart);
+		pendingEventTime = Double.NaN;
         g0Positive = g0 >= 0;
     }
 
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v27850)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v27850)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v27850)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -233,11 +233,7 @@
                 y2 = y0;
             }
             if (Math.abs(y1) <= functionValueAccuracy) {
-                // Avoid division by very small values. Assume
-                // the iteration has converged (the problem may
-                // still be ill conditioned)
-                setResult(x1, i);
-                return result;
+                checkResultComputed();
             }
             double dx = x2 - x1;
             double tolerance =
@@ -276,10 +272,6 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v28045)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,7 +94,9 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    finalized = false;
+	finalized = false;
+	finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -271,6 +273,50 @@
       // lazy evaluation of the state
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		{
+			doFinalize();
+			finalized = true;
+		}
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		previousTime = currentTime;
+		previousTime = currentTime;
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		previousTime = currentTime;
+		previousTime = currentTime;
+		final int n = (currentState == null) ? -1 : currentState.length;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v28045)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v28045)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -65,7 +65,10 @@
         this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
-        this.iterationCount = 0;
+        this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
+		this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
+		this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
+		this.iterationCount = 0;
     }
 
     /** {@inheritDoc} */
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v28045)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -150,6 +150,10 @@
         throws EventException {
         t0 = tStart;
         g0 = handler.g(tStart, yStart);
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
         g0Positive = g0 >= 0;
     }
 
@@ -213,7 +217,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v28045)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v28045)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v28045)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -233,10 +233,6 @@
                 y2 = y0;
             }
             if (Math.abs(y1) <= functionValueAccuracy) {
-                // Avoid division by very small values. Assume
-                // the iteration has converged (the problem may
-                // still be ill conditioned)
-                setResult(x1, i);
                 return result;
             }
             double dx = x2 - x1;
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v28116)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,7 +94,9 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    finalized = false;
+	finalized = false;
+	finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -271,6 +273,49 @@
       // lazy evaluation of the state
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
+		previousTime = currentTime;
+		{
+			doFinalize();
+			finalized = true;
+		}
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		previousTime = currentTime;
+		previousTime = currentTime;
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		previousTime = currentTime;
+		previousTime = currentTime;
+		final int n = (currentState == null) ? -1 : currentState.length;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v28116)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v28116)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -65,7 +65,10 @@
         this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
-        this.iterationCount = 0;
+        this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
+		this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
+		this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
+		this.iterationCount = 0;
     }
 
     /** {@inheritDoc} */
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v28116)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -150,6 +150,10 @@
         throws EventException {
         t0 = tStart;
         g0 = handler.g(tStart, yStart);
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
         g0Positive = g0 >= 0;
     }
 
@@ -282,7 +286,6 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v28116)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v28116)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v28116)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -233,10 +233,6 @@
                 y2 = y0;
             }
             if (Math.abs(y1) <= functionValueAccuracy) {
-                // Avoid division by very small values. Assume
-                // the iteration has converged (the problem may
-                // still be ill conditioned)
-                setResult(x1, i);
                 return result;
             }
             double dx = x2 - x1;
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v28857)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -89,12 +89,15 @@
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    finalized = false;
+	finalized = false;
+	finalized = false;
+	finalized = false;
+	finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -243,7 +246,9 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
+      interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	dirtyState       = true;
   }
 
   /** {@inheritDoc} */
@@ -271,6 +276,34 @@
       // lazy evaluation of the state
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		dirtyState = false;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v28857)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v28857)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -64,8 +64,10 @@
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
-        this.maximalIterationCount = defaultMaximalIterationCount;
-        this.iterationCount = 0;
+        this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
+		this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
+		this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
+		this.iterationCount = 0;
     }
 
     /** {@inheritDoc} */
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v28857)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -150,6 +150,10 @@
         throws EventException {
         t0 = tStart;
         g0 = handler.g(tStart, yStart);
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
         g0Positive = g0 >= 0;
     }
 
@@ -213,7 +217,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v28857)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v28857)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v28857)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -233,11 +233,7 @@
                 y2 = y0;
             }
             if (Math.abs(y1) <= functionValueAccuracy) {
-                // Avoid division by very small values. Assume
-                // the iteration has converged (the problem may
-                // still be ill conditioned)
-                setResult(x1, i);
-                return result;
+                checkResultComputed();
             }
             double dx = x2 - x1;
             double tolerance =
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v28894)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,7 +94,11 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    finalized = false;
+	finalized = false;
+	finalized = false;
+	finalized = false;
+	finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -271,6 +275,35 @@
       // lazy evaluation of the state
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v28894)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v28894)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -65,7 +65,10 @@
         this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
-        this.iterationCount = 0;
+        this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
+		this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
+		this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
+		this.iterationCount = 0;
     }
 
     /** {@inheritDoc} */
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v28894)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -150,6 +150,13 @@
         throws EventException {
         t0 = tStart;
         g0 = handler.g(tStart, yStart);
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
         g0Positive = g0 >= 0;
     }
 
@@ -213,7 +220,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v28894)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v28894)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v28894)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -233,11 +233,7 @@
                 y2 = y0;
             }
             if (Math.abs(y1) <= functionValueAccuracy) {
-                // Avoid division by very small values. Assume
-                // the iteration has converged (the problem may
-                // still be ill conditioned)
-                setResult(x1, i);
-                return result;
+                checkResultComputed();
             }
             double dx = x2 - x1;
             double tolerance =
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v28977)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,7 +94,10 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    finalized = false;
+	finalized = false;
+	finalized = false;
+	finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -243,7 +246,8 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
+      interpolatedTime = Double.NaN;
+	dirtyState       = true;
   }
 
   /** {@inheritDoc} */
@@ -271,6 +275,33 @@
       // lazy evaluation of the state
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		{
+			doFinalize();
+			finalized = true;
+		}
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		this.forward = forward;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v28977)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v28977)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -64,8 +64,8 @@
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
-        this.maximalIterationCount = defaultMaximalIterationCount;
-        this.iterationCount = 0;
+        this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
+		this.iterationCount = 0;
     }
 
     /** {@inheritDoc} */
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v28977)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -148,8 +148,14 @@
      */
     public void reinitializeBegin(final double tStart, final double[] yStart)
         throws EventException {
-        t0 = tStart;
+        g0 = Double.NaN;
+		t0 = tStart;
         g0 = handler.g(tStart, yStart);
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
         g0Positive = g0 >= 0;
     }
 
@@ -213,7 +219,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v28977)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v28977)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v28977)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -233,11 +233,7 @@
                 y2 = y0;
             }
             if (Math.abs(y1) <= functionValueAccuracy) {
-                // Avoid division by very small values. Assume
-                // the iteration has converged (the problem may
-                // still be ill conditioned)
-                setResult(x1, i);
-                return result;
+                checkResultComputed();
             }
             double dx = x2 - x1;
             double tolerance =
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v28984)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -89,12 +89,13 @@
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    finalized = false;
+	finalized = false;
+	finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -271,6 +272,45 @@
       // lazy evaluation of the state
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		previousTime = currentTime;
+		this.forward = forward;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		{
+			doFinalize();
+			finalized = true;
+		}
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		{
+			doFinalize();
+			finalized = true;
+		}
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v28984)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v28984)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -65,7 +65,8 @@
         this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
-        this.iterationCount = 0;
+        this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
+		this.iterationCount = 0;
     }
 
     /** {@inheritDoc} */
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v28984)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -150,6 +150,12 @@
         throws EventException {
         t0 = tStart;
         g0 = handler.g(tStart, yStart);
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
         g0Positive = g0 >= 0;
     }
 
@@ -213,7 +219,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v28984)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v28984)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v28984)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -233,11 +233,7 @@
                 y2 = y0;
             }
             if (Math.abs(y1) <= functionValueAccuracy) {
-                // Avoid division by very small values. Assume
-                // the iteration has converged (the problem may
-                // still be ill conditioned)
-                setResult(x1, i);
-                return result;
+                checkResultComputed();
             }
             double dx = x2 - x1;
             double tolerance =
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v28991)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,9 +94,13 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    finalized = false;
+	finalized = false;
+	finalized = false;
+	finalized = false;
+	finalized = false;
+	finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -243,7 +247,8 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
+      interpolatedTime = Double.NaN;
+	dirtyState       = true;
   }
 
   /** {@inheritDoc} */
@@ -271,6 +276,33 @@
       // lazy evaluation of the state
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		this.forward = forward;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v28991)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v28991)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -64,8 +64,8 @@
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
-        this.maximalIterationCount = defaultMaximalIterationCount;
-        this.iterationCount = 0;
+        this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
+		this.iterationCount = 0;
     }
 
     /** {@inheritDoc} */
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v28991)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -150,6 +150,13 @@
         throws EventException {
         t0 = tStart;
         g0 = handler.g(tStart, yStart);
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
         g0Positive = g0 >= 0;
     }
 
@@ -213,7 +220,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v28991)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v28991)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v28994)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -89,12 +89,13 @@
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    finalized = false;
+	finalized = false;
+	finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -243,7 +244,8 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
+      interpolatedTime = Double.NaN;
+	dirtyState       = true;
   }
 
   /** {@inheritDoc} */
@@ -271,6 +273,41 @@
       // lazy evaluation of the state
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		this.forward = forward;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		{
+			doFinalize();
+			finalized = true;
+		}
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		{
+			doFinalize();
+			finalized = true;
+		}
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		{
+			doFinalize();
+			finalized = true;
+		}
+		previousTime = currentTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v28994)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v28994)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -65,7 +65,9 @@
         this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
-        this.iterationCount = 0;
+        this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
+		this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
+		this.iterationCount = 0;
     }
 
     /** {@inheritDoc} */
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v28994)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -97,6 +97,7 @@
         this.maxCheckInterval  = maxCheckInterval;
         this.convergence       = Math.abs(convergence);
         this.maxIterationCount = maxIterationCount;
+		t0 = Double.NaN;
 
         // some dummy values ...
         t0                = Double.NaN;
@@ -150,6 +151,13 @@
         throws EventException {
         t0 = tStart;
         g0 = handler.g(tStart, yStart);
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
         g0Positive = g0 >= 0;
     }
 
@@ -213,7 +221,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v28994)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v28994)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v28994)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -233,10 +233,6 @@
                 y2 = y0;
             }
             if (Math.abs(y1) <= functionValueAccuracy) {
-                // Avoid division by very small values. Assume
-                // the iteration has converged (the problem may
-                // still be ill conditioned)
-                setResult(x1, i);
                 return result;
             }
             double dx = x2 - x1;
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v29057)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,9 +94,12 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    finalized = false;
+	finalized = false;
+	finalized = false;
+	finalized = false;
+	finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -271,9 +274,42 @@
       // lazy evaluation of the state
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		{
+			doFinalize();
+			finalized = true;
+		}
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		final int n = (currentState == null) ? -1 : currentState.length;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
-          dirtyState = false;
+          this.forward = forward;
+		dirtyState = false;
       }
 
       return interpolatedState;
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v29057)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v29057)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -64,8 +64,9 @@
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
-        this.maximalIterationCount = defaultMaximalIterationCount;
-        this.iterationCount = 0;
+        this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
+		this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
+		this.iterationCount = 0;
     }
 
     /** {@inheritDoc} */
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v29057)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -97,6 +97,7 @@
         this.maxCheckInterval  = maxCheckInterval;
         this.convergence       = Math.abs(convergence);
         this.maxIterationCount = maxIterationCount;
+		t0 = Double.NaN;
 
         // some dummy values ...
         t0                = Double.NaN;
@@ -150,6 +151,12 @@
         throws EventException {
         t0 = tStart;
         g0 = handler.g(tStart, yStart);
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
         g0Positive = g0 >= 0;
     }
 
@@ -213,7 +220,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v29057)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v29057)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v29057)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -233,10 +233,6 @@
                 y2 = y0;
             }
             if (Math.abs(y1) <= functionValueAccuracy) {
-                // Avoid division by very small values. Assume
-                // the iteration has converged (the problem may
-                // still be ill conditioned)
-                setResult(x1, i);
                 return result;
             }
             double dx = x2 - x1;
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v29074)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,7 +94,11 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    finalized = false;
+	finalized = false;
+	finalized = false;
+	finalized = false;
+	finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -243,7 +247,8 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
+      interpolatedTime = Double.NaN;
+	dirtyState       = true;
   }
 
   /** {@inheritDoc} */
@@ -271,9 +276,45 @@
       // lazy evaluation of the state
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		{
+			doFinalize();
+			finalized = true;
+		}
+		{
+			doFinalize();
+			finalized = true;
+		}
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		this.forward = forward;
+		previousTime = currentTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
-          dirtyState = false;
+          this.forward = forward;
+		dirtyState = false;
       }
 
       return interpolatedState;
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v29074)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v29074)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -150,6 +150,12 @@
         throws EventException {
         t0 = tStart;
         g0 = handler.g(tStart, yStart);
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
         g0Positive = g0 >= 0;
     }
 
@@ -213,7 +219,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v29074)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v29074)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v29074)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -237,7 +237,7 @@
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
-                return result;
+                checkResultComputed();
             }
             double dx = x2 - x1;
             double tolerance =
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v29189)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,7 +94,10 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    finalized = false;
+	finalized = false;
+	finalized = false;
+	finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -243,7 +246,8 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
+      interpolatedTime = Double.NaN;
+	dirtyState       = true;
   }
 
   /** {@inheritDoc} */
@@ -271,6 +275,37 @@
       // lazy evaluation of the state
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		{
+			doFinalize();
+			finalized = true;
+		}
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		{
+			doFinalize();
+			finalized = true;
+		}
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v29189)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v29189)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -150,6 +150,14 @@
         throws EventException {
         t0 = tStart;
         g0 = handler.g(tStart, yStart);
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
         g0Positive = g0 >= 0;
     }
 
@@ -213,9 +221,9 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
-                    final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
+                    final double t0 = interpolator.getPreviousTime();
+					final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
                         // we have either found nothing or found (again ?) a past event, we simply ignore it
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v29189)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v29189)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v29267)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,7 +94,12 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    finalized = false;
+	finalized = false;
+	finalized = false;
+	finalized = false;
+	finalized = false;
+	finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -271,6 +276,36 @@
       // lazy evaluation of the state
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		{
+			doFinalize();
+			finalized = true;
+		}
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v29267)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v29267)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -65,7 +65,9 @@
         this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
-        this.iterationCount = 0;
+        this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
+		this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
+		this.iterationCount = 0;
     }
 
     /** {@inheritDoc} */
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v29267)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -150,6 +150,16 @@
         throws EventException {
         t0 = tStart;
         g0 = handler.g(tStart, yStart);
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
         g0Positive = g0 >= 0;
     }
 
@@ -213,7 +223,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v29267)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v29267)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v29267)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -237,7 +237,7 @@
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
-                return result;
+                checkResultComputed();
             }
             double dx = x2 - x1;
             double tolerance =
@@ -250,7 +250,7 @@
                     (Math.abs(y0) <= Math.abs(y1))) {
                 // Force bisection.
                 delta = 0.5 * dx;
-                oldDelta = delta;
+                double oldx = Double.POSITIVE_INFINITY;
             } else {
                 double r3 = y1 / y0;
                 double p;
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v29588)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,9 +94,13 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    finalized = false;
+	finalized = false;
+	finalized = false;
+	finalized = false;
+	finalized = false;
+	finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -271,6 +275,31 @@
       // lazy evaluation of the state
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		this.forward = forward;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v29588)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v29588)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -65,7 +65,8 @@
         this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
-        this.iterationCount = 0;
+        this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
+		this.iterationCount = 0;
     }
 
     /** {@inheritDoc} */
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v29588)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -150,6 +150,18 @@
         throws EventException {
         t0 = tStart;
         g0 = handler.g(tStart, yStart);
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
         g0Positive = g0 >= 0;
     }
 
@@ -213,7 +225,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v29588)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v29588)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v29588)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -233,10 +233,6 @@
                 y2 = y0;
             }
             if (Math.abs(y1) <= functionValueAccuracy) {
-                // Avoid division by very small values. Assume
-                // the iteration has converged (the problem may
-                // still be ill conditioned)
-                setResult(x1, i);
                 return result;
             }
             double dx = x2 - x1;
@@ -250,7 +246,7 @@
                     (Math.abs(y0) <= Math.abs(y1))) {
                 // Force bisection.
                 delta = 0.5 * dx;
-                oldDelta = delta;
+                double oldx = Double.POSITIVE_INFINITY;
             } else {
                 double r3 = y1 / y0;
                 double p;
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v30883)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,7 +94,17 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    finalized = false;
+	finalized = false;
+	finalized = false;
+	finalized = false;
+	finalized = false;
+	finalized = false;
+	finalized = false;
+	finalized = false;
+	finalized = false;
+	finalized = false;
+	finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -271,6 +281,40 @@
       // lazy evaluation of the state
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		{
+			doFinalize();
+			finalized = true;
+		}
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v30883)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v30883)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -150,6 +150,10 @@
         throws EventException {
         t0 = tStart;
         g0 = handler.g(tStart, yStart);
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
         g0Positive = g0 >= 0;
     }
 
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v30883)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v30883)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v30883)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -233,10 +233,6 @@
                 y2 = y0;
             }
             if (Math.abs(y1) <= functionValueAccuracy) {
-                // Avoid division by very small values. Assume
-                // the iteration has converged (the problem may
-                // still be ill conditioned)
-                setResult(x1, i);
                 return result;
             }
             double dx = x2 - x1;
@@ -274,8 +270,7 @@
                 } else {
                     p = -p;
                 }
-                if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
-                        p >= Math.abs(0.5 * oldDelta * p1)) {
+                if (y0 * y1 >= 0) {
                     // Inverse quadratic interpolation gives a value
                     // in the wrong direction, or progress is slow.
                     // Fall back to bisection.
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v30956)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,7 +94,12 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    finalized = false;
+	finalized = false;
+	finalized = false;
+	finalized = false;
+	finalized = false;
+	finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -271,6 +276,40 @@
       // lazy evaluation of the state
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		{
+			doFinalize();
+			finalized = true;
+		}
+		previousTime = currentTime;
+		previousTime = currentTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v30956)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v30956)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -90,7 +90,6 @@
 
     /** {@inheritDoc} */
     public void setMaximalIterationCount(int count) {
-        maximalIterationCount = count;
     }
 
     /** {@inheritDoc} */
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v30956)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -150,6 +150,13 @@
         throws EventException {
         t0 = tStart;
         g0 = handler.g(tStart, yStart);
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
         g0Positive = g0 >= 0;
     }
 
@@ -177,6 +184,7 @@
             double ta = t0;
             double ga = g0;
             double tb = t0 + (interpolator.isForward() ? convergence : -convergence);
+			boolean resetDerivatives = false;
             for (int i = 0; i < n; ++i) {
 
                 // evaluate handler value at the end of the substep
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v30956)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v30956)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 16:36:01 [main] [INFO]  PatchLogExporter - patch (v30956)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -233,11 +233,7 @@
                 y2 = y0;
             }
             if (Math.abs(y1) <= functionValueAccuracy) {
-                // Avoid division by very small values. Assume
-                // the iteration has converged (the problem may
-                // still be ill conditioned)
-                setResult(x1, i);
-                return result;
+                checkResultComputed();
             }
             double dx = x2 - x1;
             double tolerance =
@@ -274,8 +270,7 @@
                 } else {
                     p = -p;
                 }
-                if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
-                        p >= Math.abs(0.5 * oldDelta * p1)) {
+                if (y0 * y1 >= 0) {
                     // Inverse quadratic interpolation gives a value
                     // in the wrong direction, or progress is slow.
                     // Fall back to bisection.
2023-08-02 16:36:02 [main] [INFO]  PatchLogExporter - patch (v31247)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -271,6 +271,49 @@
       // lazy evaluation of the state
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		{
+			doFinalize();
+			finalized = true;
+		}
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
2023-08-02 16:36:02 [main] [INFO]  PatchLogExporter - patch (v31247)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 16:36:02 [main] [INFO]  PatchLogExporter - patch (v31247)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -150,6 +150,11 @@
         throws EventException {
         t0 = tStart;
         g0 = handler.g(tStart, yStart);
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
         g0Positive = g0 >= 0;
     }
 
2023-08-02 16:36:02 [main] [INFO]  PatchLogExporter - patch (v31247)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 16:36:02 [main] [INFO]  PatchLogExporter - patch (v31247)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 16:36:02 [main] [INFO]  PatchLogExporter - patch (v31247)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,21 +223,13 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
-                return result;
+                checkResultComputed();
             }
             double dx = x2 - x1;
             double tolerance =
@@ -246,8 +238,7 @@
                 setResult(x1, i);
                 return result;
             }
-            if ((Math.abs(oldDelta) < tolerance) ||
-                    (Math.abs(y0) <= Math.abs(y1))) {
+            if (Math.abs(y2) < Math.abs(y1)) {
                 // Force bisection.
                 delta = 0.5 * dx;
                 oldDelta = delta;
@@ -282,7 +273,6 @@
                     delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
-                    oldDelta = delta;
                     delta = p / p1;
                 }
             }
2023-08-02 16:36:02 [main] [INFO]  PatchLogExporter - patch (v31541)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -96,7 +96,6 @@
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -271,6 +270,49 @@
       // lazy evaluation of the state
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		{
+			doFinalize();
+			finalized = true;
+		}
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
2023-08-02 16:36:02 [main] [INFO]  PatchLogExporter - patch (v31541)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 16:36:02 [main] [INFO]  PatchLogExporter - patch (v31541)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -150,6 +150,11 @@
         throws EventException {
         t0 = tStart;
         g0 = handler.g(tStart, yStart);
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
         g0Positive = g0 >= 0;
     }
 
2023-08-02 16:36:02 [main] [INFO]  PatchLogExporter - patch (v31541)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 16:36:02 [main] [INFO]  PatchLogExporter - patch (v31541)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 16:36:02 [main] [INFO]  PatchLogExporter - patch (v31541)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,20 +223,8 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
             if (Math.abs(y1) <= functionValueAccuracy) {
-                // Avoid division by very small values. Assume
-                // the iteration has converged (the problem may
-                // still be ill conditioned)
-                setResult(x1, i);
                 return result;
             }
             double dx = x2 - x1;
@@ -282,7 +270,6 @@
                     delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
-                    oldDelta = delta;
                     delta = p / p1;
                 }
             }
2023-08-02 16:36:02 [main] [INFO]  PatchLogExporter - patch (v31959)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,7 +94,10 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    finalized = false;
+	finalized = false;
+	finalized = false;
+	finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -271,6 +274,45 @@
       // lazy evaluation of the state
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		{
+			doFinalize();
+			finalized = true;
+		}
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
2023-08-02 16:36:02 [main] [INFO]  PatchLogExporter - patch (v31959)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 16:36:02 [main] [INFO]  PatchLogExporter - patch (v31959)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -150,6 +150,14 @@
         throws EventException {
         t0 = tStart;
         g0 = handler.g(tStart, yStart);
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
         g0Positive = g0 >= 0;
     }
 
2023-08-02 16:36:02 [main] [INFO]  PatchLogExporter - patch (v31959)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 16:36:02 [main] [INFO]  PatchLogExporter - patch (v31959)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 16:36:02 [main] [INFO]  PatchLogExporter - patch (v31959)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,15 +223,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
@@ -246,8 +238,7 @@
                 setResult(x1, i);
                 return result;
             }
-            if ((Math.abs(oldDelta) < tolerance) ||
-                    (Math.abs(y0) <= Math.abs(y1))) {
+            if (Math.abs(y2) < Math.abs(y1)) {
                 // Force bisection.
                 delta = 0.5 * dx;
                 oldDelta = delta;
2023-08-02 16:36:02 [main] [INFO]  PatchLogExporter - patch (v32066)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,7 +94,11 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    finalized = false;
+	finalized = false;
+	finalized = false;
+	finalized = false;
+	finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -271,6 +275,42 @@
       // lazy evaluation of the state
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
2023-08-02 16:36:02 [main] [INFO]  PatchLogExporter - patch (v32066)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 16:36:02 [main] [INFO]  PatchLogExporter - patch (v32066)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -150,6 +150,14 @@
         throws EventException {
         t0 = tStart;
         g0 = handler.g(tStart, yStart);
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
         g0Positive = g0 >= 0;
     }
 
2023-08-02 16:36:02 [main] [INFO]  PatchLogExporter - patch (v32066)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 16:36:02 [main] [INFO]  PatchLogExporter - patch (v32066)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 16:36:02 [main] [INFO]  PatchLogExporter - patch (v32066)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,15 +223,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
@@ -246,8 +238,7 @@
                 setResult(x1, i);
                 return result;
             }
-            if ((Math.abs(oldDelta) < tolerance) ||
-                    (Math.abs(y0) <= Math.abs(y1))) {
+            if (Math.abs(y2) < Math.abs(y1)) {
                 // Force bisection.
                 delta = 0.5 * dx;
                 oldDelta = delta;
@@ -282,7 +273,6 @@
                     delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
-                    oldDelta = delta;
                     delta = p / p1;
                 }
             }
2023-08-02 16:36:02 [main] [INFO]  PatchLogExporter - patch (v32162)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,9 +94,14 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    finalized = false;
+	finalized = false;
+	finalized = false;
+	finalized = false;
+	finalized = false;
+	finalized = false;
+	finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -271,6 +276,38 @@
       // lazy evaluation of the state
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		{
+			doFinalize();
+			finalized = true;
+		}
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
2023-08-02 16:36:02 [main] [INFO]  PatchLogExporter - patch (v32162)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 16:36:02 [main] [INFO]  PatchLogExporter - patch (v32162)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -150,6 +150,15 @@
         throws EventException {
         t0 = tStart;
         g0 = handler.g(tStart, yStart);
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
         g0Positive = g0 >= 0;
     }
 
2023-08-02 16:36:02 [main] [INFO]  PatchLogExporter - patch (v32162)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 16:36:02 [main] [INFO]  PatchLogExporter - patch (v32162)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 16:36:02 [main] [INFO]  PatchLogExporter - patch (v32162)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,15 +223,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
@@ -246,8 +238,7 @@
                 setResult(x1, i);
                 return result;
             }
-            if ((Math.abs(oldDelta) < tolerance) ||
-                    (Math.abs(y0) <= Math.abs(y1))) {
+            if (Math.abs(y2) < Math.abs(y1)) {
                 // Force bisection.
                 delta = 0.5 * dx;
                 oldDelta = delta;
2023-08-02 16:36:02 [main] [INFO]  PatchLogExporter - patch (v32174)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,7 +94,11 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    finalized = false;
+	finalized = false;
+	finalized = false;
+	finalized = false;
+	finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -271,6 +275,46 @@
       // lazy evaluation of the state
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
2023-08-02 16:36:02 [main] [INFO]  PatchLogExporter - patch (v32174)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 16:36:02 [main] [INFO]  PatchLogExporter - patch (v32174)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -150,6 +150,11 @@
         throws EventException {
         t0 = tStart;
         g0 = handler.g(tStart, yStart);
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
         g0Positive = g0 >= 0;
     }
 
@@ -203,7 +208,8 @@
                     final UnivariateRealFunction f = new UnivariateRealFunction() {
                         public double value(final double t) throws FunctionEvaluationException {
                             try {
-                                interpolator.setInterpolatedTime(t);
+                                nextAction = EventHandler.CONTINUE;
+								interpolator.setInterpolatedTime(t);
                                 return handler.g(t, interpolator.getInterpolatedState());
                             } catch (DerivativeException e) {
                                 throw new FunctionEvaluationException(e, t);
2023-08-02 16:36:02 [main] [INFO]  PatchLogExporter - patch (v32174)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 16:36:02 [main] [INFO]  PatchLogExporter - patch (v32174)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 16:36:02 [main] [INFO]  PatchLogExporter - patch (v32174)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,15 +223,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
2023-08-02 16:36:02 [main] [INFO]  PatchLogExporter - patch (v32214)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,7 +94,9 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    finalized = false;
+	finalized = false;
+	finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -271,6 +273,45 @@
       // lazy evaluation of the state
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		{
+			doFinalize();
+			finalized = true;
+		}
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
2023-08-02 16:36:02 [main] [INFO]  PatchLogExporter - patch (v32214)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 16:36:02 [main] [INFO]  PatchLogExporter - patch (v32214)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -65,7 +65,8 @@
         this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
-        this.iterationCount = 0;
+        this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
+		this.iterationCount = 0;
     }
 
     /** {@inheritDoc} */
2023-08-02 16:36:02 [main] [INFO]  PatchLogExporter - patch (v32214)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -150,6 +150,14 @@
         throws EventException {
         t0 = tStart;
         g0 = handler.g(tStart, yStart);
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
         g0Positive = g0 >= 0;
     }
 
@@ -282,7 +290,6 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-08-02 16:36:02 [main] [INFO]  PatchLogExporter - patch (v32214)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 16:36:02 [main] [INFO]  PatchLogExporter - patch (v32214)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 16:36:02 [main] [INFO]  PatchLogExporter - patch (v32214)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -270,7 +270,6 @@
                     p1 = (r1 - 1.0) * (r2 - 1.0) * (r3 - 1.0);
                 }
                 if (p > 0.0) {
-                    p1 = -p1;
                 } else {
                     p = -p;
                 }
@@ -282,7 +281,6 @@
                     delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
-                    oldDelta = delta;
                     delta = p / p1;
                 }
             }
2023-08-02 16:36:02 [main] [INFO]  PatchLogExporter - patch (v32697)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,9 +94,11 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    finalized = false;
+	finalized = false;
+	finalized = false;
+	finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -271,6 +273,42 @@
       // lazy evaluation of the state
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
2023-08-02 16:36:02 [main] [INFO]  PatchLogExporter - patch (v32697)
--- org.apache.commons.math.ode.sampling.DummyStepInterpolator
+++ org.apache.commons.math.ode.sampling.DummyStepInterpolator
@@ -96,7 +96,6 @@
   @Override
   protected void computeInterpolatedStateAndDerivatives(final double theta, final double oneMinusThetaH)
     throws DerivativeException {
-      System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
   }
 
   /** Write the instance to an output channel.
2023-08-02 16:36:02 [main] [INFO]  PatchLogExporter - patch (v32697)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 16:36:02 [main] [INFO]  PatchLogExporter - patch (v32697)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -65,7 +65,8 @@
         this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
-        this.iterationCount = 0;
+        this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
+		this.iterationCount = 0;
     }
 
     /** {@inheritDoc} */
2023-08-02 16:36:02 [main] [INFO]  PatchLogExporter - patch (v32697)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -150,6 +150,11 @@
         throws EventException {
         t0 = tStart;
         g0 = handler.g(tStart, yStart);
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
         g0Positive = g0 >= 0;
     }
 
2023-08-02 16:36:02 [main] [INFO]  PatchLogExporter - patch (v32697)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 16:36:02 [main] [INFO]  PatchLogExporter - patch (v32697)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 16:36:02 [main] [INFO]  PatchLogExporter - patch (v32697)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -233,11 +233,7 @@
                 y2 = y0;
             }
             if (Math.abs(y1) <= functionValueAccuracy) {
-                // Avoid division by very small values. Assume
-                // the iteration has converged (the problem may
-                // still be ill conditioned)
-                setResult(x1, i);
-                return result;
+                checkResultComputed();
             }
             double dx = x2 - x1;
             double tolerance =
@@ -276,10 +272,6 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-08-02 16:36:02 [main] [INFO]  PatchLogExporter - patch (v32833)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,9 +94,11 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    finalized = false;
+	finalized = false;
+	finalized = false;
+	finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -117,7 +119,6 @@
 
     finalized         = false;
     this.forward      = forward;
-    this.dirtyState   = true;
 
   }
 
@@ -271,6 +272,49 @@
       // lazy evaluation of the state
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
2023-08-02 16:36:02 [main] [INFO]  PatchLogExporter - patch (v32833)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 16:36:02 [main] [INFO]  PatchLogExporter - patch (v32833)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -150,6 +150,7 @@
         throws EventException {
         t0 = tStart;
         g0 = handler.g(tStart, yStart);
+		pendingEventTime = Double.NaN;
         g0Positive = g0 >= 0;
     }
 
@@ -282,7 +283,6 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-08-02 16:36:02 [main] [INFO]  PatchLogExporter - patch (v32833)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 16:36:02 [main] [INFO]  PatchLogExporter - patch (v32833)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 16:36:02 [main] [INFO]  PatchLogExporter - patch (v32833)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -233,10 +233,6 @@
                 y2 = y0;
             }
             if (Math.abs(y1) <= functionValueAccuracy) {
-                // Avoid division by very small values. Assume
-                // the iteration has converged (the problem may
-                // still be ill conditioned)
-                setResult(x1, i);
                 return result;
             }
             double dx = x2 - x1;
@@ -246,8 +242,7 @@
                 setResult(x1, i);
                 return result;
             }
-            if ((Math.abs(oldDelta) < tolerance) ||
-                    (Math.abs(y0) <= Math.abs(y1))) {
+            if (Math.abs(y2) < Math.abs(y1)) {
                 // Force bisection.
                 delta = 0.5 * dx;
                 oldDelta = delta;
@@ -276,13 +271,8 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
-                    oldDelta = delta;
                     delta = p / p1;
                 }
             }
2023-08-02 16:36:02 [main] [INFO]  PatchLogExporter - patch (v33081)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,9 +94,13 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    finalized = false;
+	finalized = false;
+	finalized = false;
+	finalized = false;
+	finalized = false;
+	finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -117,7 +121,6 @@
 
     finalized         = false;
     this.forward      = forward;
-    this.dirtyState   = true;
 
   }
 
@@ -179,7 +182,6 @@
 
     finalized         = false;
     this.forward      = isForward;
-    this.dirtyState   = true;
 
   }
 
@@ -271,6 +273,44 @@
       // lazy evaluation of the state
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
2023-08-02 16:36:02 [main] [INFO]  PatchLogExporter - patch (v33081)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 16:36:02 [main] [INFO]  PatchLogExporter - patch (v33081)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -65,7 +65,6 @@
         this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
-        this.iterationCount = 0;
     }
 
     /** {@inheritDoc} */
2023-08-02 16:36:02 [main] [INFO]  PatchLogExporter - patch (v33081)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -150,6 +150,7 @@
         throws EventException {
         t0 = tStart;
         g0 = handler.g(tStart, yStart);
+		pendingEventTime = Double.NaN;
         g0Positive = g0 >= 0;
     }
 
@@ -181,7 +182,6 @@
 
                 // evaluate handler value at the end of the substep
                 tb += h;
-                interpolator.setInterpolatedTime(tb);
                 final double gb = handler.g(tb, interpolator.getInterpolatedState());
 
                 // check events occurrence
2023-08-02 16:36:02 [main] [INFO]  PatchLogExporter - patch (v33081)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 16:36:02 [main] [INFO]  PatchLogExporter - patch (v33081)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 16:36:02 [main] [INFO]  PatchLogExporter - patch (v33081)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -233,10 +233,6 @@
                 y2 = y0;
             }
             if (Math.abs(y1) <= functionValueAccuracy) {
-                // Avoid division by very small values. Assume
-                // the iteration has converged (the problem may
-                // still be ill conditioned)
-                setResult(x1, i);
                 return result;
             }
             double dx = x2 - x1;
@@ -276,13 +272,8 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
-                    oldDelta = delta;
                     delta = p / p1;
                 }
             }
2023-08-02 16:36:02 [main] [INFO]  PatchLogExporter - patch (v33097)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,9 +94,10 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    finalized = false;
+	finalized = false;
+	finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -117,7 +118,6 @@
 
     finalized         = false;
     this.forward      = forward;
-    this.dirtyState   = true;
 
   }
 
@@ -179,7 +179,6 @@
 
     finalized         = false;
     this.forward      = isForward;
-    this.dirtyState   = true;
 
   }
 
@@ -271,6 +270,47 @@
       // lazy evaluation of the state
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
+		previousTime = currentTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
2023-08-02 16:36:02 [main] [INFO]  PatchLogExporter - patch (v33097)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 16:36:02 [main] [INFO]  PatchLogExporter - patch (v33097)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -65,7 +65,6 @@
         this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
-        this.iterationCount = 0;
     }
 
     /** {@inheritDoc} */
2023-08-02 16:36:02 [main] [INFO]  PatchLogExporter - patch (v33097)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -106,7 +106,6 @@
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
-        nextAction        = EventHandler.CONTINUE;
 
     }
 
@@ -150,6 +149,9 @@
         throws EventException {
         t0 = tStart;
         g0 = handler.g(tStart, yStart);
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
+		pendingEventTime = Double.NaN;
         g0Positive = g0 >= 0;
     }
 
2023-08-02 16:36:02 [main] [INFO]  PatchLogExporter - patch (v33097)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 16:36:02 [main] [INFO]  PatchLogExporter - patch (v33097)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 16:36:02 [main] [INFO]  PatchLogExporter - patch (v33097)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -233,10 +233,6 @@
                 y2 = y0;
             }
             if (Math.abs(y1) <= functionValueAccuracy) {
-                // Avoid division by very small values. Assume
-                // the iteration has converged (the problem may
-                // still be ill conditioned)
-                setResult(x1, i);
                 return result;
             }
             double dx = x2 - x1;
@@ -276,13 +272,8 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
-                    oldDelta = delta;
                     delta = p / p1;
                 }
             }
2023-08-02 16:36:02 [main] [INFO]  KGenProgMain - Summary
Reached generation = 332
Generated variants = 33097
Syntax valid variants = 29030
Build succeeded variants = 17324
Time elapsed = 2 hours 5 minutes 32 seconds
Exit status = SUCCESS
