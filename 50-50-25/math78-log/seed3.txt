2023-08-02 02:18:16 [main] [WARN]  Configuration$Builder - The directory where kGenProg is running is different from the root directory of the given target project.
2023-08-02 02:18:16 [main] [WARN]  Configuration$Builder - If the target project includes test cases with file I/O, such test cases won't run correctly.
2023-08-02 02:18:16 [main] [WARN]  Configuration$Builder - We recommend you running kGenProg with the root directory of the target project as the current directory.
2023-08-02 02:18:17 [main] [INFO]  KGenProgMain - 
==================== kGenProg Configuration ====================
configPath = /Users/haradakanon/Downloads/kGenProg-1.8.2/example/math78/kgenprog-78.toml (set by command line)
rootDir = /Users/haradakanon/Downloads/kGenProg-1.8.2/example/math78 (set in config file)
productPaths = [/Users/haradakanon/Downloads/kGenProg-1.8.2/example/math78/src/main] (set in config file)
testPaths = [/Users/haradakanon/Downloads/kGenProg-1.8.2/example/math78/src/test] (set in config file)
classPaths = []
executionTests = [org.apache.commons.math.ode.events.EventStateTest] (set in config file)
outDir = kgenprog-out
logLevel = INFO (set in config file)
mutationGeneratingCount = 50 (set in config file)
crossoverGeneratingCount = 50 (set in config file)
headcount = 25
maxGeneration = 500 (set in config file)
timeLimit = PT24H (set in config file)
testTimeLimit = PT3M (set in config file)
requiredSolutionsCount = 100 (set in config file)
randomSeed = 3 (set by command line)
scope = PACKAGE (set in config file)
faultLocalization = Zoltar (set in config file)
mutationType = Simple
crossoverType = Random
firstVariantSelectionStrategy = Random
secondVariantSelectionStrategy = Random
isPatchOutput = true (set in config file)
isHistoryRecord = false
currentDirectory = /Users/haradakanon/Desktop/研究/実験データ/afterResearch
version = 1.8.2
================================================================
2023-08-02 02:18:34 [main] [INFO]  KGenProgMain - initial failed tests (1/1)
org.apache.commons.math.ode.events.EventStateTest.closeEvents: function values at endpoints do not have different signs.  Endpoints: [89.999, 153.1], Values: [-0.066, -1,142.11]

2023-08-02 02:18:34 [main] [INFO]  KGenProgMain - GA started
2023-08-02 02:18:34 [main] [INFO]  KGenProgMain - entered the era of 1st generation.
2023-08-02 02:18:42 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 seconds
Variants: generated 50, build-succeeded 19, build-failed 25, syntax-invalid 2, redundant 4
Fitness: max 0(19), min 0(19), ave 0
Test execution time: sum 2219 ms, max 246 ms, min 65 ms
----------------------------------------------------------------

2023-08-02 02:18:42 [main] [INFO]  KGenProgMain - entered the era of 2nd generation.
2023-08-02 02:18:46 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 seconds
Variants: generated 50, build-succeeded 16, build-failed 30, syntax-invalid 2, redundant 2
Fitness: max 0(16), min 0(16), ave 0
Test execution time: sum 1162 ms, max 134 ms, min 58 ms
----------------------------------------------------------------

2023-08-02 02:18:46 [main] [INFO]  KGenProgMain - entered the era of 3rd generation.
2023-08-02 02:18:52 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 17 seconds
Variants: generated 100, build-succeeded 19, build-failed 28, syntax-invalid 14, redundant 39
Fitness: max 0(19), min 0(19), ave 0
Test execution time: sum 1483 ms, max 139 ms, min 53 ms
----------------------------------------------------------------

2023-08-02 02:18:52 [main] [INFO]  KGenProgMain - entered the era of 4th generation.
2023-08-02 02:18:58 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 23 seconds
Variants: generated 100, build-succeeded 31, build-failed 26, syntax-invalid 6, redundant 37
Fitness: max 0(31), min 0(31), ave 0
Test execution time: sum 2062 ms, max 202 ms, min 51 ms
----------------------------------------------------------------

2023-08-02 02:18:58 [main] [INFO]  KGenProgMain - entered the era of 5th generation.
2023-08-02 02:19:04 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 29 seconds
Variants: generated 100, build-succeeded 38, build-failed 25, syntax-invalid 8, redundant 29
Fitness: max 1(1), min 0(37), ave 0.026
Test execution time: sum 2412 ms, max 148 ms, min 52 ms
----------------------------------------------------------------

2023-08-02 02:19:04 [main] [INFO]  KGenProgMain - entered the era of 6th generation.
2023-08-02 02:19:10 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 35 seconds
Variants: generated 100, build-succeeded 33, build-failed 32, syntax-invalid 5, redundant 30
Fitness: max 0(33), min 0(33), ave 0
Test execution time: sum 2108 ms, max 124 ms, min 51 ms
----------------------------------------------------------------

2023-08-02 02:19:10 [main] [INFO]  KGenProgMain - entered the era of 7th generation.
2023-08-02 02:19:17 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 42 seconds
Variants: generated 100, build-succeeded 30, build-failed 37, syntax-invalid 3, redundant 30
Fitness: max 0(30), min 0(30), ave 0
Test execution time: sum 2010 ms, max 142 ms, min 52 ms
----------------------------------------------------------------

2023-08-02 02:19:17 [main] [INFO]  KGenProgMain - entered the era of 8th generation.
2023-08-02 02:19:23 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 48 seconds
Variants: generated 100, build-succeeded 45, build-failed 28, syntax-invalid 7, redundant 20
Fitness: max 0(45), min 0(45), ave 0
Test execution time: sum 2661 ms, max 129 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 02:19:23 [main] [INFO]  KGenProgMain - entered the era of 9th generation.
2023-08-02 02:19:30 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 55 seconds
Variants: generated 100, build-succeeded 45, build-failed 30, syntax-invalid 6, redundant 19
Fitness: max 1(2), min 0(43), ave 0.044
Test execution time: sum 2756 ms, max 145 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 02:19:30 [main] [INFO]  KGenProgMain - entered the era of 10th generation.
2023-08-02 02:19:37 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 minutes 2 seconds
Variants: generated 100, build-succeeded 48, build-failed 28, syntax-invalid 13, redundant 11
Fitness: max 1(2), min 0(46), ave 0.042
Test execution time: sum 2847 ms, max 143 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 02:19:37 [main] [INFO]  KGenProgMain - entered the era of 11th generation.
2023-08-02 02:19:44 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 minutes 9 seconds
Variants: generated 100, build-succeeded 50, build-failed 33, syntax-invalid 1, redundant 16
Fitness: max 1(3), min 0(47), ave 0.06
Test execution time: sum 2909 ms, max 192 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 02:19:44 [main] [INFO]  KGenProgMain - entered the era of 12th generation.
2023-08-02 02:19:50 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 minutes 15 seconds
Variants: generated 100, build-succeeded 48, build-failed 30, syntax-invalid 10, redundant 12
Fitness: max 1(1), min 0(47), ave 0.021
Test execution time: sum 2879 ms, max 184 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 02:19:50 [main] [INFO]  KGenProgMain - entered the era of 13th generation.
2023-08-02 02:19:58 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 minutes 24 seconds
Variants: generated 100, build-succeeded 50, build-failed 28, syntax-invalid 6, redundant 16
Fitness: max 0(50), min 0(50), ave 0
Test execution time: sum 2961 ms, max 143 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 02:19:58 [main] [INFO]  KGenProgMain - entered the era of 14th generation.
2023-08-02 02:20:06 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 minutes 31 seconds
Variants: generated 100, build-succeeded 50, build-failed 28, syntax-invalid 10, redundant 12
Fitness: max 0(50), min 0(50), ave 0
Test execution time: sum 2891 ms, max 137 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 02:20:06 [main] [INFO]  KGenProgMain - entered the era of 15th generation.
2023-08-02 02:20:13 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 minutes 38 seconds
Variants: generated 100, build-succeeded 49, build-failed 30, syntax-invalid 10, redundant 11
Fitness: max 1(1), min 0(48), ave 0.02
Test execution time: sum 2817 ms, max 209 ms, min 48 ms
----------------------------------------------------------------

2023-08-02 02:20:13 [main] [INFO]  KGenProgMain - entered the era of 16th generation.
2023-08-02 02:20:21 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 minutes 46 seconds
Variants: generated 100, build-succeeded 55, build-failed 31, syntax-invalid 7, redundant 7
Fitness: max 0(55), min 0(55), ave 0
Test execution time: sum 3164 ms, max 187 ms, min 48 ms
----------------------------------------------------------------

2023-08-02 02:20:21 [main] [INFO]  KGenProgMain - entered the era of 17th generation.
2023-08-02 02:20:28 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 minutes 54 seconds
Variants: generated 100, build-succeeded 57, build-failed 26, syntax-invalid 6, redundant 11
Fitness: max 0(57), min 0(57), ave 0
Test execution time: sum 3203 ms, max 128 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 02:20:28 [main] [INFO]  KGenProgMain - entered the era of 18th generation.
2023-08-02 02:20:37 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 minutes 2 seconds
Variants: generated 100, build-succeeded 53, build-failed 35, syntax-invalid 7, redundant 5
Fitness: max 1(1), min 0(52), ave 0.019
Test execution time: sum 3015 ms, max 215 ms, min 48 ms
----------------------------------------------------------------

2023-08-02 02:20:37 [main] [INFO]  KGenProgMain - entered the era of 19th generation.
2023-08-02 02:20:45 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 minutes 10 seconds
Variants: generated 100, build-succeeded 53, build-failed 29, syntax-invalid 12, redundant 6
Fitness: max 1(1), min 0(52), ave 0.019
Test execution time: sum 2985 ms, max 130 ms, min 48 ms
----------------------------------------------------------------

2023-08-02 02:20:45 [main] [INFO]  KGenProgMain - entered the era of 20th generation.
2023-08-02 02:20:53 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 minutes 18 seconds
Variants: generated 100, build-succeeded 58, build-failed 29, syntax-invalid 10, redundant 3
Fitness: max 0(58), min 0(58), ave 0
Test execution time: sum 3230 ms, max 136 ms, min 48 ms
----------------------------------------------------------------

2023-08-02 02:20:53 [main] [INFO]  KGenProgMain - entered the era of 21st generation.
2023-08-02 02:21:01 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 minutes 26 seconds
Variants: generated 100, build-succeeded 55, build-failed 28, syntax-invalid 8, redundant 9
Fitness: max 0(55), min 0(55), ave 0
Test execution time: sum 3191 ms, max 200 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 02:21:01 [main] [INFO]  KGenProgMain - entered the era of 22nd generation.
2023-08-02 02:21:10 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 minutes 35 seconds
Variants: generated 100, build-succeeded 58, build-failed 29, syntax-invalid 8, redundant 5
Fitness: max 0(58), min 0(58), ave 0
Test execution time: sum 3276 ms, max 191 ms, min 48 ms
----------------------------------------------------------------

2023-08-02 02:21:10 [main] [INFO]  KGenProgMain - entered the era of 23rd generation.
2023-08-02 02:21:17 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 minutes 42 seconds
Variants: generated 100, build-succeeded 50, build-failed 33, syntax-invalid 10, redundant 7
Fitness: max 1(1), min 0(49), ave 0.02
Test execution time: sum 2752 ms, max 74 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 02:21:17 [main] [INFO]  KGenProgMain - entered the era of 24th generation.
2023-08-02 02:21:26 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 minutes 51 seconds
Variants: generated 100, build-succeeded 60, build-failed 29, syntax-invalid 7, redundant 4
Fitness: max 0(60), min 0(60), ave 0
Test execution time: sum 3345 ms, max 133 ms, min 48 ms
----------------------------------------------------------------

2023-08-02 02:21:26 [main] [INFO]  KGenProgMain - entered the era of 25th generation.
2023-08-02 02:21:34 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 minutes 59 seconds
Variants: generated 100, build-succeeded 52, build-failed 30, syntax-invalid 9, redundant 9
Fitness: max 1(2), min 0(50), ave 0.038
Test execution time: sum 3106 ms, max 199 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 02:21:34 [main] [INFO]  KGenProgMain - entered the era of 26th generation.
2023-08-02 02:21:43 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 minutes 8 seconds
Variants: generated 100, build-succeeded 62, build-failed 25, syntax-invalid 9, redundant 4
Fitness: max 0(62), min 0(62), ave 0
Test execution time: sum 3605 ms, max 157 ms, min 48 ms
----------------------------------------------------------------

2023-08-02 02:21:43 [main] [INFO]  KGenProgMain - entered the era of 27th generation.
2023-08-02 02:21:53 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 minutes 18 seconds
Variants: generated 100, build-succeeded 60, build-failed 28, syntax-invalid 6, redundant 6
Fitness: max 0(60), min 0(60), ave 0
Test execution time: sum 3462 ms, max 128 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 02:21:53 [main] [INFO]  KGenProgMain - entered the era of 28th generation.
2023-08-02 02:22:02 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 minutes 27 seconds
Variants: generated 100, build-succeeded 55, build-failed 37, syntax-invalid 5, redundant 3
Fitness: max 0(55), min 0(55), ave 0
Test execution time: sum 3105 ms, max 201 ms, min 48 ms
----------------------------------------------------------------

2023-08-02 02:22:02 [main] [INFO]  KGenProgMain - entered the era of 29th generation.
2023-08-02 02:22:11 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 minutes 36 seconds
Variants: generated 100, build-succeeded 56, build-failed 27, syntax-invalid 11, redundant 6
Fitness: max 0(56), min 0(56), ave 0
Test execution time: sum 3073 ms, max 129 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 02:22:11 [main] [INFO]  KGenProgMain - entered the era of 30th generation.
2023-08-02 02:22:21 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 minutes 46 seconds
Variants: generated 100, build-succeeded 60, build-failed 28, syntax-invalid 10, redundant 2
Fitness: max 1(1), min 0(59), ave 0.017
Test execution time: sum 3316 ms, max 120 ms, min 48 ms
----------------------------------------------------------------

2023-08-02 02:22:21 [main] [INFO]  KGenProgMain - entered the era of 31st generation.
2023-08-02 02:22:29 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 minutes 54 seconds
Variants: generated 100, build-succeeded 53, build-failed 31, syntax-invalid 13, redundant 3
Fitness: max 1(2), min 0(51), ave 0.038
Test execution time: sum 2820 ms, max 72 ms, min 48 ms
----------------------------------------------------------------

2023-08-02 02:22:29 [main] [INFO]  KGenProgMain - entered the era of 32nd generation.
2023-08-02 02:25:39 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 minutes 4 seconds
Variants: generated 100, build-succeeded 64, build-failed 26, syntax-invalid 7, redundant 3
Fitness: max 1(1), min 0(63), ave 0.016
Test execution time: sum 183470 ms, max 180064 ms, min 48 ms
----------------------------------------------------------------

2023-08-02 02:25:39 [main] [INFO]  KGenProgMain - entered the era of 33rd generation.
2023-08-02 02:25:48 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 minutes 13 seconds
Variants: generated 100, build-succeeded 62, build-failed 23, syntax-invalid 10, redundant 5
Fitness: max 0(62), min 0(62), ave 0
Test execution time: sum 3489 ms, max 197 ms, min 48 ms
----------------------------------------------------------------

2023-08-02 02:25:48 [main] [INFO]  KGenProgMain - entered the era of 34th generation.
2023-08-02 02:25:58 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 minutes 23 seconds
Variants: generated 100, build-succeeded 60, build-failed 33, syntax-invalid 6, redundant 1
Fitness: max 0(60), min 0(60), ave 0
Test execution time: sum 3506 ms, max 232 ms, min 48 ms
----------------------------------------------------------------

2023-08-02 02:25:58 [main] [INFO]  KGenProgMain - entered the era of 35th generation.
2023-08-02 02:26:07 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 minutes 32 seconds
Variants: generated 100, build-succeeded 56, build-failed 30, syntax-invalid 10, redundant 4
Fitness: max 0(56), min 0(56), ave 0
Test execution time: sum 3073 ms, max 72 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 02:26:07 [main] [INFO]  KGenProgMain - entered the era of 36th generation.
2023-08-02 02:26:16 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 minutes 41 seconds
Variants: generated 100, build-succeeded 53, build-failed 28, syntax-invalid 15, redundant 4
Fitness: max 0(53), min 0(53), ave 0
Test execution time: sum 2996 ms, max 201 ms, min 48 ms
----------------------------------------------------------------

2023-08-02 02:26:16 [main] [INFO]  KGenProgMain - entered the era of 37th generation.
2023-08-02 02:26:26 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 minutes 51 seconds
Variants: generated 100, build-succeeded 57, build-failed 32, syntax-invalid 8, redundant 3
Fitness: max 0(57), min 0(57), ave 0
Test execution time: sum 3282 ms, max 144 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 02:26:26 [main] [INFO]  KGenProgMain - entered the era of 38th generation.
2023-08-02 02:26:34 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 minutes 59 seconds
Variants: generated 100, build-succeeded 51, build-failed 29, syntax-invalid 14, redundant 6
Fitness: max 1(1), min 0(50), ave 0.02
Test execution time: sum 2814 ms, max 70 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 02:26:34 [main] [INFO]  KGenProgMain - entered the era of 39th generation.
2023-08-02 02:26:43 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 minutes 8 seconds
Variants: generated 100, build-succeeded 53, build-failed 30, syntax-invalid 9, redundant 8
Fitness: max 0(53), min 0(53), ave 0
Test execution time: sum 2914 ms, max 122 ms, min 48 ms
----------------------------------------------------------------

2023-08-02 02:26:43 [main] [INFO]  KGenProgMain - entered the era of 40th generation.
2023-08-02 02:26:51 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 minutes 16 seconds
Variants: generated 100, build-succeeded 42, build-failed 35, syntax-invalid 16, redundant 7
Fitness: max 0(42), min 0(42), ave 0
Test execution time: sum 2519 ms, max 123 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 02:26:51 [main] [INFO]  KGenProgMain - entered the era of 41st generation.
2023-08-02 02:27:00 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 minutes 25 seconds
Variants: generated 100, build-succeeded 57, build-failed 25, syntax-invalid 13, redundant 5
Fitness: max 0(57), min 0(57), ave 0
Test execution time: sum 3084 ms, max 82 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 02:27:00 [main] [INFO]  KGenProgMain - entered the era of 42nd generation.
2023-08-02 02:27:10 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 minutes 35 seconds
Variants: generated 100, build-succeeded 55, build-failed 28, syntax-invalid 10, redundant 7
Fitness: max 0(55), min 0(55), ave 0
Test execution time: sum 3114 ms, max 190 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 02:27:10 [main] [INFO]  KGenProgMain - entered the era of 43rd generation.
2023-08-02 02:27:19 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 minutes 44 seconds
Variants: generated 100, build-succeeded 50, build-failed 29, syntax-invalid 11, redundant 10
Fitness: max 0(50), min 0(50), ave 0
Test execution time: sum 2989 ms, max 187 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 02:27:19 [main] [INFO]  KGenProgMain - entered the era of 44th generation.
2023-08-02 02:27:28 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 minutes 53 seconds
Variants: generated 100, build-succeeded 57, build-failed 27, syntax-invalid 8, redundant 8
Fitness: max 0(57), min 0(57), ave 0
Test execution time: sum 3164 ms, max 70 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 02:27:28 [main] [INFO]  KGenProgMain - entered the era of 45th generation.
2023-08-02 02:27:38 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 minutes 3 seconds
Variants: generated 100, build-succeeded 58, build-failed 29, syntax-invalid 7, redundant 6
Fitness: max 0(58), min 0(58), ave 0
Test execution time: sum 3187 ms, max 152 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 02:27:38 [main] [INFO]  KGenProgMain - entered the era of 46th generation.
2023-08-02 02:27:48 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 minutes 13 seconds
Variants: generated 100, build-succeeded 56, build-failed 32, syntax-invalid 6, redundant 6
Fitness: max 0(56), min 0(56), ave 0
Test execution time: sum 3187 ms, max 131 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 02:27:48 [main] [INFO]  KGenProgMain - entered the era of 47th generation.
2023-08-02 02:27:57 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 minutes 22 seconds
Variants: generated 100, build-succeeded 56, build-failed 29, syntax-invalid 10, redundant 5
Fitness: max 0(56), min 0(56), ave 0
Test execution time: sum 3046 ms, max 67 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 02:27:57 [main] [INFO]  KGenProgMain - entered the era of 48th generation.
2023-08-02 02:28:06 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 minutes 31 seconds
Variants: generated 100, build-succeeded 51, build-failed 27, syntax-invalid 14, redundant 8
Fitness: max 0(51), min 0(51), ave 0
Test execution time: sum 2813 ms, max 123 ms, min 48 ms
----------------------------------------------------------------

2023-08-02 02:28:06 [main] [INFO]  KGenProgMain - entered the era of 49th generation.
2023-08-02 02:28:16 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 minutes 42 seconds
Variants: generated 100, build-succeeded 59, build-failed 28, syntax-invalid 9, redundant 4
Fitness: max 1(2), min 0(57), ave 0.034
Test execution time: sum 3435 ms, max 187 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 02:28:16 [main] [INFO]  KGenProgMain - entered the era of 50th generation.
2023-08-02 02:28:26 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 minutes 51 seconds
Variants: generated 100, build-succeeded 55, build-failed 28, syntax-invalid 13, redundant 4
Fitness: max 0(55), min 0(55), ave 0
Test execution time: sum 2942 ms, max 65 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 02:28:26 [main] [INFO]  KGenProgMain - entered the era of 51st generation.
2023-08-02 02:28:37 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 10 minutes 2 seconds
Variants: generated 100, build-succeeded 64, build-failed 29, syntax-invalid 7, redundant 0
Fitness: max 1(2), min 0(62), ave 0.031
Test execution time: sum 3477 ms, max 122 ms, min 48 ms
----------------------------------------------------------------

2023-08-02 02:28:37 [main] [INFO]  KGenProgMain - entered the era of 52nd generation.
2023-08-02 02:28:47 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 10 minutes 12 seconds
Variants: generated 100, build-succeeded 47, build-failed 41, syntax-invalid 5, redundant 7
Fitness: max 0(47), min 0(47), ave 0
Test execution time: sum 2772 ms, max 165 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 02:28:47 [main] [INFO]  KGenProgMain - entered the era of 53rd generation.
2023-08-02 02:31:58 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 13 minutes 23 seconds
Variants: generated 100, build-succeeded 53, build-failed 33, syntax-invalid 9, redundant 5
Fitness: max 0(53), min 0(53), ave 0
Test execution time: sum 183076 ms, max 180065 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 02:31:58 [main] [INFO]  KGenProgMain - entered the era of 54th generation.
2023-08-02 02:32:08 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 13 minutes 33 seconds
Variants: generated 100, build-succeeded 54, build-failed 36, syntax-invalid 4, redundant 6
Fitness: max 0(54), min 0(54), ave 0
Test execution time: sum 2913 ms, max 81 ms, min 48 ms
----------------------------------------------------------------

2023-08-02 02:32:08 [main] [INFO]  KGenProgMain - entered the era of 55th generation.
2023-08-02 02:32:18 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 13 minutes 43 seconds
Variants: generated 100, build-succeeded 58, build-failed 32, syntax-invalid 6, redundant 4
Fitness: max 1(2), min 0(56), ave 0.034
Test execution time: sum 3143 ms, max 82 ms, min 48 ms
----------------------------------------------------------------

2023-08-02 02:32:18 [main] [INFO]  KGenProgMain - entered the era of 56th generation.
2023-08-02 02:32:29 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 13 minutes 55 seconds
Variants: generated 100, build-succeeded 59, build-failed 30, syntax-invalid 7, redundant 4
Fitness: max 0(59), min 0(59), ave 0
Test execution time: sum 3166 ms, max 130 ms, min 48 ms
----------------------------------------------------------------

2023-08-02 02:32:29 [main] [INFO]  KGenProgMain - entered the era of 57th generation.
2023-08-02 02:32:39 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 14 minutes 4 seconds
Variants: generated 100, build-succeeded 53, build-failed 33, syntax-invalid 9, redundant 5
Fitness: max 0(53), min 0(53), ave 0
Test execution time: sum 2828 ms, max 83 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 02:32:39 [main] [INFO]  KGenProgMain - entered the era of 58th generation.
2023-08-02 02:32:50 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 14 minutes 15 seconds
Variants: generated 100, build-succeeded 55, build-failed 31, syntax-invalid 12, redundant 2
Fitness: max 0(55), min 0(55), ave 0
Test execution time: sum 3152 ms, max 117 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 02:32:50 [main] [INFO]  KGenProgMain - entered the era of 59th generation.
2023-08-02 02:33:00 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 14 minutes 25 seconds
Variants: generated 100, build-succeeded 56, build-failed 28, syntax-invalid 12, redundant 4
Fitness: max 0(56), min 0(56), ave 0
Test execution time: sum 2969 ms, max 83 ms, min 48 ms
----------------------------------------------------------------

2023-08-02 02:33:00 [main] [INFO]  KGenProgMain - entered the era of 60th generation.
2023-08-02 02:33:10 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 14 minutes 35 seconds
Variants: generated 100, build-succeeded 50, build-failed 37, syntax-invalid 11, redundant 2
Fitness: max 0(50), min 0(50), ave 0
Test execution time: sum 2693 ms, max 68 ms, min 48 ms
----------------------------------------------------------------

2023-08-02 02:33:10 [main] [INFO]  KGenProgMain - entered the era of 61st generation.
2023-08-02 02:33:21 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 14 minutes 46 seconds
Variants: generated 100, build-succeeded 51, build-failed 32, syntax-invalid 12, redundant 5
Fitness: max 0(51), min 0(51), ave 0
Test execution time: sum 2777 ms, max 125 ms, min 48 ms
----------------------------------------------------------------

2023-08-02 02:33:21 [main] [INFO]  KGenProgMain - entered the era of 62nd generation.
2023-08-02 02:33:31 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 14 minutes 56 seconds
Variants: generated 100, build-succeeded 53, build-failed 33, syntax-invalid 12, redundant 2
Fitness: max 0(53), min 0(53), ave 0
Test execution time: sum 2820 ms, max 72 ms, min 48 ms
----------------------------------------------------------------

2023-08-02 02:33:31 [main] [INFO]  KGenProgMain - entered the era of 63rd generation.
2023-08-02 02:33:42 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 15 minutes 7 seconds
Variants: generated 100, build-succeeded 49, build-failed 32, syntax-invalid 15, redundant 4
Fitness: max 0(49), min 0(49), ave 0
Test execution time: sum 2830 ms, max 121 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 02:33:42 [main] [INFO]  KGenProgMain - entered the era of 64th generation.
2023-08-02 02:33:54 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 15 minutes 19 seconds
Variants: generated 100, build-succeeded 64, build-failed 26, syntax-invalid 7, redundant 3
Fitness: max 0(64), min 0(64), ave 0
Test execution time: sum 3387 ms, max 74 ms, min 48 ms
----------------------------------------------------------------

2023-08-02 02:33:54 [main] [INFO]  KGenProgMain - entered the era of 65th generation.
2023-08-02 02:34:05 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 15 minutes 30 seconds
Variants: generated 100, build-succeeded 54, build-failed 35, syntax-invalid 7, redundant 4
Fitness: max 1(1), min 0(53), ave 0.019
Test execution time: sum 2942 ms, max 67 ms, min 48 ms
----------------------------------------------------------------

2023-08-02 02:34:05 [main] [INFO]  KGenProgMain - entered the era of 66th generation.
2023-08-02 02:34:17 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 15 minutes 42 seconds
Variants: generated 100, build-succeeded 53, build-failed 36, syntax-invalid 6, redundant 5
Fitness: max 0(53), min 0(53), ave 0
Test execution time: sum 2941 ms, max 120 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 02:34:17 [main] [INFO]  KGenProgMain - entered the era of 67th generation.
2023-08-02 02:34:28 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 15 minutes 54 seconds
Variants: generated 100, build-succeeded 63, build-failed 26, syntax-invalid 8, redundant 3
Fitness: max 0(63), min 0(63), ave 0
Test execution time: sum 3337 ms, max 71 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 02:34:28 [main] [INFO]  KGenProgMain - entered the era of 68th generation.
2023-08-02 02:34:41 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 16 minutes 6 seconds
Variants: generated 100, build-succeeded 59, build-failed 30, syntax-invalid 4, redundant 7
Fitness: max 0(59), min 0(59), ave 0
Test execution time: sum 3386 ms, max 183 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 02:34:41 [main] [INFO]  KGenProgMain - entered the era of 69th generation.
2023-08-02 02:34:52 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 16 minutes 17 seconds
Variants: generated 100, build-succeeded 48, build-failed 37, syntax-invalid 13, redundant 2
Fitness: max 0(48), min 0(48), ave 0
Test execution time: sum 2516 ms, max 73 ms, min 48 ms
----------------------------------------------------------------

2023-08-02 02:34:52 [main] [INFO]  KGenProgMain - entered the era of 70th generation.
2023-08-02 02:35:03 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 16 minutes 28 seconds
Variants: generated 100, build-succeeded 58, build-failed 30, syntax-invalid 10, redundant 2
Fitness: max 1(1), min 0(57), ave 0.017
Test execution time: sum 3210 ms, max 72 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 02:35:03 [main] [INFO]  KGenProgMain - entered the era of 71st generation.
2023-08-02 02:35:16 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 16 minutes 41 seconds
Variants: generated 100, build-succeeded 59, build-failed 29, syntax-invalid 10, redundant 2
Fitness: max 1(1), min 0(58), ave 0.017
Test execution time: sum 3134 ms, max 127 ms, min 48 ms
----------------------------------------------------------------

2023-08-02 02:35:16 [main] [INFO]  KGenProgMain - entered the era of 72nd generation.
2023-08-02 02:35:27 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 16 minutes 52 seconds
Variants: generated 100, build-succeeded 59, build-failed 29, syntax-invalid 8, redundant 4
Fitness: max 0(59), min 0(59), ave 0
Test execution time: sum 3083 ms, max 71 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 02:35:27 [main] [INFO]  KGenProgMain - entered the era of 73rd generation.
2023-08-02 02:38:39 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 20 minutes 4 seconds
Variants: generated 100, build-succeeded 49, build-failed 31, syntax-invalid 18, redundant 2
Fitness: max 0(49), min 0(49), ave 0
Test execution time: sum 182914 ms, max 180056 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 02:38:39 [main] [INFO]  KGenProgMain - entered the era of 74th generation.
2023-08-02 02:38:51 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 20 minutes 16 seconds
Variants: generated 100, build-succeeded 65, build-failed 22, syntax-invalid 12, redundant 1
Fitness: max 0(65), min 0(65), ave 0
Test execution time: sum 3471 ms, max 77 ms, min 48 ms
----------------------------------------------------------------

2023-08-02 02:38:51 [main] [INFO]  KGenProgMain - entered the era of 75th generation.
2023-08-02 02:39:02 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 20 minutes 27 seconds
Variants: generated 100, build-succeeded 56, build-failed 26, syntax-invalid 13, redundant 5
Fitness: max 1(2), min 0(54), ave 0.036
Test execution time: sum 3036 ms, max 74 ms, min 48 ms
----------------------------------------------------------------

2023-08-02 02:39:02 [main] [INFO]  KGenProgMain - entered the era of 76th generation.
2023-08-02 02:39:15 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 20 minutes 40 seconds
Variants: generated 100, build-succeeded 61, build-failed 22, syntax-invalid 13, redundant 4
Fitness: max 0(61), min 0(61), ave 0
Test execution time: sum 3309 ms, max 129 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 02:39:15 [main] [INFO]  KGenProgMain - entered the era of 77th generation.
2023-08-02 02:39:26 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 20 minutes 52 seconds
Variants: generated 100, build-succeeded 59, build-failed 30, syntax-invalid 9, redundant 2
Fitness: max 1(1), min 0(58), ave 0.017
Test execution time: sum 3164 ms, max 75 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 02:39:26 [main] [INFO]  KGenProgMain - entered the era of 78th generation.
2023-08-02 02:39:39 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 21 minutes 4 seconds
Variants: generated 100, build-succeeded 49, build-failed 31, syntax-invalid 16, redundant 4
Fitness: max 1(1), min 0(48), ave 0.02
Test execution time: sum 2839 ms, max 124 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 02:39:39 [main] [INFO]  KGenProgMain - entered the era of 79th generation.
2023-08-02 02:39:51 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 21 minutes 16 seconds
Variants: generated 100, build-succeeded 62, build-failed 25, syntax-invalid 6, redundant 7
Fitness: max 0(62), min 0(62), ave 0
Test execution time: sum 3208 ms, max 71 ms, min 48 ms
----------------------------------------------------------------

2023-08-02 02:39:51 [main] [INFO]  KGenProgMain - entered the era of 80th generation.
2023-08-02 02:40:03 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 21 minutes 28 seconds
Variants: generated 100, build-succeeded 55, build-failed 30, syntax-invalid 10, redundant 5
Fitness: max 0(55), min 0(55), ave 0
Test execution time: sum 3008 ms, max 67 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 02:40:03 [main] [INFO]  KGenProgMain - entered the era of 81st generation.
2023-08-02 02:40:16 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 21 minutes 41 seconds
Variants: generated 100, build-succeeded 57, build-failed 30, syntax-invalid 11, redundant 2
Fitness: max 1(1), min 0(56), ave 0.018
Test execution time: sum 3259 ms, max 136 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 02:40:16 [main] [INFO]  KGenProgMain - entered the era of 82nd generation.
2023-08-02 02:40:29 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 21 minutes 54 seconds
Variants: generated 100, build-succeeded 54, build-failed 27, syntax-invalid 10, redundant 9
Fitness: max 1(1), min 0(53), ave 0.019
Test execution time: sum 3009 ms, max 76 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 02:40:29 [main] [INFO]  KGenProgMain - entered the era of 83rd generation.
2023-08-02 02:40:42 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 22 minutes 7 seconds
Variants: generated 100, build-succeeded 47, build-failed 32, syntax-invalid 17, redundant 4
Fitness: max 0(47), min 0(47), ave 0
Test execution time: sum 2961 ms, max 203 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 02:40:42 [main] [INFO]  KGenProgMain - entered the era of 84th generation.
2023-08-02 02:40:54 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 22 minutes 19 seconds
Variants: generated 100, build-succeeded 49, build-failed 36, syntax-invalid 13, redundant 2
Fitness: max 0(49), min 0(49), ave 0
Test execution time: sum 2668 ms, max 73 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 02:40:54 [main] [INFO]  KGenProgMain - entered the era of 85th generation.
2023-08-02 02:41:06 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 22 minutes 31 seconds
Variants: generated 100, build-succeeded 44, build-failed 37, syntax-invalid 15, redundant 4
Fitness: max 0(44), min 0(44), ave 0
Test execution time: sum 2411 ms, max 74 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 02:41:06 [main] [INFO]  KGenProgMain - entered the era of 86th generation.
2023-08-02 02:41:19 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 22 minutes 44 seconds
Variants: generated 100, build-succeeded 53, build-failed 33, syntax-invalid 11, redundant 3
Fitness: max 1(1), min 0(52), ave 0.019
Test execution time: sum 3003 ms, max 125 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 02:41:19 [main] [INFO]  KGenProgMain - entered the era of 87th generation.
2023-08-02 02:41:32 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 22 minutes 57 seconds
Variants: generated 100, build-succeeded 54, build-failed 30, syntax-invalid 12, redundant 4
Fitness: max 0(54), min 0(54), ave 0
Test execution time: sum 2958 ms, max 73 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 02:41:32 [main] [INFO]  KGenProgMain - entered the era of 88th generation.
2023-08-02 02:41:46 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 23 minutes 11 seconds
Variants: generated 100, build-succeeded 52, build-failed 30, syntax-invalid 16, redundant 2
Fitness: max 1(2), min 0(50), ave 0.038
Test execution time: sum 3110 ms, max 123 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 02:41:46 [main] [INFO]  KGenProgMain - entered the era of 89th generation.
2023-08-02 02:41:57 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 23 minutes 22 seconds
Variants: generated 100, build-succeeded 43, build-failed 29, syntax-invalid 24, redundant 4
Fitness: max 1(1), min 0(42), ave 0.023
Test execution time: sum 2340 ms, max 74 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 02:41:57 [main] [INFO]  KGenProgMain - entered the era of 90th generation.
2023-08-02 02:42:08 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 23 minutes 33 seconds
Variants: generated 100, build-succeeded 45, build-failed 29, syntax-invalid 19, redundant 7
Fitness: max 0(45), min 0(45), ave 0
Test execution time: sum 2429 ms, max 76 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 02:42:08 [main] [INFO]  KGenProgMain - entered the era of 91st generation.
2023-08-02 02:42:22 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 23 minutes 47 seconds
Variants: generated 100, build-succeeded 59, build-failed 29, syntax-invalid 10, redundant 2
Fitness: max 1(1), min 0(58), ave 0.017
Test execution time: sum 3350 ms, max 117 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 02:42:22 [main] [INFO]  KGenProgMain - entered the era of 92nd generation.
2023-08-02 02:42:35 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 24 minutes 0 seconds
Variants: generated 100, build-succeeded 57, build-failed 31, syntax-invalid 7, redundant 5
Fitness: max 0(57), min 0(57), ave 0
Test execution time: sum 3107 ms, max 77 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 02:42:35 [main] [INFO]  KGenProgMain - entered the era of 93rd generation.
2023-08-02 02:42:49 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 24 minutes 14 seconds
Variants: generated 100, build-succeeded 53, build-failed 30, syntax-invalid 15, redundant 2
Fitness: max 1(2), min 0(51), ave 0.038
Test execution time: sum 3258 ms, max 170 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 02:42:49 [main] [INFO]  KGenProgMain - entered the era of 94th generation.
2023-08-02 02:43:02 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 24 minutes 27 seconds
Variants: generated 100, build-succeeded 61, build-failed 34, syntax-invalid 4, redundant 1
Fitness: max 0(61), min 0(61), ave 0
Test execution time: sum 3187 ms, max 70 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 02:43:02 [main] [INFO]  KGenProgMain - entered the era of 95th generation.
2023-08-02 02:43:15 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 24 minutes 40 seconds
Variants: generated 100, build-succeeded 54, build-failed 24, syntax-invalid 17, redundant 5
Fitness: max 0(54), min 0(54), ave 0
Test execution time: sum 3001 ms, max 69 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 02:43:15 [main] [INFO]  KGenProgMain - entered the era of 96th generation.
2023-08-02 02:43:29 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 24 minutes 54 seconds
Variants: generated 100, build-succeeded 55, build-failed 29, syntax-invalid 13, redundant 3
Fitness: max 0(55), min 0(55), ave 0
Test execution time: sum 3067 ms, max 123 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 02:43:29 [main] [INFO]  KGenProgMain - entered the era of 97th generation.
2023-08-02 02:43:41 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 25 minutes 6 seconds
Variants: generated 100, build-succeeded 48, build-failed 28, syntax-invalid 18, redundant 6
Fitness: max 0(48), min 0(48), ave 0
Test execution time: sum 2581 ms, max 79 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 02:43:41 [main] [INFO]  KGenProgMain - entered the era of 98th generation.
2023-08-02 02:43:53 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 25 minutes 18 seconds
Variants: generated 100, build-succeeded 39, build-failed 29, syntax-invalid 28, redundant 4
Fitness: max 0(39), min 0(39), ave 0
Test execution time: sum 2234 ms, max 68 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 02:43:53 [main] [INFO]  KGenProgMain - entered the era of 99th generation.
2023-08-02 02:44:07 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 25 minutes 32 seconds
Variants: generated 100, build-succeeded 56, build-failed 28, syntax-invalid 13, redundant 3
Fitness: max 1(2), min 0(54), ave 0.036
Test execution time: sum 3156 ms, max 130 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 02:44:07 [main] [INFO]  KGenProgMain - entered the era of 100th generation.
2023-08-02 02:44:20 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 25 minutes 45 seconds
Variants: generated 100, build-succeeded 49, build-failed 33, syntax-invalid 15, redundant 3
Fitness: max 0(49), min 0(49), ave 0
Test execution time: sum 2614 ms, max 67 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 02:44:20 [main] [INFO]  KGenProgMain - entered the era of 101st generation.
2023-08-02 02:44:35 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 26 minutes 0 seconds
Variants: generated 100, build-succeeded 47, build-failed 36, syntax-invalid 14, redundant 3
Fitness: max 0(47), min 0(47), ave 0
Test execution time: sum 2771 ms, max 112 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 02:44:35 [main] [INFO]  KGenProgMain - entered the era of 102nd generation.
2023-08-02 02:44:48 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 26 minutes 13 seconds
Variants: generated 100, build-succeeded 52, build-failed 25, syntax-invalid 20, redundant 3
Fitness: max 1(2), min 0(50), ave 0.038
Test execution time: sum 2837 ms, max 76 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 02:44:48 [main] [INFO]  KGenProgMain - entered the era of 103rd generation.
2023-08-02 02:45:02 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 26 minutes 27 seconds
Variants: generated 100, build-succeeded 55, build-failed 25, syntax-invalid 14, redundant 6
Fitness: max 0(55), min 0(55), ave 0
Test execution time: sum 3015 ms, max 69 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 02:45:02 [main] [INFO]  KGenProgMain - entered the era of 104th generation.
2023-08-02 02:45:17 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 26 minutes 42 seconds
Variants: generated 100, build-succeeded 52, build-failed 28, syntax-invalid 19, redundant 1
Fitness: max 0(52), min 0(52), ave 0
Test execution time: sum 2960 ms, max 131 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 02:45:17 [main] [INFO]  KGenProgMain - entered the era of 105th generation.
2023-08-02 02:45:30 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 26 minutes 55 seconds
Variants: generated 100, build-succeeded 54, build-failed 27, syntax-invalid 13, redundant 6
Fitness: max 1(2), min 0(52), ave 0.037
Test execution time: sum 2928 ms, max 78 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 02:45:30 [main] [INFO]  KGenProgMain - entered the era of 106th generation.
2023-08-02 02:45:45 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 27 minutes 10 seconds
Variants: generated 100, build-succeeded 50, build-failed 35, syntax-invalid 13, redundant 2
Fitness: max 0(50), min 0(50), ave 0
Test execution time: sum 2934 ms, max 106 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 02:45:45 [main] [INFO]  KGenProgMain - entered the era of 107th generation.
2023-08-02 02:45:59 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 27 minutes 24 seconds
Variants: generated 100, build-succeeded 51, build-failed 29, syntax-invalid 16, redundant 4
Fitness: max 0(51), min 0(51), ave 0
Test execution time: sum 2791 ms, max 78 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 02:45:59 [main] [INFO]  KGenProgMain - entered the era of 108th generation.
2023-08-02 02:46:13 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 27 minutes 39 seconds
Variants: generated 100, build-succeeded 58, build-failed 30, syntax-invalid 10, redundant 2
Fitness: max 0(58), min 0(58), ave 0
Test execution time: sum 3305 ms, max 68 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 02:46:13 [main] [INFO]  KGenProgMain - entered the era of 109th generation.
2023-08-02 02:46:28 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 27 minutes 53 seconds
Variants: generated 100, build-succeeded 55, build-failed 28, syntax-invalid 14, redundant 3
Fitness: max 1(1), min 0(54), ave 0.018
Test execution time: sum 3002 ms, max 115 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 02:46:28 [main] [INFO]  KGenProgMain - entered the era of 110th generation.
2023-08-02 02:46:42 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 28 minutes 7 seconds
Variants: generated 100, build-succeeded 53, build-failed 29, syntax-invalid 14, redundant 4
Fitness: max 0(53), min 0(53), ave 0
Test execution time: sum 2901 ms, max 66 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 02:46:42 [main] [INFO]  KGenProgMain - entered the era of 111th generation.
2023-08-02 02:46:57 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 28 minutes 22 seconds
Variants: generated 100, build-succeeded 59, build-failed 24, syntax-invalid 15, redundant 2
Fitness: max 1(2), min 0(57), ave 0.034
Test execution time: sum 3244 ms, max 123 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 02:46:57 [main] [INFO]  KGenProgMain - entered the era of 112th generation.
2023-08-02 02:47:12 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 28 minutes 37 seconds
Variants: generated 100, build-succeeded 60, build-failed 28, syntax-invalid 9, redundant 3
Fitness: max 0(60), min 0(60), ave 0
Test execution time: sum 3297 ms, max 73 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 02:47:12 [main] [INFO]  KGenProgMain - entered the era of 113th generation.
2023-08-02 02:47:27 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 28 minutes 52 seconds
Variants: generated 100, build-succeeded 54, build-failed 27, syntax-invalid 15, redundant 4
Fitness: max 0(54), min 0(54), ave 0
Test execution time: sum 3136 ms, max 123 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 02:47:27 [main] [INFO]  KGenProgMain - entered the era of 114th generation.
2023-08-02 02:47:40 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 29 minutes 5 seconds
Variants: generated 100, build-succeeded 48, build-failed 28, syntax-invalid 23, redundant 1
Fitness: max 1(1), min 0(47), ave 0.021
Test execution time: sum 2502 ms, max 72 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 02:47:40 [main] [INFO]  KGenProgMain - entered the era of 115th generation.
2023-08-02 02:47:54 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 29 minutes 19 seconds
Variants: generated 100, build-succeeded 47, build-failed 34, syntax-invalid 16, redundant 3
Fitness: max 1(1), min 0(46), ave 0.021
Test execution time: sum 2640 ms, max 82 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 02:47:54 [main] [INFO]  KGenProgMain - entered the era of 116th generation.
2023-08-02 02:48:09 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 29 minutes 34 seconds
Variants: generated 100, build-succeeded 45, build-failed 34, syntax-invalid 19, redundant 2
Fitness: max 0(45), min 0(45), ave 0
Test execution time: sum 2642 ms, max 222 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 02:48:09 [main] [INFO]  KGenProgMain - entered the era of 117th generation.
2023-08-02 02:48:23 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 29 minutes 48 seconds
Variants: generated 100, build-succeeded 50, build-failed 25, syntax-invalid 18, redundant 7
Fitness: max 0(50), min 0(50), ave 0
Test execution time: sum 2666 ms, max 71 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 02:48:23 [main] [INFO]  KGenProgMain - entered the era of 118th generation.
2023-08-02 02:48:38 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 30 minutes 4 seconds
Variants: generated 100, build-succeeded 52, build-failed 32, syntax-invalid 13, redundant 3
Fitness: max 1(1), min 0(51), ave 0.019
Test execution time: sum 3080 ms, max 120 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 02:48:38 [main] [INFO]  KGenProgMain - entered the era of 119th generation.
2023-08-02 02:48:53 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 30 minutes 18 seconds
Variants: generated 100, build-succeeded 51, build-failed 32, syntax-invalid 13, redundant 4
Fitness: max 0(51), min 0(51), ave 0
Test execution time: sum 2710 ms, max 72 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 02:48:53 [main] [INFO]  KGenProgMain - entered the era of 120th generation.
2023-08-02 02:49:08 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 30 minutes 33 seconds
Variants: generated 100, build-succeeded 59, build-failed 21, syntax-invalid 15, redundant 5
Fitness: max 1(1), min 0(58), ave 0.017
Test execution time: sum 3152 ms, max 66 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 02:49:08 [main] [INFO]  KGenProgMain - entered the era of 121st generation.
2023-08-02 02:49:24 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 30 minutes 49 seconds
Variants: generated 100, build-succeeded 54, build-failed 33, syntax-invalid 7, redundant 6
Fitness: max 0(54), min 0(54), ave 0
Test execution time: sum 2968 ms, max 107 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 02:49:24 [main] [INFO]  KGenProgMain - entered the era of 122nd generation.
2023-08-02 02:49:40 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 31 minutes 5 seconds
Variants: generated 100, build-succeeded 60, build-failed 29, syntax-invalid 8, redundant 3
Fitness: max 1(1), min 0(59), ave 0.017
Test execution time: sum 3277 ms, max 71 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 02:49:40 [main] [INFO]  KGenProgMain - entered the era of 123rd generation.
2023-08-02 02:49:56 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 31 minutes 21 seconds
Variants: generated 100, build-succeeded 47, build-failed 35, syntax-invalid 15, redundant 3
Fitness: max 1(1), min 0(46), ave 0.021
Test execution time: sum 2684 ms, max 115 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 02:49:56 [main] [INFO]  KGenProgMain - entered the era of 124th generation.
2023-08-02 02:50:11 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 31 minutes 37 seconds
Variants: generated 100, build-succeeded 56, build-failed 30, syntax-invalid 10, redundant 4
Fitness: max 0(56), min 0(56), ave 0
Test execution time: sum 3006 ms, max 70 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 02:50:11 [main] [INFO]  KGenProgMain - entered the era of 125th generation.
2023-08-02 02:50:29 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 31 minutes 54 seconds
Variants: generated 100, build-succeeded 68, build-failed 24, syntax-invalid 7, redundant 1
Fitness: max 1(1), min 0(67), ave 0.015
Test execution time: sum 3935 ms, max 118 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 02:50:29 [main] [INFO]  KGenProgMain - entered the era of 126th generation.
2023-08-02 02:50:44 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 32 minutes 9 seconds
Variants: generated 100, build-succeeded 55, build-failed 30, syntax-invalid 14, redundant 1
Fitness: max 1(1), min 0(54), ave 0.018
Test execution time: sum 2913 ms, max 74 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 02:50:44 [main] [INFO]  KGenProgMain - entered the era of 127th generation.
2023-08-02 02:51:00 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 32 minutes 25 seconds
Variants: generated 100, build-succeeded 61, build-failed 27, syntax-invalid 5, redundant 7
Fitness: max 1(1), min 0(60), ave 0.016
Test execution time: sum 3421 ms, max 74 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 02:51:00 [main] [INFO]  KGenProgMain - entered the era of 128th generation.
2023-08-02 02:51:17 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 32 minutes 42 seconds
Variants: generated 100, build-succeeded 58, build-failed 24, syntax-invalid 10, redundant 8
Fitness: max 0(58), min 0(58), ave 0
Test execution time: sum 3173 ms, max 102 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 02:51:17 [main] [INFO]  KGenProgMain - entered the era of 129th generation.
2023-08-02 02:51:31 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 32 minutes 56 seconds
Variants: generated 100, build-succeeded 52, build-failed 32, syntax-invalid 11, redundant 5
Fitness: max 0(52), min 0(52), ave 0
Test execution time: sum 2712 ms, max 73 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 02:51:31 [main] [INFO]  KGenProgMain - entered the era of 130th generation.
2023-08-02 02:51:49 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 33 minutes 14 seconds
Variants: generated 100, build-succeeded 65, build-failed 27, syntax-invalid 4, redundant 4
Fitness: max 0(65), min 0(65), ave 0
Test execution time: sum 3598 ms, max 109 ms, min 48 ms
----------------------------------------------------------------

2023-08-02 02:51:49 [main] [INFO]  KGenProgMain - entered the era of 131st generation.
2023-08-02 02:52:05 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 33 minutes 30 seconds
Variants: generated 100, build-succeeded 59, build-failed 30, syntax-invalid 8, redundant 3
Fitness: max 0(59), min 0(59), ave 0
Test execution time: sum 3145 ms, max 71 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 02:52:05 [main] [INFO]  KGenProgMain - entered the era of 132nd generation.
2023-08-02 02:52:22 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 33 minutes 47 seconds
Variants: generated 100, build-succeeded 57, build-failed 26, syntax-invalid 10, redundant 7
Fitness: max 0(57), min 0(57), ave 0
Test execution time: sum 3303 ms, max 121 ms, min 48 ms
----------------------------------------------------------------

2023-08-02 02:52:22 [main] [INFO]  KGenProgMain - entered the era of 133rd generation.
2023-08-02 02:52:37 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 34 minutes 2 seconds
Variants: generated 100, build-succeeded 50, build-failed 32, syntax-invalid 15, redundant 3
Fitness: max 0(50), min 0(50), ave 0
Test execution time: sum 2711 ms, max 92 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 02:52:37 [main] [INFO]  KGenProgMain - entered the era of 134th generation.
2023-08-02 02:52:53 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 34 minutes 18 seconds
Variants: generated 100, build-succeeded 51, build-failed 33, syntax-invalid 13, redundant 3
Fitness: max 0(51), min 0(51), ave 0
Test execution time: sum 2764 ms, max 73 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 02:52:53 [main] [INFO]  KGenProgMain - entered the era of 135th generation.
2023-08-02 02:53:11 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 34 minutes 36 seconds
Variants: generated 100, build-succeeded 59, build-failed 27, syntax-invalid 10, redundant 4
Fitness: max 0(59), min 0(59), ave 0
Test execution time: sum 3281 ms, max 113 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 02:53:11 [main] [INFO]  KGenProgMain - entered the era of 136th generation.
2023-08-02 02:53:26 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 34 minutes 51 seconds
Variants: generated 100, build-succeeded 49, build-failed 33, syntax-invalid 15, redundant 3
Fitness: max 0(49), min 0(49), ave 0
Test execution time: sum 2628 ms, max 63 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 02:53:26 [main] [INFO]  KGenProgMain - entered the era of 137th generation.
2023-08-02 02:53:42 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 35 minutes 8 seconds
Variants: generated 100, build-succeeded 52, build-failed 26, syntax-invalid 14, redundant 8
Fitness: max 0(52), min 0(52), ave 0
Test execution time: sum 2908 ms, max 120 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 02:53:42 [main] [INFO]  KGenProgMain - entered the era of 138th generation.
2023-08-02 02:53:57 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 35 minutes 22 seconds
Variants: generated 100, build-succeeded 49, build-failed 27, syntax-invalid 17, redundant 7
Fitness: max 0(49), min 0(49), ave 0
Test execution time: sum 2597 ms, max 69 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 02:53:57 [main] [INFO]  KGenProgMain - entered the era of 139th generation.
2023-08-02 02:54:14 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 35 minutes 39 seconds
Variants: generated 100, build-succeeded 58, build-failed 27, syntax-invalid 13, redundant 2
Fitness: max 0(58), min 0(58), ave 0
Test execution time: sum 3330 ms, max 106 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 02:54:14 [main] [INFO]  KGenProgMain - entered the era of 140th generation.
2023-08-02 02:54:31 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 35 minutes 56 seconds
Variants: generated 100, build-succeeded 60, build-failed 32, syntax-invalid 6, redundant 2
Fitness: max 0(60), min 0(60), ave 0
Test execution time: sum 3199 ms, max 74 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 02:54:31 [main] [INFO]  KGenProgMain - entered the era of 141st generation.
2023-08-02 02:54:49 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 36 minutes 14 seconds
Variants: generated 100, build-succeeded 50, build-failed 37, syntax-invalid 11, redundant 2
Fitness: max 0(50), min 0(50), ave 0
Test execution time: sum 2972 ms, max 181 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 02:54:49 [main] [INFO]  KGenProgMain - entered the era of 142nd generation.
2023-08-02 02:55:05 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 36 minutes 31 seconds
Variants: generated 100, build-succeeded 56, build-failed 30, syntax-invalid 9, redundant 5
Fitness: max 0(56), min 0(56), ave 0
Test execution time: sum 2914 ms, max 65 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 02:55:05 [main] [INFO]  KGenProgMain - entered the era of 143rd generation.
2023-08-02 02:55:21 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 36 minutes 46 seconds
Variants: generated 100, build-succeeded 47, build-failed 31, syntax-invalid 18, redundant 4
Fitness: max 0(47), min 0(47), ave 0
Test execution time: sum 2706 ms, max 68 ms, min 51 ms
----------------------------------------------------------------

2023-08-02 02:55:21 [main] [INFO]  KGenProgMain - entered the era of 144th generation.
2023-08-02 02:55:37 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 37 minutes 2 seconds
Variants: generated 100, build-succeeded 51, build-failed 29, syntax-invalid 18, redundant 2
Fitness: max 0(51), min 0(51), ave 0
Test execution time: sum 2847 ms, max 115 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 02:55:37 [main] [INFO]  KGenProgMain - entered the era of 145th generation.
2023-08-02 02:55:53 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 37 minutes 18 seconds
Variants: generated 100, build-succeeded 56, build-failed 29, syntax-invalid 13, redundant 2
Fitness: max 1(1), min 0(55), ave 0.018
Test execution time: sum 3046 ms, max 71 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 02:55:53 [main] [INFO]  KGenProgMain - entered the era of 146th generation.
2023-08-02 02:56:10 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 37 minutes 35 seconds
Variants: generated 100, build-succeeded 53, build-failed 25, syntax-invalid 14, redundant 8
Fitness: max 0(53), min 0(53), ave 0
Test execution time: sum 2959 ms, max 111 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 02:56:10 [main] [INFO]  KGenProgMain - entered the era of 147th generation.
2023-08-02 02:56:27 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 37 minutes 52 seconds
Variants: generated 100, build-succeeded 62, build-failed 26, syntax-invalid 6, redundant 6
Fitness: max 0(62), min 0(62), ave 0
Test execution time: sum 3379 ms, max 127 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 02:56:27 [main] [INFO]  KGenProgMain - entered the era of 148th generation.
2023-08-02 02:56:45 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 38 minutes 10 seconds
Variants: generated 100, build-succeeded 58, build-failed 26, syntax-invalid 9, redundant 7
Fitness: max 0(58), min 0(58), ave 0
Test execution time: sum 3406 ms, max 118 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 02:56:45 [main] [INFO]  KGenProgMain - entered the era of 149th generation.
2023-08-02 02:57:02 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 38 minutes 28 seconds
Variants: generated 100, build-succeeded 61, build-failed 31, syntax-invalid 6, redundant 2
Fitness: max 0(61), min 0(61), ave 0
Test execution time: sum 3270 ms, max 76 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 02:57:02 [main] [INFO]  KGenProgMain - entered the era of 150th generation.
2023-08-02 02:57:21 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 38 minutes 46 seconds
Variants: generated 100, build-succeeded 59, build-failed 32, syntax-invalid 6, redundant 3
Fitness: max 0(59), min 0(59), ave 0
Test execution time: sum 3360 ms, max 113 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 02:57:21 [main] [INFO]  KGenProgMain - entered the era of 151st generation.
2023-08-02 03:00:37 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 42 minutes 2 seconds
Variants: generated 100, build-succeeded 51, build-failed 32, syntax-invalid 13, redundant 4
Fitness: max 0(51), min 0(51), ave 0
Test execution time: sum 182656 ms, max 180054 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 03:00:37 [main] [INFO]  KGenProgMain - entered the era of 152nd generation.
2023-08-02 03:03:53 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 45 minutes 19 seconds
Variants: generated 100, build-succeeded 58, build-failed 28, syntax-invalid 9, redundant 5
Fitness: max 0(58), min 0(58), ave 0
Test execution time: sum 183215 ms, max 180068 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 03:03:53 [main] [INFO]  KGenProgMain - entered the era of 153rd generation.
2023-08-02 03:04:11 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 45 minutes 36 seconds
Variants: generated 100, build-succeeded 57, build-failed 29, syntax-invalid 13, redundant 1
Fitness: max 0(57), min 0(57), ave 0
Test execution time: sum 3107 ms, max 117 ms, min 48 ms
----------------------------------------------------------------

2023-08-02 03:04:11 [main] [INFO]  KGenProgMain - entered the era of 154th generation.
2023-08-02 03:04:28 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 45 minutes 53 seconds
Variants: generated 100, build-succeeded 55, build-failed 33, syntax-invalid 9, redundant 3
Fitness: max 1(1), min 0(54), ave 0.018
Test execution time: sum 3043 ms, max 75 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 03:04:28 [main] [INFO]  KGenProgMain - entered the era of 155th generation.
2023-08-02 03:04:46 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 46 minutes 12 seconds
Variants: generated 100, build-succeeded 61, build-failed 32, syntax-invalid 5, redundant 2
Fitness: max 0(61), min 0(61), ave 0
Test execution time: sum 3449 ms, max 129 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 03:04:46 [main] [INFO]  KGenProgMain - entered the era of 156th generation.
2023-08-02 03:08:04 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 49 minutes 29 seconds
Variants: generated 100, build-succeeded 62, build-failed 28, syntax-invalid 9, redundant 1
Fitness: max 0(62), min 0(62), ave 0
Test execution time: sum 183464 ms, max 180060 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 03:08:04 [main] [INFO]  KGenProgMain - entered the era of 157th generation.
2023-08-02 03:11:23 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 52 minutes 49 seconds
Variants: generated 100, build-succeeded 61, build-failed 27, syntax-invalid 6, redundant 6
Fitness: max 0(61), min 0(61), ave 0
Test execution time: sum 183463 ms, max 180063 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 03:11:23 [main] [INFO]  KGenProgMain - entered the era of 158th generation.
2023-08-02 03:11:41 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 53 minutes 6 seconds
Variants: generated 100, build-succeeded 56, build-failed 29, syntax-invalid 11, redundant 4
Fitness: max 1(2), min 0(54), ave 0.036
Test execution time: sum 3077 ms, max 75 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 03:11:41 [main] [INFO]  KGenProgMain - entered the era of 159th generation.
2023-08-02 03:12:00 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 53 minutes 25 seconds
Variants: generated 100, build-succeeded 60, build-failed 33, syntax-invalid 2, redundant 5
Fitness: max 1(2), min 0(58), ave 0.033
Test execution time: sum 3463 ms, max 121 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 03:12:00 [main] [INFO]  KGenProgMain - entered the era of 160th generation.
2023-08-02 03:12:19 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 53 minutes 44 seconds
Variants: generated 100, build-succeeded 64, build-failed 25, syntax-invalid 7, redundant 4
Fitness: max 0(64), min 0(64), ave 0
Test execution time: sum 3442 ms, max 72 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 03:12:19 [main] [INFO]  KGenProgMain - entered the era of 161st generation.
2023-08-02 03:12:39 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 54 minutes 4 seconds
Variants: generated 100, build-succeeded 58, build-failed 32, syntax-invalid 7, redundant 3
Fitness: max 0(58), min 0(58), ave 0
Test execution time: sum 3430 ms, max 115 ms, min 51 ms
----------------------------------------------------------------

2023-08-02 03:12:39 [main] [INFO]  KGenProgMain - entered the era of 162nd generation.
2023-08-02 03:12:56 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 54 minutes 21 seconds
Variants: generated 100, build-succeeded 50, build-failed 29, syntax-invalid 14, redundant 7
Fitness: max 1(1), min 0(49), ave 0.02
Test execution time: sum 2800 ms, max 69 ms, min 51 ms
----------------------------------------------------------------

2023-08-02 03:12:56 [main] [INFO]  KGenProgMain - entered the era of 163rd generation.
2023-08-02 03:13:15 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 54 minutes 41 seconds
Variants: generated 100, build-succeeded 59, build-failed 35, syntax-invalid 4, redundant 2
Fitness: max 0(59), min 0(59), ave 0
Test execution time: sum 3317 ms, max 121 ms, min 51 ms
----------------------------------------------------------------

2023-08-02 03:13:15 [main] [INFO]  KGenProgMain - entered the era of 164th generation.
2023-08-02 03:16:34 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 57 minutes 59 seconds
Variants: generated 100, build-succeeded 58, build-failed 30, syntax-invalid 9, redundant 3
Fitness: max 0(58), min 0(58), ave 0
Test execution time: sum 183223 ms, max 180061 ms, min 51 ms
----------------------------------------------------------------

2023-08-02 03:16:34 [main] [INFO]  KGenProgMain - entered the era of 165th generation.
2023-08-02 03:16:53 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 58 minutes 18 seconds
Variants: generated 100, build-succeeded 54, build-failed 30, syntax-invalid 13, redundant 3
Fitness: max 0(54), min 0(54), ave 0
Test execution time: sum 3135 ms, max 117 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 03:16:53 [main] [INFO]  KGenProgMain - entered the era of 166th generation.
2023-08-02 03:17:12 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 58 minutes 37 seconds
Variants: generated 100, build-succeeded 59, build-failed 27, syntax-invalid 8, redundant 6
Fitness: max 0(59), min 0(59), ave 0
Test execution time: sum 3170 ms, max 73 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 03:17:12 [main] [INFO]  KGenProgMain - entered the era of 167th generation.
2023-08-02 03:17:31 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 58 minutes 56 seconds
Variants: generated 100, build-succeeded 57, build-failed 32, syntax-invalid 7, redundant 4
Fitness: max 1(1), min 0(56), ave 0.018
Test execution time: sum 3301 ms, max 123 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 03:17:31 [main] [INFO]  KGenProgMain - entered the era of 168th generation.
2023-08-02 03:17:50 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 59 minutes 15 seconds
Variants: generated 100, build-succeeded 51, build-failed 33, syntax-invalid 10, redundant 6
Fitness: max 0(51), min 0(51), ave 0
Test execution time: sum 2805 ms, max 95 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 03:17:50 [main] [INFO]  KGenProgMain - entered the era of 169th generation.
2023-08-02 03:18:09 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 59 minutes 34 seconds
Variants: generated 100, build-succeeded 55, build-failed 27, syntax-invalid 11, redundant 7
Fitness: max 0(55), min 0(55), ave 0
Test execution time: sum 3180 ms, max 134 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 03:18:09 [main] [INFO]  KGenProgMain - entered the era of 170th generation.
2023-08-02 03:18:27 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 59 minutes 52 seconds
Variants: generated 100, build-succeeded 51, build-failed 33, syntax-invalid 15, redundant 1
Fitness: max 0(51), min 0(51), ave 0
Test execution time: sum 2776 ms, max 74 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 03:18:27 [main] [INFO]  KGenProgMain - entered the era of 171st generation.
2023-08-02 03:18:47 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 13 seconds
Variants: generated 100, build-succeeded 56, build-failed 32, syntax-invalid 11, redundant 1
Fitness: max 0(56), min 0(56), ave 0
Test execution time: sum 3277 ms, max 122 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 03:18:47 [main] [INFO]  KGenProgMain - entered the era of 172nd generation.
2023-08-02 03:19:07 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 32 seconds
Variants: generated 100, build-succeeded 61, build-failed 24, syntax-invalid 7, redundant 8
Fitness: max 0(61), min 0(61), ave 0
Test execution time: sum 3203 ms, max 66 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 03:19:07 [main] [INFO]  KGenProgMain - entered the era of 173rd generation.
2023-08-02 03:19:27 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 52 seconds
Variants: generated 100, build-succeeded 57, build-failed 31, syntax-invalid 9, redundant 3
Fitness: max 0(57), min 0(57), ave 0
Test execution time: sum 3378 ms, max 134 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 03:19:27 [main] [INFO]  KGenProgMain - entered the era of 174th generation.
2023-08-02 03:22:46 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 4 minutes 11 seconds
Variants: generated 100, build-succeeded 55, build-failed 26, syntax-invalid 12, redundant 7
Fitness: max 0(55), min 0(55), ave 0
Test execution time: sum 182999 ms, max 180068 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 03:22:46 [main] [INFO]  KGenProgMain - entered the era of 175th generation.
2023-08-02 03:23:04 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 4 minutes 29 seconds
Variants: generated 100, build-succeeded 41, build-failed 37, syntax-invalid 20, redundant 2
Fitness: max 0(41), min 0(41), ave 0
Test execution time: sum 2299 ms, max 68 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 03:23:04 [main] [INFO]  KGenProgMain - entered the era of 176th generation.
2023-08-02 03:26:24 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 7 minutes 49 seconds
Variants: generated 100, build-succeeded 56, build-failed 29, syntax-invalid 13, redundant 2
Fitness: max 0(56), min 0(56), ave 0
Test execution time: sum 183078 ms, max 180058 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 03:26:24 [main] [INFO]  KGenProgMain - entered the era of 177th generation.
2023-08-02 03:26:44 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 8 minutes 9 seconds
Variants: generated 100, build-succeeded 59, build-failed 29, syntax-invalid 7, redundant 5
Fitness: max 0(59), min 0(59), ave 0
Test execution time: sum 3140 ms, max 71 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 03:26:44 [main] [INFO]  KGenProgMain - entered the era of 178th generation.
2023-08-02 03:27:05 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 8 minutes 31 seconds
Variants: generated 100, build-succeeded 58, build-failed 33, syntax-invalid 7, redundant 2
Fitness: max 0(58), min 0(58), ave 0
Test execution time: sum 3196 ms, max 129 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 03:27:05 [main] [INFO]  KGenProgMain - entered the era of 179th generation.
2023-08-02 03:27:24 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 8 minutes 49 seconds
Variants: generated 100, build-succeeded 53, build-failed 22, syntax-invalid 20, redundant 5
Fitness: max 0(53), min 0(53), ave 0
Test execution time: sum 2826 ms, max 67 ms, min 48 ms
----------------------------------------------------------------

2023-08-02 03:27:24 [main] [INFO]  KGenProgMain - entered the era of 180th generation.
2023-08-02 03:27:45 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 9 minutes 11 seconds
Variants: generated 100, build-succeeded 65, build-failed 26, syntax-invalid 7, redundant 2
Fitness: max 1(1), min 0(64), ave 0.015
Test execution time: sum 3649 ms, max 117 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 03:27:45 [main] [INFO]  KGenProgMain - entered the era of 181st generation.
2023-08-02 03:28:06 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 9 minutes 31 seconds
Variants: generated 100, build-succeeded 63, build-failed 24, syntax-invalid 6, redundant 7
Fitness: max 0(63), min 0(63), ave 0
Test execution time: sum 3297 ms, max 66 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 03:28:06 [main] [INFO]  KGenProgMain - entered the era of 182nd generation.
2023-08-02 03:28:28 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 9 minutes 53 seconds
Variants: generated 100, build-succeeded 57, build-failed 33, syntax-invalid 4, redundant 6
Fitness: max 0(57), min 0(57), ave 0
Test execution time: sum 3276 ms, max 123 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 03:28:28 [main] [INFO]  KGenProgMain - entered the era of 183rd generation.
2023-08-02 03:28:49 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 10 minutes 14 seconds
Variants: generated 100, build-succeeded 60, build-failed 31, syntax-invalid 8, redundant 1
Fitness: max 1(2), min 0(58), ave 0.033
Test execution time: sum 3138 ms, max 70 ms, min 48 ms
----------------------------------------------------------------

2023-08-02 03:28:49 [main] [INFO]  KGenProgMain - entered the era of 184th generation.
2023-08-02 03:29:11 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 10 minutes 36 seconds
Variants: generated 100, build-succeeded 57, build-failed 35, syntax-invalid 6, redundant 2
Fitness: max 0(57), min 0(57), ave 0
Test execution time: sum 3223 ms, max 113 ms, min 48 ms
----------------------------------------------------------------

2023-08-02 03:29:11 [main] [INFO]  KGenProgMain - entered the era of 185th generation.
2023-08-02 03:29:31 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 10 minutes 56 seconds
Variants: generated 100, build-succeeded 55, build-failed 30, syntax-invalid 12, redundant 3
Fitness: max 0(55), min 0(55), ave 0
Test execution time: sum 2862 ms, max 70 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 03:29:31 [main] [INFO]  KGenProgMain - entered the era of 186th generation.
2023-08-02 03:29:53 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 11 minutes 18 seconds
Variants: generated 100, build-succeeded 54, build-failed 33, syntax-invalid 11, redundant 2
Fitness: max 0(54), min 0(54), ave 0
Test execution time: sum 3127 ms, max 117 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 03:29:53 [main] [INFO]  KGenProgMain - entered the era of 187th generation.
2023-08-02 03:30:14 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 11 minutes 39 seconds
Variants: generated 100, build-succeeded 54, build-failed 35, syntax-invalid 9, redundant 2
Fitness: max 0(54), min 0(54), ave 0
Test execution time: sum 2859 ms, max 79 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 03:30:14 [main] [INFO]  KGenProgMain - entered the era of 188th generation.
2023-08-02 03:30:35 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 12 minutes 0 seconds
Variants: generated 100, build-succeeded 48, build-failed 34, syntax-invalid 15, redundant 3
Fitness: max 0(48), min 0(48), ave 0
Test execution time: sum 2718 ms, max 67 ms, min 51 ms
----------------------------------------------------------------

2023-08-02 03:30:35 [main] [INFO]  KGenProgMain - entered the era of 189th generation.
2023-08-02 03:30:56 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 12 minutes 21 seconds
Variants: generated 100, build-succeeded 57, build-failed 29, syntax-invalid 13, redundant 1
Fitness: max 1(3), min 0(54), ave 0.053
Test execution time: sum 3126 ms, max 114 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 03:30:56 [main] [INFO]  KGenProgMain - entered the era of 190th generation.
2023-08-02 03:31:17 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 12 minutes 42 seconds
Variants: generated 100, build-succeeded 61, build-failed 31, syntax-invalid 7, redundant 1
Fitness: max 0(61), min 0(61), ave 0
Test execution time: sum 3203 ms, max 66 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 03:31:17 [main] [INFO]  KGenProgMain - entered the era of 191st generation.
2023-08-02 03:31:39 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 13 minutes 4 seconds
Variants: generated 100, build-succeeded 54, build-failed 36, syntax-invalid 7, redundant 3
Fitness: max 1(2), min 0(52), ave 0.037
Test execution time: sum 3076 ms, max 200 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 03:31:39 [main] [INFO]  KGenProgMain - entered the era of 192nd generation.
2023-08-02 03:31:59 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 13 minutes 24 seconds
Variants: generated 100, build-succeeded 57, build-failed 27, syntax-invalid 15, redundant 1
Fitness: max 0(57), min 0(57), ave 0
Test execution time: sum 2995 ms, max 67 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 03:31:59 [main] [INFO]  KGenProgMain - entered the era of 193rd generation.
2023-08-02 03:32:21 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 13 minutes 46 seconds
Variants: generated 100, build-succeeded 55, build-failed 28, syntax-invalid 10, redundant 7
Fitness: max 1(1), min 0(54), ave 0.018
Test execution time: sum 3112 ms, max 112 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 03:32:21 [main] [INFO]  KGenProgMain - entered the era of 194th generation.
2023-08-02 03:32:42 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 14 minutes 7 seconds
Variants: generated 100, build-succeeded 56, build-failed 34, syntax-invalid 9, redundant 1
Fitness: max 0(56), min 0(56), ave 0
Test execution time: sum 2908 ms, max 72 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 03:32:42 [main] [INFO]  KGenProgMain - entered the era of 195th generation.
2023-08-02 03:33:04 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 14 minutes 29 seconds
Variants: generated 100, build-succeeded 64, build-failed 28, syntax-invalid 7, redundant 1
Fitness: max 0(64), min 0(64), ave 0
Test execution time: sum 3664 ms, max 124 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 03:33:04 [main] [INFO]  KGenProgMain - entered the era of 196th generation.
2023-08-02 03:33:26 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 14 minutes 51 seconds
Variants: generated 100, build-succeeded 64, build-failed 28, syntax-invalid 4, redundant 4
Fitness: max 0(64), min 0(64), ave 0
Test execution time: sum 3393 ms, max 79 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 03:33:26 [main] [INFO]  KGenProgMain - entered the era of 197th generation.
2023-08-02 03:33:48 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 15 minutes 13 seconds
Variants: generated 100, build-succeeded 60, build-failed 26, syntax-invalid 8, redundant 6
Fitness: max 1(1), min 0(59), ave 0.017
Test execution time: sum 3471 ms, max 181 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 03:33:48 [main] [INFO]  KGenProgMain - entered the era of 198th generation.
2023-08-02 03:34:09 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 15 minutes 34 seconds
Variants: generated 100, build-succeeded 55, build-failed 34, syntax-invalid 7, redundant 4
Fitness: max 0(55), min 0(55), ave 0
Test execution time: sum 2912 ms, max 72 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 03:34:09 [main] [INFO]  KGenProgMain - entered the era of 199th generation.
2023-08-02 03:34:31 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 15 minutes 56 seconds
Variants: generated 100, build-succeeded 57, build-failed 29, syntax-invalid 13, redundant 1
Fitness: max 0(57), min 0(57), ave 0
Test execution time: sum 3290 ms, max 109 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 03:34:31 [main] [INFO]  KGenProgMain - entered the era of 200th generation.
2023-08-02 03:34:51 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 16 minutes 16 seconds
Variants: generated 100, build-succeeded 57, build-failed 28, syntax-invalid 13, redundant 2
Fitness: max 0(57), min 0(57), ave 0
Test execution time: sum 3006 ms, max 67 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 03:34:51 [main] [INFO]  KGenProgMain - entered the era of 201st generation.
2023-08-02 03:35:14 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 16 minutes 39 seconds
Variants: generated 100, build-succeeded 62, build-failed 27, syntax-invalid 8, redundant 3
Fitness: max 0(62), min 0(62), ave 0
Test execution time: sum 3535 ms, max 118 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 03:35:14 [main] [INFO]  KGenProgMain - entered the era of 202nd generation.
2023-08-02 03:35:34 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 16 minutes 59 seconds
Variants: generated 100, build-succeeded 48, build-failed 30, syntax-invalid 20, redundant 2
Fitness: max 0(48), min 0(48), ave 0
Test execution time: sum 2536 ms, max 74 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 03:35:34 [main] [INFO]  KGenProgMain - entered the era of 203rd generation.
2023-08-02 03:35:56 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 17 minutes 21 seconds
Variants: generated 100, build-succeeded 64, build-failed 23, syntax-invalid 6, redundant 7
Fitness: max 0(64), min 0(64), ave 0
Test execution time: sum 3520 ms, max 72 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 03:35:56 [main] [INFO]  KGenProgMain - entered the era of 204th generation.
2023-08-02 03:36:19 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 17 minutes 44 seconds
Variants: generated 100, build-succeeded 65, build-failed 25, syntax-invalid 9, redundant 1
Fitness: max 1(1), min 0(64), ave 0.015
Test execution time: sum 3456 ms, max 117 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 03:36:19 [main] [INFO]  KGenProgMain - entered the era of 205th generation.
2023-08-02 03:36:41 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 18 minutes 6 seconds
Variants: generated 100, build-succeeded 61, build-failed 25, syntax-invalid 6, redundant 8
Fitness: max 0(61), min 0(61), ave 0
Test execution time: sum 3222 ms, max 62 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 03:36:41 [main] [INFO]  KGenProgMain - entered the era of 206th generation.
2023-08-02 03:37:03 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 18 minutes 28 seconds
Variants: generated 100, build-succeeded 57, build-failed 31, syntax-invalid 8, redundant 4
Fitness: max 0(57), min 0(57), ave 0
Test execution time: sum 3100 ms, max 115 ms, min 48 ms
----------------------------------------------------------------

2023-08-02 03:37:03 [main] [INFO]  KGenProgMain - entered the era of 207th generation.
2023-08-02 03:37:25 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 18 minutes 50 seconds
Variants: generated 100, build-succeeded 61, build-failed 24, syntax-invalid 7, redundant 8
Fitness: max 0(61), min 0(61), ave 0
Test execution time: sum 3182 ms, max 74 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 03:37:25 [main] [INFO]  KGenProgMain - entered the era of 208th generation.
2023-08-02 03:37:47 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 19 minutes 12 seconds
Variants: generated 100, build-succeeded 59, build-failed 30, syntax-invalid 8, redundant 3
Fitness: max 1(1), min 0(58), ave 0.017
Test execution time: sum 3332 ms, max 102 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 03:37:47 [main] [INFO]  KGenProgMain - entered the era of 209th generation.
2023-08-02 03:38:09 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 19 minutes 34 seconds
Variants: generated 100, build-succeeded 60, build-failed 27, syntax-invalid 7, redundant 6
Fitness: max 0(60), min 0(60), ave 0
Test execution time: sum 3214 ms, max 71 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 03:38:09 [main] [INFO]  KGenProgMain - entered the era of 210th generation.
2023-08-02 03:38:32 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 19 minutes 57 seconds
Variants: generated 100, build-succeeded 59, build-failed 28, syntax-invalid 8, redundant 5
Fitness: max 0(59), min 0(59), ave 0
Test execution time: sum 3340 ms, max 122 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 03:38:32 [main] [INFO]  KGenProgMain - entered the era of 211th generation.
2023-08-02 03:38:55 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 20 minutes 20 seconds
Variants: generated 100, build-succeeded 63, build-failed 32, syntax-invalid 1, redundant 4
Fitness: max 0(63), min 0(63), ave 0
Test execution time: sum 3343 ms, max 65 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 03:38:55 [main] [INFO]  KGenProgMain - entered the era of 212th generation.
2023-08-02 03:39:19 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 20 minutes 44 seconds
Variants: generated 100, build-succeeded 66, build-failed 24, syntax-invalid 4, redundant 6
Fitness: max 1(1), min 0(65), ave 0.015
Test execution time: sum 3659 ms, max 122 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 03:39:19 [main] [INFO]  KGenProgMain - entered the era of 213th generation.
2023-08-02 03:39:41 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 21 minutes 6 seconds
Variants: generated 100, build-succeeded 61, build-failed 24, syntax-invalid 11, redundant 4
Fitness: max 0(61), min 0(61), ave 0
Test execution time: sum 3253 ms, max 68 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 03:39:41 [main] [INFO]  KGenProgMain - entered the era of 214th generation.
2023-08-02 03:40:04 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 21 minutes 29 seconds
Variants: generated 100, build-succeeded 51, build-failed 32, syntax-invalid 12, redundant 5
Fitness: max 0(51), min 0(51), ave 0
Test execution time: sum 2885 ms, max 117 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 03:40:04 [main] [INFO]  KGenProgMain - entered the era of 215th generation.
2023-08-02 03:40:25 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 21 minutes 50 seconds
Variants: generated 100, build-succeeded 44, build-failed 41, syntax-invalid 14, redundant 1
Fitness: max 0(44), min 0(44), ave 0
Test execution time: sum 2332 ms, max 63 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 03:40:25 [main] [INFO]  KGenProgMain - entered the era of 216th generation.
2023-08-02 03:40:48 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 22 minutes 13 seconds
Variants: generated 100, build-succeeded 58, build-failed 28, syntax-invalid 11, redundant 3
Fitness: max 0(58), min 0(58), ave 0
Test execution time: sum 3294 ms, max 117 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 03:40:48 [main] [INFO]  KGenProgMain - entered the era of 217th generation.
2023-08-02 03:41:10 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 22 minutes 36 seconds
Variants: generated 100, build-succeeded 63, build-failed 22, syntax-invalid 13, redundant 2
Fitness: max 0(63), min 0(63), ave 0
Test execution time: sum 3393 ms, max 70 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 03:41:10 [main] [INFO]  KGenProgMain - entered the era of 218th generation.
2023-08-02 03:41:34 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 22 minutes 59 seconds
Variants: generated 100, build-succeeded 56, build-failed 32, syntax-invalid 10, redundant 2
Fitness: max 0(56), min 0(56), ave 0
Test execution time: sum 3238 ms, max 122 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 03:41:34 [main] [INFO]  KGenProgMain - entered the era of 219th generation.
2023-08-02 03:41:57 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 23 minutes 22 seconds
Variants: generated 100, build-succeeded 63, build-failed 26, syntax-invalid 4, redundant 7
Fitness: max 1(1), min 0(62), ave 0.016
Test execution time: sum 3311 ms, max 64 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 03:41:57 [main] [INFO]  KGenProgMain - entered the era of 220th generation.
2023-08-02 03:42:21 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 23 minutes 46 seconds
Variants: generated 100, build-succeeded 66, build-failed 26, syntax-invalid 4, redundant 4
Fitness: max 0(66), min 0(66), ave 0
Test execution time: sum 3674 ms, max 101 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 03:42:21 [main] [INFO]  KGenProgMain - entered the era of 221st generation.
2023-08-02 03:42:44 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 24 minutes 9 seconds
Variants: generated 100, build-succeeded 59, build-failed 26, syntax-invalid 10, redundant 5
Fitness: max 0(59), min 0(59), ave 0
Test execution time: sum 3109 ms, max 68 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 03:42:44 [main] [INFO]  KGenProgMain - entered the era of 222nd generation.
2023-08-02 03:43:08 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 24 minutes 33 seconds
Variants: generated 100, build-succeeded 56, build-failed 29, syntax-invalid 9, redundant 6
Fitness: max 0(56), min 0(56), ave 0
Test execution time: sum 3164 ms, max 188 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 03:43:08 [main] [INFO]  KGenProgMain - entered the era of 223rd generation.
2023-08-02 03:43:31 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 24 minutes 56 seconds
Variants: generated 100, build-succeeded 61, build-failed 27, syntax-invalid 8, redundant 4
Fitness: max 0(61), min 0(61), ave 0
Test execution time: sum 3212 ms, max 69 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 03:43:31 [main] [INFO]  KGenProgMain - entered the era of 224th generation.
2023-08-02 03:43:55 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 25 minutes 20 seconds
Variants: generated 100, build-succeeded 54, build-failed 32, syntax-invalid 12, redundant 2
Fitness: max 0(54), min 0(54), ave 0
Test execution time: sum 3071 ms, max 116 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 03:43:55 [main] [INFO]  KGenProgMain - entered the era of 225th generation.
2023-08-02 03:44:19 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 25 minutes 44 seconds
Variants: generated 100, build-succeeded 68, build-failed 23, syntax-invalid 7, redundant 2
Fitness: max 1(1), min 0(67), ave 0.015
Test execution time: sum 3600 ms, max 65 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 03:44:19 [main] [INFO]  KGenProgMain - entered the era of 226th generation.
2023-08-02 03:44:44 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 26 minutes 9 seconds
Variants: generated 100, build-succeeded 64, build-failed 28, syntax-invalid 8, redundant 0
Fitness: max 0(64), min 0(64), ave 0
Test execution time: sum 3635 ms, max 192 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 03:44:44 [main] [INFO]  KGenProgMain - entered the era of 227th generation.
2023-08-02 03:45:06 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 26 minutes 32 seconds
Variants: generated 100, build-succeeded 53, build-failed 32, syntax-invalid 12, redundant 3
Fitness: max 0(53), min 0(53), ave 0
Test execution time: sum 2847 ms, max 72 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 03:45:06 [main] [INFO]  KGenProgMain - entered the era of 228th generation.
2023-08-02 03:45:31 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 26 minutes 56 seconds
Variants: generated 100, build-succeeded 60, build-failed 30, syntax-invalid 7, redundant 3
Fitness: max 0(60), min 0(60), ave 0
Test execution time: sum 3368 ms, max 114 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 03:45:31 [main] [INFO]  KGenProgMain - entered the era of 229th generation.
2023-08-02 03:45:52 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 27 minutes 17 seconds
Variants: generated 100, build-succeeded 44, build-failed 31, syntax-invalid 18, redundant 7
Fitness: max 1(2), min 0(42), ave 0.045
Test execution time: sum 2314 ms, max 68 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 03:45:52 [main] [INFO]  KGenProgMain - entered the era of 230th generation.
2023-08-02 03:46:15 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 27 minutes 40 seconds
Variants: generated 100, build-succeeded 54, build-failed 26, syntax-invalid 14, redundant 6
Fitness: max 0(54), min 0(54), ave 0
Test execution time: sum 3112 ms, max 117 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 03:46:15 [main] [INFO]  KGenProgMain - entered the era of 231st generation.
2023-08-02 03:46:37 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 28 minutes 2 seconds
Variants: generated 100, build-succeeded 49, build-failed 29, syntax-invalid 18, redundant 4
Fitness: max 0(49), min 0(49), ave 0
Test execution time: sum 2521 ms, max 65 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 03:46:37 [main] [INFO]  KGenProgMain - entered the era of 232nd generation.
2023-08-02 03:47:02 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 28 minutes 27 seconds
Variants: generated 100, build-succeeded 58, build-failed 31, syntax-invalid 10, redundant 1
Fitness: max 0(58), min 0(58), ave 0
Test execution time: sum 3362 ms, max 123 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 03:47:02 [main] [INFO]  KGenProgMain - entered the era of 233rd generation.
2023-08-02 03:47:26 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 28 minutes 51 seconds
Variants: generated 100, build-succeeded 58, build-failed 30, syntax-invalid 10, redundant 2
Fitness: max 0(58), min 0(58), ave 0
Test execution time: sum 3142 ms, max 72 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 03:47:26 [main] [INFO]  KGenProgMain - entered the era of 234th generation.
2023-08-02 03:47:48 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 29 minutes 14 seconds
Variants: generated 100, build-succeeded 45, build-failed 29, syntax-invalid 20, redundant 6
Fitness: max 0(45), min 0(45), ave 0
Test execution time: sum 2568 ms, max 67 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 03:47:48 [main] [INFO]  KGenProgMain - entered the era of 235th generation.
2023-08-02 03:48:14 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 29 minutes 39 seconds
Variants: generated 100, build-succeeded 56, build-failed 27, syntax-invalid 14, redundant 3
Fitness: max 0(56), min 0(56), ave 0
Test execution time: sum 3124 ms, max 119 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 03:48:14 [main] [INFO]  KGenProgMain - entered the era of 236th generation.
2023-08-02 03:48:37 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 30 minutes 2 seconds
Variants: generated 100, build-succeeded 46, build-failed 29, syntax-invalid 21, redundant 4
Fitness: max 0(46), min 0(46), ave 0
Test execution time: sum 2457 ms, max 68 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 03:48:37 [main] [INFO]  KGenProgMain - entered the era of 237th generation.
2023-08-02 03:49:02 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 30 minutes 27 seconds
Variants: generated 100, build-succeeded 54, build-failed 25, syntax-invalid 16, redundant 5
Fitness: max 1(1), min 0(53), ave 0.019
Test execution time: sum 3109 ms, max 119 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 03:49:02 [main] [INFO]  KGenProgMain - entered the era of 238th generation.
2023-08-02 03:49:23 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 30 minutes 48 seconds
Variants: generated 100, build-succeeded 42, build-failed 26, syntax-invalid 26, redundant 6
Fitness: max 0(42), min 0(42), ave 0
Test execution time: sum 2288 ms, max 70 ms, min 51 ms
----------------------------------------------------------------

2023-08-02 03:49:23 [main] [INFO]  KGenProgMain - entered the era of 239th generation.
2023-08-02 03:49:45 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 31 minutes 10 seconds
Variants: generated 100, build-succeeded 43, build-failed 34, syntax-invalid 20, redundant 3
Fitness: max 0(43), min 0(43), ave 0
Test execution time: sum 2362 ms, max 66 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 03:49:45 [main] [INFO]  KGenProgMain - entered the era of 240th generation.
2023-08-02 03:50:11 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 31 minutes 36 seconds
Variants: generated 100, build-succeeded 57, build-failed 31, syntax-invalid 11, redundant 1
Fitness: max 0(57), min 0(57), ave 0
Test execution time: sum 3143 ms, max 190 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 03:50:11 [main] [INFO]  KGenProgMain - entered the era of 241st generation.
2023-08-02 03:50:35 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 32 minutes 1 seconds
Variants: generated 100, build-succeeded 56, build-failed 28, syntax-invalid 12, redundant 4
Fitness: max 1(1), min 0(55), ave 0.018
Test execution time: sum 3001 ms, max 75 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 03:50:35 [main] [INFO]  KGenProgMain - entered the era of 242nd generation.
2023-08-02 03:51:01 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 32 minutes 26 seconds
Variants: generated 100, build-succeeded 56, build-failed 31, syntax-invalid 10, redundant 3
Fitness: max 0(56), min 0(56), ave 0
Test execution time: sum 3124 ms, max 125 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 03:51:01 [main] [INFO]  KGenProgMain - entered the era of 243rd generation.
2023-08-02 03:51:26 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 32 minutes 51 seconds
Variants: generated 100, build-succeeded 59, build-failed 28, syntax-invalid 9, redundant 4
Fitness: max 1(1), min 0(58), ave 0.017
Test execution time: sum 3210 ms, max 79 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 03:51:26 [main] [INFO]  KGenProgMain - entered the era of 244th generation.
2023-08-02 03:51:51 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 33 minutes 16 seconds
Variants: generated 100, build-succeeded 58, build-failed 25, syntax-invalid 13, redundant 4
Fitness: max 0(58), min 0(58), ave 0
Test execution time: sum 3311 ms, max 116 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 03:51:51 [main] [INFO]  KGenProgMain - entered the era of 245th generation.
2023-08-02 03:52:15 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 33 minutes 40 seconds
Variants: generated 100, build-succeeded 53, build-failed 35, syntax-invalid 9, redundant 3
Fitness: max 0(53), min 0(53), ave 0
Test execution time: sum 2828 ms, max 64 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 03:52:15 [main] [INFO]  KGenProgMain - entered the era of 246th generation.
2023-08-02 03:52:42 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 34 minutes 7 seconds
Variants: generated 100, build-succeeded 61, build-failed 27, syntax-invalid 8, redundant 4
Fitness: max 0(61), min 0(61), ave 0
Test execution time: sum 3440 ms, max 112 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 03:52:42 [main] [INFO]  KGenProgMain - entered the era of 247th generation.
2023-08-02 03:53:07 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 34 minutes 32 seconds
Variants: generated 100, build-succeeded 62, build-failed 31, syntax-invalid 4, redundant 3
Fitness: max 0(62), min 0(62), ave 0
Test execution time: sum 3299 ms, max 79 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 03:53:07 [main] [INFO]  KGenProgMain - entered the era of 248th generation.
2023-08-02 03:53:33 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 34 minutes 58 seconds
Variants: generated 100, build-succeeded 58, build-failed 32, syntax-invalid 8, redundant 2
Fitness: max 0(58), min 0(58), ave 0
Test execution time: sum 3291 ms, max 113 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 03:53:33 [main] [INFO]  KGenProgMain - entered the era of 249th generation.
2023-08-02 03:53:58 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 35 minutes 23 seconds
Variants: generated 100, build-succeeded 66, build-failed 18, syntax-invalid 9, redundant 7
Fitness: max 0(66), min 0(66), ave 0
Test execution time: sum 3519 ms, max 68 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 03:53:58 [main] [INFO]  KGenProgMain - entered the era of 250th generation.
2023-08-02 03:54:25 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 35 minutes 50 seconds
Variants: generated 100, build-succeeded 58, build-failed 30, syntax-invalid 9, redundant 3
Fitness: max 0(58), min 0(58), ave 0
Test execution time: sum 3287 ms, max 125 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 03:54:25 [main] [INFO]  KGenProgMain - entered the era of 251st generation.
2023-08-02 03:54:50 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 36 minutes 15 seconds
Variants: generated 100, build-succeeded 54, build-failed 27, syntax-invalid 13, redundant 6
Fitness: max 0(54), min 0(54), ave 0
Test execution time: sum 2865 ms, max 68 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 03:54:50 [main] [INFO]  KGenProgMain - entered the era of 252nd generation.
2023-08-02 03:55:15 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 36 minutes 40 seconds
Variants: generated 100, build-succeeded 54, build-failed 30, syntax-invalid 8, redundant 8
Fitness: max 0(54), min 0(54), ave 0
Test execution time: sum 3108 ms, max 108 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 03:55:15 [main] [INFO]  KGenProgMain - entered the era of 253rd generation.
2023-08-02 03:55:39 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 37 minutes 4 seconds
Variants: generated 100, build-succeeded 55, build-failed 25, syntax-invalid 12, redundant 8
Fitness: max 0(55), min 0(55), ave 0
Test execution time: sum 2993 ms, max 70 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 03:55:39 [main] [INFO]  KGenProgMain - entered the era of 254th generation.
2023-08-02 03:56:05 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 37 minutes 30 seconds
Variants: generated 100, build-succeeded 49, build-failed 28, syntax-invalid 17, redundant 6
Fitness: max 0(49), min 0(49), ave 0
Test execution time: sum 2831 ms, max 110 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 03:56:05 [main] [INFO]  KGenProgMain - entered the era of 255th generation.
2023-08-02 03:56:30 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 37 minutes 55 seconds
Variants: generated 100, build-succeeded 58, build-failed 29, syntax-invalid 8, redundant 5
Fitness: max 1(1), min 0(57), ave 0.017
Test execution time: sum 3125 ms, max 75 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 03:56:30 [main] [INFO]  KGenProgMain - entered the era of 256th generation.
2023-08-02 03:56:55 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 38 minutes 20 seconds
Variants: generated 100, build-succeeded 55, build-failed 23, syntax-invalid 16, redundant 6
Fitness: max 0(55), min 0(55), ave 0
Test execution time: sum 3115 ms, max 125 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 03:56:55 [main] [INFO]  KGenProgMain - entered the era of 257th generation.
2023-08-02 03:57:20 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 38 minutes 45 seconds
Variants: generated 100, build-succeeded 55, build-failed 28, syntax-invalid 13, redundant 4
Fitness: max 0(55), min 0(55), ave 0
Test execution time: sum 2897 ms, max 66 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 03:57:20 [main] [INFO]  KGenProgMain - entered the era of 258th generation.
2023-08-02 03:57:47 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 39 minutes 12 seconds
Variants: generated 100, build-succeeded 63, build-failed 23, syntax-invalid 8, redundant 6
Fitness: max 0(63), min 0(63), ave 0
Test execution time: sum 3532 ms, max 109 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 03:57:47 [main] [INFO]  KGenProgMain - entered the era of 259th generation.
2023-08-02 03:58:11 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 39 minutes 36 seconds
Variants: generated 100, build-succeeded 42, build-failed 32, syntax-invalid 19, redundant 7
Fitness: max 0(42), min 0(42), ave 0
Test execution time: sum 2260 ms, max 69 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 03:58:11 [main] [INFO]  KGenProgMain - entered the era of 260th generation.
2023-08-02 03:58:35 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 40 minutes 0 seconds
Variants: generated 100, build-succeeded 46, build-failed 30, syntax-invalid 16, redundant 8
Fitness: max 0(46), min 0(46), ave 0
Test execution time: sum 2484 ms, max 66 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 03:58:35 [main] [INFO]  KGenProgMain - entered the era of 261st generation.
2023-08-02 03:59:00 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 40 minutes 25 seconds
Variants: generated 100, build-succeeded 50, build-failed 32, syntax-invalid 15, redundant 3
Fitness: max 0(50), min 0(50), ave 0
Test execution time: sum 2754 ms, max 123 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 03:59:00 [main] [INFO]  KGenProgMain - entered the era of 262nd generation.
2023-08-02 03:59:24 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 40 minutes 49 seconds
Variants: generated 100, build-succeeded 49, build-failed 24, syntax-invalid 18, redundant 9
Fitness: max 0(49), min 0(49), ave 0
Test execution time: sum 2604 ms, max 71 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 03:59:24 [main] [INFO]  KGenProgMain - entered the era of 263rd generation.
2023-08-02 03:59:50 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 41 minutes 15 seconds
Variants: generated 100, build-succeeded 56, build-failed 26, syntax-invalid 10, redundant 8
Fitness: max 0(56), min 0(56), ave 0
Test execution time: sum 3216 ms, max 115 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 03:59:50 [main] [INFO]  KGenProgMain - entered the era of 264th generation.
2023-08-02 04:00:15 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 41 minutes 40 seconds
Variants: generated 100, build-succeeded 56, build-failed 30, syntax-invalid 12, redundant 2
Fitness: max 0(56), min 0(56), ave 0
Test execution time: sum 2998 ms, max 65 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 04:00:15 [main] [INFO]  KGenProgMain - entered the era of 265th generation.
2023-08-02 04:00:43 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 42 minutes 8 seconds
Variants: generated 100, build-succeeded 57, build-failed 26, syntax-invalid 13, redundant 4
Fitness: max 1(1), min 0(56), ave 0.018
Test execution time: sum 3269 ms, max 108 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 04:00:43 [main] [INFO]  KGenProgMain - entered the era of 266th generation.
2023-08-02 04:01:09 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 42 minutes 34 seconds
Variants: generated 100, build-succeeded 58, build-failed 30, syntax-invalid 6, redundant 6
Fitness: max 0(58), min 0(58), ave 0
Test execution time: sum 3084 ms, max 70 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 04:01:09 [main] [INFO]  KGenProgMain - entered the era of 267th generation.
2023-08-02 04:01:37 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 43 minutes 3 seconds
Variants: generated 100, build-succeeded 57, build-failed 29, syntax-invalid 12, redundant 2
Fitness: max 0(57), min 0(57), ave 0
Test execution time: sum 3341 ms, max 128 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 04:01:37 [main] [INFO]  KGenProgMain - entered the era of 268th generation.
2023-08-02 04:02:05 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 43 minutes 30 seconds
Variants: generated 100, build-succeeded 64, build-failed 27, syntax-invalid 5, redundant 4
Fitness: max 0(64), min 0(64), ave 0
Test execution time: sum 3449 ms, max 70 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 04:02:05 [main] [INFO]  KGenProgMain - entered the era of 269th generation.
2023-08-02 04:02:34 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 43 minutes 59 seconds
Variants: generated 100, build-succeeded 61, build-failed 26, syntax-invalid 5, redundant 8
Fitness: max 0(61), min 0(61), ave 0
Test execution time: sum 3506 ms, max 114 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 04:02:34 [main] [INFO]  KGenProgMain - entered the era of 270th generation.
2023-08-02 04:03:01 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 44 minutes 26 seconds
Variants: generated 100, build-succeeded 61, build-failed 26, syntax-invalid 9, redundant 4
Fitness: max 1(1), min 0(60), ave 0.016
Test execution time: sum 3233 ms, max 69 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 04:03:01 [main] [INFO]  KGenProgMain - entered the era of 271st generation.
2023-08-02 04:03:30 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 44 minutes 55 seconds
Variants: generated 100, build-succeeded 53, build-failed 39, syntax-invalid 7, redundant 1
Fitness: max 0(53), min 0(53), ave 0
Test execution time: sum 3061 ms, max 124 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 04:03:30 [main] [INFO]  KGenProgMain - entered the era of 272nd generation.
2023-08-02 04:03:58 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 45 minutes 23 seconds
Variants: generated 100, build-succeeded 63, build-failed 27, syntax-invalid 5, redundant 5
Fitness: max 0(63), min 0(63), ave 0
Test execution time: sum 3369 ms, max 65 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 04:03:58 [main] [INFO]  KGenProgMain - entered the era of 273rd generation.
2023-08-02 04:04:26 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 45 minutes 52 seconds
Variants: generated 100, build-succeeded 59, build-failed 29, syntax-invalid 7, redundant 5
Fitness: max 0(59), min 0(59), ave 0
Test execution time: sum 3288 ms, max 108 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 04:04:27 [main] [INFO]  KGenProgMain - entered the era of 274th generation.
2023-08-02 04:04:54 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 46 minutes 19 seconds
Variants: generated 100, build-succeeded 60, build-failed 29, syntax-invalid 4, redundant 7
Fitness: max 0(60), min 0(60), ave 0
Test execution time: sum 3244 ms, max 69 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 04:04:54 [main] [INFO]  KGenProgMain - entered the era of 275th generation.
2023-08-02 04:05:24 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 46 minutes 49 seconds
Variants: generated 100, build-succeeded 65, build-failed 31, syntax-invalid 2, redundant 2
Fitness: max 0(65), min 0(65), ave 0
Test execution time: sum 3609 ms, max 122 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 04:05:24 [main] [INFO]  KGenProgMain - entered the era of 276th generation.
2023-08-02 04:05:52 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 47 minutes 17 seconds
Variants: generated 100, build-succeeded 60, build-failed 26, syntax-invalid 10, redundant 4
Fitness: max 0(60), min 0(60), ave 0
Test execution time: sum 3328 ms, max 68 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 04:05:52 [main] [INFO]  KGenProgMain - entered the era of 277th generation.
2023-08-02 04:06:21 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 47 minutes 46 seconds
Variants: generated 100, build-succeeded 54, build-failed 30, syntax-invalid 7, redundant 9
Fitness: max 0(54), min 0(54), ave 0
Test execution time: sum 3083 ms, max 126 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 04:06:21 [main] [INFO]  KGenProgMain - entered the era of 278th generation.
2023-08-02 04:06:48 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 48 minutes 13 seconds
Variants: generated 100, build-succeeded 50, build-failed 31, syntax-invalid 16, redundant 3
Fitness: max 0(50), min 0(50), ave 0
Test execution time: sum 2763 ms, max 102 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 04:06:48 [main] [INFO]  KGenProgMain - entered the era of 279th generation.
2023-08-02 04:07:16 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 48 minutes 41 seconds
Variants: generated 100, build-succeeded 52, build-failed 28, syntax-invalid 11, redundant 9
Fitness: max 0(52), min 0(52), ave 0
Test execution time: sum 3031 ms, max 194 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 04:07:16 [main] [INFO]  KGenProgMain - entered the era of 280th generation.
2023-08-02 04:07:43 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 49 minutes 8 seconds
Variants: generated 100, build-succeeded 57, build-failed 27, syntax-invalid 14, redundant 2
Fitness: max 0(57), min 0(57), ave 0
Test execution time: sum 3086 ms, max 70 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 04:07:43 [main] [INFO]  KGenProgMain - entered the era of 281st generation.
2023-08-02 04:08:13 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 49 minutes 38 seconds
Variants: generated 100, build-succeeded 57, build-failed 28, syntax-invalid 7, redundant 8
Fitness: max 0(57), min 0(57), ave 0
Test execution time: sum 3306 ms, max 106 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 04:08:13 [main] [INFO]  KGenProgMain - entered the era of 282nd generation.
2023-08-02 04:08:41 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 50 minutes 6 seconds
Variants: generated 100, build-succeeded 54, build-failed 35, syntax-invalid 10, redundant 1
Fitness: max 0(54), min 0(54), ave 0
Test execution time: sum 3034 ms, max 73 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 04:08:41 [main] [INFO]  KGenProgMain - entered the era of 283rd generation.
2023-08-02 04:09:10 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 50 minutes 36 seconds
Variants: generated 100, build-succeeded 55, build-failed 30, syntax-invalid 9, redundant 6
Fitness: max 0(55), min 0(55), ave 0
Test execution time: sum 3020 ms, max 110 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 04:09:10 [main] [INFO]  KGenProgMain - entered the era of 284th generation.
2023-08-02 04:09:40 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 51 minutes 5 seconds
Variants: generated 100, build-succeeded 61, build-failed 33, syntax-invalid 5, redundant 1
Fitness: max 0(61), min 0(61), ave 0
Test execution time: sum 3366 ms, max 68 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 04:09:40 [main] [INFO]  KGenProgMain - entered the era of 285th generation.
2023-08-02 04:10:09 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 51 minutes 34 seconds
Variants: generated 100, build-succeeded 60, build-failed 27, syntax-invalid 9, redundant 4
Fitness: max 0(60), min 0(60), ave 0
Test execution time: sum 3354 ms, max 124 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 04:10:09 [main] [INFO]  KGenProgMain - entered the era of 286th generation.
2023-08-02 04:10:38 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 52 minutes 3 seconds
Variants: generated 100, build-succeeded 55, build-failed 30, syntax-invalid 4, redundant 11
Fitness: max 0(55), min 0(55), ave 0
Test execution time: sum 2937 ms, max 68 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 04:10:38 [main] [INFO]  KGenProgMain - entered the era of 287th generation.
2023-08-02 04:11:06 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 52 minutes 31 seconds
Variants: generated 100, build-succeeded 53, build-failed 29, syntax-invalid 9, redundant 9
Fitness: max 0(53), min 0(53), ave 0
Test execution time: sum 2981 ms, max 189 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 04:11:06 [main] [INFO]  KGenProgMain - entered the era of 288th generation.
2023-08-02 04:11:35 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 53 minutes 0 seconds
Variants: generated 100, build-succeeded 60, build-failed 24, syntax-invalid 9, redundant 7
Fitness: max 0(60), min 0(60), ave 0
Test execution time: sum 3263 ms, max 65 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 04:11:35 [main] [INFO]  KGenProgMain - entered the era of 289th generation.
2023-08-02 04:12:04 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 53 minutes 29 seconds
Variants: generated 100, build-succeeded 53, build-failed 28, syntax-invalid 11, redundant 8
Fitness: max 0(53), min 0(53), ave 0
Test execution time: sum 3001 ms, max 115 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 04:12:04 [main] [INFO]  KGenProgMain - entered the era of 290th generation.
2023-08-02 04:12:31 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 53 minutes 56 seconds
Variants: generated 100, build-succeeded 52, build-failed 28, syntax-invalid 14, redundant 6
Fitness: max 0(52), min 0(52), ave 0
Test execution time: sum 2759 ms, max 68 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 04:12:31 [main] [INFO]  KGenProgMain - entered the era of 291st generation.
2023-08-02 04:12:59 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 54 minutes 24 seconds
Variants: generated 100, build-succeeded 51, build-failed 30, syntax-invalid 14, redundant 5
Fitness: max 0(51), min 0(51), ave 0
Test execution time: sum 2973 ms, max 118 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 04:12:59 [main] [INFO]  KGenProgMain - entered the era of 292nd generation.
2023-08-02 04:13:27 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 54 minutes 52 seconds
Variants: generated 100, build-succeeded 52, build-failed 32, syntax-invalid 13, redundant 3
Fitness: max 0(52), min 0(52), ave 0
Test execution time: sum 2821 ms, max 71 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 04:13:27 [main] [INFO]  KGenProgMain - entered the era of 293rd generation.
2023-08-02 04:13:56 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 55 minutes 21 seconds
Variants: generated 100, build-succeeded 47, build-failed 32, syntax-invalid 17, redundant 4
Fitness: max 1(2), min 0(45), ave 0.043
Test execution time: sum 2797 ms, max 119 ms, min 51 ms
----------------------------------------------------------------

2023-08-02 04:13:56 [main] [INFO]  KGenProgMain - entered the era of 294th generation.
2023-08-02 04:14:24 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 55 minutes 49 seconds
Variants: generated 100, build-succeeded 47, build-failed 29, syntax-invalid 21, redundant 3
Fitness: max 1(1), min 0(46), ave 0.021
Test execution time: sum 2632 ms, max 67 ms, min 51 ms
----------------------------------------------------------------

2023-08-02 04:14:24 [main] [INFO]  KGenProgMain - entered the era of 295th generation.
2023-08-02 04:14:53 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 56 minutes 18 seconds
Variants: generated 100, build-succeeded 56, build-failed 31, syntax-invalid 11, redundant 2
Fitness: max 0(56), min 0(56), ave 0
Test execution time: sum 3159 ms, max 132 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 04:14:53 [main] [INFO]  KGenProgMain - entered the era of 296th generation.
2023-08-02 04:15:22 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 56 minutes 47 seconds
Variants: generated 100, build-succeeded 59, build-failed 29, syntax-invalid 9, redundant 3
Fitness: max 0(59), min 0(59), ave 0
Test execution time: sum 3276 ms, max 69 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 04:15:22 [main] [INFO]  KGenProgMain - entered the era of 297th generation.
2023-08-02 04:15:53 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 57 minutes 18 seconds
Variants: generated 100, build-succeeded 62, build-failed 29, syntax-invalid 4, redundant 5
Fitness: max 0(62), min 0(62), ave 0
Test execution time: sum 3558 ms, max 128 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 04:15:53 [main] [INFO]  KGenProgMain - entered the era of 298th generation.
2023-08-02 04:16:23 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 57 minutes 48 seconds
Variants: generated 100, build-succeeded 61, build-failed 25, syntax-invalid 6, redundant 8
Fitness: max 0(61), min 0(61), ave 0
Test execution time: sum 3409 ms, max 69 ms, min 51 ms
----------------------------------------------------------------

2023-08-02 04:16:23 [main] [INFO]  KGenProgMain - entered the era of 299th generation.
2023-08-02 04:16:53 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 58 minutes 18 seconds
Variants: generated 100, build-succeeded 64, build-failed 27, syntax-invalid 4, redundant 5
Fitness: max 1(1), min 0(63), ave 0.016
Test execution time: sum 3576 ms, max 108 ms, min 51 ms
----------------------------------------------------------------

2023-08-02 04:16:53 [main] [INFO]  KGenProgMain - entered the era of 300th generation.
2023-08-02 04:17:22 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 58 minutes 47 seconds
Variants: generated 100, build-succeeded 56, build-failed 33, syntax-invalid 9, redundant 2
Fitness: max 0(56), min 0(56), ave 0
Test execution time: sum 3121 ms, max 71 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 04:17:22 [main] [INFO]  KGenProgMain - entered the era of 301st generation.
2023-08-02 04:17:53 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 59 minutes 18 seconds
Variants: generated 100, build-succeeded 61, build-failed 27, syntax-invalid 5, redundant 7
Fitness: max 0(61), min 0(61), ave 0
Test execution time: sum 3496 ms, max 183 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 04:17:53 [main] [INFO]  KGenProgMain - entered the era of 302nd generation.
2023-08-02 04:18:23 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 59 minutes 48 seconds
Variants: generated 100, build-succeeded 62, build-failed 28, syntax-invalid 6, redundant 4
Fitness: max 0(62), min 0(62), ave 0
Test execution time: sum 3360 ms, max 72 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 04:18:23 [main] [INFO]  KGenProgMain - entered the era of 303rd generation.
2023-08-02 04:18:55 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 20 seconds
Variants: generated 100, build-succeeded 62, build-failed 28, syntax-invalid 6, redundant 4
Fitness: max 0(62), min 0(62), ave 0
Test execution time: sum 3472 ms, max 132 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 04:18:55 [main] [INFO]  KGenProgMain - entered the era of 304th generation.
2023-08-02 04:19:26 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 51 seconds
Variants: generated 100, build-succeeded 59, build-failed 33, syntax-invalid 4, redundant 4
Fitness: max 0(59), min 0(59), ave 0
Test execution time: sum 3254 ms, max 66 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 04:19:26 [main] [INFO]  KGenProgMain - entered the era of 305th generation.
2023-08-02 04:19:57 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 1 minutes 22 seconds
Variants: generated 100, build-succeeded 58, build-failed 31, syntax-invalid 10, redundant 1
Fitness: max 0(58), min 0(58), ave 0
Test execution time: sum 3374 ms, max 119 ms, min 51 ms
----------------------------------------------------------------

2023-08-02 04:19:57 [main] [INFO]  KGenProgMain - entered the era of 306th generation.
2023-08-02 04:20:27 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 1 minutes 52 seconds
Variants: generated 100, build-succeeded 52, build-failed 36, syntax-invalid 6, redundant 6
Fitness: max 0(52), min 0(52), ave 0
Test execution time: sum 2860 ms, max 67 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 04:20:27 [main] [INFO]  KGenProgMain - entered the era of 307th generation.
2023-08-02 04:20:59 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 2 minutes 24 seconds
Variants: generated 100, build-succeeded 64, build-failed 25, syntax-invalid 6, redundant 5
Fitness: max 0(64), min 0(64), ave 0
Test execution time: sum 3637 ms, max 109 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 04:20:59 [main] [INFO]  KGenProgMain - entered the era of 308th generation.
2023-08-02 04:21:31 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 2 minutes 56 seconds
Variants: generated 100, build-succeeded 60, build-failed 28, syntax-invalid 7, redundant 5
Fitness: max 0(60), min 0(60), ave 0
Test execution time: sum 3311 ms, max 78 ms, min 51 ms
----------------------------------------------------------------

2023-08-02 04:21:31 [main] [INFO]  KGenProgMain - entered the era of 309th generation.
2023-08-02 04:22:03 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 3 minutes 28 seconds
Variants: generated 100, build-succeeded 61, build-failed 28, syntax-invalid 7, redundant 4
Fitness: max 0(61), min 0(61), ave 0
Test execution time: sum 3514 ms, max 118 ms, min 51 ms
----------------------------------------------------------------

2023-08-02 04:22:03 [main] [INFO]  KGenProgMain - entered the era of 310th generation.
2023-08-02 04:22:36 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 4 minutes 1 seconds
Variants: generated 100, build-succeeded 57, build-failed 33, syntax-invalid 6, redundant 4
Fitness: max 0(57), min 0(57), ave 0
Test execution time: sum 3079 ms, max 68 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 04:22:36 [main] [INFO]  KGenProgMain - entered the era of 311th generation.
2023-08-02 04:23:08 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 4 minutes 33 seconds
Variants: generated 100, build-succeeded 64, build-failed 29, syntax-invalid 3, redundant 4
Fitness: max 0(64), min 0(64), ave 0
Test execution time: sum 3605 ms, max 119 ms, min 51 ms
----------------------------------------------------------------

2023-08-02 04:23:08 [main] [INFO]  KGenProgMain - entered the era of 312th generation.
2023-08-02 04:23:40 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 5 minutes 5 seconds
Variants: generated 100, build-succeeded 56, build-failed 31, syntax-invalid 7, redundant 6
Fitness: max 0(56), min 0(56), ave 0
Test execution time: sum 3143 ms, max 70 ms, min 52 ms
----------------------------------------------------------------

2023-08-02 04:23:40 [main] [INFO]  KGenProgMain - entered the era of 313th generation.
2023-08-02 04:24:13 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 5 minutes 38 seconds
Variants: generated 100, build-succeeded 65, build-failed 25, syntax-invalid 7, redundant 3
Fitness: max 0(65), min 0(65), ave 0
Test execution time: sum 3659 ms, max 124 ms, min 51 ms
----------------------------------------------------------------

2023-08-02 04:24:13 [main] [INFO]  KGenProgMain - entered the era of 314th generation.
2023-08-02 04:24:44 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 6 minutes 9 seconds
Variants: generated 100, build-succeeded 59, build-failed 26, syntax-invalid 6, redundant 9
Fitness: max 0(59), min 0(59), ave 0
Test execution time: sum 3290 ms, max 67 ms, min 52 ms
----------------------------------------------------------------

2023-08-02 04:24:44 [main] [INFO]  KGenProgMain - entered the era of 315th generation.
2023-08-02 04:25:17 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 6 minutes 42 seconds
Variants: generated 100, build-succeeded 60, build-failed 29, syntax-invalid 4, redundant 7
Fitness: max 0(60), min 0(60), ave 0
Test execution time: sum 3434 ms, max 125 ms, min 51 ms
----------------------------------------------------------------

2023-08-02 04:25:17 [main] [INFO]  KGenProgMain - entered the era of 316th generation.
2023-08-02 04:25:49 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 7 minutes 14 seconds
Variants: generated 100, build-succeeded 55, build-failed 30, syntax-invalid 6, redundant 9
Fitness: max 0(55), min 0(55), ave 0
Test execution time: sum 3000 ms, max 70 ms, min 51 ms
----------------------------------------------------------------

2023-08-02 04:25:49 [main] [INFO]  KGenProgMain - entered the era of 317th generation.
2023-08-02 04:29:21 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 10 minutes 46 seconds
Variants: generated 100, build-succeeded 56, build-failed 28, syntax-invalid 8, redundant 8
Fitness: max 1(1), min 0(55), ave 0.018
Test execution time: sum 183250 ms, max 180072 ms, min 52 ms
----------------------------------------------------------------

2023-08-02 04:29:21 [main] [INFO]  KGenProgMain - entered the era of 318th generation.
2023-08-02 04:29:53 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 11 minutes 18 seconds
Variants: generated 100, build-succeeded 60, build-failed 29, syntax-invalid 7, redundant 4
Fitness: max 0(60), min 0(60), ave 0
Test execution time: sum 3444 ms, max 71 ms, min 53 ms
----------------------------------------------------------------

2023-08-02 04:29:53 [main] [INFO]  KGenProgMain - entered the era of 319th generation.
2023-08-02 04:30:27 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 11 minutes 52 seconds
Variants: generated 100, build-succeeded 64, build-failed 28, syntax-invalid 4, redundant 4
Fitness: max 1(2), min 0(62), ave 0.031
Test execution time: sum 3664 ms, max 106 ms, min 52 ms
----------------------------------------------------------------

2023-08-02 04:30:27 [main] [INFO]  KGenProgMain - entered the era of 320th generation.
2023-08-02 04:31:00 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 12 minutes 25 seconds
Variants: generated 100, build-succeeded 63, build-failed 27, syntax-invalid 7, redundant 3
Fitness: max 0(63), min 0(63), ave 0
Test execution time: sum 3481 ms, max 102 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 04:31:00 [main] [INFO]  KGenProgMain - entered the era of 321st generation.
2023-08-02 04:31:34 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 12 minutes 59 seconds
Variants: generated 100, build-succeeded 64, build-failed 25, syntax-invalid 4, redundant 7
Fitness: max 0(64), min 0(64), ave 0
Test execution time: sum 3656 ms, max 125 ms, min 51 ms
----------------------------------------------------------------

2023-08-02 04:31:34 [main] [INFO]  KGenProgMain - entered the era of 322nd generation.
2023-08-02 04:32:08 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 13 minutes 33 seconds
Variants: generated 100, build-succeeded 63, build-failed 27, syntax-invalid 6, redundant 4
Fitness: max 0(63), min 0(63), ave 0
Test execution time: sum 3594 ms, max 71 ms, min 51 ms
----------------------------------------------------------------

2023-08-02 04:32:08 [main] [INFO]  KGenProgMain - entered the era of 323rd generation.
2023-08-02 04:32:41 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 14 minutes 6 seconds
Variants: generated 100, build-succeeded 56, build-failed 29, syntax-invalid 13, redundant 2
Fitness: max 0(56), min 0(56), ave 0
Test execution time: sum 3170 ms, max 123 ms, min 51 ms
----------------------------------------------------------------

2023-08-02 04:32:41 [main] [INFO]  KGenProgMain - entered the era of 324th generation.
2023-08-02 04:33:12 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 14 minutes 37 seconds
Variants: generated 100, build-succeeded 55, build-failed 31, syntax-invalid 12, redundant 2
Fitness: max 0(55), min 0(55), ave 0
Test execution time: sum 3074 ms, max 67 ms, min 52 ms
----------------------------------------------------------------

2023-08-02 04:33:12 [main] [INFO]  KGenProgMain - entered the era of 325th generation.
2023-08-02 04:33:44 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 15 minutes 9 seconds
Variants: generated 100, build-succeeded 58, build-failed 28, syntax-invalid 9, redundant 5
Fitness: max 0(58), min 0(58), ave 0
Test execution time: sum 3282 ms, max 113 ms, min 51 ms
----------------------------------------------------------------

2023-08-02 04:33:44 [main] [INFO]  KGenProgMain - entered the era of 326th generation.
2023-08-02 04:34:17 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 15 minutes 42 seconds
Variants: generated 100, build-succeeded 63, build-failed 22, syntax-invalid 8, redundant 7
Fitness: max 0(63), min 0(63), ave 0
Test execution time: sum 3597 ms, max 68 ms, min 51 ms
----------------------------------------------------------------

2023-08-02 04:34:17 [main] [INFO]  KGenProgMain - entered the era of 327th generation.
2023-08-02 04:34:50 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 16 minutes 15 seconds
Variants: generated 100, build-succeeded 57, build-failed 28, syntax-invalid 6, redundant 9
Fitness: max 0(57), min 0(57), ave 0
Test execution time: sum 3305 ms, max 125 ms, min 51 ms
----------------------------------------------------------------

2023-08-02 04:34:50 [main] [INFO]  KGenProgMain - entered the era of 328th generation.
2023-08-02 04:35:22 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 16 minutes 47 seconds
Variants: generated 100, build-succeeded 54, build-failed 28, syntax-invalid 11, redundant 7
Fitness: max 0(54), min 0(54), ave 0
Test execution time: sum 3105 ms, max 72 ms, min 51 ms
----------------------------------------------------------------

2023-08-02 04:35:22 [main] [INFO]  KGenProgMain - entered the era of 329th generation.
2023-08-02 04:35:56 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 17 minutes 21 seconds
Variants: generated 100, build-succeeded 53, build-failed 30, syntax-invalid 12, redundant 5
Fitness: max 1(1), min 0(52), ave 0.019
Test execution time: sum 3020 ms, max 107 ms, min 51 ms
----------------------------------------------------------------

2023-08-02 04:35:56 [main] [INFO]  KGenProgMain - entered the era of 330th generation.
2023-08-02 04:36:11 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 17 minutes 36 seconds
Variants: generated 45, build-succeeded 15, build-failed 26, syntax-invalid 1, redundant 3
Fitness: max 1(1), min 0(14), ave 0.067
Test execution time: sum 862 ms, max 69 ms, min 52 ms
----------------------------------------------------------------

2023-08-02 04:36:11 [main] [INFO]  KGenProgMain - GA stopped
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v319)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,7 +94,6 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -242,7 +241,7 @@
 
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
-      interpolatedTime = time;
+      previousTime = currentTime;
       dirtyState       = true;
   }
 
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v319)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v319)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v319)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v319)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,15 +223,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v730)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -242,7 +242,7 @@
 
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
-      interpolatedTime = time;
+      previousTime = currentTime;
       dirtyState       = true;
   }
 
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v730)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v730)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -214,7 +214,7 @@
                     };
                     final BrentSolver solver = new BrentSolver();
                     solver.setAbsoluteAccuracy(convergence);
-                    solver.setMaximalIterationCount(maxIterationCount);
+                    interpolator.setInterpolatedTime(t0);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
@@ -282,14 +282,12 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
             // force the sign to its value "just after the event"
             previousEventTime = t;
             g0Positive        = increasing;
-            nextAction        = handler.eventOccurred(t, y, !(increasing ^ forward));
         } else {
             g0Positive = g0 >= 0;
             nextAction = EventHandler.CONTINUE;
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v730)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v730)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v740)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -242,7 +242,7 @@
 
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
-      interpolatedTime = time;
+      previousTime = currentTime;
       dirtyState       = true;
   }
 
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v740)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v740)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -213,8 +213,7 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
-                    solver.setMaximalIterationCount(maxIterationCount);
+                    interpolator.setInterpolatedTime(t0);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
@@ -289,7 +288,6 @@
             // force the sign to its value "just after the event"
             previousEventTime = t;
             g0Positive        = increasing;
-            nextAction        = handler.eventOccurred(t, y, !(increasing ^ forward));
         } else {
             g0Positive = g0 >= 0;
             nextAction = EventHandler.CONTINUE;
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v740)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v740)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v801)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,9 +94,7 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
   }
 
   /** Simple constructor.
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v801)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v801)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -151,6 +151,7 @@
         t0 = tStart;
         g0 = handler.g(tStart, yStart);
         g0Positive = g0 >= 0;
+		pendingEventTime = Double.NaN;
     }
 
     /** Evaluate the impact of the proposed step on the event handler.
@@ -213,7 +214,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
@@ -286,8 +286,6 @@
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
-            // force the sign to its value "just after the event"
-            previousEventTime = t;
             g0Positive        = increasing;
             nextAction        = handler.eventOccurred(t, y, !(increasing ^ forward));
         } else {
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v801)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v801)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v809)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,9 +94,7 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
   }
 
   /** Simple constructor.
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v809)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v809)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -151,6 +151,7 @@
         t0 = tStart;
         g0 = handler.g(tStart, yStart);
         g0Positive = g0 >= 0;
+		pendingEventTime = Double.NaN;
     }
 
     /** Evaluate the impact of the proposed step on the event handler.
@@ -282,12 +283,9 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
-            // force the sign to its value "just after the event"
-            previousEventTime = t;
             g0Positive        = increasing;
             nextAction        = handler.eventOccurred(t, y, !(increasing ^ forward));
         } else {
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v809)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v809)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v929)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -242,7 +242,7 @@
 
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
-      interpolatedTime = time;
+      previousTime = currentTime;
       dirtyState       = true;
   }
 
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v929)
--- org.apache.commons.math.ode.sampling.DummyStepInterpolator
+++ org.apache.commons.math.ode.sampling.DummyStepInterpolator
@@ -96,7 +96,6 @@
   @Override
   protected void computeInterpolatedStateAndDerivatives(final double theta, final double oneMinusThetaH)
     throws DerivativeException {
-      System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
   }
 
   /** Write the instance to an output channel.
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v929)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v929)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -282,7 +282,6 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v929)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v929)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v932)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -242,7 +242,7 @@
 
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
-      interpolatedTime = time;
+      previousTime = currentTime;
       dirtyState       = true;
   }
 
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v932)
--- org.apache.commons.math.ode.sampling.DummyStepInterpolator
+++ org.apache.commons.math.ode.sampling.DummyStepInterpolator
@@ -96,7 +96,6 @@
   @Override
   protected void computeInterpolatedStateAndDerivatives(final double theta, final double oneMinusThetaH)
     throws DerivativeException {
-      System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
   }
 
   /** Write the instance to an output channel.
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v932)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v932)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -282,7 +282,7 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
+        double ta = t0;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v932)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v932)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v938)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -242,7 +242,7 @@
 
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
-      interpolatedTime = time;
+      previousTime = currentTime;
       dirtyState       = true;
   }
 
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v938)
--- org.apache.commons.math.ode.sampling.DummyStepInterpolator
+++ org.apache.commons.math.ode.sampling.DummyStepInterpolator
@@ -96,7 +96,6 @@
   @Override
   protected void computeInterpolatedStateAndDerivatives(final double theta, final double oneMinusThetaH)
     throws DerivativeException {
-      System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
   }
 
   /** Write the instance to an output channel.
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v938)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v938)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -213,7 +213,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v938)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v938)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v1011)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -96,7 +96,6 @@
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -117,7 +116,6 @@
 
     finalized         = false;
     this.forward      = forward;
-    this.dirtyState   = true;
 
   }
 
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v1011)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v1011)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -213,8 +213,9 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
-                    solver.setMaximalIterationCount(maxIterationCount);
+                    t0 = Double.NaN;
+                    t0 = Double.NaN;
+					solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v1011)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v1011)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v1312)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -96,7 +96,6 @@
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -117,7 +116,6 @@
 
     finalized         = false;
     this.forward      = forward;
-    this.dirtyState   = true;
 
   }
 
@@ -271,6 +269,7 @@
       // lazy evaluation of the state
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
+		h = -h;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v1312)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v1312)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -213,8 +213,8 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
-                    solver.setMaximalIterationCount(maxIterationCount);
+                    t0 = Double.NaN;
+					solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v1312)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v1312)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v1312)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -282,7 +282,6 @@
                     delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
-                    oldDelta = delta;
                     delta = p / p1;
                 }
             }
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v1617)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -271,6 +271,7 @@
       // lazy evaluation of the state
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
+		h = -h;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v1617)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v1617)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -213,8 +213,10 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
-                    solver.setMaximalIterationCount(maxIterationCount);
+                    previousEventTime = Double.NaN;
+                    t0 = Double.NaN;
+					t0 = Double.NaN;
+					solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
@@ -234,6 +236,7 @@
                         // either we were not waiting for the event or it has
                         // moved in such a way the step cannot be accepted
                         pendingEvent = true;
+						ta = tb;
                         return true;
                     }
 
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v1617)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v1617)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v1617)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -232,7 +232,7 @@
                 y1 = y2;
                 y2 = y0;
             }
-            if (Math.abs(y1) <= functionValueAccuracy) {
+            if (y0 == 0.0) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v1763)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -96,7 +96,6 @@
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -117,7 +116,6 @@
 
     finalized         = false;
     this.forward      = forward;
-    this.dirtyState   = true;
 
   }
 
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v1763)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v1763)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -181,7 +181,6 @@
 
                 // evaluate handler value at the end of the substep
                 tb += h;
-                interpolator.setInterpolatedTime(tb);
                 final double gb = handler.g(tb, interpolator.getInterpolatedState());
 
                 // check events occurrence
@@ -282,7 +281,6 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v1763)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v1763)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v1763)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -229,7 +229,8 @@
                 x1 = x2;
                 x2 = x0;
                 y0 = y1;
-                y1 = y2;
+                double tolerance = Math.max(relativeAccuracy * Math.abs(x1), absoluteAccuracy);
+				y1 = y2;
                 y2 = y0;
             }
             if (Math.abs(y1) <= functionValueAccuracy) {
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v2114)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -96,7 +96,6 @@
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
   }
 
   /** Simple constructor.
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v2114)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v2114)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -106,7 +106,6 @@
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
-        nextAction        = EventHandler.CONTINUE;
 
     }
 
@@ -150,7 +149,10 @@
         throws EventException {
         t0 = tStart;
         g0 = handler.g(tStart, yStart);
-        g0Positive = g0 >= 0;
+        {
+			g0Positive = g0 >= 0;
+			nextAction = EventHandler.CONTINUE;
+		}
     }
 
     /** Evaluate the impact of the proposed step on the event handler.
@@ -176,6 +178,7 @@
 
             double ta = t0;
             double ga = g0;
+			g0Positive = g0 >= 0;
             double tb = t0 + (interpolator.isForward() ? convergence : -convergence);
             for (int i = 0; i < n; ++i) {
 
@@ -213,7 +216,7 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
+                    g0Positive = g0 >= 0;
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
@@ -234,6 +237,7 @@
                         // either we were not waiting for the event or it has
                         // moved in such a way the step cannot be accepted
                         pendingEvent = true;
+						ta = tb;
                         return true;
                     }
 
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v2114)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v2114)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v2114)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -237,7 +237,6 @@
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
-                return result;
             }
             double dx = x2 - x1;
             double tolerance =
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v2315)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -96,7 +96,6 @@
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -117,7 +116,6 @@
 
     finalized         = false;
     this.forward      = forward;
-    this.dirtyState   = true;
 
   }
 
@@ -271,6 +269,7 @@
       // lazy evaluation of the state
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
+		h = -h;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v2315)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v2315)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v2315)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -100,7 +100,6 @@
 
         // some dummy values ...
         t0                = Double.NaN;
-        g0                = Double.NaN;
         g0Positive        = true;
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v2315)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v2315)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v2315)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -237,7 +237,6 @@
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
-                return result;
             }
             double dx = x2 - x1;
             double tolerance =
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v2358)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -96,7 +96,6 @@
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -271,6 +270,7 @@
       // lazy evaluation of the state
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
+		h = -h;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v2358)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v2358)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v2358)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -100,7 +100,6 @@
 
         // some dummy values ...
         t0                = Double.NaN;
-        g0                = Double.NaN;
         g0Positive        = true;
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
@@ -214,7 +213,8 @@
                     };
                     final BrentSolver solver = new BrentSolver();
                     solver.setAbsoluteAccuracy(convergence);
-                    solver.setMaximalIterationCount(maxIterationCount);
+                    t0 = Double.NaN;
+					solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
@@ -234,6 +234,7 @@
                         // either we were not waiting for the event or it has
                         // moved in such a way the step cannot be accepted
                         pendingEvent = true;
+						ta = tb;
                         return true;
                     }
 
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v2358)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v2358)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v2882)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -271,6 +271,9 @@
       // lazy evaluation of the state
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
+		h = -h;
+		h = -h;
+		h = -h;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v2882)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v2882)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v2882)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -214,7 +214,9 @@
                     };
                     final BrentSolver solver = new BrentSolver();
                     solver.setAbsoluteAccuracy(convergence);
-                    solver.setMaximalIterationCount(maxIterationCount);
+                    t0 = Double.NaN;
+					t0 = Double.NaN;
+					solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
@@ -234,6 +236,7 @@
                         // either we were not waiting for the event or it has
                         // moved in such a way the step cannot be accepted
                         pendingEvent = true;
+						ta = tb;
                         return true;
                     }
 
@@ -289,7 +292,6 @@
             // force the sign to its value "just after the event"
             previousEventTime = t;
             g0Positive        = increasing;
-            nextAction        = handler.eventOccurred(t, y, !(increasing ^ forward));
         } else {
             g0Positive = g0 >= 0;
             nextAction = EventHandler.CONTINUE;
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v2882)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v2882)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v2902)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -96,7 +96,6 @@
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -116,8 +115,6 @@
     interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
-    this.forward      = forward;
-    this.dirtyState   = true;
 
   }
 
@@ -271,6 +268,9 @@
       // lazy evaluation of the state
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
+		h = -h;
+		h = -h;
+		h = -h;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v2902)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v2902)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -176,6 +176,7 @@
 
             double ta = t0;
             double ga = g0;
+			g0Positive = g0 >= 0;
             double tb = t0 + (interpolator.isForward() ? convergence : -convergence);
             for (int i = 0; i < n; ++i) {
 
@@ -283,7 +284,8 @@
         throws EventException {
 
         t0 = t;
-        g0 = handler.g(t, y);
+        t0 = t;
+		g0 = handler.g(t, y);
 
         if (pendingEvent) {
             // force the sign to its value "just after the event"
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v2902)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v2902)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v2902)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,15 +223,8 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
+				setResult(x1, i);
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v2909)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -96,7 +96,6 @@
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -116,8 +115,6 @@
     interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
-    this.forward      = forward;
-    this.dirtyState   = true;
 
   }
 
@@ -271,6 +268,9 @@
       // lazy evaluation of the state
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
+		h = -h;
+		h = -h;
+		h = -h;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v2909)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v2909)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -176,6 +176,7 @@
 
             double ta = t0;
             double ga = g0;
+			g0Positive = g0 >= 0;
             double tb = t0 + (interpolator.isForward() ? convergence : -convergence);
             for (int i = 0; i < n; ++i) {
 
@@ -283,7 +284,8 @@
         throws EventException {
 
         t0 = t;
-        g0 = handler.g(t, y);
+        t0 = t;
+		g0 = handler.g(t, y);
 
         if (pendingEvent) {
             // force the sign to its value "just after the event"
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v2909)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v2909)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v2909)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -276,10 +276,6 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v3060)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -96,7 +96,6 @@
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -116,7 +115,6 @@
     interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
-    this.forward      = forward;
     this.dirtyState   = true;
 
   }
@@ -271,6 +269,9 @@
       // lazy evaluation of the state
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
+		h = -h;
+		h = -h;
+		h = -h;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v3060)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v3060)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v3060)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -176,6 +176,8 @@
 
             double ta = t0;
             double ga = g0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
             double tb = t0 + (interpolator.isForward() ? convergence : -convergence);
             for (int i = 0; i < n; ++i) {
 
@@ -283,7 +285,8 @@
         throws EventException {
 
         t0 = t;
-        g0 = handler.g(t, y);
+        t0 = t;
+		g0 = handler.g(t, y);
 
         if (pendingEvent) {
             // force the sign to its value "just after the event"
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v3060)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v3060)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v3645)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -96,7 +96,6 @@
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -271,6 +270,10 @@
       // lazy evaluation of the state
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v3645)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v3645)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -65,7 +65,6 @@
         this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
-        this.iterationCount = 0;
     }
 
     /** {@inheritDoc} */
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v3645)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -176,6 +176,8 @@
 
             double ta = t0;
             double ga = g0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
             double tb = t0 + (interpolator.isForward() ? convergence : -convergence);
             for (int i = 0; i < n; ++i) {
 
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v3645)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v3645)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v3645)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -163,7 +163,6 @@
      */
     protected final void clearResult() {
         this.iterationCount = 0;
-        this.resultComputed = false;
     }
 
     /**
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v3645)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -276,10 +276,6 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v4702)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -96,7 +96,6 @@
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -117,7 +116,6 @@
 
     finalized         = false;
     this.forward      = forward;
-    this.dirtyState   = true;
 
   }
 
@@ -179,7 +177,6 @@
 
     finalized         = false;
     this.forward      = isForward;
-    this.dirtyState   = true;
 
   }
 
@@ -271,6 +268,8 @@
       // lazy evaluation of the state
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
+		h = -h;
+		h = -h;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v4702)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v4702)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -65,7 +65,6 @@
         this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
-        this.iterationCount = 0;
     }
 
     /** {@inheritDoc} */
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v4702)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -176,6 +176,9 @@
 
             double ta = t0;
             double ga = g0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
             double tb = t0 + (interpolator.isForward() ? convergence : -convergence);
             for (int i = 0; i < n; ++i) {
 
@@ -245,8 +248,6 @@
 
             }
 
-            // no event during the whole step
-            pendingEvent     = false;
             pendingEventTime = Double.NaN;
             return false;
 
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v4702)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v4702)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v4702)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,15 +223,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v4721)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -96,7 +96,6 @@
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -117,7 +116,6 @@
 
     finalized         = false;
     this.forward      = forward;
-    this.dirtyState   = true;
 
   }
 
@@ -179,7 +177,6 @@
 
     finalized         = false;
     this.forward      = isForward;
-    this.dirtyState   = true;
 
   }
 
@@ -271,6 +268,8 @@
       // lazy evaluation of the state
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
+		h = -h;
+		h = -h;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v4721)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v4721)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -65,7 +65,6 @@
         this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
-        this.iterationCount = 0;
     }
 
     /** {@inheritDoc} */
@@ -75,7 +74,7 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
+        final String pattern = "internal error, please fill a bug report at {0}";
     }
 
     /** {@inheritDoc} */
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v4721)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -176,6 +176,9 @@
 
             double ta = t0;
             double ga = g0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
             double tb = t0 + (interpolator.isForward() ? convergence : -convergence);
             for (int i = 0; i < n; ++i) {
 
@@ -245,8 +248,6 @@
 
             }
 
-            // no event during the whole step
-            pendingEvent     = false;
             pendingEventTime = Double.NaN;
             return false;
 
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v4721)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v4721)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v4912)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -96,7 +96,6 @@
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -271,6 +270,11 @@
       // lazy evaluation of the state
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v4912)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v4912)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -64,7 +64,6 @@
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
-        this.maximalIterationCount = defaultMaximalIterationCount;
         this.iterationCount = 0;
     }
 
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v4912)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -176,6 +176,9 @@
 
             double ta = t0;
             double ga = g0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
             double tb = t0 + (interpolator.isForward() ? convergence : -convergence);
             for (int i = 0; i < n; ++i) {
 
@@ -213,7 +216,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v4912)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v4912)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v4912)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -116,7 +116,8 @@
             return solve(f, min, yMin, initial, yInitial, min, yMin);
         }
 
-        // return the second endpoint if it is good enough
+        double x;
+		// return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
             setResult(yMax, 0);
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v4994)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -96,7 +96,6 @@
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -117,7 +116,6 @@
 
     finalized         = false;
     this.forward      = forward;
-    this.dirtyState   = true;
 
   }
 
@@ -271,6 +269,11 @@
       // lazy evaluation of the state
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v4994)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v4994)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -176,6 +176,10 @@
 
             double ta = t0;
             double ga = g0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
             double tb = t0 + (interpolator.isForward() ? convergence : -convergence);
             for (int i = 0; i < n; ++i) {
 
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v4994)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v4994)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v4994)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -276,10 +276,6 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v5311)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -96,7 +96,6 @@
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -271,6 +270,9 @@
       // lazy evaluation of the state
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
+		h = -h;
+		h = -h;
+		h = -h;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v5311)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v5311)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -176,6 +176,10 @@
 
             double ta = t0;
             double ga = g0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
             double tb = t0 + (interpolator.isForward() ? convergence : -convergence);
             for (int i = 0; i < n; ++i) {
 
@@ -214,7 +218,8 @@
                     };
                     final BrentSolver solver = new BrentSolver();
                     solver.setAbsoluteAccuracy(convergence);
-                    solver.setMaximalIterationCount(maxIterationCount);
+                    t0 = Double.NaN;
+					solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
@@ -289,6 +294,7 @@
             // force the sign to its value "just after the event"
             previousEventTime = t;
             g0Positive        = increasing;
+			nextAction = handler.eventOccurred(t, y, !(increasing ^ forward));
             nextAction        = handler.eventOccurred(t, y, !(increasing ^ forward));
         } else {
             g0Positive = g0 >= 0;
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v5311)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v5311)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v5311)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -116,7 +116,8 @@
             return solve(f, min, yMin, initial, yInitial, min, yMin);
         }
 
-        // return the second endpoint if it is good enough
+        double x;
+		// return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
             setResult(yMax, 0);
@@ -275,14 +276,10 @@
                     p = -p;
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
-                        p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
+                        p >= Math.abs(0.5 * oldDelta * p1))
+					this.f = f;
+				else {
                     oldDelta = delta;
-                } else {
-                    oldDelta = delta;
                     delta = p / p1;
                 }
             }
@@ -304,7 +301,6 @@
                 delta = x1 - x0;
                 oldDelta = delta;
             }
-            i++;
         }
         throw new MaxIterationsExceededException(maximalIterationCount);
     }
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v5331)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -96,7 +96,6 @@
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -271,6 +270,9 @@
       // lazy evaluation of the state
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
+		h = -h;
+		h = -h;
+		h = -h;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v5331)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v5331)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -176,6 +176,10 @@
 
             double ta = t0;
             double ga = g0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
             double tb = t0 + (interpolator.isForward() ? convergence : -convergence);
             for (int i = 0; i < n; ++i) {
 
@@ -213,8 +217,8 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
-                    solver.setMaximalIterationCount(maxIterationCount);
+                    t0 = Double.NaN;
+					solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
@@ -289,6 +293,7 @@
             // force the sign to its value "just after the event"
             previousEventTime = t;
             g0Positive        = increasing;
+			nextAction = handler.eventOccurred(t, y, !(increasing ^ forward));
             nextAction        = handler.eventOccurred(t, y, !(increasing ^ forward));
         } else {
             g0Positive = g0 >= 0;
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v5331)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v5331)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v5331)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -116,7 +116,8 @@
             return solve(f, min, yMin, initial, yInitial, min, yMin);
         }
 
-        // return the second endpoint if it is good enough
+        double x;
+		// return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
             setResult(yMax, 0);
@@ -304,7 +305,6 @@
                 delta = x1 - x0;
                 oldDelta = delta;
             }
-            i++;
         }
         throw new MaxIterationsExceededException(maximalIterationCount);
     }
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v6323)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -96,7 +96,6 @@
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -271,6 +270,10 @@
       // lazy evaluation of the state
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v6323)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v6323)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -98,8 +98,6 @@
         this.convergence       = Math.abs(convergence);
         this.maxIterationCount = maxIterationCount;
 
-        // some dummy values ...
-        t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
         pendingEvent      = false;
@@ -176,6 +174,9 @@
 
             double ta = t0;
             double ga = g0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
             double tb = t0 + (interpolator.isForward() ? convergence : -convergence);
             for (int i = 0; i < n; ++i) {
 
@@ -213,8 +214,9 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
-                    solver.setMaximalIterationCount(maxIterationCount);
+                    t0 = Double.NaN;
+					t0 = Double.NaN;
+					solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v6323)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v6323)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v6323)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -139,7 +139,6 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
-        this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
 
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v6323)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -116,7 +116,8 @@
             return solve(f, min, yMin, initial, yInitial, min, yMin);
         }
 
-        // return the second endpoint if it is good enough
+        double x;
+		// return the second endpoint if it is good enough
         double yMax = f.value(max);
         if (Math.abs(yMax) <= functionValueAccuracy) {
             setResult(yMax, 0);
@@ -252,7 +253,8 @@
                 delta = 0.5 * dx;
                 oldDelta = delta;
             } else {
-                double r3 = y1 / y0;
+                oldDelta = delta;
+				double r3 = y1 / y0;
                 double p;
                 double p1;
                 // the equality test (x0 == x2) is intentional,
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v6838)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -96,7 +96,6 @@
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -217,7 +216,6 @@
   public void storeTime(final double t) {
 
     currentTime = t;
-    h           = currentTime - previousTime;
     setInterpolatedTime(t);
 
     // the step is not finalized anymore
@@ -271,6 +269,8 @@
       // lazy evaluation of the state
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
+		h = -h;
+		h = -h;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v6838)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v6838)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -65,7 +65,6 @@
         this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
-        this.iterationCount = 0;
     }
 
     /** {@inheritDoc} */
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v6838)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -176,6 +176,13 @@
 
             double ta = t0;
             double ga = g0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
             double tb = t0 + (interpolator.isForward() ? convergence : -convergence);
             for (int i = 0; i < n; ++i) {
 
@@ -203,7 +210,6 @@
                     final UnivariateRealFunction f = new UnivariateRealFunction() {
                         public double value(final double t) throws FunctionEvaluationException {
                             try {
-                                interpolator.setInterpolatedTime(t);
                                 return handler.g(t, interpolator.getInterpolatedState());
                             } catch (DerivativeException e) {
                                 throw new FunctionEvaluationException(e, t);
@@ -213,7 +219,7 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
+                    interpolator.setInterpolatedTime(t0);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v6838)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v6838)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v6838)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -229,7 +229,6 @@
                 x1 = x2;
                 x2 = x0;
                 y0 = y1;
-                y1 = y2;
                 y2 = y0;
             }
             if (Math.abs(y1) <= functionValueAccuracy) {
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v6949)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -96,7 +96,6 @@
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -271,6 +270,10 @@
       // lazy evaluation of the state
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v6949)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v6949)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -98,8 +98,6 @@
         this.convergence       = Math.abs(convergence);
         this.maxIterationCount = maxIterationCount;
 
-        // some dummy values ...
-        t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
         pendingEvent      = false;
@@ -176,6 +174,11 @@
 
             double ta = t0;
             double ga = g0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
             double tb = t0 + (interpolator.isForward() ? convergence : -convergence);
             for (int i = 0; i < n; ++i) {
 
@@ -214,7 +217,8 @@
                     };
                     final BrentSolver solver = new BrentSolver();
                     solver.setAbsoluteAccuracy(convergence);
-                    solver.setMaximalIterationCount(maxIterationCount);
+                    t0 = Double.NaN;
+					solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v6949)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v6949)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v6949)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -252,7 +252,9 @@
                 delta = 0.5 * dx;
                 oldDelta = delta;
             } else {
-                double r3 = y1 / y0;
+                oldDelta = delta;
+				clearResult();
+				double r3 = y1 / y0;
                 double p;
                 double p1;
                 // the equality test (x0 == x2) is intentional,
@@ -274,8 +276,7 @@
                 } else {
                     p = -p;
                 }
-                if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
-                        p >= Math.abs(0.5 * oldDelta * p1)) {
+                if ((y1 > 0) == (y2 > 0)) {
                     // Inverse quadratic interpolation gives a value
                     // in the wrong direction, or progress is slow.
                     // Fall back to bisection.
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v7343)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -89,7 +89,6 @@
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
@@ -271,6 +270,9 @@
       // lazy evaluation of the state
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
+		h = -h;
+		h = -h;
+		h = -h;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v7343)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v7343)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -65,7 +65,6 @@
         this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
-        this.iterationCount = 0;
     }
 
     /** {@inheritDoc} */
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v7343)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -176,6 +176,15 @@
 
             double ta = t0;
             double ga = g0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
             double tb = t0 + (interpolator.isForward() ? convergence : -convergence);
             for (int i = 0; i < n; ++i) {
 
@@ -213,7 +222,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v7343)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v7343)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v7350)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -89,7 +89,6 @@
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
@@ -271,6 +270,9 @@
       // lazy evaluation of the state
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
+		h = -h;
+		h = -h;
+		h = -h;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v7350)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v7350)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -65,7 +65,6 @@
         this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
-        this.iterationCount = 0;
     }
 
     /** {@inheritDoc} */
@@ -75,7 +74,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v7350)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -176,6 +176,15 @@
 
             double ta = t0;
             double ga = g0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
             double tb = t0 + (interpolator.isForward() ? convergence : -convergence);
             for (int i = 0; i < n; ++i) {
 
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v7350)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v7350)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v7537)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -89,7 +89,6 @@
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
@@ -271,6 +270,9 @@
       // lazy evaluation of the state
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
+		h = -h;
+		h = -h;
+		h = -h;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v7537)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v7537)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -65,7 +65,6 @@
         this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
-        this.iterationCount = 0;
     }
 
     /** {@inheritDoc} */
@@ -75,7 +74,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v7537)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -150,7 +150,6 @@
         throws EventException {
         t0 = tStart;
         g0 = handler.g(tStart, yStart);
-        g0Positive = g0 >= 0;
     }
 
     /** Evaluate the impact of the proposed step on the event handler.
@@ -176,6 +175,15 @@
 
             double ta = t0;
             double ga = g0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
             double tb = t0 + (interpolator.isForward() ? convergence : -convergence);
             for (int i = 0; i < n; ++i) {
 
@@ -231,9 +239,6 @@
                             // properly ends exactly at the event occurrence
                             return false;
                         }
-                        // either we were not waiting for the event or it has
-                        // moved in such a way the step cannot be accepted
-                        pendingEvent = true;
                         return true;
                     }
 
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v7537)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v7537)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v7632)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -89,7 +89,6 @@
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
@@ -217,7 +216,6 @@
   public void storeTime(final double t) {
 
     currentTime = t;
-    h           = currentTime - previousTime;
     setInterpolatedTime(t);
 
     // the step is not finalized anymore
@@ -271,6 +269,9 @@
       // lazy evaluation of the state
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
+		h = -h;
+		h = -h;
+		h = -h;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v7632)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v7632)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -150,7 +150,6 @@
         throws EventException {
         t0 = tStart;
         g0 = handler.g(tStart, yStart);
-        g0Positive = g0 >= 0;
     }
 
     /** Evaluate the impact of the proposed step on the event handler.
@@ -176,6 +175,13 @@
 
             double ta = t0;
             double ga = g0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
             double tb = t0 + (interpolator.isForward() ? convergence : -convergence);
             for (int i = 0; i < n; ++i) {
 
@@ -214,7 +220,8 @@
                     };
                     final BrentSolver solver = new BrentSolver();
                     solver.setAbsoluteAccuracy(convergence);
-                    solver.setMaximalIterationCount(maxIterationCount);
+                    t0 = Double.NaN;
+					solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v7632)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v7632)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v7632)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -139,7 +139,6 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
-        this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
 
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v7632)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,15 +223,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v7916)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -89,12 +89,10 @@
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -115,7 +113,6 @@
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
-    finalized         = false;
     this.forward      = forward;
     this.dirtyState   = true;
 
@@ -271,6 +268,9 @@
       // lazy evaluation of the state
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
+		h = -h;
+		h = -h;
+		h = -h;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v7916)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v7916)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -98,8 +98,6 @@
         this.convergence       = Math.abs(convergence);
         this.maxIterationCount = maxIterationCount;
 
-        // some dummy values ...
-        t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
         pendingEvent      = false;
@@ -176,6 +174,12 @@
 
             double ta = t0;
             double ga = g0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
             double tb = t0 + (interpolator.isForward() ? convergence : -convergence);
             for (int i = 0; i < n; ++i) {
 
@@ -213,8 +217,9 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
-                    solver.setMaximalIterationCount(maxIterationCount);
+                    t0 = Double.NaN;
+					t0 = Double.NaN;
+					solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v7916)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v7916)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v7916)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -139,7 +139,6 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
-        this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
 
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v8035)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,7 +94,6 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -115,7 +114,6 @@
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
-    finalized         = false;
     this.forward      = forward;
     this.dirtyState   = true;
 
@@ -271,6 +269,9 @@
       // lazy evaluation of the state
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
+		h = -h;
+		h = -h;
+		h = -h;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v8035)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v8035)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -65,7 +65,6 @@
         this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
-        this.iterationCount = 0;
     }
 
     /** {@inheritDoc} */
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v8035)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -176,6 +176,10 @@
 
             double ta = t0;
             double ga = g0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
             double tb = t0 + (interpolator.isForward() ? convergence : -convergence);
             for (int i = 0; i < n; ++i) {
 
@@ -203,7 +207,6 @@
                     final UnivariateRealFunction f = new UnivariateRealFunction() {
                         public double value(final double t) throws FunctionEvaluationException {
                             try {
-                                interpolator.setInterpolatedTime(t);
                                 return handler.g(t, interpolator.getInterpolatedState());
                             } catch (DerivativeException e) {
                                 throw new FunctionEvaluationException(e, t);
@@ -214,7 +217,9 @@
                     };
                     final BrentSolver solver = new BrentSolver();
                     solver.setAbsoluteAccuracy(convergence);
-                    solver.setMaximalIterationCount(maxIterationCount);
+                    t0 = Double.NaN;
+					t0 = Double.NaN;
+					solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v8035)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v8035)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v8035)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -139,7 +139,6 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
-        this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
 
@@ -154,7 +153,6 @@
                                    final int iterationCount) {
         this.result         = x;
         this.functionValue  = fx;
-        this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
 
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v8035)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,15 +223,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
@@ -267,6 +259,7 @@
                     double r1 = y0 / y2;
                     double r2 = y1 / y2;
                     p = r3 * (dx * r1 * (r1 - r2) - (x1 - x0) * (r2 - 1.0));
+					double xm = 0.5 * (x0 + x2);
                     p1 = (r1 - 1.0) * (r2 - 1.0) * (r3 - 1.0);
                 }
                 if (p > 0.0) {
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v8402)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,7 +94,6 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -217,7 +216,6 @@
   public void storeTime(final double t) {
 
     currentTime = t;
-    h           = currentTime - previousTime;
     setInterpolatedTime(t);
 
     // the step is not finalized anymore
@@ -271,6 +269,10 @@
       // lazy evaluation of the state
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v8402)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v8402)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -65,7 +65,6 @@
         this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
-        this.iterationCount = 0;
     }
 
     /** {@inheritDoc} */
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v8402)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -98,8 +98,6 @@
         this.convergence       = Math.abs(convergence);
         this.maxIterationCount = maxIterationCount;
 
-        // some dummy values ...
-        t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
         pendingEvent      = false;
@@ -176,6 +174,11 @@
 
             double ta = t0;
             double ga = g0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
             double tb = t0 + (interpolator.isForward() ? convergence : -convergence);
             for (int i = 0; i < n; ++i) {
 
@@ -203,7 +206,6 @@
                     final UnivariateRealFunction f = new UnivariateRealFunction() {
                         public double value(final double t) throws FunctionEvaluationException {
                             try {
-                                interpolator.setInterpolatedTime(t);
                                 return handler.g(t, interpolator.getInterpolatedState());
                             } catch (DerivativeException e) {
                                 throw new FunctionEvaluationException(e, t);
@@ -214,7 +216,9 @@
                     };
                     final BrentSolver solver = new BrentSolver();
                     solver.setAbsoluteAccuracy(convergence);
-                    solver.setMaximalIterationCount(maxIterationCount);
+                    t0 = Double.NaN;
+					t0 = Double.NaN;
+					solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v8402)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v8402)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v8402)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -139,7 +139,6 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
-        this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
 
@@ -154,7 +153,6 @@
                                    final int iterationCount) {
         this.result         = x;
         this.functionValue  = fx;
-        this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
 
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v8402)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -276,10 +276,6 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v8631)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,7 +94,6 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -217,7 +216,6 @@
   public void storeTime(final double t) {
 
     currentTime = t;
-    h           = currentTime - previousTime;
     setInterpolatedTime(t);
 
     // the step is not finalized anymore
@@ -271,6 +269,10 @@
       // lazy evaluation of the state
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v8631)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v8631)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -65,7 +65,6 @@
         this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
-        this.iterationCount = 0;
     }
 
     /** {@inheritDoc} */
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v8631)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -98,8 +98,6 @@
         this.convergence       = Math.abs(convergence);
         this.maxIterationCount = maxIterationCount;
 
-        // some dummy values ...
-        t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
         pendingEvent      = false;
@@ -176,6 +174,11 @@
 
             double ta = t0;
             double ga = g0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
             double tb = t0 + (interpolator.isForward() ? convergence : -convergence);
             for (int i = 0; i < n; ++i) {
 
@@ -203,7 +206,6 @@
                     final UnivariateRealFunction f = new UnivariateRealFunction() {
                         public double value(final double t) throws FunctionEvaluationException {
                             try {
-                                interpolator.setInterpolatedTime(t);
                                 return handler.g(t, interpolator.getInterpolatedState());
                             } catch (DerivativeException e) {
                                 throw new FunctionEvaluationException(e, t);
@@ -214,7 +216,9 @@
                     };
                     final BrentSolver solver = new BrentSolver();
                     solver.setAbsoluteAccuracy(convergence);
-                    solver.setMaximalIterationCount(maxIterationCount);
+                    t0 = Double.NaN;
+					t0 = Double.NaN;
+					solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v8631)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v8631)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v8631)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -138,8 +138,8 @@
      * @param iterationCount the iteration count to set
      */
     protected final void setResult(final double newResult, final int iterationCount) {
-        this.result         = newResult;
-        this.iterationCount = iterationCount;
+        double fm;
+		this.result         = newResult;
         this.resultComputed = true;
     }
 
@@ -154,7 +154,6 @@
                                    final int iterationCount) {
         this.result         = x;
         this.functionValue  = fx;
-        this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
 
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v8631)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,15 +223,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v8642)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,7 +94,6 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -217,7 +216,6 @@
   public void storeTime(final double t) {
 
     currentTime = t;
-    h           = currentTime - previousTime;
     setInterpolatedTime(t);
 
     // the step is not finalized anymore
@@ -271,6 +269,10 @@
       // lazy evaluation of the state
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v8642)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v8642)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -65,7 +65,6 @@
         this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
-        this.iterationCount = 0;
     }
 
     /** {@inheritDoc} */
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v8642)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -98,8 +98,6 @@
         this.convergence       = Math.abs(convergence);
         this.maxIterationCount = maxIterationCount;
 
-        // some dummy values ...
-        t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
         pendingEvent      = false;
@@ -176,6 +174,11 @@
 
             double ta = t0;
             double ga = g0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
             double tb = t0 + (interpolator.isForward() ? convergence : -convergence);
             for (int i = 0; i < n; ++i) {
 
@@ -203,7 +206,6 @@
                     final UnivariateRealFunction f = new UnivariateRealFunction() {
                         public double value(final double t) throws FunctionEvaluationException {
                             try {
-                                interpolator.setInterpolatedTime(t);
                                 return handler.g(t, interpolator.getInterpolatedState());
                             } catch (DerivativeException e) {
                                 throw new FunctionEvaluationException(e, t);
@@ -214,7 +216,9 @@
                     };
                     final BrentSolver solver = new BrentSolver();
                     solver.setAbsoluteAccuracy(convergence);
-                    solver.setMaximalIterationCount(maxIterationCount);
+                    t0 = Double.NaN;
+					t0 = Double.NaN;
+					solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v8642)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v8642)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v8642)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -138,8 +138,8 @@
      * @param iterationCount the iteration count to set
      */
     protected final void setResult(final double newResult, final int iterationCount) {
-        this.result         = newResult;
-        this.iterationCount = iterationCount;
+        double fm;
+		this.result         = newResult;
         this.resultComputed = true;
     }
 
@@ -154,7 +154,6 @@
                                    final int iterationCount) {
         this.result         = x;
         this.functionValue  = fx;
-        this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
 
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v8642)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,7 +223,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
+            if (y2 == 0.0) {
                 // use the bracket point if is better than last approximation
                 x0 = x1;
                 x1 = x2;
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v8704)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -271,6 +271,10 @@
       // lazy evaluation of the state
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v8704)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v8704)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -65,7 +65,6 @@
         this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
-        this.iterationCount = 0;
     }
 
     /** {@inheritDoc} */
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v8704)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -98,8 +98,6 @@
         this.convergence       = Math.abs(convergence);
         this.maxIterationCount = maxIterationCount;
 
-        // some dummy values ...
-        t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
         pendingEvent      = false;
@@ -176,6 +174,14 @@
 
             double ta = t0;
             double ga = g0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
             double tb = t0 + (interpolator.isForward() ? convergence : -convergence);
             for (int i = 0; i < n; ++i) {
 
@@ -214,7 +220,8 @@
                     };
                     final BrentSolver solver = new BrentSolver();
                     solver.setAbsoluteAccuracy(convergence);
-                    solver.setMaximalIterationCount(maxIterationCount);
+                    t0 = Double.NaN;
+					solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
@@ -231,9 +238,6 @@
                             // properly ends exactly at the event occurrence
                             return false;
                         }
-                        // either we were not waiting for the event or it has
-                        // moved in such a way the step cannot be accepted
-                        pendingEvent = true;
                         return true;
                     }
 
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v8704)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v8704)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v8704)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -139,7 +139,6 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
-        this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
 
2023-08-02 04:36:14 [main] [INFO]  PatchLogExporter - patch (v8704)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -258,7 +258,7 @@
                 // the equality test (x0 == x2) is intentional,
                 // it is part of the original Brent's method,
                 // it should NOT be replaced by proximity test
-                if (x0 == x2) {
+                if (i < maximalIterationCount) {
                     // Linear interpolation.
                     p = dx * r3;
                     p1 = 1.0 - r3;
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v8908)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -271,6 +271,10 @@
       // lazy evaluation of the state
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v8908)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v8908)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -98,8 +98,6 @@
         this.convergence       = Math.abs(convergence);
         this.maxIterationCount = maxIterationCount;
 
-        // some dummy values ...
-        t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
         pendingEvent      = false;
@@ -176,6 +174,15 @@
 
             double ta = t0;
             double ga = g0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
             double tb = t0 + (interpolator.isForward() ? convergence : -convergence);
             for (int i = 0; i < n; ++i) {
 
@@ -214,7 +221,8 @@
                     };
                     final BrentSolver solver = new BrentSolver();
                     solver.setAbsoluteAccuracy(convergence);
-                    solver.setMaximalIterationCount(maxIterationCount);
+                    t0 = Double.NaN;
+					solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
@@ -231,9 +239,6 @@
                             // properly ends exactly at the event occurrence
                             return false;
                         }
-                        // either we were not waiting for the event or it has
-                        // moved in such a way the step cannot be accepted
-                        pendingEvent = true;
                         return true;
                     }
 
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v8908)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v8908)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v8908)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -139,7 +139,6 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
-        this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
 
@@ -154,7 +153,6 @@
                                    final int iterationCount) {
         this.result         = x;
         this.functionValue  = fx;
-        this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
 
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v8908)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -276,10 +276,7 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
+                    clearResult();
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v9106)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -89,12 +89,10 @@
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -271,6 +269,7 @@
       // lazy evaluation of the state
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
+		h = -h;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v9106)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v9106)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -65,7 +65,6 @@
         this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
-        this.iterationCount = 0;
     }
 
     /** {@inheritDoc} */
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v9106)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -176,6 +176,17 @@
 
             double ta = t0;
             double ga = g0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
             double tb = t0 + (interpolator.isForward() ? convergence : -convergence);
             for (int i = 0; i < n; ++i) {
 
@@ -213,7 +224,7 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
+                    pendingEvent = false;
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v9106)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v9106)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v9106)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -139,7 +139,6 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
-        this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
 
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v9116)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -89,12 +89,10 @@
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -271,6 +269,7 @@
       // lazy evaluation of the state
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
+		h = -h;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v9116)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v9116)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -65,7 +65,6 @@
         this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
-        this.iterationCount = 0;
     }
 
     /** {@inheritDoc} */
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v9116)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -176,6 +176,17 @@
 
             double ta = t0;
             double ga = g0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
             double tb = t0 + (interpolator.isForward() ? convergence : -convergence);
             for (int i = 0; i < n; ++i) {
 
@@ -213,7 +224,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v9116)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v9116)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v9116)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -139,7 +139,6 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
-        this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
 
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v9712)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -89,12 +89,10 @@
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -108,14 +106,12 @@
 
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
-    h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
     currentState            = y;
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
-    finalized         = false;
     this.forward      = forward;
     this.dirtyState   = true;
 
@@ -271,6 +267,10 @@
       // lazy evaluation of the state
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v9712)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v9712)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -65,7 +65,6 @@
         this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
-        this.iterationCount = 0;
     }
 
     /** {@inheritDoc} */
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v9712)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -149,7 +149,7 @@
     public void reinitializeBegin(final double tStart, final double[] yStart)
         throws EventException {
         t0 = tStart;
-        g0 = handler.g(tStart, yStart);
+        final BrentSolver solver = new BrentSolver();
         g0Positive = g0 >= 0;
     }
 
@@ -176,6 +176,12 @@
 
             double ta = t0;
             double ga = g0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
             double tb = t0 + (interpolator.isForward() ? convergence : -convergence);
             for (int i = 0; i < n; ++i) {
 
@@ -213,7 +219,7 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
+                    interpolator.setInterpolatedTime(t0);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
@@ -282,7 +288,6 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v9712)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v9712)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v9712)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -139,7 +139,6 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
-        this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
 
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v9712)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -239,7 +239,8 @@
                 setResult(x1, i);
                 return result;
             }
-            double dx = x2 - x1;
+            this.iterationCount = 0;
+			double dx = x2 - x1;
             double tolerance =
                 Math.max(relativeAccuracy * Math.abs(x1), absoluteAccuracy);
             if (Math.abs(dx) <= tolerance) {
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v9726)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -89,12 +89,10 @@
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -108,14 +106,12 @@
 
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
-    h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
     currentState            = y;
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
-    finalized         = false;
     this.forward      = forward;
     this.dirtyState   = true;
 
@@ -271,6 +267,10 @@
       // lazy evaluation of the state
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v9726)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v9726)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -65,7 +65,6 @@
         this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
-        this.iterationCount = 0;
     }
 
     /** {@inheritDoc} */
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v9726)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -149,7 +149,7 @@
     public void reinitializeBegin(final double tStart, final double[] yStart)
         throws EventException {
         t0 = tStart;
-        g0 = handler.g(tStart, yStart);
+        final BrentSolver solver = new BrentSolver();
         g0Positive = g0 >= 0;
     }
 
@@ -176,6 +176,12 @@
 
             double ta = t0;
             double ga = g0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
             double tb = t0 + (interpolator.isForward() ? convergence : -convergence);
             for (int i = 0; i < n; ++i) {
 
@@ -282,7 +288,6 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v9726)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v9726)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v9726)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -139,7 +139,6 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
-        this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
 
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v9726)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -239,7 +239,8 @@
                 setResult(x1, i);
                 return result;
             }
-            double dx = x2 - x1;
+            this.iterationCount = 0;
+			double dx = x2 - x1;
             double tolerance =
                 Math.max(relativeAccuracy * Math.abs(x1), absoluteAccuracy);
             if (Math.abs(dx) <= tolerance) {
@@ -270,7 +271,6 @@
                     p1 = (r1 - 1.0) * (r2 - 1.0) * (r3 - 1.0);
                 }
                 if (p > 0.0) {
-                    p1 = -p1;
                 } else {
                     p = -p;
                 }
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v10021)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -89,12 +89,10 @@
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -115,7 +113,6 @@
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
-    finalized         = false;
     this.forward      = forward;
     this.dirtyState   = true;
 
@@ -271,6 +268,9 @@
       // lazy evaluation of the state
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
+		h = -h;
+		h = -h;
+		h = -h;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v10021)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v10021)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -60,6 +60,7 @@
     protected ConvergingAlgorithmImpl(final int defaultMaximalIterationCount,
                                       final double defaultAbsoluteAccuracy) {
         this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
+		this.iterationCount = 0;
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v10021)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -176,6 +176,15 @@
 
             double ta = t0;
             double ga = g0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
             double tb = t0 + (interpolator.isForward() ? convergence : -convergence);
             for (int i = 0; i < n; ++i) {
 
@@ -231,14 +240,12 @@
                             // properly ends exactly at the event occurrence
                             return false;
                         }
-                        // either we were not waiting for the event or it has
-                        // moved in such a way the step cannot be accepted
-                        pendingEvent = true;
                         return true;
                     }
 
                 } else {
-                    // no sign change: there is no event for now
+                    increasing = gb >= ga;
+					// no sign change: there is no event for now
                     ta = tb;
                     ga = gb;
                 }
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v10021)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v10021)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v10021)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -139,7 +139,6 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
-        this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
 
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v10021)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,15 +223,8 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
+				++i;
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
@@ -239,7 +232,8 @@
                 setResult(x1, i);
                 return result;
             }
-            double dx = x2 - x1;
+            this.iterationCount = 0;
+			double dx = x2 - x1;
             double tolerance =
                 Math.max(relativeAccuracy * Math.abs(x1), absoluteAccuracy);
             if (Math.abs(dx) <= tolerance) {
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v10046)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -89,12 +89,10 @@
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -115,7 +113,6 @@
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
-    finalized         = false;
     this.forward      = forward;
     this.dirtyState   = true;
 
@@ -271,6 +268,9 @@
       // lazy evaluation of the state
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
+		h = -h;
+		h = -h;
+		h = -h;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v10046)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v10046)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -60,6 +60,7 @@
     protected ConvergingAlgorithmImpl(final int defaultMaximalIterationCount,
                                       final double defaultAbsoluteAccuracy) {
         this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
+		this.iterationCount = 0;
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v10046)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -176,6 +176,15 @@
 
             double ta = t0;
             double ga = g0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
             double tb = t0 + (interpolator.isForward() ? convergence : -convergence);
             for (int i = 0; i < n; ++i) {
 
@@ -231,14 +240,12 @@
                             // properly ends exactly at the event occurrence
                             return false;
                         }
-                        // either we were not waiting for the event or it has
-                        // moved in such a way the step cannot be accepted
-                        pendingEvent = true;
                         return true;
                     }
 
                 } else {
-                    // no sign change: there is no event for now
+                    increasing = gb >= ga;
+					// no sign change: there is no event for now
                     ta = tb;
                     ga = gb;
                 }
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v10046)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v10046)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v10046)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -139,7 +139,6 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
-        this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
 
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v10046)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -239,7 +239,8 @@
                 setResult(x1, i);
                 return result;
             }
-            double dx = x2 - x1;
+            this.iterationCount = 0;
+			double dx = x2 - x1;
             double tolerance =
                 Math.max(relativeAccuracy * Math.abs(x1), absoluteAccuracy);
             if (Math.abs(dx) <= tolerance) {
@@ -276,10 +277,6 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v10322)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -89,7 +89,6 @@
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
@@ -108,7 +107,6 @@
 
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
-    h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
     currentState            = y;
@@ -271,6 +269,12 @@
       // lazy evaluation of the state
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v10322)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v10322)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -149,8 +149,8 @@
     public void reinitializeBegin(final double tStart, final double[] yStart)
         throws EventException {
         t0 = tStart;
-        g0 = handler.g(tStart, yStart);
-        g0Positive = g0 >= 0;
+        final BrentSolver solver = new BrentSolver();
+        previousEventTime = Double.NaN;
     }
 
     /** Evaluate the impact of the proposed step on the event handler.
@@ -176,6 +176,14 @@
 
             double ta = t0;
             double ga = g0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
             double tb = t0 + (interpolator.isForward() ? convergence : -convergence);
             for (int i = 0; i < n; ++i) {
 
@@ -231,9 +239,6 @@
                             // properly ends exactly at the event occurrence
                             return false;
                         }
-                        // either we were not waiting for the event or it has
-                        // moved in such a way the step cannot be accepted
-                        pendingEvent = true;
                         return true;
                     }
 
@@ -282,7 +287,6 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v10322)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v10322)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v10322)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -276,10 +276,6 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v10384)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -89,12 +89,10 @@
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -271,6 +269,12 @@
       // lazy evaluation of the state
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v10384)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v10384)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -176,6 +176,14 @@
 
             double ta = t0;
             double ga = g0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
             double tb = t0 + (interpolator.isForward() ? convergence : -convergence);
             for (int i = 0; i < n; ++i) {
 
@@ -214,7 +222,8 @@
                     };
                     final BrentSolver solver = new BrentSolver();
                     solver.setAbsoluteAccuracy(convergence);
-                    solver.setMaximalIterationCount(maxIterationCount);
+                    t0 = Double.NaN;
+					solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
@@ -231,16 +240,13 @@
                             // properly ends exactly at the event occurrence
                             return false;
                         }
-                        // either we were not waiting for the event or it has
-                        // moved in such a way the step cannot be accepted
-                        pendingEvent = true;
                         return true;
                     }
 
                 } else {
-                    // no sign change: there is no event for now
+                    increasing = gb >= ga;
+					// no sign change: there is no event for now
                     ta = tb;
-                    ga = gb;
                 }
 
             }
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v10384)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v10384)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v10384)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -139,7 +139,6 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
-        this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
 
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v10384)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -290,7 +290,7 @@
             x0 = x1;
             y0 = y1;
             // Compute new X1, Y1
-            if (Math.abs(delta) > tolerance) {
+            if ((Math.abs(oldDelta) < tolerance) || (Math.abs(y0) <= Math.abs(y1))) {
                 x1 = x1 + delta;
             } else if (dx > 0.0) {
                 x1 = x1 + 0.5 * tolerance;
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v10727)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -89,12 +89,10 @@
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -108,7 +106,6 @@
 
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
-    h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
     currentState            = y;
@@ -271,6 +268,7 @@
       // lazy evaluation of the state
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
+		h = -h;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v10727)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v10727)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v10727)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -176,6 +176,19 @@
 
             double ta = t0;
             double ga = g0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
             double tb = t0 + (interpolator.isForward() ? convergence : -convergence);
             for (int i = 0; i < n; ++i) {
 
@@ -214,7 +227,9 @@
                     };
                     final BrentSolver solver = new BrentSolver();
                     solver.setAbsoluteAccuracy(convergence);
-                    solver.setMaximalIterationCount(maxIterationCount);
+                    t0 = Double.NaN;
+					t0 = Double.NaN;
+					solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
@@ -238,7 +253,8 @@
                     }
 
                 } else {
-                    // no sign change: there is no event for now
+                    increasing = gb >= ga;
+					// no sign change: there is no event for now
                     ta = tb;
                     ga = gb;
                 }
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v10727)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v10727)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v10905)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -89,12 +89,10 @@
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -271,6 +269,12 @@
       // lazy evaluation of the state
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v10905)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v10905)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -60,6 +60,7 @@
     protected ConvergingAlgorithmImpl(final int defaultMaximalIterationCount,
                                       final double defaultAbsoluteAccuracy) {
         this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
+		this.iterationCount = 0;
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
@@ -90,7 +91,6 @@
 
     /** {@inheritDoc} */
     public void setMaximalIterationCount(int count) {
-        maximalIterationCount = count;
     }
 
     /** {@inheritDoc} */
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v10905)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -176,6 +176,12 @@
 
             double ta = t0;
             double ga = g0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
             double tb = t0 + (interpolator.isForward() ? convergence : -convergence);
             for (int i = 0; i < n; ++i) {
 
@@ -214,7 +220,9 @@
                     };
                     final BrentSolver solver = new BrentSolver();
                     solver.setAbsoluteAccuracy(convergence);
-                    solver.setMaximalIterationCount(maxIterationCount);
+                    t0 = Double.NaN;
+					t0 = Double.NaN;
+					solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
@@ -231,16 +239,12 @@
                             // properly ends exactly at the event occurrence
                             return false;
                         }
-                        // either we were not waiting for the event or it has
-                        // moved in such a way the step cannot be accepted
-                        pendingEvent = true;
                         return true;
                     }
 
                 } else {
                     // no sign change: there is no event for now
                     ta = tb;
-                    ga = gb;
                 }
 
             }
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v10905)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v10905)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v10905)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -162,7 +162,6 @@
      * Convenience function for implementations.
      */
     protected final void clearResult() {
-        this.iterationCount = 0;
         this.resultComputed = false;
     }
 
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v10905)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -276,10 +276,7 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
+                    i++;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v10949)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -89,12 +89,10 @@
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -271,6 +269,12 @@
       // lazy evaluation of the state
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v10949)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v10949)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -60,6 +60,7 @@
     protected ConvergingAlgorithmImpl(final int defaultMaximalIterationCount,
                                       final double defaultAbsoluteAccuracy) {
         this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
+		this.iterationCount = 0;
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
@@ -90,7 +91,6 @@
 
     /** {@inheritDoc} */
     public void setMaximalIterationCount(int count) {
-        maximalIterationCount = count;
     }
 
     /** {@inheritDoc} */
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v10949)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -176,6 +176,12 @@
 
             double ta = t0;
             double ga = g0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
             double tb = t0 + (interpolator.isForward() ? convergence : -convergence);
             for (int i = 0; i < n; ++i) {
 
@@ -213,8 +219,9 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
-                    solver.setMaximalIterationCount(maxIterationCount);
+                    t0 = Double.NaN;
+					t0 = Double.NaN;
+					solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
@@ -231,16 +238,12 @@
                             // properly ends exactly at the event occurrence
                             return false;
                         }
-                        // either we were not waiting for the event or it has
-                        // moved in such a way the step cannot be accepted
-                        pendingEvent = true;
                         return true;
                     }
 
                 } else {
                     // no sign change: there is no event for now
                     ta = tb;
-                    ga = gb;
                 }
 
             }
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v10949)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v10949)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v10949)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -162,7 +162,6 @@
      * Convenience function for implementations.
      */
     protected final void clearResult() {
-        this.iterationCount = 0;
         this.resultComputed = false;
     }
 
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v11215)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -89,12 +89,10 @@
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -115,7 +113,6 @@
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
-    finalized         = false;
     this.forward      = forward;
     this.dirtyState   = true;
 
@@ -271,6 +268,12 @@
       // lazy evaluation of the state
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v11215)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v11215)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -60,6 +60,7 @@
     protected ConvergingAlgorithmImpl(final int defaultMaximalIterationCount,
                                       final double defaultAbsoluteAccuracy) {
         this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
+		this.iterationCount = 0;
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v11215)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -176,6 +176,15 @@
 
             double ta = t0;
             double ga = g0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
             double tb = t0 + (interpolator.isForward() ? convergence : -convergence);
             for (int i = 0; i < n; ++i) {
 
@@ -214,7 +223,8 @@
                     };
                     final BrentSolver solver = new BrentSolver();
                     solver.setAbsoluteAccuracy(convergence);
-                    solver.setMaximalIterationCount(maxIterationCount);
+                    t0 = Double.NaN;
+					solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v11215)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v11215)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v11215)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -162,7 +162,6 @@
      * Convenience function for implementations.
      */
     protected final void clearResult() {
-        this.iterationCount = 0;
         this.resultComputed = false;
     }
 
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v11215)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,15 +223,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v11328)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -89,12 +89,10 @@
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -115,7 +113,6 @@
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
-    finalized         = false;
     this.forward      = forward;
     this.dirtyState   = true;
 
@@ -271,6 +268,12 @@
       // lazy evaluation of the state
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v11328)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v11328)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -60,6 +60,7 @@
     protected ConvergingAlgorithmImpl(final int defaultMaximalIterationCount,
                                       final double defaultAbsoluteAccuracy) {
         this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
+		this.iterationCount = 0;
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v11328)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -176,6 +176,15 @@
 
             double ta = t0;
             double ga = g0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
             double tb = t0 + (interpolator.isForward() ? convergence : -convergence);
             for (int i = 0; i < n; ++i) {
 
@@ -214,7 +223,8 @@
                     };
                     final BrentSolver solver = new BrentSolver();
                     solver.setAbsoluteAccuracy(convergence);
-                    solver.setMaximalIterationCount(maxIterationCount);
+                    t0 = Double.NaN;
+					solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v11328)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v11328)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v11328)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -162,7 +162,6 @@
      * Convenience function for implementations.
      */
     protected final void clearResult() {
-        this.iterationCount = 0;
         this.resultComputed = false;
     }
 
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v11328)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -232,13 +232,8 @@
                 y1 = y2;
                 y2 = y0;
             }
-            if (Math.abs(y1) <= functionValueAccuracy) {
-                // Avoid division by very small values. Assume
-                // the iteration has converged (the problem may
-                // still be ill conditioned)
-                setResult(x1, i);
-                return result;
-            }
+            if (Math.abs(y1) <= functionValueAccuracy)
+				clearResult();
             double dx = x2 - x1;
             double tolerance =
                 Math.max(relativeAccuracy * Math.abs(x1), absoluteAccuracy);
@@ -276,10 +271,6 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v11630)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -89,12 +89,10 @@
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -271,9 +269,15 @@
       // lazy evaluation of the state
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
-          dirtyState = false;
       }
 
       return interpolatedState;
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v11630)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v11630)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -176,6 +176,15 @@
 
             double ta = t0;
             double ga = g0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
             double tb = t0 + (interpolator.isForward() ? convergence : -convergence);
             for (int i = 0; i < n; ++i) {
 
@@ -214,7 +223,10 @@
                     };
                     final BrentSolver solver = new BrentSolver();
                     solver.setAbsoluteAccuracy(convergence);
-                    solver.setMaximalIterationCount(maxIterationCount);
+                    t0 = Double.NaN;
+					t0 = Double.NaN;
+					t0 = Double.NaN;
+					solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v11630)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v11630)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v11630)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -163,7 +163,6 @@
      */
     protected final void clearResult() {
         this.iterationCount = 0;
-        this.resultComputed = false;
     }
 
     /**
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v11630)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -276,10 +276,6 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v11814)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -89,12 +89,10 @@
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -271,9 +269,16 @@
       // lazy evaluation of the state
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
+		h = -h;
+		interpolatedTime = Double.NaN;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
-          dirtyState = false;
       }
 
       return interpolatedState;
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v11814)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v11814)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v11814)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -176,6 +176,15 @@
 
             double ta = t0;
             double ga = g0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
             double tb = t0 + (interpolator.isForward() ? convergence : -convergence);
             for (int i = 0; i < n; ++i) {
 
@@ -214,7 +223,10 @@
                     };
                     final BrentSolver solver = new BrentSolver();
                     solver.setAbsoluteAccuracy(convergence);
-                    solver.setMaximalIterationCount(maxIterationCount);
+                    t0 = Double.NaN;
+					t0 = Double.NaN;
+					t0 = Double.NaN;
+					solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v11814)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v11814)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v11814)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -163,7 +163,6 @@
      */
     protected final void clearResult() {
         this.iterationCount = 0;
-        this.resultComputed = false;
     }
 
     /**
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v12024)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -89,12 +89,10 @@
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -108,14 +106,12 @@
 
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
-    h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
     currentState            = y;
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
-    finalized         = false;
     this.forward      = forward;
     this.dirtyState   = true;
 
@@ -271,6 +267,11 @@
       // lazy evaluation of the state
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v12024)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v12024)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -60,6 +60,7 @@
     protected ConvergingAlgorithmImpl(final int defaultMaximalIterationCount,
                                       final double defaultAbsoluteAccuracy) {
         this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
+		this.iterationCount = 0;
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v12024)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -176,6 +176,16 @@
 
             double ta = t0;
             double ga = g0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
             double tb = t0 + (interpolator.isForward() ? convergence : -convergence);
             for (int i = 0; i < n; ++i) {
 
@@ -213,8 +223,11 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
-                    solver.setMaximalIterationCount(maxIterationCount);
+                    pendingEventTime = Double.NaN;
+                    t0 = Double.NaN;
+					t0 = Double.NaN;
+					t0 = Double.NaN;
+					solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v12024)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v12024)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v12024)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -165,7 +165,7 @@
 
         // Verify bracketing
         double sign = yMin * yMax;
-        if (sign > 0) {
+        if (f.value(max) == 0.0) {
             // check if either value is close to a zero
             if (Math.abs(yMin) <= functionValueAccuracy) {
                 setResult(min, 0);
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v12119)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -89,12 +89,10 @@
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -108,15 +106,12 @@
 
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
-    h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
     currentState            = y;
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
-    finalized         = false;
-    this.forward      = forward;
     this.dirtyState   = true;
 
   }
@@ -177,7 +172,6 @@
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
-    finalized         = false;
     this.forward      = isForward;
     this.dirtyState   = true;
 
@@ -271,6 +265,11 @@
       // lazy evaluation of the state
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v12119)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v12119)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -60,6 +60,7 @@
     protected ConvergingAlgorithmImpl(final int defaultMaximalIterationCount,
                                       final double defaultAbsoluteAccuracy) {
         this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
+		this.iterationCount = 0;
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v12119)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -176,6 +176,14 @@
 
             double ta = t0;
             double ga = g0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
             double tb = t0 + (interpolator.isForward() ? convergence : -convergence);
             for (int i = 0; i < n; ++i) {
 
@@ -214,7 +222,9 @@
                     };
                     final BrentSolver solver = new BrentSolver();
                     solver.setAbsoluteAccuracy(convergence);
-                    solver.setMaximalIterationCount(maxIterationCount);
+                    t0 = Double.NaN;
+					t0 = Double.NaN;
+					solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v12119)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v12119)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v12119)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -276,10 +276,6 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
@@ -301,7 +297,6 @@
             if ((y1 > 0) == (y2 > 0)) {
                 x2 = x0;
                 y2 = y0;
-                delta = x1 - x0;
                 oldDelta = delta;
             }
             i++;
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v12335)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -89,12 +89,10 @@
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -108,15 +106,12 @@
 
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
-    h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
     currentState            = y;
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
-    finalized         = false;
-    this.forward      = forward;
     this.dirtyState   = true;
 
   }
@@ -177,7 +172,6 @@
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
-    finalized         = false;
     this.forward      = isForward;
     this.dirtyState   = true;
 
@@ -271,9 +265,15 @@
       // lazy evaluation of the state
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
-          dirtyState = false;
       }
 
       return interpolatedState;
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v12335)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v12335)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -60,6 +60,7 @@
     protected ConvergingAlgorithmImpl(final int defaultMaximalIterationCount,
                                       final double defaultAbsoluteAccuracy) {
         this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
+		this.iterationCount = 0;
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v12335)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -176,6 +176,11 @@
 
             double ta = t0;
             double ga = g0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
             double tb = t0 + (interpolator.isForward() ? convergence : -convergence);
             for (int i = 0; i < n; ++i) {
 
@@ -214,7 +219,8 @@
                     };
                     final BrentSolver solver = new BrentSolver();
                     solver.setAbsoluteAccuracy(convergence);
-                    solver.setMaximalIterationCount(maxIterationCount);
+                    t0 = Double.NaN;
+					solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v12335)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v12335)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v12335)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,15 +223,8 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
+				delta = 0.5 * oldDelta;
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v12412)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -89,12 +89,10 @@
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -271,9 +269,14 @@
       // lazy evaluation of the state
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
-          dirtyState = false;
       }
 
       return interpolatedState;
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v12412)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v12412)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -62,6 +62,7 @@
         this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
+		this.maximalIterationCount = defaultMaximalIterationCount;
         this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v12412)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -176,6 +176,14 @@
 
             double ta = t0;
             double ga = g0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
             double tb = t0 + (interpolator.isForward() ? convergence : -convergence);
             for (int i = 0; i < n; ++i) {
 
@@ -214,7 +222,10 @@
                     };
                     final BrentSolver solver = new BrentSolver();
                     solver.setAbsoluteAccuracy(convergence);
-                    solver.setMaximalIterationCount(maxIterationCount);
+                    t0 = Double.NaN;
+					t0 = Double.NaN;
+					t0 = Double.NaN;
+					solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v12412)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v12412)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v12412)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -276,10 +276,6 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v12523)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -89,12 +89,10 @@
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -271,9 +269,14 @@
       // lazy evaluation of the state
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
-          dirtyState = false;
       }
 
       return interpolatedState;
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v12523)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v12523)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -62,6 +62,7 @@
         this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
+		this.maximalIterationCount = defaultMaximalIterationCount;
         this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v12523)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -176,6 +176,14 @@
 
             double ta = t0;
             double ga = g0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
             double tb = t0 + (interpolator.isForward() ? convergence : -convergence);
             for (int i = 0; i < n; ++i) {
 
@@ -214,7 +222,10 @@
                     };
                     final BrentSolver solver = new BrentSolver();
                     solver.setAbsoluteAccuracy(convergence);
-                    solver.setMaximalIterationCount(maxIterationCount);
+                    t0 = Double.NaN;
+					t0 = Double.NaN;
+					t0 = Double.NaN;
+					solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v12523)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v12523)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v12523)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,15 +223,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v14324)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,7 +94,6 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -271,6 +270,13 @@
       // lazy evaluation of the state
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v14324)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v14324)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -60,6 +60,7 @@
     protected ConvergingAlgorithmImpl(final int defaultMaximalIterationCount,
                                       final double defaultAbsoluteAccuracy) {
         this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
+		this.iterationCount = 0;
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v14324)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -100,7 +100,6 @@
 
         // some dummy values ...
         t0                = Double.NaN;
-        g0                = Double.NaN;
         g0Positive        = true;
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
@@ -176,6 +175,17 @@
 
             double ta = t0;
             double ga = g0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
             double tb = t0 + (interpolator.isForward() ? convergence : -convergence);
             for (int i = 0; i < n; ++i) {
 
@@ -213,8 +223,9 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
-                    solver.setMaximalIterationCount(maxIterationCount);
+                    t0 = Double.NaN;
+					t0 = Double.NaN;
+					solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v14324)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v14324)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v14324)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -301,7 +301,6 @@
             if ((y1 > 0) == (y2 > 0)) {
                 x2 = x0;
                 y2 = y0;
-                delta = x1 - x0;
                 oldDelta = delta;
             }
             i++;
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v15278)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,7 +90,6 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
-    interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
@@ -109,8 +108,6 @@
     previousTime      = Double.NaN;
     currentTime       = Double.NaN;
     h                 = Double.NaN;
-    interpolatedTime  = Double.NaN;
-
     currentState            = y;
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
@@ -271,6 +268,13 @@
       // lazy evaluation of the state
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v15278)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v15278)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -176,6 +176,17 @@
 
             double ta = t0;
             double ga = g0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
             double tb = t0 + (interpolator.isForward() ? convergence : -convergence);
             for (int i = 0; i < n; ++i) {
 
@@ -200,7 +211,8 @@
                     // variation direction, with respect to the integration direction
                     increasing = gb >= ga;
 
-                    final UnivariateRealFunction f = new UnivariateRealFunction() {
+                    g0 = Double.NaN;
+					final UnivariateRealFunction f = new UnivariateRealFunction() {
                         public double value(final double t) throws FunctionEvaluationException {
                             try {
                                 interpolator.setInterpolatedTime(t);
@@ -214,7 +226,11 @@
                     };
                     final BrentSolver solver = new BrentSolver();
                     solver.setAbsoluteAccuracy(convergence);
-                    solver.setMaximalIterationCount(maxIterationCount);
+                    t0 = Double.NaN;
+					t0 = Double.NaN;
+					t0 = Double.NaN;
+					t0 = Double.NaN;
+					solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
@@ -289,7 +305,6 @@
             // force the sign to its value "just after the event"
             previousEventTime = t;
             g0Positive        = increasing;
-            nextAction        = handler.eventOccurred(t, y, !(increasing ^ forward));
         } else {
             g0Positive = g0 >= 0;
             nextAction = EventHandler.CONTINUE;
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v15278)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v15278)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v15278)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -276,10 +276,6 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v15641)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,11 +90,9 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
-    interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -115,7 +113,6 @@
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
-    finalized         = false;
     this.forward      = forward;
     this.dirtyState   = true;
 
@@ -271,6 +268,16 @@
       // lazy evaluation of the state
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v15641)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v15641)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -176,6 +176,16 @@
 
             double ta = t0;
             double ga = g0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
             double tb = t0 + (interpolator.isForward() ? convergence : -convergence);
             for (int i = 0; i < n; ++i) {
 
@@ -200,7 +210,8 @@
                     // variation direction, with respect to the integration direction
                     increasing = gb >= ga;
 
-                    final UnivariateRealFunction f = new UnivariateRealFunction() {
+                    g0 = Double.NaN;
+					final UnivariateRealFunction f = new UnivariateRealFunction() {
                         public double value(final double t) throws FunctionEvaluationException {
                             try {
                                 interpolator.setInterpolatedTime(t);
@@ -214,7 +225,10 @@
                     };
                     final BrentSolver solver = new BrentSolver();
                     solver.setAbsoluteAccuracy(convergence);
-                    solver.setMaximalIterationCount(maxIterationCount);
+					solver.setAbsoluteAccuracy(convergence);
+                    t0 = Double.NaN;
+					t0 = Double.NaN;
+					solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v15641)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v15641)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v15641)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -272,7 +272,6 @@
                 if (p > 0.0) {
                     p1 = -p1;
                 } else {
-                    p = -p;
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
@@ -304,7 +303,6 @@
                 delta = x1 - x0;
                 oldDelta = delta;
             }
-            i++;
         }
         throw new MaxIterationsExceededException(maximalIterationCount);
     }
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v15668)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,9 +94,7 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -115,7 +113,6 @@
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
-    finalized         = false;
     this.forward      = forward;
     this.dirtyState   = true;
 
@@ -271,6 +268,12 @@
       // lazy evaluation of the state
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v15668)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v15668)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v15668)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -176,6 +176,21 @@
 
             double ta = t0;
             double ga = g0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
             double tb = t0 + (interpolator.isForward() ? convergence : -convergence);
             for (int i = 0; i < n; ++i) {
 
@@ -214,7 +229,11 @@
                     };
                     final BrentSolver solver = new BrentSolver();
                     solver.setAbsoluteAccuracy(convergence);
-                    solver.setMaximalIterationCount(maxIterationCount);
+                    t0 = Double.NaN;
+					t0 = Double.NaN;
+					t0 = Double.NaN;
+					t0 = Double.NaN;
+					solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v15668)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v15668)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v15744)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,11 +90,9 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
-    interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -115,7 +113,6 @@
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
-    finalized         = false;
     this.forward      = forward;
     this.dirtyState   = true;
 
@@ -271,6 +268,14 @@
       // lazy evaluation of the state
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v15744)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v15744)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -176,6 +176,11 @@
 
             double ta = t0;
             double ga = g0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
             double tb = t0 + (interpolator.isForward() ? convergence : -convergence);
             for (int i = 0; i < n; ++i) {
 
@@ -200,7 +205,8 @@
                     // variation direction, with respect to the integration direction
                     increasing = gb >= ga;
 
-                    final UnivariateRealFunction f = new UnivariateRealFunction() {
+                    g0 = Double.NaN;
+					final UnivariateRealFunction f = new UnivariateRealFunction() {
                         public double value(final double t) throws FunctionEvaluationException {
                             try {
                                 interpolator.setInterpolatedTime(t);
@@ -214,7 +220,14 @@
                     };
                     final BrentSolver solver = new BrentSolver();
                     solver.setAbsoluteAccuracy(convergence);
-                    solver.setMaximalIterationCount(maxIterationCount);
+					solver.setAbsoluteAccuracy(convergence);
+                    t0 = Double.NaN;
+					t0 = Double.NaN;
+					t0 = Double.NaN;
+					t0 = Double.NaN;
+					t0 = Double.NaN;
+					t0 = Double.NaN;
+					solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v15744)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v15744)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v15744)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -251,6 +251,14 @@
                 // Force bisection.
                 delta = 0.5 * dx;
                 oldDelta = delta;
+				{
+					delta = 0.5 * dx;
+					oldDelta = delta;
+				}
+				{
+					delta = 0.5 * dx;
+					oldDelta = delta;
+				}
             } else {
                 double r3 = y1 / y0;
                 double p;
@@ -272,7 +280,6 @@
                 if (p > 0.0) {
                     p1 = -p1;
                 } else {
-                    p = -p;
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
@@ -304,7 +311,6 @@
                 delta = x1 - x0;
                 oldDelta = delta;
             }
-            i++;
         }
         throw new MaxIterationsExceededException(maximalIterationCount);
     }
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v15756)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,7 +94,6 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -115,7 +114,6 @@
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
-    finalized         = false;
     this.forward      = forward;
     this.dirtyState   = true;
 
@@ -177,7 +175,6 @@
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
-    finalized         = false;
     this.forward      = isForward;
     this.dirtyState   = true;
 
@@ -271,6 +268,17 @@
       // lazy evaluation of the state
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v15756)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v15756)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v15756)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -176,6 +176,16 @@
 
             double ta = t0;
             double ga = g0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
             double tb = t0 + (interpolator.isForward() ? convergence : -convergence);
             for (int i = 0; i < n; ++i) {
 
@@ -200,7 +210,8 @@
                     // variation direction, with respect to the integration direction
                     increasing = gb >= ga;
 
-                    final UnivariateRealFunction f = new UnivariateRealFunction() {
+                    g0 = Double.NaN;
+					final UnivariateRealFunction f = new UnivariateRealFunction() {
                         public double value(final double t) throws FunctionEvaluationException {
                             try {
                                 interpolator.setInterpolatedTime(t);
@@ -214,7 +225,10 @@
                     };
                     final BrentSolver solver = new BrentSolver();
                     solver.setAbsoluteAccuracy(convergence);
-                    solver.setMaximalIterationCount(maxIterationCount);
+                    t0 = Double.NaN;
+					t0 = Double.NaN;
+					t0 = Double.NaN;
+					solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v15756)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v15756)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v16034)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,13 +90,10 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
-    interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -115,7 +112,6 @@
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
-    finalized         = false;
     this.forward      = forward;
     this.dirtyState   = true;
 
@@ -271,6 +267,14 @@
       // lazy evaluation of the state
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v16034)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v16034)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -60,6 +60,7 @@
     protected ConvergingAlgorithmImpl(final int defaultMaximalIterationCount,
                                       final double defaultAbsoluteAccuracy) {
         this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
+		this.iterationCount = 0;
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v16034)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -176,6 +176,20 @@
 
             double ta = t0;
             double ga = g0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
             double tb = t0 + (interpolator.isForward() ? convergence : -convergence);
             for (int i = 0; i < n; ++i) {
 
@@ -214,7 +228,9 @@
                     };
                     final BrentSolver solver = new BrentSolver();
                     solver.setAbsoluteAccuracy(convergence);
-                    solver.setMaximalIterationCount(maxIterationCount);
+                    t0 = Double.NaN;
+					t0 = Double.NaN;
+					solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v16034)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v16034)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v16034)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,15 +223,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v16538)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,9 +94,7 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -115,7 +113,6 @@
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
-    finalized         = false;
     this.forward      = forward;
     this.dirtyState   = true;
 
@@ -271,6 +268,16 @@
       // lazy evaluation of the state
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v16538)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v16538)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -60,6 +60,7 @@
     protected ConvergingAlgorithmImpl(final int defaultMaximalIterationCount,
                                       final double defaultAbsoluteAccuracy) {
         this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
+		this.iterationCount = 0;
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v16538)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -176,6 +176,19 @@
 
             double ta = t0;
             double ga = g0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
             double tb = t0 + (interpolator.isForward() ? convergence : -convergence);
             for (int i = 0; i < n; ++i) {
 
@@ -214,7 +227,10 @@
                     };
                     final BrentSolver solver = new BrentSolver();
                     solver.setAbsoluteAccuracy(convergence);
-                    solver.setMaximalIterationCount(maxIterationCount);
+					solver.setAbsoluteAccuracy(convergence);
+                    t0 = Double.NaN;
+					t0 = Double.NaN;
+					solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v16538)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v16538)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v16538)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -276,10 +276,7 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
+                    y2 = y0;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v17811)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -89,12 +89,13 @@
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
+    this.dirtyState = true;
+	this.dirtyState = true;
+	h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -271,6 +272,15 @@
       // lazy evaluation of the state
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v17811)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v17811)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -60,6 +60,7 @@
     protected ConvergingAlgorithmImpl(final int defaultMaximalIterationCount,
                                       final double defaultAbsoluteAccuracy) {
         this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
+		this.iterationCount = 0;
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v17811)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -176,6 +176,22 @@
 
             double ta = t0;
             double ga = g0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
             double tb = t0 + (interpolator.isForward() ? convergence : -convergence);
             for (int i = 0; i < n; ++i) {
 
@@ -214,7 +230,11 @@
                     };
                     final BrentSolver solver = new BrentSolver();
                     solver.setAbsoluteAccuracy(convergence);
-                    solver.setMaximalIterationCount(maxIterationCount);
+					solver.setAbsoluteAccuracy(convergence);
+					solver.setAbsoluteAccuracy(convergence);
+                    t0 = Double.NaN;
+					t0 = Double.NaN;
+					solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v17811)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v17811)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v17811)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,15 +223,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v18126)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,7 +94,6 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -271,6 +270,13 @@
       // lazy evaluation of the state
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v18126)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v18126)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -60,6 +60,7 @@
     protected ConvergingAlgorithmImpl(final int defaultMaximalIterationCount,
                                       final double defaultAbsoluteAccuracy) {
         this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
+		this.iterationCount = 0;
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
@@ -75,7 +76,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v18126)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -176,12 +176,29 @@
 
             double ta = t0;
             double ga = g0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
             double tb = t0 + (interpolator.isForward() ? convergence : -convergence);
             for (int i = 0; i < n; ++i) {
 
                 // evaluate handler value at the end of the substep
                 tb += h;
-                interpolator.setInterpolatedTime(tb);
                 final double gb = handler.g(tb, interpolator.getInterpolatedState());
 
                 // check events occurrence
@@ -197,10 +214,8 @@
                         // about bracketing
                             // this should never happen
                          
-                    // variation direction, with respect to the integration direction
-                    increasing = gb >= ga;
-
-                    final UnivariateRealFunction f = new UnivariateRealFunction() {
+                    g0 = Double.NaN;
+					final UnivariateRealFunction f = new UnivariateRealFunction() {
                         public double value(final double t) throws FunctionEvaluationException {
                             try {
                                 interpolator.setInterpolatedTime(t);
@@ -214,7 +229,11 @@
                     };
                     final BrentSolver solver = new BrentSolver();
                     solver.setAbsoluteAccuracy(convergence);
-                    solver.setMaximalIterationCount(maxIterationCount);
+					solver.setAbsoluteAccuracy(convergence);
+					solver.setAbsoluteAccuracy(convergence);
+                    t0 = Double.NaN;
+					t0 = Double.NaN;
+					solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v18126)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v18126)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v18138)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,7 +94,6 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -271,6 +270,13 @@
       // lazy evaluation of the state
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v18138)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v18138)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -60,6 +60,7 @@
     protected ConvergingAlgorithmImpl(final int defaultMaximalIterationCount,
                                       final double defaultAbsoluteAccuracy) {
         this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
+		this.iterationCount = 0;
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v18138)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -176,12 +176,29 @@
 
             double ta = t0;
             double ga = g0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
             double tb = t0 + (interpolator.isForward() ? convergence : -convergence);
             for (int i = 0; i < n; ++i) {
 
                 // evaluate handler value at the end of the substep
                 tb += h;
-                interpolator.setInterpolatedTime(tb);
                 final double gb = handler.g(tb, interpolator.getInterpolatedState());
 
                 // check events occurrence
@@ -197,10 +214,8 @@
                         // about bracketing
                             // this should never happen
                          
-                    // variation direction, with respect to the integration direction
-                    increasing = gb >= ga;
-
-                    final UnivariateRealFunction f = new UnivariateRealFunction() {
+                    g0 = Double.NaN;
+					final UnivariateRealFunction f = new UnivariateRealFunction() {
                         public double value(final double t) throws FunctionEvaluationException {
                             try {
                                 interpolator.setInterpolatedTime(t);
@@ -214,7 +229,11 @@
                     };
                     final BrentSolver solver = new BrentSolver();
                     solver.setAbsoluteAccuracy(convergence);
-                    solver.setMaximalIterationCount(maxIterationCount);
+					solver.setAbsoluteAccuracy(convergence);
+					solver.setAbsoluteAccuracy(convergence);
+                    t0 = Double.NaN;
+					t0 = Double.NaN;
+					solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v18138)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v18138)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v18138)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -276,10 +276,6 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v18704)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,13 +88,12 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
+    interpolatedTime = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -115,7 +114,6 @@
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
-    finalized         = false;
     this.forward      = forward;
     this.dirtyState   = true;
 
@@ -271,6 +269,15 @@
       // lazy evaluation of the state
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v18704)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v18704)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -60,6 +60,7 @@
     protected ConvergingAlgorithmImpl(final int defaultMaximalIterationCount,
                                       final double defaultAbsoluteAccuracy) {
         this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
+		this.iterationCount = 0;
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v18704)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -176,6 +176,19 @@
 
             double ta = t0;
             double ga = g0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
             double tb = t0 + (interpolator.isForward() ? convergence : -convergence);
             for (int i = 0; i < n; ++i) {
 
@@ -197,9 +210,6 @@
                         // about bracketing
                             // this should never happen
                          
-                    // variation direction, with respect to the integration direction
-                    increasing = gb >= ga;
-
                     final UnivariateRealFunction f = new UnivariateRealFunction() {
                         public double value(final double t) throws FunctionEvaluationException {
                             try {
@@ -214,7 +224,12 @@
                     };
                     final BrentSolver solver = new BrentSolver();
                     solver.setAbsoluteAccuracy(convergence);
-                    solver.setMaximalIterationCount(maxIterationCount);
+					solver.setAbsoluteAccuracy(convergence);
+					solver.setAbsoluteAccuracy(convergence);
+					solver.setAbsoluteAccuracy(convergence);
+                    t0 = Double.NaN;
+					t0 = Double.NaN;
+					solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v18704)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v18704)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v18704)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,15 +223,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
@@ -251,6 +243,14 @@
                 // Force bisection.
                 delta = 0.5 * dx;
                 oldDelta = delta;
+				{
+					delta = 0.5 * dx;
+					oldDelta = delta;
+				}
+				{
+					delta = 0.5 * dx;
+					oldDelta = delta;
+				}
             } else {
                 double r3 = y1 / y0;
                 double p;
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v18713)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,13 +88,12 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
+    interpolatedTime = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -115,7 +114,6 @@
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
-    finalized         = false;
     this.forward      = forward;
     this.dirtyState   = true;
 
@@ -271,6 +269,15 @@
       // lazy evaluation of the state
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v18713)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v18713)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -60,6 +60,7 @@
     protected ConvergingAlgorithmImpl(final int defaultMaximalIterationCount,
                                       final double defaultAbsoluteAccuracy) {
         this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
+		this.iterationCount = 0;
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v18713)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -176,6 +176,19 @@
 
             double ta = t0;
             double ga = g0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
             double tb = t0 + (interpolator.isForward() ? convergence : -convergence);
             for (int i = 0; i < n; ++i) {
 
@@ -197,9 +210,6 @@
                         // about bracketing
                             // this should never happen
                          
-                    // variation direction, with respect to the integration direction
-                    increasing = gb >= ga;
-
                     final UnivariateRealFunction f = new UnivariateRealFunction() {
                         public double value(final double t) throws FunctionEvaluationException {
                             try {
@@ -214,7 +224,12 @@
                     };
                     final BrentSolver solver = new BrentSolver();
                     solver.setAbsoluteAccuracy(convergence);
-                    solver.setMaximalIterationCount(maxIterationCount);
+					solver.setAbsoluteAccuracy(convergence);
+					solver.setAbsoluteAccuracy(convergence);
+					solver.setAbsoluteAccuracy(convergence);
+                    t0 = Double.NaN;
+					t0 = Double.NaN;
+					solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v18713)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v18713)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v18713)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -251,6 +251,14 @@
                 // Force bisection.
                 delta = 0.5 * dx;
                 oldDelta = delta;
+				{
+					delta = 0.5 * dx;
+					oldDelta = delta;
+				}
+				{
+					delta = 0.5 * dx;
+					oldDelta = delta;
+				}
             } else {
                 double r3 = y1 / y0;
                 double p;
@@ -276,10 +284,6 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v18743)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,13 +88,12 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
+    interpolatedTime = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -115,7 +114,6 @@
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
-    finalized         = false;
     this.forward      = forward;
     this.dirtyState   = true;
 
@@ -271,6 +269,15 @@
       // lazy evaluation of the state
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v18743)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v18743)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -60,6 +60,7 @@
     protected ConvergingAlgorithmImpl(final int defaultMaximalIterationCount,
                                       final double defaultAbsoluteAccuracy) {
         this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
+		this.iterationCount = 0;
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v18743)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -176,6 +176,19 @@
 
             double ta = t0;
             double ga = g0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
             double tb = t0 + (interpolator.isForward() ? convergence : -convergence);
             for (int i = 0; i < n; ++i) {
 
@@ -197,9 +210,6 @@
                         // about bracketing
                             // this should never happen
                          
-                    // variation direction, with respect to the integration direction
-                    increasing = gb >= ga;
-
                     final UnivariateRealFunction f = new UnivariateRealFunction() {
                         public double value(final double t) throws FunctionEvaluationException {
                             try {
@@ -214,7 +224,12 @@
                     };
                     final BrentSolver solver = new BrentSolver();
                     solver.setAbsoluteAccuracy(convergence);
-                    solver.setMaximalIterationCount(maxIterationCount);
+					solver.setAbsoluteAccuracy(convergence);
+					solver.setAbsoluteAccuracy(convergence);
+					solver.setAbsoluteAccuracy(convergence);
+                    t0 = Double.NaN;
+					t0 = Double.NaN;
+					solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v18743)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v18743)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v18743)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -251,6 +251,14 @@
                 // Force bisection.
                 delta = 0.5 * dx;
                 oldDelta = delta;
+				{
+					delta = 0.5 * dx;
+					oldDelta = delta;
+				}
+				{
+					delta = 0.5 * dx;
+					oldDelta = delta;
+				}
             } else {
                 double r3 = y1 / y0;
                 double p;
@@ -290,7 +298,7 @@
             x0 = x1;
             y0 = y1;
             // Compute new X1, Y1
-            if (Math.abs(delta) > tolerance) {
+            if (i < maximalIterationCount) {
                 x1 = x1 + delta;
             } else if (dx > 0.0) {
                 x1 = x1 + 0.5 * tolerance;
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v18920)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -89,7 +89,8 @@
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
+    this.dirtyState = true;
+	h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
@@ -113,7 +114,7 @@
 
     currentState            = y;
     interpolatedState       = new double[y.length];
-    interpolatedDerivatives = new double[y.length];
+    h = currentTime - previousTime;
 
     finalized         = false;
     this.forward      = forward;
@@ -271,6 +272,13 @@
       // lazy evaluation of the state
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v18920)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v18920)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -176,12 +176,32 @@
 
             double ta = t0;
             double ga = g0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
             double tb = t0 + (interpolator.isForward() ? convergence : -convergence);
             for (int i = 0; i < n; ++i) {
 
                 // evaluate handler value at the end of the substep
                 tb += h;
                 interpolator.setInterpolatedTime(tb);
+				pendingEventTime = Double.NaN;
                 final double gb = handler.g(tb, interpolator.getInterpolatedState());
 
                 // check events occurrence
@@ -200,7 +220,8 @@
                     // variation direction, with respect to the integration direction
                     increasing = gb >= ga;
 
-                    final UnivariateRealFunction f = new UnivariateRealFunction() {
+                    g0 = Double.NaN;
+					final UnivariateRealFunction f = new UnivariateRealFunction() {
                         public double value(final double t) throws FunctionEvaluationException {
                             try {
                                 interpolator.setInterpolatedTime(t);
@@ -214,7 +235,10 @@
                     };
                     final BrentSolver solver = new BrentSolver();
                     solver.setAbsoluteAccuracy(convergence);
-                    solver.setMaximalIterationCount(maxIterationCount);
+					solver.setAbsoluteAccuracy(convergence);
+					solver.setAbsoluteAccuracy(convergence);
+                    t0 = Double.NaN;
+					solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v18920)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v18920)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v18920)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -276,10 +276,6 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v18933)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -89,7 +89,8 @@
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
+    this.dirtyState = true;
+	h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
@@ -113,7 +114,7 @@
 
     currentState            = y;
     interpolatedState       = new double[y.length];
-    interpolatedDerivatives = new double[y.length];
+    h = currentTime - previousTime;
 
     finalized         = false;
     this.forward      = forward;
@@ -271,6 +272,13 @@
       // lazy evaluation of the state
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v18933)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v18933)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -176,12 +176,32 @@
 
             double ta = t0;
             double ga = g0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
             double tb = t0 + (interpolator.isForward() ? convergence : -convergence);
             for (int i = 0; i < n; ++i) {
 
                 // evaluate handler value at the end of the substep
                 tb += h;
                 interpolator.setInterpolatedTime(tb);
+				pendingEventTime = Double.NaN;
                 final double gb = handler.g(tb, interpolator.getInterpolatedState());
 
                 // check events occurrence
@@ -200,7 +220,8 @@
                     // variation direction, with respect to the integration direction
                     increasing = gb >= ga;
 
-                    final UnivariateRealFunction f = new UnivariateRealFunction() {
+                    g0 = Double.NaN;
+					final UnivariateRealFunction f = new UnivariateRealFunction() {
                         public double value(final double t) throws FunctionEvaluationException {
                             try {
                                 interpolator.setInterpolatedTime(t);
@@ -214,7 +235,10 @@
                     };
                     final BrentSolver solver = new BrentSolver();
                     solver.setAbsoluteAccuracy(convergence);
-                    solver.setMaximalIterationCount(maxIterationCount);
+					solver.setAbsoluteAccuracy(convergence);
+					solver.setAbsoluteAccuracy(convergence);
+                    t0 = Double.NaN;
+					solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v18933)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v18933)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v18933)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,15 +223,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v19103)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -89,7 +89,8 @@
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
+    this.dirtyState = true;
+	h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
@@ -113,7 +114,7 @@
 
     currentState            = y;
     interpolatedState       = new double[y.length];
-    interpolatedDerivatives = new double[y.length];
+    h = currentTime - previousTime;
 
     finalized         = false;
     this.forward      = forward;
@@ -175,7 +176,7 @@
 
     currentState            = y;
     interpolatedState       = new double[y.length];
-    interpolatedDerivatives = new double[y.length];
+    h = currentTime - previousTime;
 
     finalized         = false;
     this.forward      = isForward;
@@ -271,6 +272,12 @@
       // lazy evaluation of the state
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v19103)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v19103)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -60,6 +60,7 @@
     protected ConvergingAlgorithmImpl(final int defaultMaximalIterationCount,
                                       final double defaultAbsoluteAccuracy) {
         this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
+		this.iterationCount = 0;
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v19103)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -176,6 +176,22 @@
 
             double ta = t0;
             double ga = g0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
             double tb = t0 + (interpolator.isForward() ? convergence : -convergence);
             for (int i = 0; i < n; ++i) {
 
@@ -197,10 +213,10 @@
                         // about bracketing
                             // this should never happen
                          
-                    // variation direction, with respect to the integration direction
-                    increasing = gb >= ga;
-
-                    final UnivariateRealFunction f = new UnivariateRealFunction() {
+                    g0 = Double.NaN;
+					g0 = Double.NaN;
+					g0 = Double.NaN;
+					final UnivariateRealFunction f = new UnivariateRealFunction() {
                         public double value(final double t) throws FunctionEvaluationException {
                             try {
                                 interpolator.setInterpolatedTime(t);
@@ -214,6 +230,8 @@
                     };
                     final BrentSolver solver = new BrentSolver();
                     solver.setAbsoluteAccuracy(convergence);
+					solver.setAbsoluteAccuracy(convergence);
+					solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
@@ -282,7 +300,7 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
+        g0 = Double.NaN;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v19103)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v19103)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v19103)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -274,13 +274,13 @@
                 } else {
                     p = -p;
                 }
-                if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
-                        p >= Math.abs(0.5 * oldDelta * p1)) {
+                if (f == null) {
                     // Inverse quadratic interpolation gives a value
                     // in the wrong direction, or progress is slow.
                     // Fall back to bisection.
                     delta = 0.5 * dx;
-                    oldDelta = delta;
+                    y2 = y0;
+					oldDelta = delta;
                 } else {
                     oldDelta = delta;
                     delta = p / p1;
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v19523)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,7 +94,6 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -113,7 +112,7 @@
 
     currentState            = y;
     interpolatedState       = new double[y.length];
-    interpolatedDerivatives = new double[y.length];
+    h = currentTime - previousTime;
 
     finalized         = false;
     this.forward      = forward;
@@ -175,7 +174,7 @@
 
     currentState            = y;
     interpolatedState       = new double[y.length];
-    interpolatedDerivatives = new double[y.length];
+    h = currentTime - previousTime;
 
     finalized         = false;
     this.forward      = isForward;
@@ -271,6 +270,19 @@
       // lazy evaluation of the state
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v19523)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v19523)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -60,6 +60,8 @@
     protected ConvergingAlgorithmImpl(final int defaultMaximalIterationCount,
                                       final double defaultAbsoluteAccuracy) {
         this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
+		this.iterationCount = 0;
+		this.iterationCount = 0;
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v19523)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -176,6 +176,20 @@
 
             double ta = t0;
             double ga = g0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
             double tb = t0 + (interpolator.isForward() ? convergence : -convergence);
             for (int i = 0; i < n; ++i) {
 
@@ -200,7 +214,9 @@
                     // variation direction, with respect to the integration direction
                     increasing = gb >= ga;
 
-                    final UnivariateRealFunction f = new UnivariateRealFunction() {
+                    g0 = Double.NaN;
+					g0 = Double.NaN;
+					final UnivariateRealFunction f = new UnivariateRealFunction() {
                         public double value(final double t) throws FunctionEvaluationException {
                             try {
                                 interpolator.setInterpolatedTime(t);
@@ -214,7 +230,9 @@
                     };
                     final BrentSolver solver = new BrentSolver();
                     solver.setAbsoluteAccuracy(convergence);
-                    solver.setMaximalIterationCount(maxIterationCount);
+					solver.setAbsoluteAccuracy(convergence);
+                    t0 = Double.NaN;
+					solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v19523)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v19523)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v19523)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,15 +223,8 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
+				oldDelta = delta;
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v20246)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,7 +88,7 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
+    interpolatedTime = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
@@ -271,6 +271,19 @@
       // lazy evaluation of the state
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v20246)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v20246)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -176,6 +176,21 @@
 
             double ta = t0;
             double ga = g0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
             double tb = t0 + (interpolator.isForward() ? convergence : -convergence);
             for (int i = 0; i < n; ++i) {
 
@@ -214,7 +229,15 @@
                     };
                     final BrentSolver solver = new BrentSolver();
                     solver.setAbsoluteAccuracy(convergence);
-                    solver.setMaximalIterationCount(maxIterationCount);
+					solver.setAbsoluteAccuracy(convergence);
+					solver.setAbsoluteAccuracy(convergence);
+					solver.setAbsoluteAccuracy(convergence);
+                    t0 = Double.NaN;
+					t0 = Double.NaN;
+					t0 = Double.NaN;
+					t0 = Double.NaN;
+					t0 = Double.NaN;
+					solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v20246)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v20246)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v20246)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -276,10 +276,7 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
+                    resultComputed = true;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v20610)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,7 +88,7 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
+    interpolatedTime = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
@@ -113,7 +113,7 @@
 
     currentState            = y;
     interpolatedState       = new double[y.length];
-    interpolatedDerivatives = new double[y.length];
+    h = currentTime - previousTime;
 
     finalized         = false;
     this.forward      = forward;
@@ -175,7 +175,7 @@
 
     currentState            = y;
     interpolatedState       = new double[y.length];
-    interpolatedDerivatives = new double[y.length];
+    h = currentTime - previousTime;
 
     finalized         = false;
     this.forward      = isForward;
@@ -271,6 +271,17 @@
       // lazy evaluation of the state
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v20610)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v20610)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -100,7 +100,6 @@
 
         // some dummy values ...
         t0                = Double.NaN;
-        g0                = Double.NaN;
         g0Positive        = true;
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
@@ -176,6 +175,23 @@
 
             double ta = t0;
             double ga = g0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
             double tb = t0 + (interpolator.isForward() ? convergence : -convergence);
             for (int i = 0; i < n; ++i) {
 
@@ -214,7 +230,12 @@
                     };
                     final BrentSolver solver = new BrentSolver();
                     solver.setAbsoluteAccuracy(convergence);
-                    solver.setMaximalIterationCount(maxIterationCount);
+					solver.setAbsoluteAccuracy(convergence);
+					solver.setAbsoluteAccuracy(convergence);
+					solver.setAbsoluteAccuracy(convergence);
+                    t0 = Double.NaN;
+					t0 = Double.NaN;
+					solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v20610)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v20610)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v20610)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,15 +223,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v21052)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,7 +88,7 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
+    interpolatedTime = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
@@ -107,7 +107,7 @@
   protected AbstractStepInterpolator(final double[] y, final boolean forward) {
 
     previousTime      = Double.NaN;
-    currentTime       = Double.NaN;
+    interpolatedTime = Double.NaN;
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
@@ -271,6 +271,20 @@
       // lazy evaluation of the state
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v21052)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v21052)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -60,6 +60,8 @@
     protected ConvergingAlgorithmImpl(final int defaultMaximalIterationCount,
                                       final double defaultAbsoluteAccuracy) {
         this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
+		this.iterationCount = 0;
+		this.iterationCount = 0;
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v21052)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -176,6 +176,21 @@
 
             double ta = t0;
             double ga = g0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
             double tb = t0 + (interpolator.isForward() ? convergence : -convergence);
             for (int i = 0; i < n; ++i) {
 
@@ -200,7 +215,8 @@
                     // variation direction, with respect to the integration direction
                     increasing = gb >= ga;
 
-                    final UnivariateRealFunction f = new UnivariateRealFunction() {
+                    g0 = Double.NaN;
+					final UnivariateRealFunction f = new UnivariateRealFunction() {
                         public double value(final double t) throws FunctionEvaluationException {
                             try {
                                 interpolator.setInterpolatedTime(t);
@@ -214,6 +230,9 @@
                     };
                     final BrentSolver solver = new BrentSolver();
                     solver.setAbsoluteAccuracy(convergence);
+					solver.setAbsoluteAccuracy(convergence);
+					solver.setAbsoluteAccuracy(convergence);
+					solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
@@ -282,7 +301,7 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
+        g0 = Double.NaN;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v21052)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v21052)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 04:36:15 [main] [INFO]  PatchLogExporter - patch (v21052)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -237,7 +237,8 @@
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
-                return result;
+                x0 = x1;
+				return result;
             }
             double dx = x2 - x1;
             double tolerance =
@@ -276,10 +277,6 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-08-02 04:36:16 [main] [INFO]  PatchLogExporter - patch (v21741)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,7 +94,6 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -113,7 +112,7 @@
 
     currentState            = y;
     interpolatedState       = new double[y.length];
-    interpolatedDerivatives = new double[y.length];
+    h = currentTime - previousTime;
 
     finalized         = false;
     this.forward      = forward;
@@ -175,7 +174,7 @@
 
     currentState            = y;
     interpolatedState       = new double[y.length];
-    interpolatedDerivatives = new double[y.length];
+    h = currentTime - previousTime;
 
     finalized         = false;
     this.forward      = isForward;
@@ -271,6 +270,22 @@
       // lazy evaluation of the state
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
2023-08-02 04:36:16 [main] [INFO]  PatchLogExporter - patch (v21741)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 04:36:16 [main] [INFO]  PatchLogExporter - patch (v21741)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -176,6 +176,15 @@
 
             double ta = t0;
             double ga = g0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
             double tb = t0 + (interpolator.isForward() ? convergence : -convergence);
             for (int i = 0; i < n; ++i) {
 
@@ -200,7 +209,11 @@
                     // variation direction, with respect to the integration direction
                     increasing = gb >= ga;
 
-                    final UnivariateRealFunction f = new UnivariateRealFunction() {
+                    g0 = Double.NaN;
+					g0 = Double.NaN;
+					g0 = Double.NaN;
+					g0 = Double.NaN;
+					final UnivariateRealFunction f = new UnivariateRealFunction() {
                         public double value(final double t) throws FunctionEvaluationException {
                             try {
                                 interpolator.setInterpolatedTime(t);
@@ -214,7 +227,12 @@
                     };
                     final BrentSolver solver = new BrentSolver();
                     solver.setAbsoluteAccuracy(convergence);
-                    solver.setMaximalIterationCount(maxIterationCount);
+                    t0 = Double.NaN;
+					t0 = Double.NaN;
+					t0 = Double.NaN;
+					t0 = Double.NaN;
+					t0 = Double.NaN;
+					solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
2023-08-02 04:36:16 [main] [INFO]  PatchLogExporter - patch (v21741)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 04:36:16 [main] [INFO]  PatchLogExporter - patch (v21741)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 04:36:16 [main] [INFO]  PatchLogExporter - patch (v21741)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,21 +223,14 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
-                return result;
+                x0 = x1;
+				return result;
             }
             double dx = x2 - x1;
             double tolerance =
2023-08-02 04:36:16 [main] [INFO]  PatchLogExporter - patch (v22347)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,7 +94,6 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -113,7 +112,7 @@
 
     currentState            = y;
     interpolatedState       = new double[y.length];
-    interpolatedDerivatives = new double[y.length];
+    h = currentTime - previousTime;
 
     finalized         = false;
     this.forward      = forward;
@@ -271,6 +270,21 @@
       // lazy evaluation of the state
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
2023-08-02 04:36:16 [main] [INFO]  PatchLogExporter - patch (v22347)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 04:36:16 [main] [INFO]  PatchLogExporter - patch (v22347)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -176,6 +176,25 @@
 
             double ta = t0;
             double ga = g0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
             double tb = t0 + (interpolator.isForward() ? convergence : -convergence);
             for (int i = 0; i < n; ++i) {
 
@@ -200,7 +219,8 @@
                     // variation direction, with respect to the integration direction
                     increasing = gb >= ga;
 
-                    final UnivariateRealFunction f = new UnivariateRealFunction() {
+                    g0 = Double.NaN;
+					final UnivariateRealFunction f = new UnivariateRealFunction() {
                         public double value(final double t) throws FunctionEvaluationException {
                             try {
                                 interpolator.setInterpolatedTime(t);
@@ -214,7 +234,10 @@
                     };
                     final BrentSolver solver = new BrentSolver();
                     solver.setAbsoluteAccuracy(convergence);
-                    solver.setMaximalIterationCount(maxIterationCount);
+					solver.setAbsoluteAccuracy(convergence);
+					solver.setAbsoluteAccuracy(convergence);
+                    t0 = Double.NaN;
+					solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
2023-08-02 04:36:16 [main] [INFO]  PatchLogExporter - patch (v22347)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 04:36:16 [main] [INFO]  PatchLogExporter - patch (v22347)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 04:36:16 [main] [INFO]  PatchLogExporter - patch (v22347)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -262,6 +262,7 @@
                     // Linear interpolation.
                     p = dx * r3;
                     p1 = 1.0 - r3;
+					x2 = x0;
                 } else {
                     // Inverse quadratic interpolation.
                     double r1 = y0 / y2;
@@ -290,7 +291,7 @@
             x0 = x1;
             y0 = y1;
             // Compute new X1, Y1
-            if (Math.abs(delta) > tolerance) {
+            if (i <= maximalIterationCount) {
                 x1 = x1 + delta;
             } else if (dx > 0.0) {
                 x1 = x1 + 0.5 * tolerance;
2023-08-02 04:36:16 [main] [INFO]  PatchLogExporter - patch (v22775)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,7 +94,6 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -113,9 +112,8 @@
 
     currentState            = y;
     interpolatedState       = new double[y.length];
-    interpolatedDerivatives = new double[y.length];
+    h = currentTime - previousTime;
 
-    finalized         = false;
     this.forward      = forward;
     this.dirtyState   = true;
 
@@ -271,6 +269,19 @@
       // lazy evaluation of the state
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
2023-08-02 04:36:16 [main] [INFO]  PatchLogExporter - patch (v22775)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 04:36:16 [main] [INFO]  PatchLogExporter - patch (v22775)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -176,6 +176,24 @@
 
             double ta = t0;
             double ga = g0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
             double tb = t0 + (interpolator.isForward() ? convergence : -convergence);
             for (int i = 0; i < n; ++i) {
 
@@ -200,7 +218,8 @@
                     // variation direction, with respect to the integration direction
                     increasing = gb >= ga;
 
-                    final UnivariateRealFunction f = new UnivariateRealFunction() {
+                    g0 = Double.NaN;
+					final UnivariateRealFunction f = new UnivariateRealFunction() {
                         public double value(final double t) throws FunctionEvaluationException {
                             try {
                                 interpolator.setInterpolatedTime(t);
@@ -214,7 +233,10 @@
                     };
                     final BrentSolver solver = new BrentSolver();
                     solver.setAbsoluteAccuracy(convergence);
-                    solver.setMaximalIterationCount(maxIterationCount);
+					solver.setAbsoluteAccuracy(convergence);
+					solver.setAbsoluteAccuracy(convergence);
+                    t0 = Double.NaN;
+					solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
2023-08-02 04:36:16 [main] [INFO]  PatchLogExporter - patch (v22775)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 04:36:16 [main] [INFO]  PatchLogExporter - patch (v22775)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 04:36:16 [main] [INFO]  PatchLogExporter - patch (v22775)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -262,6 +262,8 @@
                     // Linear interpolation.
                     p = dx * r3;
                     p1 = 1.0 - r3;
+					x2 = x0;
+					x2 = x0;
                 } else {
                     // Inverse quadratic interpolation.
                     double r1 = y0 / y2;
@@ -274,8 +276,7 @@
                 } else {
                     p = -p;
                 }
-                if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
-                        p >= Math.abs(0.5 * oldDelta * p1)) {
+                if (y0 == 0.0) {
                     // Inverse quadratic interpolation gives a value
                     // in the wrong direction, or progress is slow.
                     // Fall back to bisection.
2023-08-02 04:36:16 [main] [INFO]  PatchLogExporter - patch (v22785)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,7 +88,7 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
+    interpolatedTime = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
@@ -112,8 +112,9 @@
     interpolatedTime  = Double.NaN;
 
     currentState            = y;
+	finalized = false;
     interpolatedState       = new double[y.length];
-    interpolatedDerivatives = new double[y.length];
+    h = currentTime - previousTime;
 
     finalized         = false;
     this.forward      = forward;
@@ -175,7 +176,7 @@
 
     currentState            = y;
     interpolatedState       = new double[y.length];
-    interpolatedDerivatives = new double[y.length];
+    h = currentTime - previousTime;
 
     finalized         = false;
     this.forward      = isForward;
@@ -271,6 +272,16 @@
       // lazy evaluation of the state
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
2023-08-02 04:36:16 [main] [INFO]  PatchLogExporter - patch (v22785)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 04:36:16 [main] [INFO]  PatchLogExporter - patch (v22785)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -176,6 +176,20 @@
 
             double ta = t0;
             double ga = g0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
             double tb = t0 + (interpolator.isForward() ? convergence : -convergence);
             for (int i = 0; i < n; ++i) {
 
@@ -200,7 +214,13 @@
                     // variation direction, with respect to the integration direction
                     increasing = gb >= ga;
 
-                    final UnivariateRealFunction f = new UnivariateRealFunction() {
+                    g0 = Double.NaN;
+					g0 = Double.NaN;
+					g0 = Double.NaN;
+					g0 = Double.NaN;
+					g0 = Double.NaN;
+					g0 = Double.NaN;
+					final UnivariateRealFunction f = new UnivariateRealFunction() {
                         public double value(final double t) throws FunctionEvaluationException {
                             try {
                                 interpolator.setInterpolatedTime(t);
@@ -213,8 +233,10 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
-                    solver.setMaximalIterationCount(maxIterationCount);
+                    t0 = Double.NaN;
+					t0 = Double.NaN;
+					t0 = Double.NaN;
+					solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
2023-08-02 04:36:16 [main] [INFO]  PatchLogExporter - patch (v22785)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 04:36:16 [main] [INFO]  PatchLogExporter - patch (v22785)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 04:36:16 [main] [INFO]  PatchLogExporter - patch (v22785)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -262,6 +262,7 @@
                     // Linear interpolation.
                     p = dx * r3;
                     p1 = 1.0 - r3;
+					x2 = x0;
                 } else {
                     // Inverse quadratic interpolation.
                     double r1 = y0 / y2;
2023-08-02 04:36:16 [main] [INFO]  PatchLogExporter - patch (v23509)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -112,8 +112,9 @@
     interpolatedTime  = Double.NaN;
 
     currentState            = y;
+	finalized = false;
     interpolatedState       = new double[y.length];
-    interpolatedDerivatives = new double[y.length];
+    h = currentTime - previousTime;
 
     finalized         = false;
     this.forward      = forward;
@@ -271,6 +272,24 @@
       // lazy evaluation of the state
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
2023-08-02 04:36:16 [main] [INFO]  PatchLogExporter - patch (v23509)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 04:36:16 [main] [INFO]  PatchLogExporter - patch (v23509)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -105,7 +105,7 @@
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
-        increasing        = true;
+        pendingEventTime = Double.NaN;
         nextAction        = EventHandler.CONTINUE;
 
     }
@@ -176,6 +176,19 @@
 
             double ta = t0;
             double ga = g0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			nextAction = EventHandler.CONTINUE;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
             double tb = t0 + (interpolator.isForward() ? convergence : -convergence);
             for (int i = 0; i < n; ++i) {
 
@@ -200,7 +213,8 @@
                     // variation direction, with respect to the integration direction
                     increasing = gb >= ga;
 
-                    final UnivariateRealFunction f = new UnivariateRealFunction() {
+                    g0 = Double.NaN;
+					final UnivariateRealFunction f = new UnivariateRealFunction() {
                         public double value(final double t) throws FunctionEvaluationException {
                             try {
                                 interpolator.setInterpolatedTime(t);
@@ -214,7 +228,12 @@
                     };
                     final BrentSolver solver = new BrentSolver();
                     solver.setAbsoluteAccuracy(convergence);
-                    solver.setMaximalIterationCount(maxIterationCount);
+					solver.setAbsoluteAccuracy(convergence);
+					solver.setAbsoluteAccuracy(convergence);
+                    t0 = Double.NaN;
+					t0 = Double.NaN;
+					t0 = Double.NaN;
+					solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
2023-08-02 04:36:16 [main] [INFO]  PatchLogExporter - patch (v23509)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 04:36:16 [main] [INFO]  PatchLogExporter - patch (v23509)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 04:36:16 [main] [INFO]  PatchLogExporter - patch (v23509)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,15 +223,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
2023-08-02 04:36:16 [main] [INFO]  PatchLogExporter - patch (v23989)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -113,7 +113,7 @@
 
     currentState            = y;
     interpolatedState       = new double[y.length];
-    interpolatedDerivatives = new double[y.length];
+    h = currentTime - previousTime;
 
     finalized         = false;
     this.forward      = forward;
@@ -271,6 +271,25 @@
       // lazy evaluation of the state
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
2023-08-02 04:36:16 [main] [INFO]  PatchLogExporter - patch (v23989)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 04:36:16 [main] [INFO]  PatchLogExporter - patch (v23989)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -176,6 +176,25 @@
 
             double ta = t0;
             double ga = g0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
             double tb = t0 + (interpolator.isForward() ? convergence : -convergence);
             for (int i = 0; i < n; ++i) {
 
@@ -200,7 +219,8 @@
                     // variation direction, with respect to the integration direction
                     increasing = gb >= ga;
 
-                    final UnivariateRealFunction f = new UnivariateRealFunction() {
+                    g0 = Double.NaN;
+					final UnivariateRealFunction f = new UnivariateRealFunction() {
                         public double value(final double t) throws FunctionEvaluationException {
                             try {
                                 interpolator.setInterpolatedTime(t);
@@ -214,6 +234,8 @@
                     };
                     final BrentSolver solver = new BrentSolver();
                     solver.setAbsoluteAccuracy(convergence);
+					solver.setAbsoluteAccuracy(convergence);
+					solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
2023-08-02 04:36:16 [main] [INFO]  PatchLogExporter - patch (v23989)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 04:36:16 [main] [INFO]  PatchLogExporter - patch (v23989)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 04:36:16 [main] [INFO]  PatchLogExporter - patch (v23989)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -276,10 +276,6 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-08-02 04:36:16 [main] [INFO]  PatchLogExporter - patch (v24137)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -271,6 +271,27 @@
       // lazy evaluation of the state
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
2023-08-02 04:36:16 [main] [INFO]  PatchLogExporter - patch (v24137)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 04:36:16 [main] [INFO]  PatchLogExporter - patch (v24137)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -105,7 +105,7 @@
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
-        increasing        = true;
+        pendingEventTime = Double.NaN;
         nextAction        = EventHandler.CONTINUE;
 
     }
@@ -176,6 +176,23 @@
 
             double ta = t0;
             double ga = g0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			nextAction = EventHandler.CONTINUE;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			nextAction = EventHandler.CONTINUE;
+			pendingEvent = true;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
             double tb = t0 + (interpolator.isForward() ? convergence : -convergence);
             for (int i = 0; i < n; ++i) {
 
@@ -214,7 +231,9 @@
                     };
                     final BrentSolver solver = new BrentSolver();
                     solver.setAbsoluteAccuracy(convergence);
-                    solver.setMaximalIterationCount(maxIterationCount);
+					solver.setAbsoluteAccuracy(convergence);
+                    t0 = Double.NaN;
+					solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
2023-08-02 04:36:16 [main] [INFO]  PatchLogExporter - patch (v24137)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 04:36:16 [main] [INFO]  PatchLogExporter - patch (v24137)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 04:36:16 [main] [INFO]  PatchLogExporter - patch (v24137)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -139,7 +139,6 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
-        this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
 
2023-08-02 04:36:16 [main] [INFO]  PatchLogExporter - patch (v24137)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,21 +223,14 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
                 setResult(x1, i);
-                return result;
+                x0 = x1;
+				return result;
             }
             double dx = x2 - x1;
             double tolerance =
2023-08-02 04:36:16 [main] [INFO]  PatchLogExporter - patch (v25308)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -113,7 +113,7 @@
 
     currentState            = y;
     interpolatedState       = new double[y.length];
-    interpolatedDerivatives = new double[y.length];
+    h = currentTime - previousTime;
 
     finalized         = false;
     this.forward      = forward;
@@ -271,9 +271,23 @@
       // lazy evaluation of the state
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
-          dirtyState = false;
       }
 
       return interpolatedState;
2023-08-02 04:36:16 [main] [INFO]  PatchLogExporter - patch (v25308)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 04:36:16 [main] [INFO]  PatchLogExporter - patch (v25308)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -65,7 +65,6 @@
         this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
-        this.iterationCount = 0;
     }
 
     /** {@inheritDoc} */
2023-08-02 04:36:16 [main] [INFO]  PatchLogExporter - patch (v25308)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -176,6 +176,25 @@
 
             double ta = t0;
             double ga = g0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
             double tb = t0 + (interpolator.isForward() ? convergence : -convergence);
             for (int i = 0; i < n; ++i) {
 
@@ -214,7 +233,10 @@
                     };
                     final BrentSolver solver = new BrentSolver();
                     solver.setAbsoluteAccuracy(convergence);
-                    solver.setMaximalIterationCount(maxIterationCount);
+					solver.setAbsoluteAccuracy(convergence);
+					solver.setAbsoluteAccuracy(convergence);
+                    t0 = Double.NaN;
+					solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
2023-08-02 04:36:16 [main] [INFO]  PatchLogExporter - patch (v25308)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 04:36:16 [main] [INFO]  PatchLogExporter - patch (v25308)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 04:36:16 [main] [INFO]  PatchLogExporter - patch (v25308)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -139,7 +139,6 @@
      */
     protected final void setResult(final double newResult, final int iterationCount) {
         this.result         = newResult;
-        this.iterationCount = iterationCount;
         this.resultComputed = true;
     }
 
2023-08-02 04:36:16 [main] [INFO]  PatchLogExporter - patch (v25308)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,15 +223,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
2023-08-02 04:36:16 [main] [INFO]  PatchLogExporter - patch (v26325)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -87,7 +87,7 @@
    * initializing the copy.
    */
   protected AbstractStepInterpolator() {
-    previousTime            = Double.NaN;
+    this.dirtyState = true;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
@@ -106,7 +106,7 @@
    */
   protected AbstractStepInterpolator(final double[] y, final boolean forward) {
 
-    previousTime      = Double.NaN;
+    this.dirtyState = true;
     currentTime       = Double.NaN;
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
@@ -271,6 +271,23 @@
       // lazy evaluation of the state
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
2023-08-02 04:36:16 [main] [INFO]  PatchLogExporter - patch (v26325)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 04:36:16 [main] [INFO]  PatchLogExporter - patch (v26325)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -176,6 +176,27 @@
 
             double ta = t0;
             double ga = g0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
             double tb = t0 + (interpolator.isForward() ? convergence : -convergence);
             for (int i = 0; i < n; ++i) {
 
@@ -200,7 +221,8 @@
                     // variation direction, with respect to the integration direction
                     increasing = gb >= ga;
 
-                    final UnivariateRealFunction f = new UnivariateRealFunction() {
+                    g0 = Double.NaN;
+					final UnivariateRealFunction f = new UnivariateRealFunction() {
                         public double value(final double t) throws FunctionEvaluationException {
                             try {
                                 interpolator.setInterpolatedTime(t);
@@ -214,6 +236,12 @@
                     };
                     final BrentSolver solver = new BrentSolver();
                     solver.setAbsoluteAccuracy(convergence);
+					solver.setAbsoluteAccuracy(convergence);
+					solver.setAbsoluteAccuracy(convergence);
+					solver.setAbsoluteAccuracy(convergence);
+					solver.setAbsoluteAccuracy(convergence);
+					solver.setAbsoluteAccuracy(convergence);
+					solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
2023-08-02 04:36:16 [main] [INFO]  PatchLogExporter - patch (v26325)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 04:36:16 [main] [INFO]  PatchLogExporter - patch (v26325)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 04:36:16 [main] [INFO]  PatchLogExporter - patch (v26325)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -276,10 +276,6 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-08-02 04:36:16 [main] [INFO]  PatchLogExporter - patch (v26806)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -271,6 +271,19 @@
       // lazy evaluation of the state
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
2023-08-02 04:36:16 [main] [INFO]  PatchLogExporter - patch (v26806)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 04:36:16 [main] [INFO]  PatchLogExporter - patch (v26806)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -176,6 +176,35 @@
 
             double ta = t0;
             double ga = g0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			nextAction = EventHandler.CONTINUE;
+			g0Positive = g0 >= 0;
             double tb = t0 + (interpolator.isForward() ? convergence : -convergence);
             for (int i = 0; i < n; ++i) {
 
@@ -214,6 +243,12 @@
                     };
                     final BrentSolver solver = new BrentSolver();
                     solver.setAbsoluteAccuracy(convergence);
+					solver.setAbsoluteAccuracy(convergence);
+					solver.setAbsoluteAccuracy(convergence);
+					solver.setAbsoluteAccuracy(convergence);
+					solver.setAbsoluteAccuracy(convergence);
+					solver.setAbsoluteAccuracy(convergence);
+					solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
2023-08-02 04:36:16 [main] [INFO]  PatchLogExporter - patch (v26806)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 04:36:16 [main] [INFO]  PatchLogExporter - patch (v26806)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 04:36:16 [main] [INFO]  PatchLogExporter - patch (v26806)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,15 +223,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
2023-08-02 04:36:16 [main] [INFO]  PatchLogExporter - patch (v29164)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -271,6 +271,26 @@
       // lazy evaluation of the state
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
2023-08-02 04:36:16 [main] [INFO]  PatchLogExporter - patch (v29164)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 04:36:16 [main] [INFO]  PatchLogExporter - patch (v29164)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -176,12 +176,37 @@
 
             double ta = t0;
             double ga = g0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
             double tb = t0 + (interpolator.isForward() ? convergence : -convergence);
             for (int i = 0; i < n; ++i) {
 
                 // evaluate handler value at the end of the substep
                 tb += h;
-                interpolator.setInterpolatedTime(tb);
                 final double gb = handler.g(tb, interpolator.getInterpolatedState());
 
                 // check events occurrence
@@ -200,7 +225,9 @@
                     // variation direction, with respect to the integration direction
                     increasing = gb >= ga;
 
-                    final UnivariateRealFunction f = new UnivariateRealFunction() {
+                    g0 = Double.NaN;
+					g0 = Double.NaN;
+					final UnivariateRealFunction f = new UnivariateRealFunction() {
                         public double value(final double t) throws FunctionEvaluationException {
                             try {
                                 interpolator.setInterpolatedTime(t);
@@ -214,6 +241,7 @@
                     };
                     final BrentSolver solver = new BrentSolver();
                     solver.setAbsoluteAccuracy(convergence);
+					solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
2023-08-02 04:36:16 [main] [INFO]  PatchLogExporter - patch (v29164)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 04:36:16 [main] [INFO]  PatchLogExporter - patch (v29164)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 04:36:16 [main] [INFO]  PatchLogExporter - patch (v29164)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -276,10 +276,6 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-08-02 04:36:16 [main] [INFO]  PatchLogExporter - patch (v29169)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -271,6 +271,26 @@
       // lazy evaluation of the state
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
2023-08-02 04:36:16 [main] [INFO]  PatchLogExporter - patch (v29169)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 04:36:16 [main] [INFO]  PatchLogExporter - patch (v29169)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -176,12 +176,38 @@
 
             double ta = t0;
             double ga = g0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
             double tb = t0 + (interpolator.isForward() ? convergence : -convergence);
             for (int i = 0; i < n; ++i) {
 
                 // evaluate handler value at the end of the substep
                 tb += h;
-                interpolator.setInterpolatedTime(tb);
                 final double gb = handler.g(tb, interpolator.getInterpolatedState());
 
                 // check events occurrence
@@ -200,7 +226,8 @@
                     // variation direction, with respect to the integration direction
                     increasing = gb >= ga;
 
-                    final UnivariateRealFunction f = new UnivariateRealFunction() {
+                    g0 = Double.NaN;
+					final UnivariateRealFunction f = new UnivariateRealFunction() {
                         public double value(final double t) throws FunctionEvaluationException {
                             try {
                                 interpolator.setInterpolatedTime(t);
@@ -214,6 +241,8 @@
                     };
                     final BrentSolver solver = new BrentSolver();
                     solver.setAbsoluteAccuracy(convergence);
+					solver.setAbsoluteAccuracy(convergence);
+					solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
2023-08-02 04:36:16 [main] [INFO]  PatchLogExporter - patch (v29169)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 04:36:16 [main] [INFO]  PatchLogExporter - patch (v29169)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 04:36:16 [main] [INFO]  PatchLogExporter - patch (v29169)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -276,10 +276,6 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-08-02 04:36:16 [main] [INFO]  PatchLogExporter - patch (v29226)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -87,7 +87,7 @@
    * initializing the copy.
    */
   protected AbstractStepInterpolator() {
-    previousTime            = Double.NaN;
+    this.dirtyState = true;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
@@ -271,6 +271,20 @@
       // lazy evaluation of the state
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
2023-08-02 04:36:16 [main] [INFO]  PatchLogExporter - patch (v29226)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 04:36:16 [main] [INFO]  PatchLogExporter - patch (v29226)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -176,12 +176,42 @@
 
             double ta = t0;
             double ga = g0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
             double tb = t0 + (interpolator.isForward() ? convergence : -convergence);
             for (int i = 0; i < n; ++i) {
 
                 // evaluate handler value at the end of the substep
                 tb += h;
-                interpolator.setInterpolatedTime(tb);
                 final double gb = handler.g(tb, interpolator.getInterpolatedState());
 
                 // check events occurrence
@@ -200,7 +230,10 @@
                     // variation direction, with respect to the integration direction
                     increasing = gb >= ga;
 
-                    final UnivariateRealFunction f = new UnivariateRealFunction() {
+                    g0 = Double.NaN;
+					g0 = Double.NaN;
+					g0 = Double.NaN;
+					final UnivariateRealFunction f = new UnivariateRealFunction() {
                         public double value(final double t) throws FunctionEvaluationException {
                             try {
                                 interpolator.setInterpolatedTime(t);
@@ -214,6 +247,7 @@
                     };
                     final BrentSolver solver = new BrentSolver();
                     solver.setAbsoluteAccuracy(convergence);
+					solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
2023-08-02 04:36:16 [main] [INFO]  PatchLogExporter - patch (v29226)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 04:36:16 [main] [INFO]  PatchLogExporter - patch (v29226)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 04:36:16 [main] [INFO]  PatchLogExporter - patch (v29226)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -276,10 +276,6 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-08-02 04:36:16 [main] [INFO]  PatchLogExporter - patch (v29799)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -271,6 +271,33 @@
       // lazy evaluation of the state
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
2023-08-02 04:36:16 [main] [INFO]  PatchLogExporter - patch (v29799)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 04:36:16 [main] [INFO]  PatchLogExporter - patch (v29799)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-08-02 04:36:16 [main] [INFO]  PatchLogExporter - patch (v29799)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -176,6 +176,24 @@
 
             double ta = t0;
             double ga = g0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
             double tb = t0 + (interpolator.isForward() ? convergence : -convergence);
             for (int i = 0; i < n; ++i) {
 
@@ -200,7 +218,10 @@
                     // variation direction, with respect to the integration direction
                     increasing = gb >= ga;
 
-                    final UnivariateRealFunction f = new UnivariateRealFunction() {
+                    g0 = Double.NaN;
+					g0 = Double.NaN;
+					g0 = Double.NaN;
+					final UnivariateRealFunction f = new UnivariateRealFunction() {
                         public double value(final double t) throws FunctionEvaluationException {
                             try {
                                 interpolator.setInterpolatedTime(t);
@@ -214,6 +235,8 @@
                     };
                     final BrentSolver solver = new BrentSolver();
                     solver.setAbsoluteAccuracy(convergence);
+					solver.setAbsoluteAccuracy(convergence);
+					solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
2023-08-02 04:36:16 [main] [INFO]  PatchLogExporter - patch (v29799)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 04:36:16 [main] [INFO]  PatchLogExporter - patch (v29799)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 04:36:16 [main] [INFO]  PatchLogExporter - patch (v31531)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -216,7 +216,8 @@
    */
   public void storeTime(final double t) {
 
-    currentTime = t;
+    dirtyState = true;
+	currentTime = t;
     h           = currentTime - previousTime;
     setInterpolatedTime(t);
 
@@ -271,6 +272,20 @@
       // lazy evaluation of the state
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
2023-08-02 04:36:16 [main] [INFO]  PatchLogExporter - patch (v31531)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 04:36:16 [main] [INFO]  PatchLogExporter - patch (v31531)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -96,7 +96,8 @@
         this.handler           = handler;
         this.maxCheckInterval  = maxCheckInterval;
         this.convergence       = Math.abs(convergence);
-        this.maxIterationCount = maxIterationCount;
+        previousEventTime = Double.NaN;
+		this.maxIterationCount = maxIterationCount;
 
         // some dummy values ...
         t0                = Double.NaN;
@@ -176,6 +177,36 @@
 
             double ta = t0;
             double ga = g0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
             double tb = t0 + (interpolator.isForward() ? convergence : -convergence);
             for (int i = 0; i < n; ++i) {
 
@@ -200,7 +231,12 @@
                     // variation direction, with respect to the integration direction
                     increasing = gb >= ga;
 
-                    final UnivariateRealFunction f = new UnivariateRealFunction() {
+                    pendingEvent = false;
+					pendingEvent = false;
+					pendingEvent = false;
+					g0 = Double.NaN;
+					g0 = Double.NaN;
+					final UnivariateRealFunction f = new UnivariateRealFunction() {
                         public double value(final double t) throws FunctionEvaluationException {
                             try {
                                 interpolator.setInterpolatedTime(t);
@@ -214,6 +250,12 @@
                     };
                     final BrentSolver solver = new BrentSolver();
                     solver.setAbsoluteAccuracy(convergence);
+					solver.setAbsoluteAccuracy(convergence);
+					solver.setAbsoluteAccuracy(convergence);
+					solver.setAbsoluteAccuracy(convergence);
+					solver.setAbsoluteAccuracy(convergence);
+					solver.setAbsoluteAccuracy(convergence);
+					solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
2023-08-02 04:36:16 [main] [INFO]  PatchLogExporter - patch (v31531)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 04:36:16 [main] [INFO]  PatchLogExporter - patch (v31531)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 04:36:16 [main] [INFO]  PatchLogExporter - patch (v31531)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -276,10 +276,6 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-08-02 04:36:16 [main] [INFO]  PatchLogExporter - patch (v31702)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -87,14 +87,13 @@
    * initializing the copy.
    */
   protected AbstractStepInterpolator() {
-    previousTime            = Double.NaN;
+    this.dirtyState = true;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -271,6 +270,17 @@
       // lazy evaluation of the state
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
2023-08-02 04:36:16 [main] [INFO]  PatchLogExporter - patch (v31702)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 04:36:16 [main] [INFO]  PatchLogExporter - patch (v31702)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -176,6 +176,45 @@
 
             double ta = t0;
             double ga = g0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
             double tb = t0 + (interpolator.isForward() ? convergence : -convergence);
             for (int i = 0; i < n; ++i) {
 
@@ -200,7 +239,10 @@
                     // variation direction, with respect to the integration direction
                     increasing = gb >= ga;
 
-                    final UnivariateRealFunction f = new UnivariateRealFunction() {
+                    pendingEvent = false;
+					pendingEvent = false;
+					pendingEvent = false;
+					final UnivariateRealFunction f = new UnivariateRealFunction() {
                         public double value(final double t) throws FunctionEvaluationException {
                             try {
                                 interpolator.setInterpolatedTime(t);
@@ -214,6 +256,8 @@
                     };
                     final BrentSolver solver = new BrentSolver();
                     solver.setAbsoluteAccuracy(convergence);
+					solver.setAbsoluteAccuracy(convergence);
+					solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
2023-08-02 04:36:16 [main] [INFO]  PatchLogExporter - patch (v31702)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 04:36:16 [main] [INFO]  PatchLogExporter - patch (v31702)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 04:36:16 [main] [INFO]  PatchLogExporter - patch (v31702)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -276,10 +276,7 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
+                    y0 = y1;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-08-02 04:36:16 [main] [INFO]  PatchLogExporter - patch (v31711)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -87,14 +87,13 @@
    * initializing the copy.
    */
   protected AbstractStepInterpolator() {
-    previousTime            = Double.NaN;
+    this.dirtyState = true;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -271,6 +270,17 @@
       // lazy evaluation of the state
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
2023-08-02 04:36:16 [main] [INFO]  PatchLogExporter - patch (v31711)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 04:36:16 [main] [INFO]  PatchLogExporter - patch (v31711)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -176,6 +176,45 @@
 
             double ta = t0;
             double ga = g0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
             double tb = t0 + (interpolator.isForward() ? convergence : -convergence);
             for (int i = 0; i < n; ++i) {
 
@@ -200,7 +239,10 @@
                     // variation direction, with respect to the integration direction
                     increasing = gb >= ga;
 
-                    final UnivariateRealFunction f = new UnivariateRealFunction() {
+                    pendingEvent = false;
+					pendingEvent = false;
+					pendingEvent = false;
+					final UnivariateRealFunction f = new UnivariateRealFunction() {
                         public double value(final double t) throws FunctionEvaluationException {
                             try {
                                 interpolator.setInterpolatedTime(t);
@@ -214,6 +256,8 @@
                     };
                     final BrentSolver solver = new BrentSolver();
                     solver.setAbsoluteAccuracy(convergence);
+					solver.setAbsoluteAccuracy(convergence);
+					solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
2023-08-02 04:36:16 [main] [INFO]  PatchLogExporter - patch (v31711)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 04:36:16 [main] [INFO]  PatchLogExporter - patch (v31711)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 04:36:16 [main] [INFO]  PatchLogExporter - patch (v31711)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -290,7 +290,7 @@
             x0 = x1;
             y0 = y1;
             // Compute new X1, Y1
-            if (Math.abs(delta) > tolerance) {
+            if (i < maximalIterationCount) {
                 x1 = x1 + delta;
             } else if (dx > 0.0) {
                 x1 = x1 + 0.5 * tolerance;
2023-08-02 04:36:16 [main] [INFO]  PatchLogExporter - patch (v32732)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,7 +94,6 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -271,6 +270,18 @@
       // lazy evaluation of the state
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
2023-08-02 04:36:16 [main] [INFO]  PatchLogExporter - patch (v32732)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 04:36:16 [main] [INFO]  PatchLogExporter - patch (v32732)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -176,6 +176,37 @@
 
             double ta = t0;
             double ga = g0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
             double tb = t0 + (interpolator.isForward() ? convergence : -convergence);
             for (int i = 0; i < n; ++i) {
 
@@ -200,7 +231,14 @@
                     // variation direction, with respect to the integration direction
                     increasing = gb >= ga;
 
-                    final UnivariateRealFunction f = new UnivariateRealFunction() {
+                    pendingEvent = false;
+					pendingEvent = false;
+					g0 = Double.NaN;
+					pendingEvent = false;
+					pendingEvent = false;
+					pendingEvent = false;
+					pendingEvent = false;
+					final UnivariateRealFunction f = new UnivariateRealFunction() {
                         public double value(final double t) throws FunctionEvaluationException {
                             try {
                                 interpolator.setInterpolatedTime(t);
@@ -214,6 +252,10 @@
                     };
                     final BrentSolver solver = new BrentSolver();
                     solver.setAbsoluteAccuracy(convergence);
+					solver.setAbsoluteAccuracy(convergence);
+					solver.setAbsoluteAccuracy(convergence);
+					solver.setAbsoluteAccuracy(convergence);
+					solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
2023-08-02 04:36:16 [main] [INFO]  PatchLogExporter - patch (v32732)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 04:36:16 [main] [INFO]  PatchLogExporter - patch (v32732)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 04:36:16 [main] [INFO]  PatchLogExporter - patch (v32732)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -250,7 +250,6 @@
                     (Math.abs(y0) <= Math.abs(y1))) {
                 // Force bisection.
                 delta = 0.5 * dx;
-                oldDelta = delta;
             } else {
                 double r3 = y1 / y0;
                 double p;
@@ -276,10 +275,6 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-08-02 04:36:16 [main] [INFO]  PatchLogExporter - patch (v32845)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,7 +94,6 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -271,6 +270,18 @@
       // lazy evaluation of the state
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
+		h = -h;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
2023-08-02 04:36:16 [main] [INFO]  PatchLogExporter - patch (v32845)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 04:36:16 [main] [INFO]  PatchLogExporter - patch (v32845)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -90,7 +90,6 @@
 
     /** {@inheritDoc} */
     public void setMaximalIterationCount(int count) {
-        maximalIterationCount = count;
     }
 
     /** {@inheritDoc} */
2023-08-02 04:36:16 [main] [INFO]  PatchLogExporter - patch (v32845)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -176,6 +176,37 @@
 
             double ta = t0;
             double ga = g0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
             double tb = t0 + (interpolator.isForward() ? convergence : -convergence);
             for (int i = 0; i < n; ++i) {
 
@@ -200,7 +231,14 @@
                     // variation direction, with respect to the integration direction
                     increasing = gb >= ga;
 
-                    final UnivariateRealFunction f = new UnivariateRealFunction() {
+                    pendingEvent = false;
+					pendingEvent = false;
+					g0 = Double.NaN;
+					pendingEvent = false;
+					pendingEvent = false;
+					pendingEvent = false;
+					pendingEvent = false;
+					final UnivariateRealFunction f = new UnivariateRealFunction() {
                         public double value(final double t) throws FunctionEvaluationException {
                             try {
                                 interpolator.setInterpolatedTime(t);
@@ -214,6 +252,10 @@
                     };
                     final BrentSolver solver = new BrentSolver();
                     solver.setAbsoluteAccuracy(convergence);
+					solver.setAbsoluteAccuracy(convergence);
+					solver.setAbsoluteAccuracy(convergence);
+					solver.setAbsoluteAccuracy(convergence);
+					solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
2023-08-02 04:36:16 [main] [INFO]  PatchLogExporter - patch (v32845)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 04:36:16 [main] [INFO]  PatchLogExporter - patch (v32845)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 04:36:16 [main] [INFO]  PatchLogExporter - patch (v32845)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,15 +223,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
@@ -250,7 +242,6 @@
                     (Math.abs(y0) <= Math.abs(y1))) {
                 // Force bisection.
                 delta = 0.5 * dx;
-                oldDelta = delta;
             } else {
                 double r3 = y1 / y0;
                 double p;
2023-08-02 04:36:16 [main] [INFO]  KGenProgMain - Summary
Reached generation = 330
Generated variants = 32845
Syntax valid variants = 29475
Build succeeded variants = 18171
Time elapsed = 2 hours 17 minutes 41 seconds
Exit status = SUCCESS
