2023-08-02 04:36:17 [main] [WARN]  Configuration$Builder - The directory where kGenProg is running is different from the root directory of the given target project.
2023-08-02 04:36:17 [main] [WARN]  Configuration$Builder - If the target project includes test cases with file I/O, such test cases won't run correctly.
2023-08-02 04:36:17 [main] [WARN]  Configuration$Builder - We recommend you running kGenProg with the root directory of the target project as the current directory.
2023-08-02 04:36:17 [main] [INFO]  KGenProgMain - 
==================== kGenProg Configuration ====================
configPath = /Users/haradakanon/Downloads/kGenProg-1.8.2/example/math78/kgenprog-78.toml (set by command line)
rootDir = /Users/haradakanon/Downloads/kGenProg-1.8.2/example/math78 (set in config file)
productPaths = [/Users/haradakanon/Downloads/kGenProg-1.8.2/example/math78/src/main] (set in config file)
testPaths = [/Users/haradakanon/Downloads/kGenProg-1.8.2/example/math78/src/test] (set in config file)
classPaths = []
executionTests = [org.apache.commons.math.ode.events.EventStateTest] (set in config file)
outDir = kgenprog-out
logLevel = INFO (set in config file)
mutationGeneratingCount = 50 (set in config file)
crossoverGeneratingCount = 50 (set in config file)
headcount = 25
maxGeneration = 500 (set in config file)
timeLimit = PT24H (set in config file)
testTimeLimit = PT3M (set in config file)
requiredSolutionsCount = 100 (set in config file)
randomSeed = 4 (set by command line)
scope = PACKAGE (set in config file)
faultLocalization = Zoltar (set in config file)
mutationType = Simple
crossoverType = Random
firstVariantSelectionStrategy = Random
secondVariantSelectionStrategy = Random
isPatchOutput = true (set in config file)
isHistoryRecord = false
currentDirectory = /Users/haradakanon/Desktop/研究/実験データ/afterResearch
version = 1.8.2
================================================================
2023-08-02 04:36:35 [main] [INFO]  KGenProgMain - initial failed tests (1/1)
org.apache.commons.math.ode.events.EventStateTest.closeEvents: function values at endpoints do not have different signs.  Endpoints: [89.999, 153.1], Values: [-0.066, -1,142.11]

2023-08-02 04:36:35 [main] [INFO]  KGenProgMain - GA started
2023-08-02 04:36:35 [main] [INFO]  KGenProgMain - entered the era of 1st generation.
2023-08-02 04:36:42 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 seconds
Variants: generated 50, build-succeeded 17, build-failed 25, syntax-invalid 1, redundant 7
Fitness: max 1(1), min 0(16), ave 0.059
Test execution time: sum 2102 ms, max 276 ms, min 74 ms
----------------------------------------------------------------

2023-08-02 04:36:42 [main] [INFO]  KGenProgMain - entered the era of 2nd generation.
2023-08-02 04:36:46 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 seconds
Variants: generated 50, build-succeeded 10, build-failed 32, syntax-invalid 4, redundant 4
Fitness: max 1(1), min 0(9), ave 0.1
Test execution time: sum 774 ms, max 149 ms, min 59 ms
----------------------------------------------------------------

2023-08-02 04:36:46 [main] [INFO]  KGenProgMain - entered the era of 3rd generation.
2023-08-02 04:36:52 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 16 seconds
Variants: generated 100, build-succeeded 21, build-failed 30, syntax-invalid 11, redundant 38
Fitness: max 0(21), min 0(21), ave 0
Test execution time: sum 1501 ms, max 132 ms, min 53 ms
----------------------------------------------------------------

2023-08-02 04:36:52 [main] [INFO]  KGenProgMain - entered the era of 4th generation.
2023-08-02 04:36:57 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 22 seconds
Variants: generated 100, build-succeeded 30, build-failed 28, syntax-invalid 14, redundant 28
Fitness: max 0(30), min 0(30), ave 0
Test execution time: sum 1912 ms, max 113 ms, min 51 ms
----------------------------------------------------------------

2023-08-02 04:36:57 [main] [INFO]  KGenProgMain - entered the era of 5th generation.
2023-08-02 04:37:03 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 27 seconds
Variants: generated 100, build-succeeded 31, build-failed 31, syntax-invalid 11, redundant 27
Fitness: max 0(31), min 0(31), ave 0
Test execution time: sum 1945 ms, max 109 ms, min 51 ms
----------------------------------------------------------------

2023-08-02 04:37:03 [main] [INFO]  KGenProgMain - entered the era of 6th generation.
2023-08-02 04:37:08 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 33 seconds
Variants: generated 100, build-succeeded 38, build-failed 31, syntax-invalid 4, redundant 27
Fitness: max 0(38), min 0(38), ave 0
Test execution time: sum 2371 ms, max 231 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 04:37:08 [main] [INFO]  KGenProgMain - entered the era of 7th generation.
2023-08-02 04:37:14 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 38 seconds
Variants: generated 100, build-succeeded 40, build-failed 28, syntax-invalid 6, redundant 26
Fitness: max 1(1), min 0(39), ave 0.025
Test execution time: sum 2311 ms, max 85 ms, min 51 ms
----------------------------------------------------------------

2023-08-02 04:37:14 [main] [INFO]  KGenProgMain - entered the era of 8th generation.
2023-08-02 04:37:21 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 45 seconds
Variants: generated 100, build-succeeded 51, build-failed 28, syntax-invalid 6, redundant 15
Fitness: max 0(51), min 0(51), ave 0
Test execution time: sum 2971 ms, max 144 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 04:37:21 [main] [INFO]  KGenProgMain - entered the era of 9th generation.
2023-08-02 04:37:27 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 52 seconds
Variants: generated 100, build-succeeded 38, build-failed 36, syntax-invalid 6, redundant 20
Fitness: max 0(38), min 0(38), ave 0
Test execution time: sum 2359 ms, max 208 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 04:37:27 [main] [INFO]  KGenProgMain - entered the era of 10th generation.
2023-08-02 04:37:34 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 58 seconds
Variants: generated 100, build-succeeded 50, build-failed 30, syntax-invalid 8, redundant 12
Fitness: max 0(50), min 0(50), ave 0
Test execution time: sum 3054 ms, max 204 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 04:37:34 [main] [INFO]  KGenProgMain - entered the era of 11th generation.
2023-08-02 04:37:42 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 minutes 6 seconds
Variants: generated 100, build-succeeded 45, build-failed 30, syntax-invalid 11, redundant 14
Fitness: max 0(45), min 0(45), ave 0
Test execution time: sum 2758 ms, max 187 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 04:37:42 [main] [INFO]  KGenProgMain - entered the era of 12th generation.
2023-08-02 04:37:48 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 minutes 13 seconds
Variants: generated 100, build-succeeded 52, build-failed 30, syntax-invalid 7, redundant 11
Fitness: max 0(52), min 0(52), ave 0
Test execution time: sum 3093 ms, max 83 ms, min 51 ms
----------------------------------------------------------------

2023-08-02 04:37:48 [main] [INFO]  KGenProgMain - entered the era of 13th generation.
2023-08-02 04:37:56 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 minutes 21 seconds
Variants: generated 100, build-succeeded 53, build-failed 31, syntax-invalid 7, redundant 9
Fitness: max 1(1), min 0(52), ave 0.019
Test execution time: sum 3120 ms, max 133 ms, min 51 ms
----------------------------------------------------------------

2023-08-02 04:37:56 [main] [INFO]  KGenProgMain - entered the era of 14th generation.
2023-08-02 04:38:04 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 minutes 29 seconds
Variants: generated 100, build-succeeded 53, build-failed 33, syntax-invalid 5, redundant 9
Fitness: max 1(1), min 0(52), ave 0.019
Test execution time: sum 3141 ms, max 120 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 04:38:04 [main] [INFO]  KGenProgMain - entered the era of 15th generation.
2023-08-02 04:38:11 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 minutes 35 seconds
Variants: generated 100, build-succeeded 56, build-failed 29, syntax-invalid 12, redundant 3
Fitness: max 0(56), min 0(56), ave 0
Test execution time: sum 3068 ms, max 90 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 04:38:11 [main] [INFO]  KGenProgMain - entered the era of 16th generation.
2023-08-02 04:38:19 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 minutes 44 seconds
Variants: generated 100, build-succeeded 58, build-failed 32, syntax-invalid 8, redundant 2
Fitness: max 0(58), min 0(58), ave 0
Test execution time: sum 3372 ms, max 200 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 04:38:19 [main] [INFO]  KGenProgMain - entered the era of 17th generation.
2023-08-02 04:38:26 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 minutes 51 seconds
Variants: generated 100, build-succeeded 57, build-failed 29, syntax-invalid 8, redundant 6
Fitness: max 1(2), min 0(55), ave 0.035
Test execution time: sum 3132 ms, max 77 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 04:38:26 [main] [INFO]  KGenProgMain - entered the era of 18th generation.
2023-08-02 04:38:35 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 minutes 59 seconds
Variants: generated 100, build-succeeded 62, build-failed 26, syntax-invalid 7, redundant 5
Fitness: max 0(62), min 0(62), ave 0
Test execution time: sum 3524 ms, max 207 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 04:38:35 [main] [INFO]  KGenProgMain - entered the era of 19th generation.
2023-08-02 04:38:42 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 minutes 6 seconds
Variants: generated 100, build-succeeded 58, build-failed 25, syntax-invalid 10, redundant 7
Fitness: max 0(58), min 0(58), ave 0
Test execution time: sum 3177 ms, max 70 ms, min 48 ms
----------------------------------------------------------------

2023-08-02 04:38:42 [main] [INFO]  KGenProgMain - entered the era of 20th generation.
2023-08-02 04:38:49 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 minutes 14 seconds
Variants: generated 100, build-succeeded 55, build-failed 30, syntax-invalid 8, redundant 7
Fitness: max 1(1), min 0(54), ave 0.018
Test execution time: sum 3057 ms, max 129 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 04:38:49 [main] [INFO]  KGenProgMain - entered the era of 21st generation.
2023-08-02 04:38:57 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 minutes 21 seconds
Variants: generated 100, build-succeeded 61, build-failed 27, syntax-invalid 8, redundant 4
Fitness: max 1(1), min 0(60), ave 0.016
Test execution time: sum 3256 ms, max 65 ms, min 48 ms
----------------------------------------------------------------

2023-08-02 04:38:57 [main] [INFO]  KGenProgMain - entered the era of 22nd generation.
2023-08-02 04:39:05 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 minutes 30 seconds
Variants: generated 100, build-succeeded 57, build-failed 31, syntax-invalid 7, redundant 5
Fitness: max 0(57), min 0(57), ave 0
Test execution time: sum 3132 ms, max 121 ms, min 48 ms
----------------------------------------------------------------

2023-08-02 04:39:05 [main] [INFO]  KGenProgMain - entered the era of 23rd generation.
2023-08-02 04:39:13 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 minutes 37 seconds
Variants: generated 100, build-succeeded 52, build-failed 37, syntax-invalid 8, redundant 3
Fitness: max 0(52), min 0(52), ave 0
Test execution time: sum 2787 ms, max 72 ms, min 48 ms
----------------------------------------------------------------

2023-08-02 04:39:13 [main] [INFO]  KGenProgMain - entered the era of 24th generation.
2023-08-02 04:39:21 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 minutes 45 seconds
Variants: generated 100, build-succeeded 52, build-failed 29, syntax-invalid 17, redundant 2
Fitness: max 0(52), min 0(52), ave 0
Test execution time: sum 2939 ms, max 147 ms, min 48 ms
----------------------------------------------------------------

2023-08-02 04:39:21 [main] [INFO]  KGenProgMain - entered the era of 25th generation.
2023-08-02 04:39:29 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 minutes 53 seconds
Variants: generated 100, build-succeeded 57, build-failed 34, syntax-invalid 5, redundant 4
Fitness: max 0(57), min 0(57), ave 0
Test execution time: sum 2992 ms, max 73 ms, min 48 ms
----------------------------------------------------------------

2023-08-02 04:39:29 [main] [INFO]  KGenProgMain - entered the era of 26th generation.
2023-08-02 04:39:37 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 minutes 2 seconds
Variants: generated 100, build-succeeded 46, build-failed 39, syntax-invalid 13, redundant 2
Fitness: max 1(2), min 0(44), ave 0.043
Test execution time: sum 2756 ms, max 210 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 04:39:37 [main] [INFO]  KGenProgMain - entered the era of 27th generation.
2023-08-02 04:39:45 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 minutes 9 seconds
Variants: generated 100, build-succeeded 51, build-failed 27, syntax-invalid 17, redundant 5
Fitness: max 0(51), min 0(51), ave 0
Test execution time: sum 2685 ms, max 64 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 04:39:45 [main] [INFO]  KGenProgMain - entered the era of 28th generation.
2023-08-02 04:39:53 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 minutes 18 seconds
Variants: generated 100, build-succeeded 57, build-failed 25, syntax-invalid 15, redundant 3
Fitness: max 0(57), min 0(57), ave 0
Test execution time: sum 3261 ms, max 166 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 04:39:54 [main] [INFO]  KGenProgMain - entered the era of 29th generation.
2023-08-02 04:40:01 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 minutes 26 seconds
Variants: generated 100, build-succeeded 50, build-failed 39, syntax-invalid 8, redundant 3
Fitness: max 0(50), min 0(50), ave 0
Test execution time: sum 2731 ms, max 74 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 04:40:01 [main] [INFO]  KGenProgMain - entered the era of 30th generation.
2023-08-02 04:40:10 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 minutes 35 seconds
Variants: generated 100, build-succeeded 50, build-failed 41, syntax-invalid 6, redundant 3
Fitness: max 0(50), min 0(50), ave 0
Test execution time: sum 2907 ms, max 172 ms, min 48 ms
----------------------------------------------------------------

2023-08-02 04:40:10 [main] [INFO]  KGenProgMain - entered the era of 31st generation.
2023-08-02 04:40:17 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 minutes 42 seconds
Variants: generated 100, build-succeeded 46, build-failed 39, syntax-invalid 11, redundant 4
Fitness: max 0(46), min 0(46), ave 0
Test execution time: sum 2451 ms, max 70 ms, min 48 ms
----------------------------------------------------------------

2023-08-02 04:40:17 [main] [INFO]  KGenProgMain - entered the era of 32nd generation.
2023-08-02 04:40:26 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 minutes 51 seconds
Variants: generated 100, build-succeeded 51, build-failed 39, syntax-invalid 7, redundant 3
Fitness: max 1(2), min 0(49), ave 0.039
Test execution time: sum 2845 ms, max 137 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 04:40:26 [main] [INFO]  KGenProgMain - entered the era of 33rd generation.
2023-08-02 04:40:34 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 minutes 59 seconds
Variants: generated 100, build-succeeded 57, build-failed 33, syntax-invalid 7, redundant 3
Fitness: max 0(57), min 0(57), ave 0
Test execution time: sum 3031 ms, max 73 ms, min 48 ms
----------------------------------------------------------------

2023-08-02 04:40:34 [main] [INFO]  KGenProgMain - entered the era of 34th generation.
2023-08-02 04:40:43 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 minutes 8 seconds
Variants: generated 100, build-succeeded 55, build-failed 33, syntax-invalid 9, redundant 3
Fitness: max 0(55), min 0(55), ave 0
Test execution time: sum 2946 ms, max 128 ms, min 48 ms
----------------------------------------------------------------

2023-08-02 04:40:43 [main] [INFO]  KGenProgMain - entered the era of 35th generation.
2023-08-02 04:40:52 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 minutes 16 seconds
Variants: generated 100, build-succeeded 62, build-failed 26, syntax-invalid 5, redundant 7
Fitness: max 0(62), min 0(62), ave 0
Test execution time: sum 3222 ms, max 70 ms, min 48 ms
----------------------------------------------------------------

2023-08-02 04:40:52 [main] [INFO]  KGenProgMain - entered the era of 36th generation.
2023-08-02 04:41:00 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 minutes 25 seconds
Variants: generated 100, build-succeeded 45, build-failed 30, syntax-invalid 19, redundant 6
Fitness: max 0(45), min 0(45), ave 0
Test execution time: sum 2537 ms, max 133 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 04:41:00 [main] [INFO]  KGenProgMain - entered the era of 37th generation.
2023-08-02 04:41:08 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 minutes 32 seconds
Variants: generated 100, build-succeeded 52, build-failed 34, syntax-invalid 12, redundant 2
Fitness: max 1(1), min 0(51), ave 0.019
Test execution time: sum 2811 ms, max 76 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 04:41:08 [main] [INFO]  KGenProgMain - entered the era of 38th generation.
2023-08-02 04:41:17 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 minutes 41 seconds
Variants: generated 100, build-succeeded 51, build-failed 32, syntax-invalid 12, redundant 5
Fitness: max 0(51), min 0(51), ave 0
Test execution time: sum 2838 ms, max 119 ms, min 48 ms
----------------------------------------------------------------

2023-08-02 04:41:17 [main] [INFO]  KGenProgMain - entered the era of 39th generation.
2023-08-02 04:41:25 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 minutes 50 seconds
Variants: generated 100, build-succeeded 56, build-failed 34, syntax-invalid 8, redundant 2
Fitness: max 1(1), min 0(55), ave 0.018
Test execution time: sum 2953 ms, max 69 ms, min 48 ms
----------------------------------------------------------------

2023-08-02 04:41:25 [main] [INFO]  KGenProgMain - entered the era of 40th generation.
2023-08-02 04:41:35 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 minutes 59 seconds
Variants: generated 100, build-succeeded 50, build-failed 35, syntax-invalid 10, redundant 5
Fitness: max 0(50), min 0(50), ave 0
Test execution time: sum 2912 ms, max 202 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 04:41:35 [main] [INFO]  KGenProgMain - entered the era of 41st generation.
2023-08-02 04:41:43 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 minutes 7 seconds
Variants: generated 100, build-succeeded 55, build-failed 29, syntax-invalid 14, redundant 2
Fitness: max 0(55), min 0(55), ave 0
Test execution time: sum 2958 ms, max 69 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 04:41:43 [main] [INFO]  KGenProgMain - entered the era of 42nd generation.
2023-08-02 04:41:52 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 minutes 17 seconds
Variants: generated 100, build-succeeded 58, build-failed 28, syntax-invalid 11, redundant 3
Fitness: max 0(58), min 0(58), ave 0
Test execution time: sum 3163 ms, max 140 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 04:41:52 [main] [INFO]  KGenProgMain - entered the era of 43rd generation.
2023-08-02 04:42:01 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 minutes 25 seconds
Variants: generated 100, build-succeeded 53, build-failed 30, syntax-invalid 11, redundant 6
Fitness: max 0(53), min 0(53), ave 0
Test execution time: sum 2844 ms, max 68 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 04:42:01 [main] [INFO]  KGenProgMain - entered the era of 44th generation.
2023-08-02 04:42:10 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 minutes 34 seconds
Variants: generated 100, build-succeeded 47, build-failed 33, syntax-invalid 13, redundant 7
Fitness: max 0(47), min 0(47), ave 0
Test execution time: sum 2612 ms, max 122 ms, min 48 ms
----------------------------------------------------------------

2023-08-02 04:42:10 [main] [INFO]  KGenProgMain - entered the era of 45th generation.
2023-08-02 04:42:18 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 minutes 43 seconds
Variants: generated 100, build-succeeded 52, build-failed 30, syntax-invalid 13, redundant 5
Fitness: max 0(52), min 0(52), ave 0
Test execution time: sum 2707 ms, max 67 ms, min 48 ms
----------------------------------------------------------------

2023-08-02 04:42:18 [main] [INFO]  KGenProgMain - entered the era of 46th generation.
2023-08-02 04:45:28 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 minutes 52 seconds
Variants: generated 100, build-succeeded 50, build-failed 27, syntax-invalid 17, redundant 6
Fitness: max 1(1), min 0(49), ave 0.02
Test execution time: sum 182947 ms, max 180069 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 04:45:28 [main] [INFO]  KGenProgMain - entered the era of 47th generation.
2023-08-02 04:48:37 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 minutes 2 seconds
Variants: generated 100, build-succeeded 55, build-failed 30, syntax-invalid 11, redundant 4
Fitness: max 0(55), min 0(55), ave 0
Test execution time: sum 182972 ms, max 180052 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 04:48:37 [main] [INFO]  KGenProgMain - entered the era of 48th generation.
2023-08-02 04:48:47 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 minutes 11 seconds
Variants: generated 100, build-succeeded 50, build-failed 30, syntax-invalid 10, redundant 10
Fitness: max 0(50), min 0(50), ave 0
Test execution time: sum 2917 ms, max 188 ms, min 48 ms
----------------------------------------------------------------

2023-08-02 04:48:47 [main] [INFO]  KGenProgMain - entered the era of 49th generation.
2023-08-02 04:48:57 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 minutes 21 seconds
Variants: generated 100, build-succeeded 63, build-failed 27, syntax-invalid 6, redundant 4
Fitness: max 0(63), min 0(63), ave 0
Test execution time: sum 3375 ms, max 69 ms, min 48 ms
----------------------------------------------------------------

2023-08-02 04:48:57 [main] [INFO]  KGenProgMain - entered the era of 50th generation.
2023-08-02 04:52:07 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 15 minutes 32 seconds
Variants: generated 100, build-succeeded 52, build-failed 35, syntax-invalid 6, redundant 7
Fitness: max 0(52), min 0(52), ave 0
Test execution time: sum 182998 ms, max 180060 ms, min 48 ms
----------------------------------------------------------------

2023-08-02 04:52:07 [main] [INFO]  KGenProgMain - entered the era of 51st generation.
2023-08-02 04:52:16 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 15 minutes 41 seconds
Variants: generated 100, build-succeeded 48, build-failed 29, syntax-invalid 13, redundant 10
Fitness: max 1(1), min 0(47), ave 0.021
Test execution time: sum 2623 ms, max 71 ms, min 48 ms
----------------------------------------------------------------

2023-08-02 04:52:16 [main] [INFO]  KGenProgMain - entered the era of 52nd generation.
2023-08-02 04:52:27 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 15 minutes 52 seconds
Variants: generated 100, build-succeeded 56, build-failed 29, syntax-invalid 7, redundant 8
Fitness: max 0(56), min 0(56), ave 0
Test execution time: sum 3212 ms, max 118 ms, min 48 ms
----------------------------------------------------------------

2023-08-02 04:52:27 [main] [INFO]  KGenProgMain - entered the era of 53rd generation.
2023-08-02 04:52:37 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 16 minutes 1 seconds
Variants: generated 100, build-succeeded 49, build-failed 39, syntax-invalid 5, redundant 7
Fitness: max 0(49), min 0(49), ave 0
Test execution time: sum 2670 ms, max 69 ms, min 48 ms
----------------------------------------------------------------

2023-08-02 04:52:37 [main] [INFO]  KGenProgMain - entered the era of 54th generation.
2023-08-02 04:52:48 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 16 minutes 13 seconds
Variants: generated 100, build-succeeded 66, build-failed 26, syntax-invalid 1, redundant 7
Fitness: max 0(66), min 0(66), ave 0
Test execution time: sum 3671 ms, max 131 ms, min 48 ms
----------------------------------------------------------------

2023-08-02 04:52:48 [main] [INFO]  KGenProgMain - entered the era of 55th generation.
2023-08-02 04:52:58 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 16 minutes 22 seconds
Variants: generated 100, build-succeeded 47, build-failed 39, syntax-invalid 9, redundant 5
Fitness: max 0(47), min 0(47), ave 0
Test execution time: sum 2590 ms, max 69 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 04:52:58 [main] [INFO]  KGenProgMain - entered the era of 56th generation.
2023-08-02 04:53:09 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 16 minutes 33 seconds
Variants: generated 100, build-succeeded 48, build-failed 32, syntax-invalid 14, redundant 6
Fitness: max 0(48), min 0(48), ave 0
Test execution time: sum 2780 ms, max 120 ms, min 48 ms
----------------------------------------------------------------

2023-08-02 04:53:09 [main] [INFO]  KGenProgMain - entered the era of 57th generation.
2023-08-02 04:53:19 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 16 minutes 43 seconds
Variants: generated 100, build-succeeded 46, build-failed 32, syntax-invalid 16, redundant 6
Fitness: max 0(46), min 0(46), ave 0
Test execution time: sum 2475 ms, max 68 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 04:53:19 [main] [INFO]  KGenProgMain - entered the era of 58th generation.
2023-08-02 04:53:29 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 16 minutes 54 seconds
Variants: generated 100, build-succeeded 52, build-failed 30, syntax-invalid 16, redundant 2
Fitness: max 0(52), min 0(52), ave 0
Test execution time: sum 2897 ms, max 127 ms, min 48 ms
----------------------------------------------------------------

2023-08-02 04:53:29 [main] [INFO]  KGenProgMain - entered the era of 59th generation.
2023-08-02 04:53:39 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 17 minutes 4 seconds
Variants: generated 100, build-succeeded 47, build-failed 33, syntax-invalid 14, redundant 6
Fitness: max 0(47), min 0(47), ave 0
Test execution time: sum 2484 ms, max 65 ms, min 48 ms
----------------------------------------------------------------

2023-08-02 04:53:39 [main] [INFO]  KGenProgMain - entered the era of 60th generation.
2023-08-02 04:53:51 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 17 minutes 15 seconds
Variants: generated 100, build-succeeded 50, build-failed 35, syntax-invalid 14, redundant 1
Fitness: max 0(50), min 0(50), ave 0
Test execution time: sum 2871 ms, max 137 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 04:53:51 [main] [INFO]  KGenProgMain - entered the era of 61st generation.
2023-08-02 04:54:00 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 17 minutes 25 seconds
Variants: generated 100, build-succeeded 42, build-failed 30, syntax-invalid 20, redundant 8
Fitness: max 0(42), min 0(42), ave 0
Test execution time: sum 2181 ms, max 67 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 04:54:00 [main] [INFO]  KGenProgMain - entered the era of 62nd generation.
2023-08-02 04:54:12 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 17 minutes 36 seconds
Variants: generated 100, build-succeeded 43, build-failed 39, syntax-invalid 16, redundant 2
Fitness: max 0(43), min 0(43), ave 0
Test execution time: sum 2591 ms, max 191 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 04:54:12 [main] [INFO]  KGenProgMain - entered the era of 63rd generation.
2023-08-02 04:54:22 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 17 minutes 47 seconds
Variants: generated 100, build-succeeded 56, build-failed 34, syntax-invalid 7, redundant 3
Fitness: max 1(1), min 0(55), ave 0.018
Test execution time: sum 3085 ms, max 78 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 04:54:22 [main] [INFO]  KGenProgMain - entered the era of 64th generation.
2023-08-02 04:54:34 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 17 minutes 58 seconds
Variants: generated 100, build-succeeded 52, build-failed 36, syntax-invalid 9, redundant 3
Fitness: max 1(1), min 0(51), ave 0.019
Test execution time: sum 2901 ms, max 102 ms, min 48 ms
----------------------------------------------------------------

2023-08-02 04:54:34 [main] [INFO]  KGenProgMain - entered the era of 65th generation.
2023-08-02 04:54:45 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 18 minutes 10 seconds
Variants: generated 100, build-succeeded 47, build-failed 33, syntax-invalid 14, redundant 6
Fitness: max 0(47), min 0(47), ave 0
Test execution time: sum 2694 ms, max 134 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 04:54:45 [main] [INFO]  KGenProgMain - entered the era of 66th generation.
2023-08-02 04:54:58 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 18 minutes 22 seconds
Variants: generated 100, build-succeeded 57, build-failed 32, syntax-invalid 9, redundant 2
Fitness: max 0(57), min 0(57), ave 0
Test execution time: sum 3262 ms, max 190 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 04:54:58 [main] [INFO]  KGenProgMain - entered the era of 67th generation.
2023-08-02 04:55:08 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 18 minutes 32 seconds
Variants: generated 100, build-succeeded 43, build-failed 32, syntax-invalid 17, redundant 8
Fitness: max 1(1), min 0(42), ave 0.023
Test execution time: sum 2350 ms, max 72 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 04:55:08 [main] [INFO]  KGenProgMain - entered the era of 68th generation.
2023-08-02 04:55:21 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 18 minutes 45 seconds
Variants: generated 100, build-succeeded 58, build-failed 32, syntax-invalid 6, redundant 4
Fitness: max 0(58), min 0(58), ave 0
Test execution time: sum 3342 ms, max 121 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 04:55:21 [main] [INFO]  KGenProgMain - entered the era of 69th generation.
2023-08-02 04:55:33 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 18 minutes 57 seconds
Variants: generated 100, build-succeeded 68, build-failed 22, syntax-invalid 6, redundant 4
Fitness: max 1(1), min 0(67), ave 0.015
Test execution time: sum 3806 ms, max 73 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 04:55:33 [main] [INFO]  KGenProgMain - entered the era of 70th generation.
2023-08-02 04:55:46 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 19 minutes 11 seconds
Variants: generated 100, build-succeeded 57, build-failed 21, syntax-invalid 13, redundant 9
Fitness: max 1(1), min 0(56), ave 0.018
Test execution time: sum 3271 ms, max 107 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 04:55:46 [main] [INFO]  KGenProgMain - entered the era of 71st generation.
2023-08-02 04:55:59 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 19 minutes 24 seconds
Variants: generated 100, build-succeeded 49, build-failed 39, syntax-invalid 11, redundant 1
Fitness: max 0(49), min 0(49), ave 0
Test execution time: sum 3018 ms, max 136 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 04:55:59 [main] [INFO]  KGenProgMain - entered the era of 72nd generation.
2023-08-02 04:56:12 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 19 minutes 37 seconds
Variants: generated 100, build-succeeded 48, build-failed 37, syntax-invalid 9, redundant 6
Fitness: max 1(1), min 0(47), ave 0.021
Test execution time: sum 2837 ms, max 137 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 04:56:12 [main] [INFO]  KGenProgMain - entered the era of 73rd generation.
2023-08-02 04:56:26 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 19 minutes 50 seconds
Variants: generated 100, build-succeeded 56, build-failed 32, syntax-invalid 9, redundant 3
Fitness: max 1(1), min 0(55), ave 0.018
Test execution time: sum 3226 ms, max 203 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 04:56:26 [main] [INFO]  KGenProgMain - entered the era of 74th generation.
2023-08-02 04:56:39 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 20 minutes 3 seconds
Variants: generated 100, build-succeeded 59, build-failed 32, syntax-invalid 7, redundant 2
Fitness: max 0(59), min 0(59), ave 0
Test execution time: sum 3394 ms, max 75 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 04:56:39 [main] [INFO]  KGenProgMain - entered the era of 75th generation.
2023-08-02 04:56:52 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 20 minutes 16 seconds
Variants: generated 100, build-succeeded 49, build-failed 38, syntax-invalid 9, redundant 4
Fitness: max 0(49), min 0(49), ave 0
Test execution time: sum 2919 ms, max 133 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 04:56:52 [main] [INFO]  KGenProgMain - entered the era of 76th generation.
2023-08-02 04:57:06 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 20 minutes 30 seconds
Variants: generated 100, build-succeeded 52, build-failed 31, syntax-invalid 8, redundant 9
Fitness: max 1(1), min 0(51), ave 0.019
Test execution time: sum 3218 ms, max 199 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 04:57:06 [main] [INFO]  KGenProgMain - entered the era of 77th generation.
2023-08-02 04:57:22 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 20 minutes 46 seconds
Variants: generated 100, build-succeeded 61, build-failed 29, syntax-invalid 4, redundant 6
Fitness: max 0(61), min 0(61), ave 0
Test execution time: sum 3949 ms, max 183 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 04:57:22 [main] [INFO]  KGenProgMain - entered the era of 78th generation.
2023-08-02 05:00:35 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 23 minutes 59 seconds
Variants: generated 100, build-succeeded 61, build-failed 32, syntax-invalid 3, redundant 4
Fitness: max 0(61), min 0(61), ave 0
Test execution time: sum 183376 ms, max 180061 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 05:00:35 [main] [INFO]  KGenProgMain - entered the era of 79th generation.
2023-08-02 05:00:48 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 24 minutes 13 seconds
Variants: generated 100, build-succeeded 48, build-failed 34, syntax-invalid 12, redundant 6
Fitness: max 0(48), min 0(48), ave 0
Test execution time: sum 2921 ms, max 125 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 05:00:48 [main] [INFO]  KGenProgMain - entered the era of 80th generation.
2023-08-02 05:01:00 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 24 minutes 24 seconds
Variants: generated 100, build-succeeded 52, build-failed 27, syntax-invalid 16, redundant 5
Fitness: max 0(52), min 0(52), ave 0
Test execution time: sum 2766 ms, max 72 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 05:01:00 [main] [INFO]  KGenProgMain - entered the era of 81st generation.
2023-08-02 05:01:14 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 24 minutes 39 seconds
Variants: generated 100, build-succeeded 51, build-failed 37, syntax-invalid 10, redundant 2
Fitness: max 0(51), min 0(51), ave 0
Test execution time: sum 3086 ms, max 125 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 05:01:14 [main] [INFO]  KGenProgMain - entered the era of 82nd generation.
2023-08-02 05:04:28 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 27 minutes 52 seconds
Variants: generated 100, build-succeeded 57, build-failed 32, syntax-invalid 7, redundant 4
Fitness: max 0(57), min 0(57), ave 0
Test execution time: sum 183178 ms, max 180054 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 05:04:28 [main] [INFO]  KGenProgMain - entered the era of 83rd generation.
2023-08-02 05:07:42 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 31 minutes 7 seconds
Variants: generated 100, build-succeeded 57, build-failed 30, syntax-invalid 7, redundant 6
Fitness: max 0(57), min 0(57), ave 0
Test execution time: sum 183249 ms, max 180065 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 05:07:42 [main] [INFO]  KGenProgMain - entered the era of 84th generation.
2023-08-02 05:10:55 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 34 minutes 20 seconds
Variants: generated 100, build-succeeded 52, build-failed 39, syntax-invalid 4, redundant 5
Fitness: max 0(52), min 0(52), ave 0
Test execution time: sum 182933 ms, max 180058 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 05:10:55 [main] [INFO]  KGenProgMain - entered the era of 85th generation.
2023-08-02 05:14:10 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 37 minutes 34 seconds
Variants: generated 100, build-succeeded 61, build-failed 30, syntax-invalid 4, redundant 5
Fitness: max 0(61), min 0(61), ave 0
Test execution time: sum 183494 ms, max 180060 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 05:14:10 [main] [INFO]  KGenProgMain - entered the era of 86th generation.
2023-08-02 05:20:23 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 43 minutes 47 seconds
Variants: generated 100, build-succeeded 46, build-failed 39, syntax-invalid 7, redundant 8
Fitness: max 1(1), min 0(45), ave 0.022
Test execution time: sum 362607 ms, max 180064 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 05:20:23 [main] [INFO]  KGenProgMain - entered the era of 87th generation.
2023-08-02 05:29:39 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 53 minutes 3 seconds
Variants: generated 100, build-succeeded 61, build-failed 22, syntax-invalid 9, redundant 8
Fitness: max 0(61), min 0(61), ave 0
Test execution time: sum 543794 ms, max 180096 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 05:29:39 [main] [INFO]  KGenProgMain - entered the era of 88th generation.
2023-08-02 05:29:53 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 53 minutes 17 seconds
Variants: generated 100, build-succeeded 62, build-failed 28, syntax-invalid 5, redundant 5
Fitness: max 0(62), min 0(62), ave 0
Test execution time: sum 3403 ms, max 69 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 05:29:53 [main] [INFO]  KGenProgMain - entered the era of 89th generation.
2023-08-02 05:33:07 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 56 minutes 32 seconds
Variants: generated 100, build-succeeded 58, build-failed 31, syntax-invalid 8, redundant 3
Fitness: max 0(58), min 0(58), ave 0
Test execution time: sum 183237 ms, max 180060 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 05:33:07 [main] [INFO]  KGenProgMain - entered the era of 90th generation.
2023-08-02 05:36:21 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 59 minutes 45 seconds
Variants: generated 100, build-succeeded 57, build-failed 30, syntax-invalid 9, redundant 4
Fitness: max 0(57), min 0(57), ave 0
Test execution time: sum 183146 ms, max 180067 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 05:36:21 [main] [INFO]  KGenProgMain - entered the era of 91st generation.
2023-08-02 05:36:36 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 0 seconds
Variants: generated 100, build-succeeded 56, build-failed 25, syntax-invalid 13, redundant 6
Fitness: max 0(56), min 0(56), ave 0
Test execution time: sum 3247 ms, max 135 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 05:36:36 [main] [INFO]  KGenProgMain - entered the era of 92nd generation.
2023-08-02 05:36:49 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 14 seconds
Variants: generated 100, build-succeeded 56, build-failed 35, syntax-invalid 6, redundant 3
Fitness: max 0(56), min 0(56), ave 0
Test execution time: sum 3020 ms, max 81 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 05:36:49 [main] [INFO]  KGenProgMain - entered the era of 93rd generation.
2023-08-02 05:37:04 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 28 seconds
Variants: generated 100, build-succeeded 52, build-failed 29, syntax-invalid 11, redundant 8
Fitness: max 0(52), min 0(52), ave 0
Test execution time: sum 3042 ms, max 122 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 05:37:04 [main] [INFO]  KGenProgMain - entered the era of 94th generation.
2023-08-02 05:37:17 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 42 seconds
Variants: generated 100, build-succeeded 61, build-failed 22, syntax-invalid 10, redundant 7
Fitness: max 0(61), min 0(61), ave 0
Test execution time: sum 3244 ms, max 69 ms, min 48 ms
----------------------------------------------------------------

2023-08-02 05:37:17 [main] [INFO]  KGenProgMain - entered the era of 95th generation.
2023-08-02 05:40:33 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 3 minutes 57 seconds
Variants: generated 100, build-succeeded 53, build-failed 29, syntax-invalid 11, redundant 7
Fitness: max 0(53), min 0(53), ave 0
Test execution time: sum 183276 ms, max 180073 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 05:40:33 [main] [INFO]  KGenProgMain - entered the era of 96th generation.
2023-08-02 05:40:47 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 4 minutes 11 seconds
Variants: generated 100, build-succeeded 56, build-failed 31, syntax-invalid 6, redundant 7
Fitness: max 0(56), min 0(56), ave 0
Test execution time: sum 3150 ms, max 84 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 05:40:47 [main] [INFO]  KGenProgMain - entered the era of 97th generation.
2023-08-02 05:44:02 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 7 minutes 27 seconds
Variants: generated 100, build-succeeded 53, build-failed 39, syntax-invalid 2, redundant 6
Fitness: max 0(53), min 0(53), ave 0
Test execution time: sum 183359 ms, max 180082 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 05:44:02 [main] [INFO]  KGenProgMain - entered the era of 98th generation.
2023-08-02 05:44:16 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 7 minutes 41 seconds
Variants: generated 100, build-succeeded 48, build-failed 35, syntax-invalid 8, redundant 9
Fitness: max 0(48), min 0(48), ave 0
Test execution time: sum 2685 ms, max 76 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 05:44:16 [main] [INFO]  KGenProgMain - entered the era of 99th generation.
2023-08-02 05:44:30 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 7 minutes 55 seconds
Variants: generated 100, build-succeeded 56, build-failed 30, syntax-invalid 9, redundant 5
Fitness: max 0(56), min 0(56), ave 0
Test execution time: sum 3133 ms, max 91 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 05:44:30 [main] [INFO]  KGenProgMain - entered the era of 100th generation.
2023-08-02 05:44:46 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 8 minutes 10 seconds
Variants: generated 100, build-succeeded 56, build-failed 31, syntax-invalid 4, redundant 9
Fitness: max 0(56), min 0(56), ave 0
Test execution time: sum 3291 ms, max 180 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 05:44:46 [main] [INFO]  KGenProgMain - entered the era of 101st generation.
2023-08-02 05:48:00 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 11 minutes 24 seconds
Variants: generated 100, build-succeeded 60, build-failed 31, syntax-invalid 4, redundant 5
Fitness: max 0(60), min 0(60), ave 0
Test execution time: sum 183185 ms, max 180064 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 05:48:00 [main] [INFO]  KGenProgMain - entered the era of 102nd generation.
2023-08-02 05:48:14 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 11 minutes 39 seconds
Variants: generated 100, build-succeeded 58, build-failed 31, syntax-invalid 5, redundant 6
Fitness: max 0(58), min 0(58), ave 0
Test execution time: sum 3177 ms, max 71 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 05:48:14 [main] [INFO]  KGenProgMain - entered the era of 103rd generation.
2023-08-02 05:51:30 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 14 minutes 55 seconds
Variants: generated 100, build-succeeded 55, build-failed 38, syntax-invalid 6, redundant 1
Fitness: max 1(1), min 0(54), ave 0.018
Test execution time: sum 183527 ms, max 180074 ms, min 51 ms
----------------------------------------------------------------

2023-08-02 05:51:30 [main] [INFO]  KGenProgMain - entered the era of 104th generation.
2023-08-02 05:54:45 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 18 minutes 10 seconds
Variants: generated 100, build-succeeded 57, build-failed 29, syntax-invalid 7, redundant 7
Fitness: max 0(57), min 0(57), ave 0
Test execution time: sum 183582 ms, max 180066 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 05:54:45 [main] [INFO]  KGenProgMain - entered the era of 105th generation.
2023-08-02 05:54:59 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 18 minutes 24 seconds
Variants: generated 100, build-succeeded 48, build-failed 31, syntax-invalid 16, redundant 5
Fitness: max 0(48), min 0(48), ave 0
Test execution time: sum 2640 ms, max 93 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 05:54:59 [main] [INFO]  KGenProgMain - entered the era of 106th generation.
2023-08-02 05:55:14 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 18 minutes 38 seconds
Variants: generated 100, build-succeeded 51, build-failed 32, syntax-invalid 12, redundant 5
Fitness: max 0(51), min 0(51), ave 0
Test execution time: sum 2904 ms, max 71 ms, min 51 ms
----------------------------------------------------------------

2023-08-02 05:55:14 [main] [INFO]  KGenProgMain - entered the era of 107th generation.
2023-08-02 06:01:31 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 24 minutes 55 seconds
Variants: generated 100, build-succeeded 55, build-failed 33, syntax-invalid 11, redundant 1
Fitness: max 0(55), min 0(55), ave 0
Test execution time: sum 363511 ms, max 180071 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 06:01:31 [main] [INFO]  KGenProgMain - entered the era of 108th generation.
2023-08-02 06:07:47 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 31 minutes 12 seconds
Variants: generated 100, build-succeeded 53, build-failed 33, syntax-invalid 12, redundant 2
Fitness: max 0(53), min 0(53), ave 0
Test execution time: sum 363881 ms, max 180070 ms, min 51 ms
----------------------------------------------------------------

2023-08-02 06:07:47 [main] [INFO]  KGenProgMain - entered the era of 109th generation.
2023-08-02 06:11:03 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 34 minutes 27 seconds
Variants: generated 100, build-succeeded 51, build-failed 32, syntax-invalid 16, redundant 1
Fitness: max 0(51), min 0(51), ave 0
Test execution time: sum 183068 ms, max 180060 ms, min 51 ms
----------------------------------------------------------------

2023-08-02 06:11:03 [main] [INFO]  KGenProgMain - entered the era of 110th generation.
2023-08-02 06:11:19 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 34 minutes 43 seconds
Variants: generated 100, build-succeeded 54, build-failed 28, syntax-invalid 13, redundant 5
Fitness: max 1(1), min 0(53), ave 0.019
Test execution time: sum 3406 ms, max 232 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 06:11:19 [main] [INFO]  KGenProgMain - entered the era of 111th generation.
2023-08-02 06:14:34 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 37 minutes 58 seconds
Variants: generated 100, build-succeeded 55, build-failed 36, syntax-invalid 7, redundant 2
Fitness: max 0(55), min 0(55), ave 0
Test execution time: sum 183232 ms, max 180065 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 06:14:34 [main] [INFO]  KGenProgMain - entered the era of 112th generation.
2023-08-02 06:14:48 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 38 minutes 13 seconds
Variants: generated 100, build-succeeded 50, build-failed 32, syntax-invalid 15, redundant 3
Fitness: max 0(50), min 0(50), ave 0
Test execution time: sum 2791 ms, max 72 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 06:14:48 [main] [INFO]  KGenProgMain - entered the era of 113th generation.
2023-08-02 06:18:05 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 41 minutes 29 seconds
Variants: generated 100, build-succeeded 56, build-failed 28, syntax-invalid 8, redundant 8
Fitness: max 0(56), min 0(56), ave 0
Test execution time: sum 183665 ms, max 180064 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 06:18:05 [main] [INFO]  KGenProgMain - entered the era of 114th generation.
2023-08-02 06:27:22 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 50 minutes 46 seconds
Variants: generated 100, build-succeeded 58, build-failed 30, syntax-invalid 9, redundant 3
Fitness: max 0(58), min 0(58), ave 0
Test execution time: sum 544011 ms, max 180097 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 06:27:22 [main] [INFO]  KGenProgMain - entered the era of 115th generation.
2023-08-02 06:30:37 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 54 minutes 2 seconds
Variants: generated 100, build-succeeded 52, build-failed 31, syntax-invalid 10, redundant 7
Fitness: max 0(52), min 0(52), ave 0
Test execution time: sum 182955 ms, max 180062 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 06:30:37 [main] [INFO]  KGenProgMain - entered the era of 116th generation.
2023-08-02 06:33:53 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 57 minutes 18 seconds
Variants: generated 100, build-succeeded 54, build-failed 33, syntax-invalid 9, redundant 4
Fitness: max 0(54), min 0(54), ave 0
Test execution time: sum 183345 ms, max 180074 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 06:33:53 [main] [INFO]  KGenProgMain - entered the era of 117th generation.
2023-08-02 06:37:12 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 36 seconds
Variants: generated 100, build-succeeded 59, build-failed 32, syntax-invalid 5, redundant 4
Fitness: max 0(59), min 0(59), ave 0
Test execution time: sum 183680 ms, max 180065 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 06:37:12 [main] [INFO]  KGenProgMain - entered the era of 118th generation.
2023-08-02 06:37:29 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 54 seconds
Variants: generated 100, build-succeeded 63, build-failed 26, syntax-invalid 4, redundant 7
Fitness: max 0(63), min 0(63), ave 0
Test execution time: sum 3589 ms, max 121 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 06:37:29 [main] [INFO]  KGenProgMain - entered the era of 119th generation.
2023-08-02 06:40:46 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 4 minutes 11 seconds
Variants: generated 100, build-succeeded 61, build-failed 28, syntax-invalid 8, redundant 3
Fitness: max 0(61), min 0(61), ave 0
Test execution time: sum 183473 ms, max 180067 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 06:40:46 [main] [INFO]  KGenProgMain - entered the era of 120th generation.
2023-08-02 06:44:05 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 7 minutes 29 seconds
Variants: generated 100, build-succeeded 60, build-failed 28, syntax-invalid 7, redundant 5
Fitness: max 0(60), min 0(60), ave 0
Test execution time: sum 183871 ms, max 180070 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 06:44:05 [main] [INFO]  KGenProgMain - entered the era of 121st generation.
2023-08-02 06:44:24 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 7 minutes 48 seconds
Variants: generated 100, build-succeeded 59, build-failed 29, syntax-invalid 9, redundant 3
Fitness: max 0(59), min 0(59), ave 0
Test execution time: sum 3787 ms, max 195 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 06:44:24 [main] [INFO]  KGenProgMain - entered the era of 122nd generation.
2023-08-02 06:47:42 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 11 minutes 7 seconds
Variants: generated 100, build-succeeded 55, build-failed 37, syntax-invalid 3, redundant 5
Fitness: max 0(55), min 0(55), ave 0
Test execution time: sum 183536 ms, max 180076 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 06:47:42 [main] [INFO]  KGenProgMain - entered the era of 123rd generation.
2023-08-02 06:51:02 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 14 minutes 27 seconds
Variants: generated 100, build-succeeded 52, build-failed 33, syntax-invalid 7, redundant 8
Fitness: max 0(52), min 0(52), ave 0
Test execution time: sum 183830 ms, max 180063 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 06:51:02 [main] [INFO]  KGenProgMain - entered the era of 124th generation.
2023-08-02 06:54:20 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 17 minutes 45 seconds
Variants: generated 100, build-succeeded 50, build-failed 32, syntax-invalid 12, redundant 6
Fitness: max 1(1), min 0(49), ave 0.02
Test execution time: sum 183350 ms, max 180067 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 06:54:20 [main] [INFO]  KGenProgMain - entered the era of 125th generation.
2023-08-02 06:54:39 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 18 minutes 3 seconds
Variants: generated 100, build-succeeded 54, build-failed 28, syntax-invalid 8, redundant 10
Fitness: max 0(54), min 0(54), ave 0
Test execution time: sum 3305 ms, max 120 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 06:54:39 [main] [INFO]  KGenProgMain - entered the era of 126th generation.
2023-08-02 06:54:57 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 18 minutes 21 seconds
Variants: generated 100, build-succeeded 52, build-failed 33, syntax-invalid 7, redundant 8
Fitness: max 0(52), min 0(52), ave 0
Test execution time: sum 3174 ms, max 186 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 06:54:57 [main] [INFO]  KGenProgMain - entered the era of 127th generation.
2023-08-02 06:55:14 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 18 minutes 39 seconds
Variants: generated 100, build-succeeded 63, build-failed 30, syntax-invalid 5, redundant 2
Fitness: max 0(63), min 0(63), ave 0
Test execution time: sum 3524 ms, max 105 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 06:55:14 [main] [INFO]  KGenProgMain - entered the era of 128th generation.
2023-08-02 06:55:31 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 18 minutes 55 seconds
Variants: generated 100, build-succeeded 53, build-failed 30, syntax-invalid 9, redundant 8
Fitness: max 0(53), min 0(53), ave 0
Test execution time: sum 3010 ms, max 103 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 06:55:31 [main] [INFO]  KGenProgMain - entered the era of 129th generation.
2023-08-02 06:55:47 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 19 minutes 12 seconds
Variants: generated 100, build-succeeded 55, build-failed 28, syntax-invalid 11, redundant 6
Fitness: max 0(55), min 0(55), ave 0
Test execution time: sum 3114 ms, max 130 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 06:55:47 [main] [INFO]  KGenProgMain - entered the era of 130th generation.
2023-08-02 06:56:04 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 19 minutes 28 seconds
Variants: generated 100, build-succeeded 53, build-failed 30, syntax-invalid 13, redundant 4
Fitness: max 0(53), min 0(53), ave 0
Test execution time: sum 2944 ms, max 115 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 06:56:04 [main] [INFO]  KGenProgMain - entered the era of 131st generation.
2023-08-02 06:56:21 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 19 minutes 46 seconds
Variants: generated 100, build-succeeded 53, build-failed 30, syntax-invalid 11, redundant 6
Fitness: max 0(53), min 0(53), ave 0
Test execution time: sum 3072 ms, max 138 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 06:56:21 [main] [INFO]  KGenProgMain - entered the era of 132nd generation.
2023-08-02 06:56:38 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 20 minutes 3 seconds
Variants: generated 100, build-succeeded 55, build-failed 29, syntax-invalid 10, redundant 6
Fitness: max 0(55), min 0(55), ave 0
Test execution time: sum 3047 ms, max 111 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 06:56:39 [main] [INFO]  KGenProgMain - entered the era of 133rd generation.
2023-08-02 06:56:57 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 20 minutes 22 seconds
Variants: generated 100, build-succeeded 62, build-failed 32, syntax-invalid 4, redundant 2
Fitness: max 0(62), min 0(62), ave 0
Test execution time: sum 3501 ms, max 165 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 06:56:57 [main] [INFO]  KGenProgMain - entered the era of 134th generation.
2023-08-02 06:57:16 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 20 minutes 40 seconds
Variants: generated 100, build-succeeded 59, build-failed 34, syntax-invalid 5, redundant 2
Fitness: max 0(59), min 0(59), ave 0
Test execution time: sum 3476 ms, max 167 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 06:57:16 [main] [INFO]  KGenProgMain - entered the era of 135th generation.
2023-08-02 06:57:34 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 20 minutes 58 seconds
Variants: generated 100, build-succeeded 54, build-failed 32, syntax-invalid 9, redundant 5
Fitness: max 1(2), min 0(52), ave 0.037
Test execution time: sum 3070 ms, max 178 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 06:57:34 [main] [INFO]  KGenProgMain - entered the era of 136th generation.
2023-08-02 06:57:52 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 21 minutes 16 seconds
Variants: generated 100, build-succeeded 54, build-failed 32, syntax-invalid 10, redundant 4
Fitness: max 0(54), min 0(54), ave 0
Test execution time: sum 3124 ms, max 169 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 06:57:52 [main] [INFO]  KGenProgMain - entered the era of 137th generation.
2023-08-02 06:58:10 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 21 minutes 34 seconds
Variants: generated 100, build-succeeded 59, build-failed 30, syntax-invalid 6, redundant 5
Fitness: max 1(1), min 0(58), ave 0.017
Test execution time: sum 3309 ms, max 129 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 06:58:10 [main] [INFO]  KGenProgMain - entered the era of 138th generation.
2023-08-02 06:58:28 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 21 minutes 53 seconds
Variants: generated 100, build-succeeded 56, build-failed 28, syntax-invalid 9, redundant 7
Fitness: max 0(56), min 0(56), ave 0
Test execution time: sum 3225 ms, max 119 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 06:58:28 [main] [INFO]  KGenProgMain - entered the era of 139th generation.
2023-08-02 07:01:47 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 25 minutes 11 seconds
Variants: generated 100, build-succeeded 60, build-failed 31, syntax-invalid 7, redundant 2
Fitness: max 0(60), min 0(60), ave 0
Test execution time: sum 183347 ms, max 180059 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 07:01:47 [main] [INFO]  KGenProgMain - entered the era of 140th generation.
2023-08-02 07:02:06 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 25 minutes 30 seconds
Variants: generated 100, build-succeeded 58, build-failed 31, syntax-invalid 7, redundant 4
Fitness: max 0(58), min 0(58), ave 0
Test execution time: sum 3461 ms, max 156 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 07:02:06 [main] [INFO]  KGenProgMain - entered the era of 141st generation.
2023-08-02 07:02:24 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 25 minutes 48 seconds
Variants: generated 100, build-succeeded 52, build-failed 36, syntax-invalid 8, redundant 4
Fitness: max 0(52), min 0(52), ave 0
Test execution time: sum 2922 ms, max 113 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 07:02:24 [main] [INFO]  KGenProgMain - entered the era of 142nd generation.
2023-08-02 07:02:43 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 26 minutes 8 seconds
Variants: generated 100, build-succeeded 60, build-failed 34, syntax-invalid 4, redundant 2
Fitness: max 0(60), min 0(60), ave 0
Test execution time: sum 3515 ms, max 186 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 07:02:43 [main] [INFO]  KGenProgMain - entered the era of 143rd generation.
2023-08-02 07:03:01 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 26 minutes 25 seconds
Variants: generated 100, build-succeeded 53, build-failed 27, syntax-invalid 12, redundant 8
Fitness: max 0(53), min 0(53), ave 0
Test execution time: sum 2844 ms, max 102 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 07:03:01 [main] [INFO]  KGenProgMain - entered the era of 144th generation.
2023-08-02 07:03:19 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 26 minutes 43 seconds
Variants: generated 100, build-succeeded 49, build-failed 38, syntax-invalid 11, redundant 2
Fitness: max 0(49), min 0(49), ave 0
Test execution time: sum 2760 ms, max 111 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 07:03:19 [main] [INFO]  KGenProgMain - entered the era of 145th generation.
2023-08-02 07:03:38 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 27 minutes 2 seconds
Variants: generated 100, build-succeeded 61, build-failed 32, syntax-invalid 6, redundant 1
Fitness: max 0(61), min 0(61), ave 0
Test execution time: sum 3365 ms, max 101 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 07:03:38 [main] [INFO]  KGenProgMain - entered the era of 146th generation.
2023-08-02 07:03:57 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 27 minutes 22 seconds
Variants: generated 100, build-succeeded 57, build-failed 30, syntax-invalid 10, redundant 3
Fitness: max 0(57), min 0(57), ave 0
Test execution time: sum 3212 ms, max 104 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 07:03:57 [main] [INFO]  KGenProgMain - entered the era of 147th generation.
2023-08-02 07:04:16 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 27 minutes 41 seconds
Variants: generated 100, build-succeeded 58, build-failed 31, syntax-invalid 8, redundant 3
Fitness: max 0(58), min 0(58), ave 0
Test execution time: sum 3261 ms, max 169 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 07:04:16 [main] [INFO]  KGenProgMain - entered the era of 148th generation.
2023-08-02 07:04:36 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 28 minutes 0 seconds
Variants: generated 100, build-succeeded 60, build-failed 26, syntax-invalid 10, redundant 4
Fitness: max 0(60), min 0(60), ave 0
Test execution time: sum 3238 ms, max 112 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 07:04:36 [main] [INFO]  KGenProgMain - entered the era of 149th generation.
2023-08-02 07:04:55 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 28 minutes 20 seconds
Variants: generated 100, build-succeeded 57, build-failed 33, syntax-invalid 7, redundant 3
Fitness: max 0(57), min 0(57), ave 0
Test execution time: sum 3144 ms, max 109 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 07:04:55 [main] [INFO]  KGenProgMain - entered the era of 150th generation.
2023-08-02 07:05:15 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 28 minutes 39 seconds
Variants: generated 100, build-succeeded 59, build-failed 25, syntax-invalid 12, redundant 4
Fitness: max 0(59), min 0(59), ave 0
Test execution time: sum 3187 ms, max 108 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 07:05:15 [main] [INFO]  KGenProgMain - entered the era of 151st generation.
2023-08-02 07:05:35 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 28 minutes 59 seconds
Variants: generated 100, build-succeeded 52, build-failed 36, syntax-invalid 8, redundant 4
Fitness: max 0(52), min 0(52), ave 0
Test execution time: sum 2815 ms, max 114 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 07:05:35 [main] [INFO]  KGenProgMain - entered the era of 152nd generation.
2023-08-02 07:05:56 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 29 minutes 20 seconds
Variants: generated 100, build-succeeded 68, build-failed 28, syntax-invalid 1, redundant 3
Fitness: max 0(68), min 0(68), ave 0
Test execution time: sum 3690 ms, max 105 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 07:05:56 [main] [INFO]  KGenProgMain - entered the era of 153rd generation.
2023-08-02 07:06:16 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 29 minutes 41 seconds
Variants: generated 100, build-succeeded 54, build-failed 33, syntax-invalid 8, redundant 5
Fitness: max 0(54), min 0(54), ave 0
Test execution time: sum 2957 ms, max 99 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 07:06:16 [main] [INFO]  KGenProgMain - entered the era of 154th generation.
2023-08-02 07:06:36 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 30 minutes 0 seconds
Variants: generated 100, build-succeeded 47, build-failed 37, syntax-invalid 12, redundant 4
Fitness: max 0(47), min 0(47), ave 0
Test execution time: sum 2533 ms, max 116 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 07:06:36 [main] [INFO]  KGenProgMain - entered the era of 155th generation.
2023-08-02 07:06:56 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 30 minutes 20 seconds
Variants: generated 100, build-succeeded 59, build-failed 27, syntax-invalid 11, redundant 3
Fitness: max 0(59), min 0(59), ave 0
Test execution time: sum 3224 ms, max 75 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 07:06:56 [main] [INFO]  KGenProgMain - entered the era of 156th generation.
2023-08-02 07:07:17 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 30 minutes 42 seconds
Variants: generated 100, build-succeeded 64, build-failed 30, syntax-invalid 5, redundant 1
Fitness: max 0(64), min 0(64), ave 0
Test execution time: sum 3679 ms, max 134 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 07:07:17 [main] [INFO]  KGenProgMain - entered the era of 157th generation.
2023-08-02 07:07:39 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 31 minutes 4 seconds
Variants: generated 100, build-succeeded 65, build-failed 28, syntax-invalid 1, redundant 6
Fitness: max 0(65), min 0(65), ave 0
Test execution time: sum 3648 ms, max 106 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 07:07:39 [main] [INFO]  KGenProgMain - entered the era of 158th generation.
2023-08-02 07:08:00 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 31 minutes 25 seconds
Variants: generated 100, build-succeeded 57, build-failed 29, syntax-invalid 6, redundant 8
Fitness: max 0(57), min 0(57), ave 0
Test execution time: sum 3225 ms, max 99 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 07:08:00 [main] [INFO]  KGenProgMain - entered the era of 159th generation.
2023-08-02 07:08:20 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 31 minutes 45 seconds
Variants: generated 100, build-succeeded 51, build-failed 38, syntax-invalid 9, redundant 2
Fitness: max 0(51), min 0(51), ave 0
Test execution time: sum 2781 ms, max 78 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 07:08:20 [main] [INFO]  KGenProgMain - entered the era of 160th generation.
2023-08-02 07:08:42 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 32 minutes 6 seconds
Variants: generated 100, build-succeeded 62, build-failed 33, syntax-invalid 2, redundant 3
Fitness: max 0(62), min 0(62), ave 0
Test execution time: sum 3428 ms, max 116 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 07:08:42 [main] [INFO]  KGenProgMain - entered the era of 161st generation.
2023-08-02 07:09:03 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 32 minutes 27 seconds
Variants: generated 100, build-succeeded 55, build-failed 32, syntax-invalid 9, redundant 4
Fitness: max 0(55), min 0(55), ave 0
Test execution time: sum 3126 ms, max 100 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 07:09:03 [main] [INFO]  KGenProgMain - entered the era of 162nd generation.
2023-08-02 07:12:25 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 35 minutes 49 seconds
Variants: generated 100, build-succeeded 59, build-failed 29, syntax-invalid 9, redundant 3
Fitness: max 0(59), min 0(59), ave 0
Test execution time: sum 183508 ms, max 180066 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 07:12:25 [main] [INFO]  KGenProgMain - entered the era of 163rd generation.
2023-08-02 07:12:46 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 36 minutes 11 seconds
Variants: generated 100, build-succeeded 53, build-failed 35, syntax-invalid 6, redundant 6
Fitness: max 0(53), min 0(53), ave 0
Test execution time: sum 3023 ms, max 106 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 07:12:46 [main] [INFO]  KGenProgMain - entered the era of 164th generation.
2023-08-02 07:13:07 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 36 minutes 31 seconds
Variants: generated 100, build-succeeded 58, build-failed 27, syntax-invalid 10, redundant 5
Fitness: max 0(58), min 0(58), ave 0
Test execution time: sum 3072 ms, max 71 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 07:13:07 [main] [INFO]  KGenProgMain - entered the era of 165th generation.
2023-08-02 07:13:28 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 36 minutes 52 seconds
Variants: generated 100, build-succeeded 54, build-failed 33, syntax-invalid 9, redundant 4
Fitness: max 0(54), min 0(54), ave 0
Test execution time: sum 3027 ms, max 103 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 07:13:28 [main] [INFO]  KGenProgMain - entered the era of 166th generation.
2023-08-02 07:13:48 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 37 minutes 13 seconds
Variants: generated 100, build-succeeded 47, build-failed 32, syntax-invalid 19, redundant 2
Fitness: max 0(47), min 0(47), ave 0
Test execution time: sum 2686 ms, max 120 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 07:13:48 [main] [INFO]  KGenProgMain - entered the era of 167th generation.
2023-08-02 07:14:08 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 37 minutes 32 seconds
Variants: generated 100, build-succeeded 52, build-failed 35, syntax-invalid 10, redundant 3
Fitness: max 0(52), min 0(52), ave 0
Test execution time: sum 2833 ms, max 97 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 07:14:08 [main] [INFO]  KGenProgMain - entered the era of 168th generation.
2023-08-02 07:14:29 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 37 minutes 53 seconds
Variants: generated 100, build-succeeded 53, build-failed 25, syntax-invalid 16, redundant 6
Fitness: max 0(53), min 0(53), ave 0
Test execution time: sum 2973 ms, max 103 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 07:14:29 [main] [INFO]  KGenProgMain - entered the era of 169th generation.
2023-08-02 07:17:50 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 41 minutes 14 seconds
Variants: generated 100, build-succeeded 57, build-failed 30, syntax-invalid 13, redundant 0
Fitness: max 0(57), min 0(57), ave 0
Test execution time: sum 183337 ms, max 180067 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 07:17:50 [main] [INFO]  KGenProgMain - entered the era of 170th generation.
2023-08-02 07:18:12 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 41 minutes 36 seconds
Variants: generated 100, build-succeeded 58, build-failed 32, syntax-invalid 7, redundant 3
Fitness: max 0(58), min 0(58), ave 0
Test execution time: sum 3373 ms, max 100 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 07:18:12 [main] [INFO]  KGenProgMain - entered the era of 171st generation.
2023-08-02 07:18:32 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 41 minutes 56 seconds
Variants: generated 100, build-succeeded 51, build-failed 23, syntax-invalid 20, redundant 6
Fitness: max 0(51), min 0(51), ave 0
Test execution time: sum 2678 ms, max 73 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 07:18:32 [main] [INFO]  KGenProgMain - entered the era of 172nd generation.
2023-08-02 07:18:53 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 42 minutes 17 seconds
Variants: generated 100, build-succeeded 51, build-failed 22, syntax-invalid 19, redundant 8
Fitness: max 0(51), min 0(51), ave 0
Test execution time: sum 2788 ms, max 112 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 07:18:53 [main] [INFO]  KGenProgMain - entered the era of 173rd generation.
2023-08-02 07:19:12 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 42 minutes 37 seconds
Variants: generated 100, build-succeeded 51, build-failed 28, syntax-invalid 17, redundant 4
Fitness: max 0(51), min 0(51), ave 0
Test execution time: sum 2677 ms, max 73 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 07:19:12 [main] [INFO]  KGenProgMain - entered the era of 174th generation.
2023-08-02 07:19:31 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 42 minutes 55 seconds
Variants: generated 100, build-succeeded 39, build-failed 30, syntax-invalid 26, redundant 5
Fitness: max 0(39), min 0(39), ave 0
Test execution time: sum 2060 ms, max 68 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 07:19:31 [main] [INFO]  KGenProgMain - entered the era of 175th generation.
2023-08-02 07:19:51 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 43 minutes 15 seconds
Variants: generated 100, build-succeeded 45, build-failed 30, syntax-invalid 25, redundant 0
Fitness: max 0(45), min 0(45), ave 0
Test execution time: sum 2526 ms, max 125 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 07:19:51 [main] [INFO]  KGenProgMain - entered the era of 176th generation.
2023-08-02 07:20:10 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 43 minutes 34 seconds
Variants: generated 100, build-succeeded 42, build-failed 36, syntax-invalid 20, redundant 2
Fitness: max 0(42), min 0(42), ave 0
Test execution time: sum 2192 ms, max 71 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 07:20:10 [main] [INFO]  KGenProgMain - entered the era of 177th generation.
2023-08-02 07:20:30 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 43 minutes 54 seconds
Variants: generated 100, build-succeeded 50, build-failed 27, syntax-invalid 19, redundant 4
Fitness: max 0(50), min 0(50), ave 0
Test execution time: sum 2750 ms, max 70 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 07:20:30 [main] [INFO]  KGenProgMain - entered the era of 178th generation.
2023-08-02 07:20:49 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 44 minutes 13 seconds
Variants: generated 100, build-succeeded 42, build-failed 28, syntax-invalid 28, redundant 2
Fitness: max 0(42), min 0(42), ave 0
Test execution time: sum 2270 ms, max 102 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 07:20:49 [main] [INFO]  KGenProgMain - entered the era of 179th generation.
2023-08-02 07:21:08 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 44 minutes 32 seconds
Variants: generated 100, build-succeeded 40, build-failed 29, syntax-invalid 26, redundant 5
Fitness: max 0(40), min 0(40), ave 0
Test execution time: sum 2085 ms, max 74 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 07:21:08 [main] [INFO]  KGenProgMain - entered the era of 180th generation.
2023-08-02 07:21:28 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 44 minutes 52 seconds
Variants: generated 100, build-succeeded 48, build-failed 24, syntax-invalid 24, redundant 4
Fitness: max 0(48), min 0(48), ave 0
Test execution time: sum 2560 ms, max 68 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 07:21:28 [main] [INFO]  KGenProgMain - entered the era of 181st generation.
2023-08-02 07:21:48 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 45 minutes 12 seconds
Variants: generated 100, build-succeeded 38, build-failed 30, syntax-invalid 31, redundant 1
Fitness: max 0(38), min 0(38), ave 0
Test execution time: sum 2136 ms, max 105 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 07:21:48 [main] [INFO]  KGenProgMain - entered the era of 182nd generation.
2023-08-02 07:22:08 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 45 minutes 32 seconds
Variants: generated 100, build-succeeded 39, build-failed 30, syntax-invalid 29, redundant 2
Fitness: max 0(39), min 0(39), ave 0
Test execution time: sum 2043 ms, max 74 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 07:22:08 [main] [INFO]  KGenProgMain - entered the era of 183rd generation.
2023-08-02 07:22:27 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 45 minutes 52 seconds
Variants: generated 100, build-succeeded 39, build-failed 30, syntax-invalid 28, redundant 3
Fitness: max 0(39), min 0(39), ave 0
Test execution time: sum 2070 ms, max 71 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 07:22:27 [main] [INFO]  KGenProgMain - entered the era of 184th generation.
2023-08-02 07:22:48 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 46 minutes 12 seconds
Variants: generated 100, build-succeeded 47, build-failed 30, syntax-invalid 21, redundant 2
Fitness: max 0(47), min 0(47), ave 0
Test execution time: sum 2549 ms, max 69 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 07:22:48 [main] [INFO]  KGenProgMain - entered the era of 185th generation.
2023-08-02 07:29:10 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 52 minutes 34 seconds
Variants: generated 100, build-succeeded 38, build-failed 32, syntax-invalid 27, redundant 3
Fitness: max 0(38), min 0(38), ave 0
Test execution time: sum 362575 ms, max 180071 ms, min 51 ms
----------------------------------------------------------------

2023-08-02 07:29:10 [main] [INFO]  KGenProgMain - entered the era of 186th generation.
2023-08-02 07:32:32 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 55 minutes 56 seconds
Variants: generated 100, build-succeeded 46, build-failed 28, syntax-invalid 21, redundant 5
Fitness: max 0(46), min 0(46), ave 0
Test execution time: sum 182783 ms, max 180067 ms, min 51 ms
----------------------------------------------------------------

2023-08-02 07:32:32 [main] [INFO]  KGenProgMain - entered the era of 187th generation.
2023-08-02 07:32:55 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 56 minutes 19 seconds
Variants: generated 100, build-succeeded 55, build-failed 29, syntax-invalid 16, redundant 0
Fitness: max 0(55), min 0(55), ave 0
Test execution time: sum 2999 ms, max 70 ms, min 51 ms
----------------------------------------------------------------

2023-08-02 07:32:55 [main] [INFO]  KGenProgMain - entered the era of 188th generation.
2023-08-02 07:33:18 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 56 minutes 43 seconds
Variants: generated 100, build-succeeded 45, build-failed 33, syntax-invalid 20, redundant 2
Fitness: max 0(45), min 0(45), ave 0
Test execution time: sum 2775 ms, max 105 ms, min 52 ms
----------------------------------------------------------------

2023-08-02 07:33:18 [main] [INFO]  KGenProgMain - entered the era of 189th generation.
2023-08-02 07:33:40 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 57 minutes 4 seconds
Variants: generated 100, build-succeeded 47, build-failed 34, syntax-invalid 18, redundant 1
Fitness: max 0(47), min 0(47), ave 0
Test execution time: sum 2566 ms, max 87 ms, min 51 ms
----------------------------------------------------------------

2023-08-02 07:33:40 [main] [INFO]  KGenProgMain - entered the era of 190th generation.
2023-08-02 07:34:01 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 57 minutes 26 seconds
Variants: generated 100, build-succeeded 45, build-failed 31, syntax-invalid 21, redundant 3
Fitness: max 0(45), min 0(45), ave 0
Test execution time: sum 2489 ms, max 76 ms, min 51 ms
----------------------------------------------------------------

2023-08-02 07:34:01 [main] [INFO]  KGenProgMain - entered the era of 191st generation.
2023-08-02 07:34:24 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 57 minutes 49 seconds
Variants: generated 100, build-succeeded 54, build-failed 22, syntax-invalid 21, redundant 3
Fitness: max 0(54), min 0(54), ave 0
Test execution time: sum 3115 ms, max 106 ms, min 51 ms
----------------------------------------------------------------

2023-08-02 07:34:24 [main] [INFO]  KGenProgMain - entered the era of 192nd generation.
2023-08-02 07:34:47 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 58 minutes 12 seconds
Variants: generated 100, build-succeeded 51, build-failed 33, syntax-invalid 14, redundant 2
Fitness: max 0(51), min 0(51), ave 0
Test execution time: sum 2807 ms, max 83 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 07:34:47 [main] [INFO]  KGenProgMain - entered the era of 193rd generation.
2023-08-02 07:35:09 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 58 minutes 33 seconds
Variants: generated 100, build-succeeded 41, build-failed 38, syntax-invalid 19, redundant 2
Fitness: max 0(41), min 0(41), ave 0
Test execution time: sum 2284 ms, max 89 ms, min 51 ms
----------------------------------------------------------------

2023-08-02 07:35:09 [main] [INFO]  KGenProgMain - entered the era of 194th generation.
2023-08-02 07:35:33 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 58 minutes 57 seconds
Variants: generated 100, build-succeeded 52, build-failed 31, syntax-invalid 14, redundant 3
Fitness: max 0(52), min 0(52), ave 0
Test execution time: sum 2934 ms, max 126 ms, min 51 ms
----------------------------------------------------------------

2023-08-02 07:35:33 [main] [INFO]  KGenProgMain - entered the era of 195th generation.
2023-08-02 07:35:57 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 59 minutes 22 seconds
Variants: generated 100, build-succeeded 58, build-failed 30, syntax-invalid 11, redundant 1
Fitness: max 0(58), min 0(58), ave 0
Test execution time: sum 3362 ms, max 96 ms, min 51 ms
----------------------------------------------------------------

2023-08-02 07:35:57 [main] [INFO]  KGenProgMain - entered the era of 196th generation.
2023-08-02 07:36:20 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 59 minutes 44 seconds
Variants: generated 100, build-succeeded 47, build-failed 32, syntax-invalid 15, redundant 6
Fitness: max 0(47), min 0(47), ave 0
Test execution time: sum 2613 ms, max 70 ms, min 51 ms
----------------------------------------------------------------

2023-08-02 07:36:20 [main] [INFO]  KGenProgMain - entered the era of 197th generation.
2023-08-02 07:36:44 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 9 seconds
Variants: generated 100, build-succeeded 46, build-failed 37, syntax-invalid 16, redundant 1
Fitness: max 0(46), min 0(46), ave 0
Test execution time: sum 2701 ms, max 114 ms, min 51 ms
----------------------------------------------------------------

2023-08-02 07:36:44 [main] [INFO]  KGenProgMain - entered the era of 198th generation.
2023-08-02 07:37:09 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 34 seconds
Variants: generated 100, build-succeeded 62, build-failed 31, syntax-invalid 6, redundant 1
Fitness: max 0(62), min 0(62), ave 0
Test execution time: sum 3414 ms, max 79 ms, min 51 ms
----------------------------------------------------------------

2023-08-02 07:37:09 [main] [INFO]  KGenProgMain - entered the era of 199th generation.
2023-08-02 07:37:33 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 57 seconds
Variants: generated 100, build-succeeded 62, build-failed 22, syntax-invalid 11, redundant 5
Fitness: max 0(62), min 0(62), ave 0
Test execution time: sum 3323 ms, max 69 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 07:37:33 [main] [INFO]  KGenProgMain - entered the era of 200th generation.
2023-08-02 07:37:57 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 1 minutes 21 seconds
Variants: generated 100, build-succeeded 49, build-failed 31, syntax-invalid 17, redundant 3
Fitness: max 0(49), min 0(49), ave 0
Test execution time: sum 2793 ms, max 111 ms, min 51 ms
----------------------------------------------------------------

2023-08-02 07:37:57 [main] [INFO]  KGenProgMain - entered the era of 201st generation.
2023-08-02 07:38:21 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 1 minutes 45 seconds
Variants: generated 100, build-succeeded 58, build-failed 32, syntax-invalid 9, redundant 1
Fitness: max 0(58), min 0(58), ave 0
Test execution time: sum 3151 ms, max 83 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 07:38:21 [main] [INFO]  KGenProgMain - entered the era of 202nd generation.
2023-08-02 07:38:45 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 2 minutes 9 seconds
Variants: generated 100, build-succeeded 55, build-failed 30, syntax-invalid 10, redundant 5
Fitness: max 0(55), min 0(55), ave 0
Test execution time: sum 3083 ms, max 78 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 07:38:45 [main] [INFO]  KGenProgMain - entered the era of 203rd generation.
2023-08-02 07:39:10 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 2 minutes 35 seconds
Variants: generated 100, build-succeeded 58, build-failed 27, syntax-invalid 8, redundant 7
Fitness: max 0(58), min 0(58), ave 0
Test execution time: sum 3324 ms, max 112 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 07:39:10 [main] [INFO]  KGenProgMain - entered the era of 204th generation.
2023-08-02 07:42:34 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 5 minutes 59 seconds
Variants: generated 100, build-succeeded 57, build-failed 27, syntax-invalid 13, redundant 3
Fitness: max 1(1), min 0(56), ave 0.018
Test execution time: sum 183342 ms, max 180065 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 07:42:34 [main] [INFO]  KGenProgMain - entered the era of 205th generation.
2023-08-02 07:42:59 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 6 minutes 24 seconds
Variants: generated 100, build-succeeded 61, build-failed 33, syntax-invalid 2, redundant 4
Fitness: max 0(61), min 0(61), ave 0
Test execution time: sum 3398 ms, max 68 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 07:42:59 [main] [INFO]  KGenProgMain - entered the era of 206th generation.
2023-08-02 07:43:25 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 6 minutes 49 seconds
Variants: generated 100, build-succeeded 63, build-failed 28, syntax-invalid 7, redundant 2
Fitness: max 1(1), min 0(62), ave 0.016
Test execution time: sum 3832 ms, max 237 ms, min 51 ms
----------------------------------------------------------------

2023-08-02 07:43:25 [main] [INFO]  KGenProgMain - entered the era of 207th generation.
2023-08-02 07:43:50 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 7 minutes 14 seconds
Variants: generated 100, build-succeeded 58, build-failed 26, syntax-invalid 7, redundant 9
Fitness: max 0(58), min 0(58), ave 0
Test execution time: sum 3391 ms, max 90 ms, min 51 ms
----------------------------------------------------------------

2023-08-02 07:43:50 [main] [INFO]  KGenProgMain - entered the era of 208th generation.
2023-08-02 07:44:15 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 7 minutes 39 seconds
Variants: generated 100, build-succeeded 62, build-failed 29, syntax-invalid 6, redundant 3
Fitness: max 0(62), min 0(62), ave 0
Test execution time: sum 3566 ms, max 75 ms, min 51 ms
----------------------------------------------------------------

2023-08-02 07:44:15 [main] [INFO]  KGenProgMain - entered the era of 209th generation.
2023-08-02 07:44:42 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 8 minutes 6 seconds
Variants: generated 100, build-succeeded 61, build-failed 28, syntax-invalid 7, redundant 4
Fitness: max 0(61), min 0(61), ave 0
Test execution time: sum 3682 ms, max 107 ms, min 51 ms
----------------------------------------------------------------

2023-08-02 07:44:42 [main] [INFO]  KGenProgMain - entered the era of 210th generation.
2023-08-02 07:45:06 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 8 minutes 30 seconds
Variants: generated 100, build-succeeded 55, build-failed 28, syntax-invalid 11, redundant 6
Fitness: max 0(55), min 0(55), ave 0
Test execution time: sum 3101 ms, max 80 ms, min 51 ms
----------------------------------------------------------------

2023-08-02 07:45:06 [main] [INFO]  KGenProgMain - entered the era of 211th generation.
2023-08-02 07:45:29 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 8 minutes 54 seconds
Variants: generated 100, build-succeeded 51, build-failed 30, syntax-invalid 16, redundant 3
Fitness: max 0(51), min 0(51), ave 0
Test execution time: sum 2850 ms, max 70 ms, min 51 ms
----------------------------------------------------------------

2023-08-02 07:45:29 [main] [INFO]  KGenProgMain - entered the era of 212th generation.
2023-08-02 07:45:54 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 9 minutes 19 seconds
Variants: generated 100, build-succeeded 49, build-failed 27, syntax-invalid 19, redundant 5
Fitness: max 0(49), min 0(49), ave 0
Test execution time: sum 2997 ms, max 114 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 07:45:54 [main] [INFO]  KGenProgMain - entered the era of 213th generation.
2023-08-02 07:46:20 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 9 minutes 44 seconds
Variants: generated 100, build-succeeded 61, build-failed 32, syntax-invalid 3, redundant 4
Fitness: max 0(61), min 0(61), ave 0
Test execution time: sum 3329 ms, max 80 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 07:46:20 [main] [INFO]  KGenProgMain - entered the era of 214th generation.
2023-08-02 07:46:45 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 10 minutes 10 seconds
Variants: generated 100, build-succeeded 61, build-failed 30, syntax-invalid 5, redundant 4
Fitness: max 0(61), min 0(61), ave 0
Test execution time: sum 3438 ms, max 75 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 07:46:45 [main] [INFO]  KGenProgMain - entered the era of 215th generation.
2023-08-02 07:47:13 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 10 minutes 37 seconds
Variants: generated 100, build-succeeded 65, build-failed 30, syntax-invalid 5, redundant 0
Fitness: max 0(65), min 0(65), ave 0
Test execution time: sum 4039 ms, max 125 ms, min 51 ms
----------------------------------------------------------------

2023-08-02 07:47:13 [main] [INFO]  KGenProgMain - entered the era of 216th generation.
2023-08-02 07:47:37 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 11 minutes 1 seconds
Variants: generated 100, build-succeeded 54, build-failed 30, syntax-invalid 9, redundant 7
Fitness: max 0(54), min 0(54), ave 0
Test execution time: sum 3014 ms, max 87 ms, min 51 ms
----------------------------------------------------------------

2023-08-02 07:47:37 [main] [INFO]  KGenProgMain - entered the era of 217th generation.
2023-08-02 07:48:03 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 11 minutes 27 seconds
Variants: generated 100, build-succeeded 59, build-failed 29, syntax-invalid 7, redundant 5
Fitness: max 0(59), min 0(59), ave 0
Test execution time: sum 3387 ms, max 75 ms, min 51 ms
----------------------------------------------------------------

2023-08-02 07:48:03 [main] [INFO]  KGenProgMain - entered the era of 218th generation.
2023-08-02 07:48:30 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 11 minutes 55 seconds
Variants: generated 100, build-succeeded 56, build-failed 32, syntax-invalid 6, redundant 6
Fitness: max 0(56), min 0(56), ave 0
Test execution time: sum 3236 ms, max 105 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 07:48:30 [main] [INFO]  KGenProgMain - entered the era of 219th generation.
2023-08-02 07:48:56 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 12 minutes 20 seconds
Variants: generated 100, build-succeeded 58, build-failed 25, syntax-invalid 9, redundant 8
Fitness: max 0(58), min 0(58), ave 0
Test execution time: sum 3358 ms, max 85 ms, min 51 ms
----------------------------------------------------------------

2023-08-02 07:48:56 [main] [INFO]  KGenProgMain - entered the era of 220th generation.
2023-08-02 07:49:21 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 12 minutes 46 seconds
Variants: generated 100, build-succeeded 55, build-failed 33, syntax-invalid 7, redundant 5
Fitness: max 1(1), min 0(54), ave 0.018
Test execution time: sum 3202 ms, max 83 ms, min 51 ms
----------------------------------------------------------------

2023-08-02 07:49:21 [main] [INFO]  KGenProgMain - entered the era of 221st generation.
2023-08-02 07:49:48 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 13 minutes 13 seconds
Variants: generated 100, build-succeeded 56, build-failed 34, syntax-invalid 7, redundant 3
Fitness: max 0(56), min 0(56), ave 0
Test execution time: sum 3576 ms, max 267 ms, min 52 ms
----------------------------------------------------------------

2023-08-02 07:49:48 [main] [INFO]  KGenProgMain - entered the era of 222nd generation.
2023-08-02 07:50:13 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 13 minutes 37 seconds
Variants: generated 100, build-succeeded 49, build-failed 38, syntax-invalid 10, redundant 3
Fitness: max 0(49), min 0(49), ave 0
Test execution time: sum 2741 ms, max 73 ms, min 51 ms
----------------------------------------------------------------

2023-08-02 07:50:13 [main] [INFO]  KGenProgMain - entered the era of 223rd generation.
2023-08-02 07:50:40 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 14 minutes 4 seconds
Variants: generated 100, build-succeeded 56, build-failed 29, syntax-invalid 11, redundant 4
Fitness: max 0(56), min 0(56), ave 0
Test execution time: sum 3241 ms, max 104 ms, min 51 ms
----------------------------------------------------------------

2023-08-02 07:50:40 [main] [INFO]  KGenProgMain - entered the era of 224th generation.
2023-08-02 07:51:05 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 14 minutes 29 seconds
Variants: generated 100, build-succeeded 60, build-failed 28, syntax-invalid 11, redundant 1
Fitness: max 0(60), min 0(60), ave 0
Test execution time: sum 3330 ms, max 68 ms, min 51 ms
----------------------------------------------------------------

2023-08-02 07:51:05 [main] [INFO]  KGenProgMain - entered the era of 225th generation.
2023-08-02 07:51:32 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 14 minutes 57 seconds
Variants: generated 100, build-succeeded 60, build-failed 31, syntax-invalid 7, redundant 2
Fitness: max 0(60), min 0(60), ave 0
Test execution time: sum 3433 ms, max 117 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 07:51:32 [main] [INFO]  KGenProgMain - entered the era of 226th generation.
2023-08-02 07:51:59 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 15 minutes 23 seconds
Variants: generated 100, build-succeeded 65, build-failed 28, syntax-invalid 6, redundant 1
Fitness: max 0(65), min 0(65), ave 0
Test execution time: sum 3509 ms, max 71 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 07:51:59 [main] [INFO]  KGenProgMain - entered the era of 227th generation.
2023-08-02 07:52:25 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 15 minutes 49 seconds
Variants: generated 100, build-succeeded 54, build-failed 31, syntax-invalid 9, redundant 6
Fitness: max 0(54), min 0(54), ave 0
Test execution time: sum 2973 ms, max 73 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 07:52:25 [main] [INFO]  KGenProgMain - entered the era of 228th generation.
2023-08-02 07:52:51 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 16 minutes 15 seconds
Variants: generated 100, build-succeeded 49, build-failed 30, syntax-invalid 17, redundant 4
Fitness: max 0(49), min 0(49), ave 0
Test execution time: sum 2771 ms, max 107 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 07:52:51 [main] [INFO]  KGenProgMain - entered the era of 229th generation.
2023-08-02 07:53:16 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 16 minutes 41 seconds
Variants: generated 100, build-succeeded 56, build-failed 29, syntax-invalid 14, redundant 1
Fitness: max 0(56), min 0(56), ave 0
Test execution time: sum 2951 ms, max 82 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 07:53:16 [main] [INFO]  KGenProgMain - entered the era of 230th generation.
2023-08-02 07:53:41 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 17 minutes 6 seconds
Variants: generated 100, build-succeeded 51, build-failed 30, syntax-invalid 14, redundant 5
Fitness: max 0(51), min 0(51), ave 0
Test execution time: sum 2801 ms, max 68 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 07:53:41 [main] [INFO]  KGenProgMain - entered the era of 231st generation.
2023-08-02 07:54:08 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 17 minutes 32 seconds
Variants: generated 100, build-succeeded 56, build-failed 31, syntax-invalid 11, redundant 2
Fitness: max 0(56), min 0(56), ave 0
Test execution time: sum 3334 ms, max 217 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 07:54:08 [main] [INFO]  KGenProgMain - entered the era of 232nd generation.
2023-08-02 07:54:34 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 17 minutes 58 seconds
Variants: generated 100, build-succeeded 52, build-failed 33, syntax-invalid 11, redundant 4
Fitness: max 0(52), min 0(52), ave 0
Test execution time: sum 2962 ms, max 81 ms, min 51 ms
----------------------------------------------------------------

2023-08-02 07:54:34 [main] [INFO]  KGenProgMain - entered the era of 233rd generation.
2023-08-02 07:55:00 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 18 minutes 25 seconds
Variants: generated 100, build-succeeded 63, build-failed 26, syntax-invalid 7, redundant 4
Fitness: max 0(63), min 0(63), ave 0
Test execution time: sum 3621 ms, max 74 ms, min 51 ms
----------------------------------------------------------------

2023-08-02 07:55:00 [main] [INFO]  KGenProgMain - entered the era of 234th generation.
2023-08-02 07:55:27 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 18 minutes 52 seconds
Variants: generated 100, build-succeeded 58, build-failed 25, syntax-invalid 11, redundant 6
Fitness: max 1(1), min 0(57), ave 0.017
Test execution time: sum 3590 ms, max 132 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 07:55:27 [main] [INFO]  KGenProgMain - entered the era of 235th generation.
2023-08-02 07:55:53 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 19 minutes 18 seconds
Variants: generated 100, build-succeeded 53, build-failed 30, syntax-invalid 13, redundant 4
Fitness: max 0(53), min 0(53), ave 0
Test execution time: sum 3065 ms, max 79 ms, min 51 ms
----------------------------------------------------------------

2023-08-02 07:55:53 [main] [INFO]  KGenProgMain - entered the era of 236th generation.
2023-08-02 07:56:22 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 19 minutes 46 seconds
Variants: generated 100, build-succeeded 61, build-failed 31, syntax-invalid 8, redundant 0
Fitness: max 1(1), min 0(60), ave 0.016
Test execution time: sum 3885 ms, max 253 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 07:56:22 [main] [INFO]  KGenProgMain - entered the era of 237th generation.
2023-08-02 07:56:49 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 20 minutes 13 seconds
Variants: generated 100, build-succeeded 56, build-failed 28, syntax-invalid 11, redundant 5
Fitness: max 0(56), min 0(56), ave 0
Test execution time: sum 3196 ms, max 90 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 07:56:49 [main] [INFO]  KGenProgMain - entered the era of 238th generation.
2023-08-02 07:57:14 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 20 minutes 39 seconds
Variants: generated 100, build-succeeded 56, build-failed 25, syntax-invalid 13, redundant 6
Fitness: max 0(56), min 0(56), ave 0
Test execution time: sum 3237 ms, max 90 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 07:57:14 [main] [INFO]  KGenProgMain - entered the era of 239th generation.
2023-08-02 07:57:41 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 21 minutes 5 seconds
Variants: generated 100, build-succeeded 48, build-failed 36, syntax-invalid 14, redundant 2
Fitness: max 0(48), min 0(48), ave 0
Test execution time: sum 2960 ms, max 121 ms, min 51 ms
----------------------------------------------------------------

2023-08-02 07:57:41 [main] [INFO]  KGenProgMain - entered the era of 240th generation.
2023-08-02 08:01:08 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 24 minutes 32 seconds
Variants: generated 100, build-succeeded 59, build-failed 29, syntax-invalid 9, redundant 3
Fitness: max 0(59), min 0(59), ave 0
Test execution time: sum 183519 ms, max 180068 ms, min 52 ms
----------------------------------------------------------------

2023-08-02 08:01:08 [main] [INFO]  KGenProgMain - entered the era of 241st generation.
2023-08-02 08:01:34 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 24 minutes 58 seconds
Variants: generated 100, build-succeeded 51, build-failed 29, syntax-invalid 13, redundant 7
Fitness: max 1(1), min 0(50), ave 0.02
Test execution time: sum 3051 ms, max 74 ms, min 52 ms
----------------------------------------------------------------

2023-08-02 08:01:34 [main] [INFO]  KGenProgMain - entered the era of 242nd generation.
2023-08-02 08:02:02 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 25 minutes 26 seconds
Variants: generated 100, build-succeeded 62, build-failed 33, syntax-invalid 5, redundant 0
Fitness: max 0(62), min 0(62), ave 0
Test execution time: sum 3684 ms, max 123 ms, min 51 ms
----------------------------------------------------------------

2023-08-02 08:02:02 [main] [INFO]  KGenProgMain - entered the era of 243rd generation.
2023-08-02 08:02:27 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 25 minutes 52 seconds
Variants: generated 100, build-succeeded 59, build-failed 27, syntax-invalid 10, redundant 4
Fitness: max 0(59), min 0(59), ave 0
Test execution time: sum 3295 ms, max 78 ms, min 51 ms
----------------------------------------------------------------

2023-08-02 08:02:27 [main] [INFO]  KGenProgMain - entered the era of 244th generation.
2023-08-02 08:02:52 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 26 minutes 16 seconds
Variants: generated 100, build-succeeded 48, build-failed 29, syntax-invalid 18, redundant 5
Fitness: max 0(48), min 0(48), ave 0
Test execution time: sum 2746 ms, max 72 ms, min 51 ms
----------------------------------------------------------------

2023-08-02 08:02:52 [main] [INFO]  KGenProgMain - entered the era of 245th generation.
2023-08-02 08:03:19 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 26 minutes 43 seconds
Variants: generated 100, build-succeeded 56, build-failed 29, syntax-invalid 10, redundant 5
Fitness: max 0(56), min 0(56), ave 0
Test execution time: sum 3551 ms, max 142 ms, min 52 ms
----------------------------------------------------------------

2023-08-02 08:03:19 [main] [INFO]  KGenProgMain - entered the era of 246th generation.
2023-08-02 08:03:43 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 27 minutes 7 seconds
Variants: generated 100, build-succeeded 47, build-failed 30, syntax-invalid 17, redundant 6
Fitness: max 1(2), min 0(45), ave 0.043
Test execution time: sum 2730 ms, max 78 ms, min 52 ms
----------------------------------------------------------------

2023-08-02 08:03:43 [main] [INFO]  KGenProgMain - entered the era of 247th generation.
2023-08-02 08:04:08 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 27 minutes 33 seconds
Variants: generated 100, build-succeeded 52, build-failed 34, syntax-invalid 9, redundant 5
Fitness: max 0(52), min 0(52), ave 0
Test execution time: sum 3114 ms, max 80 ms, min 52 ms
----------------------------------------------------------------

2023-08-02 08:04:08 [main] [INFO]  KGenProgMain - entered the era of 248th generation.
2023-08-02 08:04:35 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 28 minutes 0 seconds
Variants: generated 100, build-succeeded 51, build-failed 38, syntax-invalid 9, redundant 2
Fitness: max 0(51), min 0(51), ave 0
Test execution time: sum 3170 ms, max 129 ms, min 52 ms
----------------------------------------------------------------

2023-08-02 08:04:35 [main] [INFO]  KGenProgMain - entered the era of 249th generation.
2023-08-02 08:05:02 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 28 minutes 27 seconds
Variants: generated 100, build-succeeded 56, build-failed 34, syntax-invalid 6, redundant 4
Fitness: max 0(56), min 0(56), ave 0
Test execution time: sum 3352 ms, max 78 ms, min 51 ms
----------------------------------------------------------------

2023-08-02 08:05:02 [main] [INFO]  KGenProgMain - entered the era of 250th generation.
2023-08-02 08:05:29 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 28 minutes 53 seconds
Variants: generated 100, build-succeeded 53, build-failed 29, syntax-invalid 15, redundant 3
Fitness: max 0(53), min 0(53), ave 0
Test execution time: sum 3328 ms, max 120 ms, min 51 ms
----------------------------------------------------------------

2023-08-02 08:05:29 [main] [INFO]  KGenProgMain - entered the era of 251st generation.
2023-08-02 08:05:57 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 29 minutes 21 seconds
Variants: generated 100, build-succeeded 61, build-failed 31, syntax-invalid 5, redundant 3
Fitness: max 0(61), min 0(61), ave 0
Test execution time: sum 3517 ms, max 99 ms, min 51 ms
----------------------------------------------------------------

2023-08-02 08:05:57 [main] [INFO]  KGenProgMain - entered the era of 252nd generation.
2023-08-02 08:06:25 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 29 minutes 49 seconds
Variants: generated 100, build-succeeded 59, build-failed 35, syntax-invalid 5, redundant 1
Fitness: max 0(59), min 0(59), ave 0
Test execution time: sum 3411 ms, max 69 ms, min 52 ms
----------------------------------------------------------------

2023-08-02 08:06:25 [main] [INFO]  KGenProgMain - entered the era of 253rd generation.
2023-08-02 08:06:54 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 30 minutes 18 seconds
Variants: generated 100, build-succeeded 59, build-failed 37, syntax-invalid 4, redundant 0
Fitness: max 0(59), min 0(59), ave 0
Test execution time: sum 3569 ms, max 117 ms, min 51 ms
----------------------------------------------------------------

2023-08-02 08:06:54 [main] [INFO]  KGenProgMain - entered the era of 254th generation.
2023-08-02 08:07:21 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 30 minutes 45 seconds
Variants: generated 100, build-succeeded 54, build-failed 31, syntax-invalid 8, redundant 7
Fitness: max 0(54), min 0(54), ave 0
Test execution time: sum 3047 ms, max 70 ms, min 51 ms
----------------------------------------------------------------

2023-08-02 08:07:21 [main] [INFO]  KGenProgMain - entered the era of 255th generation.
2023-08-02 08:07:48 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 31 minutes 13 seconds
Variants: generated 100, build-succeeded 57, build-failed 31, syntax-invalid 9, redundant 3
Fitness: max 0(57), min 0(57), ave 0
Test execution time: sum 3277 ms, max 70 ms, min 51 ms
----------------------------------------------------------------

2023-08-02 08:07:48 [main] [INFO]  KGenProgMain - entered the era of 256th generation.
2023-08-02 08:08:18 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 31 minutes 42 seconds
Variants: generated 100, build-succeeded 57, build-failed 25, syntax-invalid 11, redundant 7
Fitness: max 0(57), min 0(57), ave 0
Test execution time: sum 3539 ms, max 135 ms, min 52 ms
----------------------------------------------------------------

2023-08-02 08:08:18 [main] [INFO]  KGenProgMain - entered the era of 257th generation.
2023-08-02 08:08:46 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 32 minutes 10 seconds
Variants: generated 100, build-succeeded 58, build-failed 30, syntax-invalid 9, redundant 3
Fitness: max 0(58), min 0(58), ave 0
Test execution time: sum 3348 ms, max 78 ms, min 51 ms
----------------------------------------------------------------

2023-08-02 08:08:46 [main] [INFO]  KGenProgMain - entered the era of 258th generation.
2023-08-02 08:09:16 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 32 minutes 41 seconds
Variants: generated 100, build-succeeded 69, build-failed 23, syntax-invalid 4, redundant 4
Fitness: max 0(69), min 0(69), ave 0
Test execution time: sum 4193 ms, max 111 ms, min 51 ms
----------------------------------------------------------------

2023-08-02 08:09:16 [main] [INFO]  KGenProgMain - entered the era of 259th generation.
2023-08-02 08:09:45 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 33 minutes 10 seconds
Variants: generated 100, build-succeeded 58, build-failed 34, syntax-invalid 5, redundant 3
Fitness: max 0(58), min 0(58), ave 0
Test execution time: sum 3322 ms, max 84 ms, min 51 ms
----------------------------------------------------------------

2023-08-02 08:09:45 [main] [INFO]  KGenProgMain - entered the era of 260th generation.
2023-08-02 08:10:14 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 33 minutes 38 seconds
Variants: generated 100, build-succeeded 55, build-failed 34, syntax-invalid 9, redundant 2
Fitness: max 0(55), min 0(55), ave 0
Test execution time: sum 3265 ms, max 77 ms, min 51 ms
----------------------------------------------------------------

2023-08-02 08:10:14 [main] [INFO]  KGenProgMain - entered the era of 261st generation.
2023-08-02 08:10:43 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 34 minutes 7 seconds
Variants: generated 100, build-succeeded 58, build-failed 24, syntax-invalid 12, redundant 6
Fitness: max 0(58), min 0(58), ave 0
Test execution time: sum 3478 ms, max 117 ms, min 51 ms
----------------------------------------------------------------

2023-08-02 08:10:43 [main] [INFO]  KGenProgMain - entered the era of 262nd generation.
2023-08-02 08:11:12 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 34 minutes 36 seconds
Variants: generated 100, build-succeeded 62, build-failed 32, syntax-invalid 4, redundant 2
Fitness: max 0(62), min 0(62), ave 0
Test execution time: sum 3450 ms, max 66 ms, min 51 ms
----------------------------------------------------------------

2023-08-02 08:11:12 [main] [INFO]  KGenProgMain - entered the era of 263rd generation.
2023-08-02 08:11:41 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 35 minutes 5 seconds
Variants: generated 100, build-succeeded 55, build-failed 31, syntax-invalid 10, redundant 4
Fitness: max 0(55), min 0(55), ave 0
Test execution time: sum 3135 ms, max 70 ms, min 51 ms
----------------------------------------------------------------

2023-08-02 08:11:41 [main] [INFO]  KGenProgMain - entered the era of 264th generation.
2023-08-02 08:12:11 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 35 minutes 35 seconds
Variants: generated 100, build-succeeded 58, build-failed 31, syntax-invalid 7, redundant 4
Fitness: max 1(1), min 0(57), ave 0.017
Test execution time: sum 3530 ms, max 122 ms, min 52 ms
----------------------------------------------------------------

2023-08-02 08:12:11 [main] [INFO]  KGenProgMain - entered the era of 265th generation.
2023-08-02 08:12:40 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 36 minutes 4 seconds
Variants: generated 100, build-succeeded 56, build-failed 33, syntax-invalid 8, redundant 3
Fitness: max 1(1), min 0(55), ave 0.018
Test execution time: sum 3188 ms, max 84 ms, min 51 ms
----------------------------------------------------------------

2023-08-02 08:12:40 [main] [INFO]  KGenProgMain - entered the era of 266th generation.
2023-08-02 08:13:09 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 36 minutes 33 seconds
Variants: generated 100, build-succeeded 60, build-failed 31, syntax-invalid 5, redundant 4
Fitness: max 0(60), min 0(60), ave 0
Test execution time: sum 3555 ms, max 72 ms, min 52 ms
----------------------------------------------------------------

2023-08-02 08:13:09 [main] [INFO]  KGenProgMain - entered the era of 267th generation.
2023-08-02 08:13:39 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 37 minutes 4 seconds
Variants: generated 100, build-succeeded 61, build-failed 27, syntax-invalid 5, redundant 7
Fitness: max 1(1), min 0(60), ave 0.016
Test execution time: sum 3931 ms, max 243 ms, min 52 ms
----------------------------------------------------------------

2023-08-02 08:13:39 [main] [INFO]  KGenProgMain - entered the era of 268th generation.
2023-08-02 08:14:08 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 37 minutes 33 seconds
Variants: generated 100, build-succeeded 62, build-failed 24, syntax-invalid 7, redundant 7
Fitness: max 0(62), min 0(62), ave 0
Test execution time: sum 3575 ms, max 90 ms, min 51 ms
----------------------------------------------------------------

2023-08-02 08:14:08 [main] [INFO]  KGenProgMain - entered the era of 269th generation.
2023-08-02 08:14:38 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 38 minutes 2 seconds
Variants: generated 100, build-succeeded 60, build-failed 31, syntax-invalid 6, redundant 3
Fitness: max 0(60), min 0(60), ave 0
Test execution time: sum 3459 ms, max 72 ms, min 51 ms
----------------------------------------------------------------

2023-08-02 08:14:38 [main] [INFO]  KGenProgMain - entered the era of 270th generation.
2023-08-02 08:15:08 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 38 minutes 33 seconds
Variants: generated 100, build-succeeded 59, build-failed 30, syntax-invalid 8, redundant 3
Fitness: max 0(59), min 0(59), ave 0
Test execution time: sum 3408 ms, max 139 ms, min 51 ms
----------------------------------------------------------------

2023-08-02 08:15:08 [main] [INFO]  KGenProgMain - entered the era of 271st generation.
2023-08-02 08:15:37 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 39 minutes 1 seconds
Variants: generated 100, build-succeeded 52, build-failed 30, syntax-invalid 14, redundant 4
Fitness: max 0(52), min 0(52), ave 0
Test execution time: sum 3097 ms, max 86 ms, min 51 ms
----------------------------------------------------------------

2023-08-02 08:15:37 [main] [INFO]  KGenProgMain - entered the era of 272nd generation.
2023-08-02 08:16:05 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 39 minutes 29 seconds
Variants: generated 100, build-succeeded 44, build-failed 32, syntax-invalid 17, redundant 7
Fitness: max 0(44), min 0(44), ave 0
Test execution time: sum 2490 ms, max 72 ms, min 52 ms
----------------------------------------------------------------

2023-08-02 08:16:05 [main] [INFO]  KGenProgMain - entered the era of 273rd generation.
2023-08-02 08:16:35 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 40 minutes 0 seconds
Variants: generated 100, build-succeeded 60, build-failed 31, syntax-invalid 8, redundant 1
Fitness: max 0(60), min 0(60), ave 0
Test execution time: sum 3615 ms, max 140 ms, min 52 ms
----------------------------------------------------------------

2023-08-02 08:16:35 [main] [INFO]  KGenProgMain - entered the era of 274th generation.
2023-08-02 08:17:03 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 40 minutes 27 seconds
Variants: generated 100, build-succeeded 46, build-failed 33, syntax-invalid 11, redundant 10
Fitness: max 0(46), min 0(46), ave 0
Test execution time: sum 2699 ms, max 94 ms, min 52 ms
----------------------------------------------------------------

2023-08-02 08:17:03 [main] [INFO]  KGenProgMain - entered the era of 275th generation.
2023-08-02 08:17:32 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 40 minutes 57 seconds
Variants: generated 100, build-succeeded 54, build-failed 30, syntax-invalid 13, redundant 3
Fitness: max 0(54), min 0(54), ave 0
Test execution time: sum 3046 ms, max 69 ms, min 52 ms
----------------------------------------------------------------

2023-08-02 08:17:32 [main] [INFO]  KGenProgMain - entered the era of 276th generation.
2023-08-02 08:18:03 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 41 minutes 27 seconds
Variants: generated 100, build-succeeded 56, build-failed 33, syntax-invalid 6, redundant 5
Fitness: max 0(56), min 0(56), ave 0
Test execution time: sum 3249 ms, max 119 ms, min 51 ms
----------------------------------------------------------------

2023-08-02 08:18:03 [main] [INFO]  KGenProgMain - entered the era of 277th generation.
2023-08-02 08:18:32 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 41 minutes 56 seconds
Variants: generated 100, build-succeeded 49, build-failed 37, syntax-invalid 10, redundant 4
Fitness: max 0(49), min 0(49), ave 0
Test execution time: sum 2732 ms, max 78 ms, min 51 ms
----------------------------------------------------------------

2023-08-02 08:18:32 [main] [INFO]  KGenProgMain - entered the era of 278th generation.
2023-08-02 08:19:00 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 42 minutes 24 seconds
Variants: generated 100, build-succeeded 50, build-failed 28, syntax-invalid 17, redundant 5
Fitness: max 0(50), min 0(50), ave 0
Test execution time: sum 2905 ms, max 81 ms, min 52 ms
----------------------------------------------------------------

2023-08-02 08:19:00 [main] [INFO]  KGenProgMain - entered the era of 279th generation.
2023-08-02 08:19:30 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 42 minutes 54 seconds
Variants: generated 100, build-succeeded 52, build-failed 33, syntax-invalid 12, redundant 3
Fitness: max 0(52), min 0(52), ave 0
Test execution time: sum 3043 ms, max 106 ms, min 51 ms
----------------------------------------------------------------

2023-08-02 08:19:30 [main] [INFO]  KGenProgMain - entered the era of 280th generation.
2023-08-02 08:19:59 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 43 minutes 23 seconds
Variants: generated 100, build-succeeded 56, build-failed 25, syntax-invalid 14, redundant 5
Fitness: max 0(56), min 0(56), ave 0
Test execution time: sum 3124 ms, max 75 ms, min 52 ms
----------------------------------------------------------------

2023-08-02 08:19:59 [main] [INFO]  KGenProgMain - entered the era of 281st generation.
2023-08-02 08:20:28 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 43 minutes 52 seconds
Variants: generated 100, build-succeeded 51, build-failed 32, syntax-invalid 17, redundant 0
Fitness: max 0(51), min 0(51), ave 0
Test execution time: sum 2933 ms, max 69 ms, min 52 ms
----------------------------------------------------------------

2023-08-02 08:20:28 [main] [INFO]  KGenProgMain - entered the era of 282nd generation.
2023-08-02 08:20:58 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 44 minutes 22 seconds
Variants: generated 100, build-succeeded 52, build-failed 32, syntax-invalid 16, redundant 0
Fitness: max 0(52), min 0(52), ave 0
Test execution time: sum 3017 ms, max 109 ms, min 52 ms
----------------------------------------------------------------

2023-08-02 08:20:58 [main] [INFO]  KGenProgMain - entered the era of 283rd generation.
2023-08-02 08:21:26 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 44 minutes 51 seconds
Variants: generated 100, build-succeeded 51, build-failed 30, syntax-invalid 14, redundant 5
Fitness: max 0(51), min 0(51), ave 0
Test execution time: sum 2830 ms, max 81 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 08:21:26 [main] [INFO]  KGenProgMain - entered the era of 284th generation.
2023-08-02 08:21:55 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 45 minutes 19 seconds
Variants: generated 100, build-succeeded 47, build-failed 34, syntax-invalid 17, redundant 2
Fitness: max 0(47), min 0(47), ave 0
Test execution time: sum 2633 ms, max 69 ms, min 51 ms
----------------------------------------------------------------

2023-08-02 08:21:55 [main] [INFO]  KGenProgMain - entered the era of 285th generation.
2023-08-02 08:22:26 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 45 minutes 51 seconds
Variants: generated 100, build-succeeded 57, build-failed 29, syntax-invalid 10, redundant 4
Fitness: max 0(57), min 0(57), ave 0
Test execution time: sum 3428 ms, max 138 ms, min 52 ms
----------------------------------------------------------------

2023-08-02 08:22:26 [main] [INFO]  KGenProgMain - entered the era of 286th generation.
2023-08-02 08:22:55 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 46 minutes 19 seconds
Variants: generated 100, build-succeeded 50, build-failed 27, syntax-invalid 14, redundant 9
Fitness: max 0(50), min 0(50), ave 0
Test execution time: sum 2984 ms, max 94 ms, min 52 ms
----------------------------------------------------------------

2023-08-02 08:22:55 [main] [INFO]  KGenProgMain - entered the era of 287th generation.
2023-08-02 08:23:24 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 46 minutes 48 seconds
Variants: generated 100, build-succeeded 52, build-failed 35, syntax-invalid 10, redundant 3
Fitness: max 0(52), min 0(52), ave 0
Test execution time: sum 3007 ms, max 68 ms, min 52 ms
----------------------------------------------------------------

2023-08-02 08:23:24 [main] [INFO]  KGenProgMain - entered the era of 288th generation.
2023-08-02 08:23:55 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 47 minutes 19 seconds
Variants: generated 100, build-succeeded 53, build-failed 34, syntax-invalid 11, redundant 2
Fitness: max 0(53), min 0(53), ave 0
Test execution time: sum 3247 ms, max 138 ms, min 51 ms
----------------------------------------------------------------

2023-08-02 08:23:55 [main] [INFO]  KGenProgMain - entered the era of 289th generation.
2023-08-02 08:24:22 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 47 minutes 46 seconds
Variants: generated 100, build-succeeded 39, build-failed 34, syntax-invalid 23, redundant 4
Fitness: max 0(39), min 0(39), ave 0
Test execution time: sum 2264 ms, max 83 ms, min 51 ms
----------------------------------------------------------------

2023-08-02 08:24:22 [main] [INFO]  KGenProgMain - entered the era of 290th generation.
2023-08-02 08:24:50 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 48 minutes 14 seconds
Variants: generated 100, build-succeeded 42, build-failed 33, syntax-invalid 17, redundant 8
Fitness: max 0(42), min 0(42), ave 0
Test execution time: sum 2417 ms, max 75 ms, min 51 ms
----------------------------------------------------------------

2023-08-02 08:24:50 [main] [INFO]  KGenProgMain - entered the era of 291st generation.
2023-08-02 08:25:21 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 48 minutes 46 seconds
Variants: generated 100, build-succeeded 52, build-failed 35, syntax-invalid 11, redundant 2
Fitness: max 0(52), min 0(52), ave 0
Test execution time: sum 3293 ms, max 120 ms, min 53 ms
----------------------------------------------------------------

2023-08-02 08:25:22 [main] [INFO]  KGenProgMain - entered the era of 292nd generation.
2023-08-02 08:25:51 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 49 minutes 15 seconds
Variants: generated 100, build-succeeded 50, build-failed 37, syntax-invalid 12, redundant 1
Fitness: max 0(50), min 0(50), ave 0
Test execution time: sum 3012 ms, max 89 ms, min 52 ms
----------------------------------------------------------------

2023-08-02 08:25:51 [main] [INFO]  KGenProgMain - entered the era of 293rd generation.
2023-08-02 08:26:20 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 49 minutes 44 seconds
Variants: generated 100, build-succeeded 52, build-failed 34, syntax-invalid 14, redundant 0
Fitness: max 0(52), min 0(52), ave 0
Test execution time: sum 3100 ms, max 76 ms, min 52 ms
----------------------------------------------------------------

2023-08-02 08:26:20 [main] [INFO]  KGenProgMain - entered the era of 294th generation.
2023-08-02 08:26:51 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 50 minutes 16 seconds
Variants: generated 100, build-succeeded 50, build-failed 31, syntax-invalid 10, redundant 9
Fitness: max 0(50), min 0(50), ave 0
Test execution time: sum 3248 ms, max 130 ms, min 52 ms
----------------------------------------------------------------

2023-08-02 08:26:51 [main] [INFO]  KGenProgMain - entered the era of 295th generation.
2023-08-02 08:27:21 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 50 minutes 45 seconds
Variants: generated 100, build-succeeded 48, build-failed 33, syntax-invalid 17, redundant 2
Fitness: max 0(48), min 0(48), ave 0
Test execution time: sum 2877 ms, max 78 ms, min 53 ms
----------------------------------------------------------------

2023-08-02 08:27:21 [main] [INFO]  KGenProgMain - entered the era of 296th generation.
2023-08-02 08:27:52 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 51 minutes 16 seconds
Variants: generated 100, build-succeeded 46, build-failed 34, syntax-invalid 16, redundant 4
Fitness: max 0(46), min 0(46), ave 0
Test execution time: sum 2959 ms, max 131 ms, min 52 ms
----------------------------------------------------------------

2023-08-02 08:27:52 [main] [INFO]  KGenProgMain - entered the era of 297th generation.
2023-08-02 08:28:22 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 51 minutes 47 seconds
Variants: generated 100, build-succeeded 57, build-failed 28, syntax-invalid 9, redundant 6
Fitness: max 0(57), min 0(57), ave 0
Test execution time: sum 3358 ms, max 96 ms, min 53 ms
----------------------------------------------------------------

2023-08-02 08:28:22 [main] [INFO]  KGenProgMain - entered the era of 298th generation.
2023-08-02 08:28:53 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 52 minutes 17 seconds
Variants: generated 100, build-succeeded 54, build-failed 28, syntax-invalid 14, redundant 4
Fitness: max 0(54), min 0(54), ave 0
Test execution time: sum 3294 ms, max 84 ms, min 53 ms
----------------------------------------------------------------

2023-08-02 08:28:53 [main] [INFO]  KGenProgMain - entered the era of 299th generation.
2023-08-02 08:29:26 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 52 minutes 50 seconds
Variants: generated 100, build-succeeded 59, build-failed 34, syntax-invalid 7, redundant 0
Fitness: max 0(59), min 0(59), ave 0
Test execution time: sum 3754 ms, max 128 ms, min 52 ms
----------------------------------------------------------------

2023-08-02 08:29:26 [main] [INFO]  KGenProgMain - entered the era of 300th generation.
2023-08-02 08:29:57 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 53 minutes 21 seconds
Variants: generated 100, build-succeeded 56, build-failed 24, syntax-invalid 11, redundant 9
Fitness: max 0(56), min 0(56), ave 0
Test execution time: sum 3454 ms, max 75 ms, min 52 ms
----------------------------------------------------------------

2023-08-02 08:29:57 [main] [INFO]  KGenProgMain - entered the era of 301st generation.
2023-08-02 08:30:29 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 53 minutes 54 seconds
Variants: generated 100, build-succeeded 58, build-failed 29, syntax-invalid 7, redundant 6
Fitness: max 0(58), min 0(58), ave 0
Test execution time: sum 3678 ms, max 142 ms, min 52 ms
----------------------------------------------------------------

2023-08-02 08:30:29 [main] [INFO]  KGenProgMain - entered the era of 302nd generation.
2023-08-02 08:31:00 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 54 minutes 24 seconds
Variants: generated 100, build-succeeded 48, build-failed 31, syntax-invalid 19, redundant 2
Fitness: max 0(48), min 0(48), ave 0
Test execution time: sum 3047 ms, max 147 ms, min 52 ms
----------------------------------------------------------------

2023-08-02 08:31:00 [main] [INFO]  KGenProgMain - entered the era of 303rd generation.
2023-08-02 08:31:30 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 54 minutes 55 seconds
Variants: generated 100, build-succeeded 52, build-failed 31, syntax-invalid 13, redundant 4
Fitness: max 0(52), min 0(52), ave 0
Test execution time: sum 3198 ms, max 82 ms, min 53 ms
----------------------------------------------------------------

2023-08-02 08:31:30 [main] [INFO]  KGenProgMain - entered the era of 304th generation.
2023-08-02 08:32:03 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 55 minutes 27 seconds
Variants: generated 100, build-succeeded 55, build-failed 36, syntax-invalid 6, redundant 3
Fitness: max 0(55), min 0(55), ave 0
Test execution time: sum 3395 ms, max 72 ms, min 53 ms
----------------------------------------------------------------

2023-08-02 08:32:03 [main] [INFO]  KGenProgMain - entered the era of 305th generation.
2023-08-02 08:32:33 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 55 minutes 57 seconds
Variants: generated 100, build-succeeded 43, build-failed 32, syntax-invalid 18, redundant 7
Fitness: max 0(43), min 0(43), ave 0
Test execution time: sum 2833 ms, max 141 ms, min 52 ms
----------------------------------------------------------------

2023-08-02 08:32:33 [main] [INFO]  KGenProgMain - entered the era of 306th generation.
2023-08-02 08:33:04 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 56 minutes 29 seconds
Variants: generated 100, build-succeeded 54, build-failed 30, syntax-invalid 9, redundant 7
Fitness: max 0(54), min 0(54), ave 0
Test execution time: sum 3261 ms, max 88 ms, min 52 ms
----------------------------------------------------------------

2023-08-02 08:33:04 [main] [INFO]  KGenProgMain - entered the era of 307th generation.
2023-08-02 08:33:36 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 57 minutes 0 seconds
Variants: generated 100, build-succeeded 56, build-failed 29, syntax-invalid 7, redundant 8
Fitness: max 0(56), min 0(56), ave 0
Test execution time: sum 3456 ms, max 78 ms, min 52 ms
----------------------------------------------------------------

2023-08-02 08:33:36 [main] [INFO]  KGenProgMain - entered the era of 308th generation.
2023-08-02 08:34:09 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 57 minutes 33 seconds
Variants: generated 100, build-succeeded 58, build-failed 30, syntax-invalid 10, redundant 2
Fitness: max 0(58), min 0(58), ave 0
Test execution time: sum 3825 ms, max 138 ms, min 53 ms
----------------------------------------------------------------

2023-08-02 08:34:09 [main] [INFO]  KGenProgMain - entered the era of 309th generation.
2023-08-02 08:34:40 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 58 minutes 5 seconds
Variants: generated 100, build-succeeded 58, build-failed 29, syntax-invalid 7, redundant 6
Fitness: max 0(58), min 0(58), ave 0
Test execution time: sum 3580 ms, max 85 ms, min 52 ms
----------------------------------------------------------------

2023-08-02 08:34:40 [main] [INFO]  KGenProgMain - entered the era of 310th generation.
2023-08-02 08:35:12 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 58 minutes 36 seconds
Variants: generated 100, build-succeeded 57, build-failed 34, syntax-invalid 8, redundant 1
Fitness: max 0(57), min 0(57), ave 0
Test execution time: sum 3524 ms, max 77 ms, min 53 ms
----------------------------------------------------------------

2023-08-02 08:35:12 [main] [INFO]  KGenProgMain - entered the era of 311th generation.
2023-08-02 08:35:43 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 59 minutes 8 seconds
Variants: generated 100, build-succeeded 53, build-failed 30, syntax-invalid 10, redundant 7
Fitness: max 0(53), min 0(53), ave 0
Test execution time: sum 3524 ms, max 135 ms, min 53 ms
----------------------------------------------------------------

2023-08-02 08:35:43 [main] [INFO]  KGenProgMain - entered the era of 312th generation.
2023-08-02 08:36:16 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 59 minutes 40 seconds
Variants: generated 100, build-succeeded 61, build-failed 30, syntax-invalid 7, redundant 2
Fitness: max 0(61), min 0(61), ave 0
Test execution time: sum 3919 ms, max 75 ms, min 54 ms
----------------------------------------------------------------

2023-08-02 08:36:16 [main] [INFO]  KGenProgMain - entered the era of 313th generation.
2023-08-02 08:36:49 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 14 seconds
Variants: generated 100, build-succeeded 58, build-failed 32, syntax-invalid 10, redundant 0
Fitness: max 0(58), min 0(58), ave 0
Test execution time: sum 3693 ms, max 118 ms, min 53 ms
----------------------------------------------------------------

2023-08-02 08:36:49 [main] [INFO]  KGenProgMain - entered the era of 314th generation.
2023-08-02 08:37:20 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 44 seconds
Variants: generated 100, build-succeeded 53, build-failed 33, syntax-invalid 9, redundant 5
Fitness: max 0(53), min 0(53), ave 0
Test execution time: sum 3271 ms, max 87 ms, min 53 ms
----------------------------------------------------------------

2023-08-02 08:37:20 [main] [INFO]  KGenProgMain - entered the era of 315th generation.
2023-08-02 08:37:53 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 1 minutes 17 seconds
Variants: generated 100, build-succeeded 62, build-failed 26, syntax-invalid 8, redundant 4
Fitness: max 0(62), min 0(62), ave 0
Test execution time: sum 4043 ms, max 128 ms, min 54 ms
----------------------------------------------------------------

2023-08-02 08:37:53 [main] [INFO]  KGenProgMain - entered the era of 316th generation.
2023-08-02 08:38:23 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 1 minutes 48 seconds
Variants: generated 100, build-succeeded 57, build-failed 25, syntax-invalid 12, redundant 6
Fitness: max 0(57), min 0(57), ave 0
Test execution time: sum 3571 ms, max 74 ms, min 53 ms
----------------------------------------------------------------

2023-08-02 08:38:23 [main] [INFO]  KGenProgMain - entered the era of 317th generation.
2023-08-02 08:38:56 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 2 minutes 20 seconds
Variants: generated 100, build-succeeded 51, build-failed 38, syntax-invalid 9, redundant 2
Fitness: max 0(51), min 0(51), ave 0
Test execution time: sum 3220 ms, max 133 ms, min 52 ms
----------------------------------------------------------------

2023-08-02 08:38:56 [main] [INFO]  KGenProgMain - entered the era of 318th generation.
2023-08-02 08:39:28 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 2 minutes 52 seconds
Variants: generated 100, build-succeeded 57, build-failed 34, syntax-invalid 5, redundant 4
Fitness: max 0(57), min 0(57), ave 0
Test execution time: sum 3507 ms, max 86 ms, min 53 ms
----------------------------------------------------------------

2023-08-02 08:39:28 [main] [INFO]  KGenProgMain - entered the era of 319th generation.
2023-08-02 08:40:00 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 3 minutes 24 seconds
Variants: generated 100, build-succeeded 54, build-failed 34, syntax-invalid 5, redundant 7
Fitness: max 0(54), min 0(54), ave 0
Test execution time: sum 3478 ms, max 79 ms, min 58 ms
----------------------------------------------------------------

2023-08-02 08:40:00 [main] [INFO]  KGenProgMain - entered the era of 320th generation.
2023-08-02 08:40:34 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 3 minutes 59 seconds
Variants: generated 100, build-succeeded 59, build-failed 34, syntax-invalid 2, redundant 5
Fitness: max 0(59), min 0(59), ave 0
Test execution time: sum 3871 ms, max 130 ms, min 54 ms
----------------------------------------------------------------

2023-08-02 08:40:34 [main] [INFO]  KGenProgMain - entered the era of 321st generation.
2023-08-02 08:41:05 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 4 minutes 30 seconds
Variants: generated 100, build-succeeded 62, build-failed 25, syntax-invalid 10, redundant 3
Fitness: max 0(62), min 0(62), ave 0
Test execution time: sum 3803 ms, max 77 ms, min 54 ms
----------------------------------------------------------------

2023-08-02 08:41:05 [main] [INFO]  KGenProgMain - entered the era of 322nd generation.
2023-08-02 08:41:37 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 5 minutes 2 seconds
Variants: generated 100, build-succeeded 58, build-failed 27, syntax-invalid 8, redundant 7
Fitness: max 0(58), min 0(58), ave 0
Test execution time: sum 3669 ms, max 74 ms, min 53 ms
----------------------------------------------------------------

2023-08-02 08:41:37 [main] [INFO]  KGenProgMain - entered the era of 323rd generation.
2023-08-02 08:42:10 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 5 minutes 34 seconds
Variants: generated 100, build-succeeded 55, build-failed 29, syntax-invalid 10, redundant 6
Fitness: max 0(55), min 0(55), ave 0
Test execution time: sum 3619 ms, max 156 ms, min 54 ms
----------------------------------------------------------------

2023-08-02 08:42:10 [main] [INFO]  KGenProgMain - entered the era of 324th generation.
2023-08-02 08:42:40 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 6 minutes 4 seconds
Variants: generated 100, build-succeeded 49, build-failed 31, syntax-invalid 14, redundant 6
Fitness: max 0(49), min 0(49), ave 0
Test execution time: sum 2982 ms, max 84 ms, min 55 ms
----------------------------------------------------------------

2023-08-02 08:42:40 [main] [INFO]  KGenProgMain - entered the era of 325th generation.
2023-08-02 08:43:13 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 6 minutes 38 seconds
Variants: generated 100, build-succeeded 63, build-failed 28, syntax-invalid 6, redundant 3
Fitness: max 0(63), min 0(63), ave 0
Test execution time: sum 3861 ms, max 76 ms, min 53 ms
----------------------------------------------------------------

2023-08-02 08:43:13 [main] [INFO]  KGenProgMain - entered the era of 326th generation.
2023-08-02 08:43:48 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 7 minutes 12 seconds
Variants: generated 100, build-succeeded 61, build-failed 30, syntax-invalid 6, redundant 3
Fitness: max 0(61), min 0(61), ave 0
Test execution time: sum 4049 ms, max 148 ms, min 59 ms
----------------------------------------------------------------

2023-08-02 08:43:48 [main] [INFO]  KGenProgMain - entered the era of 327th generation.
2023-08-02 08:44:19 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 7 minutes 44 seconds
Variants: generated 100, build-succeeded 48, build-failed 38, syntax-invalid 9, redundant 5
Fitness: max 1(1), min 0(47), ave 0.021
Test execution time: sum 2942 ms, max 96 ms, min 53 ms
----------------------------------------------------------------

2023-08-02 08:44:19 [main] [INFO]  KGenProgMain - entered the era of 328th generation.
2023-08-02 08:44:51 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 8 minutes 15 seconds
Variants: generated 100, build-succeeded 54, build-failed 31, syntax-invalid 11, redundant 4
Fitness: max 0(54), min 0(54), ave 0
Test execution time: sum 3420 ms, max 75 ms, min 52 ms
----------------------------------------------------------------

2023-08-02 08:44:51 [main] [INFO]  KGenProgMain - entered the era of 329th generation.
2023-08-02 08:45:24 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 8 minutes 48 seconds
Variants: generated 100, build-succeeded 58, build-failed 29, syntax-invalid 11, redundant 2
Fitness: max 0(58), min 0(58), ave 0
Test execution time: sum 3820 ms, max 116 ms, min 60 ms
----------------------------------------------------------------

2023-08-02 08:45:24 [main] [INFO]  KGenProgMain - entered the era of 330th generation.
2023-08-02 08:45:56 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 9 minutes 20 seconds
Variants: generated 100, build-succeeded 54, build-failed 32, syntax-invalid 14, redundant 0
Fitness: max 0(54), min 0(54), ave 0
Test execution time: sum 3678 ms, max 122 ms, min 57 ms
----------------------------------------------------------------

2023-08-02 08:45:56 [main] [INFO]  KGenProgMain - entered the era of 331st generation.
2023-08-02 08:46:29 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 9 minutes 53 seconds
Variants: generated 100, build-succeeded 53, build-failed 30, syntax-invalid 14, redundant 3
Fitness: max 0(53), min 0(53), ave 0
Test execution time: sum 3442 ms, max 126 ms, min 56 ms
----------------------------------------------------------------

2023-08-02 08:46:29 [main] [INFO]  KGenProgMain - entered the era of 332nd generation.
2023-08-02 08:47:00 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 10 minutes 24 seconds
Variants: generated 100, build-succeeded 58, build-failed 24, syntax-invalid 15, redundant 3
Fitness: max 0(58), min 0(58), ave 0
Test execution time: sum 3619 ms, max 81 ms, min 57 ms
----------------------------------------------------------------

2023-08-02 08:47:00 [main] [INFO]  KGenProgMain - entered the era of 333rd generation.
2023-08-02 08:47:33 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 10 minutes 57 seconds
Variants: generated 100, build-succeeded 59, build-failed 32, syntax-invalid 6, redundant 3
Fitness: max 0(59), min 0(59), ave 0
Test execution time: sum 3696 ms, max 74 ms, min 53 ms
----------------------------------------------------------------

2023-08-02 08:47:33 [main] [INFO]  KGenProgMain - entered the era of 334th generation.
2023-08-02 08:48:07 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 11 minutes 31 seconds
Variants: generated 100, build-succeeded 52, build-failed 37, syntax-invalid 8, redundant 3
Fitness: max 0(52), min 0(52), ave 0
Test execution time: sum 3329 ms, max 124 ms, min 53 ms
----------------------------------------------------------------

2023-08-02 08:48:07 [main] [INFO]  KGenProgMain - entered the era of 335th generation.
2023-08-02 08:48:40 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 12 minutes 5 seconds
Variants: generated 100, build-succeeded 60, build-failed 32, syntax-invalid 5, redundant 3
Fitness: max 0(60), min 0(60), ave 0
Test execution time: sum 3606 ms, max 80 ms, min 53 ms
----------------------------------------------------------------

2023-08-02 08:48:40 [main] [INFO]  KGenProgMain - entered the era of 336th generation.
2023-08-02 08:49:14 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 12 minutes 38 seconds
Variants: generated 100, build-succeeded 59, build-failed 34, syntax-invalid 7, redundant 0
Fitness: max 0(59), min 0(59), ave 0
Test execution time: sum 3691 ms, max 74 ms, min 53 ms
----------------------------------------------------------------

2023-08-02 08:49:14 [main] [INFO]  KGenProgMain - entered the era of 337th generation.
2023-08-02 08:49:48 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 13 minutes 13 seconds
Variants: generated 100, build-succeeded 56, build-failed 37, syntax-invalid 6, redundant 1
Fitness: max 0(56), min 0(56), ave 0
Test execution time: sum 3458 ms, max 125 ms, min 53 ms
----------------------------------------------------------------

2023-08-02 08:49:48 [main] [INFO]  KGenProgMain - entered the era of 338th generation.
2023-08-02 08:50:22 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 13 minutes 47 seconds
Variants: generated 100, build-succeeded 59, build-failed 28, syntax-invalid 7, redundant 6
Fitness: max 0(59), min 0(59), ave 0
Test execution time: sum 3609 ms, max 80 ms, min 52 ms
----------------------------------------------------------------

2023-08-02 08:50:22 [main] [INFO]  KGenProgMain - entered the era of 339th generation.
2023-08-02 08:50:56 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 14 minutes 20 seconds
Variants: generated 100, build-succeeded 54, build-failed 34, syntax-invalid 8, redundant 4
Fitness: max 0(54), min 0(54), ave 0
Test execution time: sum 3278 ms, max 70 ms, min 53 ms
----------------------------------------------------------------

2023-08-02 08:50:56 [main] [INFO]  KGenProgMain - entered the era of 340th generation.
2023-08-02 08:51:31 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 14 minutes 55 seconds
Variants: generated 100, build-succeeded 59, build-failed 28, syntax-invalid 10, redundant 3
Fitness: max 0(59), min 0(59), ave 0
Test execution time: sum 3727 ms, max 139 ms, min 53 ms
----------------------------------------------------------------

2023-08-02 08:51:31 [main] [INFO]  KGenProgMain - entered the era of 341st generation.
2023-08-02 08:52:03 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 15 minutes 28 seconds
Variants: generated 100, build-succeeded 54, build-failed 27, syntax-invalid 13, redundant 6
Fitness: max 1(1), min 0(53), ave 0.019
Test execution time: sum 3195 ms, max 70 ms, min 53 ms
----------------------------------------------------------------

2023-08-02 08:52:03 [main] [INFO]  KGenProgMain - entered the era of 342nd generation.
2023-08-02 08:52:39 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 16 minutes 3 seconds
Variants: generated 100, build-succeeded 57, build-failed 31, syntax-invalid 8, redundant 4
Fitness: max 0(57), min 0(57), ave 0
Test execution time: sum 3511 ms, max 138 ms, min 53 ms
----------------------------------------------------------------

2023-08-02 08:52:39 [main] [INFO]  KGenProgMain - entered the era of 343rd generation.
2023-08-02 08:53:11 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 16 minutes 36 seconds
Variants: generated 100, build-succeeded 57, build-failed 27, syntax-invalid 12, redundant 4
Fitness: max 0(57), min 0(57), ave 0
Test execution time: sum 3254 ms, max 77 ms, min 52 ms
----------------------------------------------------------------

2023-08-02 08:53:11 [main] [INFO]  KGenProgMain - entered the era of 344th generation.
2023-08-02 08:53:43 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 17 minutes 7 seconds
Variants: generated 100, build-succeeded 49, build-failed 31, syntax-invalid 15, redundant 5
Fitness: max 0(49), min 0(49), ave 0
Test execution time: sum 2963 ms, max 76 ms, min 53 ms
----------------------------------------------------------------

2023-08-02 08:53:43 [main] [INFO]  KGenProgMain - entered the era of 345th generation.
2023-08-02 08:54:19 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 17 minutes 43 seconds
Variants: generated 100, build-succeeded 53, build-failed 38, syntax-invalid 7, redundant 2
Fitness: max 1(1), min 0(52), ave 0.019
Test execution time: sum 3303 ms, max 124 ms, min 53 ms
----------------------------------------------------------------

2023-08-02 08:54:19 [main] [INFO]  KGenProgMain - entered the era of 346th generation.
2023-08-02 08:54:53 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 18 minutes 18 seconds
Variants: generated 100, build-succeeded 61, build-failed 27, syntax-invalid 9, redundant 3
Fitness: max 1(1), min 0(60), ave 0.016
Test execution time: sum 3557 ms, max 73 ms, min 52 ms
----------------------------------------------------------------

2023-08-02 08:54:53 [main] [INFO]  KGenProgMain - entered the era of 347th generation.
2023-08-02 08:55:28 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 18 minutes 53 seconds
Variants: generated 100, build-succeeded 53, build-failed 30, syntax-invalid 14, redundant 3
Fitness: max 1(6), min 0(47), ave 0.113
Test execution time: sum 3252 ms, max 124 ms, min 52 ms
----------------------------------------------------------------

2023-08-02 08:55:28 [main] [INFO]  KGenProgMain - entered the era of 348th generation.
2023-08-02 08:56:01 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 19 minutes 25 seconds
Variants: generated 100, build-succeeded 50, build-failed 28, syntax-invalid 15, redundant 7
Fitness: max 1(3), min 0(47), ave 0.06
Test execution time: sum 2963 ms, max 70 ms, min 52 ms
----------------------------------------------------------------

2023-08-02 08:56:01 [main] [INFO]  KGenProgMain - entered the era of 349th generation.
2023-08-02 08:56:37 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 20 minutes 1 seconds
Variants: generated 100, build-succeeded 54, build-failed 34, syntax-invalid 8, redundant 4
Fitness: max 1(1), min 0(53), ave 0.019
Test execution time: sum 3294 ms, max 116 ms, min 53 ms
----------------------------------------------------------------

2023-08-02 08:56:37 [main] [INFO]  KGenProgMain - entered the era of 350th generation.
2023-08-02 08:57:11 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 20 minutes 35 seconds
Variants: generated 100, build-succeeded 56, build-failed 31, syntax-invalid 11, redundant 2
Fitness: max 1(2), min 0(54), ave 0.036
Test execution time: sum 3196 ms, max 76 ms, min 52 ms
----------------------------------------------------------------

2023-08-02 08:57:11 [main] [INFO]  KGenProgMain - entered the era of 351st generation.
2023-08-02 08:57:45 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 21 minutes 9 seconds
Variants: generated 100, build-succeeded 53, build-failed 32, syntax-invalid 14, redundant 1
Fitness: max 1(1), min 0(52), ave 0.019
Test execution time: sum 3223 ms, max 72 ms, min 53 ms
----------------------------------------------------------------

2023-08-02 08:57:45 [main] [INFO]  KGenProgMain - entered the era of 352nd generation.
2023-08-02 08:58:22 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 21 minutes 46 seconds
Variants: generated 100, build-succeeded 64, build-failed 24, syntax-invalid 10, redundant 2
Fitness: max 1(4), min 0(60), ave 0.062
Test execution time: sum 3918 ms, max 132 ms, min 52 ms
----------------------------------------------------------------

2023-08-02 08:58:22 [main] [INFO]  KGenProgMain - entered the era of 353rd generation.
2023-08-02 08:58:56 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 22 minutes 21 seconds
Variants: generated 100, build-succeeded 54, build-failed 29, syntax-invalid 9, redundant 8
Fitness: max 0(54), min 0(54), ave 0
Test execution time: sum 3179 ms, max 75 ms, min 52 ms
----------------------------------------------------------------

2023-08-02 08:58:56 [main] [INFO]  KGenProgMain - entered the era of 354th generation.
2023-08-02 08:59:34 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 22 minutes 58 seconds
Variants: generated 100, build-succeeded 60, build-failed 35, syntax-invalid 3, redundant 2
Fitness: max 1(4), min 0(56), ave 0.067
Test execution time: sum 3863 ms, max 117 ms, min 52 ms
----------------------------------------------------------------

2023-08-02 08:59:34 [main] [INFO]  KGenProgMain - entered the era of 355th generation.
2023-08-02 09:00:09 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 23 minutes 34 seconds
Variants: generated 100, build-succeeded 62, build-failed 33, syntax-invalid 3, redundant 2
Fitness: max 1(2), min 0(60), ave 0.032
Test execution time: sum 3588 ms, max 87 ms, min 52 ms
----------------------------------------------------------------

2023-08-02 09:00:09 [main] [INFO]  KGenProgMain - entered the era of 356th generation.
2023-08-02 09:00:44 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 24 minutes 8 seconds
Variants: generated 100, build-succeeded 61, build-failed 29, syntax-invalid 6, redundant 4
Fitness: max 0(61), min 0(61), ave 0
Test execution time: sum 3497 ms, max 70 ms, min 52 ms
----------------------------------------------------------------

2023-08-02 09:00:44 [main] [INFO]  KGenProgMain - entered the era of 357th generation.
2023-08-02 09:01:19 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 24 minutes 44 seconds
Variants: generated 100, build-succeeded 56, build-failed 32, syntax-invalid 9, redundant 3
Fitness: max 0(56), min 0(56), ave 0
Test execution time: sum 3361 ms, max 127 ms, min 52 ms
----------------------------------------------------------------

2023-08-02 09:01:19 [main] [INFO]  KGenProgMain - entered the era of 358th generation.
2023-08-02 09:01:54 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 25 minutes 18 seconds
Variants: generated 100, build-succeeded 61, build-failed 26, syntax-invalid 10, redundant 3
Fitness: max 0(61), min 0(61), ave 0
Test execution time: sum 3356 ms, max 67 ms, min 52 ms
----------------------------------------------------------------

2023-08-02 09:01:54 [main] [INFO]  KGenProgMain - entered the era of 359th generation.
2023-08-02 09:02:28 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 25 minutes 52 seconds
Variants: generated 100, build-succeeded 54, build-failed 28, syntax-invalid 14, redundant 4
Fitness: max 0(54), min 0(54), ave 0
Test execution time: sum 3063 ms, max 65 ms, min 52 ms
----------------------------------------------------------------

2023-08-02 09:02:28 [main] [INFO]  KGenProgMain - entered the era of 360th generation.
2023-08-02 09:03:04 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 26 minutes 28 seconds
Variants: generated 100, build-succeeded 58, build-failed 29, syntax-invalid 10, redundant 3
Fitness: max 0(58), min 0(58), ave 0
Test execution time: sum 3392 ms, max 116 ms, min 52 ms
----------------------------------------------------------------

2023-08-02 09:03:04 [main] [INFO]  KGenProgMain - entered the era of 361st generation.
2023-08-02 09:03:39 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 27 minutes 3 seconds
Variants: generated 100, build-succeeded 59, build-failed 30, syntax-invalid 9, redundant 2
Fitness: max 0(59), min 0(59), ave 0
Test execution time: sum 3220 ms, max 67 ms, min 52 ms
----------------------------------------------------------------

2023-08-02 09:03:39 [main] [INFO]  KGenProgMain - entered the era of 362nd generation.
2023-08-02 09:04:12 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 27 minutes 36 seconds
Variants: generated 100, build-succeeded 46, build-failed 35, syntax-invalid 16, redundant 3
Fitness: max 1(1), min 0(45), ave 0.022
Test execution time: sum 2644 ms, max 66 ms, min 52 ms
----------------------------------------------------------------

2023-08-02 09:04:12 [main] [INFO]  KGenProgMain - entered the era of 363rd generation.
2023-08-02 09:04:49 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 28 minutes 13 seconds
Variants: generated 100, build-succeeded 56, build-failed 35, syntax-invalid 6, redundant 3
Fitness: max 0(56), min 0(56), ave 0
Test execution time: sum 3425 ms, max 124 ms, min 53 ms
----------------------------------------------------------------

2023-08-02 09:04:49 [main] [INFO]  KGenProgMain - entered the era of 364th generation.
2023-08-02 09:05:23 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 28 minutes 47 seconds
Variants: generated 100, build-succeeded 50, build-failed 32, syntax-invalid 14, redundant 4
Fitness: max 0(50), min 0(50), ave 0
Test execution time: sum 2808 ms, max 75 ms, min 52 ms
----------------------------------------------------------------

2023-08-02 09:05:23 [main] [INFO]  KGenProgMain - entered the era of 365th generation.
2023-08-02 09:05:56 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 29 minutes 21 seconds
Variants: generated 100, build-succeeded 49, build-failed 37, syntax-invalid 12, redundant 2
Fitness: max 0(49), min 0(49), ave 0
Test execution time: sum 2941 ms, max 71 ms, min 53 ms
----------------------------------------------------------------

2023-08-02 09:05:56 [main] [INFO]  KGenProgMain - entered the era of 366th generation.
2023-08-02 09:06:32 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 29 minutes 56 seconds
Variants: generated 100, build-succeeded 57, build-failed 29, syntax-invalid 11, redundant 3
Fitness: max 0(57), min 0(57), ave 0
Test execution time: sum 3402 ms, max 120 ms, min 52 ms
----------------------------------------------------------------

2023-08-02 09:06:32 [main] [INFO]  KGenProgMain - entered the era of 367th generation.
2023-08-02 09:07:06 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 30 minutes 31 seconds
Variants: generated 100, build-succeeded 47, build-failed 33, syntax-invalid 12, redundant 8
Fitness: max 0(47), min 0(47), ave 0
Test execution time: sum 2712 ms, max 76 ms, min 52 ms
----------------------------------------------------------------

2023-08-02 09:07:06 [main] [INFO]  KGenProgMain - entered the era of 368th generation.
2023-08-02 09:07:41 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 31 minutes 5 seconds
Variants: generated 100, build-succeeded 47, build-failed 40, syntax-invalid 11, redundant 2
Fitness: max 0(47), min 0(47), ave 0
Test execution time: sum 2912 ms, max 80 ms, min 53 ms
----------------------------------------------------------------

2023-08-02 09:07:41 [main] [INFO]  KGenProgMain - entered the era of 369th generation.
2023-08-02 09:08:16 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 31 minutes 40 seconds
Variants: generated 100, build-succeeded 49, build-failed 33, syntax-invalid 14, redundant 4
Fitness: max 0(49), min 0(49), ave 0
Test execution time: sum 3016 ms, max 117 ms, min 52 ms
----------------------------------------------------------------

2023-08-02 09:08:16 [main] [INFO]  KGenProgMain - entered the era of 370th generation.
2023-08-02 09:08:51 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 32 minutes 15 seconds
Variants: generated 100, build-succeeded 57, build-failed 30, syntax-invalid 9, redundant 4
Fitness: max 0(57), min 0(57), ave 0
Test execution time: sum 3458 ms, max 80 ms, min 53 ms
----------------------------------------------------------------

2023-08-02 09:08:51 [main] [INFO]  KGenProgMain - entered the era of 371st generation.
2023-08-02 09:09:26 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 32 minutes 50 seconds
Variants: generated 100, build-succeeded 55, build-failed 29, syntax-invalid 11, redundant 5
Fitness: max 0(55), min 0(55), ave 0
Test execution time: sum 3353 ms, max 78 ms, min 53 ms
----------------------------------------------------------------

2023-08-02 09:09:26 [main] [INFO]  KGenProgMain - entered the era of 372nd generation.
2023-08-02 09:10:02 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 33 minutes 27 seconds
Variants: generated 100, build-succeeded 56, build-failed 36, syntax-invalid 6, redundant 2
Fitness: max 0(56), min 0(56), ave 0
Test execution time: sum 3476 ms, max 202 ms, min 53 ms
----------------------------------------------------------------

2023-08-02 09:10:02 [main] [INFO]  KGenProgMain - entered the era of 373rd generation.
2023-08-02 09:10:39 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 34 minutes 3 seconds
Variants: generated 100, build-succeeded 58, build-failed 34, syntax-invalid 5, redundant 3
Fitness: max 0(58), min 0(58), ave 0
Test execution time: sum 3382 ms, max 73 ms, min 53 ms
----------------------------------------------------------------

2023-08-02 09:10:39 [main] [INFO]  KGenProgMain - entered the era of 374th generation.
2023-08-02 09:11:15 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 34 minutes 39 seconds
Variants: generated 100, build-succeeded 56, build-failed 26, syntax-invalid 15, redundant 3
Fitness: max 0(56), min 0(56), ave 0
Test execution time: sum 3449 ms, max 76 ms, min 53 ms
----------------------------------------------------------------

2023-08-02 09:11:15 [main] [INFO]  KGenProgMain - entered the era of 375th generation.
2023-08-02 09:11:51 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 35 minutes 15 seconds
Variants: generated 100, build-succeeded 58, build-failed 30, syntax-invalid 10, redundant 2
Fitness: max 0(58), min 0(58), ave 0
Test execution time: sum 3567 ms, max 116 ms, min 54 ms
----------------------------------------------------------------

2023-08-02 09:11:51 [main] [INFO]  KGenProgMain - entered the era of 376th generation.
2023-08-02 09:12:26 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 35 minutes 51 seconds
Variants: generated 100, build-succeeded 60, build-failed 23, syntax-invalid 10, redundant 7
Fitness: max 0(60), min 0(60), ave 0
Test execution time: sum 3501 ms, max 76 ms, min 53 ms
----------------------------------------------------------------

2023-08-02 09:12:26 [main] [INFO]  KGenProgMain - entered the era of 377th generation.
2023-08-02 09:13:04 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 36 minutes 28 seconds
Variants: generated 100, build-succeeded 61, build-failed 25, syntax-invalid 9, redundant 5
Fitness: max 0(61), min 0(61), ave 0
Test execution time: sum 3894 ms, max 119 ms, min 54 ms
----------------------------------------------------------------

2023-08-02 09:13:04 [main] [INFO]  KGenProgMain - entered the era of 378th generation.
2023-08-02 09:13:38 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 37 minutes 2 seconds
Variants: generated 100, build-succeeded 53, build-failed 26, syntax-invalid 14, redundant 7
Fitness: max 0(53), min 0(53), ave 0
Test execution time: sum 3131 ms, max 144 ms, min 53 ms
----------------------------------------------------------------

2023-08-02 09:13:38 [main] [INFO]  KGenProgMain - entered the era of 379th generation.
2023-08-02 09:14:11 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 37 minutes 36 seconds
Variants: generated 100, build-succeeded 48, build-failed 32, syntax-invalid 17, redundant 3
Fitness: max 1(1), min 0(47), ave 0.021
Test execution time: sum 2969 ms, max 78 ms, min 54 ms
----------------------------------------------------------------

2023-08-02 09:14:11 [main] [INFO]  KGenProgMain - entered the era of 380th generation.
2023-08-02 09:14:48 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 38 minutes 12 seconds
Variants: generated 100, build-succeeded 49, build-failed 30, syntax-invalid 19, redundant 2
Fitness: max 0(49), min 0(49), ave 0
Test execution time: sum 3257 ms, max 152 ms, min 53 ms
----------------------------------------------------------------

2023-08-02 09:14:48 [main] [INFO]  KGenProgMain - entered the era of 381st generation.
2023-08-02 09:15:23 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 38 minutes 47 seconds
Variants: generated 100, build-succeeded 51, build-failed 35, syntax-invalid 10, redundant 4
Fitness: max 0(51), min 0(51), ave 0
Test execution time: sum 3017 ms, max 81 ms, min 53 ms
----------------------------------------------------------------

2023-08-02 09:15:23 [main] [INFO]  KGenProgMain - entered the era of 382nd generation.
2023-08-02 09:15:59 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 39 minutes 23 seconds
Variants: generated 100, build-succeeded 59, build-failed 31, syntax-invalid 6, redundant 4
Fitness: max 0(59), min 0(59), ave 0
Test execution time: sum 3455 ms, max 71 ms, min 53 ms
----------------------------------------------------------------

2023-08-02 09:15:59 [main] [INFO]  KGenProgMain - entered the era of 383rd generation.
2023-08-02 09:16:35 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 39 minutes 59 seconds
Variants: generated 100, build-succeeded 53, build-failed 31, syntax-invalid 13, redundant 3
Fitness: max 0(53), min 0(53), ave 0
Test execution time: sum 3253 ms, max 117 ms, min 53 ms
----------------------------------------------------------------

2023-08-02 09:16:35 [main] [INFO]  KGenProgMain - entered the era of 384th generation.
2023-08-02 09:17:10 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 40 minutes 34 seconds
Variants: generated 100, build-succeeded 55, build-failed 33, syntax-invalid 10, redundant 2
Fitness: max 0(55), min 0(55), ave 0
Test execution time: sum 3202 ms, max 74 ms, min 53 ms
----------------------------------------------------------------

2023-08-02 09:17:10 [main] [INFO]  KGenProgMain - entered the era of 385th generation.
2023-08-02 09:17:47 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 41 minutes 11 seconds
Variants: generated 100, build-succeeded 59, build-failed 27, syntax-invalid 5, redundant 9
Fitness: max 0(59), min 0(59), ave 0
Test execution time: sum 3502 ms, max 74 ms, min 53 ms
----------------------------------------------------------------

2023-08-02 09:17:47 [main] [INFO]  KGenProgMain - entered the era of 386th generation.
2023-08-02 09:18:25 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 41 minutes 50 seconds
Variants: generated 100, build-succeeded 63, build-failed 30, syntax-invalid 1, redundant 6
Fitness: max 0(63), min 0(63), ave 0
Test execution time: sum 3862 ms, max 104 ms, min 54 ms
----------------------------------------------------------------

2023-08-02 09:18:25 [main] [INFO]  KGenProgMain - entered the era of 387th generation.
2023-08-02 09:19:02 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 42 minutes 27 seconds
Variants: generated 100, build-succeeded 59, build-failed 30, syntax-invalid 4, redundant 7
Fitness: max 0(59), min 0(59), ave 0
Test execution time: sum 3474 ms, max 73 ms, min 54 ms
----------------------------------------------------------------

2023-08-02 09:19:02 [main] [INFO]  KGenProgMain - entered the era of 388th generation.
2023-08-02 09:19:40 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 43 minutes 5 seconds
Variants: generated 100, build-succeeded 60, build-failed 30, syntax-invalid 8, redundant 2
Fitness: max 0(60), min 0(60), ave 0
Test execution time: sum 3696 ms, max 125 ms, min 53 ms
----------------------------------------------------------------

2023-08-02 09:19:40 [main] [INFO]  KGenProgMain - entered the era of 389th generation.
2023-08-02 09:20:17 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 43 minutes 41 seconds
Variants: generated 100, build-succeeded 57, build-failed 31, syntax-invalid 9, redundant 3
Fitness: max 0(57), min 0(57), ave 0
Test execution time: sum 3285 ms, max 89 ms, min 53 ms
----------------------------------------------------------------

2023-08-02 09:20:17 [main] [INFO]  KGenProgMain - entered the era of 390th generation.
2023-08-02 09:20:53 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 44 minutes 17 seconds
Variants: generated 100, build-succeeded 53, build-failed 36, syntax-invalid 9, redundant 2
Fitness: max 0(53), min 0(53), ave 0
Test execution time: sum 3044 ms, max 71 ms, min 53 ms
----------------------------------------------------------------

2023-08-02 09:20:53 [main] [INFO]  KGenProgMain - entered the era of 391st generation.
2023-08-02 09:21:29 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 44 minutes 54 seconds
Variants: generated 100, build-succeeded 53, build-failed 33, syntax-invalid 12, redundant 2
Fitness: max 0(53), min 0(53), ave 0
Test execution time: sum 3301 ms, max 128 ms, min 53 ms
----------------------------------------------------------------

2023-08-02 09:21:29 [main] [INFO]  KGenProgMain - entered the era of 392nd generation.
2023-08-02 09:22:03 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 45 minutes 28 seconds
Variants: generated 100, build-succeeded 45, build-failed 36, syntax-invalid 17, redundant 2
Fitness: max 0(45), min 0(45), ave 0
Test execution time: sum 2617 ms, max 80 ms, min 54 ms
----------------------------------------------------------------

2023-08-02 09:22:03 [main] [INFO]  KGenProgMain - entered the era of 393rd generation.
2023-08-02 09:22:39 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 46 minutes 3 seconds
Variants: generated 100, build-succeeded 51, build-failed 34, syntax-invalid 11, redundant 4
Fitness: max 0(51), min 0(51), ave 0
Test execution time: sum 3051 ms, max 76 ms, min 54 ms
----------------------------------------------------------------

2023-08-02 09:22:39 [main] [INFO]  KGenProgMain - entered the era of 394th generation.
2023-08-02 09:23:17 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 46 minutes 41 seconds
Variants: generated 100, build-succeeded 62, build-failed 29, syntax-invalid 5, redundant 4
Fitness: max 0(62), min 0(62), ave 0
Test execution time: sum 3778 ms, max 130 ms, min 53 ms
----------------------------------------------------------------

2023-08-02 09:23:17 [main] [INFO]  KGenProgMain - entered the era of 395th generation.
2023-08-02 09:23:53 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 47 minutes 17 seconds
Variants: generated 100, build-succeeded 52, build-failed 34, syntax-invalid 12, redundant 2
Fitness: max 0(52), min 0(52), ave 0
Test execution time: sum 3106 ms, max 73 ms, min 53 ms
----------------------------------------------------------------

2023-08-02 09:23:53 [main] [INFO]  KGenProgMain - entered the era of 396th generation.
2023-08-02 09:24:31 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 47 minutes 55 seconds
Variants: generated 100, build-succeeded 60, build-failed 32, syntax-invalid 6, redundant 2
Fitness: max 0(60), min 0(60), ave 0
Test execution time: sum 3741 ms, max 90 ms, min 53 ms
----------------------------------------------------------------

2023-08-02 09:24:31 [main] [INFO]  KGenProgMain - entered the era of 397th generation.
2023-08-02 09:25:08 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 48 minutes 33 seconds
Variants: generated 100, build-succeeded 54, build-failed 29, syntax-invalid 9, redundant 8
Fitness: max 0(54), min 0(54), ave 0
Test execution time: sum 3246 ms, max 120 ms, min 54 ms
----------------------------------------------------------------

2023-08-02 09:25:08 [main] [INFO]  KGenProgMain - entered the era of 398th generation.
2023-08-02 09:25:44 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 49 minutes 8 seconds
Variants: generated 100, build-succeeded 56, build-failed 29, syntax-invalid 10, redundant 5
Fitness: max 0(56), min 0(56), ave 0
Test execution time: sum 3348 ms, max 83 ms, min 54 ms
----------------------------------------------------------------

2023-08-02 09:25:44 [main] [INFO]  KGenProgMain - entered the era of 399th generation.
2023-08-02 09:26:18 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 49 minutes 43 seconds
Variants: generated 100, build-succeeded 51, build-failed 30, syntax-invalid 15, redundant 4
Fitness: max 0(51), min 0(51), ave 0
Test execution time: sum 3241 ms, max 89 ms, min 55 ms
----------------------------------------------------------------

2023-08-02 09:26:18 [main] [INFO]  KGenProgMain - entered the era of 400th generation.
2023-08-02 09:26:56 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 50 minutes 21 seconds
Variants: generated 100, build-succeeded 58, build-failed 27, syntax-invalid 13, redundant 2
Fitness: max 1(1), min 0(57), ave 0.017
Test execution time: sum 3710 ms, max 143 ms, min 53 ms
----------------------------------------------------------------

2023-08-02 09:26:56 [main] [INFO]  KGenProgMain - entered the era of 401st generation.
2023-08-02 09:27:35 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 50 minutes 59 seconds
Variants: generated 100, build-succeeded 62, build-failed 28, syntax-invalid 5, redundant 5
Fitness: max 0(62), min 0(62), ave 0
Test execution time: sum 3828 ms, max 83 ms, min 53 ms
----------------------------------------------------------------

2023-08-02 09:27:35 [main] [INFO]  KGenProgMain - entered the era of 402nd generation.
2023-08-02 09:28:14 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 51 minutes 38 seconds
Variants: generated 100, build-succeeded 59, build-failed 32, syntax-invalid 5, redundant 4
Fitness: max 0(59), min 0(59), ave 0
Test execution time: sum 3644 ms, max 105 ms, min 54 ms
----------------------------------------------------------------

2023-08-02 09:28:14 [main] [INFO]  KGenProgMain - entered the era of 403rd generation.
2023-08-02 09:28:52 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 52 minutes 16 seconds
Variants: generated 100, build-succeeded 57, build-failed 29, syntax-invalid 11, redundant 3
Fitness: max 0(57), min 0(57), ave 0
Test execution time: sum 3636 ms, max 140 ms, min 54 ms
----------------------------------------------------------------

2023-08-02 09:28:52 [main] [INFO]  KGenProgMain - entered the era of 404th generation.
2023-08-02 09:29:28 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 52 minutes 52 seconds
Variants: generated 100, build-succeeded 52, build-failed 27, syntax-invalid 12, redundant 9
Fitness: max 0(52), min 0(52), ave 0
Test execution time: sum 3230 ms, max 80 ms, min 53 ms
----------------------------------------------------------------

2023-08-02 09:29:28 [main] [INFO]  KGenProgMain - entered the era of 405th generation.
2023-08-02 09:30:07 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 53 minutes 31 seconds
Variants: generated 100, build-succeeded 51, build-failed 34, syntax-invalid 10, redundant 5
Fitness: max 0(51), min 0(51), ave 0
Test execution time: sum 3280 ms, max 138 ms, min 53 ms
----------------------------------------------------------------

2023-08-02 09:30:07 [main] [INFO]  KGenProgMain - entered the era of 406th generation.
2023-08-02 09:30:44 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 54 minutes 8 seconds
Variants: generated 100, build-succeeded 58, build-failed 30, syntax-invalid 6, redundant 6
Fitness: max 0(58), min 0(58), ave 0
Test execution time: sum 3710 ms, max 80 ms, min 54 ms
----------------------------------------------------------------

2023-08-02 09:30:44 [main] [INFO]  KGenProgMain - entered the era of 407th generation.
2023-08-02 09:31:22 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 54 minutes 47 seconds
Variants: generated 100, build-succeeded 56, build-failed 29, syntax-invalid 9, redundant 6
Fitness: max 0(56), min 0(56), ave 0
Test execution time: sum 3676 ms, max 123 ms, min 54 ms
----------------------------------------------------------------

2023-08-02 09:31:22 [main] [INFO]  KGenProgMain - entered the era of 408th generation.
2023-08-02 09:32:01 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 55 minutes 25 seconds
Variants: generated 100, build-succeeded 58, build-failed 32, syntax-invalid 5, redundant 5
Fitness: max 0(58), min 0(58), ave 0
Test execution time: sum 3650 ms, max 82 ms, min 54 ms
----------------------------------------------------------------

2023-08-02 09:32:01 [main] [INFO]  KGenProgMain - entered the era of 409th generation.
2023-08-02 09:32:40 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 56 minutes 5 seconds
Variants: generated 100, build-succeeded 69, build-failed 24, syntax-invalid 4, redundant 3
Fitness: max 1(2), min 0(67), ave 0.029
Test execution time: sum 4433 ms, max 76 ms, min 54 ms
----------------------------------------------------------------

2023-08-02 09:32:40 [main] [INFO]  KGenProgMain - entered the era of 410th generation.
2023-08-02 09:33:21 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 56 minutes 45 seconds
Variants: generated 100, build-succeeded 63, build-failed 29, syntax-invalid 4, redundant 4
Fitness: max 1(1), min 0(62), ave 0.016
Test execution time: sum 4037 ms, max 138 ms, min 54 ms
----------------------------------------------------------------

2023-08-02 09:33:21 [main] [INFO]  KGenProgMain - entered the era of 411th generation.
2023-08-02 09:33:59 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 57 minutes 24 seconds
Variants: generated 100, build-succeeded 59, build-failed 32, syntax-invalid 4, redundant 5
Fitness: max 0(59), min 0(59), ave 0
Test execution time: sum 3814 ms, max 83 ms, min 54 ms
----------------------------------------------------------------

2023-08-02 09:33:59 [main] [INFO]  KGenProgMain - entered the era of 412th generation.
2023-08-02 09:34:39 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 58 minutes 4 seconds
Variants: generated 100, build-succeeded 60, build-failed 27, syntax-invalid 5, redundant 8
Fitness: max 0(60), min 0(60), ave 0
Test execution time: sum 4151 ms, max 133 ms, min 59 ms
----------------------------------------------------------------

2023-08-02 09:34:39 [main] [INFO]  KGenProgMain - entered the era of 413th generation.
2023-08-02 09:35:19 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 58 minutes 44 seconds
Variants: generated 100, build-succeeded 61, build-failed 31, syntax-invalid 4, redundant 4
Fitness: max 1(2), min 0(59), ave 0.033
Test execution time: sum 4042 ms, max 96 ms, min 56 ms
----------------------------------------------------------------

2023-08-02 09:35:19 [main] [INFO]  KGenProgMain - entered the era of 414th generation.
2023-08-02 09:35:58 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 59 minutes 23 seconds
Variants: generated 100, build-succeeded 63, build-failed 25, syntax-invalid 7, redundant 5
Fitness: max 1(1), min 0(62), ave 0.016
Test execution time: sum 4101 ms, max 80 ms, min 56 ms
----------------------------------------------------------------

2023-08-02 09:35:58 [main] [INFO]  KGenProgMain - entered the era of 415th generation.
2023-08-02 09:36:39 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 3 seconds
Variants: generated 100, build-succeeded 56, build-failed 33, syntax-invalid 6, redundant 5
Fitness: max 1(1), min 0(55), ave 0.018
Test execution time: sum 3735 ms, max 142 ms, min 58 ms
----------------------------------------------------------------

2023-08-02 09:36:39 [main] [INFO]  KGenProgMain - entered the era of 416th generation.
2023-08-02 09:37:16 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 41 seconds
Variants: generated 100, build-succeeded 58, build-failed 29, syntax-invalid 7, redundant 6
Fitness: max 0(58), min 0(58), ave 0
Test execution time: sum 3772 ms, max 83 ms, min 57 ms
----------------------------------------------------------------

2023-08-02 09:37:16 [main] [INFO]  KGenProgMain - entered the era of 417th generation.
2023-08-02 09:37:56 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 1 minutes 20 seconds
Variants: generated 100, build-succeeded 63, build-failed 26, syntax-invalid 6, redundant 5
Fitness: max 1(1), min 0(62), ave 0.016
Test execution time: sum 4253 ms, max 90 ms, min 54 ms
----------------------------------------------------------------

2023-08-02 09:37:56 [main] [INFO]  KGenProgMain - entered the era of 418th generation.
2023-08-02 09:38:36 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 2 minutes 0 seconds
Variants: generated 100, build-succeeded 59, build-failed 32, syntax-invalid 4, redundant 5
Fitness: max 0(59), min 0(59), ave 0
Test execution time: sum 3902 ms, max 127 ms, min 54 ms
----------------------------------------------------------------

2023-08-02 09:38:36 [main] [INFO]  KGenProgMain - entered the era of 419th generation.
2023-08-02 09:39:15 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 2 minutes 40 seconds
Variants: generated 100, build-succeeded 61, build-failed 28, syntax-invalid 6, redundant 5
Fitness: max 0(61), min 0(61), ave 0
Test execution time: sum 3936 ms, max 89 ms, min 55 ms
----------------------------------------------------------------

2023-08-02 09:39:15 [main] [INFO]  KGenProgMain - entered the era of 420th generation.
2023-08-02 09:39:55 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 3 minutes 19 seconds
Variants: generated 100, build-succeeded 58, build-failed 30, syntax-invalid 10, redundant 2
Fitness: max 1(1), min 0(57), ave 0.017
Test execution time: sum 3987 ms, max 139 ms, min 55 ms
----------------------------------------------------------------

2023-08-02 09:39:55 [main] [INFO]  KGenProgMain - entered the era of 421st generation.
2023-08-02 09:40:34 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 3 minutes 58 seconds
Variants: generated 100, build-succeeded 58, build-failed 32, syntax-invalid 5, redundant 5
Fitness: max 0(58), min 0(58), ave 0
Test execution time: sum 3775 ms, max 102 ms, min 54 ms
----------------------------------------------------------------

2023-08-02 09:40:34 [main] [INFO]  KGenProgMain - entered the era of 422nd generation.
2023-08-02 09:41:13 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 4 minutes 38 seconds
Variants: generated 100, build-succeeded 59, build-failed 34, syntax-invalid 3, redundant 4
Fitness: max 0(59), min 0(59), ave 0
Test execution time: sum 3873 ms, max 74 ms, min 59 ms
----------------------------------------------------------------

2023-08-02 09:41:13 [main] [INFO]  KGenProgMain - entered the era of 423rd generation.
2023-08-02 09:41:54 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 5 minutes 19 seconds
Variants: generated 100, build-succeeded 62, build-failed 23, syntax-invalid 11, redundant 4
Fitness: max 0(62), min 0(62), ave 0
Test execution time: sum 4224 ms, max 141 ms, min 58 ms
----------------------------------------------------------------

2023-08-02 09:41:54 [main] [INFO]  KGenProgMain - entered the era of 424th generation.
2023-08-02 09:42:31 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 5 minutes 56 seconds
Variants: generated 100, build-succeeded 54, build-failed 30, syntax-invalid 12, redundant 4
Fitness: max 0(54), min 0(54), ave 0
Test execution time: sum 3467 ms, max 82 ms, min 54 ms
----------------------------------------------------------------

2023-08-02 09:42:31 [main] [INFO]  KGenProgMain - entered the era of 425th generation.
2023-08-02 09:46:12 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 9 minutes 36 seconds
Variants: generated 100, build-succeeded 62, build-failed 32, syntax-invalid 3, redundant 3
Fitness: max 1(1), min 0(61), ave 0.016
Test execution time: sum 184183 ms, max 180090 ms, min 55 ms
----------------------------------------------------------------

2023-08-02 09:46:12 [main] [INFO]  KGenProgMain - entered the era of 426th generation.
2023-08-02 09:46:51 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 10 minutes 16 seconds
Variants: generated 100, build-succeeded 51, build-failed 33, syntax-invalid 7, redundant 9
Fitness: max 0(51), min 0(51), ave 0
Test execution time: sum 3402 ms, max 138 ms, min 54 ms
----------------------------------------------------------------

2023-08-02 09:46:51 [main] [INFO]  KGenProgMain - entered the era of 427th generation.
2023-08-02 09:47:31 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 10 minutes 55 seconds
Variants: generated 100, build-succeeded 58, build-failed 28, syntax-invalid 4, redundant 10
Fitness: max 0(58), min 0(58), ave 0
Test execution time: sum 3789 ms, max 90 ms, min 56 ms
----------------------------------------------------------------

2023-08-02 09:47:31 [main] [INFO]  KGenProgMain - entered the era of 428th generation.
2023-08-02 09:48:12 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 11 minutes 37 seconds
Variants: generated 100, build-succeeded 59, build-failed 32, syntax-invalid 4, redundant 5
Fitness: max 0(59), min 0(59), ave 0
Test execution time: sum 4283 ms, max 263 ms, min 57 ms
----------------------------------------------------------------

2023-08-02 09:48:12 [main] [INFO]  KGenProgMain - entered the era of 429th generation.
2023-08-02 09:48:53 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 12 minutes 17 seconds
Variants: generated 100, build-succeeded 63, build-failed 27, syntax-invalid 3, redundant 7
Fitness: max 0(63), min 0(63), ave 0
Test execution time: sum 4118 ms, max 87 ms, min 59 ms
----------------------------------------------------------------

2023-08-02 09:48:53 [main] [INFO]  KGenProgMain - entered the era of 430th generation.
2023-08-02 09:49:33 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 12 minutes 57 seconds
Variants: generated 100, build-succeeded 60, build-failed 34, syntax-invalid 3, redundant 3
Fitness: max 0(60), min 0(60), ave 0
Test execution time: sum 3827 ms, max 83 ms, min 54 ms
----------------------------------------------------------------

2023-08-02 09:49:33 [main] [INFO]  KGenProgMain - entered the era of 431st generation.
2023-08-02 09:50:15 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 13 minutes 40 seconds
Variants: generated 100, build-succeeded 63, build-failed 31, syntax-invalid 2, redundant 4
Fitness: max 0(63), min 0(63), ave 0
Test execution time: sum 4230 ms, max 132 ms, min 54 ms
----------------------------------------------------------------

2023-08-02 09:50:15 [main] [INFO]  KGenProgMain - entered the era of 432nd generation.
2023-08-02 09:50:55 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 14 minutes 20 seconds
Variants: generated 100, build-succeeded 66, build-failed 29, syntax-invalid 1, redundant 4
Fitness: max 0(66), min 0(66), ave 0
Test execution time: sum 4078 ms, max 89 ms, min 54 ms
----------------------------------------------------------------

2023-08-02 09:50:55 [main] [INFO]  KGenProgMain - entered the era of 433rd generation.
2023-08-02 09:51:36 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 15 minutes 1 seconds
Variants: generated 100, build-succeeded 58, build-failed 36, syntax-invalid 4, redundant 2
Fitness: max 0(58), min 0(58), ave 0
Test execution time: sum 3789 ms, max 126 ms, min 54 ms
----------------------------------------------------------------

2023-08-02 09:51:36 [main] [INFO]  KGenProgMain - entered the era of 434th generation.
2023-08-02 09:52:15 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 15 minutes 40 seconds
Variants: generated 100, build-succeeded 59, build-failed 29, syntax-invalid 4, redundant 8
Fitness: max 0(59), min 0(59), ave 0
Test execution time: sum 3753 ms, max 88 ms, min 54 ms
----------------------------------------------------------------

2023-08-02 09:52:15 [main] [INFO]  KGenProgMain - entered the era of 435th generation.
2023-08-02 09:52:55 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 16 minutes 19 seconds
Variants: generated 100, build-succeeded 61, build-failed 23, syntax-invalid 7, redundant 9
Fitness: max 0(61), min 0(61), ave 0
Test execution time: sum 4178 ms, max 148 ms, min 55 ms
----------------------------------------------------------------

2023-08-02 09:52:55 [main] [INFO]  KGenProgMain - entered the era of 436th generation.
2023-08-02 09:53:37 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 17 minutes 2 seconds
Variants: generated 100, build-succeeded 60, build-failed 30, syntax-invalid 6, redundant 4
Fitness: max 1(1), min 0(59), ave 0.017
Test execution time: sum 4010 ms, max 138 ms, min 55 ms
----------------------------------------------------------------

2023-08-02 09:53:37 [main] [INFO]  KGenProgMain - entered the era of 437th generation.
2023-08-02 09:54:18 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 17 minutes 43 seconds
Variants: generated 100, build-succeeded 64, build-failed 27, syntax-invalid 4, redundant 5
Fitness: max 0(64), min 0(64), ave 0
Test execution time: sum 3999 ms, max 75 ms, min 54 ms
----------------------------------------------------------------

2023-08-02 09:54:18 [main] [INFO]  KGenProgMain - entered the era of 438th generation.
2023-08-02 09:55:02 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 18 minutes 26 seconds
Variants: generated 100, build-succeeded 64, build-failed 31, syntax-invalid 1, redundant 4
Fitness: max 0(64), min 0(64), ave 0
Test execution time: sum 4466 ms, max 159 ms, min 54 ms
----------------------------------------------------------------

2023-08-02 09:55:02 [main] [INFO]  KGenProgMain - entered the era of 439th generation.
2023-08-02 09:55:42 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 19 minutes 7 seconds
Variants: generated 100, build-succeeded 61, build-failed 25, syntax-invalid 3, redundant 11
Fitness: max 0(61), min 0(61), ave 0
Test execution time: sum 4006 ms, max 79 ms, min 55 ms
----------------------------------------------------------------

2023-08-02 09:55:42 [main] [INFO]  KGenProgMain - entered the era of 440th generation.
2023-08-02 09:56:24 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 19 minutes 49 seconds
Variants: generated 100, build-succeeded 59, build-failed 32, syntax-invalid 6, redundant 3
Fitness: max 1(1), min 0(58), ave 0.017
Test execution time: sum 3953 ms, max 167 ms, min 55 ms
----------------------------------------------------------------

2023-08-02 09:56:24 [main] [INFO]  KGenProgMain - entered the era of 441st generation.
2023-08-02 09:57:06 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 20 minutes 30 seconds
Variants: generated 100, build-succeeded 61, build-failed 32, syntax-invalid 3, redundant 4
Fitness: max 0(61), min 0(61), ave 0
Test execution time: sum 4057 ms, max 87 ms, min 55 ms
----------------------------------------------------------------

2023-08-02 09:57:06 [main] [INFO]  KGenProgMain - entered the era of 442nd generation.
2023-08-02 09:57:47 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 21 minutes 11 seconds
Variants: generated 100, build-succeeded 54, build-failed 31, syntax-invalid 7, redundant 8
Fitness: max 0(54), min 0(54), ave 0
Test execution time: sum 3858 ms, max 147 ms, min 59 ms
----------------------------------------------------------------

2023-08-02 09:57:47 [main] [INFO]  KGenProgMain - entered the era of 443rd generation.
2023-08-02 09:58:27 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 21 minutes 52 seconds
Variants: generated 100, build-succeeded 60, build-failed 27, syntax-invalid 9, redundant 4
Fitness: max 1(1), min 0(59), ave 0.017
Test execution time: sum 4049 ms, max 80 ms, min 56 ms
----------------------------------------------------------------

2023-08-02 09:58:27 [main] [INFO]  KGenProgMain - entered the era of 444th generation.
2023-08-02 09:59:10 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 22 minutes 34 seconds
Variants: generated 100, build-succeeded 57, build-failed 33, syntax-invalid 7, redundant 3
Fitness: max 0(57), min 0(57), ave 0
Test execution time: sum 4086 ms, max 144 ms, min 56 ms
----------------------------------------------------------------

2023-08-02 09:59:10 [main] [INFO]  KGenProgMain - entered the era of 445th generation.
2023-08-02 09:59:52 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 23 minutes 16 seconds
Variants: generated 100, build-succeeded 59, build-failed 33, syntax-invalid 4, redundant 4
Fitness: max 0(59), min 0(59), ave 0
Test execution time: sum 3932 ms, max 145 ms, min 54 ms
----------------------------------------------------------------

2023-08-02 09:59:52 [main] [INFO]  KGenProgMain - entered the era of 446th generation.
2023-08-02 10:00:32 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 23 minutes 56 seconds
Variants: generated 100, build-succeeded 58, build-failed 30, syntax-invalid 6, redundant 6
Fitness: max 0(58), min 0(58), ave 0
Test execution time: sum 3716 ms, max 77 ms, min 54 ms
----------------------------------------------------------------

2023-08-02 10:00:32 [main] [INFO]  KGenProgMain - entered the era of 447th generation.
2023-08-02 10:01:14 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 24 minutes 39 seconds
Variants: generated 100, build-succeeded 61, build-failed 28, syntax-invalid 7, redundant 4
Fitness: max 1(1), min 0(60), ave 0.016
Test execution time: sum 4309 ms, max 159 ms, min 55 ms
----------------------------------------------------------------

2023-08-02 10:01:14 [main] [INFO]  KGenProgMain - entered the era of 448th generation.
2023-08-02 10:01:57 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 25 minutes 21 seconds
Variants: generated 100, build-succeeded 63, build-failed 29, syntax-invalid 3, redundant 5
Fitness: max 0(63), min 0(63), ave 0
Test execution time: sum 4317 ms, max 139 ms, min 55 ms
----------------------------------------------------------------

2023-08-02 10:01:57 [main] [INFO]  KGenProgMain - entered the era of 449th generation.
2023-08-02 10:02:42 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 26 minutes 6 seconds
Variants: generated 100, build-succeeded 59, build-failed 30, syntax-invalid 6, redundant 5
Fitness: max 1(1), min 0(58), ave 0.017
Test execution time: sum 4282 ms, max 133 ms, min 56 ms
----------------------------------------------------------------

2023-08-02 10:02:42 [main] [INFO]  KGenProgMain - entered the era of 450th generation.
2023-08-02 10:03:26 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 26 minutes 50 seconds
Variants: generated 100, build-succeeded 74, build-failed 21, syntax-invalid 2, redundant 3
Fitness: max 1(2), min 0(72), ave 0.027
Test execution time: sum 5006 ms, max 120 ms, min 57 ms
----------------------------------------------------------------

2023-08-02 10:03:26 [main] [INFO]  KGenProgMain - entered the era of 451st generation.
2023-08-02 10:04:08 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 27 minutes 33 seconds
Variants: generated 100, build-succeeded 66, build-failed 27, syntax-invalid 1, redundant 6
Fitness: max 0(66), min 0(66), ave 0
Test execution time: sum 4399 ms, max 84 ms, min 56 ms
----------------------------------------------------------------

2023-08-02 10:04:08 [main] [INFO]  KGenProgMain - entered the era of 452nd generation.
2023-08-02 10:04:49 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 28 minutes 14 seconds
Variants: generated 100, build-succeeded 54, build-failed 33, syntax-invalid 10, redundant 3
Fitness: max 0(54), min 0(54), ave 0
Test execution time: sum 3870 ms, max 135 ms, min 56 ms
----------------------------------------------------------------

2023-08-02 10:04:49 [main] [INFO]  KGenProgMain - entered the era of 453rd generation.
2023-08-02 10:05:31 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 28 minutes 55 seconds
Variants: generated 100, build-succeeded 52, build-failed 34, syntax-invalid 12, redundant 2
Fitness: max 1(1), min 0(51), ave 0.019
Test execution time: sum 3820 ms, max 139 ms, min 60 ms
----------------------------------------------------------------

2023-08-02 10:05:31 [main] [INFO]  KGenProgMain - entered the era of 454th generation.
2023-08-02 10:06:11 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 29 minutes 35 seconds
Variants: generated 100, build-succeeded 54, build-failed 29, syntax-invalid 6, redundant 11
Fitness: max 0(54), min 0(54), ave 0
Test execution time: sum 3570 ms, max 81 ms, min 56 ms
----------------------------------------------------------------

2023-08-02 10:06:11 [main] [INFO]  KGenProgMain - entered the era of 455th generation.
2023-08-02 10:06:52 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 30 minutes 16 seconds
Variants: generated 100, build-succeeded 52, build-failed 37, syntax-invalid 6, redundant 5
Fitness: max 0(52), min 0(52), ave 0
Test execution time: sum 3553 ms, max 86 ms, min 63 ms
----------------------------------------------------------------

2023-08-02 10:06:52 [main] [INFO]  KGenProgMain - entered the era of 456th generation.
2023-08-02 10:07:35 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 30 minutes 59 seconds
Variants: generated 100, build-succeeded 64, build-failed 23, syntax-invalid 3, redundant 10
Fitness: max 0(64), min 0(64), ave 0
Test execution time: sum 4493 ms, max 144 ms, min 56 ms
----------------------------------------------------------------

2023-08-02 10:07:35 [main] [INFO]  KGenProgMain - entered the era of 457th generation.
2023-08-02 10:08:15 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 31 minutes 40 seconds
Variants: generated 100, build-succeeded 53, build-failed 35, syntax-invalid 11, redundant 1
Fitness: max 0(53), min 0(53), ave 0
Test execution time: sum 3787 ms, max 122 ms, min 57 ms
----------------------------------------------------------------

2023-08-02 10:08:16 [main] [INFO]  KGenProgMain - entered the era of 458th generation.
2023-08-02 10:08:56 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 32 minutes 20 seconds
Variants: generated 100, build-succeeded 59, build-failed 26, syntax-invalid 7, redundant 8
Fitness: max 0(59), min 0(59), ave 0
Test execution time: sum 3801 ms, max 80 ms, min 55 ms
----------------------------------------------------------------

2023-08-02 10:08:56 [main] [INFO]  KGenProgMain - entered the era of 459th generation.
2023-08-02 10:09:34 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 32 minutes 58 seconds
Variants: generated 100, build-succeeded 49, build-failed 29, syntax-invalid 14, redundant 8
Fitness: max 1(1), min 0(48), ave 0.02
Test execution time: sum 3394 ms, max 97 ms, min 60 ms
----------------------------------------------------------------

2023-08-02 10:09:34 [main] [INFO]  KGenProgMain - entered the era of 460th generation.
2023-08-02 10:10:15 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 33 minutes 40 seconds
Variants: generated 100, build-succeeded 52, build-failed 30, syntax-invalid 11, redundant 7
Fitness: max 1(1), min 0(51), ave 0.019
Test execution time: sum 3579 ms, max 142 ms, min 63 ms
----------------------------------------------------------------

2023-08-02 10:10:15 [main] [INFO]  KGenProgMain - entered the era of 461st generation.
2023-08-02 10:10:59 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 34 minutes 23 seconds
Variants: generated 100, build-succeeded 57, build-failed 32, syntax-invalid 5, redundant 6
Fitness: max 0(57), min 0(57), ave 0
Test execution time: sum 4059 ms, max 129 ms, min 56 ms
----------------------------------------------------------------

2023-08-02 10:10:59 [main] [INFO]  KGenProgMain - entered the era of 462nd generation.
2023-08-02 10:11:42 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 35 minutes 6 seconds
Variants: generated 100, build-succeeded 61, build-failed 32, syntax-invalid 5, redundant 2
Fitness: max 0(61), min 0(61), ave 0
Test execution time: sum 4332 ms, max 142 ms, min 56 ms
----------------------------------------------------------------

2023-08-02 10:11:42 [main] [INFO]  KGenProgMain - entered the era of 463rd generation.
2023-08-02 10:12:22 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 35 minutes 47 seconds
Variants: generated 100, build-succeeded 53, build-failed 28, syntax-invalid 11, redundant 8
Fitness: max 0(53), min 0(53), ave 0
Test execution time: sum 3446 ms, max 85 ms, min 55 ms
----------------------------------------------------------------

2023-08-02 10:12:22 [main] [INFO]  KGenProgMain - entered the era of 464th generation.
2023-08-02 10:13:05 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 36 minutes 29 seconds
Variants: generated 100, build-succeeded 61, build-failed 33, syntax-invalid 3, redundant 3
Fitness: max 0(61), min 0(61), ave 0
Test execution time: sum 4034 ms, max 77 ms, min 54 ms
----------------------------------------------------------------

2023-08-02 10:13:05 [main] [INFO]  KGenProgMain - entered the era of 465th generation.
2023-08-02 10:13:48 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 37 minutes 13 seconds
Variants: generated 100, build-succeeded 64, build-failed 29, syntax-invalid 3, redundant 4
Fitness: max 0(64), min 0(64), ave 0
Test execution time: sum 4192 ms, max 131 ms, min 54 ms
----------------------------------------------------------------

2023-08-02 10:13:48 [main] [INFO]  KGenProgMain - entered the era of 466th generation.
2023-08-02 10:14:30 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 37 minutes 54 seconds
Variants: generated 100, build-succeeded 62, build-failed 28, syntax-invalid 4, redundant 6
Fitness: max 0(62), min 0(62), ave 0
Test execution time: sum 4010 ms, max 86 ms, min 55 ms
----------------------------------------------------------------

2023-08-02 10:14:30 [main] [INFO]  KGenProgMain - entered the era of 467th generation.
2023-08-02 10:15:14 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 38 minutes 38 seconds
Variants: generated 100, build-succeeded 65, build-failed 30, syntax-invalid 3, redundant 2
Fitness: max 0(65), min 0(65), ave 0
Test execution time: sum 4338 ms, max 122 ms, min 54 ms
----------------------------------------------------------------

2023-08-02 10:15:14 [main] [INFO]  KGenProgMain - entered the era of 468th generation.
2023-08-02 10:15:57 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 39 minutes 21 seconds
Variants: generated 100, build-succeeded 60, build-failed 26, syntax-invalid 3, redundant 11
Fitness: max 0(60), min 0(60), ave 0
Test execution time: sum 4038 ms, max 96 ms, min 55 ms
----------------------------------------------------------------

2023-08-02 10:15:57 [main] [INFO]  KGenProgMain - entered the era of 469th generation.
2023-08-02 10:16:42 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 40 minutes 6 seconds
Variants: generated 100, build-succeeded 60, build-failed 27, syntax-invalid 3, redundant 10
Fitness: max 0(60), min 0(60), ave 0
Test execution time: sum 4323 ms, max 155 ms, min 55 ms
----------------------------------------------------------------

2023-08-02 10:16:42 [main] [INFO]  KGenProgMain - entered the era of 470th generation.
2023-08-02 10:17:27 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 40 minutes 51 seconds
Variants: generated 100, build-succeeded 64, build-failed 28, syntax-invalid 3, redundant 5
Fitness: max 0(64), min 0(64), ave 0
Test execution time: sum 4417 ms, max 138 ms, min 54 ms
----------------------------------------------------------------

2023-08-02 10:17:27 [main] [INFO]  KGenProgMain - entered the era of 471st generation.
2023-08-02 10:18:09 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 41 minutes 34 seconds
Variants: generated 100, build-succeeded 67, build-failed 29, syntax-invalid 3, redundant 1
Fitness: max 0(67), min 0(67), ave 0
Test execution time: sum 4131 ms, max 89 ms, min 54 ms
----------------------------------------------------------------

2023-08-02 10:18:09 [main] [INFO]  KGenProgMain - entered the era of 472nd generation.
2023-08-02 10:18:52 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 42 minutes 17 seconds
Variants: generated 100, build-succeeded 59, build-failed 30, syntax-invalid 5, redundant 6
Fitness: max 1(1), min 0(58), ave 0.017
Test execution time: sum 3958 ms, max 126 ms, min 55 ms
----------------------------------------------------------------

2023-08-02 10:18:52 [main] [INFO]  KGenProgMain - entered the era of 473rd generation.
2023-08-02 10:19:35 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 43 minutes 0 seconds
Variants: generated 100, build-succeeded 60, build-failed 28, syntax-invalid 5, redundant 7
Fitness: max 0(60), min 0(60), ave 0
Test execution time: sum 3720 ms, max 78 ms, min 54 ms
----------------------------------------------------------------

2023-08-02 10:19:35 [main] [INFO]  KGenProgMain - entered the era of 474th generation.
2023-08-02 10:20:19 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 43 minutes 44 seconds
Variants: generated 100, build-succeeded 61, build-failed 29, syntax-invalid 6, redundant 4
Fitness: max 0(61), min 0(61), ave 0
Test execution time: sum 4097 ms, max 128 ms, min 55 ms
----------------------------------------------------------------

2023-08-02 10:20:19 [main] [INFO]  KGenProgMain - entered the era of 475th generation.
2023-08-02 10:21:00 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 44 minutes 24 seconds
Variants: generated 100, build-succeeded 50, build-failed 32, syntax-invalid 16, redundant 2
Fitness: max 0(50), min 0(50), ave 0
Test execution time: sum 3005 ms, max 84 ms, min 55 ms
----------------------------------------------------------------

2023-08-02 10:21:00 [main] [INFO]  KGenProgMain - entered the era of 476th generation.
2023-08-02 10:21:41 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 45 minutes 6 seconds
Variants: generated 100, build-succeeded 50, build-failed 36, syntax-invalid 12, redundant 2
Fitness: max 0(50), min 0(50), ave 0
Test execution time: sum 3157 ms, max 75 ms, min 55 ms
----------------------------------------------------------------

2023-08-02 10:21:41 [main] [INFO]  KGenProgMain - entered the era of 477th generation.
2023-08-02 10:22:24 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 45 minutes 48 seconds
Variants: generated 100, build-succeeded 56, build-failed 31, syntax-invalid 9, redundant 4
Fitness: max 0(56), min 0(56), ave 0
Test execution time: sum 3631 ms, max 141 ms, min 55 ms
----------------------------------------------------------------

2023-08-02 10:22:24 [main] [INFO]  KGenProgMain - entered the era of 478th generation.
2023-08-02 10:23:05 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 46 minutes 29 seconds
Variants: generated 100, build-succeeded 53, build-failed 27, syntax-invalid 16, redundant 4
Fitness: max 0(53), min 0(53), ave 0
Test execution time: sum 3251 ms, max 77 ms, min 54 ms
----------------------------------------------------------------

2023-08-02 10:23:05 [main] [INFO]  KGenProgMain - entered the era of 479th generation.
2023-08-02 10:23:50 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 47 minutes 14 seconds
Variants: generated 100, build-succeeded 60, build-failed 28, syntax-invalid 10, redundant 2
Fitness: max 1(2), min 0(58), ave 0.033
Test execution time: sum 3956 ms, max 106 ms, min 54 ms
----------------------------------------------------------------

2023-08-02 10:23:50 [main] [INFO]  KGenProgMain - entered the era of 480th generation.
2023-08-02 10:24:31 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 47 minutes 55 seconds
Variants: generated 100, build-succeeded 52, build-failed 28, syntax-invalid 18, redundant 2
Fitness: max 0(52), min 0(52), ave 0
Test execution time: sum 3122 ms, max 82 ms, min 54 ms
----------------------------------------------------------------

2023-08-02 10:24:31 [main] [INFO]  KGenProgMain - entered the era of 481st generation.
2023-08-02 10:25:13 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 48 minutes 37 seconds
Variants: generated 100, build-succeeded 55, build-failed 31, syntax-invalid 8, redundant 6
Fitness: max 0(55), min 0(55), ave 0
Test execution time: sum 3411 ms, max 79 ms, min 54 ms
----------------------------------------------------------------

2023-08-02 10:25:13 [main] [INFO]  KGenProgMain - entered the era of 482nd generation.
2023-08-02 10:25:54 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 49 minutes 18 seconds
Variants: generated 100, build-succeeded 48, build-failed 28, syntax-invalid 18, redundant 6
Fitness: max 0(48), min 0(48), ave 0
Test execution time: sum 3050 ms, max 120 ms, min 55 ms
----------------------------------------------------------------

2023-08-02 10:25:54 [main] [INFO]  KGenProgMain - entered the era of 483rd generation.
2023-08-02 10:26:35 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 50 minutes 0 seconds
Variants: generated 100, build-succeeded 50, build-failed 32, syntax-invalid 13, redundant 5
Fitness: max 1(1), min 0(49), ave 0.02
Test execution time: sum 3129 ms, max 94 ms, min 55 ms
----------------------------------------------------------------

2023-08-02 10:26:35 [main] [INFO]  KGenProgMain - entered the era of 484th generation.
2023-08-02 10:27:18 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 50 minutes 43 seconds
Variants: generated 100, build-succeeded 55, build-failed 29, syntax-invalid 10, redundant 6
Fitness: max 0(55), min 0(55), ave 0
Test execution time: sum 3530 ms, max 79 ms, min 54 ms
----------------------------------------------------------------

2023-08-02 10:27:18 [main] [INFO]  KGenProgMain - entered the era of 485th generation.
2023-08-02 10:28:01 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 51 minutes 25 seconds
Variants: generated 100, build-succeeded 49, build-failed 31, syntax-invalid 14, redundant 6
Fitness: max 0(49), min 0(49), ave 0
Test execution time: sum 3082 ms, max 122 ms, min 54 ms
----------------------------------------------------------------

2023-08-02 10:28:01 [main] [INFO]  KGenProgMain - entered the era of 486th generation.
2023-08-02 10:28:43 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 52 minutes 7 seconds
Variants: generated 100, build-succeeded 57, build-failed 29, syntax-invalid 11, redundant 3
Fitness: max 0(57), min 0(57), ave 0
Test execution time: sum 3294 ms, max 74 ms, min 55 ms
----------------------------------------------------------------

2023-08-02 10:28:43 [main] [INFO]  KGenProgMain - entered the era of 487th generation.
2023-08-02 10:29:22 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 52 minutes 47 seconds
Variants: generated 100, build-succeeded 41, build-failed 32, syntax-invalid 25, redundant 2
Fitness: max 0(41), min 0(41), ave 0
Test execution time: sum 2502 ms, max 81 ms, min 55 ms
----------------------------------------------------------------

2023-08-02 10:29:22 [main] [INFO]  KGenProgMain - entered the era of 488th generation.
2023-08-02 10:30:03 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 53 minutes 28 seconds
Variants: generated 100, build-succeeded 44, build-failed 27, syntax-invalid 21, redundant 8
Fitness: max 0(44), min 0(44), ave 0
Test execution time: sum 2715 ms, max 138 ms, min 54 ms
----------------------------------------------------------------

2023-08-02 10:30:03 [main] [INFO]  KGenProgMain - entered the era of 489th generation.
2023-08-02 10:30:44 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 54 minutes 9 seconds
Variants: generated 100, build-succeeded 50, build-failed 30, syntax-invalid 15, redundant 5
Fitness: max 0(50), min 0(50), ave 0
Test execution time: sum 2930 ms, max 73 ms, min 54 ms
----------------------------------------------------------------

2023-08-02 10:30:44 [main] [INFO]  KGenProgMain - entered the era of 490th generation.
2023-08-02 10:31:25 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 54 minutes 49 seconds
Variants: generated 100, build-succeeded 47, build-failed 29, syntax-invalid 19, redundant 5
Fitness: max 0(47), min 0(47), ave 0
Test execution time: sum 2909 ms, max 76 ms, min 55 ms
----------------------------------------------------------------

2023-08-02 10:31:25 [main] [INFO]  KGenProgMain - entered the era of 491st generation.
2023-08-02 10:32:07 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 55 minutes 31 seconds
Variants: generated 100, build-succeeded 40, build-failed 35, syntax-invalid 22, redundant 3
Fitness: max 0(40), min 0(40), ave 0
Test execution time: sum 2425 ms, max 126 ms, min 53 ms
----------------------------------------------------------------

2023-08-02 10:32:07 [main] [INFO]  KGenProgMain - entered the era of 492nd generation.
2023-08-02 10:32:45 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 56 minutes 10 seconds
Variants: generated 100, build-succeeded 38, build-failed 34, syntax-invalid 26, redundant 2
Fitness: max 0(38), min 0(38), ave 0
Test execution time: sum 2230 ms, max 83 ms, min 53 ms
----------------------------------------------------------------

2023-08-02 10:32:45 [main] [INFO]  KGenProgMain - entered the era of 493rd generation.
2023-08-02 10:33:27 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 56 minutes 52 seconds
Variants: generated 100, build-succeeded 51, build-failed 28, syntax-invalid 16, redundant 5
Fitness: max 0(51), min 0(51), ave 0
Test execution time: sum 3024 ms, max 80 ms, min 54 ms
----------------------------------------------------------------

2023-08-02 10:33:27 [main] [INFO]  KGenProgMain - entered the era of 494th generation.
2023-08-02 10:34:10 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 57 minutes 34 seconds
Variants: generated 100, build-succeeded 43, build-failed 34, syntax-invalid 22, redundant 1
Fitness: max 1(1), min 0(42), ave 0.023
Test execution time: sum 2845 ms, max 146 ms, min 55 ms
----------------------------------------------------------------

2023-08-02 10:34:10 [main] [INFO]  KGenProgMain - entered the era of 495th generation.
2023-08-02 10:34:52 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 58 minutes 16 seconds
Variants: generated 100, build-succeeded 45, build-failed 39, syntax-invalid 13, redundant 3
Fitness: max 0(45), min 0(45), ave 0
Test execution time: sum 2740 ms, max 81 ms, min 55 ms
----------------------------------------------------------------

2023-08-02 10:34:52 [main] [INFO]  KGenProgMain - entered the era of 496th generation.
2023-08-02 10:35:34 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 58 minutes 58 seconds
Variants: generated 100, build-succeeded 49, build-failed 25, syntax-invalid 20, redundant 6
Fitness: max 0(49), min 0(49), ave 0
Test execution time: sum 3163 ms, max 193 ms, min 56 ms
----------------------------------------------------------------

2023-08-02 10:35:34 [main] [INFO]  KGenProgMain - entered the era of 497th generation.
2023-08-02 10:36:18 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 59 minutes 42 seconds
Variants: generated 100, build-succeeded 51, build-failed 28, syntax-invalid 17, redundant 4
Fitness: max 0(51), min 0(51), ave 0
Test execution time: sum 3226 ms, max 120 ms, min 55 ms
----------------------------------------------------------------

2023-08-02 10:36:18 [main] [INFO]  KGenProgMain - entered the era of 498th generation.
2023-08-02 10:37:00 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 hours 24 seconds
Variants: generated 100, build-succeeded 41, build-failed 31, syntax-invalid 23, redundant 5
Fitness: max 0(41), min 0(41), ave 0
Test execution time: sum 2450 ms, max 85 ms, min 55 ms
----------------------------------------------------------------

2023-08-02 10:37:00 [main] [INFO]  KGenProgMain - entered the era of 499th generation.
2023-08-02 10:37:44 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 hours 1 minutes 9 seconds
Variants: generated 100, build-succeeded 46, build-failed 33, syntax-invalid 18, redundant 3
Fitness: max 0(46), min 0(46), ave 0
Test execution time: sum 2794 ms, max 73 ms, min 56 ms
----------------------------------------------------------------

2023-08-02 10:37:44 [main] [INFO]  KGenProgMain - entered the era of 500th generation.
2023-08-02 10:38:31 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 hours 1 minutes 55 seconds
Variants: generated 100, build-succeeded 52, build-failed 36, syntax-invalid 9, redundant 3
Fitness: max 0(52), min 0(52), ave 0
Test execution time: sum 3123 ms, max 132 ms, min 55 ms
----------------------------------------------------------------

2023-08-02 10:38:31 [main] [INFO]  KGenProgMain - GA stopped
2023-08-02 10:38:34 [main] [INFO]  PatchLogExporter - patch (v30)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 10:38:34 [main] [INFO]  PatchLogExporter - patch (v30)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -282,7 +282,6 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-08-02 10:38:34 [main] [INFO]  PatchLogExporter - patch (v30)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 10:38:34 [main] [INFO]  PatchLogExporter - patch (v30)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 10:38:34 [main] [INFO]  PatchLogExporter - patch (v74)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 10:38:34 [main] [INFO]  PatchLogExporter - patch (v74)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -231,9 +231,6 @@
                             // properly ends exactly at the event occurrence
                             return false;
                         }
-                        // either we were not waiting for the event or it has
-                        // moved in such a way the step cannot be accepted
-                        pendingEvent = true;
                         return true;
                     }
 
2023-08-02 10:38:34 [main] [INFO]  PatchLogExporter - patch (v74)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 10:38:34 [main] [INFO]  PatchLogExporter - patch (v74)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 10:38:34 [main] [INFO]  PatchLogExporter - patch (v74)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -276,10 +276,7 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
+                    ++i;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-08-02 10:38:34 [main] [INFO]  PatchLogExporter - patch (v550)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 10:38:34 [main] [INFO]  PatchLogExporter - patch (v550)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -215,6 +215,7 @@
                     final BrentSolver solver = new BrentSolver();
                     solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
+					pendingEventTime = Double.NaN;
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
2023-08-02 10:38:34 [main] [INFO]  PatchLogExporter - patch (v550)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 10:38:34 [main] [INFO]  PatchLogExporter - patch (v550)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 10:38:34 [main] [INFO]  PatchLogExporter - patch (v550)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -106,6 +106,7 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
+		verifyBracketing(min, max, f);
         if (Math.abs(yMin) <= functionValueAccuracy) {
             setResult(yMin, 0);
             return result;
@@ -274,8 +275,7 @@
                 } else {
                     p = -p;
                 }
-                if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
-                        p >= Math.abs(0.5 * oldDelta * p1)) {
+                if ((Math.abs(oldDelta) < tolerance) || (Math.abs(y0) <= Math.abs(y1))) {
                     // Inverse quadratic interpolation gives a value
                     // in the wrong direction, or progress is slow.
                     // Fall back to bisection.
2023-08-02 10:38:34 [main] [INFO]  PatchLogExporter - patch (v1188)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -273,7 +273,6 @@
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
-          dirtyState = false;
       }
 
       return interpolatedState;
2023-08-02 10:38:34 [main] [INFO]  PatchLogExporter - patch (v1188)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 10:38:34 [main] [INFO]  PatchLogExporter - patch (v1188)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -60,7 +60,6 @@
     protected ConvergingAlgorithmImpl(final int defaultMaximalIterationCount,
                                       final double defaultAbsoluteAccuracy) {
         this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
-        this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
2023-08-02 10:38:34 [main] [INFO]  PatchLogExporter - patch (v1188)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -215,6 +215,7 @@
                     final BrentSolver solver = new BrentSolver();
                     solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
+					pendingEventTime = Double.NaN;
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
@@ -282,7 +283,6 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-08-02 10:38:34 [main] [INFO]  PatchLogExporter - patch (v1188)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 10:38:34 [main] [INFO]  PatchLogExporter - patch (v1188)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 10:38:34 [main] [INFO]  PatchLogExporter - patch (v1188)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -232,7 +232,7 @@
                 y1 = y2;
                 y2 = y0;
             }
-            if (Math.abs(y1) <= functionValueAccuracy) {
+            if (y1 == 0.0) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
2023-08-02 10:38:34 [main] [INFO]  PatchLogExporter - patch (v1254)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -87,7 +87,6 @@
    * initializing the copy.
    */
   protected AbstractStepInterpolator() {
-    previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
2023-08-02 10:38:34 [main] [INFO]  PatchLogExporter - patch (v1254)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 10:38:34 [main] [INFO]  PatchLogExporter - patch (v1254)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -215,6 +215,7 @@
                     final BrentSolver solver = new BrentSolver();
                     solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
+					pendingEventTime = Double.NaN;
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
@@ -282,7 +283,6 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-08-02 10:38:34 [main] [INFO]  PatchLogExporter - patch (v1254)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 10:38:34 [main] [INFO]  PatchLogExporter - patch (v1254)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 10:38:34 [main] [INFO]  PatchLogExporter - patch (v1254)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -106,6 +106,7 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
+		verifyBracketing(min, max, f);
         if (Math.abs(yMin) <= functionValueAccuracy) {
             setResult(yMin, 0);
             return result;
@@ -232,7 +233,7 @@
                 y1 = y2;
                 y2 = y0;
             }
-            if (Math.abs(y1) <= functionValueAccuracy) {
+            if (y1 == 0.0) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
2023-08-02 10:38:34 [main] [INFO]  PatchLogExporter - patch (v1576)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -272,7 +272,6 @@
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
-          computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
       }
 
2023-08-02 10:38:34 [main] [INFO]  PatchLogExporter - patch (v1576)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 10:38:34 [main] [INFO]  PatchLogExporter - patch (v1576)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -102,7 +102,7 @@
         t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
+        final BrentSolver solver = new BrentSolver();
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
@@ -215,6 +215,7 @@
                     final BrentSolver solver = new BrentSolver();
                     solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
+					pendingEventTime = Double.NaN;
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
@@ -282,7 +283,6 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
@@ -323,7 +323,7 @@
         if (nextAction == EventHandler.RESET_STATE) {
             handler.resetState(t, y);
         }
-        pendingEvent      = false;
+        final BrentSolver solver = new BrentSolver();
         pendingEventTime  = Double.NaN;
 
         return (nextAction == EventHandler.RESET_STATE) ||
2023-08-02 10:38:34 [main] [INFO]  PatchLogExporter - patch (v1576)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 10:38:34 [main] [INFO]  PatchLogExporter - patch (v1576)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 10:38:34 [main] [INFO]  PatchLogExporter - patch (v1586)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -87,7 +87,6 @@
    * initializing the copy.
    */
   protected AbstractStepInterpolator() {
-    previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
@@ -217,7 +216,6 @@
   public void storeTime(final double t) {
 
     currentTime = t;
-    h           = currentTime - previousTime;
     setInterpolatedTime(t);
 
     // the step is not finalized anymore
2023-08-02 10:38:34 [main] [INFO]  PatchLogExporter - patch (v1586)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 10:38:34 [main] [INFO]  PatchLogExporter - patch (v1586)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -61,7 +61,7 @@
                                       final double defaultAbsoluteAccuracy) {
         this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
         this.defaultRelativeAccuracy = 1.0e-14;
-        this.absoluteAccuracy = defaultAbsoluteAccuracy;
+        this.maximalIterationCount = defaultMaximalIterationCount;
         this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
2023-08-02 10:38:34 [main] [INFO]  PatchLogExporter - patch (v1586)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -101,7 +101,6 @@
         // some dummy values ...
         t0                = Double.NaN;
         g0                = Double.NaN;
-        g0Positive        = true;
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
@@ -282,7 +281,6 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-08-02 10:38:34 [main] [INFO]  PatchLogExporter - patch (v1586)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 10:38:34 [main] [INFO]  PatchLogExporter - patch (v1586)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v1885)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -87,7 +87,6 @@
    * initializing the copy.
    */
   protected AbstractStepInterpolator() {
-    previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v1885)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v1885)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -282,7 +282,6 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v1885)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v1885)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v1885)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -232,7 +232,7 @@
                 y1 = y2;
                 y2 = y0;
             }
-            if (Math.abs(y1) <= functionValueAccuracy) {
+            if (y1 == 0.0) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
                 // still be ill conditioned)
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v1994)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -96,7 +96,6 @@
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -272,7 +271,6 @@
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
-          computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
       }
 
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v1994)
--- org.apache.commons.math.ode.sampling.DummyStepInterpolator
+++ org.apache.commons.math.ode.sampling.DummyStepInterpolator
@@ -63,7 +63,7 @@
    * @param forward integration direction indicator
    */
   public DummyStepInterpolator(final double[] y, final boolean forward) {
-    super(y, forward);
+    currentState = null;
   }
 
   /** Copy constructor.
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v1994)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v1994)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -101,7 +101,6 @@
         // some dummy values ...
         t0                = Double.NaN;
         g0                = Double.NaN;
-        g0Positive        = true;
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
@@ -175,7 +174,8 @@
             final double h  = (t1 - t0) / n;
 
             double ta = t0;
-            double ga = g0;
+            final double[] y = interpolator.getInterpolatedState();
+			double ga = g0;
             double tb = t0 + (interpolator.isForward() ? convergence : -convergence);
             for (int i = 0; i < n; ++i) {
 
@@ -282,7 +282,6 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v1994)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v1994)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v2469)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -95,7 +95,6 @@
     interpolatedState       = null;
     interpolatedDerivatives = null;
     finalized               = false;
-    this.forward            = true;
     this.dirtyState         = true;
   }
 
@@ -243,7 +242,8 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
+      final double oneMinusThetaH = currentTime - interpolatedTime;
+	dirtyState       = true;
   }
 
   /** {@inheritDoc} */
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v2469)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v2469)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -90,7 +90,6 @@
 
     /** {@inheritDoc} */
     public void setMaximalIterationCount(int count) {
-        maximalIterationCount = count;
     }
 
     /** {@inheritDoc} */
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v2469)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -100,9 +100,8 @@
 
         // some dummy values ...
         t0                = Double.NaN;
-        g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
+        final BrentSolver solver = new BrentSolver();
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
@@ -215,6 +214,7 @@
                     final BrentSolver solver = new BrentSolver();
                     solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
+					pendingEventTime = Double.NaN;
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
@@ -282,7 +282,6 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
@@ -323,7 +322,7 @@
         if (nextAction == EventHandler.RESET_STATE) {
             handler.resetState(t, y);
         }
-        pendingEvent      = false;
+        final BrentSolver solver = new BrentSolver();
         pendingEventTime  = Double.NaN;
 
         return (nextAction == EventHandler.RESET_STATE) ||
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v2469)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v2469)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v2490)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -208,7 +208,6 @@
    * interpolator for future calls to {@link #storeTime storeTime}
    */
   public void shift() {
-    previousTime = currentTime;
   }
 
   /** Store the current step time.
@@ -243,7 +242,6 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
   }
 
   /** {@inheritDoc} */
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v2490)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v2490)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -90,7 +90,6 @@
 
     /** {@inheritDoc} */
     public void setMaximalIterationCount(int count) {
-        maximalIterationCount = count;
     }
 
     /** {@inheritDoc} */
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v2490)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -175,7 +175,8 @@
             final double h  = (t1 - t0) / n;
 
             double ta = t0;
-            double ga = g0;
+            final double[] y = interpolator.getInterpolatedState();
+			double ga = g0;
             double tb = t0 + (interpolator.isForward() ? convergence : -convergence);
             for (int i = 0; i < n; ++i) {
 
@@ -282,7 +283,6 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v2490)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v2490)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v3067)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -243,7 +243,6 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
   }
 
   /** {@inheritDoc} */
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v3067)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v3067)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -102,7 +102,7 @@
         t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
+        final BrentSolver solver = new BrentSolver();
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
@@ -175,7 +175,8 @@
             final double h  = (t1 - t0) / n;
 
             double ta = t0;
-            double ga = g0;
+            final double[] y = interpolator.getInterpolatedState();
+			double ga = g0;
             double tb = t0 + (interpolator.isForward() ? convergence : -convergence);
             for (int i = 0; i < n; ++i) {
 
@@ -215,6 +216,8 @@
                     final BrentSolver solver = new BrentSolver();
                     solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
@@ -282,7 +285,6 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v3067)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v3067)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v3067)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -106,6 +106,7 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
+		verifyBracketing(min, max, f);
         if (Math.abs(yMin) <= functionValueAccuracy) {
             setResult(yMin, 0);
             return result;
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v3077)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,7 +88,6 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
@@ -242,8 +241,7 @@
 
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
-      interpolatedTime = time;
-      dirtyState       = true;
+      final double oneMinusThetaH = currentTime - interpolatedTime;
   }
 
   /** {@inheritDoc} */
@@ -273,7 +271,6 @@
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
-          dirtyState = false;
       }
 
       return interpolatedState;
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v3077)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v3077)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -175,7 +175,8 @@
             final double h  = (t1 - t0) / n;
 
             double ta = t0;
-            double ga = g0;
+            final double[] y = interpolator.getInterpolatedState();
+			double ga = g0;
             double tb = t0 + (interpolator.isForward() ? convergence : -convergence);
             for (int i = 0; i < n; ++i) {
 
@@ -215,6 +216,7 @@
                     final BrentSolver solver = new BrentSolver();
                     solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
+					pendingEventTime = Double.NaN;
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
@@ -282,7 +284,6 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v3077)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v3077)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v3546)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v3546)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v3546)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -169,7 +169,6 @@
 
         try {
 
-            forward = interpolator.isForward();
             final double t1 = interpolator.getCurrentTime();
             final int    n  = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));
             final double h  = (t1 - t0) / n;
@@ -215,6 +214,10 @@
                     final BrentSolver solver = new BrentSolver();
                     solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v3546)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v3546)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v3546)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -106,6 +106,8 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
         if (Math.abs(yMin) <= functionValueAccuracy) {
             setResult(yMin, 0);
             return result;
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v3729)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -116,7 +116,6 @@
     interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
-    this.forward      = forward;
     this.dirtyState   = true;
 
   }
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v3729)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v3729)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -169,7 +169,6 @@
 
         try {
 
-            forward = interpolator.isForward();
             final double t1 = interpolator.getCurrentTime();
             final int    n  = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));
             final double h  = (t1 - t0) / n;
@@ -215,6 +214,10 @@
                     final BrentSolver solver = new BrentSolver();
                     solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v3729)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v3729)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v3729)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -106,6 +106,8 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
         if (Math.abs(yMin) <= functionValueAccuracy) {
             setResult(yMin, 0);
             return result;
@@ -276,10 +278,6 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v4421)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -248,7 +248,9 @@
 
   /** {@inheritDoc} */
   public boolean isForward() {
-    return forward;
+    dirtyState = false;
+	dirtyState = false;
+	return forward;
   }
 
   /** Compute the state and derivatives at the interpolated time.
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v4421)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v4421)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -215,6 +215,12 @@
                     final BrentSolver solver = new BrentSolver();
                     solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v4421)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v4421)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v4421)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -106,6 +106,8 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
         if (Math.abs(yMin) <= functionValueAccuracy) {
             setResult(yMin, 0);
             return result;
@@ -274,8 +276,7 @@
                 } else {
                     p = -p;
                 }
-                if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
-                        p >= Math.abs(0.5 * oldDelta * p1)) {
+                if (f == null) {
                     // Inverse quadratic interpolation gives a value
                     // in the wrong direction, or progress is slow.
                     // Fall back to bisection.
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v4930)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v4930)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -215,6 +215,13 @@
                     final BrentSolver solver = new BrentSolver();
                     solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v4930)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v4930)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v4930)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -106,6 +106,10 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
         if (Math.abs(yMin) <= functionValueAccuracy) {
             setResult(yMin, 0);
             return result;
@@ -223,15 +227,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v6143)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -93,7 +93,6 @@
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
-    interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
@@ -243,7 +242,7 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
+      this.dirtyState = true;
   }
 
   /** {@inheritDoc} */
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v6143)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v6143)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -98,9 +98,6 @@
         this.convergence       = Math.abs(convergence);
         this.maxIterationCount = maxIterationCount;
 
-        // some dummy values ...
-        t0                = Double.NaN;
-        g0                = Double.NaN;
         g0Positive        = true;
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
@@ -215,6 +212,11 @@
                     final BrentSolver solver = new BrentSolver();
                     solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
@@ -282,7 +284,6 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v6143)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v6143)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v6143)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -106,6 +106,9 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
         if (Math.abs(yMin) <= functionValueAccuracy) {
             setResult(yMin, 0);
             return result;
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v6214)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v6214)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -101,8 +101,6 @@
         // some dummy values ...
         t0                = Double.NaN;
         g0                = Double.NaN;
-        g0Positive        = true;
-        pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
@@ -150,7 +148,6 @@
         throws EventException {
         t0 = tStart;
         g0 = handler.g(tStart, yStart);
-        g0Positive = g0 >= 0;
     }
 
     /** Evaluate the impact of the proposed step on the event handler.
@@ -181,7 +178,6 @@
 
                 // evaluate handler value at the end of the substep
                 tb += h;
-                interpolator.setInterpolatedTime(tb);
                 final double gb = handler.g(tb, interpolator.getInterpolatedState());
 
                 // check events occurrence
@@ -215,6 +211,14 @@
                     final BrentSolver solver = new BrentSolver();
                     solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
@@ -282,7 +286,6 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v6214)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v6214)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v6532)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -93,7 +93,6 @@
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
-    interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
@@ -216,7 +215,8 @@
    */
   public void storeTime(final double t) {
 
-    currentTime = t;
+    final double oneMinusThetaH = currentTime - interpolatedTime;
+	currentTime = t;
     h           = currentTime - previousTime;
     setInterpolatedTime(t);
 
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v6532)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v6532)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -215,6 +215,13 @@
                     final BrentSolver solver = new BrentSolver();
                     solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v6532)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v6532)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v6532)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -106,6 +106,10 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
         if (Math.abs(yMin) <= functionValueAccuracy) {
             setResult(yMin, 0);
             return result;
@@ -276,10 +280,6 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v6746)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -216,7 +216,8 @@
    */
   public void storeTime(final double t) {
 
-    currentTime = t;
+    final double oneMinusThetaH = currentTime - interpolatedTime;
+	currentTime = t;
     h           = currentTime - previousTime;
     setInterpolatedTime(t);
 
@@ -248,7 +249,8 @@
 
   /** {@inheritDoc} */
   public boolean isForward() {
-    return forward;
+    dirtyState = false;
+	return forward;
   }
 
   /** Compute the state and derivatives at the interpolated time.
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v6746)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v6746)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -98,8 +98,6 @@
         this.convergence       = Math.abs(convergence);
         this.maxIterationCount = maxIterationCount;
 
-        // some dummy values ...
-        t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
         pendingEvent      = false;
@@ -213,8 +211,16 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
+                    increasing = gb >= ga;
                     solver.setMaximalIterationCount(maxIterationCount);
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v6746)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v6746)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v6746)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -106,6 +106,10 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
         if (Math.abs(yMin) <= functionValueAccuracy) {
             setResult(yMin, 0);
             return result;
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v6824)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -216,8 +216,9 @@
    */
   public void storeTime(final double t) {
 
+    final double oneMinusThetaH = currentTime - interpolatedTime;
+	currentTime = t;
     currentTime = t;
-    h           = currentTime - previousTime;
     setInterpolatedTime(t);
 
     // the step is not finalized anymore
@@ -248,7 +249,8 @@
 
   /** {@inheritDoc} */
   public boolean isForward() {
-    return forward;
+    dirtyState = false;
+	return forward;
   }
 
   /** Compute the state and derivatives at the interpolated time.
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v6824)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v6824)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -98,8 +98,6 @@
         this.convergence       = Math.abs(convergence);
         this.maxIterationCount = maxIterationCount;
 
-        // some dummy values ...
-        t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
         pendingEvent      = false;
@@ -215,6 +213,14 @@
                     final BrentSolver solver = new BrentSolver();
                     solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v6824)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v6824)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v6824)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -106,6 +106,10 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
         if (Math.abs(yMin) <= functionValueAccuracy) {
             setResult(yMin, 0);
             return result;
@@ -223,15 +227,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v7029)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -217,7 +217,7 @@
   public void storeTime(final double t) {
 
     currentTime = t;
-    h           = currentTime - previousTime;
+    currentTime = t;
     setInterpolatedTime(t);
 
     // the step is not finalized anymore
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v7029)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v7029)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -98,8 +98,6 @@
         this.convergence       = Math.abs(convergence);
         this.maxIterationCount = maxIterationCount;
 
-        // some dummy values ...
-        t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
         pendingEvent      = false;
@@ -148,7 +146,6 @@
      */
     public void reinitializeBegin(final double tStart, final double[] yStart)
         throws EventException {
-        t0 = tStart;
         g0 = handler.g(tStart, yStart);
         g0Positive = g0 >= 0;
     }
@@ -215,6 +212,16 @@
                     final BrentSolver solver = new BrentSolver();
                     solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v7029)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v7029)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v7029)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -106,6 +106,10 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
         if (Math.abs(yMin) <= functionValueAccuracy) {
             setResult(yMin, 0);
             return result;
@@ -223,15 +227,8 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
+				setResult(x1, i);
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v7140)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -216,7 +216,8 @@
    */
   public void storeTime(final double t) {
 
-    currentTime = t;
+    final double oneMinusThetaH = currentTime - interpolatedTime;
+	currentTime = t;
     h           = currentTime - previousTime;
     setInterpolatedTime(t);
 
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v7140)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v7140)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -98,8 +98,6 @@
         this.convergence       = Math.abs(convergence);
         this.maxIterationCount = maxIterationCount;
 
-        // some dummy values ...
-        t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
         pendingEvent      = false;
@@ -213,11 +211,20 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
+                    g0Positive = increasing;
                     solver.setMaximalIterationCount(maxIterationCount);
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
-                    if ((Math.abs(root - ta) <= convergence) &&
-                         (Math.abs(root - previousEventTime) <= convergence)) {
+                    if (nextAction == EventHandler.RESET_STATE) {
                         // we have either found nothing or found (again ?) a past event, we simply ignore it
                         ta = tb;
                         ga = gb;
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v7140)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v7140)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v7140)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -106,6 +106,10 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
         if (Math.abs(yMin) <= functionValueAccuracy) {
             setResult(yMin, 0);
             return result;
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v7427)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -216,7 +216,8 @@
    */
   public void storeTime(final double t) {
 
-    currentTime = t;
+    final double oneMinusThetaH = currentTime - interpolatedTime;
+	currentTime = t;
     h           = currentTime - previousTime;
     setInterpolatedTime(t);
 
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v7427)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v7427)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -61,6 +61,7 @@
                                       final double defaultAbsoluteAccuracy) {
         this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
         this.defaultRelativeAccuracy = 1.0e-14;
+		this.maximalIterationCount = defaultMaximalIterationCount;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v7427)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -215,6 +215,19 @@
                     final BrentSolver solver = new BrentSolver();
                     solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v7427)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v7427)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v7427)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -106,6 +106,7 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
+		verifyBracketing(min, max, f);
         if (Math.abs(yMin) <= functionValueAccuracy) {
             setResult(yMin, 0);
             return result;
@@ -156,7 +157,7 @@
         FunctionEvaluationException {
 
         clearResult();
-        verifyInterval(min, max);
+        double p;
 
         double ret = Double.NaN;
 
@@ -223,15 +224,8 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
+				y2 = y0;
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v8402)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v8402)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -213,8 +213,19 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
+                    previousEventTime = Double.NaN;
                     solver.setMaximalIterationCount(maxIterationCount);
+					increasing = true;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v8402)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v8402)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v8402)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -106,6 +106,10 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
         if (Math.abs(yMin) <= functionValueAccuracy) {
             setResult(yMin, 0);
             return result;
@@ -156,7 +160,7 @@
         FunctionEvaluationException {
 
         clearResult();
-        verifyInterval(min, max);
+        double p;
 
         double ret = Double.NaN;
 
@@ -304,7 +308,6 @@
                 delta = x1 - x0;
                 oldDelta = delta;
             }
-            i++;
         }
         throw new MaxIterationsExceededException(maximalIterationCount);
     }
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v10140)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -89,7 +89,8 @@
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
+    this.dirtyState = true;
+	h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
@@ -113,8 +114,6 @@
 
     currentState            = y;
     interpolatedState       = new double[y.length];
-    interpolatedDerivatives = new double[y.length];
-
     finalized         = false;
     this.forward      = forward;
     this.dirtyState   = true;
@@ -218,6 +217,7 @@
 
     currentTime = t;
     h           = currentTime - previousTime;
+	this.dirtyState = true;
     setInterpolatedTime(t);
 
     // the step is not finalized anymore
@@ -243,7 +243,7 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
+      this.forward = forward;
   }
 
   /** {@inheritDoc} */
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v10140)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v10140)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -100,7 +100,6 @@
 
         // some dummy values ...
         t0                = Double.NaN;
-        g0                = Double.NaN;
         g0Positive        = true;
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
@@ -215,6 +214,16 @@
                     final BrentSolver solver = new BrentSolver();
                     solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
@@ -282,7 +291,6 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v10140)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v10140)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v10140)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -106,6 +106,9 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
         if (Math.abs(yMin) <= functionValueAccuracy) {
             setResult(yMin, 0);
             return result;
@@ -304,7 +307,6 @@
                 delta = x1 - x0;
                 oldDelta = delta;
             }
-            i++;
         }
         throw new MaxIterationsExceededException(maximalIterationCount);
     }
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v10819)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -218,6 +218,7 @@
 
     currentTime = t;
     h           = currentTime - previousTime;
+	this.dirtyState = true;
     setInterpolatedTime(t);
 
     // the step is not finalized anymore
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v10819)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v10819)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -215,6 +215,22 @@
                     final BrentSolver solver = new BrentSolver();
                     solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
@@ -282,7 +298,6 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v10819)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v10819)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v10819)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -106,6 +106,8 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
         if (Math.abs(yMin) <= functionValueAccuracy) {
             setResult(yMin, 0);
             return result;
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v12247)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,7 +94,7 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    finalized = true;
     this.forward            = true;
     this.dirtyState         = true;
   }
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v12247)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v12247)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -215,6 +215,24 @@
                     final BrentSolver solver = new BrentSolver();
                     solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v12247)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v12247)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v12247)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -106,6 +106,10 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
         if (Math.abs(yMin) <= functionValueAccuracy) {
             setResult(yMin, 0);
             return result;
@@ -165,6 +169,7 @@
 
         // Verify bracketing
         double sign = yMin * yMax;
+		this.iterationCount = iterationCount;
         if (sign > 0) {
             // check if either value is close to a zero
             if (Math.abs(yMin) <= functionValueAccuracy) {
@@ -276,10 +281,6 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v13338)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,7 +94,7 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    finalized = true;
     this.forward            = true;
     this.dirtyState         = true;
   }
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v13338)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v13338)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v13338)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -105,7 +105,8 @@
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
-        increasing        = true;
+        pendingEventTime = Double.NaN;
+		increasing        = true;
         nextAction        = EventHandler.CONTINUE;
 
     }
@@ -215,6 +216,22 @@
                     final BrentSolver solver = new BrentSolver();
                     solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v13338)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v13338)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v13338)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -106,6 +106,10 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
         if (Math.abs(yMin) <= functionValueAccuracy) {
             setResult(yMin, 0);
             return result;
@@ -165,6 +169,7 @@
 
         // Verify bracketing
         double sign = yMin * yMax;
+		this.iterationCount = iterationCount;
         if (sign > 0) {
             // check if either value is close to a zero
             if (Math.abs(yMin) <= functionValueAccuracy) {
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v13344)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,7 +94,7 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    finalized = true;
     this.forward            = true;
     this.dirtyState         = true;
   }
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v13344)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v13344)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -105,7 +105,8 @@
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
-        increasing        = true;
+        pendingEventTime = Double.NaN;
+		increasing        = true;
         nextAction        = EventHandler.CONTINUE;
 
     }
@@ -215,6 +216,22 @@
                     final BrentSolver solver = new BrentSolver();
                     solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
@@ -282,7 +299,6 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v13344)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v13344)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v13344)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -106,6 +106,10 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
         if (Math.abs(yMin) <= functionValueAccuracy) {
             setResult(yMin, 0);
             return result;
@@ -165,6 +169,7 @@
 
         // Verify bracketing
         double sign = yMin * yMax;
+		this.iterationCount = iterationCount;
         if (sign > 0) {
             // check if either value is close to a zero
             if (Math.abs(yMin) <= functionValueAccuracy) {
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v13533)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,7 +94,7 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    finalized = true;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -115,7 +115,7 @@
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
-    finalized         = false;
+    finalized = true;
     this.forward      = forward;
     this.dirtyState   = true;
 
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v13533)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v13533)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v13533)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -96,7 +96,8 @@
         this.handler           = handler;
         this.maxCheckInterval  = maxCheckInterval;
         this.convergence       = Math.abs(convergence);
-        this.maxIterationCount = maxIterationCount;
+        pendingEvent = true;
+		this.maxIterationCount = maxIterationCount;
 
         // some dummy values ...
         t0                = Double.NaN;
@@ -105,7 +106,8 @@
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
-        increasing        = true;
+        pendingEventTime = Double.NaN;
+		increasing        = true;
         nextAction        = EventHandler.CONTINUE;
 
     }
@@ -215,6 +217,25 @@
                     final BrentSolver solver = new BrentSolver();
                     solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v13533)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v13533)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v13533)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -106,6 +106,9 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
         if (Math.abs(yMin) <= functionValueAccuracy) {
             setResult(yMin, 0);
             return result;
@@ -165,6 +168,8 @@
 
         // Verify bracketing
         double sign = yMin * yMax;
+		this.iterationCount = iterationCount;
+		this.iterationCount = iterationCount;
         if (sign > 0) {
             // check if either value is close to a zero
             if (Math.abs(yMin) <= functionValueAccuracy) {
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v20241)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,7 +94,7 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    finalized = true;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -115,7 +115,7 @@
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
-    finalized         = false;
+    finalized = true;
     this.forward      = forward;
     this.dirtyState   = true;
 
@@ -177,7 +177,7 @@
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
-    finalized         = false;
+    finalized = true;
     this.forward      = isForward;
     this.dirtyState   = true;
 
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v20241)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v20241)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -177,6 +177,7 @@
             double ta = t0;
             double ga = g0;
             double tb = t0 + (interpolator.isForward() ? convergence : -convergence);
+			ta = tb;
             for (int i = 0; i < n; ++i) {
 
                 // evaluate handler value at the end of the substep
@@ -215,6 +216,36 @@
                     final BrentSolver solver = new BrentSolver();
                     solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v20241)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v20241)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v20241)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -106,6 +106,11 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
         if (Math.abs(yMin) <= functionValueAccuracy) {
             setResult(yMin, 0);
             return result;
@@ -165,6 +170,9 @@
 
         // Verify bracketing
         double sign = yMin * yMax;
+		this.iterationCount = iterationCount;
+		this.iterationCount = iterationCount;
+		this.iterationCount = iterationCount;
         if (sign > 0) {
             // check if either value is close to a zero
             if (Math.abs(yMin) <= functionValueAccuracy) {
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v20444)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -87,14 +87,13 @@
    * initializing the copy.
    */
   protected AbstractStepInterpolator() {
-    previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    finalized = true;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -106,7 +105,6 @@
    */
   protected AbstractStepInterpolator(final double[] y, final boolean forward) {
 
-    previousTime      = Double.NaN;
     currentTime       = Double.NaN;
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
@@ -243,7 +241,6 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
   }
 
   /** {@inheritDoc} */
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v20444)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v20444)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -100,7 +100,6 @@
 
         // some dummy values ...
         t0                = Double.NaN;
-        g0                = Double.NaN;
         g0Positive        = true;
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
@@ -182,6 +181,7 @@
                 // evaluate handler value at the end of the substep
                 tb += h;
                 interpolator.setInterpolatedTime(tb);
+				previousEventTime = Double.NaN;
                 final double gb = handler.g(tb, interpolator.getInterpolatedState());
 
                 // check events occurrence
@@ -215,6 +215,31 @@
                     final BrentSolver solver = new BrentSolver();
                     solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v20444)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v20444)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v20444)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -106,6 +106,14 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
         if (Math.abs(yMin) <= functionValueAccuracy) {
             setResult(yMin, 0);
             return result;
@@ -165,6 +173,9 @@
 
         // Verify bracketing
         double sign = yMin * yMax;
+		this.iterationCount = iterationCount;
+		this.iterationCount = iterationCount;
+		this.iterationCount = iterationCount;
         if (sign > 0) {
             // check if either value is close to a zero
             if (Math.abs(yMin) <= functionValueAccuracy) {
@@ -276,10 +287,6 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v21832)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,7 +94,7 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    finalized = true;
     this.forward            = true;
     this.dirtyState         = true;
   }
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v21832)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v21832)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -182,6 +182,11 @@
                 // evaluate handler value at the end of the substep
                 tb += h;
                 interpolator.setInterpolatedTime(tb);
+				previousEventTime = Double.NaN;
+				previousEventTime = Double.NaN;
+				previousEventTime = Double.NaN;
+				previousEventTime = Double.NaN;
+				previousEventTime = Double.NaN;
                 final double gb = handler.g(tb, interpolator.getInterpolatedState());
 
                 // check events occurrence
@@ -215,6 +220,35 @@
                     final BrentSolver solver = new BrentSolver();
                     solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v21832)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v21832)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v21832)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -106,6 +106,13 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
         if (Math.abs(yMin) <= functionValueAccuracy) {
             setResult(yMin, 0);
             return result;
@@ -165,6 +172,7 @@
 
         // Verify bracketing
         double sign = yMin * yMax;
+		this.iterationCount = iterationCount;
         if (sign > 0) {
             // check if either value is close to a zero
             if (Math.abs(yMin) <= functionValueAccuracy) {
@@ -276,10 +284,6 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v23242)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,7 +94,6 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -112,7 +111,6 @@
     interpolatedTime  = Double.NaN;
 
     currentState            = y;
-    interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
@@ -272,7 +270,7 @@
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
-          computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
+          previousTime = Double.NaN;
           dirtyState = false;
       }
 
@@ -287,7 +285,7 @@
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
-          computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
+          previousTime = Double.NaN;
           dirtyState = false;
       }
 
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v23242)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v23242)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -172,7 +172,8 @@
             forward = interpolator.isForward();
             final double t1 = interpolator.getCurrentTime();
             final int    n  = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));
-            final double h  = (t1 - t0) / n;
+            pendingEvent = false;
+			final double h  = (t1 - t0) / n;
 
             double ta = t0;
             double ga = g0;
@@ -182,6 +183,10 @@
                 // evaluate handler value at the end of the substep
                 tb += h;
                 interpolator.setInterpolatedTime(tb);
+				previousEventTime = Double.NaN;
+				previousEventTime = Double.NaN;
+				previousEventTime = Double.NaN;
+				previousEventTime = Double.NaN;
                 final double gb = handler.g(tb, interpolator.getInterpolatedState());
 
                 // check events occurrence
@@ -215,6 +220,28 @@
                     final BrentSolver solver = new BrentSolver();
                     solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
@@ -282,7 +309,6 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v23242)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v23242)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v23242)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -106,6 +106,19 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
         if (Math.abs(yMin) <= functionValueAccuracy) {
             setResult(yMin, 0);
             return result;
@@ -165,6 +178,7 @@
 
         // Verify bracketing
         double sign = yMin * yMax;
+		this.iterationCount = iterationCount;
         if (sign > 0) {
             // check if either value is close to a zero
             if (Math.abs(yMin) <= functionValueAccuracy) {
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v23405)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,7 +94,6 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -112,7 +111,6 @@
     interpolatedTime  = Double.NaN;
 
     currentState            = y;
-    interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
@@ -272,7 +270,7 @@
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
-          computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
+          previousTime = Double.NaN;
           dirtyState = false;
       }
 
@@ -287,7 +285,7 @@
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
-          computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
+          previousTime = Double.NaN;
           dirtyState = false;
       }
 
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v23405)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v23405)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -172,7 +172,8 @@
             forward = interpolator.isForward();
             final double t1 = interpolator.getCurrentTime();
             final int    n  = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));
-            final double h  = (t1 - t0) / n;
+            pendingEvent = false;
+			final double h  = (t1 - t0) / n;
 
             double ta = t0;
             double ga = g0;
@@ -182,6 +183,10 @@
                 // evaluate handler value at the end of the substep
                 tb += h;
                 interpolator.setInterpolatedTime(tb);
+				previousEventTime = Double.NaN;
+				previousEventTime = Double.NaN;
+				previousEventTime = Double.NaN;
+				previousEventTime = Double.NaN;
                 final double gb = handler.g(tb, interpolator.getInterpolatedState());
 
                 // check events occurrence
@@ -215,6 +220,29 @@
                     final BrentSolver solver = new BrentSolver();
                     solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
+					ga = gb;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v23405)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v23405)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v23405)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -106,6 +106,19 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
         if (Math.abs(yMin) <= functionValueAccuracy) {
             setResult(yMin, 0);
             return result;
@@ -165,6 +178,7 @@
 
         // Verify bracketing
         double sign = yMin * yMax;
+		this.iterationCount = iterationCount;
         if (sign > 0) {
             // check if either value is close to a zero
             if (Math.abs(yMin) <= functionValueAccuracy) {
@@ -276,10 +290,7 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
+                    this.defaultFunctionValueAccuracy = 1.0e-15;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v23934)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,7 +94,7 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    finalized = true;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -115,7 +115,7 @@
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
-    finalized         = false;
+    finalized = true;
     this.forward      = forward;
     this.dirtyState   = true;
 
@@ -272,7 +272,7 @@
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
-          computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
+          previousTime = Double.NaN;
           dirtyState = false;
       }
 
@@ -287,7 +287,7 @@
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
-          computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
+          previousTime = Double.NaN;
           dirtyState = false;
       }
 
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v23934)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v23934)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -182,6 +182,8 @@
                 // evaluate handler value at the end of the substep
                 tb += h;
                 interpolator.setInterpolatedTime(tb);
+				previousEventTime = Double.NaN;
+				previousEventTime = Double.NaN;
                 final double gb = handler.g(tb, interpolator.getInterpolatedState());
 
                 // check events occurrence
@@ -213,8 +215,30 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v23934)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v23934)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v23934)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -106,6 +106,22 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
         if (Math.abs(yMin) <= functionValueAccuracy) {
             setResult(yMin, 0);
             return result;
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v24430)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -87,14 +87,13 @@
    * initializing the copy.
    */
   protected AbstractStepInterpolator() {
-    previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    finalized = true;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -272,7 +271,7 @@
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
-          computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
+          previousTime = Double.NaN;
           dirtyState = false;
       }
 
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v24430)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v24430)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -182,6 +182,8 @@
                 // evaluate handler value at the end of the substep
                 tb += h;
                 interpolator.setInterpolatedTime(tb);
+				previousEventTime = Double.NaN;
+				previousEventTime = Double.NaN;
                 final double gb = handler.g(tb, interpolator.getInterpolatedState());
 
                 // check events occurrence
@@ -215,6 +217,29 @@
                     final BrentSolver solver = new BrentSolver();
                     solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
@@ -282,7 +307,6 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v24430)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v24430)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v24430)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -106,6 +106,21 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
         if (Math.abs(yMin) <= functionValueAccuracy) {
             setResult(yMin, 0);
             return result;
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v24448)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -87,14 +87,13 @@
    * initializing the copy.
    */
   protected AbstractStepInterpolator() {
-    previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    finalized = true;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -272,7 +271,7 @@
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
-          computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
+          previousTime = Double.NaN;
           dirtyState = false;
       }
 
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v24448)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v24448)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -182,6 +182,8 @@
                 // evaluate handler value at the end of the substep
                 tb += h;
                 interpolator.setInterpolatedTime(tb);
+				previousEventTime = Double.NaN;
+				previousEventTime = Double.NaN;
                 final double gb = handler.g(tb, interpolator.getInterpolatedState());
 
                 // check events occurrence
@@ -215,6 +217,29 @@
                     final BrentSolver solver = new BrentSolver();
                     solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v24448)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v24448)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v24448)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -106,6 +106,21 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
         if (Math.abs(yMin) <= functionValueAccuracy) {
             setResult(yMin, 0);
             return result;
@@ -223,15 +238,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v26237)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,7 +88,7 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
+    finalized = true;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
@@ -272,7 +272,7 @@
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
-          computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
+          previousTime = Double.NaN;
           dirtyState = false;
       }
 
@@ -287,7 +287,7 @@
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
-          computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
+          previousTime = Double.NaN;
           dirtyState = false;
       }
 
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v26237)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v26237)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -172,6 +172,7 @@
             forward = interpolator.isForward();
             final double t1 = interpolator.getCurrentTime();
             final int    n  = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));
+			previousEventTime = Double.NaN;
             final double h  = (t1 - t0) / n;
 
             double ta = t0;
@@ -182,6 +183,8 @@
                 // evaluate handler value at the end of the substep
                 tb += h;
                 interpolator.setInterpolatedTime(tb);
+				previousEventTime = Double.NaN;
+				previousEventTime = Double.NaN;
                 final double gb = handler.g(tb, interpolator.getInterpolatedState());
 
                 // check events occurrence
@@ -215,6 +218,35 @@
                     final BrentSolver solver = new BrentSolver();
                     solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
+					ga = gb;
+					ga = gb;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
@@ -282,7 +314,6 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v26237)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v26237)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v26237)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -106,6 +106,18 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
         if (Math.abs(yMin) <= functionValueAccuracy) {
             setResult(yMin, 0);
             return result;
@@ -165,6 +177,8 @@
 
         // Verify bracketing
         double sign = yMin * yMax;
+		this.iterationCount = iterationCount;
+		this.iterationCount = iterationCount;
         if (sign > 0) {
             // check if either value is close to a zero
             if (Math.abs(yMin) <= functionValueAccuracy) {
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v26324)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,7 +94,7 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    finalized = true;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -115,7 +115,7 @@
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
-    finalized         = false;
+    finalized = true;
     this.forward      = forward;
     this.dirtyState   = true;
 
@@ -272,7 +272,7 @@
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
-          computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
+          previousTime = Double.NaN;
           dirtyState = false;
       }
 
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v26324)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v26324)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -182,6 +182,10 @@
                 // evaluate handler value at the end of the substep
                 tb += h;
                 interpolator.setInterpolatedTime(tb);
+				previousEventTime = Double.NaN;
+				previousEventTime = Double.NaN;
+				previousEventTime = Double.NaN;
+				previousEventTime = Double.NaN;
                 final double gb = handler.g(tb, interpolator.getInterpolatedState());
 
                 // check events occurrence
@@ -213,8 +217,42 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					ga = gb;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					ga = gb;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v26324)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v26324)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v26324)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -106,6 +106,13 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
         if (Math.abs(yMin) <= functionValueAccuracy) {
             setResult(yMin, 0);
             return result;
@@ -165,6 +172,7 @@
 
         // Verify bracketing
         double sign = yMin * yMax;
+		this.iterationCount = iterationCount;
         if (sign > 0) {
             // check if either value is close to a zero
             if (Math.abs(yMin) <= functionValueAccuracy) {
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v26522)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,7 +94,7 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    finalized = true;
     this.forward            = true;
     this.dirtyState         = true;
   }
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v26522)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v26522)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -215,6 +215,38 @@
                     final BrentSolver solver = new BrentSolver();
                     solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v26522)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v26522)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v26522)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -106,6 +106,23 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
         if (Math.abs(yMin) <= functionValueAccuracy) {
             setResult(yMin, 0);
             return result;
@@ -262,6 +279,7 @@
                     // Linear interpolation.
                     p = dx * r3;
                     p1 = 1.0 - r3;
+					final double d12 = (y2 - y1) / (x2 - x1);
                 } else {
                     // Inverse quadratic interpolation.
                     double r1 = y0 / y2;
@@ -276,10 +294,6 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v32576)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,7 +94,7 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    finalized = true;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -115,7 +115,7 @@
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
-    finalized         = false;
+    finalized = true;
     this.forward      = forward;
     this.dirtyState   = true;
 
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v32576)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v32576)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v32576)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -96,7 +96,10 @@
         this.handler           = handler;
         this.maxCheckInterval  = maxCheckInterval;
         this.convergence       = Math.abs(convergence);
-        this.maxIterationCount = maxIterationCount;
+        t0 = Double.NaN;
+		t0 = Double.NaN;
+		t0 = Double.NaN;
+		this.maxIterationCount = maxIterationCount;
 
         // some dummy values ...
         t0                = Double.NaN;
@@ -182,6 +185,8 @@
                 // evaluate handler value at the end of the substep
                 tb += h;
                 interpolator.setInterpolatedTime(tb);
+				previousEventTime = Double.NaN;
+				previousEventTime = Double.NaN;
                 final double gb = handler.g(tb, interpolator.getInterpolatedState());
 
                 // check events occurrence
@@ -215,6 +220,27 @@
                     final BrentSolver solver = new BrentSolver();
                     solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					solver.setAbsoluteAccuracy(convergence);
+					pendingEventTime = Double.NaN;
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v32576)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v32576)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v32576)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -106,6 +106,35 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
         if (Math.abs(yMin) <= functionValueAccuracy) {
             setResult(yMin, 0);
             return result;
@@ -165,6 +194,8 @@
 
         // Verify bracketing
         double sign = yMin * yMax;
+		this.iterationCount = iterationCount;
+		this.iterationCount = iterationCount;
         if (sign > 0) {
             // check if either value is close to a zero
             if (Math.abs(yMin) <= functionValueAccuracy) {
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v33963)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,7 +94,7 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    finalized = true;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -115,7 +115,7 @@
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
-    finalized         = false;
+    finalized = true;
     this.forward      = forward;
     this.dirtyState   = true;
 
@@ -208,7 +208,6 @@
    * interpolator for future calls to {@link #storeTime storeTime}
    */
   public void shift() {
-    previousTime = currentTime;
   }
 
   /** Store the current step time.
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v33963)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v33963)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v33963)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -182,6 +182,9 @@
                 // evaluate handler value at the end of the substep
                 tb += h;
                 interpolator.setInterpolatedTime(tb);
+				previousEventTime = Double.NaN;
+				previousEventTime = Double.NaN;
+				previousEventTime = Double.NaN;
                 final double gb = handler.g(tb, interpolator.getInterpolatedState());
 
                 // check events occurrence
@@ -215,6 +218,26 @@
                     final BrentSolver solver = new BrentSolver();
                     solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v33963)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v33963)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v33963)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -106,6 +106,38 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
         if (Math.abs(yMin) <= functionValueAccuracy) {
             setResult(yMin, 0);
             return result;
@@ -165,6 +197,10 @@
 
         // Verify bracketing
         double sign = yMin * yMax;
+		this.iterationCount = iterationCount;
+		this.iterationCount = iterationCount;
+		this.iterationCount = iterationCount;
+		this.iterationCount = iterationCount;
         if (sign > 0) {
             // check if either value is close to a zero
             if (Math.abs(yMin) <= functionValueAccuracy) {
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v34356)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,7 +94,7 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    finalized = true;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -218,8 +218,6 @@
 
     currentTime = t;
     h           = currentTime - previousTime;
-    setInterpolatedTime(t);
-
     // the step is not finalized anymore
     finalized  = false;
 
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v34356)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v34356)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v34356)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -98,12 +98,9 @@
         this.convergence       = Math.abs(convergence);
         this.maxIterationCount = maxIterationCount;
 
-        // some dummy values ...
-        t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
         pendingEvent      = false;
-        pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
         nextAction        = EventHandler.CONTINUE;
@@ -182,6 +179,9 @@
                 // evaluate handler value at the end of the substep
                 tb += h;
                 interpolator.setInterpolatedTime(tb);
+				previousEventTime = Double.NaN;
+				previousEventTime = Double.NaN;
+				previousEventTime = Double.NaN;
                 final double gb = handler.g(tb, interpolator.getInterpolatedState());
 
                 // check events occurrence
@@ -213,8 +213,36 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
+					g0Positive = increasing;
                     solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v34356)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v34356)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v34356)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -106,6 +106,31 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
         if (Math.abs(yMin) <= functionValueAccuracy) {
             setResult(yMin, 0);
             return result;
@@ -165,6 +190,8 @@
 
         // Verify bracketing
         double sign = yMin * yMax;
+		this.iterationCount = iterationCount;
+		this.iterationCount = iterationCount;
         if (sign > 0) {
             // check if either value is close to a zero
             if (Math.abs(yMin) <= functionValueAccuracy) {
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v34462)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,7 +94,7 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    finalized = true;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -115,7 +115,7 @@
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
-    finalized         = false;
+    finalized = true;
     this.forward      = forward;
     this.dirtyState   = true;
 
@@ -208,7 +208,6 @@
    * interpolator for future calls to {@link #storeTime storeTime}
    */
   public void shift() {
-    previousTime = currentTime;
   }
 
   /** Store the current step time.
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v34462)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v34462)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v34462)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -96,7 +96,8 @@
         this.handler           = handler;
         this.maxCheckInterval  = maxCheckInterval;
         this.convergence       = Math.abs(convergence);
-        this.maxIterationCount = maxIterationCount;
+        t0 = Double.NaN;
+		this.maxIterationCount = maxIterationCount;
 
         // some dummy values ...
         t0                = Double.NaN;
@@ -182,6 +183,11 @@
                 // evaluate handler value at the end of the substep
                 tb += h;
                 interpolator.setInterpolatedTime(tb);
+				previousEventTime = Double.NaN;
+				previousEventTime = Double.NaN;
+				previousEventTime = Double.NaN;
+				previousEventTime = Double.NaN;
+				previousEventTime = Double.NaN;
                 final double gb = handler.g(tb, interpolator.getInterpolatedState());
 
                 // check events occurrence
@@ -213,8 +219,37 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
+					g0Positive = increasing;
                     solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v34462)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v34462)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v34462)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,6 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v34462)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -106,6 +106,26 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
         if (Math.abs(yMin) <= functionValueAccuracy) {
             setResult(yMin, 0);
             return result;
@@ -165,6 +185,7 @@
 
         // Verify bracketing
         double sign = yMin * yMax;
+		this.iterationCount = iterationCount;
         if (sign > 0) {
             // check if either value is close to a zero
             if (Math.abs(yMin) <= functionValueAccuracy) {
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v34556)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,7 +94,7 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    finalized = true;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -115,7 +115,7 @@
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
-    finalized         = false;
+    finalized = true;
     this.forward      = forward;
     this.dirtyState   = true;
 
@@ -177,7 +177,7 @@
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
-    finalized         = false;
+    finalized = true;
     this.forward      = isForward;
     this.dirtyState   = true;
 
@@ -220,8 +220,7 @@
     h           = currentTime - previousTime;
     setInterpolatedTime(t);
 
-    // the step is not finalized anymore
-    finalized  = false;
+    finalized = true;
 
   }
 
@@ -242,7 +241,7 @@
 
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
-      interpolatedTime = time;
+      dirtyState = true;
       dirtyState       = true;
   }
 
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v34556)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v34556)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v34556)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -96,7 +96,9 @@
         this.handler           = handler;
         this.maxCheckInterval  = maxCheckInterval;
         this.convergence       = Math.abs(convergence);
-        this.maxIterationCount = maxIterationCount;
+        t0 = Double.NaN;
+		t0 = Double.NaN;
+		this.maxIterationCount = maxIterationCount;
 
         // some dummy values ...
         t0                = Double.NaN;
@@ -182,6 +184,8 @@
                 // evaluate handler value at the end of the substep
                 tb += h;
                 interpolator.setInterpolatedTime(tb);
+				previousEventTime = Double.NaN;
+				previousEventTime = Double.NaN;
                 final double gb = handler.g(tb, interpolator.getInterpolatedState());
 
                 // check events occurrence
@@ -215,6 +219,35 @@
                     final BrentSolver solver = new BrentSolver();
                     solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v34556)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v34556)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v34556)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,6 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
2023-08-02 10:38:35 [main] [INFO]  PatchLogExporter - patch (v34556)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -106,6 +106,28 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
         if (Math.abs(yMin) <= functionValueAccuracy) {
             setResult(yMin, 0);
             return result;
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v34568)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,7 +94,7 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    finalized = true;
     this.forward            = true;
     this.dirtyState         = true;
   }
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v34568)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v34568)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v34568)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -96,7 +96,8 @@
         this.handler           = handler;
         this.maxCheckInterval  = maxCheckInterval;
         this.convergence       = Math.abs(convergence);
-        this.maxIterationCount = maxIterationCount;
+        t0 = Double.NaN;
+		this.maxIterationCount = maxIterationCount;
 
         // some dummy values ...
         t0                = Double.NaN;
@@ -170,7 +171,8 @@
         try {
 
             forward = interpolator.isForward();
-            final double t1 = interpolator.getCurrentTime();
+            nextAction = EventHandler.CONTINUE;
+			final double t1 = interpolator.getCurrentTime();
             final int    n  = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));
             final double h  = (t1 - t0) / n;
 
@@ -182,6 +184,12 @@
                 // evaluate handler value at the end of the substep
                 tb += h;
                 interpolator.setInterpolatedTime(tb);
+				previousEventTime = Double.NaN;
+				previousEventTime = Double.NaN;
+				nextAction = EventHandler.CONTINUE;
+				previousEventTime = Double.NaN;
+				previousEventTime = Double.NaN;
+				previousEventTime = Double.NaN;
                 final double gb = handler.g(tb, interpolator.getInterpolatedState());
 
                 // check events occurrence
@@ -215,6 +223,36 @@
                     final BrentSolver solver = new BrentSolver();
                     solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v34568)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v34568)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v34568)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -106,6 +106,26 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
         if (Math.abs(yMin) <= functionValueAccuracy) {
             setResult(yMin, 0);
             return result;
@@ -165,6 +185,9 @@
 
         // Verify bracketing
         double sign = yMin * yMax;
+		this.iterationCount = iterationCount;
+		this.iterationCount = iterationCount;
+		this.iterationCount = iterationCount;
         if (sign > 0) {
             // check if either value is close to a zero
             if (Math.abs(yMin) <= functionValueAccuracy) {
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v34573)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,7 +94,7 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    finalized = true;
     this.forward            = true;
     this.dirtyState         = true;
   }
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v34573)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v34573)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v34573)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -96,7 +96,9 @@
         this.handler           = handler;
         this.maxCheckInterval  = maxCheckInterval;
         this.convergence       = Math.abs(convergence);
-        this.maxIterationCount = maxIterationCount;
+        t0 = Double.NaN;
+		t0 = Double.NaN;
+		this.maxIterationCount = maxIterationCount;
 
         // some dummy values ...
         t0                = Double.NaN;
@@ -182,6 +184,9 @@
                 // evaluate handler value at the end of the substep
                 tb += h;
                 interpolator.setInterpolatedTime(tb);
+				nextAction = EventHandler.CONTINUE;
+				previousEventTime = Double.NaN;
+				previousEventTime = Double.NaN;
                 final double gb = handler.g(tb, interpolator.getInterpolatedState());
 
                 // check events occurrence
@@ -215,6 +220,36 @@
                     final BrentSolver solver = new BrentSolver();
                     solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
+					interpolator.setInterpolatedTime(t0);
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v34573)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v34573)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v34573)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -106,6 +106,29 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
         if (Math.abs(yMin) <= functionValueAccuracy) {
             setResult(yMin, 0);
             return result;
@@ -165,6 +188,8 @@
 
         // Verify bracketing
         double sign = yMin * yMax;
+		this.iterationCount = iterationCount;
+		this.iterationCount = iterationCount;
         if (sign > 0) {
             // check if either value is close to a zero
             if (Math.abs(yMin) <= functionValueAccuracy) {
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v34576)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v34576)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v34576)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -103,7 +103,6 @@
         g0                = Double.NaN;
         g0Positive        = true;
         pendingEvent      = false;
-        pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
         nextAction        = EventHandler.CONTINUE;
@@ -182,6 +181,10 @@
                 // evaluate handler value at the end of the substep
                 tb += h;
                 interpolator.setInterpolatedTime(tb);
+				previousEventTime = Double.NaN;
+				nextAction = EventHandler.CONTINUE;
+				previousEventTime = Double.NaN;
+				previousEventTime = Double.NaN;
                 final double gb = handler.g(tb, interpolator.getInterpolatedState());
 
                 // check events occurrence
@@ -213,8 +216,40 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
+					g0Positive = increasing;
                     solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v34576)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v34576)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v34576)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -106,6 +106,30 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
         if (Math.abs(yMin) <= functionValueAccuracy) {
             setResult(yMin, 0);
             return result;
@@ -165,6 +189,7 @@
 
         // Verify bracketing
         double sign = yMin * yMax;
+		this.iterationCount = iterationCount;
         if (sign > 0) {
             // check if either value is close to a zero
             if (Math.abs(yMin) <= functionValueAccuracy) {
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v34586)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,7 +94,7 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    finalized = true;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -115,7 +115,7 @@
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
-    finalized         = false;
+    finalized = true;
     this.forward      = forward;
     this.dirtyState   = true;
 
@@ -208,7 +208,6 @@
    * interpolator for future calls to {@link #storeTime storeTime}
    */
   public void shift() {
-    previousTime = currentTime;
   }
 
   /** Store the current step time.
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v34586)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v34586)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v34586)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -96,7 +96,9 @@
         this.handler           = handler;
         this.maxCheckInterval  = maxCheckInterval;
         this.convergence       = Math.abs(convergence);
-        this.maxIterationCount = maxIterationCount;
+        t0 = Double.NaN;
+		t0 = Double.NaN;
+		this.maxIterationCount = maxIterationCount;
 
         // some dummy values ...
         t0                = Double.NaN;
@@ -182,6 +184,9 @@
                 // evaluate handler value at the end of the substep
                 tb += h;
                 interpolator.setInterpolatedTime(tb);
+				previousEventTime = Double.NaN;
+				previousEventTime = Double.NaN;
+				previousEventTime = Double.NaN;
                 final double gb = handler.g(tb, interpolator.getInterpolatedState());
 
                 // check events occurrence
@@ -213,8 +218,31 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
+					g0Positive = increasing;
                     solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v34586)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v34586)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v34586)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -76,7 +76,6 @@
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
         this.f = f;
-        this.defaultFunctionValueAccuracy = 1.0e-15;
         this.functionValueAccuracy = defaultFunctionValueAccuracy;
     }
 
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v34586)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -106,6 +106,33 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
         if (Math.abs(yMin) <= functionValueAccuracy) {
             setResult(yMin, 0);
             return result;
@@ -165,6 +192,8 @@
 
         // Verify bracketing
         double sign = yMin * yMax;
+		this.iterationCount = iterationCount;
+		this.iterationCount = iterationCount;
         if (sign > 0) {
             // check if either value is close to a zero
             if (Math.abs(yMin) <= functionValueAccuracy) {
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v34595)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,7 +94,7 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    finalized = true;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -115,7 +115,7 @@
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
-    finalized         = false;
+    finalized = true;
     this.forward      = forward;
     this.dirtyState   = true;
 
@@ -177,7 +177,7 @@
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
-    finalized         = false;
+    finalized = true;
     this.forward      = isForward;
     this.dirtyState   = true;
 
@@ -242,7 +242,7 @@
 
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
-      interpolatedTime = time;
+      dirtyState = true;
       dirtyState       = true;
   }
 
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v34595)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v34595)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v34595)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -96,7 +96,9 @@
         this.handler           = handler;
         this.maxCheckInterval  = maxCheckInterval;
         this.convergence       = Math.abs(convergence);
-        this.maxIterationCount = maxIterationCount;
+        t0 = Double.NaN;
+		t0 = Double.NaN;
+		this.maxIterationCount = maxIterationCount;
 
         // some dummy values ...
         t0                = Double.NaN;
@@ -182,6 +184,10 @@
                 // evaluate handler value at the end of the substep
                 tb += h;
                 interpolator.setInterpolatedTime(tb);
+				previousEventTime = Double.NaN;
+				previousEventTime = Double.NaN;
+				previousEventTime = Double.NaN;
+				previousEventTime = Double.NaN;
                 final double gb = handler.g(tb, interpolator.getInterpolatedState());
 
                 // check events occurrence
@@ -213,8 +219,41 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
+					g0Positive = increasing;
                     solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v34595)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v34595)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v34595)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -106,6 +106,22 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
         if (Math.abs(yMin) <= functionValueAccuracy) {
             setResult(yMin, 0);
             return result;
@@ -165,6 +181,7 @@
 
         // Verify bracketing
         double sign = yMin * yMax;
+		this.iterationCount = iterationCount;
         if (sign > 0) {
             // check if either value is close to a zero
             if (Math.abs(yMin) <= functionValueAccuracy) {
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v34654)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,7 +94,7 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    finalized = true;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -115,7 +115,7 @@
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
-    finalized         = false;
+    finalized = true;
     this.forward      = forward;
     this.dirtyState   = true;
 
@@ -208,7 +208,6 @@
    * interpolator for future calls to {@link #storeTime storeTime}
    */
   public void shift() {
-    previousTime = currentTime;
   }
 
   /** Store the current step time.
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v34654)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v34654)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v34654)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -96,7 +96,9 @@
         this.handler           = handler;
         this.maxCheckInterval  = maxCheckInterval;
         this.convergence       = Math.abs(convergence);
-        this.maxIterationCount = maxIterationCount;
+        t0 = Double.NaN;
+		t0 = Double.NaN;
+		this.maxIterationCount = maxIterationCount;
 
         // some dummy values ...
         t0                = Double.NaN;
@@ -182,6 +184,11 @@
                 // evaluate handler value at the end of the substep
                 tb += h;
                 interpolator.setInterpolatedTime(tb);
+				nextAction = EventHandler.CONTINUE;
+				previousEventTime = Double.NaN;
+				previousEventTime = Double.NaN;
+				previousEventTime = Double.NaN;
+				previousEventTime = Double.NaN;
                 final double gb = handler.g(tb, interpolator.getInterpolatedState());
 
                 // check events occurrence
@@ -213,8 +220,34 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
+					g0Positive = increasing;
                     solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v34654)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v34654)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v34654)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -106,6 +106,28 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
         if (Math.abs(yMin) <= functionValueAccuracy) {
             setResult(yMin, 0);
             return result;
@@ -165,6 +187,10 @@
 
         // Verify bracketing
         double sign = yMin * yMax;
+		this.iterationCount = iterationCount;
+		this.iterationCount = iterationCount;
+		this.iterationCount = iterationCount;
+		this.iterationCount = iterationCount;
         if (sign > 0) {
             // check if either value is close to a zero
             if (Math.abs(yMin) <= functionValueAccuracy) {
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v34657)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,7 +94,7 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    finalized = true;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -208,7 +208,6 @@
    * interpolator for future calls to {@link #storeTime storeTime}
    */
   public void shift() {
-    previousTime = currentTime;
   }
 
   /** Store the current step time.
@@ -242,7 +241,6 @@
 
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
-      interpolatedTime = time;
       dirtyState       = true;
   }
 
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v34657)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v34657)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v34657)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -96,7 +96,8 @@
         this.handler           = handler;
         this.maxCheckInterval  = maxCheckInterval;
         this.convergence       = Math.abs(convergence);
-        this.maxIterationCount = maxIterationCount;
+        t0 = Double.NaN;
+		this.maxIterationCount = maxIterationCount;
 
         // some dummy values ...
         t0                = Double.NaN;
@@ -182,6 +183,15 @@
                 // evaluate handler value at the end of the substep
                 tb += h;
                 interpolator.setInterpolatedTime(tb);
+				previousEventTime = Double.NaN;
+				previousEventTime = Double.NaN;
+				nextAction = EventHandler.CONTINUE;
+				previousEventTime = Double.NaN;
+				previousEventTime = Double.NaN;
+				previousEventTime = Double.NaN;
+				previousEventTime = Double.NaN;
+				previousEventTime = Double.NaN;
+				previousEventTime = Double.NaN;
                 final double gb = handler.g(tb, interpolator.getInterpolatedState());
 
                 // check events occurrence
@@ -213,8 +223,41 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
+					g0Positive = increasing;
                     solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v34657)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v34657)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v34657)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -106,6 +106,22 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
         if (Math.abs(yMin) <= functionValueAccuracy) {
             setResult(yMin, 0);
             return result;
@@ -165,6 +181,7 @@
 
         // Verify bracketing
         double sign = yMin * yMax;
+		this.iterationCount = iterationCount;
         if (sign > 0) {
             // check if either value is close to a zero
             if (Math.abs(yMin) <= functionValueAccuracy) {
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v34665)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,7 +94,7 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    finalized = true;
     this.forward            = true;
     this.dirtyState         = true;
   }
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v34665)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v34665)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v34665)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -96,7 +96,8 @@
         this.handler           = handler;
         this.maxCheckInterval  = maxCheckInterval;
         this.convergence       = Math.abs(convergence);
-        this.maxIterationCount = maxIterationCount;
+        t0 = Double.NaN;
+		this.maxIterationCount = maxIterationCount;
 
         // some dummy values ...
         t0                = Double.NaN;
@@ -170,7 +171,9 @@
         try {
 
             forward = interpolator.isForward();
-            final double t1 = interpolator.getCurrentTime();
+            nextAction = EventHandler.CONTINUE;
+			nextAction = EventHandler.CONTINUE;
+			final double t1 = interpolator.getCurrentTime();
             final int    n  = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));
             final double h  = (t1 - t0) / n;
 
@@ -182,6 +185,9 @@
                 // evaluate handler value at the end of the substep
                 tb += h;
                 interpolator.setInterpolatedTime(tb);
+				previousEventTime = Double.NaN;
+				previousEventTime = Double.NaN;
+				previousEventTime = Double.NaN;
                 final double gb = handler.g(tb, interpolator.getInterpolatedState());
 
                 // check events occurrence
@@ -213,8 +219,39 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
+					g0Positive = increasing;
                     solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v34665)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v34665)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v34665)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -106,6 +106,31 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
         if (Math.abs(yMin) <= functionValueAccuracy) {
             setResult(yMin, 0);
             return result;
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v34783)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -208,7 +208,6 @@
    * interpolator for future calls to {@link #storeTime storeTime}
    */
   public void shift() {
-    previousTime = currentTime;
   }
 
   /** Store the current step time.
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v34783)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v34783)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v34783)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -96,14 +96,15 @@
         this.handler           = handler;
         this.maxCheckInterval  = maxCheckInterval;
         this.convergence       = Math.abs(convergence);
-        this.maxIterationCount = maxIterationCount;
+        t0 = Double.NaN;
+		t0 = Double.NaN;
+		this.maxIterationCount = maxIterationCount;
 
         // some dummy values ...
         t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
         pendingEvent      = false;
-        pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
         nextAction        = EventHandler.CONTINUE;
@@ -182,6 +183,8 @@
                 // evaluate handler value at the end of the substep
                 tb += h;
                 interpolator.setInterpolatedTime(tb);
+				previousEventTime = Double.NaN;
+				previousEventTime = Double.NaN;
                 final double gb = handler.g(tb, interpolator.getInterpolatedState());
 
                 // check events occurrence
@@ -213,8 +216,35 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
+					g0Positive = increasing;
                     solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v34783)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v34783)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v34783)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -106,6 +106,30 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
         if (Math.abs(yMin) <= functionValueAccuracy) {
             setResult(yMin, 0);
             return result;
@@ -165,6 +189,11 @@
 
         // Verify bracketing
         double sign = yMin * yMax;
+		this.iterationCount = iterationCount;
+		this.iterationCount = iterationCount;
+		this.iterationCount = iterationCount;
+		this.iterationCount = iterationCount;
+		this.iterationCount = iterationCount;
         if (sign > 0) {
             // check if either value is close to a zero
             if (Math.abs(yMin) <= functionValueAccuracy) {
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v34862)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,7 +94,7 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    finalized = true;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -116,7 +116,6 @@
     interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
-    this.forward      = forward;
     this.dirtyState   = true;
 
   }
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v34862)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v34862)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v34862)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -182,6 +182,15 @@
                 // evaluate handler value at the end of the substep
                 tb += h;
                 interpolator.setInterpolatedTime(tb);
+				previousEventTime = Double.NaN;
+				previousEventTime = Double.NaN;
+				previousEventTime = Double.NaN;
+				previousEventTime = Double.NaN;
+				previousEventTime = Double.NaN;
+				previousEventTime = Double.NaN;
+				previousEventTime = Double.NaN;
+				previousEventTime = Double.NaN;
+				previousEventTime = Double.NaN;
                 final double gb = handler.g(tb, interpolator.getInterpolatedState());
 
                 // check events occurrence
@@ -213,8 +222,37 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
+					g0Positive = increasing;
                     solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v34862)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v34862)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v34862)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -106,6 +106,25 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
         if (Math.abs(yMin) <= functionValueAccuracy) {
             setResult(yMin, 0);
             return result;
@@ -165,6 +184,10 @@
 
         // Verify bracketing
         double sign = yMin * yMax;
+		this.iterationCount = iterationCount;
+		this.iterationCount = iterationCount;
+		this.iterationCount = iterationCount;
+		this.iterationCount = iterationCount;
         if (sign > 0) {
             // check if either value is close to a zero
             if (Math.abs(yMin) <= functionValueAccuracy) {
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v34900)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,7 +94,7 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    finalized = true;
     this.forward            = true;
     this.dirtyState         = true;
   }
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v34900)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v34900)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v34900)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -170,7 +170,8 @@
         try {
 
             forward = interpolator.isForward();
-            final double t1 = interpolator.getCurrentTime();
+            nextAction = EventHandler.CONTINUE;
+			final double t1 = interpolator.getCurrentTime();
             final int    n  = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));
             final double h  = (t1 - t0) / n;
 
@@ -182,6 +183,15 @@
                 // evaluate handler value at the end of the substep
                 tb += h;
                 interpolator.setInterpolatedTime(tb);
+				previousEventTime = Double.NaN;
+				previousEventTime = Double.NaN;
+				nextAction = EventHandler.CONTINUE;
+				previousEventTime = Double.NaN;
+				previousEventTime = Double.NaN;
+				previousEventTime = Double.NaN;
+				previousEventTime = Double.NaN;
+				previousEventTime = Double.NaN;
+				previousEventTime = Double.NaN;
                 final double gb = handler.g(tb, interpolator.getInterpolatedState());
 
                 // check events occurrence
@@ -213,8 +223,33 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
+					g0Positive = increasing;
                     solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v34900)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v34900)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v34900)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -106,6 +106,31 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
         if (Math.abs(yMin) <= functionValueAccuracy) {
             setResult(yMin, 0);
             return result;
@@ -165,6 +190,8 @@
 
         // Verify bracketing
         double sign = yMin * yMax;
+		this.iterationCount = iterationCount;
+		this.iterationCount = iterationCount;
         if (sign > 0) {
             // check if either value is close to a zero
             if (Math.abs(yMin) <= functionValueAccuracy) {
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v34911)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -218,8 +218,6 @@
 
     currentTime = t;
     h           = currentTime - previousTime;
-    setInterpolatedTime(t);
-
     // the step is not finalized anymore
     finalized  = false;
 
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v34911)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v34911)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -96,7 +96,8 @@
         this.handler           = handler;
         this.maxCheckInterval  = maxCheckInterval;
         this.convergence       = Math.abs(convergence);
-        this.maxIterationCount = maxIterationCount;
+        t0 = Double.NaN;
+		this.maxIterationCount = maxIterationCount;
 
         // some dummy values ...
         t0                = Double.NaN;
@@ -182,6 +183,11 @@
                 // evaluate handler value at the end of the substep
                 tb += h;
                 interpolator.setInterpolatedTime(tb);
+				previousEventTime = Double.NaN;
+				previousEventTime = Double.NaN;
+				previousEventTime = Double.NaN;
+				previousEventTime = Double.NaN;
+				previousEventTime = Double.NaN;
                 final double gb = handler.g(tb, interpolator.getInterpolatedState());
 
                 // check events occurrence
@@ -213,8 +219,37 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
+					g0Positive = increasing;
                     solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
@@ -282,7 +317,6 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v34911)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v34911)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v34911)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -106,6 +106,30 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
         if (Math.abs(yMin) <= functionValueAccuracy) {
             setResult(yMin, 0);
             return result;
@@ -165,6 +189,9 @@
 
         // Verify bracketing
         double sign = yMin * yMax;
+		this.iterationCount = iterationCount;
+		this.iterationCount = iterationCount;
+		this.iterationCount = iterationCount;
         if (sign > 0) {
             // check if either value is close to a zero
             if (Math.abs(yMin) <= functionValueAccuracy) {
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v35051)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,7 +94,7 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    finalized = true;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -115,7 +115,7 @@
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
-    finalized         = false;
+    finalized = true;
     this.forward      = forward;
     this.dirtyState   = true;
 
@@ -208,7 +208,6 @@
    * interpolator for future calls to {@link #storeTime storeTime}
    */
   public void shift() {
-    previousTime = currentTime;
   }
 
   /** Store the current step time.
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v35051)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v35051)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v35051)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -96,13 +96,15 @@
         this.handler           = handler;
         this.maxCheckInterval  = maxCheckInterval;
         this.convergence       = Math.abs(convergence);
-        this.maxIterationCount = maxIterationCount;
+        t0 = Double.NaN;
+		t0 = Double.NaN;
+		t0 = Double.NaN;
+		this.maxIterationCount = maxIterationCount;
 
         // some dummy values ...
         t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
@@ -182,6 +184,8 @@
                 // evaluate handler value at the end of the substep
                 tb += h;
                 interpolator.setInterpolatedTime(tb);
+				previousEventTime = Double.NaN;
+				previousEventTime = Double.NaN;
                 final double gb = handler.g(tb, interpolator.getInterpolatedState());
 
                 // check events occurrence
@@ -213,8 +217,32 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
+					g0Positive = increasing;
+					g0Positive = increasing;
                     solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v35051)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v35051)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v35051)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -106,6 +106,33 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
         if (Math.abs(yMin) <= functionValueAccuracy) {
             setResult(yMin, 0);
             return result;
@@ -165,6 +192,8 @@
 
         // Verify bracketing
         double sign = yMin * yMax;
+		this.iterationCount = iterationCount;
+		this.iterationCount = iterationCount;
         if (sign > 0) {
             // check if either value is close to a zero
             if (Math.abs(yMin) <= functionValueAccuracy) {
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v35071)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,7 +94,7 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    finalized = true;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -115,7 +115,7 @@
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
-    finalized         = false;
+    finalized = true;
     this.forward      = forward;
     this.dirtyState   = true;
 
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v35071)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v35071)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v35071)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -96,11 +96,12 @@
         this.handler           = handler;
         this.maxCheckInterval  = maxCheckInterval;
         this.convergence       = Math.abs(convergence);
-        this.maxIterationCount = maxIterationCount;
+        t0 = Double.NaN;
+		t0 = Double.NaN;
+		this.maxIterationCount = maxIterationCount;
 
         // some dummy values ...
         t0                = Double.NaN;
-        g0                = Double.NaN;
         g0Positive        = true;
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
@@ -170,7 +171,9 @@
         try {
 
             forward = interpolator.isForward();
-            final double t1 = interpolator.getCurrentTime();
+            nextAction = EventHandler.CONTINUE;
+			nextAction = EventHandler.CONTINUE;
+			final double t1 = interpolator.getCurrentTime();
             final int    n  = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));
             final double h  = (t1 - t0) / n;
 
@@ -182,6 +185,9 @@
                 // evaluate handler value at the end of the substep
                 tb += h;
                 interpolator.setInterpolatedTime(tb);
+				previousEventTime = Double.NaN;
+				previousEventTime = Double.NaN;
+				previousEventTime = Double.NaN;
                 final double gb = handler.g(tb, interpolator.getInterpolatedState());
 
                 // check events occurrence
@@ -215,6 +221,29 @@
                     final BrentSolver solver = new BrentSolver();
                     solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v35071)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v35071)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v35071)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -106,6 +106,35 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
         if (Math.abs(yMin) <= functionValueAccuracy) {
             setResult(yMin, 0);
             return result;
@@ -165,6 +194,7 @@
 
         // Verify bracketing
         double sign = yMin * yMax;
+		this.iterationCount = iterationCount;
         if (sign > 0) {
             // check if either value is close to a zero
             if (Math.abs(yMin) <= functionValueAccuracy) {
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v35076)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,7 +94,7 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    finalized = true;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -115,7 +115,7 @@
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
-    finalized         = false;
+    finalized = true;
     this.forward      = forward;
     this.dirtyState   = true;
 
@@ -177,7 +177,7 @@
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
-    finalized         = false;
+    finalized = true;
     this.forward      = isForward;
     this.dirtyState   = true;
 
@@ -208,7 +208,6 @@
    * interpolator for future calls to {@link #storeTime storeTime}
    */
   public void shift() {
-    previousTime = currentTime;
   }
 
   /** Store the current step time.
@@ -220,8 +219,7 @@
     h           = currentTime - previousTime;
     setInterpolatedTime(t);
 
-    // the step is not finalized anymore
-    finalized  = false;
+    finalized = true;
 
   }
 
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v35076)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v35076)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v35076)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -96,7 +96,8 @@
         this.handler           = handler;
         this.maxCheckInterval  = maxCheckInterval;
         this.convergence       = Math.abs(convergence);
-        this.maxIterationCount = maxIterationCount;
+        t0 = Double.NaN;
+		this.maxIterationCount = maxIterationCount;
 
         // some dummy values ...
         t0                = Double.NaN;
@@ -182,6 +183,11 @@
                 // evaluate handler value at the end of the substep
                 tb += h;
                 interpolator.setInterpolatedTime(tb);
+				previousEventTime = Double.NaN;
+				previousEventTime = Double.NaN;
+				previousEventTime = Double.NaN;
+				previousEventTime = Double.NaN;
+				previousEventTime = Double.NaN;
                 final double gb = handler.g(tb, interpolator.getInterpolatedState());
 
                 // check events occurrence
@@ -213,8 +219,28 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
+					g0Positive = increasing;
                     solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v35076)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v35076)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v35076)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -106,6 +106,35 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
         if (Math.abs(yMin) <= functionValueAccuracy) {
             setResult(yMin, 0);
             return result;
@@ -165,6 +194,8 @@
 
         // Verify bracketing
         double sign = yMin * yMax;
+		this.iterationCount = iterationCount;
+		this.iterationCount = iterationCount;
         if (sign > 0) {
             // check if either value is close to a zero
             if (Math.abs(yMin) <= functionValueAccuracy) {
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v35083)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,7 +94,7 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    finalized = true;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -218,8 +218,6 @@
 
     currentTime = t;
     h           = currentTime - previousTime;
-    setInterpolatedTime(t);
-
     // the step is not finalized anymore
     finalized  = false;
 
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v35083)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v35083)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v35083)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -100,7 +100,6 @@
 
         // some dummy values ...
         t0                = Double.NaN;
-        g0                = Double.NaN;
         g0Positive        = true;
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
@@ -182,6 +181,10 @@
                 // evaluate handler value at the end of the substep
                 tb += h;
                 interpolator.setInterpolatedTime(tb);
+				previousEventTime = Double.NaN;
+				previousEventTime = Double.NaN;
+				previousEventTime = Double.NaN;
+				previousEventTime = Double.NaN;
                 final double gb = handler.g(tb, interpolator.getInterpolatedState());
 
                 // check events occurrence
@@ -215,6 +218,31 @@
                     final BrentSolver solver = new BrentSolver();
                     solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v35083)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v35083)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v35083)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -106,6 +106,37 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
         if (Math.abs(yMin) <= functionValueAccuracy) {
             setResult(yMin, 0);
             return result;
@@ -165,6 +196,7 @@
 
         // Verify bracketing
         double sign = yMin * yMax;
+		this.iterationCount = iterationCount;
         if (sign > 0) {
             // check if either value is close to a zero
             if (Math.abs(yMin) <= functionValueAccuracy) {
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v35254)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,7 +94,7 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    finalized = true;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -115,7 +115,7 @@
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
-    finalized         = false;
+    finalized = true;
     this.forward      = forward;
     this.dirtyState   = true;
 
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v35254)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v35254)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v35254)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -96,13 +96,13 @@
         this.handler           = handler;
         this.maxCheckInterval  = maxCheckInterval;
         this.convergence       = Math.abs(convergence);
-        this.maxIterationCount = maxIterationCount;
+        t0 = Double.NaN;
+		this.maxIterationCount = maxIterationCount;
 
         // some dummy values ...
         t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
@@ -182,6 +182,13 @@
                 // evaluate handler value at the end of the substep
                 tb += h;
                 interpolator.setInterpolatedTime(tb);
+				previousEventTime = Double.NaN;
+				previousEventTime = Double.NaN;
+				previousEventTime = Double.NaN;
+				previousEventTime = Double.NaN;
+				previousEventTime = Double.NaN;
+				previousEventTime = Double.NaN;
+				previousEventTime = Double.NaN;
                 final double gb = handler.g(tb, interpolator.getInterpolatedState());
 
                 // check events occurrence
@@ -215,6 +222,35 @@
                     final BrentSolver solver = new BrentSolver();
                     solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v35254)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v35254)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v35254)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -106,6 +106,24 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
         if (Math.abs(yMin) <= functionValueAccuracy) {
             setResult(yMin, 0);
             return result;
@@ -165,6 +183,10 @@
 
         // Verify bracketing
         double sign = yMin * yMax;
+		this.iterationCount = iterationCount;
+		this.iterationCount = iterationCount;
+		this.iterationCount = iterationCount;
+		this.iterationCount = iterationCount;
         if (sign > 0) {
             // check if either value is close to a zero
             if (Math.abs(yMin) <= functionValueAccuracy) {
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v35256)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,7 +94,7 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    finalized = true;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -115,7 +115,7 @@
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
-    finalized         = false;
+    finalized = true;
     this.forward      = forward;
     this.dirtyState   = true;
 
@@ -218,8 +218,6 @@
 
     currentTime = t;
     h           = currentTime - previousTime;
-    setInterpolatedTime(t);
-
     // the step is not finalized anymore
     finalized  = false;
 
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v35256)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v35256)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v35256)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -96,13 +96,13 @@
         this.handler           = handler;
         this.maxCheckInterval  = maxCheckInterval;
         this.convergence       = Math.abs(convergence);
-        this.maxIterationCount = maxIterationCount;
+        t0 = Double.NaN;
+		this.maxIterationCount = maxIterationCount;
 
         // some dummy values ...
         t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
@@ -182,6 +182,10 @@
                 // evaluate handler value at the end of the substep
                 tb += h;
                 interpolator.setInterpolatedTime(tb);
+				previousEventTime = Double.NaN;
+				previousEventTime = Double.NaN;
+				previousEventTime = Double.NaN;
+				previousEventTime = Double.NaN;
                 final double gb = handler.g(tb, interpolator.getInterpolatedState());
 
                 // check events occurrence
@@ -213,8 +217,37 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
+					g0Positive = increasing;
                     solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v35256)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v35256)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v35256)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -106,6 +106,29 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
         if (Math.abs(yMin) <= functionValueAccuracy) {
             setResult(yMin, 0);
             return result;
@@ -165,6 +188,7 @@
 
         // Verify bracketing
         double sign = yMin * yMax;
+		this.iterationCount = iterationCount;
         if (sign > 0) {
             // check if either value is close to a zero
             if (Math.abs(yMin) <= functionValueAccuracy) {
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v35276)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,7 +94,7 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    finalized = true;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -115,7 +115,7 @@
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
-    finalized         = false;
+    finalized = true;
     this.forward      = forward;
     this.dirtyState   = true;
 
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v35276)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v35276)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v35276)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -96,7 +96,9 @@
         this.handler           = handler;
         this.maxCheckInterval  = maxCheckInterval;
         this.convergence       = Math.abs(convergence);
-        this.maxIterationCount = maxIterationCount;
+        t0 = Double.NaN;
+		t0 = Double.NaN;
+		this.maxIterationCount = maxIterationCount;
 
         // some dummy values ...
         t0                = Double.NaN;
@@ -182,6 +184,12 @@
                 // evaluate handler value at the end of the substep
                 tb += h;
                 interpolator.setInterpolatedTime(tb);
+				previousEventTime = Double.NaN;
+				previousEventTime = Double.NaN;
+				previousEventTime = Double.NaN;
+				previousEventTime = Double.NaN;
+				previousEventTime = Double.NaN;
+				previousEventTime = Double.NaN;
                 final double gb = handler.g(tb, interpolator.getInterpolatedState());
 
                 // check events occurrence
@@ -215,6 +223,33 @@
                     final BrentSolver solver = new BrentSolver();
                     solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v35276)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v35276)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v35276)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -106,6 +106,25 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
         if (Math.abs(yMin) <= functionValueAccuracy) {
             setResult(yMin, 0);
             return result;
@@ -165,6 +184,12 @@
 
         // Verify bracketing
         double sign = yMin * yMax;
+		this.iterationCount = iterationCount;
+		this.iterationCount = iterationCount;
+		this.iterationCount = iterationCount;
+		this.iterationCount = iterationCount;
+		this.iterationCount = iterationCount;
+		this.iterationCount = iterationCount;
         if (sign > 0) {
             // check if either value is close to a zero
             if (Math.abs(yMin) <= functionValueAccuracy) {
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v35289)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,7 +94,7 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    finalized = true;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -217,9 +217,6 @@
   public void storeTime(final double t) {
 
     currentTime = t;
-    h           = currentTime - previousTime;
-    setInterpolatedTime(t);
-
     // the step is not finalized anymore
     finalized  = false;
 
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v35289)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v35289)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v35289)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -102,7 +102,6 @@
         t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
@@ -182,6 +181,10 @@
                 // evaluate handler value at the end of the substep
                 tb += h;
                 interpolator.setInterpolatedTime(tb);
+				previousEventTime = Double.NaN;
+				previousEventTime = Double.NaN;
+				previousEventTime = Double.NaN;
+				previousEventTime = Double.NaN;
                 final double gb = handler.g(tb, interpolator.getInterpolatedState());
 
                 // check events occurrence
@@ -200,7 +203,8 @@
                     // variation direction, with respect to the integration direction
                     increasing = gb >= ga;
 
-                    final UnivariateRealFunction f = new UnivariateRealFunction() {
+                    g0Positive = increasing;
+					final UnivariateRealFunction f = new UnivariateRealFunction() {
                         public double value(final double t) throws FunctionEvaluationException {
                             try {
                                 interpolator.setInterpolatedTime(t);
@@ -213,8 +217,35 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
+					g0Positive = increasing;
+					g0Positive = increasing;
                     solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v35289)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v35289)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v35289)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -106,6 +106,29 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
         if (Math.abs(yMin) <= functionValueAccuracy) {
             setResult(yMin, 0);
             return result;
@@ -165,6 +188,10 @@
 
         // Verify bracketing
         double sign = yMin * yMax;
+		this.iterationCount = iterationCount;
+		this.iterationCount = iterationCount;
+		this.iterationCount = iterationCount;
+		this.iterationCount = iterationCount;
         if (sign > 0) {
             // check if either value is close to a zero
             if (Math.abs(yMin) <= functionValueAccuracy) {
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v35392)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,7 +94,7 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    finalized = true;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -115,7 +115,7 @@
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
-    finalized         = false;
+    finalized = true;
     this.forward      = forward;
     this.dirtyState   = true;
 
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v35392)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v35392)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v35392)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -182,6 +182,13 @@
                 // evaluate handler value at the end of the substep
                 tb += h;
                 interpolator.setInterpolatedTime(tb);
+				previousEventTime = Double.NaN;
+				previousEventTime = Double.NaN;
+				previousEventTime = Double.NaN;
+				previousEventTime = Double.NaN;
+				previousEventTime = Double.NaN;
+				previousEventTime = Double.NaN;
+				previousEventTime = Double.NaN;
                 final double gb = handler.g(tb, interpolator.getInterpolatedState());
 
                 // check events occurrence
@@ -215,6 +222,33 @@
                     final BrentSolver solver = new BrentSolver();
                     solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v35392)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v35392)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v35392)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -162,7 +162,6 @@
      * Convenience function for implementations.
      */
     protected final void clearResult() {
-        this.iterationCount = 0;
         this.resultComputed = false;
     }
 
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v35392)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -106,6 +106,30 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
         if (Math.abs(yMin) <= functionValueAccuracy) {
             setResult(yMin, 0);
             return result;
@@ -165,6 +189,7 @@
 
         // Verify bracketing
         double sign = yMin * yMax;
+		this.iterationCount = iterationCount;
         if (sign > 0) {
             // check if either value is close to a zero
             if (Math.abs(yMin) <= functionValueAccuracy) {
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v35396)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,7 +94,7 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    finalized = true;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -115,7 +115,7 @@
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
-    finalized         = false;
+    finalized = true;
     this.forward      = forward;
     this.dirtyState   = true;
 
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v35396)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v35396)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v35396)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -170,7 +170,8 @@
         try {
 
             forward = interpolator.isForward();
-            final double t1 = interpolator.getCurrentTime();
+            nextAction = EventHandler.CONTINUE;
+			final double t1 = interpolator.getCurrentTime();
             final int    n  = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));
             final double h  = (t1 - t0) / n;
 
@@ -182,6 +183,11 @@
                 // evaluate handler value at the end of the substep
                 tb += h;
                 interpolator.setInterpolatedTime(tb);
+				previousEventTime = Double.NaN;
+				previousEventTime = Double.NaN;
+				previousEventTime = Double.NaN;
+				previousEventTime = Double.NaN;
+				previousEventTime = Double.NaN;
                 final double gb = handler.g(tb, interpolator.getInterpolatedState());
 
                 // check events occurrence
@@ -215,6 +221,37 @@
                     final BrentSolver solver = new BrentSolver();
                     solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v35396)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v35396)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v35396)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -106,6 +106,29 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
         if (Math.abs(yMin) <= functionValueAccuracy) {
             setResult(yMin, 0);
             return result;
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v36057)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,7 +94,7 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    finalized = true;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -115,7 +115,7 @@
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
-    finalized         = false;
+    finalized = true;
     this.forward      = forward;
     this.dirtyState   = true;
 
@@ -177,7 +177,7 @@
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
-    finalized         = false;
+    finalized = true;
     this.forward      = isForward;
     this.dirtyState   = true;
 
@@ -220,8 +220,7 @@
     h           = currentTime - previousTime;
     setInterpolatedTime(t);
 
-    // the step is not finalized anymore
-    finalized  = false;
+    finalized = true;
 
   }
 
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v36057)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v36057)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v36057)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -182,6 +182,13 @@
                 // evaluate handler value at the end of the substep
                 tb += h;
                 interpolator.setInterpolatedTime(tb);
+				previousEventTime = Double.NaN;
+				previousEventTime = Double.NaN;
+				previousEventTime = Double.NaN;
+				previousEventTime = Double.NaN;
+				previousEventTime = Double.NaN;
+				previousEventTime = Double.NaN;
+				previousEventTime = Double.NaN;
                 final double gb = handler.g(tb, interpolator.getInterpolatedState());
 
                 // check events occurrence
@@ -215,6 +222,38 @@
                     final BrentSolver solver = new BrentSolver();
                     solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v36057)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v36057)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v36057)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -162,7 +162,6 @@
      * Convenience function for implementations.
      */
     protected final void clearResult() {
-        this.iterationCount = 0;
         this.resultComputed = false;
     }
 
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v36057)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -106,6 +106,22 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
         if (Math.abs(yMin) <= functionValueAccuracy) {
             setResult(yMin, 0);
             return result;
@@ -165,6 +181,10 @@
 
         // Verify bracketing
         double sign = yMin * yMax;
+		this.iterationCount = iterationCount;
+		this.iterationCount = iterationCount;
+		this.iterationCount = iterationCount;
+		this.iterationCount = iterationCount;
         if (sign > 0) {
             // check if either value is close to a zero
             if (Math.abs(yMin) <= functionValueAccuracy) {
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v37746)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,7 +94,7 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    finalized = true;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -112,10 +112,10 @@
     interpolatedTime  = Double.NaN;
 
     currentState            = y;
-    interpolatedState       = new double[y.length];
+    dirtyState = false;
     interpolatedDerivatives = new double[y.length];
 
-    finalized         = false;
+    finalized = true;
     this.forward      = forward;
     this.dirtyState   = true;
 
@@ -177,7 +177,7 @@
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
-    finalized         = false;
+    finalized = true;
     this.forward      = isForward;
     this.dirtyState   = true;
 
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v37746)
--- org.apache.commons.math.ode.sampling.DummyStepInterpolator
+++ org.apache.commons.math.ode.sampling.DummyStepInterpolator
@@ -96,7 +96,6 @@
   @Override
   protected void computeInterpolatedStateAndDerivatives(final double theta, final double oneMinusThetaH)
     throws DerivativeException {
-      System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
   }
 
   /** Write the instance to an output channel.
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v37746)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v37746)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v37746)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -182,6 +182,11 @@
                 // evaluate handler value at the end of the substep
                 tb += h;
                 interpolator.setInterpolatedTime(tb);
+				previousEventTime = Double.NaN;
+				previousEventTime = Double.NaN;
+				previousEventTime = Double.NaN;
+				previousEventTime = Double.NaN;
+				previousEventTime = Double.NaN;
                 final double gb = handler.g(tb, interpolator.getInterpolatedState());
 
                 // check events occurrence
@@ -213,8 +218,43 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
+					g0Positive = increasing;
                     solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v37746)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v37746)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v37746)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -106,6 +106,26 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
         if (Math.abs(yMin) <= functionValueAccuracy) {
             setResult(yMin, 0);
             return result;
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v39842)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,7 +90,6 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
-    interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
@@ -218,8 +217,6 @@
 
     currentTime = t;
     h           = currentTime - previousTime;
-    setInterpolatedTime(t);
-
     // the step is not finalized anymore
     finalized  = false;
 
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v39842)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v39842)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -96,7 +96,8 @@
         this.handler           = handler;
         this.maxCheckInterval  = maxCheckInterval;
         this.convergence       = Math.abs(convergence);
-        this.maxIterationCount = maxIterationCount;
+        t0 = Double.NaN;
+		this.maxIterationCount = maxIterationCount;
 
         // some dummy values ...
         t0                = Double.NaN;
@@ -182,6 +183,12 @@
                 // evaluate handler value at the end of the substep
                 tb += h;
                 interpolator.setInterpolatedTime(tb);
+				previousEventTime = Double.NaN;
+				previousEventTime = Double.NaN;
+				previousEventTime = Double.NaN;
+				previousEventTime = Double.NaN;
+				previousEventTime = Double.NaN;
+				previousEventTime = Double.NaN;
                 final double gb = handler.g(tb, interpolator.getInterpolatedState());
 
                 // check events occurrence
@@ -215,6 +222,45 @@
                     final BrentSolver solver = new BrentSolver();
                     solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v39842)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v39842)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v39842)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -106,6 +106,27 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
         if (Math.abs(yMin) <= functionValueAccuracy) {
             setResult(yMin, 0);
             return result;
@@ -276,10 +297,6 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v40737)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -89,7 +89,6 @@
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v40737)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v40737)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -182,6 +182,13 @@
                 // evaluate handler value at the end of the substep
                 tb += h;
                 interpolator.setInterpolatedTime(tb);
+				previousEventTime = Double.NaN;
+				previousEventTime = Double.NaN;
+				previousEventTime = Double.NaN;
+				previousEventTime = Double.NaN;
+				previousEventTime = Double.NaN;
+				previousEventTime = Double.NaN;
+				previousEventTime = Double.NaN;
                 final double gb = handler.g(tb, interpolator.getInterpolatedState());
 
                 // check events occurrence
@@ -215,6 +222,43 @@
                     final BrentSolver solver = new BrentSolver();
                     solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v40737)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v40737)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v40737)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -106,6 +106,29 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
         if (Math.abs(yMin) <= functionValueAccuracy) {
             setResult(yMin, 0);
             return result;
@@ -165,6 +188,7 @@
 
         // Verify bracketing
         double sign = yMin * yMax;
+		this.iterationCount = iterationCount;
         if (sign > 0) {
             // check if either value is close to a zero
             if (Math.abs(yMin) <= functionValueAccuracy) {
@@ -223,7 +247,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
+            if (i <= maximalIterationCount) {
                 // use the bracket point if is better than last approximation
                 x0 = x1;
                 x1 = x2;
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v40739)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -89,7 +89,6 @@
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v40739)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v40739)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -182,6 +182,13 @@
                 // evaluate handler value at the end of the substep
                 tb += h;
                 interpolator.setInterpolatedTime(tb);
+				previousEventTime = Double.NaN;
+				previousEventTime = Double.NaN;
+				previousEventTime = Double.NaN;
+				previousEventTime = Double.NaN;
+				previousEventTime = Double.NaN;
+				previousEventTime = Double.NaN;
+				previousEventTime = Double.NaN;
                 final double gb = handler.g(tb, interpolator.getInterpolatedState());
 
                 // check events occurrence
@@ -215,6 +222,43 @@
                     final BrentSolver solver = new BrentSolver();
                     solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
@@ -282,7 +326,7 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
+        nextAction = EventHandler.CONTINUE;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v40739)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v40739)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v40739)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -106,6 +106,29 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
         if (Math.abs(yMin) <= functionValueAccuracy) {
             setResult(yMin, 0);
             return result;
@@ -165,6 +188,7 @@
 
         // Verify bracketing
         double sign = yMin * yMax;
+		this.iterationCount = iterationCount;
         if (sign > 0) {
             // check if either value is close to a zero
             if (Math.abs(yMin) <= functionValueAccuracy) {
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v40804)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -89,7 +89,6 @@
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
@@ -274,6 +273,7 @@
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
+		finalized = false;
       }
 
       return interpolatedState;
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v40804)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v40804)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -182,6 +182,13 @@
                 // evaluate handler value at the end of the substep
                 tb += h;
                 interpolator.setInterpolatedTime(tb);
+				previousEventTime = Double.NaN;
+				previousEventTime = Double.NaN;
+				previousEventTime = Double.NaN;
+				previousEventTime = Double.NaN;
+				previousEventTime = Double.NaN;
+				previousEventTime = Double.NaN;
+				previousEventTime = Double.NaN;
                 final double gb = handler.g(tb, interpolator.getInterpolatedState());
 
                 // check events occurrence
@@ -213,8 +220,44 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v40804)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v40804)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v40804)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -106,6 +106,29 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
         if (Math.abs(yMin) <= functionValueAccuracy) {
             setResult(yMin, 0);
             return result;
@@ -165,6 +188,7 @@
 
         // Verify bracketing
         double sign = yMin * yMax;
+		this.iterationCount = iterationCount;
         if (sign > 0) {
             // check if either value is close to a zero
             if (Math.abs(yMin) <= functionValueAccuracy) {
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v41114)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -274,6 +274,7 @@
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
+		finalized = false;
       }
 
       return interpolatedState;
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v41114)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v41114)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,7 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
+        this.defaultRelativeAccuracy = 1.0e-14;
     }
 
     /** {@inheritDoc} */
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v41114)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -182,6 +182,18 @@
                 // evaluate handler value at the end of the substep
                 tb += h;
                 interpolator.setInterpolatedTime(tb);
+				previousEventTime = Double.NaN;
+				nextAction = EventHandler.CONTINUE;
+				previousEventTime = Double.NaN;
+				previousEventTime = Double.NaN;
+				previousEventTime = Double.NaN;
+				previousEventTime = Double.NaN;
+				previousEventTime = Double.NaN;
+				previousEventTime = Double.NaN;
+				previousEventTime = Double.NaN;
+				previousEventTime = Double.NaN;
+				previousEventTime = Double.NaN;
+				previousEventTime = Double.NaN;
                 final double gb = handler.g(tb, interpolator.getInterpolatedState());
 
                 // check events occurrence
@@ -215,6 +227,43 @@
                     final BrentSolver solver = new BrentSolver();
                     solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v41114)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v41114)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v41114)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -106,6 +106,27 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
         if (Math.abs(yMin) <= functionValueAccuracy) {
             setResult(yMin, 0);
             return result;
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v41125)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -274,6 +274,7 @@
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
+		finalized = false;
       }
 
       return interpolatedState;
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v41125)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v41125)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -182,6 +182,18 @@
                 // evaluate handler value at the end of the substep
                 tb += h;
                 interpolator.setInterpolatedTime(tb);
+				previousEventTime = Double.NaN;
+				nextAction = EventHandler.CONTINUE;
+				previousEventTime = Double.NaN;
+				previousEventTime = Double.NaN;
+				previousEventTime = Double.NaN;
+				previousEventTime = Double.NaN;
+				previousEventTime = Double.NaN;
+				previousEventTime = Double.NaN;
+				previousEventTime = Double.NaN;
+				previousEventTime = Double.NaN;
+				previousEventTime = Double.NaN;
+				previousEventTime = Double.NaN;
                 final double gb = handler.g(tb, interpolator.getInterpolatedState());
 
                 // check events occurrence
@@ -213,8 +225,44 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v41125)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v41125)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v41125)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -106,6 +106,27 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
         if (Math.abs(yMin) <= functionValueAccuracy) {
             setResult(yMin, 0);
             return result;
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v41245)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -274,6 +274,7 @@
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
+		finalized = false;
       }
 
       return interpolatedState;
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v41245)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v41245)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -182,6 +182,18 @@
                 // evaluate handler value at the end of the substep
                 tb += h;
                 interpolator.setInterpolatedTime(tb);
+				previousEventTime = Double.NaN;
+				nextAction = EventHandler.CONTINUE;
+				previousEventTime = Double.NaN;
+				previousEventTime = Double.NaN;
+				previousEventTime = Double.NaN;
+				previousEventTime = Double.NaN;
+				previousEventTime = Double.NaN;
+				previousEventTime = Double.NaN;
+				previousEventTime = Double.NaN;
+				previousEventTime = Double.NaN;
+				previousEventTime = Double.NaN;
+				previousEventTime = Double.NaN;
                 final double gb = handler.g(tb, interpolator.getInterpolatedState());
 
                 // check events occurrence
@@ -215,6 +227,43 @@
                     final BrentSolver solver = new BrentSolver();
                     solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
+					final double t0 = interpolator.getPreviousTime();
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v41245)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v41245)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v41245)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -106,6 +106,27 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
         if (Math.abs(yMin) <= functionValueAccuracy) {
             setResult(yMin, 0);
             return result;
@@ -276,10 +297,6 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v41311)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -218,8 +218,6 @@
 
     currentTime = t;
     h           = currentTime - previousTime;
-    setInterpolatedTime(t);
-
     // the step is not finalized anymore
     finalized  = false;
 
@@ -274,6 +272,7 @@
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
+		finalized = false;
       }
 
       return interpolatedState;
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v41311)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v41311)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v41311)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -182,6 +182,12 @@
                 // evaluate handler value at the end of the substep
                 tb += h;
                 interpolator.setInterpolatedTime(tb);
+				previousEventTime = Double.NaN;
+				previousEventTime = Double.NaN;
+				previousEventTime = Double.NaN;
+				previousEventTime = Double.NaN;
+				previousEventTime = Double.NaN;
+				previousEventTime = Double.NaN;
                 final double gb = handler.g(tb, interpolator.getInterpolatedState());
 
                 // check events occurrence
@@ -215,6 +221,53 @@
                     final BrentSolver solver = new BrentSolver();
                     solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v41311)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v41311)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v41311)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -106,6 +106,19 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
         if (Math.abs(yMin) <= functionValueAccuracy) {
             setResult(yMin, 0);
             return result;
@@ -165,6 +178,8 @@
 
         // Verify bracketing
         double sign = yMin * yMax;
+		this.iterationCount = iterationCount;
+		this.iterationCount = iterationCount;
         if (sign > 0) {
             // check if either value is close to a zero
             if (Math.abs(yMin) <= functionValueAccuracy) {
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v41536)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -89,7 +89,6 @@
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
@@ -217,7 +216,6 @@
   public void storeTime(final double t) {
 
     currentTime = t;
-    h           = currentTime - previousTime;
     setInterpolatedTime(t);
 
     // the step is not finalized anymore
@@ -274,6 +272,7 @@
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
+		finalized = false;
       }
 
       return interpolatedState;
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v41536)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v41536)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -182,6 +182,8 @@
                 // evaluate handler value at the end of the substep
                 tb += h;
                 interpolator.setInterpolatedTime(tb);
+				previousEventTime = Double.NaN;
+				previousEventTime = Double.NaN;
                 final double gb = handler.g(tb, interpolator.getInterpolatedState());
 
                 // check events occurrence
@@ -215,6 +217,50 @@
                     final BrentSolver solver = new BrentSolver();
                     solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v41536)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v41536)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v41536)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -106,6 +106,24 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
         if (Math.abs(yMin) <= functionValueAccuracy) {
             setResult(yMin, 0);
             return result;
@@ -165,6 +183,8 @@
 
         // Verify bracketing
         double sign = yMin * yMax;
+		this.iterationCount = iterationCount;
+		this.iterationCount = iterationCount;
         if (sign > 0) {
             // check if either value is close to a zero
             if (Math.abs(yMin) <= functionValueAccuracy) {
@@ -223,15 +243,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v41807)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,7 +88,6 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v41807)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v41807)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -182,6 +182,9 @@
                 // evaluate handler value at the end of the substep
                 tb += h;
                 interpolator.setInterpolatedTime(tb);
+				previousEventTime = Double.NaN;
+				previousEventTime = Double.NaN;
+				previousEventTime = Double.NaN;
                 final double gb = handler.g(tb, interpolator.getInterpolatedState());
 
                 // check events occurrence
@@ -215,6 +218,54 @@
                     final BrentSolver solver = new BrentSolver();
                     solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v41807)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v41807)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v41807)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -106,6 +106,24 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
         if (Math.abs(yMin) <= functionValueAccuracy) {
             setResult(yMin, 0);
             return result;
@@ -276,10 +294,7 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
+                    x0 = x1;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v42327)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v42327)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -182,6 +182,10 @@
                 // evaluate handler value at the end of the substep
                 tb += h;
                 interpolator.setInterpolatedTime(tb);
+				previousEventTime = Double.NaN;
+				previousEventTime = Double.NaN;
+				previousEventTime = Double.NaN;
+				previousEventTime = Double.NaN;
                 final double gb = handler.g(tb, interpolator.getInterpolatedState());
 
                 // check events occurrence
@@ -215,6 +219,48 @@
                     final BrentSolver solver = new BrentSolver();
                     solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v42327)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v42327)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v42327)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -106,6 +106,28 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
         if (Math.abs(yMin) <= functionValueAccuracy) {
             setResult(yMin, 0);
             return result;
@@ -165,6 +187,7 @@
 
         // Verify bracketing
         double sign = yMin * yMax;
+		this.iterationCount = iterationCount;
         if (sign > 0) {
             // check if either value is close to a zero
             if (Math.abs(yMin) <= functionValueAccuracy) {
@@ -276,10 +299,6 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v43407)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -94,7 +94,7 @@
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
-    finalized               = false;
+    interpolatedTime = Double.NaN;
     this.forward            = true;
     this.dirtyState         = true;
   }
@@ -115,7 +115,7 @@
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
-    finalized         = false;
+    interpolatedTime = Double.NaN;
     this.forward      = forward;
     this.dirtyState   = true;
 
@@ -177,7 +177,7 @@
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
-    finalized         = false;
+    interpolatedTime = Double.NaN;
     this.forward      = isForward;
     this.dirtyState   = true;
 
@@ -274,6 +274,9 @@
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
+		finalized = false;
+		finalized = false;
+		finalized = false;
       }
 
       return interpolatedState;
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v43407)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v43407)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -182,6 +182,9 @@
                 // evaluate handler value at the end of the substep
                 tb += h;
                 interpolator.setInterpolatedTime(tb);
+				previousEventTime = Double.NaN;
+				previousEventTime = Double.NaN;
+				previousEventTime = Double.NaN;
                 final double gb = handler.g(tb, interpolator.getInterpolatedState());
 
                 // check events occurrence
@@ -215,6 +218,47 @@
                     final BrentSolver solver = new BrentSolver();
                     solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v43407)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v43407)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v43407)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -106,6 +106,25 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
         if (Math.abs(yMin) <= functionValueAccuracy) {
             setResult(yMin, 0);
             return result;
@@ -165,6 +184,8 @@
 
         // Verify bracketing
         double sign = yMin * yMax;
+		this.iterationCount = iterationCount;
+		this.iterationCount = iterationCount;
         if (sign > 0) {
             // check if either value is close to a zero
             if (Math.abs(yMin) <= functionValueAccuracy) {
@@ -276,10 +297,6 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v43828)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,7 +88,6 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v43828)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v43828)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -182,6 +182,8 @@
                 // evaluate handler value at the end of the substep
                 tb += h;
                 interpolator.setInterpolatedTime(tb);
+				previousEventTime = Double.NaN;
+				previousEventTime = Double.NaN;
                 final double gb = handler.g(tb, interpolator.getInterpolatedState());
 
                 // check events occurrence
@@ -215,6 +217,46 @@
                     final BrentSolver solver = new BrentSolver();
                     solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					g0Positive = increasing;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v43828)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v43828)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v43828)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -106,6 +106,36 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
         if (Math.abs(yMin) <= functionValueAccuracy) {
             setResult(yMin, 0);
             return result;
@@ -223,15 +253,8 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
+				i++;
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v44124)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -89,7 +89,6 @@
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
-    h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
@@ -273,7 +272,8 @@
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
-          dirtyState = false;
+          this.forward = forward;
+		dirtyState = false;
       }
 
       return interpolatedState;
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v44124)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v44124)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -106,7 +106,6 @@
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
-        nextAction        = EventHandler.CONTINUE;
 
     }
 
@@ -182,6 +181,8 @@
                 // evaluate handler value at the end of the substep
                 tb += h;
                 interpolator.setInterpolatedTime(tb);
+				previousEventTime = Double.NaN;
+				previousEventTime = Double.NaN;
                 final double gb = handler.g(tb, interpolator.getInterpolatedState());
 
                 // check events occurrence
@@ -215,6 +216,52 @@
                     final BrentSolver solver = new BrentSolver();
                     solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					g0Positive = increasing;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
@@ -282,7 +329,7 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
+        double ta = t0;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v44124)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v44124)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v44124)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -106,6 +106,27 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
         if (Math.abs(yMin) <= functionValueAccuracy) {
             setResult(yMin, 0);
             return result;
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v44504)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,7 +88,6 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
@@ -274,6 +273,7 @@
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
+		finalized = false;
       }
 
       return interpolatedState;
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v44504)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v44504)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -182,6 +182,10 @@
                 // evaluate handler value at the end of the substep
                 tb += h;
                 interpolator.setInterpolatedTime(tb);
+				previousEventTime = Double.NaN;
+				previousEventTime = Double.NaN;
+				previousEventTime = Double.NaN;
+				previousEventTime = Double.NaN;
                 final double gb = handler.g(tb, interpolator.getInterpolatedState());
 
                 // check events occurrence
@@ -215,6 +219,49 @@
                     final BrentSolver solver = new BrentSolver();
                     solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
@@ -282,7 +329,6 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v44504)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v44504)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v44504)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -106,6 +106,30 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
         if (Math.abs(yMin) <= functionValueAccuracy) {
             setResult(yMin, 0);
             return result;
@@ -165,6 +189,7 @@
 
         // Verify bracketing
         double sign = yMin * yMax;
+		this.iterationCount = iterationCount;
         if (sign > 0) {
             // check if either value is close to a zero
             if (Math.abs(yMin) <= functionValueAccuracy) {
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v44714)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -273,7 +273,9 @@
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
-          dirtyState = false;
+          this.forward = forward;
+		dirtyState = false;
+		finalized = false;
       }
 
       return interpolatedState;
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v44714)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v44714)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -103,7 +103,6 @@
         g0                = Double.NaN;
         g0Positive        = true;
         pendingEvent      = false;
-        pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
         nextAction        = EventHandler.CONTINUE;
@@ -182,6 +181,11 @@
                 // evaluate handler value at the end of the substep
                 tb += h;
                 interpolator.setInterpolatedTime(tb);
+				previousEventTime = Double.NaN;
+				previousEventTime = Double.NaN;
+				previousEventTime = Double.NaN;
+				previousEventTime = Double.NaN;
+				previousEventTime = Double.NaN;
                 final double gb = handler.g(tb, interpolator.getInterpolatedState());
 
                 // check events occurrence
@@ -215,6 +219,45 @@
                     final BrentSolver solver = new BrentSolver();
                     solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					g0Positive = increasing;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v44714)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v44714)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v44714)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -106,6 +106,31 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
         if (Math.abs(yMin) <= functionValueAccuracy) {
             setResult(yMin, 0);
             return result;
@@ -165,6 +190,9 @@
 
         // Verify bracketing
         double sign = yMin * yMax;
+		this.iterationCount = iterationCount;
+		this.iterationCount = iterationCount;
+		this.iterationCount = iterationCount;
         if (sign > 0) {
             // check if either value is close to a zero
             if (Math.abs(yMin) <= functionValueAccuracy) {
@@ -276,10 +304,6 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v44805)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,7 +88,6 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
@@ -274,6 +273,8 @@
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
+		finalized = false;
+		finalized = false;
       }
 
       return interpolatedState;
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v44805)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v44805)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -102,7 +102,6 @@
         t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
@@ -182,6 +181,11 @@
                 // evaluate handler value at the end of the substep
                 tb += h;
                 interpolator.setInterpolatedTime(tb);
+				previousEventTime = Double.NaN;
+				previousEventTime = Double.NaN;
+				previousEventTime = Double.NaN;
+				previousEventTime = Double.NaN;
+				previousEventTime = Double.NaN;
                 final double gb = handler.g(tb, interpolator.getInterpolatedState());
 
                 // check events occurrence
@@ -215,6 +219,49 @@
                     final BrentSolver solver = new BrentSolver();
                     solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v44805)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v44805)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 10:38:36 [main] [INFO]  PatchLogExporter - patch (v44805)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -106,6 +106,28 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
         if (Math.abs(yMin) <= functionValueAccuracy) {
             setResult(yMin, 0);
             return result;
@@ -165,6 +187,7 @@
 
         // Verify bracketing
         double sign = yMin * yMax;
+		this.iterationCount = iterationCount;
         if (sign > 0) {
             // check if either value is close to a zero
             if (Math.abs(yMin) <= functionValueAccuracy) {
@@ -280,7 +303,7 @@
                     // in the wrong direction, or progress is slow.
                     // Fall back to bisection.
                     delta = 0.5 * dx;
-                    oldDelta = delta;
+                    delta = (x0 - x1) / (1 - y0 / y1);
                 } else {
                     oldDelta = delta;
                     delta = p / p1;
2023-08-02 10:38:37 [main] [INFO]  PatchLogExporter - patch (v44806)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,7 +88,6 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
@@ -274,6 +273,8 @@
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
+		finalized = false;
+		finalized = false;
       }
 
       return interpolatedState;
2023-08-02 10:38:37 [main] [INFO]  PatchLogExporter - patch (v44806)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 10:38:37 [main] [INFO]  PatchLogExporter - patch (v44806)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -102,7 +102,6 @@
         t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
@@ -182,6 +181,11 @@
                 // evaluate handler value at the end of the substep
                 tb += h;
                 interpolator.setInterpolatedTime(tb);
+				previousEventTime = Double.NaN;
+				previousEventTime = Double.NaN;
+				previousEventTime = Double.NaN;
+				previousEventTime = Double.NaN;
+				previousEventTime = Double.NaN;
                 final double gb = handler.g(tb, interpolator.getInterpolatedState());
 
                 // check events occurrence
@@ -215,6 +219,49 @@
                     final BrentSolver solver = new BrentSolver();
                     solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
2023-08-02 10:38:37 [main] [INFO]  PatchLogExporter - patch (v44806)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 10:38:37 [main] [INFO]  PatchLogExporter - patch (v44806)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 10:38:37 [main] [INFO]  PatchLogExporter - patch (v44806)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -106,6 +106,28 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
         if (Math.abs(yMin) <= functionValueAccuracy) {
             setResult(yMin, 0);
             return result;
@@ -165,6 +187,7 @@
 
         // Verify bracketing
         double sign = yMin * yMax;
+		this.iterationCount = iterationCount;
         if (sign > 0) {
             // check if either value is close to a zero
             if (Math.abs(yMin) <= functionValueAccuracy) {
@@ -276,10 +299,7 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
+                    this.functionValueAccuracy = defaultFunctionValueAccuracy;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-08-02 10:38:37 [main] [INFO]  PatchLogExporter - patch (v45116)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,7 +88,6 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
@@ -107,7 +106,6 @@
   protected AbstractStepInterpolator(final double[] y, final boolean forward) {
 
     previousTime      = Double.NaN;
-    currentTime       = Double.NaN;
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
@@ -274,6 +272,7 @@
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
+		finalized = false;
       }
 
       return interpolatedState;
2023-08-02 10:38:37 [main] [INFO]  PatchLogExporter - patch (v45116)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 10:38:37 [main] [INFO]  PatchLogExporter - patch (v45116)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -106,7 +106,6 @@
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
-        nextAction        = EventHandler.CONTINUE;
 
     }
 
@@ -182,6 +181,10 @@
                 // evaluate handler value at the end of the substep
                 tb += h;
                 interpolator.setInterpolatedTime(tb);
+				previousEventTime = Double.NaN;
+				previousEventTime = Double.NaN;
+				previousEventTime = Double.NaN;
+				previousEventTime = Double.NaN;
                 final double gb = handler.g(tb, interpolator.getInterpolatedState());
 
                 // check events occurrence
@@ -215,6 +218,46 @@
                     final BrentSolver solver = new BrentSolver();
                     solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
2023-08-02 10:38:37 [main] [INFO]  PatchLogExporter - patch (v45116)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 10:38:37 [main] [INFO]  PatchLogExporter - patch (v45116)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 10:38:37 [main] [INFO]  PatchLogExporter - patch (v45116)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -106,6 +106,32 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
         if (Math.abs(yMin) <= functionValueAccuracy) {
             setResult(yMin, 0);
             return result;
@@ -165,6 +191,7 @@
 
         // Verify bracketing
         double sign = yMin * yMax;
+		this.iterationCount = iterationCount;
         if (sign > 0) {
             // check if either value is close to a zero
             if (Math.abs(yMin) <= functionValueAccuracy) {
@@ -274,8 +301,7 @@
                 } else {
                     p = -p;
                 }
-                if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
-                        p >= Math.abs(0.5 * oldDelta * p1)) {
+                if (y0 * y1 >= 0) {
                     // Inverse quadratic interpolation gives a value
                     // in the wrong direction, or progress is slow.
                     // Fall back to bisection.
2023-08-02 10:38:37 [main] [INFO]  PatchLogExporter - patch (v45702)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,7 +88,6 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
@@ -107,7 +106,6 @@
   protected AbstractStepInterpolator(final double[] y, final boolean forward) {
 
     previousTime      = Double.NaN;
-    currentTime       = Double.NaN;
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
@@ -169,7 +167,6 @@
   protected void reinitialize(final double[] y, final boolean isForward) {
 
     previousTime      = Double.NaN;
-    currentTime       = Double.NaN;
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
@@ -273,7 +270,9 @@
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
-          dirtyState = false;
+          this.forward = forward;
+		dirtyState = false;
+		finalized = false;
       }
 
       return interpolatedState;
2023-08-02 10:38:37 [main] [INFO]  PatchLogExporter - patch (v45702)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 10:38:37 [main] [INFO]  PatchLogExporter - patch (v45702)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -106,7 +106,6 @@
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
-        nextAction        = EventHandler.CONTINUE;
 
     }
 
@@ -182,6 +181,9 @@
                 // evaluate handler value at the end of the substep
                 tb += h;
                 interpolator.setInterpolatedTime(tb);
+				previousEventTime = Double.NaN;
+				previousEventTime = Double.NaN;
+				previousEventTime = Double.NaN;
                 final double gb = handler.g(tb, interpolator.getInterpolatedState());
 
                 // check events occurrence
@@ -213,8 +215,50 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					g0 = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
2023-08-02 10:38:37 [main] [INFO]  PatchLogExporter - patch (v45702)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 10:38:37 [main] [INFO]  PatchLogExporter - patch (v45702)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 10:38:37 [main] [INFO]  PatchLogExporter - patch (v45702)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -106,6 +106,29 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
         if (Math.abs(yMin) <= functionValueAccuracy) {
             setResult(yMin, 0);
             return result;
2023-08-02 10:38:37 [main] [INFO]  PatchLogExporter - patch (v45807)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,7 +88,6 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
@@ -107,7 +106,6 @@
   protected AbstractStepInterpolator(final double[] y, final boolean forward) {
 
     previousTime      = Double.NaN;
-    currentTime       = Double.NaN;
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
@@ -169,7 +167,6 @@
   protected void reinitialize(final double[] y, final boolean isForward) {
 
     previousTime      = Double.NaN;
-    currentTime       = Double.NaN;
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
@@ -273,7 +270,9 @@
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
-          dirtyState = false;
+          this.forward = forward;
+		dirtyState = false;
+		finalized = false;
       }
 
       return interpolatedState;
2023-08-02 10:38:37 [main] [INFO]  PatchLogExporter - patch (v45807)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 10:38:37 [main] [INFO]  PatchLogExporter - patch (v45807)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -106,7 +106,6 @@
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
-        nextAction        = EventHandler.CONTINUE;
 
     }
 
@@ -182,6 +181,9 @@
                 // evaluate handler value at the end of the substep
                 tb += h;
                 interpolator.setInterpolatedTime(tb);
+				previousEventTime = Double.NaN;
+				previousEventTime = Double.NaN;
+				previousEventTime = Double.NaN;
                 final double gb = handler.g(tb, interpolator.getInterpolatedState());
 
                 // check events occurrence
@@ -213,8 +215,49 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					g0 = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
2023-08-02 10:38:37 [main] [INFO]  PatchLogExporter - patch (v45807)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 10:38:37 [main] [INFO]  PatchLogExporter - patch (v45807)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 10:38:37 [main] [INFO]  PatchLogExporter - patch (v45807)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -106,6 +106,29 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
         if (Math.abs(yMin) <= functionValueAccuracy) {
             setResult(yMin, 0);
             return result;
2023-08-02 10:38:37 [main] [INFO]  PatchLogExporter - patch (v47036)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,7 +88,6 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
@@ -274,6 +273,8 @@
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
+		finalized = false;
+		finalized = false;
       }
 
       return interpolatedState;
2023-08-02 10:38:37 [main] [INFO]  PatchLogExporter - patch (v47036)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 10:38:37 [main] [INFO]  PatchLogExporter - patch (v47036)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -182,6 +182,7 @@
                 // evaluate handler value at the end of the substep
                 tb += h;
                 interpolator.setInterpolatedTime(tb);
+				previousEventTime = Double.NaN;
                 final double gb = handler.g(tb, interpolator.getInterpolatedState());
 
                 // check events occurrence
@@ -213,8 +214,64 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
+                    increasing = true;
                     solver.setMaximalIterationCount(maxIterationCount);
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
2023-08-02 10:38:37 [main] [INFO]  PatchLogExporter - patch (v47036)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 10:38:37 [main] [INFO]  PatchLogExporter - patch (v47036)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 10:38:37 [main] [INFO]  PatchLogExporter - patch (v47036)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -106,6 +106,20 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
         if (Math.abs(yMin) <= functionValueAccuracy) {
             setResult(yMin, 0);
             return result;
@@ -165,6 +179,8 @@
 
         // Verify bracketing
         double sign = yMin * yMax;
+		this.iterationCount = iterationCount;
+		this.iterationCount = iterationCount;
         if (sign > 0) {
             // check if either value is close to a zero
             if (Math.abs(yMin) <= functionValueAccuracy) {
2023-08-02 10:38:37 [main] [INFO]  PatchLogExporter - patch (v47724)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,7 +88,6 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
2023-08-02 10:38:37 [main] [INFO]  PatchLogExporter - patch (v47724)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 10:38:37 [main] [INFO]  PatchLogExporter - patch (v47724)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -171,6 +171,7 @@
 
             forward = interpolator.isForward();
             final double t1 = interpolator.getCurrentTime();
+			pendingEvent = false;
             final int    n  = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));
             final double h  = (t1 - t0) / n;
 
@@ -182,6 +183,10 @@
                 // evaluate handler value at the end of the substep
                 tb += h;
                 interpolator.setInterpolatedTime(tb);
+				previousEventTime = Double.NaN;
+				previousEventTime = Double.NaN;
+				previousEventTime = Double.NaN;
+				previousEventTime = Double.NaN;
                 final double gb = handler.g(tb, interpolator.getInterpolatedState());
 
                 // check events occurrence
@@ -215,6 +220,62 @@
                     final BrentSolver solver = new BrentSolver();
                     solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
2023-08-02 10:38:37 [main] [INFO]  PatchLogExporter - patch (v47724)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 10:38:37 [main] [INFO]  PatchLogExporter - patch (v47724)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 10:38:37 [main] [INFO]  PatchLogExporter - patch (v47724)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -106,6 +106,17 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
         if (Math.abs(yMin) <= functionValueAccuracy) {
             setResult(yMin, 0);
             return result;
@@ -165,6 +176,10 @@
 
         // Verify bracketing
         double sign = yMin * yMax;
+		this.iterationCount = iterationCount;
+		this.iterationCount = iterationCount;
+		this.iterationCount = iterationCount;
+		this.iterationCount = iterationCount;
         if (sign > 0) {
             // check if either value is close to a zero
             if (Math.abs(yMin) <= functionValueAccuracy) {
@@ -276,10 +291,7 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
+                    this.defaultFunctionValueAccuracy = 1.0e-15;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-08-02 10:38:37 [main] [INFO]  PatchLogExporter - patch (v47740)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,7 +88,6 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
2023-08-02 10:38:37 [main] [INFO]  PatchLogExporter - patch (v47740)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 10:38:37 [main] [INFO]  PatchLogExporter - patch (v47740)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -171,6 +171,7 @@
 
             forward = interpolator.isForward();
             final double t1 = interpolator.getCurrentTime();
+			pendingEvent = false;
             final int    n  = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));
             final double h  = (t1 - t0) / n;
 
@@ -182,6 +183,10 @@
                 // evaluate handler value at the end of the substep
                 tb += h;
                 interpolator.setInterpolatedTime(tb);
+				previousEventTime = Double.NaN;
+				previousEventTime = Double.NaN;
+				previousEventTime = Double.NaN;
+				previousEventTime = Double.NaN;
                 final double gb = handler.g(tb, interpolator.getInterpolatedState());
 
                 // check events occurrence
@@ -213,8 +218,63 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
2023-08-02 10:38:37 [main] [INFO]  PatchLogExporter - patch (v47740)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 10:38:37 [main] [INFO]  PatchLogExporter - patch (v47740)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 10:38:37 [main] [INFO]  PatchLogExporter - patch (v47740)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -106,6 +106,17 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
         if (Math.abs(yMin) <= functionValueAccuracy) {
             setResult(yMin, 0);
             return result;
@@ -165,6 +176,10 @@
 
         // Verify bracketing
         double sign = yMin * yMax;
+		this.iterationCount = iterationCount;
+		this.iterationCount = iterationCount;
+		this.iterationCount = iterationCount;
+		this.iterationCount = iterationCount;
         if (sign > 0) {
             // check if either value is close to a zero
             if (Math.abs(yMin) <= functionValueAccuracy) {
2023-08-02 10:38:37 [main] [INFO]  PatchLogExporter - patch (v48106)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,7 +88,6 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
@@ -107,7 +106,6 @@
   protected AbstractStepInterpolator(final double[] y, final boolean forward) {
 
     previousTime      = Double.NaN;
-    currentTime       = Double.NaN;
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
@@ -274,6 +272,7 @@
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
+		finalized = false;
       }
 
       return interpolatedState;
2023-08-02 10:38:37 [main] [INFO]  PatchLogExporter - patch (v48106)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 10:38:37 [main] [INFO]  PatchLogExporter - patch (v48106)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -182,6 +182,10 @@
                 // evaluate handler value at the end of the substep
                 tb += h;
                 interpolator.setInterpolatedTime(tb);
+				previousEventTime = Double.NaN;
+				previousEventTime = Double.NaN;
+				previousEventTime = Double.NaN;
+				previousEventTime = Double.NaN;
                 final double gb = handler.g(tb, interpolator.getInterpolatedState());
 
                 // check events occurrence
@@ -215,6 +219,60 @@
                     final BrentSolver solver = new BrentSolver();
                     solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
2023-08-02 10:38:37 [main] [INFO]  PatchLogExporter - patch (v48106)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 10:38:37 [main] [INFO]  PatchLogExporter - patch (v48106)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 10:38:37 [main] [INFO]  PatchLogExporter - patch (v48106)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -106,6 +106,22 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
         if (Math.abs(yMin) <= functionValueAccuracy) {
             setResult(yMin, 0);
             return result;
@@ -165,6 +181,7 @@
 
         // Verify bracketing
         double sign = yMin * yMax;
+		this.iterationCount = iterationCount;
         if (sign > 0) {
             // check if either value is close to a zero
             if (Math.abs(yMin) <= functionValueAccuracy) {
@@ -274,8 +291,7 @@
                 } else {
                     p = -p;
                 }
-                if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
-                        p >= Math.abs(0.5 * oldDelta * p1)) {
+                if (Math.abs(oldDelta) < Math.max(relativeAccuracy * Math.abs(x1), absoluteAccuracy)) {
                     // Inverse quadratic interpolation gives a value
                     // in the wrong direction, or progress is slow.
                     // Fall back to bisection.
2023-08-02 10:38:37 [main] [INFO]  PatchLogExporter - patch (v49219)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,10 +88,10 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
-    currentState            = null;
+    final double oneMinusThetaH = currentTime - interpolatedTime;
+	currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
     finalized               = false;
@@ -107,7 +107,6 @@
   protected AbstractStepInterpolator(final double[] y, final boolean forward) {
 
     previousTime      = Double.NaN;
-    currentTime       = Double.NaN;
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
@@ -169,7 +168,6 @@
   protected void reinitialize(final double[] y, final boolean isForward) {
 
     previousTime      = Double.NaN;
-    currentTime       = Double.NaN;
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
@@ -274,6 +272,8 @@
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
+		finalized = false;
+		finalized = false;
       }
 
       return interpolatedState;
2023-08-02 10:38:37 [main] [INFO]  PatchLogExporter - patch (v49219)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 10:38:37 [main] [INFO]  PatchLogExporter - patch (v49219)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -103,7 +103,8 @@
         g0                = Double.NaN;
         g0Positive        = true;
         pendingEvent      = false;
-        pendingEventTime  = Double.NaN;
+		g0Positive = g0 >= 0;
+		pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
         nextAction        = EventHandler.CONTINUE;
@@ -150,7 +151,6 @@
         throws EventException {
         t0 = tStart;
         g0 = handler.g(tStart, yStart);
-        g0Positive = g0 >= 0;
     }
 
     /** Evaluate the impact of the proposed step on the event handler.
@@ -172,7 +172,8 @@
             forward = interpolator.isForward();
             final double t1 = interpolator.getCurrentTime();
             final int    n  = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));
-            final double h  = (t1 - t0) / n;
+            final double t0 = interpolator.getPreviousTime();
+			final double h  = (t1 - t0) / n;
 
             double ta = t0;
             double ga = g0;
@@ -182,6 +183,16 @@
                 // evaluate handler value at the end of the substep
                 tb += h;
                 interpolator.setInterpolatedTime(tb);
+				previousEventTime = Double.NaN;
+				previousEventTime = Double.NaN;
+				previousEventTime = Double.NaN;
+				previousEventTime = Double.NaN;
+				previousEventTime = Double.NaN;
+				previousEventTime = Double.NaN;
+				previousEventTime = Double.NaN;
+				previousEventTime = Double.NaN;
+				previousEventTime = Double.NaN;
+				previousEventTime = Double.NaN;
                 final double gb = handler.g(tb, interpolator.getInterpolatedState());
 
                 // check events occurrence
@@ -215,6 +226,49 @@
                     final BrentSolver solver = new BrentSolver();
                     solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
+					pendingEventTime = Double.NaN;
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
2023-08-02 10:38:37 [main] [INFO]  PatchLogExporter - patch (v49219)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 10:38:37 [main] [INFO]  PatchLogExporter - patch (v49219)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 10:38:37 [main] [INFO]  PatchLogExporter - patch (v49219)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -106,6 +106,20 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
+		verifyBracketing(min, max, f);
         if (Math.abs(yMin) <= functionValueAccuracy) {
             setResult(yMin, 0);
             return result;
@@ -165,6 +179,11 @@
 
         // Verify bracketing
         double sign = yMin * yMax;
+		this.iterationCount = iterationCount;
+		this.iterationCount = iterationCount;
+		this.iterationCount = iterationCount;
+		this.iterationCount = iterationCount;
+		this.iterationCount = iterationCount;
         if (sign > 0) {
             // check if either value is close to a zero
             if (Math.abs(yMin) <= functionValueAccuracy) {
2023-08-02 10:38:37 [main] [INFO]  KGenProgMain - Summary
Reached generation = 500
Generated variants = 49900
Syntax valid variants = 44914
Build succeeded variants = 27222
Time elapsed = 6 hours 2 minutes 1 seconds
Exit status = FAILURE (maximum generation)
