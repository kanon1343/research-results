2023-08-02 16:36:03 [main] [WARN]  Configuration$Builder - The directory where kGenProg is running is different from the root directory of the given target project.
2023-08-02 16:36:03 [main] [WARN]  Configuration$Builder - If the target project includes test cases with file I/O, such test cases won't run correctly.
2023-08-02 16:36:03 [main] [WARN]  Configuration$Builder - We recommend you running kGenProg with the root directory of the target project as the current directory.
2023-08-02 16:36:03 [main] [INFO]  KGenProgMain - 
==================== kGenProg Configuration ====================
configPath = /Users/haradakanon/Downloads/kGenProg-1.8.2/example/math78/kgenprog-78.toml (set by command line)
rootDir = /Users/haradakanon/Downloads/kGenProg-1.8.2/example/math78 (set in config file)
productPaths = [/Users/haradakanon/Downloads/kGenProg-1.8.2/example/math78/src/main] (set in config file)
testPaths = [/Users/haradakanon/Downloads/kGenProg-1.8.2/example/math78/src/test] (set in config file)
classPaths = []
executionTests = [org.apache.commons.math.ode.events.EventStateTest] (set in config file)
outDir = kgenprog-out
logLevel = INFO (set in config file)
mutationGeneratingCount = 50 (set in config file)
crossoverGeneratingCount = 50 (set in config file)
headcount = 25
maxGeneration = 500 (set in config file)
timeLimit = PT24H (set in config file)
testTimeLimit = PT3M (set in config file)
requiredSolutionsCount = 100 (set in config file)
randomSeed = 7 (set by command line)
scope = PACKAGE (set in config file)
faultLocalization = Zoltar (set in config file)
mutationType = Simple
crossoverType = Random
firstVariantSelectionStrategy = Random
secondVariantSelectionStrategy = Random
isPatchOutput = true (set in config file)
isHistoryRecord = false
currentDirectory = /Users/haradakanon/Desktop/研究/実験データ/afterResearch
version = 1.8.2
================================================================
2023-08-02 16:36:20 [main] [INFO]  KGenProgMain - initial failed tests (1/1)
org.apache.commons.math.ode.events.EventStateTest.closeEvents: function values at endpoints do not have different signs.  Endpoints: [89.999, 153.1], Values: [-0.066, -1,142.11]

2023-08-02 16:36:21 [main] [INFO]  KGenProgMain - GA started
2023-08-02 16:36:21 [main] [INFO]  KGenProgMain - entered the era of 1st generation.
2023-08-02 16:36:25 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 seconds
Variants: generated 50, build-succeeded 9, build-failed 34, syntax-invalid 5, redundant 2
Fitness: max 0(9), min 0(9), ave 0
Test execution time: sum 1317 ms, max 239 ms, min 117 ms
----------------------------------------------------------------

2023-08-02 16:36:25 [main] [INFO]  KGenProgMain - entered the era of 2nd generation.
2023-08-02 16:36:31 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 10 seconds
Variants: generated 50, build-succeeded 14, build-failed 28, syntax-invalid 5, redundant 3
Fitness: max 1(1), min 0(13), ave 0.071
Test execution time: sum 1751 ms, max 255 ms, min 68 ms
----------------------------------------------------------------

2023-08-02 16:36:31 [main] [INFO]  KGenProgMain - entered the era of 3rd generation.
2023-08-02 16:36:38 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 17 seconds
Variants: generated 100, build-succeeded 17, build-failed 34, syntax-invalid 5, redundant 44
Fitness: max 0(17), min 0(17), ave 0
Test execution time: sum 1475 ms, max 207 ms, min 58 ms
----------------------------------------------------------------

2023-08-02 16:36:38 [main] [INFO]  KGenProgMain - entered the era of 4th generation.
2023-08-02 16:36:44 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 23 seconds
Variants: generated 100, build-succeeded 25, build-failed 32, syntax-invalid 5, redundant 38
Fitness: max 1(1), min 0(24), ave 0.04
Test execution time: sum 1736 ms, max 204 ms, min 54 ms
----------------------------------------------------------------

2023-08-02 16:36:44 [main] [INFO]  KGenProgMain - entered the era of 5th generation.
2023-08-02 16:36:49 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 28 seconds
Variants: generated 100, build-succeeded 29, build-failed 34, syntax-invalid 6, redundant 31
Fitness: max 1(1), min 0(28), ave 0.034
Test execution time: sum 1902 ms, max 205 ms, min 51 ms
----------------------------------------------------------------

2023-08-02 16:36:49 [main] [INFO]  KGenProgMain - entered the era of 6th generation.
2023-08-02 16:36:55 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 34 seconds
Variants: generated 100, build-succeeded 29, build-failed 32, syntax-invalid 5, redundant 34
Fitness: max 0(29), min 0(29), ave 0
Test execution time: sum 1795 ms, max 131 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 16:36:55 [main] [INFO]  KGenProgMain - entered the era of 7th generation.
2023-08-02 16:37:01 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 40 seconds
Variants: generated 100, build-succeeded 32, build-failed 34, syntax-invalid 4, redundant 30
Fitness: max 0(32), min 0(32), ave 0
Test execution time: sum 1914 ms, max 128 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 16:37:01 [main] [INFO]  KGenProgMain - entered the era of 8th generation.
2023-08-02 16:37:08 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 47 seconds
Variants: generated 100, build-succeeded 36, build-failed 36, syntax-invalid 7, redundant 21
Fitness: max 0(36), min 0(36), ave 0
Test execution time: sum 2305 ms, max 163 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 16:37:08 [main] [INFO]  KGenProgMain - entered the era of 9th generation.
2023-08-02 16:37:14 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 53 seconds
Variants: generated 100, build-succeeded 46, build-failed 29, syntax-invalid 3, redundant 22
Fitness: max 1(1), min 0(45), ave 0.022
Test execution time: sum 2639 ms, max 127 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 16:37:14 [main] [INFO]  KGenProgMain - entered the era of 10th generation.
2023-08-02 16:37:20 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 59 seconds
Variants: generated 100, build-succeeded 35, build-failed 25, syntax-invalid 12, redundant 28
Fitness: max 0(35), min 0(35), ave 0
Test execution time: sum 2119 ms, max 198 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 16:37:20 [main] [INFO]  KGenProgMain - entered the era of 11th generation.
2023-08-02 16:37:26 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 minutes 5 seconds
Variants: generated 100, build-succeeded 37, build-failed 30, syntax-invalid 11, redundant 22
Fitness: max 0(37), min 0(37), ave 0
Test execution time: sum 2222 ms, max 119 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 16:37:26 [main] [INFO]  KGenProgMain - entered the era of 12th generation.
2023-08-02 16:37:32 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 minutes 11 seconds
Variants: generated 100, build-succeeded 43, build-failed 34, syntax-invalid 5, redundant 18
Fitness: max 1(1), min 0(42), ave 0.023
Test execution time: sum 2442 ms, max 112 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 16:37:32 [main] [INFO]  KGenProgMain - entered the era of 13th generation.
2023-08-02 16:37:39 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 minutes 18 seconds
Variants: generated 100, build-succeeded 47, build-failed 30, syntax-invalid 8, redundant 15
Fitness: max 0(47), min 0(47), ave 0
Test execution time: sum 2751 ms, max 121 ms, min 51 ms
----------------------------------------------------------------

2023-08-02 16:37:39 [main] [INFO]  KGenProgMain - entered the era of 14th generation.
2023-08-02 16:37:46 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 minutes 25 seconds
Variants: generated 100, build-succeeded 43, build-failed 32, syntax-invalid 11, redundant 14
Fitness: max 0(43), min 0(43), ave 0
Test execution time: sum 2454 ms, max 111 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 16:37:46 [main] [INFO]  KGenProgMain - entered the era of 15th generation.
2023-08-02 16:37:53 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 minutes 32 seconds
Variants: generated 100, build-succeeded 50, build-failed 37, syntax-invalid 7, redundant 6
Fitness: max 0(50), min 0(50), ave 0
Test execution time: sum 2839 ms, max 118 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 16:37:53 [main] [INFO]  KGenProgMain - entered the era of 16th generation.
2023-08-02 16:38:01 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 minutes 40 seconds
Variants: generated 100, build-succeeded 46, build-failed 35, syntax-invalid 12, redundant 7
Fitness: max 0(46), min 0(46), ave 0
Test execution time: sum 2768 ms, max 152 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 16:38:01 [main] [INFO]  KGenProgMain - entered the era of 17th generation.
2023-08-02 16:38:09 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 minutes 48 seconds
Variants: generated 100, build-succeeded 57, build-failed 26, syntax-invalid 12, redundant 5
Fitness: max 1(2), min 0(55), ave 0.035
Test execution time: sum 3384 ms, max 204 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 16:38:09 [main] [INFO]  KGenProgMain - entered the era of 18th generation.
2023-08-02 16:38:18 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 minutes 57 seconds
Variants: generated 100, build-succeeded 48, build-failed 34, syntax-invalid 3, redundant 15
Fitness: max 0(48), min 0(48), ave 0
Test execution time: sum 3143 ms, max 200 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 16:38:18 [main] [INFO]  KGenProgMain - entered the era of 19th generation.
2023-08-02 16:38:25 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 minutes 4 seconds
Variants: generated 100, build-succeeded 45, build-failed 34, syntax-invalid 7, redundant 14
Fitness: max 0(45), min 0(45), ave 0
Test execution time: sum 2631 ms, max 117 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 16:38:25 [main] [INFO]  KGenProgMain - entered the era of 20th generation.
2023-08-02 16:38:34 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 minutes 13 seconds
Variants: generated 100, build-succeeded 49, build-failed 34, syntax-invalid 3, redundant 14
Fitness: max 0(49), min 0(49), ave 0
Test execution time: sum 2971 ms, max 196 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 16:38:34 [main] [INFO]  KGenProgMain - entered the era of 21st generation.
2023-08-02 16:38:41 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 minutes 20 seconds
Variants: generated 100, build-succeeded 54, build-failed 26, syntax-invalid 7, redundant 13
Fitness: max 0(54), min 0(54), ave 0
Test execution time: sum 3045 ms, max 130 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 16:38:41 [main] [INFO]  KGenProgMain - entered the era of 22nd generation.
2023-08-02 16:38:49 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 minutes 28 seconds
Variants: generated 100, build-succeeded 52, build-failed 34, syntax-invalid 6, redundant 8
Fitness: max 1(2), min 0(50), ave 0.038
Test execution time: sum 2951 ms, max 134 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 16:38:49 [main] [INFO]  KGenProgMain - entered the era of 23rd generation.
2023-08-02 16:38:57 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 minutes 36 seconds
Variants: generated 100, build-succeeded 44, build-failed 32, syntax-invalid 16, redundant 8
Fitness: max 1(1), min 0(43), ave 0.023
Test execution time: sum 2723 ms, max 205 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 16:38:57 [main] [INFO]  KGenProgMain - entered the era of 24th generation.
2023-08-02 16:39:05 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 minutes 44 seconds
Variants: generated 100, build-succeeded 52, build-failed 35, syntax-invalid 5, redundant 8
Fitness: max 1(1), min 0(51), ave 0.019
Test execution time: sum 3116 ms, max 197 ms, min 48 ms
----------------------------------------------------------------

2023-08-02 16:39:05 [main] [INFO]  KGenProgMain - entered the era of 25th generation.
2023-08-02 16:39:12 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 minutes 51 seconds
Variants: generated 100, build-succeeded 49, build-failed 29, syntax-invalid 15, redundant 7
Fitness: max 0(49), min 0(49), ave 0
Test execution time: sum 2813 ms, max 138 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 16:39:12 [main] [INFO]  KGenProgMain - entered the era of 26th generation.
2023-08-02 16:39:21 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 minutes 0 seconds
Variants: generated 100, build-succeeded 46, build-failed 33, syntax-invalid 16, redundant 5
Fitness: max 0(46), min 0(46), ave 0
Test execution time: sum 2902 ms, max 206 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 16:39:21 [main] [INFO]  KGenProgMain - entered the era of 27th generation.
2023-08-02 16:45:29 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 minutes 8 seconds
Variants: generated 100, build-succeeded 52, build-failed 30, syntax-invalid 9, redundant 9
Fitness: max 0(52), min 0(52), ave 0
Test execution time: sum 363065 ms, max 180068 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 16:45:29 [main] [INFO]  KGenProgMain - entered the era of 28th generation.
2023-08-02 16:48:37 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 minutes 16 seconds
Variants: generated 100, build-succeeded 47, build-failed 23, syntax-invalid 15, redundant 15
Fitness: max 0(47), min 0(47), ave 0
Test execution time: sum 182706 ms, max 180055 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 16:48:37 [main] [INFO]  KGenProgMain - entered the era of 29th generation.
2023-08-02 16:48:45 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 minutes 24 seconds
Variants: generated 100, build-succeeded 48, build-failed 36, syntax-invalid 11, redundant 5
Fitness: max 0(48), min 0(48), ave 0
Test execution time: sum 2789 ms, max 209 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 16:48:45 [main] [INFO]  KGenProgMain - entered the era of 30th generation.
2023-08-02 16:48:53 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 minutes 31 seconds
Variants: generated 100, build-succeeded 50, build-failed 30, syntax-invalid 19, redundant 1
Fitness: max 0(50), min 0(50), ave 0
Test execution time: sum 2934 ms, max 203 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 16:48:53 [main] [INFO]  KGenProgMain - entered the era of 31st generation.
2023-08-02 16:52:02 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 15 minutes 41 seconds
Variants: generated 100, build-succeeded 56, build-failed 25, syntax-invalid 10, redundant 9
Fitness: max 0(56), min 0(56), ave 0
Test execution time: sum 183392 ms, max 180063 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 16:52:02 [main] [INFO]  KGenProgMain - entered the era of 32nd generation.
2023-08-02 16:52:11 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 15 minutes 50 seconds
Variants: generated 100, build-succeeded 57, build-failed 31, syntax-invalid 9, redundant 3
Fitness: max 0(57), min 0(57), ave 0
Test execution time: sum 3209 ms, max 144 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 16:52:11 [main] [INFO]  KGenProgMain - entered the era of 33rd generation.
2023-08-02 16:52:19 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 15 minutes 58 seconds
Variants: generated 100, build-succeeded 46, build-failed 30, syntax-invalid 21, redundant 3
Fitness: max 1(1), min 0(45), ave 0.022
Test execution time: sum 2753 ms, max 151 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 16:52:19 [main] [INFO]  KGenProgMain - entered the era of 34th generation.
2023-08-02 16:52:28 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 16 minutes 7 seconds
Variants: generated 100, build-succeeded 55, build-failed 31, syntax-invalid 7, redundant 7
Fitness: max 0(55), min 0(55), ave 0
Test execution time: sum 3049 ms, max 128 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 16:52:28 [main] [INFO]  KGenProgMain - entered the era of 35th generation.
2023-08-02 16:52:37 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 16 minutes 15 seconds
Variants: generated 100, build-succeeded 54, build-failed 36, syntax-invalid 9, redundant 1
Fitness: max 0(54), min 0(54), ave 0
Test execution time: sum 3009 ms, max 137 ms, min 48 ms
----------------------------------------------------------------

2023-08-02 16:52:37 [main] [INFO]  KGenProgMain - entered the era of 36th generation.
2023-08-02 16:52:45 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 16 minutes 24 seconds
Variants: generated 100, build-succeeded 50, build-failed 33, syntax-invalid 11, redundant 6
Fitness: max 0(50), min 0(50), ave 0
Test execution time: sum 2728 ms, max 124 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 16:52:45 [main] [INFO]  KGenProgMain - entered the era of 37th generation.
2023-08-02 16:52:53 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 16 minutes 32 seconds
Variants: generated 100, build-succeeded 40, build-failed 32, syntax-invalid 23, redundant 5
Fitness: max 1(1), min 0(39), ave 0.025
Test execution time: sum 2266 ms, max 129 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 16:52:53 [main] [INFO]  KGenProgMain - entered the era of 38th generation.
2023-08-02 16:53:02 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 16 minutes 40 seconds
Variants: generated 100, build-succeeded 44, build-failed 29, syntax-invalid 25, redundant 2
Fitness: max 0(44), min 0(44), ave 0
Test execution time: sum 2432 ms, max 136 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 16:53:02 [main] [INFO]  KGenProgMain - entered the era of 39th generation.
2023-08-02 16:53:10 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 16 minutes 49 seconds
Variants: generated 100, build-succeeded 45, build-failed 33, syntax-invalid 16, redundant 6
Fitness: max 0(45), min 0(45), ave 0
Test execution time: sum 2538 ms, max 139 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 16:53:10 [main] [INFO]  KGenProgMain - entered the era of 40th generation.
2023-08-02 16:53:18 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 16 minutes 57 seconds
Variants: generated 100, build-succeeded 41, build-failed 31, syntax-invalid 25, redundant 3
Fitness: max 1(2), min 0(39), ave 0.049
Test execution time: sum 2345 ms, max 201 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 16:53:18 [main] [INFO]  KGenProgMain - entered the era of 41st generation.
2023-08-02 16:53:26 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 17 minutes 5 seconds
Variants: generated 100, build-succeeded 44, build-failed 27, syntax-invalid 25, redundant 4
Fitness: max 1(3), min 0(41), ave 0.068
Test execution time: sum 2402 ms, max 71 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 16:53:26 [main] [INFO]  KGenProgMain - entered the era of 42nd generation.
2023-08-02 16:53:35 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 17 minutes 14 seconds
Variants: generated 100, build-succeeded 44, build-failed 29, syntax-invalid 25, redundant 2
Fitness: max 1(3), min 0(41), ave 0.068
Test execution time: sum 2509 ms, max 144 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 16:53:35 [main] [INFO]  KGenProgMain - entered the era of 43rd generation.
2023-08-02 16:53:43 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 17 minutes 22 seconds
Variants: generated 100, build-succeeded 38, build-failed 38, syntax-invalid 22, redundant 2
Fitness: max 0(38), min 0(38), ave 0
Test execution time: sum 2093 ms, max 130 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 16:53:43 [main] [INFO]  KGenProgMain - entered the era of 44th generation.
2023-08-02 16:56:52 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 20 minutes 31 seconds
Variants: generated 100, build-succeeded 49, build-failed 28, syntax-invalid 22, redundant 1
Fitness: max 0(49), min 0(49), ave 0
Test execution time: sum 183189 ms, max 180071 ms, min 51 ms
----------------------------------------------------------------

2023-08-02 16:56:52 [main] [INFO]  KGenProgMain - entered the era of 45th generation.
2023-08-02 16:57:00 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 20 minutes 39 seconds
Variants: generated 100, build-succeeded 41, build-failed 38, syntax-invalid 20, redundant 1
Fitness: max 1(3), min 0(38), ave 0.073
Test execution time: sum 2351 ms, max 103 ms, min 51 ms
----------------------------------------------------------------

2023-08-02 16:57:00 [main] [INFO]  KGenProgMain - entered the era of 46th generation.
2023-08-02 16:57:07 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 20 minutes 46 seconds
Variants: generated 100, build-succeeded 41, build-failed 28, syntax-invalid 25, redundant 6
Fitness: max 1(2), min 0(39), ave 0.049
Test execution time: sum 2272 ms, max 66 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 16:57:07 [main] [INFO]  KGenProgMain - entered the era of 47th generation.
2023-08-02 16:57:15 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 20 minutes 54 seconds
Variants: generated 100, build-succeeded 33, build-failed 28, syntax-invalid 33, redundant 6
Fitness: max 0(33), min 0(33), ave 0
Test execution time: sum 1878 ms, max 140 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 16:57:15 [main] [INFO]  KGenProgMain - entered the era of 48th generation.
2023-08-02 17:00:22 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 24 minutes 1 seconds
Variants: generated 100, build-succeeded 42, build-failed 35, syntax-invalid 19, redundant 4
Fitness: max 1(1), min 0(41), ave 0.024
Test execution time: sum 182191 ms, max 180055 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 17:00:22 [main] [INFO]  KGenProgMain - entered the era of 49th generation.
2023-08-02 17:00:30 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 24 minutes 9 seconds
Variants: generated 100, build-succeeded 39, build-failed 33, syntax-invalid 23, redundant 5
Fitness: max 0(39), min 0(39), ave 0
Test execution time: sum 2109 ms, max 74 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 17:00:30 [main] [INFO]  KGenProgMain - entered the era of 50th generation.
2023-08-02 17:00:38 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 24 minutes 17 seconds
Variants: generated 100, build-succeeded 43, build-failed 32, syntax-invalid 19, redundant 6
Fitness: max 1(3), min 0(40), ave 0.07
Test execution time: sum 2432 ms, max 133 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 17:00:38 [main] [INFO]  KGenProgMain - entered the era of 51st generation.
2023-08-02 17:00:47 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 24 minutes 26 seconds
Variants: generated 100, build-succeeded 50, build-failed 30, syntax-invalid 18, redundant 2
Fitness: max 0(50), min 0(50), ave 0
Test execution time: sum 2744 ms, max 83 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 17:00:47 [main] [INFO]  KGenProgMain - entered the era of 52nd generation.
2023-08-02 17:00:57 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 24 minutes 36 seconds
Variants: generated 100, build-succeeded 50, build-failed 32, syntax-invalid 15, redundant 3
Fitness: max 0(50), min 0(50), ave 0
Test execution time: sum 2875 ms, max 126 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 17:00:57 [main] [INFO]  KGenProgMain - entered the era of 53rd generation.
2023-08-02 17:01:06 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 24 minutes 45 seconds
Variants: generated 100, build-succeeded 54, build-failed 31, syntax-invalid 14, redundant 1
Fitness: max 0(54), min 0(54), ave 0
Test execution time: sum 2923 ms, max 71 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 17:01:06 [main] [INFO]  KGenProgMain - entered the era of 54th generation.
2023-08-02 17:01:16 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 24 minutes 55 seconds
Variants: generated 100, build-succeeded 50, build-failed 29, syntax-invalid 20, redundant 1
Fitness: max 0(50), min 0(50), ave 0
Test execution time: sum 2856 ms, max 148 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 17:01:16 [main] [INFO]  KGenProgMain - entered the era of 55th generation.
2023-08-02 17:01:25 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 25 minutes 4 seconds
Variants: generated 100, build-succeeded 48, build-failed 31, syntax-invalid 17, redundant 4
Fitness: max 0(48), min 0(48), ave 0
Test execution time: sum 2565 ms, max 74 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 17:01:25 [main] [INFO]  KGenProgMain - entered the era of 56th generation.
2023-08-02 17:01:34 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 25 minutes 13 seconds
Variants: generated 100, build-succeeded 46, build-failed 34, syntax-invalid 18, redundant 2
Fitness: max 0(46), min 0(46), ave 0
Test execution time: sum 2733 ms, max 185 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 17:01:34 [main] [INFO]  KGenProgMain - entered the era of 57th generation.
2023-08-02 17:01:43 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 25 minutes 22 seconds
Variants: generated 100, build-succeeded 51, build-failed 29, syntax-invalid 16, redundant 4
Fitness: max 0(51), min 0(51), ave 0
Test execution time: sum 2719 ms, max 76 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 17:01:43 [main] [INFO]  KGenProgMain - entered the era of 58th generation.
2023-08-02 17:01:52 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 25 minutes 31 seconds
Variants: generated 100, build-succeeded 48, build-failed 35, syntax-invalid 15, redundant 2
Fitness: max 1(1), min 0(47), ave 0.021
Test execution time: sum 2802 ms, max 136 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 17:01:52 [main] [INFO]  KGenProgMain - entered the era of 59th generation.
2023-08-02 17:02:02 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 25 minutes 40 seconds
Variants: generated 100, build-succeeded 51, build-failed 30, syntax-invalid 15, redundant 4
Fitness: max 0(51), min 0(51), ave 0
Test execution time: sum 2880 ms, max 75 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 17:02:02 [main] [INFO]  KGenProgMain - entered the era of 60th generation.
2023-08-02 17:02:12 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 25 minutes 51 seconds
Variants: generated 100, build-succeeded 55, build-failed 28, syntax-invalid 13, redundant 4
Fitness: max 1(3), min 0(52), ave 0.055
Test execution time: sum 3190 ms, max 139 ms, min 51 ms
----------------------------------------------------------------

2023-08-02 17:02:12 [main] [INFO]  KGenProgMain - entered the era of 61st generation.
2023-08-02 17:02:22 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 26 minutes 1 seconds
Variants: generated 100, build-succeeded 54, build-failed 28, syntax-invalid 14, redundant 4
Fitness: max 1(2), min 0(52), ave 0.037
Test execution time: sum 3021 ms, max 73 ms, min 51 ms
----------------------------------------------------------------

2023-08-02 17:02:22 [main] [INFO]  KGenProgMain - entered the era of 62nd generation.
2023-08-02 17:02:32 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 26 minutes 11 seconds
Variants: generated 100, build-succeeded 47, build-failed 33, syntax-invalid 13, redundant 7
Fitness: max 0(47), min 0(47), ave 0
Test execution time: sum 2778 ms, max 139 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 17:02:32 [main] [INFO]  KGenProgMain - entered the era of 63rd generation.
2023-08-02 17:02:42 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 26 minutes 21 seconds
Variants: generated 100, build-succeeded 50, build-failed 29, syntax-invalid 19, redundant 2
Fitness: max 0(50), min 0(50), ave 0
Test execution time: sum 2898 ms, max 78 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 17:02:42 [main] [INFO]  KGenProgMain - entered the era of 64th generation.
2023-08-02 17:02:53 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 26 minutes 32 seconds
Variants: generated 100, build-succeeded 53, build-failed 34, syntax-invalid 9, redundant 4
Fitness: max 0(53), min 0(53), ave 0
Test execution time: sum 3063 ms, max 136 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 17:02:53 [main] [INFO]  KGenProgMain - entered the era of 65th generation.
2023-08-02 17:03:03 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 26 minutes 42 seconds
Variants: generated 100, build-succeeded 55, build-failed 26, syntax-invalid 13, redundant 6
Fitness: max 0(55), min 0(55), ave 0
Test execution time: sum 3086 ms, max 126 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 17:03:03 [main] [INFO]  KGenProgMain - entered the era of 66th generation.
2023-08-02 17:03:13 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 26 minutes 52 seconds
Variants: generated 100, build-succeeded 64, build-failed 25, syntax-invalid 8, redundant 3
Fitness: max 0(64), min 0(64), ave 0
Test execution time: sum 3462 ms, max 73 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 17:03:13 [main] [INFO]  KGenProgMain - entered the era of 67th generation.
2023-08-02 17:06:24 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 30 minutes 3 seconds
Variants: generated 100, build-succeeded 46, build-failed 31, syntax-invalid 15, redundant 8
Fitness: max 0(46), min 0(46), ave 0
Test execution time: sum 182927 ms, max 180079 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 17:06:24 [main] [INFO]  KGenProgMain - entered the era of 68th generation.
2023-08-02 17:06:33 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 30 minutes 12 seconds
Variants: generated 100, build-succeeded 48, build-failed 29, syntax-invalid 18, redundant 5
Fitness: max 0(48), min 0(48), ave 0
Test execution time: sum 2654 ms, max 79 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 17:06:33 [main] [INFO]  KGenProgMain - entered the era of 69th generation.
2023-08-02 17:09:44 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 33 minutes 23 seconds
Variants: generated 100, build-succeeded 51, build-failed 29, syntax-invalid 19, redundant 1
Fitness: max 0(51), min 0(51), ave 0
Test execution time: sum 183039 ms, max 180063 ms, min 51 ms
----------------------------------------------------------------

2023-08-02 17:09:44 [main] [INFO]  KGenProgMain - entered the era of 70th generation.
2023-08-02 17:09:52 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 33 minutes 31 seconds
Variants: generated 100, build-succeeded 32, build-failed 34, syntax-invalid 30, redundant 4
Fitness: max 0(32), min 0(32), ave 0
Test execution time: sum 1776 ms, max 78 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 17:09:52 [main] [INFO]  KGenProgMain - entered the era of 71st generation.
2023-08-02 17:10:02 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 33 minutes 41 seconds
Variants: generated 100, build-succeeded 46, build-failed 31, syntax-invalid 21, redundant 2
Fitness: max 0(46), min 0(46), ave 0
Test execution time: sum 2684 ms, max 144 ms, min 51 ms
----------------------------------------------------------------

2023-08-02 17:10:02 [main] [INFO]  KGenProgMain - entered the era of 72nd generation.
2023-08-02 17:10:13 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 33 minutes 52 seconds
Variants: generated 100, build-succeeded 54, build-failed 28, syntax-invalid 14, redundant 4
Fitness: max 0(54), min 0(54), ave 0
Test execution time: sum 2939 ms, max 77 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 17:10:13 [main] [INFO]  KGenProgMain - entered the era of 73rd generation.
2023-08-02 17:10:22 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 34 minutes 1 seconds
Variants: generated 100, build-succeeded 46, build-failed 28, syntax-invalid 22, redundant 4
Fitness: max 0(46), min 0(46), ave 0
Test execution time: sum 2623 ms, max 66 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 17:10:22 [main] [INFO]  KGenProgMain - entered the era of 74th generation.
2023-08-02 17:10:33 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 34 minutes 12 seconds
Variants: generated 100, build-succeeded 42, build-failed 37, syntax-invalid 20, redundant 1
Fitness: max 0(42), min 0(42), ave 0
Test execution time: sum 2450 ms, max 137 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 17:10:33 [main] [INFO]  KGenProgMain - entered the era of 75th generation.
2023-08-02 17:13:42 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 37 minutes 21 seconds
Variants: generated 100, build-succeeded 40, build-failed 33, syntax-invalid 24, redundant 3
Fitness: max 1(1), min 0(39), ave 0.025
Test execution time: sum 182203 ms, max 180065 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 17:13:42 [main] [INFO]  KGenProgMain - entered the era of 76th generation.
2023-08-02 17:19:56 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 43 minutes 34 seconds
Variants: generated 100, build-succeeded 50, build-failed 27, syntax-invalid 21, redundant 2
Fitness: max 1(1), min 0(49), ave 0.02
Test execution time: sum 363412 ms, max 180117 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 17:19:56 [main] [INFO]  KGenProgMain - entered the era of 77th generation.
2023-08-02 17:23:08 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 46 minutes 47 seconds
Variants: generated 100, build-succeeded 41, build-failed 33, syntax-invalid 22, redundant 4
Fitness: max 0(41), min 0(41), ave 0
Test execution time: sum 182567 ms, max 180054 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 17:23:08 [main] [INFO]  KGenProgMain - entered the era of 78th generation.
2023-08-02 17:23:21 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 47 minutes 0 seconds
Variants: generated 100, build-succeeded 37, build-failed 30, syntax-invalid 30, redundant 3
Fitness: max 1(1), min 0(36), ave 0.027
Test execution time: sum 2355 ms, max 178 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 17:23:21 [main] [INFO]  KGenProgMain - entered the era of 79th generation.
2023-08-02 17:29:35 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 53 minutes 14 seconds
Variants: generated 100, build-succeeded 40, build-failed 27, syntax-invalid 30, redundant 3
Fitness: max 0(40), min 0(40), ave 0
Test execution time: sum 363170 ms, max 180196 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 17:29:35 [main] [INFO]  KGenProgMain - entered the era of 80th generation.
2023-08-02 17:32:48 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 56 minutes 27 seconds
Variants: generated 100, build-succeeded 43, build-failed 29, syntax-invalid 24, redundant 4
Fitness: max 0(43), min 0(43), ave 0
Test execution time: sum 183004 ms, max 180101 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 17:32:48 [main] [INFO]  KGenProgMain - entered the era of 81st generation.
2023-08-02 17:33:01 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 56 minutes 40 seconds
Variants: generated 100, build-succeeded 47, build-failed 33, syntax-invalid 19, redundant 1
Fitness: max 0(47), min 0(47), ave 0
Test execution time: sum 2890 ms, max 175 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 17:33:01 [main] [INFO]  KGenProgMain - entered the era of 82nd generation.
2023-08-02 17:33:12 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 56 minutes 51 seconds
Variants: generated 100, build-succeeded 35, build-failed 30, syntax-invalid 31, redundant 4
Fitness: max 1(1), min 0(34), ave 0.029
Test execution time: sum 2312 ms, max 180 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 17:33:12 [main] [INFO]  KGenProgMain - entered the era of 83rd generation.
2023-08-02 17:33:24 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 57 minutes 2 seconds
Variants: generated 100, build-succeeded 39, build-failed 32, syntax-invalid 26, redundant 3
Fitness: max 0(39), min 0(39), ave 0
Test execution time: sum 2235 ms, max 112 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 17:33:24 [main] [INFO]  KGenProgMain - entered the era of 84th generation.
2023-08-02 17:36:36 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 15 seconds
Variants: generated 100, build-succeeded 43, build-failed 27, syntax-invalid 23, redundant 7
Fitness: max 0(43), min 0(43), ave 0
Test execution time: sum 182819 ms, max 180065 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 17:36:36 [main] [INFO]  KGenProgMain - entered the era of 85th generation.
2023-08-02 17:39:47 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 3 minutes 26 seconds
Variants: generated 100, build-succeeded 42, build-failed 32, syntax-invalid 23, redundant 3
Fitness: max 1(1), min 0(41), ave 0.024
Test execution time: sum 182532 ms, max 180063 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 17:39:47 [main] [INFO]  KGenProgMain - entered the era of 86th generation.
2023-08-02 17:42:59 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 6 minutes 38 seconds
Variants: generated 100, build-succeeded 46, build-failed 28, syntax-invalid 23, redundant 3
Fitness: max 0(46), min 0(46), ave 0
Test execution time: sum 182741 ms, max 180059 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 17:42:59 [main] [INFO]  KGenProgMain - entered the era of 87th generation.
2023-08-02 17:43:12 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 6 minutes 51 seconds
Variants: generated 100, build-succeeded 44, build-failed 32, syntax-invalid 21, redundant 3
Fitness: max 0(44), min 0(44), ave 0
Test execution time: sum 2680 ms, max 184 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 17:43:12 [main] [INFO]  KGenProgMain - entered the era of 88th generation.
2023-08-02 17:55:25 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 19 minutes 4 seconds
Variants: generated 100, build-succeeded 53, build-failed 26, syntax-invalid 17, redundant 4
Fitness: max 0(53), min 0(53), ave 0
Test execution time: sum 723392 ms, max 180114 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 17:55:25 [main] [INFO]  KGenProgMain - entered the era of 89th generation.
2023-08-02 18:01:38 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 25 minutes 17 seconds
Variants: generated 100, build-succeeded 45, build-failed 35, syntax-invalid 17, redundant 3
Fitness: max 0(45), min 0(45), ave 0
Test execution time: sum 363050 ms, max 180084 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 18:01:38 [main] [INFO]  KGenProgMain - entered the era of 90th generation.
2023-08-02 18:04:50 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 28 minutes 29 seconds
Variants: generated 100, build-succeeded 47, build-failed 27, syntax-invalid 21, redundant 5
Fitness: max 0(47), min 0(47), ave 0
Test execution time: sum 182715 ms, max 180058 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 18:04:50 [main] [INFO]  KGenProgMain - entered the era of 91st generation.
2023-08-02 18:05:03 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 28 minutes 42 seconds
Variants: generated 100, build-succeeded 44, build-failed 29, syntax-invalid 22, redundant 5
Fitness: max 0(44), min 0(44), ave 0
Test execution time: sum 2661 ms, max 167 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 18:05:03 [main] [INFO]  KGenProgMain - entered the era of 92nd generation.
2023-08-02 18:05:15 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 28 minutes 54 seconds
Variants: generated 100, build-succeeded 40, build-failed 30, syntax-invalid 27, redundant 3
Fitness: max 0(40), min 0(40), ave 0
Test execution time: sum 2307 ms, max 113 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 18:05:15 [main] [INFO]  KGenProgMain - entered the era of 93rd generation.
2023-08-02 18:05:26 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 29 minutes 5 seconds
Variants: generated 100, build-succeeded 31, build-failed 34, syntax-invalid 30, redundant 5
Fitness: max 0(31), min 0(31), ave 0
Test execution time: sum 1847 ms, max 123 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 18:05:26 [main] [INFO]  KGenProgMain - entered the era of 94th generation.
2023-08-02 18:05:38 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 29 minutes 17 seconds
Variants: generated 100, build-succeeded 43, build-failed 27, syntax-invalid 27, redundant 3
Fitness: max 0(43), min 0(43), ave 0
Test execution time: sum 2500 ms, max 123 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 18:05:38 [main] [INFO]  KGenProgMain - entered the era of 95th generation.
2023-08-02 18:05:49 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 29 minutes 28 seconds
Variants: generated 100, build-succeeded 38, build-failed 27, syntax-invalid 30, redundant 5
Fitness: max 0(38), min 0(38), ave 0
Test execution time: sum 2164 ms, max 116 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 18:05:49 [main] [INFO]  KGenProgMain - entered the era of 96th generation.
2023-08-02 18:06:00 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 29 minutes 39 seconds
Variants: generated 100, build-succeeded 32, build-failed 33, syntax-invalid 32, redundant 3
Fitness: max 0(32), min 0(32), ave 0
Test execution time: sum 1893 ms, max 138 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 18:06:00 [main] [INFO]  KGenProgMain - entered the era of 97th generation.
2023-08-02 18:06:12 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 29 minutes 51 seconds
Variants: generated 100, build-succeeded 38, build-failed 35, syntax-invalid 27, redundant 0
Fitness: max 0(38), min 0(38), ave 0
Test execution time: sum 2200 ms, max 177 ms, min 48 ms
----------------------------------------------------------------

2023-08-02 18:06:12 [main] [INFO]  KGenProgMain - entered the era of 98th generation.
2023-08-02 18:06:24 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 30 minutes 3 seconds
Variants: generated 100, build-succeeded 41, build-failed 29, syntax-invalid 29, redundant 1
Fitness: max 0(41), min 0(41), ave 0
Test execution time: sum 2323 ms, max 116 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 18:06:24 [main] [INFO]  KGenProgMain - entered the era of 99th generation.
2023-08-02 18:06:36 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 30 minutes 15 seconds
Variants: generated 100, build-succeeded 39, build-failed 30, syntax-invalid 27, redundant 4
Fitness: max 0(39), min 0(39), ave 0
Test execution time: sum 2239 ms, max 130 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 18:06:36 [main] [INFO]  KGenProgMain - entered the era of 100th generation.
2023-08-02 18:06:48 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 30 minutes 27 seconds
Variants: generated 100, build-succeeded 40, build-failed 33, syntax-invalid 24, redundant 3
Fitness: max 0(40), min 0(40), ave 0
Test execution time: sum 2230 ms, max 116 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 18:06:48 [main] [INFO]  KGenProgMain - entered the era of 101st generation.
2023-08-02 18:07:00 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 30 minutes 39 seconds
Variants: generated 100, build-succeeded 42, build-failed 25, syntax-invalid 26, redundant 7
Fitness: max 0(42), min 0(42), ave 0
Test execution time: sum 2489 ms, max 168 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 18:07:00 [main] [INFO]  KGenProgMain - entered the era of 102nd generation.
2023-08-02 18:07:12 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 30 minutes 51 seconds
Variants: generated 100, build-succeeded 38, build-failed 32, syntax-invalid 29, redundant 1
Fitness: max 0(38), min 0(38), ave 0
Test execution time: sum 2217 ms, max 116 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 18:07:12 [main] [INFO]  KGenProgMain - entered the era of 103rd generation.
2023-08-02 18:07:25 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 31 minutes 3 seconds
Variants: generated 100, build-succeeded 42, build-failed 28, syntax-invalid 24, redundant 6
Fitness: max 0(42), min 0(42), ave 0
Test execution time: sum 2510 ms, max 175 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 18:07:25 [main] [INFO]  KGenProgMain - entered the era of 104th generation.
2023-08-02 18:07:38 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 31 minutes 17 seconds
Variants: generated 100, build-succeeded 49, build-failed 27, syntax-invalid 21, redundant 3
Fitness: max 0(49), min 0(49), ave 0
Test execution time: sum 2874 ms, max 161 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 18:07:38 [main] [INFO]  KGenProgMain - entered the era of 105th generation.
2023-08-02 18:07:51 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 31 minutes 30 seconds
Variants: generated 100, build-succeeded 40, build-failed 31, syntax-invalid 24, redundant 5
Fitness: max 0(40), min 0(40), ave 0
Test execution time: sum 2314 ms, max 115 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 18:07:51 [main] [INFO]  KGenProgMain - entered the era of 106th generation.
2023-08-02 18:08:03 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 31 minutes 42 seconds
Variants: generated 100, build-succeeded 37, build-failed 32, syntax-invalid 26, redundant 5
Fitness: max 0(37), min 0(37), ave 0
Test execution time: sum 2117 ms, max 124 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 18:08:03 [main] [INFO]  KGenProgMain - entered the era of 107th generation.
2023-08-02 18:08:16 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 31 minutes 55 seconds
Variants: generated 100, build-succeeded 41, build-failed 29, syntax-invalid 25, redundant 5
Fitness: max 0(41), min 0(41), ave 0
Test execution time: sum 2364 ms, max 114 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 18:08:16 [main] [INFO]  KGenProgMain - entered the era of 108th generation.
2023-08-02 18:08:28 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 32 minutes 7 seconds
Variants: generated 100, build-succeeded 38, build-failed 28, syntax-invalid 29, redundant 5
Fitness: max 0(38), min 0(38), ave 0
Test execution time: sum 2151 ms, max 113 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 18:08:28 [main] [INFO]  KGenProgMain - entered the era of 109th generation.
2023-08-02 18:08:41 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 32 minutes 20 seconds
Variants: generated 100, build-succeeded 40, build-failed 32, syntax-invalid 23, redundant 5
Fitness: max 0(40), min 0(40), ave 0
Test execution time: sum 2283 ms, max 108 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 18:08:41 [main] [INFO]  KGenProgMain - entered the era of 110th generation.
2023-08-02 18:08:55 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 32 minutes 34 seconds
Variants: generated 100, build-succeeded 49, build-failed 27, syntax-invalid 20, redundant 4
Fitness: max 0(49), min 0(49), ave 0
Test execution time: sum 2788 ms, max 134 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 18:08:55 [main] [INFO]  KGenProgMain - entered the era of 111th generation.
2023-08-02 18:09:08 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 32 minutes 47 seconds
Variants: generated 100, build-succeeded 48, build-failed 27, syntax-invalid 22, redundant 3
Fitness: max 0(48), min 0(48), ave 0
Test execution time: sum 2732 ms, max 112 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 18:09:08 [main] [INFO]  KGenProgMain - entered the era of 112th generation.
2023-08-02 18:09:22 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 33 minutes 1 seconds
Variants: generated 100, build-succeeded 41, build-failed 38, syntax-invalid 19, redundant 2
Fitness: max 0(41), min 0(41), ave 0
Test execution time: sum 2502 ms, max 188 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 18:09:22 [main] [INFO]  KGenProgMain - entered the era of 113th generation.
2023-08-02 18:09:37 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 33 minutes 15 seconds
Variants: generated 100, build-succeeded 53, build-failed 26, syntax-invalid 16, redundant 5
Fitness: max 0(53), min 0(53), ave 0
Test execution time: sum 3048 ms, max 114 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 18:09:37 [main] [INFO]  KGenProgMain - entered the era of 114th generation.
2023-08-02 18:09:51 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 33 minutes 29 seconds
Variants: generated 100, build-succeeded 44, build-failed 34, syntax-invalid 17, redundant 5
Fitness: max 1(1), min 0(43), ave 0.023
Test execution time: sum 2553 ms, max 121 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 18:09:51 [main] [INFO]  KGenProgMain - entered the era of 115th generation.
2023-08-02 18:10:06 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 33 minutes 45 seconds
Variants: generated 100, build-succeeded 53, build-failed 29, syntax-invalid 18, redundant 0
Fitness: max 0(53), min 0(53), ave 0
Test execution time: sum 3111 ms, max 118 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 18:10:06 [main] [INFO]  KGenProgMain - entered the era of 116th generation.
2023-08-02 18:10:20 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 33 minutes 59 seconds
Variants: generated 100, build-succeeded 44, build-failed 30, syntax-invalid 23, redundant 3
Fitness: max 0(44), min 0(44), ave 0
Test execution time: sum 2580 ms, max 125 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 18:10:20 [main] [INFO]  KGenProgMain - entered the era of 117th generation.
2023-08-02 18:10:34 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 34 minutes 13 seconds
Variants: generated 100, build-succeeded 50, build-failed 25, syntax-invalid 17, redundant 8
Fitness: max 0(50), min 0(50), ave 0
Test execution time: sum 2877 ms, max 117 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 18:10:34 [main] [INFO]  KGenProgMain - entered the era of 118th generation.
2023-08-02 18:10:49 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 34 minutes 28 seconds
Variants: generated 100, build-succeeded 49, build-failed 31, syntax-invalid 14, redundant 6
Fitness: max 0(49), min 0(49), ave 0
Test execution time: sum 2902 ms, max 152 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 18:10:49 [main] [INFO]  KGenProgMain - entered the era of 119th generation.
2023-08-02 18:11:04 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 34 minutes 42 seconds
Variants: generated 100, build-succeeded 47, build-failed 33, syntax-invalid 15, redundant 5
Fitness: max 1(1), min 0(46), ave 0.021
Test execution time: sum 2719 ms, max 142 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 18:11:04 [main] [INFO]  KGenProgMain - entered the era of 120th generation.
2023-08-02 18:11:20 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 34 minutes 59 seconds
Variants: generated 100, build-succeeded 59, build-failed 31, syntax-invalid 8, redundant 2
Fitness: max 0(59), min 0(59), ave 0
Test execution time: sum 3486 ms, max 123 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 18:11:20 [main] [INFO]  KGenProgMain - entered the era of 121st generation.
2023-08-02 18:11:35 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 35 minutes 14 seconds
Variants: generated 100, build-succeeded 53, build-failed 36, syntax-invalid 6, redundant 5
Fitness: max 0(53), min 0(53), ave 0
Test execution time: sum 3076 ms, max 106 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 18:11:35 [main] [INFO]  KGenProgMain - entered the era of 122nd generation.
2023-08-02 18:11:50 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 35 minutes 29 seconds
Variants: generated 100, build-succeeded 51, build-failed 38, syntax-invalid 10, redundant 1
Fitness: max 0(51), min 0(51), ave 0
Test execution time: sum 2996 ms, max 116 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 18:11:50 [main] [INFO]  KGenProgMain - entered the era of 123rd generation.
2023-08-02 18:12:06 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 35 minutes 45 seconds
Variants: generated 100, build-succeeded 56, build-failed 29, syntax-invalid 9, redundant 6
Fitness: max 0(56), min 0(56), ave 0
Test execution time: sum 3458 ms, max 179 ms, min 51 ms
----------------------------------------------------------------

2023-08-02 18:12:06 [main] [INFO]  KGenProgMain - entered the era of 124th generation.
2023-08-02 18:12:22 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 36 minutes 1 seconds
Variants: generated 100, build-succeeded 54, build-failed 36, syntax-invalid 7, redundant 3
Fitness: max 1(1), min 0(53), ave 0.019
Test execution time: sum 3222 ms, max 127 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 18:12:22 [main] [INFO]  KGenProgMain - entered the era of 125th generation.
2023-08-02 18:12:37 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 36 minutes 16 seconds
Variants: generated 100, build-succeeded 54, build-failed 31, syntax-invalid 11, redundant 4
Fitness: max 1(1), min 0(53), ave 0.019
Test execution time: sum 3192 ms, max 147 ms, min 52 ms
----------------------------------------------------------------

2023-08-02 18:12:37 [main] [INFO]  KGenProgMain - entered the era of 126th generation.
2023-08-02 18:12:53 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 36 minutes 32 seconds
Variants: generated 100, build-succeeded 58, build-failed 29, syntax-invalid 10, redundant 3
Fitness: max 0(58), min 0(58), ave 0
Test execution time: sum 3418 ms, max 126 ms, min 51 ms
----------------------------------------------------------------

2023-08-02 18:12:53 [main] [INFO]  KGenProgMain - entered the era of 127th generation.
2023-08-02 18:13:09 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 36 minutes 48 seconds
Variants: generated 100, build-succeeded 57, build-failed 31, syntax-invalid 6, redundant 6
Fitness: max 1(1), min 0(56), ave 0.018
Test execution time: sum 3375 ms, max 148 ms, min 51 ms
----------------------------------------------------------------

2023-08-02 18:13:09 [main] [INFO]  KGenProgMain - entered the era of 128th generation.
2023-08-02 18:13:25 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 37 minutes 4 seconds
Variants: generated 100, build-succeeded 53, build-failed 29, syntax-invalid 14, redundant 4
Fitness: max 1(1), min 0(52), ave 0.019
Test execution time: sum 3186 ms, max 121 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 18:13:25 [main] [INFO]  KGenProgMain - entered the era of 129th generation.
2023-08-02 18:13:41 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 37 minutes 20 seconds
Variants: generated 100, build-succeeded 58, build-failed 32, syntax-invalid 8, redundant 2
Fitness: max 0(58), min 0(58), ave 0
Test execution time: sum 3246 ms, max 120 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 18:13:41 [main] [INFO]  KGenProgMain - entered the era of 130th generation.
2023-08-02 18:13:56 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 37 minutes 35 seconds
Variants: generated 100, build-succeeded 53, build-failed 31, syntax-invalid 10, redundant 6
Fitness: max 0(53), min 0(53), ave 0
Test execution time: sum 3057 ms, max 174 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 18:13:56 [main] [INFO]  KGenProgMain - entered the era of 131st generation.
2023-08-02 18:14:11 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 37 minutes 50 seconds
Variants: generated 100, build-succeeded 53, build-failed 32, syntax-invalid 9, redundant 6
Fitness: max 0(53), min 0(53), ave 0
Test execution time: sum 2917 ms, max 122 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 18:14:11 [main] [INFO]  KGenProgMain - entered the era of 132nd generation.
2023-08-02 18:14:27 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 38 minutes 6 seconds
Variants: generated 100, build-succeeded 62, build-failed 29, syntax-invalid 4, redundant 5
Fitness: max 0(62), min 0(62), ave 0
Test execution time: sum 3506 ms, max 156 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 18:14:27 [main] [INFO]  KGenProgMain - entered the era of 133rd generation.
2023-08-02 18:14:43 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 38 minutes 22 seconds
Variants: generated 100, build-succeeded 64, build-failed 24, syntax-invalid 6, redundant 6
Fitness: max 0(64), min 0(64), ave 0
Test execution time: sum 3514 ms, max 157 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 18:14:43 [main] [INFO]  KGenProgMain - entered the era of 134th generation.
2023-08-02 18:15:01 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 38 minutes 39 seconds
Variants: generated 100, build-succeeded 59, build-failed 30, syntax-invalid 7, redundant 4
Fitness: max 0(59), min 0(59), ave 0
Test execution time: sum 3362 ms, max 121 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 18:15:01 [main] [INFO]  KGenProgMain - entered the era of 135th generation.
2023-08-02 18:15:16 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 38 minutes 55 seconds
Variants: generated 100, build-succeeded 62, build-failed 22, syntax-invalid 9, redundant 7
Fitness: max 0(62), min 0(62), ave 0
Test execution time: sum 3470 ms, max 129 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 18:15:16 [main] [INFO]  KGenProgMain - entered the era of 136th generation.
2023-08-02 18:15:33 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 39 minutes 11 seconds
Variants: generated 100, build-succeeded 57, build-failed 32, syntax-invalid 3, redundant 8
Fitness: max 0(57), min 0(57), ave 0
Test execution time: sum 3153 ms, max 118 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 18:15:33 [main] [INFO]  KGenProgMain - entered the era of 137th generation.
2023-08-02 18:15:49 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 39 minutes 28 seconds
Variants: generated 100, build-succeeded 60, build-failed 30, syntax-invalid 5, redundant 5
Fitness: max 0(60), min 0(60), ave 0
Test execution time: sum 3314 ms, max 108 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 18:15:49 [main] [INFO]  KGenProgMain - entered the era of 138th generation.
2023-08-02 18:16:05 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 39 minutes 44 seconds
Variants: generated 100, build-succeeded 55, build-failed 30, syntax-invalid 12, redundant 3
Fitness: max 0(55), min 0(55), ave 0
Test execution time: sum 3096 ms, max 127 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 18:16:05 [main] [INFO]  KGenProgMain - entered the era of 139th generation.
2023-08-02 18:16:21 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 40 minutes 0 seconds
Variants: generated 100, build-succeeded 60, build-failed 26, syntax-invalid 7, redundant 7
Fitness: max 0(60), min 0(60), ave 0
Test execution time: sum 3298 ms, max 110 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 18:16:22 [main] [INFO]  KGenProgMain - entered the era of 140th generation.
2023-08-02 18:16:38 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 40 minutes 17 seconds
Variants: generated 100, build-succeeded 57, build-failed 28, syntax-invalid 10, redundant 5
Fitness: max 1(1), min 0(56), ave 0.018
Test execution time: sum 3164 ms, max 105 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 18:16:38 [main] [INFO]  KGenProgMain - entered the era of 141st generation.
2023-08-02 18:16:54 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 40 minutes 33 seconds
Variants: generated 100, build-succeeded 53, build-failed 32, syntax-invalid 9, redundant 6
Fitness: max 0(53), min 0(53), ave 0
Test execution time: sum 2966 ms, max 108 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 18:16:54 [main] [INFO]  KGenProgMain - entered the era of 142nd generation.
2023-08-02 18:17:11 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 40 minutes 50 seconds
Variants: generated 100, build-succeeded 67, build-failed 21, syntax-invalid 7, redundant 5
Fitness: max 0(67), min 0(67), ave 0
Test execution time: sum 3827 ms, max 131 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 18:17:11 [main] [INFO]  KGenProgMain - entered the era of 143rd generation.
2023-08-02 18:17:29 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 41 minutes 8 seconds
Variants: generated 100, build-succeeded 65, build-failed 31, syntax-invalid 1, redundant 3
Fitness: max 0(65), min 0(65), ave 0
Test execution time: sum 3783 ms, max 132 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 18:17:29 [main] [INFO]  KGenProgMain - entered the era of 144th generation.
2023-08-02 18:17:45 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 41 minutes 24 seconds
Variants: generated 100, build-succeeded 60, build-failed 34, syntax-invalid 3, redundant 3
Fitness: max 0(60), min 0(60), ave 0
Test execution time: sum 3249 ms, max 103 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 18:17:45 [main] [INFO]  KGenProgMain - entered the era of 145th generation.
2023-08-02 18:18:01 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 41 minutes 40 seconds
Variants: generated 100, build-succeeded 62, build-failed 23, syntax-invalid 4, redundant 11
Fitness: max 0(62), min 0(62), ave 0
Test execution time: sum 3468 ms, max 130 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 18:18:01 [main] [INFO]  KGenProgMain - entered the era of 146th generation.
2023-08-02 18:18:17 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 41 minutes 56 seconds
Variants: generated 100, build-succeeded 54, build-failed 28, syntax-invalid 14, redundant 4
Fitness: max 0(54), min 0(54), ave 0
Test execution time: sum 2995 ms, max 105 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 18:18:17 [main] [INFO]  KGenProgMain - entered the era of 147th generation.
2023-08-02 18:18:33 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 42 minutes 12 seconds
Variants: generated 100, build-succeeded 65, build-failed 25, syntax-invalid 3, redundant 7
Fitness: max 0(65), min 0(65), ave 0
Test execution time: sum 3597 ms, max 105 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 18:18:33 [main] [INFO]  KGenProgMain - entered the era of 148th generation.
2023-08-02 18:18:50 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 42 minutes 29 seconds
Variants: generated 100, build-succeeded 65, build-failed 26, syntax-invalid 5, redundant 4
Fitness: max 1(2), min 0(63), ave 0.031
Test execution time: sum 3673 ms, max 123 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 18:18:50 [main] [INFO]  KGenProgMain - entered the era of 149th generation.
2023-08-02 18:19:06 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 42 minutes 45 seconds
Variants: generated 100, build-succeeded 53, build-failed 31, syntax-invalid 12, redundant 4
Fitness: max 0(53), min 0(53), ave 0
Test execution time: sum 2963 ms, max 115 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 18:19:06 [main] [INFO]  KGenProgMain - entered the era of 150th generation.
2023-08-02 18:19:22 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 43 minutes 1 seconds
Variants: generated 100, build-succeeded 59, build-failed 33, syntax-invalid 4, redundant 4
Fitness: max 0(59), min 0(59), ave 0
Test execution time: sum 3344 ms, max 172 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 18:19:22 [main] [INFO]  KGenProgMain - entered the era of 151st generation.
2023-08-02 18:19:39 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 43 minutes 18 seconds
Variants: generated 100, build-succeeded 59, build-failed 34, syntax-invalid 4, redundant 3
Fitness: max 0(59), min 0(59), ave 0
Test execution time: sum 3246 ms, max 109 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 18:19:39 [main] [INFO]  KGenProgMain - entered the era of 152nd generation.
2023-08-02 18:19:55 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 43 minutes 34 seconds
Variants: generated 100, build-succeeded 62, build-failed 25, syntax-invalid 4, redundant 9
Fitness: max 0(62), min 0(62), ave 0
Test execution time: sum 3470 ms, max 121 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 18:19:55 [main] [INFO]  KGenProgMain - entered the era of 153rd generation.
2023-08-02 18:20:12 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 43 minutes 51 seconds
Variants: generated 100, build-succeeded 64, build-failed 25, syntax-invalid 4, redundant 7
Fitness: max 0(64), min 0(64), ave 0
Test execution time: sum 3624 ms, max 121 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 18:20:12 [main] [INFO]  KGenProgMain - entered the era of 154th generation.
2023-08-02 18:20:28 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 44 minutes 7 seconds
Variants: generated 100, build-succeeded 57, build-failed 32, syntax-invalid 4, redundant 7
Fitness: max 0(57), min 0(57), ave 0
Test execution time: sum 3167 ms, max 117 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 18:20:28 [main] [INFO]  KGenProgMain - entered the era of 155th generation.
2023-08-02 18:20:45 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 44 minutes 24 seconds
Variants: generated 100, build-succeeded 67, build-failed 25, syntax-invalid 4, redundant 4
Fitness: max 0(67), min 0(67), ave 0
Test execution time: sum 3844 ms, max 106 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 18:20:45 [main] [INFO]  KGenProgMain - entered the era of 156th generation.
2023-08-02 18:21:03 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 44 minutes 42 seconds
Variants: generated 100, build-succeeded 61, build-failed 32, syntax-invalid 4, redundant 3
Fitness: max 0(61), min 0(61), ave 0
Test execution time: sum 3649 ms, max 178 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 18:21:03 [main] [INFO]  KGenProgMain - entered the era of 157th generation.
2023-08-02 18:21:20 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 44 minutes 59 seconds
Variants: generated 100, build-succeeded 60, build-failed 33, syntax-invalid 4, redundant 3
Fitness: max 0(60), min 0(60), ave 0
Test execution time: sum 3335 ms, max 135 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 18:21:20 [main] [INFO]  KGenProgMain - entered the era of 158th generation.
2023-08-02 18:21:36 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 45 minutes 15 seconds
Variants: generated 100, build-succeeded 63, build-failed 30, syntax-invalid 3, redundant 4
Fitness: max 0(63), min 0(63), ave 0
Test execution time: sum 3545 ms, max 113 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 18:21:36 [main] [INFO]  KGenProgMain - entered the era of 159th generation.
2023-08-02 18:21:53 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 45 minutes 32 seconds
Variants: generated 100, build-succeeded 65, build-failed 24, syntax-invalid 8, redundant 3
Fitness: max 0(65), min 0(65), ave 0
Test execution time: sum 3764 ms, max 180 ms, min 51 ms
----------------------------------------------------------------

2023-08-02 18:21:53 [main] [INFO]  KGenProgMain - entered the era of 160th generation.
2023-08-02 18:22:08 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 45 minutes 47 seconds
Variants: generated 100, build-succeeded 56, build-failed 32, syntax-invalid 4, redundant 8
Fitness: max 0(56), min 0(56), ave 0
Test execution time: sum 3117 ms, max 74 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 18:22:08 [main] [INFO]  KGenProgMain - entered the era of 161st generation.
2023-08-02 18:22:25 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 46 minutes 4 seconds
Variants: generated 100, build-succeeded 62, build-failed 28, syntax-invalid 3, redundant 7
Fitness: max 0(62), min 0(62), ave 0
Test execution time: sum 3540 ms, max 119 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 18:22:25 [main] [INFO]  KGenProgMain - entered the era of 162nd generation.
2023-08-02 18:22:43 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 46 minutes 22 seconds
Variants: generated 100, build-succeeded 66, build-failed 29, syntax-invalid 2, redundant 3
Fitness: max 0(66), min 0(66), ave 0
Test execution time: sum 3623 ms, max 105 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 18:22:43 [main] [INFO]  KGenProgMain - entered the era of 163rd generation.
2023-08-02 18:22:59 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 46 minutes 38 seconds
Variants: generated 100, build-succeeded 52, build-failed 34, syntax-invalid 9, redundant 5
Fitness: max 0(52), min 0(52), ave 0
Test execution time: sum 2981 ms, max 145 ms, min 51 ms
----------------------------------------------------------------

2023-08-02 18:22:59 [main] [INFO]  KGenProgMain - entered the era of 164th generation.
2023-08-02 18:26:14 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 49 minutes 53 seconds
Variants: generated 100, build-succeeded 55, build-failed 32, syntax-invalid 10, redundant 3
Fitness: max 1(3), min 0(52), ave 0.055
Test execution time: sum 183174 ms, max 180084 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 18:26:14 [main] [INFO]  KGenProgMain - entered the era of 165th generation.
2023-08-02 18:35:31 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 59 minutes 10 seconds
Variants: generated 100, build-succeeded 57, build-failed 32, syntax-invalid 3, redundant 8
Fitness: max 1(2), min 0(55), ave 0.035
Test execution time: sum 543374 ms, max 180065 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 18:35:31 [main] [INFO]  KGenProgMain - entered the era of 166th generation.
2023-08-02 18:35:48 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 59 minutes 27 seconds
Variants: generated 100, build-succeeded 59, build-failed 29, syntax-invalid 5, redundant 7
Fitness: max 1(5), min 0(54), ave 0.085
Test execution time: sum 3355 ms, max 79 ms, min 52 ms
----------------------------------------------------------------

2023-08-02 18:35:48 [main] [INFO]  KGenProgMain - entered the era of 167th generation.
2023-08-02 18:36:06 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 59 minutes 45 seconds
Variants: generated 100, build-succeeded 56, build-failed 25, syntax-invalid 9, redundant 10
Fitness: max 0(56), min 0(56), ave 0
Test execution time: sum 3384 ms, max 144 ms, min 52 ms
----------------------------------------------------------------

2023-08-02 18:36:06 [main] [INFO]  KGenProgMain - entered the era of 168th generation.
2023-08-02 18:36:23 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 2 seconds
Variants: generated 100, build-succeeded 56, build-failed 29, syntax-invalid 4, redundant 11
Fitness: max 0(56), min 0(56), ave 0
Test execution time: sum 3373 ms, max 182 ms, min 51 ms
----------------------------------------------------------------

2023-08-02 18:36:23 [main] [INFO]  KGenProgMain - entered the era of 169th generation.
2023-08-02 18:36:39 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 18 seconds
Variants: generated 100, build-succeeded 63, build-failed 26, syntax-invalid 3, redundant 8
Fitness: max 0(63), min 0(63), ave 0
Test execution time: sum 3473 ms, max 72 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 18:36:39 [main] [INFO]  KGenProgMain - entered the era of 170th generation.
2023-08-02 18:36:57 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 36 seconds
Variants: generated 100, build-succeeded 57, build-failed 27, syntax-invalid 7, redundant 9
Fitness: max 0(57), min 0(57), ave 0
Test execution time: sum 3382 ms, max 130 ms, min 51 ms
----------------------------------------------------------------

2023-08-02 18:36:57 [main] [INFO]  KGenProgMain - entered the era of 171st generation.
2023-08-02 18:37:15 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 54 seconds
Variants: generated 100, build-succeeded 59, build-failed 34, syntax-invalid 6, redundant 1
Fitness: max 0(59), min 0(59), ave 0
Test execution time: sum 3636 ms, max 204 ms, min 53 ms
----------------------------------------------------------------

2023-08-02 18:37:15 [main] [INFO]  KGenProgMain - entered the era of 172nd generation.
2023-08-02 18:37:32 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 1 minutes 11 seconds
Variants: generated 100, build-succeeded 60, build-failed 26, syntax-invalid 7, redundant 7
Fitness: max 0(60), min 0(60), ave 0
Test execution time: sum 3516 ms, max 120 ms, min 53 ms
----------------------------------------------------------------

2023-08-02 18:37:32 [main] [INFO]  KGenProgMain - entered the era of 173rd generation.
2023-08-02 18:37:50 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 1 minutes 29 seconds
Variants: generated 100, build-succeeded 66, build-failed 26, syntax-invalid 6, redundant 2
Fitness: max 1(1), min 0(65), ave 0.015
Test execution time: sum 3742 ms, max 70 ms, min 52 ms
----------------------------------------------------------------

2023-08-02 18:37:50 [main] [INFO]  KGenProgMain - entered the era of 174th generation.
2023-08-02 18:38:08 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 1 minutes 47 seconds
Variants: generated 100, build-succeeded 60, build-failed 22, syntax-invalid 13, redundant 5
Fitness: max 1(1), min 0(59), ave 0.017
Test execution time: sum 3581 ms, max 143 ms, min 52 ms
----------------------------------------------------------------

2023-08-02 18:38:08 [main] [INFO]  KGenProgMain - entered the era of 175th generation.
2023-08-02 18:38:25 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 2 minutes 4 seconds
Variants: generated 100, build-succeeded 56, build-failed 32, syntax-invalid 6, redundant 6
Fitness: max 0(56), min 0(56), ave 0
Test execution time: sum 3204 ms, max 76 ms, min 52 ms
----------------------------------------------------------------

2023-08-02 18:38:25 [main] [INFO]  KGenProgMain - entered the era of 176th generation.
2023-08-02 18:38:43 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 2 minutes 22 seconds
Variants: generated 100, build-succeeded 67, build-failed 22, syntax-invalid 8, redundant 3
Fitness: max 0(67), min 0(67), ave 0
Test execution time: sum 3771 ms, max 117 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 18:38:43 [main] [INFO]  KGenProgMain - entered the era of 177th generation.
2023-08-02 18:39:00 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 2 minutes 39 seconds
Variants: generated 100, build-succeeded 64, build-failed 28, syntax-invalid 1, redundant 7
Fitness: max 0(64), min 0(64), ave 0
Test execution time: sum 3586 ms, max 71 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 18:39:00 [main] [INFO]  KGenProgMain - entered the era of 178th generation.
2023-08-02 18:39:17 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 2 minutes 56 seconds
Variants: generated 100, build-succeeded 55, build-failed 32, syntax-invalid 9, redundant 4
Fitness: max 0(55), min 0(55), ave 0
Test execution time: sum 3106 ms, max 117 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 18:39:17 [main] [INFO]  KGenProgMain - entered the era of 179th generation.
2023-08-02 18:39:35 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 3 minutes 14 seconds
Variants: generated 100, build-succeeded 66, build-failed 25, syntax-invalid 4, redundant 5
Fitness: max 0(66), min 0(66), ave 0
Test execution time: sum 3712 ms, max 132 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 18:39:35 [main] [INFO]  KGenProgMain - entered the era of 180th generation.
2023-08-02 18:39:52 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 3 minutes 31 seconds
Variants: generated 100, build-succeeded 59, build-failed 33, syntax-invalid 6, redundant 2
Fitness: max 0(59), min 0(59), ave 0
Test execution time: sum 3200 ms, max 66 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 18:39:52 [main] [INFO]  KGenProgMain - entered the era of 181st generation.
2023-08-02 18:40:10 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 3 minutes 49 seconds
Variants: generated 100, build-succeeded 60, build-failed 30, syntax-invalid 4, redundant 6
Fitness: max 0(60), min 0(60), ave 0
Test execution time: sum 3363 ms, max 116 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 18:40:10 [main] [INFO]  KGenProgMain - entered the era of 182nd generation.
2023-08-02 18:40:27 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 4 minutes 6 seconds
Variants: generated 100, build-succeeded 57, build-failed 29, syntax-invalid 7, redundant 7
Fitness: max 0(57), min 0(57), ave 0
Test execution time: sum 3084 ms, max 73 ms, min 49 ms
----------------------------------------------------------------

2023-08-02 18:40:27 [main] [INFO]  KGenProgMain - entered the era of 183rd generation.
2023-08-02 18:40:45 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 4 minutes 24 seconds
Variants: generated 100, build-succeeded 61, build-failed 33, syntax-invalid 4, redundant 2
Fitness: max 0(61), min 0(61), ave 0
Test execution time: sum 3361 ms, max 132 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 18:40:45 [main] [INFO]  KGenProgMain - entered the era of 184th generation.
2023-08-02 18:41:03 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 4 minutes 42 seconds
Variants: generated 100, build-succeeded 62, build-failed 28, syntax-invalid 7, redundant 3
Fitness: max 0(62), min 0(62), ave 0
Test execution time: sum 3478 ms, max 78 ms, min 51 ms
----------------------------------------------------------------

2023-08-02 18:41:03 [main] [INFO]  KGenProgMain - entered the era of 185th generation.
2023-08-02 18:41:21 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 5 minutes 0 seconds
Variants: generated 100, build-succeeded 56, build-failed 25, syntax-invalid 14, redundant 5
Fitness: max 1(2), min 0(54), ave 0.036
Test execution time: sum 3157 ms, max 117 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 18:41:21 [main] [INFO]  KGenProgMain - entered the era of 186th generation.
2023-08-02 18:41:39 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 5 minutes 18 seconds
Variants: generated 100, build-succeeded 63, build-failed 29, syntax-invalid 4, redundant 4
Fitness: max 1(1), min 0(62), ave 0.016
Test execution time: sum 3510 ms, max 77 ms, min 51 ms
----------------------------------------------------------------

2023-08-02 18:41:39 [main] [INFO]  KGenProgMain - entered the era of 187th generation.
2023-08-02 18:41:57 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 5 minutes 36 seconds
Variants: generated 100, build-succeeded 62, build-failed 29, syntax-invalid 5, redundant 4
Fitness: max 1(3), min 0(59), ave 0.048
Test execution time: sum 3502 ms, max 119 ms, min 51 ms
----------------------------------------------------------------

2023-08-02 18:41:57 [main] [INFO]  KGenProgMain - entered the era of 188th generation.
2023-08-02 18:42:14 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 5 minutes 53 seconds
Variants: generated 100, build-succeeded 52, build-failed 27, syntax-invalid 19, redundant 2
Fitness: max 1(1), min 0(51), ave 0.019
Test execution time: sum 2820 ms, max 72 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 18:42:14 [main] [INFO]  KGenProgMain - entered the era of 189th generation.
2023-08-02 18:42:32 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 6 minutes 10 seconds
Variants: generated 100, build-succeeded 56, build-failed 25, syntax-invalid 16, redundant 3
Fitness: max 1(2), min 0(54), ave 0.036
Test execution time: sum 3219 ms, max 136 ms, min 51 ms
----------------------------------------------------------------

2023-08-02 18:42:32 [main] [INFO]  KGenProgMain - entered the era of 190th generation.
2023-08-02 18:42:48 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 6 minutes 27 seconds
Variants: generated 100, build-succeeded 53, build-failed 30, syntax-invalid 15, redundant 2
Fitness: max 1(5), min 0(48), ave 0.094
Test execution time: sum 2877 ms, max 70 ms, min 51 ms
----------------------------------------------------------------

2023-08-02 18:42:48 [main] [INFO]  KGenProgMain - entered the era of 191st generation.
2023-08-02 18:43:06 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 6 minutes 45 seconds
Variants: generated 100, build-succeeded 58, build-failed 29, syntax-invalid 10, redundant 3
Fitness: max 1(1), min 0(57), ave 0.017
Test execution time: sum 3372 ms, max 113 ms, min 51 ms
----------------------------------------------------------------

2023-08-02 18:43:06 [main] [INFO]  KGenProgMain - entered the era of 192nd generation.
2023-08-02 18:43:23 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 7 minutes 2 seconds
Variants: generated 100, build-succeeded 55, build-failed 26, syntax-invalid 12, redundant 7
Fitness: max 1(1), min 0(54), ave 0.018
Test execution time: sum 3060 ms, max 78 ms, min 52 ms
----------------------------------------------------------------

2023-08-02 18:43:23 [main] [INFO]  KGenProgMain - entered the era of 193rd generation.
2023-08-02 18:43:42 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 7 minutes 21 seconds
Variants: generated 100, build-succeeded 54, build-failed 32, syntax-invalid 12, redundant 2
Fitness: max 1(1), min 0(53), ave 0.019
Test execution time: sum 3052 ms, max 120 ms, min 51 ms
----------------------------------------------------------------

2023-08-02 18:43:42 [main] [INFO]  KGenProgMain - entered the era of 194th generation.
2023-08-02 18:43:59 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 7 minutes 38 seconds
Variants: generated 100, build-succeeded 55, build-failed 25, syntax-invalid 16, redundant 4
Fitness: max 1(1), min 0(54), ave 0.018
Test execution time: sum 3016 ms, max 64 ms, min 51 ms
----------------------------------------------------------------

2023-08-02 18:43:59 [main] [INFO]  KGenProgMain - entered the era of 195th generation.
2023-08-02 18:44:18 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 7 minutes 57 seconds
Variants: generated 100, build-succeeded 56, build-failed 29, syntax-invalid 12, redundant 3
Fitness: max 1(2), min 0(54), ave 0.036
Test execution time: sum 3245 ms, max 125 ms, min 51 ms
----------------------------------------------------------------

2023-08-02 18:44:18 [main] [INFO]  KGenProgMain - entered the era of 196th generation.
2023-08-02 18:44:36 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 8 minutes 15 seconds
Variants: generated 100, build-succeeded 48, build-failed 38, syntax-invalid 12, redundant 2
Fitness: max 0(48), min 0(48), ave 0
Test execution time: sum 2681 ms, max 64 ms, min 52 ms
----------------------------------------------------------------

2023-08-02 18:44:36 [main] [INFO]  KGenProgMain - entered the era of 197th generation.
2023-08-02 18:44:54 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 8 minutes 33 seconds
Variants: generated 100, build-succeeded 54, build-failed 27, syntax-invalid 15, redundant 4
Fitness: max 0(54), min 0(54), ave 0
Test execution time: sum 3077 ms, max 115 ms, min 50 ms
----------------------------------------------------------------

2023-08-02 18:44:54 [main] [INFO]  KGenProgMain - entered the era of 198th generation.
2023-08-02 18:45:11 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 8 minutes 50 seconds
Variants: generated 100, build-succeeded 54, build-failed 32, syntax-invalid 10, redundant 4
Fitness: max 0(54), min 0(54), ave 0
Test execution time: sum 3005 ms, max 76 ms, min 51 ms
----------------------------------------------------------------

2023-08-02 18:45:11 [main] [INFO]  KGenProgMain - entered the era of 199th generation.
2023-08-02 18:45:30 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 9 minutes 9 seconds
Variants: generated 100, build-succeeded 56, build-failed 30, syntax-invalid 10, redundant 4
Fitness: max 1(1), min 0(55), ave 0.018
Test execution time: sum 3214 ms, max 134 ms, min 51 ms
----------------------------------------------------------------

2023-08-02 18:45:30 [main] [INFO]  KGenProgMain - entered the era of 200th generation.
2023-08-02 18:45:47 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 9 minutes 26 seconds
Variants: generated 100, build-succeeded 47, build-failed 30, syntax-invalid 20, redundant 3
Fitness: max 1(1), min 0(46), ave 0.021
Test execution time: sum 2652 ms, max 72 ms, min 51 ms
----------------------------------------------------------------

2023-08-02 18:45:47 [main] [INFO]  KGenProgMain - entered the era of 201st generation.
2023-08-02 18:46:05 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 9 minutes 44 seconds
Variants: generated 100, build-succeeded 49, build-failed 27, syntax-invalid 18, redundant 6
Fitness: max 0(49), min 0(49), ave 0
Test execution time: sum 2864 ms, max 116 ms, min 51 ms
----------------------------------------------------------------

2023-08-02 18:46:05 [main] [INFO]  KGenProgMain - entered the era of 202nd generation.
2023-08-02 18:46:23 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 10 minutes 2 seconds
Variants: generated 100, build-succeeded 56, build-failed 28, syntax-invalid 13, redundant 3
Fitness: max 1(1), min 0(55), ave 0.018
Test execution time: sum 3170 ms, max 70 ms, min 51 ms
----------------------------------------------------------------

2023-08-02 18:46:23 [main] [INFO]  KGenProgMain - entered the era of 203rd generation.
2023-08-02 18:46:42 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 10 minutes 21 seconds
Variants: generated 100, build-succeeded 55, build-failed 35, syntax-invalid 10, redundant 0
Fitness: max 0(55), min 0(55), ave 0
Test execution time: sum 3162 ms, max 129 ms, min 51 ms
----------------------------------------------------------------

2023-08-02 18:46:42 [main] [INFO]  KGenProgMain - entered the era of 204th generation.
2023-08-02 18:47:01 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 10 minutes 40 seconds
Variants: generated 100, build-succeeded 60, build-failed 31, syntax-invalid 8, redundant 1
Fitness: max 1(2), min 0(58), ave 0.033
Test execution time: sum 3426 ms, max 70 ms, min 51 ms
----------------------------------------------------------------

2023-08-02 18:47:01 [main] [INFO]  KGenProgMain - entered the era of 205th generation.
2023-08-02 18:47:20 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 10 minutes 59 seconds
Variants: generated 100, build-succeeded 61, build-failed 30, syntax-invalid 8, redundant 1
Fitness: max 1(2), min 0(59), ave 0.033
Test execution time: sum 3483 ms, max 115 ms, min 51 ms
----------------------------------------------------------------

2023-08-02 18:47:20 [main] [INFO]  KGenProgMain - entered the era of 206th generation.
2023-08-02 18:47:39 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 11 minutes 18 seconds
Variants: generated 100, build-succeeded 62, build-failed 30, syntax-invalid 4, redundant 4
Fitness: max 1(1), min 0(61), ave 0.016
Test execution time: sum 3518 ms, max 72 ms, min 52 ms
----------------------------------------------------------------

2023-08-02 18:47:39 [main] [INFO]  KGenProgMain - entered the era of 207th generation.
2023-08-02 18:47:59 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 11 minutes 38 seconds
Variants: generated 100, build-succeeded 60, build-failed 33, syntax-invalid 4, redundant 3
Fitness: max 0(60), min 0(60), ave 0
Test execution time: sum 3437 ms, max 132 ms, min 52 ms
----------------------------------------------------------------

2023-08-02 18:47:59 [main] [INFO]  KGenProgMain - entered the era of 208th generation.
2023-08-02 18:48:19 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 11 minutes 58 seconds
Variants: generated 100, build-succeeded 64, build-failed 29, syntax-invalid 3, redundant 4
Fitness: max 0(64), min 0(64), ave 0
Test execution time: sum 3812 ms, max 191 ms, min 52 ms
----------------------------------------------------------------

2023-08-02 18:48:19 [main] [INFO]  KGenProgMain - entered the era of 209th generation.
2023-08-02 18:48:38 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 12 minutes 17 seconds
Variants: generated 100, build-succeeded 60, build-failed 31, syntax-invalid 3, redundant 6
Fitness: max 0(60), min 0(60), ave 0
Test execution time: sum 3352 ms, max 72 ms, min 52 ms
----------------------------------------------------------------

2023-08-02 18:48:38 [main] [INFO]  KGenProgMain - entered the era of 210th generation.
2023-08-02 18:48:59 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 12 minutes 38 seconds
Variants: generated 100, build-succeeded 65, build-failed 28, syntax-invalid 5, redundant 2
Fitness: max 1(1), min 0(64), ave 0.015
Test execution time: sum 3698 ms, max 117 ms, min 52 ms
----------------------------------------------------------------

2023-08-02 18:48:59 [main] [INFO]  KGenProgMain - entered the era of 211th generation.
2023-08-02 18:49:18 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 12 minutes 57 seconds
Variants: generated 100, build-succeeded 61, build-failed 32, syntax-invalid 2, redundant 5
Fitness: max 0(61), min 0(61), ave 0
Test execution time: sum 3464 ms, max 71 ms, min 52 ms
----------------------------------------------------------------

2023-08-02 18:49:18 [main] [INFO]  KGenProgMain - entered the era of 212th generation.
2023-08-02 18:49:39 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 13 minutes 18 seconds
Variants: generated 100, build-succeeded 65, build-failed 30, syntax-invalid 1, redundant 4
Fitness: max 0(65), min 0(65), ave 0
Test execution time: sum 3750 ms, max 123 ms, min 52 ms
----------------------------------------------------------------

2023-08-02 18:49:39 [main] [INFO]  KGenProgMain - entered the era of 213th generation.
2023-08-02 18:50:00 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 13 minutes 39 seconds
Variants: generated 100, build-succeeded 67, build-failed 30, syntax-invalid 2, redundant 1
Fitness: max 0(67), min 0(67), ave 0
Test execution time: sum 3992 ms, max 132 ms, min 53 ms
----------------------------------------------------------------

2023-08-02 18:50:00 [main] [INFO]  KGenProgMain - entered the era of 214th generation.
2023-08-02 18:50:20 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 13 minutes 59 seconds
Variants: generated 100, build-succeeded 61, build-failed 35, syntax-invalid 2, redundant 2
Fitness: max 0(61), min 0(61), ave 0
Test execution time: sum 3402 ms, max 89 ms, min 52 ms
----------------------------------------------------------------

2023-08-02 18:50:20 [main] [INFO]  KGenProgMain - entered the era of 215th generation.
2023-08-02 18:50:41 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 14 minutes 20 seconds
Variants: generated 100, build-succeeded 62, build-failed 29, syntax-invalid 8, redundant 1
Fitness: max 0(62), min 0(62), ave 0
Test execution time: sum 3594 ms, max 108 ms, min 51 ms
----------------------------------------------------------------

2023-08-02 18:50:41 [main] [INFO]  KGenProgMain - entered the era of 216th generation.
2023-08-02 18:51:00 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 14 minutes 39 seconds
Variants: generated 100, build-succeeded 60, build-failed 28, syntax-invalid 9, redundant 3
Fitness: max 1(2), min 0(58), ave 0.033
Test execution time: sum 3332 ms, max 69 ms, min 52 ms
----------------------------------------------------------------

2023-08-02 18:51:00 [main] [INFO]  KGenProgMain - entered the era of 217th generation.
2023-08-02 18:51:20 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 14 minutes 59 seconds
Variants: generated 100, build-succeeded 62, build-failed 30, syntax-invalid 4, redundant 4
Fitness: max 0(62), min 0(62), ave 0
Test execution time: sum 3565 ms, max 138 ms, min 52 ms
----------------------------------------------------------------

2023-08-02 18:51:20 [main] [INFO]  KGenProgMain - entered the era of 218th generation.
2023-08-02 18:51:39 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 15 minutes 18 seconds
Variants: generated 100, build-succeeded 49, build-failed 39, syntax-invalid 10, redundant 2
Fitness: max 0(49), min 0(49), ave 0
Test execution time: sum 2782 ms, max 68 ms, min 52 ms
----------------------------------------------------------------

2023-08-02 18:51:39 [main] [INFO]  KGenProgMain - entered the era of 219th generation.
2023-08-02 18:52:00 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 15 minutes 39 seconds
Variants: generated 100, build-succeeded 60, build-failed 32, syntax-invalid 5, redundant 3
Fitness: max 0(60), min 0(60), ave 0
Test execution time: sum 3541 ms, max 137 ms, min 53 ms
----------------------------------------------------------------

2023-08-02 18:52:00 [main] [INFO]  KGenProgMain - entered the era of 220th generation.
2023-08-02 18:52:21 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 16 minutes 0 seconds
Variants: generated 100, build-succeeded 59, build-failed 30, syntax-invalid 10, redundant 1
Fitness: max 1(1), min 0(58), ave 0.017
Test execution time: sum 3597 ms, max 120 ms, min 53 ms
----------------------------------------------------------------

2023-08-02 18:52:21 [main] [INFO]  KGenProgMain - entered the era of 221st generation.
2023-08-02 18:52:40 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 16 minutes 19 seconds
Variants: generated 100, build-succeeded 60, build-failed 31, syntax-invalid 5, redundant 4
Fitness: max 0(60), min 0(60), ave 0
Test execution time: sum 3433 ms, max 73 ms, min 53 ms
----------------------------------------------------------------

2023-08-02 18:52:40 [main] [INFO]  KGenProgMain - entered the era of 222nd generation.
2023-08-02 18:53:02 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 16 minutes 41 seconds
Variants: generated 100, build-succeeded 61, build-failed 31, syntax-invalid 6, redundant 2
Fitness: max 0(61), min 0(61), ave 0
Test execution time: sum 3610 ms, max 110 ms, min 52 ms
----------------------------------------------------------------

2023-08-02 18:53:02 [main] [INFO]  KGenProgMain - entered the era of 223rd generation.
2023-08-02 18:53:22 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 17 minutes 1 seconds
Variants: generated 100, build-succeeded 60, build-failed 29, syntax-invalid 7, redundant 4
Fitness: max 0(60), min 0(60), ave 0
Test execution time: sum 3459 ms, max 71 ms, min 52 ms
----------------------------------------------------------------

2023-08-02 18:53:22 [main] [INFO]  KGenProgMain - entered the era of 224th generation.
2023-08-02 18:53:44 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 17 minutes 23 seconds
Variants: generated 100, build-succeeded 63, build-failed 28, syntax-invalid 7, redundant 2
Fitness: max 1(1), min 0(62), ave 0.016
Test execution time: sum 3854 ms, max 125 ms, min 53 ms
----------------------------------------------------------------

2023-08-02 18:53:44 [main] [INFO]  KGenProgMain - entered the era of 225th generation.
2023-08-02 18:54:04 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 17 minutes 43 seconds
Variants: generated 100, build-succeeded 57, build-failed 30, syntax-invalid 10, redundant 3
Fitness: max 0(57), min 0(57), ave 0
Test execution time: sum 3462 ms, max 79 ms, min 54 ms
----------------------------------------------------------------

2023-08-02 18:54:04 [main] [INFO]  KGenProgMain - entered the era of 226th generation.
2023-08-02 18:54:26 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 18 minutes 4 seconds
Variants: generated 100, build-succeeded 51, build-failed 35, syntax-invalid 12, redundant 2
Fitness: max 0(51), min 0(51), ave 0
Test execution time: sum 2991 ms, max 126 ms, min 52 ms
----------------------------------------------------------------

2023-08-02 18:54:26 [main] [INFO]  KGenProgMain - entered the era of 227th generation.
2023-08-02 18:54:46 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 18 minutes 25 seconds
Variants: generated 100, build-succeeded 54, build-failed 33, syntax-invalid 9, redundant 4
Fitness: max 0(54), min 0(54), ave 0
Test execution time: sum 3139 ms, max 71 ms, min 52 ms
----------------------------------------------------------------

2023-08-02 18:54:46 [main] [INFO]  KGenProgMain - entered the era of 228th generation.
2023-08-02 18:55:07 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 18 minutes 46 seconds
Variants: generated 100, build-succeeded 54, build-failed 29, syntax-invalid 10, redundant 7
Fitness: max 0(54), min 0(54), ave 0
Test execution time: sum 3287 ms, max 135 ms, min 53 ms
----------------------------------------------------------------

2023-08-02 18:55:07 [main] [INFO]  KGenProgMain - entered the era of 229th generation.
2023-08-02 18:55:28 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 19 minutes 7 seconds
Variants: generated 100, build-succeeded 48, build-failed 33, syntax-invalid 17, redundant 2
Fitness: max 0(48), min 0(48), ave 0
Test execution time: sum 3019 ms, max 210 ms, min 53 ms
----------------------------------------------------------------

2023-08-02 18:55:28 [main] [INFO]  KGenProgMain - entered the era of 230th generation.
2023-08-02 18:55:49 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 19 minutes 28 seconds
Variants: generated 100, build-succeeded 59, build-failed 29, syntax-invalid 11, redundant 1
Fitness: max 0(59), min 0(59), ave 0
Test execution time: sum 3405 ms, max 81 ms, min 52 ms
----------------------------------------------------------------

2023-08-02 18:55:49 [main] [INFO]  KGenProgMain - entered the era of 231st generation.
2023-08-02 18:56:10 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 19 minutes 49 seconds
Variants: generated 100, build-succeeded 47, build-failed 32, syntax-invalid 14, redundant 7
Fitness: max 0(47), min 0(47), ave 0
Test execution time: sum 2877 ms, max 135 ms, min 54 ms
----------------------------------------------------------------

2023-08-02 18:56:10 [main] [INFO]  KGenProgMain - entered the era of 232nd generation.
2023-08-02 18:56:30 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 20 minutes 9 seconds
Variants: generated 100, build-succeeded 51, build-failed 29, syntax-invalid 16, redundant 4
Fitness: max 0(51), min 0(51), ave 0
Test execution time: sum 2922 ms, max 73 ms, min 53 ms
----------------------------------------------------------------

2023-08-02 18:56:30 [main] [INFO]  KGenProgMain - entered the era of 233rd generation.
2023-08-02 18:56:52 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 20 minutes 31 seconds
Variants: generated 100, build-succeeded 48, build-failed 33, syntax-invalid 15, redundant 4
Fitness: max 0(48), min 0(48), ave 0
Test execution time: sum 2964 ms, max 146 ms, min 53 ms
----------------------------------------------------------------

2023-08-02 18:56:52 [main] [INFO]  KGenProgMain - entered the era of 234th generation.
2023-08-02 18:57:13 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 20 minutes 52 seconds
Variants: generated 100, build-succeeded 58, build-failed 27, syntax-invalid 12, redundant 3
Fitness: max 0(58), min 0(58), ave 0
Test execution time: sum 3292 ms, max 67 ms, min 51 ms
----------------------------------------------------------------

2023-08-02 18:57:13 [main] [INFO]  KGenProgMain - entered the era of 235th generation.
2023-08-02 18:57:35 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 21 minutes 14 seconds
Variants: generated 100, build-succeeded 54, build-failed 32, syntax-invalid 12, redundant 2
Fitness: max 0(54), min 0(54), ave 0
Test execution time: sum 3249 ms, max 145 ms, min 53 ms
----------------------------------------------------------------

2023-08-02 18:57:35 [main] [INFO]  KGenProgMain - entered the era of 236th generation.
2023-08-02 18:57:55 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 21 minutes 34 seconds
Variants: generated 100, build-succeeded 52, build-failed 30, syntax-invalid 16, redundant 2
Fitness: max 1(1), min 0(51), ave 0.019
Test execution time: sum 3057 ms, max 74 ms, min 53 ms
----------------------------------------------------------------

2023-08-02 18:57:55 [main] [INFO]  KGenProgMain - entered the era of 237th generation.
2023-08-02 18:58:15 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 21 minutes 54 seconds
Variants: generated 100, build-succeeded 42, build-failed 35, syntax-invalid 20, redundant 3
Fitness: max 0(42), min 0(42), ave 0
Test execution time: sum 2483 ms, max 128 ms, min 54 ms
----------------------------------------------------------------

2023-08-02 18:58:15 [main] [INFO]  KGenProgMain - entered the era of 238th generation.
2023-08-02 19:01:36 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 25 minutes 15 seconds
Variants: generated 100, build-succeeded 54, build-failed 30, syntax-invalid 14, redundant 2
Fitness: max 0(54), min 0(54), ave 0
Test execution time: sum 183218 ms, max 180066 ms, min 53 ms
----------------------------------------------------------------

2023-08-02 19:01:36 [main] [INFO]  KGenProgMain - entered the era of 239th generation.
2023-08-02 19:01:58 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 25 minutes 37 seconds
Variants: generated 100, build-succeeded 57, build-failed 27, syntax-invalid 13, redundant 3
Fitness: max 1(1), min 0(56), ave 0.018
Test execution time: sum 3567 ms, max 232 ms, min 52 ms
----------------------------------------------------------------

2023-08-02 19:01:58 [main] [INFO]  KGenProgMain - entered the era of 240th generation.
2023-08-02 19:02:21 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 26 minutes 0 seconds
Variants: generated 100, build-succeeded 58, build-failed 28, syntax-invalid 11, redundant 3
Fitness: max 1(1), min 0(57), ave 0.017
Test execution time: sum 3542 ms, max 119 ms, min 51 ms
----------------------------------------------------------------

2023-08-02 19:02:21 [main] [INFO]  KGenProgMain - entered the era of 241st generation.
2023-08-02 19:02:44 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 26 minutes 23 seconds
Variants: generated 100, build-succeeded 57, build-failed 31, syntax-invalid 10, redundant 2
Fitness: max 0(57), min 0(57), ave 0
Test execution time: sum 3590 ms, max 140 ms, min 53 ms
----------------------------------------------------------------

2023-08-02 19:02:44 [main] [INFO]  KGenProgMain - entered the era of 242nd generation.
2023-08-02 19:03:07 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 26 minutes 46 seconds
Variants: generated 100, build-succeeded 60, build-failed 28, syntax-invalid 9, redundant 3
Fitness: max 1(1), min 0(59), ave 0.017
Test execution time: sum 3799 ms, max 118 ms, min 55 ms
----------------------------------------------------------------

2023-08-02 19:03:07 [main] [INFO]  KGenProgMain - entered the era of 243rd generation.
2023-08-02 19:03:29 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 27 minutes 8 seconds
Variants: generated 100, build-succeeded 51, build-failed 39, syntax-invalid 8, redundant 2
Fitness: max 0(51), min 0(51), ave 0
Test execution time: sum 3116 ms, max 126 ms, min 54 ms
----------------------------------------------------------------

2023-08-02 19:03:29 [main] [INFO]  KGenProgMain - entered the era of 244th generation.
2023-08-02 19:03:51 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 27 minutes 30 seconds
Variants: generated 100, build-succeeded 60, build-failed 33, syntax-invalid 6, redundant 1
Fitness: max 0(60), min 0(60), ave 0
Test execution time: sum 3586 ms, max 74 ms, min 53 ms
----------------------------------------------------------------

2023-08-02 19:03:51 [main] [INFO]  KGenProgMain - entered the era of 245th generation.
2023-08-02 19:04:03 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 27 minutes 42 seconds
Variants: generated 50, build-succeeded 15, build-failed 32, syntax-invalid 1, redundant 2
Fitness: max 1(1), min 0(14), ave 0.067
Test execution time: sum 999 ms, max 135 ms, min 56 ms
----------------------------------------------------------------

2023-08-02 19:04:03 [main] [INFO]  KGenProgMain - GA stopped
2023-08-02 19:04:06 [main] [INFO]  PatchLogExporter - patch (v76)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 19:04:06 [main] [INFO]  PatchLogExporter - patch (v76)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -170,6 +170,7 @@
         try {
 
             forward = interpolator.isForward();
+			pendingEvent = true;
             final double t1 = interpolator.getCurrentTime();
             final int    n  = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));
             final double h  = (t1 - t0) / n;
2023-08-02 19:04:06 [main] [INFO]  PatchLogExporter - patch (v76)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 19:04:06 [main] [INFO]  PatchLogExporter - patch (v76)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 19:04:06 [main] [INFO]  PatchLogExporter - patch (v76)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -290,7 +290,7 @@
             x0 = x1;
             y0 = y1;
             // Compute new X1, Y1
-            if (Math.abs(delta) > tolerance) {
+            if (!resultComputed) {
                 x1 = x1 + delta;
             } else if (dx > 0.0) {
                 x1 = x1 + 0.5 * tolerance;
2023-08-02 19:04:06 [main] [INFO]  PatchLogExporter - patch (v213)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -273,7 +273,6 @@
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
-          dirtyState = false;
       }
 
       return interpolatedState;
2023-08-02 19:04:06 [main] [INFO]  PatchLogExporter - patch (v213)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 19:04:06 [main] [INFO]  PatchLogExporter - patch (v213)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -213,7 +213,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
2023-08-02 19:04:06 [main] [INFO]  PatchLogExporter - patch (v213)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 19:04:06 [main] [INFO]  PatchLogExporter - patch (v213)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 19:04:06 [main] [INFO]  PatchLogExporter - patch (v305)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 19:04:06 [main] [INFO]  PatchLogExporter - patch (v305)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -170,6 +170,7 @@
         try {
 
             forward = interpolator.isForward();
+			pendingEvent = true;
             final double t1 = interpolator.getCurrentTime();
             final int    n  = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));
             final double h  = (t1 - t0) / n;
@@ -282,7 +283,6 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-08-02 19:04:06 [main] [INFO]  PatchLogExporter - patch (v305)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 19:04:06 [main] [INFO]  PatchLogExporter - patch (v305)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 19:04:06 [main] [INFO]  PatchLogExporter - patch (v779)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 19:04:06 [main] [INFO]  PatchLogExporter - patch (v779)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -216,8 +216,7 @@
                     solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
-                    if ((Math.abs(root - ta) <= convergence) &&
-                         (Math.abs(root - previousEventTime) <= convergence)) {
+                    if (pendingEvent && (Math.abs(t1 - pendingEventTime) <= convergence)) {
                         // we have either found nothing or found (again ?) a past event, we simply ignore it
                         ta = tb;
                         ga = gb;
@@ -282,7 +281,7 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
+        pendingEvent = false;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-08-02 19:04:06 [main] [INFO]  PatchLogExporter - patch (v779)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 19:04:06 [main] [INFO]  PatchLogExporter - patch (v779)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 19:04:06 [main] [INFO]  PatchLogExporter - patch (v779)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -304,7 +304,15 @@
                 delta = x1 - x0;
                 oldDelta = delta;
             }
-            i++;
+            {
+				x0 = x1;
+				x1 = x2;
+				x2 = x0;
+				y0 = y1;
+				y1 = y2;
+				y2 = y0;
+			}
+			i++;
         }
         throw new MaxIterationsExceededException(maximalIterationCount);
     }
2023-08-02 19:04:06 [main] [INFO]  PatchLogExporter - patch (v1099)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 19:04:06 [main] [INFO]  PatchLogExporter - patch (v1099)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -98,8 +98,6 @@
         this.convergence       = Math.abs(convergence);
         this.maxIterationCount = maxIterationCount;
 
-        // some dummy values ...
-        t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
         pendingEvent      = false;
@@ -170,6 +168,7 @@
         try {
 
             forward = interpolator.isForward();
+			pendingEvent = true;
             final double t1 = interpolator.getCurrentTime();
             final int    n  = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));
             final double h  = (t1 - t0) / n;
@@ -282,7 +281,7 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
+        pendingEvent = false;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-08-02 19:04:06 [main] [INFO]  PatchLogExporter - patch (v1099)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 19:04:06 [main] [INFO]  PatchLogExporter - patch (v1099)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 19:04:06 [main] [INFO]  PatchLogExporter - patch (v1099)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -304,7 +304,15 @@
                 delta = x1 - x0;
                 oldDelta = delta;
             }
-            i++;
+            {
+				x0 = x1;
+				x1 = x2;
+				x2 = x0;
+				y0 = y1;
+				y1 = y2;
+				y2 = y0;
+			}
+			i++;
         }
         throw new MaxIterationsExceededException(maximalIterationCount);
     }
2023-08-02 19:04:06 [main] [INFO]  PatchLogExporter - patch (v1506)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -96,7 +96,6 @@
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -117,7 +116,6 @@
 
     finalized         = false;
     this.forward      = forward;
-    this.dirtyState   = true;
 
   }
 
@@ -272,7 +270,6 @@
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
-          computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
       }
 
2023-08-02 19:04:06 [main] [INFO]  PatchLogExporter - patch (v1506)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 19:04:06 [main] [INFO]  PatchLogExporter - patch (v1506)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -213,7 +213,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
2023-08-02 19:04:06 [main] [INFO]  PatchLogExporter - patch (v1506)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 19:04:06 [main] [INFO]  PatchLogExporter - patch (v1506)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 19:04:06 [main] [INFO]  PatchLogExporter - patch (v1530)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -96,7 +96,6 @@
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -117,7 +116,6 @@
 
     finalized         = false;
     this.forward      = forward;
-    this.dirtyState   = true;
 
   }
 
@@ -272,7 +270,6 @@
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
-          computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
       }
 
2023-08-02 19:04:06 [main] [INFO]  PatchLogExporter - patch (v1530)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 19:04:06 [main] [INFO]  PatchLogExporter - patch (v1530)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 19:04:06 [main] [INFO]  PatchLogExporter - patch (v1530)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 19:04:06 [main] [INFO]  PatchLogExporter - patch (v1530)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,15 +223,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
2023-08-02 19:04:06 [main] [INFO]  PatchLogExporter - patch (v2021)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -96,7 +96,6 @@
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -217,7 +216,6 @@
   public void storeTime(final double t) {
 
     currentTime = t;
-    h           = currentTime - previousTime;
     setInterpolatedTime(t);
 
     // the step is not finalized anymore
@@ -272,7 +270,6 @@
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
-          computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
       }
 
2023-08-02 19:04:06 [main] [INFO]  PatchLogExporter - patch (v2021)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 19:04:06 [main] [INFO]  PatchLogExporter - patch (v2021)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 19:04:06 [main] [INFO]  PatchLogExporter - patch (v2021)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 19:04:06 [main] [INFO]  PatchLogExporter - patch (v2021)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -156,8 +156,6 @@
         FunctionEvaluationException {
 
         clearResult();
-        verifyInterval(min, max);
-
         double ret = Double.NaN;
 
         double yMin = f.value(min);
@@ -240,7 +238,8 @@
                 return result;
             }
             double dx = x2 - x1;
-            double tolerance =
+            this.resultComputed = true;
+			double tolerance =
                 Math.max(relativeAccuracy * Math.abs(x1), absoluteAccuracy);
             if (Math.abs(dx) <= tolerance) {
                 setResult(x1, i);
@@ -276,10 +275,7 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
+                    checkResultComputed();
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
@@ -304,7 +300,7 @@
                 delta = x1 - x0;
                 oldDelta = delta;
             }
-            i++;
+            y1 = f.value(x1);
         }
         throw new MaxIterationsExceededException(maximalIterationCount);
     }
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v2070)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -96,7 +96,6 @@
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -117,7 +116,6 @@
 
     finalized         = false;
     this.forward      = forward;
-    this.dirtyState   = true;
 
   }
 
@@ -272,7 +270,6 @@
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
-          computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
       }
 
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v2070)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v2070)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v2070)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v2070)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v2070)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -167,7 +167,7 @@
         double sign = yMin * yMax;
         if (sign > 0) {
             // check if either value is close to a zero
-            if (Math.abs(yMin) <= functionValueAccuracy) {
+            if (f.value(min) == 0.0) {
                 setResult(min, 0);
                 ret = min;
             } else if (Math.abs(yMax) <= functionValueAccuracy) {
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v2156)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -96,7 +96,6 @@
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -218,7 +217,7 @@
 
     currentTime = t;
     h           = currentTime - previousTime;
-    setInterpolatedTime(t);
+    this.h = Math.abs(h);
 
     // the step is not finalized anymore
     finalized  = false;
@@ -272,7 +271,6 @@
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
-          computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
       }
 
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v2156)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v2156)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v2156)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v2156)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v2156)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -156,8 +156,6 @@
         FunctionEvaluationException {
 
         clearResult();
-        verifyInterval(min, max);
-
         double ret = Double.NaN;
 
         double yMin = f.value(min);
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v2261)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -96,7 +96,6 @@
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -217,7 +216,6 @@
   public void storeTime(final double t) {
 
     currentTime = t;
-    h           = currentTime - previousTime;
     setInterpolatedTime(t);
 
     // the step is not finalized anymore
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v2261)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v2261)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v2261)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v2261)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v3188)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -96,7 +96,6 @@
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -117,7 +116,6 @@
 
     finalized         = false;
     this.forward      = forward;
-    this.dirtyState   = true;
 
   }
 
@@ -243,7 +241,8 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
+      this.forward = true;
+	dirtyState       = true;
   }
 
   /** {@inheritDoc} */
@@ -272,7 +271,6 @@
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
-          computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
       }
 
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v3188)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v3188)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v3188)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -106,7 +106,7 @@
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
-        nextAction        = EventHandler.CONTINUE;
+        pendingEvent = false;
 
     }
 
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v3188)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v3188)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v3504)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -96,7 +96,6 @@
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -117,7 +116,6 @@
 
     finalized         = false;
     this.forward      = forward;
-    this.dirtyState   = true;
 
   }
 
@@ -217,7 +215,6 @@
   public void storeTime(final double t) {
 
     currentTime = t;
-    h           = currentTime - previousTime;
     setInterpolatedTime(t);
 
     // the step is not finalized anymore
@@ -243,7 +240,8 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
+      this.forward = true;
+	dirtyState       = true;
   }
 
   /** {@inheritDoc} */
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v3504)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v3504)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -90,7 +90,7 @@
 
     /** {@inheritDoc} */
     public void setMaximalIterationCount(int count) {
-        maximalIterationCount = count;
+        this.iterationCount = 0;
     }
 
     /** {@inheritDoc} */
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v3504)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -105,7 +105,6 @@
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
-        increasing        = true;
         nextAction        = EventHandler.CONTINUE;
 
     }
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v3504)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v3504)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v3504)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -100,7 +100,6 @@
      */
     protected void checkResultComputed() throws IllegalStateException {
         if (!resultComputed) {
-            throw MathRuntimeException.createIllegalStateException("no result available");
         }
     }
 
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v3504)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -276,10 +276,7 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
+                    checkResultComputed();
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v3822)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -96,7 +96,6 @@
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -113,11 +112,8 @@
 
     currentState            = y;
     interpolatedState       = new double[y.length];
-    interpolatedDerivatives = new double[y.length];
-
     finalized         = false;
     this.forward      = forward;
-    this.dirtyState   = true;
 
   }
 
@@ -217,7 +213,6 @@
   public void storeTime(final double t) {
 
     currentTime = t;
-    h           = currentTime - previousTime;
     setInterpolatedTime(t);
 
     // the step is not finalized anymore
@@ -243,7 +238,8 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
+      this.forward = true;
+	dirtyState       = true;
   }
 
   /** {@inheritDoc} */
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v3822)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v3822)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -59,7 +59,6 @@
      */
     protected ConvergingAlgorithmImpl(final int defaultMaximalIterationCount,
                                       final double defaultAbsoluteAccuracy) {
-        this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
@@ -90,7 +89,7 @@
 
     /** {@inheritDoc} */
     public void setMaximalIterationCount(int count) {
-        maximalIterationCount = count;
+        this.iterationCount = 0;
     }
 
     /** {@inheritDoc} */
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v3822)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -105,7 +105,6 @@
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
-        increasing        = true;
         nextAction        = EventHandler.CONTINUE;
 
     }
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v3822)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v3822)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v3822)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -100,7 +100,6 @@
      */
     protected void checkResultComputed() throws IllegalStateException {
         if (!resultComputed) {
-            throw MathRuntimeException.createIllegalStateException("no result available");
         }
     }
 
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v3822)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -276,10 +276,7 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
+                    checkResultComputed();
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v3846)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -96,7 +96,6 @@
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -113,11 +112,8 @@
 
     currentState            = y;
     interpolatedState       = new double[y.length];
-    interpolatedDerivatives = new double[y.length];
-
     finalized         = false;
     this.forward      = forward;
-    this.dirtyState   = true;
 
   }
 
@@ -217,7 +213,6 @@
   public void storeTime(final double t) {
 
     currentTime = t;
-    h           = currentTime - previousTime;
     setInterpolatedTime(t);
 
     // the step is not finalized anymore
@@ -243,7 +238,8 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
+      this.forward = true;
+	dirtyState       = true;
   }
 
   /** {@inheritDoc} */
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v3846)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v3846)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -59,7 +59,6 @@
      */
     protected ConvergingAlgorithmImpl(final int defaultMaximalIterationCount,
                                       final double defaultAbsoluteAccuracy) {
-        this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
@@ -90,7 +89,7 @@
 
     /** {@inheritDoc} */
     public void setMaximalIterationCount(int count) {
-        maximalIterationCount = count;
+        this.iterationCount = 0;
     }
 
     /** {@inheritDoc} */
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v3846)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -105,7 +105,6 @@
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
-        increasing        = true;
         nextAction        = EventHandler.CONTINUE;
 
     }
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v3846)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v3846)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v3846)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -276,10 +276,7 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
+                    checkResultComputed();
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
@@ -304,7 +301,7 @@
                 delta = x1 - x0;
                 oldDelta = delta;
             }
-            i++;
+            y0 = y1;
         }
         throw new MaxIterationsExceededException(maximalIterationCount);
     }
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v3904)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -87,7 +87,6 @@
    * initializing the copy.
    */
   protected AbstractStepInterpolator() {
-    previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
@@ -96,7 +95,6 @@
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -113,11 +111,8 @@
 
     currentState            = y;
     interpolatedState       = new double[y.length];
-    interpolatedDerivatives = new double[y.length];
-
     finalized         = false;
     this.forward      = forward;
-    this.dirtyState   = true;
 
   }
 
@@ -217,7 +212,6 @@
   public void storeTime(final double t) {
 
     currentTime = t;
-    h           = currentTime - previousTime;
     setInterpolatedTime(t);
 
     // the step is not finalized anymore
@@ -243,7 +237,8 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
+      this.forward = true;
+	dirtyState       = true;
   }
 
   /** {@inheritDoc} */
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v3904)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v3904)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -213,7 +213,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v3904)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v3904)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v3904)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -100,7 +100,6 @@
      */
     protected void checkResultComputed() throws IllegalStateException {
         if (!resultComputed) {
-            throw MathRuntimeException.createIllegalStateException("no result available");
         }
     }
 
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v3904)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -276,10 +276,7 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
+                    checkResultComputed();
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v3951)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -96,7 +96,6 @@
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -113,11 +112,8 @@
 
     currentState            = y;
     interpolatedState       = new double[y.length];
-    interpolatedDerivatives = new double[y.length];
-
     finalized         = false;
     this.forward      = forward;
-    this.dirtyState   = true;
 
   }
 
@@ -217,7 +213,6 @@
   public void storeTime(final double t) {
 
     currentTime = t;
-    h           = currentTime - previousTime;
     setInterpolatedTime(t);
 
     // the step is not finalized anymore
@@ -243,7 +238,8 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
+      this.forward = true;
+	dirtyState       = true;
   }
 
   /** {@inheritDoc} */
@@ -272,7 +268,6 @@
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
-          computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
       }
 
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v3951)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v3951)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -59,7 +59,6 @@
      */
     protected ConvergingAlgorithmImpl(final int defaultMaximalIterationCount,
                                       final double defaultAbsoluteAccuracy) {
-        this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v3951)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -105,7 +105,6 @@
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
-        increasing        = true;
         nextAction        = EventHandler.CONTINUE;
 
     }
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v3951)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v3951)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v3951)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,7 +223,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
+            if (y2 == 0.0) {
                 // use the bracket point if is better than last approximation
                 x0 = x1;
                 x1 = x2;
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v3973)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -87,7 +87,6 @@
    * initializing the copy.
    */
   protected AbstractStepInterpolator() {
-    previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
@@ -96,7 +95,6 @@
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -106,7 +104,6 @@
    */
   protected AbstractStepInterpolator(final double[] y, final boolean forward) {
 
-    previousTime      = Double.NaN;
     currentTime       = Double.NaN;
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
@@ -117,7 +114,6 @@
 
     finalized         = false;
     this.forward      = forward;
-    this.dirtyState   = true;
 
   }
 
@@ -272,7 +268,6 @@
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
-          computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
       }
 
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v3973)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v3973)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -105,7 +105,6 @@
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
-        increasing        = true;
         nextAction        = EventHandler.CONTINUE;
 
     }
@@ -213,7 +212,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v3973)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v3973)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v4068)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -87,7 +87,6 @@
    * initializing the copy.
    */
   protected AbstractStepInterpolator() {
-    previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
@@ -96,7 +95,6 @@
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -106,7 +104,6 @@
    */
   protected AbstractStepInterpolator(final double[] y, final boolean forward) {
 
-    previousTime      = Double.NaN;
     currentTime       = Double.NaN;
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
@@ -117,7 +114,6 @@
 
     finalized         = false;
     this.forward      = forward;
-    this.dirtyState   = true;
 
   }
 
@@ -179,7 +175,6 @@
 
     finalized         = false;
     this.forward      = isForward;
-    this.dirtyState   = true;
 
   }
 
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v4068)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v4068)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -213,7 +213,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v4068)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v4068)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v4068)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -304,7 +304,6 @@
                 delta = x1 - x0;
                 oldDelta = delta;
             }
-            i++;
         }
         throw new MaxIterationsExceededException(maximalIterationCount);
     }
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v4071)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -87,7 +87,6 @@
    * initializing the copy.
    */
   protected AbstractStepInterpolator() {
-    previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
@@ -96,7 +95,6 @@
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -106,18 +104,14 @@
    */
   protected AbstractStepInterpolator(final double[] y, final boolean forward) {
 
-    previousTime      = Double.NaN;
     currentTime       = Double.NaN;
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
     currentState            = y;
     interpolatedState       = new double[y.length];
-    interpolatedDerivatives = new double[y.length];
-
     finalized         = false;
     this.forward      = forward;
-    this.dirtyState   = true;
 
   }
 
@@ -168,7 +162,6 @@
    */
   protected void reinitialize(final double[] y, final boolean isForward) {
 
-    previousTime      = Double.NaN;
     currentTime       = Double.NaN;
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v4071)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v4071)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -213,7 +213,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v4071)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v4071)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v4090)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -87,7 +87,6 @@
    * initializing the copy.
    */
   protected AbstractStepInterpolator() {
-    previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
@@ -217,7 +216,6 @@
   public void storeTime(final double t) {
 
     currentTime = t;
-    h           = currentTime - previousTime;
     setInterpolatedTime(t);
 
     // the step is not finalized anymore
@@ -243,7 +241,8 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
+      this.forward = true;
+	dirtyState       = true;
   }
 
   /** {@inheritDoc} */
@@ -272,7 +271,6 @@
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
-          computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
       }
 
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v4090)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v4090)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -105,7 +105,6 @@
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
-        increasing        = true;
         nextAction        = EventHandler.CONTINUE;
 
     }
@@ -169,7 +168,6 @@
 
         try {
 
-            forward = interpolator.isForward();
             final double t1 = interpolator.getCurrentTime();
             final int    n  = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));
             final double h  = (t1 - t0) / n;
@@ -213,7 +211,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v4090)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v4090)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v4353)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -87,7 +87,6 @@
    * initializing the copy.
    */
   protected AbstractStepInterpolator() {
-    previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
@@ -96,7 +95,7 @@
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
+	interpolatedTime = Double.NaN;
   }
 
   /** Simple constructor.
@@ -217,7 +216,6 @@
   public void storeTime(final double t) {
 
     currentTime = t;
-    h           = currentTime - previousTime;
     setInterpolatedTime(t);
 
     // the step is not finalized anymore
@@ -243,7 +241,8 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
+      this.forward = true;
+	dirtyState       = true;
   }
 
   /** {@inheritDoc} */
@@ -272,7 +271,6 @@
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
-          computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
       }
 
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v4353)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v4353)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -213,7 +213,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v4353)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v4353)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v4359)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -87,7 +87,6 @@
    * initializing the copy.
    */
   protected AbstractStepInterpolator() {
-    previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
@@ -96,7 +95,6 @@
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -117,7 +115,6 @@
 
     finalized         = false;
     this.forward      = forward;
-    this.dirtyState   = true;
 
   }
 
@@ -179,7 +176,6 @@
 
     finalized         = false;
     this.forward      = isForward;
-    this.dirtyState   = true;
 
   }
 
@@ -217,7 +213,6 @@
   public void storeTime(final double t) {
 
     currentTime = t;
-    h           = currentTime - previousTime;
     setInterpolatedTime(t);
 
     // the step is not finalized anymore
@@ -243,7 +238,8 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
+      this.forward = true;
+	dirtyState       = true;
   }
 
   /** {@inheritDoc} */
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v4359)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v4359)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -106,7 +106,7 @@
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
-        nextAction        = EventHandler.CONTINUE;
+        pendingEvent = false;
 
     }
 
@@ -213,7 +213,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v4359)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v4359)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v4375)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -87,7 +87,6 @@
    * initializing the copy.
    */
   protected AbstractStepInterpolator() {
-    previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
@@ -96,7 +95,6 @@
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -106,7 +104,6 @@
    */
   protected AbstractStepInterpolator(final double[] y, final boolean forward) {
 
-    previousTime      = Double.NaN;
     currentTime       = Double.NaN;
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
@@ -117,7 +114,6 @@
 
     finalized         = false;
     this.forward      = forward;
-    this.dirtyState   = true;
 
   }
 
@@ -179,7 +175,6 @@
 
     finalized         = false;
     this.forward      = isForward;
-    this.dirtyState   = true;
 
   }
 
@@ -217,7 +212,6 @@
   public void storeTime(final double t) {
 
     currentTime = t;
-    h           = currentTime - previousTime;
     setInterpolatedTime(t);
 
     // the step is not finalized anymore
@@ -272,7 +266,6 @@
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
-          computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
       }
 
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v4375)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v4375)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -176,7 +176,8 @@
 
             double ta = t0;
             double ga = g0;
-            double tb = t0 + (interpolator.isForward() ? convergence : -convergence);
+            nextAction = EventHandler.CONTINUE;
+			double tb = t0 + (interpolator.isForward() ? convergence : -convergence);
             for (int i = 0; i < n; ++i) {
 
                 // evaluate handler value at the end of the substep
@@ -213,7 +214,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v4375)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v4375)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v4457)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -87,7 +87,6 @@
    * initializing the copy.
    */
   protected AbstractStepInterpolator() {
-    previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
@@ -106,7 +105,6 @@
    */
   protected AbstractStepInterpolator(final double[] y, final boolean forward) {
 
-    previousTime      = Double.NaN;
     currentTime       = Double.NaN;
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
@@ -217,7 +215,6 @@
   public void storeTime(final double t) {
 
     currentTime = t;
-    h           = currentTime - previousTime;
     setInterpolatedTime(t);
 
     // the step is not finalized anymore
@@ -272,7 +269,6 @@
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
-          computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
       }
 
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v4457)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v4457)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -59,7 +59,6 @@
      */
     protected ConvergingAlgorithmImpl(final int defaultMaximalIterationCount,
                                       final double defaultAbsoluteAccuracy) {
-        this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
@@ -90,7 +89,7 @@
 
     /** {@inheritDoc} */
     public void setMaximalIterationCount(int count) {
-        maximalIterationCount = count;
+        this.iterationCount = 0;
     }
 
     /** {@inheritDoc} */
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v4457)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -106,7 +106,7 @@
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
-        nextAction        = EventHandler.CONTINUE;
+        pendingEvent = false;
 
     }
 
@@ -213,7 +213,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v4457)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v4457)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v4479)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -87,7 +87,6 @@
    * initializing the copy.
    */
   protected AbstractStepInterpolator() {
-    previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
@@ -96,7 +95,6 @@
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -106,7 +104,6 @@
    */
   protected AbstractStepInterpolator(final double[] y, final boolean forward) {
 
-    previousTime      = Double.NaN;
     currentTime       = Double.NaN;
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
@@ -117,7 +114,6 @@
 
     finalized         = false;
     this.forward      = forward;
-    this.dirtyState   = true;
 
   }
 
@@ -168,7 +164,6 @@
    */
   protected void reinitialize(final double[] y, final boolean isForward) {
 
-    previousTime      = Double.NaN;
     currentTime       = Double.NaN;
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v4479)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v4479)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -90,7 +90,7 @@
 
     /** {@inheritDoc} */
     public void setMaximalIterationCount(int count) {
-        maximalIterationCount = count;
+        this.iterationCount = 0;
     }
 
     /** {@inheritDoc} */
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v4479)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -105,8 +105,7 @@
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
-        increasing        = true;
-        nextAction        = EventHandler.CONTINUE;
+        pendingEvent = false;
 
     }
 
@@ -182,6 +181,7 @@
                 // evaluate handler value at the end of the substep
                 tb += h;
                 interpolator.setInterpolatedTime(tb);
+				g0Positive = increasing;
                 final double gb = handler.g(tb, interpolator.getInterpolatedState());
 
                 // check events occurrence
@@ -213,7 +213,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v4479)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v4479)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v4698)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -87,7 +87,6 @@
    * initializing the copy.
    */
   protected AbstractStepInterpolator() {
-    previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
@@ -96,7 +95,6 @@
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -113,11 +111,8 @@
 
     currentState            = y;
     interpolatedState       = new double[y.length];
-    interpolatedDerivatives = new double[y.length];
-
     finalized         = false;
     this.forward      = forward;
-    this.dirtyState   = true;
 
   }
 
@@ -179,7 +174,6 @@
 
     finalized         = false;
     this.forward      = isForward;
-    this.dirtyState   = true;
 
   }
 
@@ -217,7 +211,6 @@
   public void storeTime(final double t) {
 
     currentTime = t;
-    h           = currentTime - previousTime;
     setInterpolatedTime(t);
 
     // the step is not finalized anymore
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v4698)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v4698)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -90,7 +90,7 @@
 
     /** {@inheritDoc} */
     public void setMaximalIterationCount(int count) {
-        maximalIterationCount = count;
+        this.iterationCount = 0;
     }
 
     /** {@inheritDoc} */
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v4698)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -213,7 +213,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v4698)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v4698)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v4852)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -96,7 +96,6 @@
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -117,7 +116,6 @@
 
     finalized         = false;
     this.forward      = forward;
-    this.dirtyState   = true;
 
   }
 
@@ -179,7 +177,6 @@
 
     finalized         = false;
     this.forward      = isForward;
-    this.dirtyState   = true;
 
   }
 
@@ -217,7 +214,6 @@
   public void storeTime(final double t) {
 
     currentTime = t;
-    h           = currentTime - previousTime;
     setInterpolatedTime(t);
 
     // the step is not finalized anymore
@@ -243,7 +239,8 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
+      this.forward = true;
+	dirtyState       = true;
   }
 
   /** {@inheritDoc} */
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v4852)
--- org.apache.commons.math.ode.sampling.DummyStepInterpolator
+++ org.apache.commons.math.ode.sampling.DummyStepInterpolator
@@ -96,7 +96,6 @@
   @Override
   protected void computeInterpolatedStateAndDerivatives(final double theta, final double oneMinusThetaH)
     throws DerivativeException {
-      System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
   }
 
   /** Write the instance to an output channel.
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v4852)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v4852)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -59,7 +59,6 @@
      */
     protected ConvergingAlgorithmImpl(final int defaultMaximalIterationCount,
                                       final double defaultAbsoluteAccuracy) {
-        this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
@@ -90,7 +89,7 @@
 
     /** {@inheritDoc} */
     public void setMaximalIterationCount(int count) {
-        maximalIterationCount = count;
+        this.iterationCount = 0;
     }
 
     /** {@inheritDoc} */
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v4852)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -213,7 +213,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v4852)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v4852)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v4856)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -87,7 +87,6 @@
    * initializing the copy.
    */
   protected AbstractStepInterpolator() {
-    previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
@@ -96,7 +95,6 @@
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -243,7 +241,8 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
+      this.forward = true;
+	dirtyState       = true;
   }
 
   /** {@inheritDoc} */
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v4856)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v4856)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -90,7 +90,7 @@
 
     /** {@inheritDoc} */
     public void setMaximalIterationCount(int count) {
-        maximalIterationCount = count;
+        this.iterationCount = 0;
     }
 
     /** {@inheritDoc} */
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v4856)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -105,7 +105,6 @@
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
-        increasing        = true;
         nextAction        = EventHandler.CONTINUE;
 
     }
@@ -150,7 +149,6 @@
         throws EventException {
         t0 = tStart;
         g0 = handler.g(tStart, yStart);
-        g0Positive = g0 >= 0;
     }
 
     /** Evaluate the impact of the proposed step on the event handler.
@@ -182,6 +180,7 @@
                 // evaluate handler value at the end of the substep
                 tb += h;
                 interpolator.setInterpolatedTime(tb);
+				g0Positive = increasing;
                 final double gb = handler.g(tb, interpolator.getInterpolatedState());
 
                 // check events occurrence
@@ -213,7 +212,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v4856)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v4856)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v4877)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -87,7 +87,6 @@
    * initializing the copy.
    */
   protected AbstractStepInterpolator() {
-    previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
@@ -96,7 +95,6 @@
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -113,11 +111,8 @@
 
     currentState            = y;
     interpolatedState       = new double[y.length];
-    interpolatedDerivatives = new double[y.length];
-
     finalized         = false;
     this.forward      = forward;
-    this.dirtyState   = true;
 
   }
 
@@ -217,7 +212,6 @@
   public void storeTime(final double t) {
 
     currentTime = t;
-    h           = currentTime - previousTime;
     setInterpolatedTime(t);
 
     // the step is not finalized anymore
@@ -272,7 +266,6 @@
       if (dirtyState) {
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
-          computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
           dirtyState = false;
       }
 
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v4877)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v4877)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -105,8 +105,7 @@
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
-        increasing        = true;
-        nextAction        = EventHandler.CONTINUE;
+        pendingEvent = false;
 
     }
 
@@ -213,7 +212,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v4877)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v4877)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v5629)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -87,7 +87,6 @@
    * initializing the copy.
    */
   protected AbstractStepInterpolator() {
-    previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
@@ -95,8 +94,8 @@
     interpolatedState       = null;
     interpolatedDerivatives = null;
     finalized               = false;
-    this.forward            = true;
-    this.dirtyState         = true;
+    interpolatedTime = Double.NaN;
+	this.forward            = true;
   }
 
   /** Simple constructor.
@@ -106,7 +105,6 @@
    */
   protected AbstractStepInterpolator(final double[] y, final boolean forward) {
 
-    previousTime      = Double.NaN;
     currentTime       = Double.NaN;
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
@@ -117,7 +115,6 @@
 
     finalized         = false;
     this.forward      = forward;
-    this.dirtyState   = true;
 
   }
 
@@ -168,7 +165,6 @@
    */
   protected void reinitialize(final double[] y, final boolean isForward) {
 
-    previousTime      = Double.NaN;
     currentTime       = Double.NaN;
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
@@ -243,7 +239,10 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
+      this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	dirtyState       = true;
   }
 
   /** {@inheritDoc} */
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v5629)
--- org.apache.commons.math.ode.sampling.DummyStepInterpolator
+++ org.apache.commons.math.ode.sampling.DummyStepInterpolator
@@ -96,7 +96,6 @@
   @Override
   protected void computeInterpolatedStateAndDerivatives(final double theta, final double oneMinusThetaH)
     throws DerivativeException {
-      System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
   }
 
   /** Write the instance to an output channel.
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v5629)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v5629)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v5629)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v5629)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v5805)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -87,7 +87,6 @@
    * initializing the copy.
    */
   protected AbstractStepInterpolator() {
-    previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
@@ -96,7 +95,6 @@
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -106,7 +104,6 @@
    */
   protected AbstractStepInterpolator(final double[] y, final boolean forward) {
 
-    previousTime      = Double.NaN;
     currentTime       = Double.NaN;
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
@@ -243,7 +240,11 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
+      this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	dirtyState       = true;
   }
 
   /** {@inheritDoc} */
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v5805)
--- org.apache.commons.math.ode.sampling.DummyStepInterpolator
+++ org.apache.commons.math.ode.sampling.DummyStepInterpolator
@@ -96,7 +96,6 @@
   @Override
   protected void computeInterpolatedStateAndDerivatives(final double theta, final double oneMinusThetaH)
     throws DerivativeException {
-      System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
   }
 
   /** Write the instance to an output channel.
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v5805)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v5805)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -61,7 +61,7 @@
                                       final double defaultAbsoluteAccuracy) {
         this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
         this.defaultRelativeAccuracy = 1.0e-14;
-        this.absoluteAccuracy = defaultAbsoluteAccuracy;
+        relativeAccuracy = defaultRelativeAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v5805)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -102,7 +102,7 @@
         t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
+        pendingEvent = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v5805)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v5805)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v5805)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,15 +223,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v5833)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -87,7 +87,6 @@
    * initializing the copy.
    */
   protected AbstractStepInterpolator() {
-    previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
@@ -96,7 +95,6 @@
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -106,7 +104,6 @@
    */
   protected AbstractStepInterpolator(final double[] y, final boolean forward) {
 
-    previousTime      = Double.NaN;
     currentTime       = Double.NaN;
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
@@ -243,7 +240,11 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
+      this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	dirtyState       = true;
   }
 
   /** {@inheritDoc} */
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v5833)
--- org.apache.commons.math.ode.sampling.DummyStepInterpolator
+++ org.apache.commons.math.ode.sampling.DummyStepInterpolator
@@ -96,7 +96,6 @@
   @Override
   protected void computeInterpolatedStateAndDerivatives(final double theta, final double oneMinusThetaH)
     throws DerivativeException {
-      System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
   }
 
   /** Write the instance to an output channel.
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v5833)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v5833)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -61,7 +61,7 @@
                                       final double defaultAbsoluteAccuracy) {
         this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
         this.defaultRelativeAccuracy = 1.0e-14;
-        this.absoluteAccuracy = defaultAbsoluteAccuracy;
+        relativeAccuracy = defaultRelativeAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v5833)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -102,7 +102,7 @@
         t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
+        pendingEvent = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v5833)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v5833)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v5833)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -276,10 +276,6 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v5839)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -87,7 +87,6 @@
    * initializing the copy.
    */
   protected AbstractStepInterpolator() {
-    previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
@@ -96,7 +95,6 @@
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -106,7 +104,6 @@
    */
   protected AbstractStepInterpolator(final double[] y, final boolean forward) {
 
-    previousTime      = Double.NaN;
     currentTime       = Double.NaN;
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
@@ -243,7 +240,11 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
+      this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	dirtyState       = true;
   }
 
   /** {@inheritDoc} */
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v5839)
--- org.apache.commons.math.ode.sampling.DummyStepInterpolator
+++ org.apache.commons.math.ode.sampling.DummyStepInterpolator
@@ -96,7 +96,6 @@
   @Override
   protected void computeInterpolatedStateAndDerivatives(final double theta, final double oneMinusThetaH)
     throws DerivativeException {
-      System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
   }
 
   /** Write the instance to an output channel.
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v5839)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v5839)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -61,7 +61,7 @@
                                       final double defaultAbsoluteAccuracy) {
         this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
         this.defaultRelativeAccuracy = 1.0e-14;
-        this.absoluteAccuracy = defaultAbsoluteAccuracy;
+        relativeAccuracy = defaultRelativeAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v5839)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -102,7 +102,7 @@
         t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
+        pendingEvent = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v5839)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v5839)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v5839)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -276,13 +276,12 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
+					double r1 = y0 / y2;
+					double r2 = y1 / y2;
+					p = r3 * (dx * r1 * (r1 - r2) - (x1 - x0) * (r2 - 1.0));
+					p1 = (r1 - 1.0) * (r2 - 1.0) * (r3 - 1.0);
+				} else {
                     oldDelta = delta;
-                } else {
-                    oldDelta = delta;
                     delta = p / p1;
                 }
             }
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v5909)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -87,7 +87,6 @@
    * initializing the copy.
    */
   protected AbstractStepInterpolator() {
-    previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
@@ -96,7 +95,6 @@
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -106,7 +104,6 @@
    */
   protected AbstractStepInterpolator(final double[] y, final boolean forward) {
 
-    previousTime      = Double.NaN;
     currentTime       = Double.NaN;
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
@@ -243,7 +240,10 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
+      this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
   }
 
   /** {@inheritDoc} */
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v5909)
--- org.apache.commons.math.ode.sampling.DummyStepInterpolator
+++ org.apache.commons.math.ode.sampling.DummyStepInterpolator
@@ -96,7 +96,6 @@
   @Override
   protected void computeInterpolatedStateAndDerivatives(final double theta, final double oneMinusThetaH)
     throws DerivativeException {
-      System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
   }
 
   /** Write the instance to an output channel.
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v5909)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v5909)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -61,7 +61,7 @@
                                       final double defaultAbsoluteAccuracy) {
         this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
         this.defaultRelativeAccuracy = 1.0e-14;
-        this.absoluteAccuracy = defaultAbsoluteAccuracy;
+        relativeAccuracy = defaultRelativeAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v5909)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -102,7 +102,7 @@
         t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
+        pendingEvent = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v5909)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v5909)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v5909)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,15 +223,8 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
+				delta = 0.5 * oldDelta;
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v5945)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -87,7 +87,6 @@
    * initializing the copy.
    */
   protected AbstractStepInterpolator() {
-    previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
@@ -96,7 +95,6 @@
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -106,7 +104,6 @@
    */
   protected AbstractStepInterpolator(final double[] y, final boolean forward) {
 
-    previousTime      = Double.NaN;
     currentTime       = Double.NaN;
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
@@ -243,7 +240,10 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
+      this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
   }
 
   /** {@inheritDoc} */
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v5945)
--- org.apache.commons.math.ode.sampling.DummyStepInterpolator
+++ org.apache.commons.math.ode.sampling.DummyStepInterpolator
@@ -96,7 +96,6 @@
   @Override
   protected void computeInterpolatedStateAndDerivatives(final double theta, final double oneMinusThetaH)
     throws DerivativeException {
-      System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
   }
 
   /** Write the instance to an output channel.
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v5945)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v5945)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -61,7 +61,7 @@
                                       final double defaultAbsoluteAccuracy) {
         this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
         this.defaultRelativeAccuracy = 1.0e-14;
-        this.absoluteAccuracy = defaultAbsoluteAccuracy;
+        relativeAccuracy = defaultRelativeAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v5945)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -102,7 +102,7 @@
         t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
+        pendingEvent = false;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v5945)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v5945)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v5945)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,15 +223,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v7304)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -87,7 +87,6 @@
    * initializing the copy.
    */
   protected AbstractStepInterpolator() {
-    previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
@@ -95,8 +94,8 @@
     interpolatedState       = null;
     interpolatedDerivatives = null;
     finalized               = false;
-    this.forward            = true;
-    this.dirtyState         = true;
+    interpolatedTime = Double.NaN;
+	this.forward            = true;
   }
 
   /** Simple constructor.
@@ -106,7 +105,6 @@
    */
   protected AbstractStepInterpolator(final double[] y, final boolean forward) {
 
-    previousTime      = Double.NaN;
     currentTime       = Double.NaN;
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
@@ -243,7 +241,6 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
   }
 
   /** {@inheritDoc} */
@@ -418,7 +415,8 @@
     currentTime   = in.readDouble();
     h             = in.readDouble();
     forward       = in.readBoolean();
-    dirtyState    = true;
+    this.forward = true;
+	dirtyState    = true;
 
     if (dimension < 0) {
         currentState = null;
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v7304)
--- org.apache.commons.math.ode.sampling.DummyStepInterpolator
+++ org.apache.commons.math.ode.sampling.DummyStepInterpolator
@@ -96,7 +96,6 @@
   @Override
   protected void computeInterpolatedStateAndDerivatives(final double theta, final double oneMinusThetaH)
     throws DerivativeException {
-      System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
   }
 
   /** Write the instance to an output channel.
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v7304)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v7304)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v7304)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -101,8 +101,7 @@
         // some dummy values ...
         t0                = Double.NaN;
         g0                = Double.NaN;
-        g0Positive        = true;
-        pendingEvent      = false;
+        nextAction = EventHandler.CONTINUE;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
@@ -177,7 +176,7 @@
             double ta = t0;
             double ga = g0;
             double tb = t0 + (interpolator.isForward() ? convergence : -convergence);
-            for (int i = 0; i < n; ++i) {
+            for (int i = 0; interpolator.isForward(); ++i) {
 
                 // evaluate handler value at the end of the substep
                 tb += h;
@@ -214,7 +213,8 @@
                     };
                     final BrentSolver solver = new BrentSolver();
                     solver.setAbsoluteAccuracy(convergence);
-                    solver.setMaximalIterationCount(maxIterationCount);
+                    ga = gb;
+					solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v7304)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v7304)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v7441)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -87,7 +87,6 @@
    * initializing the copy.
    */
   protected AbstractStepInterpolator() {
-    previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
@@ -95,8 +94,8 @@
     interpolatedState       = null;
     interpolatedDerivatives = null;
     finalized               = false;
-    this.forward            = true;
-    this.dirtyState         = true;
+    interpolatedTime = Double.NaN;
+	this.forward            = true;
   }
 
   /** Simple constructor.
@@ -106,7 +105,6 @@
    */
   protected AbstractStepInterpolator(final double[] y, final boolean forward) {
 
-    previousTime      = Double.NaN;
     currentTime       = Double.NaN;
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
@@ -243,7 +241,6 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
   }
 
   /** {@inheritDoc} */
@@ -418,7 +415,8 @@
     currentTime   = in.readDouble();
     h             = in.readDouble();
     forward       = in.readBoolean();
-    dirtyState    = true;
+    this.forward = true;
+	dirtyState    = true;
 
     if (dimension < 0) {
         currentState = null;
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v7441)
--- org.apache.commons.math.ode.sampling.DummyStepInterpolator
+++ org.apache.commons.math.ode.sampling.DummyStepInterpolator
@@ -96,7 +96,6 @@
   @Override
   protected void computeInterpolatedStateAndDerivatives(final double theta, final double oneMinusThetaH)
     throws DerivativeException {
-      System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
   }
 
   /** Write the instance to an output channel.
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v7441)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v7441)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -101,8 +101,7 @@
         // some dummy values ...
         t0                = Double.NaN;
         g0                = Double.NaN;
-        g0Positive        = true;
-        pendingEvent      = false;
+        nextAction = EventHandler.CONTINUE;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
@@ -177,7 +176,7 @@
             double ta = t0;
             double ga = g0;
             double tb = t0 + (interpolator.isForward() ? convergence : -convergence);
-            for (int i = 0; i < n; ++i) {
+            for (int i = 0; interpolator.isForward(); ++i) {
 
                 // evaluate handler value at the end of the substep
                 tb += h;
@@ -213,8 +212,9 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
-                    solver.setMaximalIterationCount(maxIterationCount);
+                    interpolator.setInterpolatedTime(tb);
+                    ga = gb;
+					solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v7441)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v7441)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v7441)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -242,7 +242,7 @@
             double dx = x2 - x1;
             double tolerance =
                 Math.max(relativeAccuracy * Math.abs(x1), absoluteAccuracy);
-            if (Math.abs(dx) <= tolerance) {
+            if (Math.abs(oldDelta) < Math.max(relativeAccuracy * Math.abs(x1), absoluteAccuracy)) {
                 setResult(x1, i);
                 return result;
             }
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v7645)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -87,7 +87,6 @@
    * initializing the copy.
    */
   protected AbstractStepInterpolator() {
-    previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
@@ -95,8 +94,8 @@
     interpolatedState       = null;
     interpolatedDerivatives = null;
     finalized               = false;
-    this.forward            = true;
-    this.dirtyState         = true;
+    interpolatedTime = Double.NaN;
+	this.forward            = true;
   }
 
   /** Simple constructor.
@@ -106,7 +105,6 @@
    */
   protected AbstractStepInterpolator(final double[] y, final boolean forward) {
 
-    previousTime      = Double.NaN;
     currentTime       = Double.NaN;
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
@@ -117,7 +115,6 @@
 
     finalized         = false;
     this.forward      = forward;
-    this.dirtyState   = true;
 
   }
 
@@ -243,7 +240,10 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
+      this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	dirtyState       = true;
   }
 
   /** {@inheritDoc} */
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v7645)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v7645)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -101,8 +101,7 @@
         // some dummy values ...
         t0                = Double.NaN;
         g0                = Double.NaN;
-        g0Positive        = true;
-        pendingEvent      = false;
+        nextAction = EventHandler.CONTINUE;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
@@ -177,7 +176,7 @@
             double ta = t0;
             double ga = g0;
             double tb = t0 + (interpolator.isForward() ? convergence : -convergence);
-            for (int i = 0; i < n; ++i) {
+            for (int i = 0; interpolator.isForward(); ++i) {
 
                 // evaluate handler value at the end of the substep
                 tb += h;
@@ -213,8 +212,8 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
-                    solver.setMaximalIterationCount(maxIterationCount);
+                    ga = gb;
+					solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
@@ -323,7 +322,7 @@
         if (nextAction == EventHandler.RESET_STATE) {
             handler.resetState(t, y);
         }
-        pendingEvent      = false;
+        nextAction = EventHandler.CONTINUE;
         pendingEventTime  = Double.NaN;
 
         return (nextAction == EventHandler.RESET_STATE) ||
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v7645)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v7645)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v7645)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -242,7 +242,7 @@
             double dx = x2 - x1;
             double tolerance =
                 Math.max(relativeAccuracy * Math.abs(x1), absoluteAccuracy);
-            if (Math.abs(dx) <= tolerance) {
+            if (Math.abs(oldDelta) < Math.max(relativeAccuracy * Math.abs(x1), absoluteAccuracy)) {
                 setResult(x1, i);
                 return result;
             }
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v8018)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -96,7 +96,6 @@
     interpolatedDerivatives = null;
     finalized               = false;
     this.forward            = true;
-    this.dirtyState         = true;
   }
 
   /** Simple constructor.
@@ -117,7 +116,6 @@
 
     finalized         = false;
     this.forward      = forward;
-    this.dirtyState   = true;
 
   }
 
@@ -208,7 +206,8 @@
    * interpolator for future calls to {@link #storeTime storeTime}
    */
   public void shift() {
-    previousTime = currentTime;
+    this.dirtyState = true;
+	this.dirtyState = true;
   }
 
   /** Store the current step time.
@@ -243,7 +242,7 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
+      this.forward = true;
   }
 
   /** {@inheritDoc} */
@@ -273,7 +272,6 @@
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
-          dirtyState = false;
       }
 
       return interpolatedState;
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v8018)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v8018)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -61,7 +61,6 @@
                                       final double defaultAbsoluteAccuracy) {
         this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
         this.defaultRelativeAccuracy = 1.0e-14;
-        this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
         this.maximalIterationCount = defaultMaximalIterationCount;
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v8018)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -102,11 +102,11 @@
         t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
+        nextAction = EventHandler.CONTINUE;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
-        nextAction        = EventHandler.CONTINUE;
+        pendingEvent = false;
 
     }
 
@@ -177,7 +177,7 @@
             double ta = t0;
             double ga = g0;
             double tb = t0 + (interpolator.isForward() ? convergence : -convergence);
-            for (int i = 0; i < n; ++i) {
+            for (int i = 0; interpolator.isForward(); ++i) {
 
                 // evaluate handler value at the end of the substep
                 tb += h;
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v8018)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v8018)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v8018)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -100,7 +100,6 @@
      */
     protected void checkResultComputed() throws IllegalStateException {
         if (!resultComputed) {
-            throw MathRuntimeException.createIllegalStateException("no result available");
         }
     }
 
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v8018)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -276,10 +276,7 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
+                    checkResultComputed();
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v8321)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -87,7 +87,6 @@
    * initializing the copy.
    */
   protected AbstractStepInterpolator() {
-    previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
@@ -95,8 +94,9 @@
     interpolatedState       = null;
     interpolatedDerivatives = null;
     finalized               = false;
-    this.forward            = true;
-    this.dirtyState         = true;
+    interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	this.forward            = true;
   }
 
   /** Simple constructor.
@@ -111,7 +111,6 @@
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
-    currentState            = y;
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
@@ -173,7 +172,6 @@
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
-    currentState            = y;
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
@@ -208,7 +206,6 @@
    * interpolator for future calls to {@link #storeTime storeTime}
    */
   public void shift() {
-    previousTime = currentTime;
   }
 
   /** Store the current step time.
@@ -243,7 +240,6 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
   }
 
   /** {@inheritDoc} */
@@ -418,7 +414,8 @@
     currentTime   = in.readDouble();
     h             = in.readDouble();
     forward       = in.readBoolean();
-    dirtyState    = true;
+    this.forward = true;
+	dirtyState    = true;
 
     if (dimension < 0) {
         currentState = null;
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v8321)
--- org.apache.commons.math.ode.sampling.DummyStepInterpolator
+++ org.apache.commons.math.ode.sampling.DummyStepInterpolator
@@ -96,7 +96,6 @@
   @Override
   protected void computeInterpolatedStateAndDerivatives(final double theta, final double oneMinusThetaH)
     throws DerivativeException {
-      System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
   }
 
   /** Write the instance to an output channel.
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v8321)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v8321)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -102,7 +102,7 @@
         t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
+        nextAction = EventHandler.CONTINUE;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
@@ -214,7 +214,8 @@
                     };
                     final BrentSolver solver = new BrentSolver();
                     solver.setAbsoluteAccuracy(convergence);
-                    solver.setMaximalIterationCount(maxIterationCount);
+                    ga = gb;
+					solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
                          (Math.abs(root - previousEventTime) <= convergence)) {
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v8321)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v8321)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v8321)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -162,7 +162,6 @@
      * Convenience function for implementations.
      */
     protected final void clearResult() {
-        this.iterationCount = 0;
         this.resultComputed = false;
     }
 
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v8321)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -156,8 +156,6 @@
         FunctionEvaluationException {
 
         clearResult();
-        verifyInterval(min, max);
-
         double ret = Double.NaN;
 
         double yMin = f.value(min);
@@ -258,7 +256,7 @@
                 // the equality test (x0 == x2) is intentional,
                 // it is part of the original Brent's method,
                 // it should NOT be replaced by proximity test
-                if (x0 == x2) {
+                if (i < maximalIterationCount) {
                     // Linear interpolation.
                     p = dx * r3;
                     p1 = 1.0 - r3;
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v11234)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -87,7 +87,6 @@
    * initializing the copy.
    */
   protected AbstractStepInterpolator() {
-    previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
@@ -95,8 +94,8 @@
     interpolatedState       = null;
     interpolatedDerivatives = null;
     finalized               = false;
-    this.forward            = true;
-    this.dirtyState         = true;
+    interpolatedTime = Double.NaN;
+	this.forward            = true;
   }
 
   /** Simple constructor.
@@ -117,7 +116,6 @@
 
     finalized         = false;
     this.forward      = forward;
-    this.dirtyState   = true;
 
   }
 
@@ -179,7 +177,6 @@
 
     finalized         = false;
     this.forward      = isForward;
-    this.dirtyState   = true;
 
   }
 
@@ -217,7 +214,6 @@
   public void storeTime(final double t) {
 
     currentTime = t;
-    h           = currentTime - previousTime;
     setInterpolatedTime(t);
 
     // the step is not finalized anymore
@@ -243,7 +239,14 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
+	interpolatedTime = Double.NaN;
+      this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	dirtyState       = true;
   }
 
   /** {@inheritDoc} */
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v11234)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v11234)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -59,7 +59,7 @@
      */
     protected ConvergingAlgorithmImpl(final int defaultMaximalIterationCount,
                                       final double defaultAbsoluteAccuracy) {
-        this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
+        super();
         this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v11234)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -102,7 +102,7 @@
         t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
-        pendingEvent      = false;
+        nextAction = EventHandler.CONTINUE;
         pendingEventTime  = Double.NaN;
         previousEventTime = Double.NaN;
         increasing        = true;
@@ -149,6 +149,7 @@
     public void reinitializeBegin(final double tStart, final double[] yStart)
         throws EventException {
         t0 = tStart;
+		t0 = tStart;
         g0 = handler.g(tStart, yStart);
         g0Positive = g0 >= 0;
     }
@@ -282,7 +283,7 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
+        nextAction = handler.eventOccurred(t, y, !(increasing ^ forward));
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v11234)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v11234)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v11234)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -162,7 +162,6 @@
      * Convenience function for implementations.
      */
     protected final void clearResult() {
-        this.iterationCount = 0;
         this.resultComputed = false;
     }
 
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v11234)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -233,10 +233,7 @@
                 y2 = y0;
             }
             if (Math.abs(y1) <= functionValueAccuracy) {
-                // Avoid division by very small values. Assume
-                // the iteration has converged (the problem may
-                // still be ill conditioned)
-                setResult(x1, i);
+                checkResultComputed();
                 return result;
             }
             double dx = x2 - x1;
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v11764)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -87,7 +87,6 @@
    * initializing the copy.
    */
   protected AbstractStepInterpolator() {
-    previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
@@ -95,8 +94,9 @@
     interpolatedState       = null;
     interpolatedDerivatives = null;
     finalized               = false;
-    this.forward            = true;
-    this.dirtyState         = true;
+    interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	this.forward            = true;
   }
 
   /** Simple constructor.
@@ -117,7 +117,6 @@
 
     finalized         = false;
     this.forward      = forward;
-    this.dirtyState   = true;
 
   }
 
@@ -218,6 +217,8 @@
 
     currentTime = t;
     h           = currentTime - previousTime;
+	this.forward = true;
+	dirtyState = true;
     setInterpolatedTime(t);
 
     // the step is not finalized anymore
@@ -243,7 +244,16 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+      this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	dirtyState       = true;
   }
 
   /** {@inheritDoc} */
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v11764)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v11764)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -149,6 +149,7 @@
     public void reinitializeBegin(final double tStart, final double[] yStart)
         throws EventException {
         t0 = tStart;
+		t0 = tStart;
         g0 = handler.g(tStart, yStart);
         g0Positive = g0 >= 0;
     }
@@ -213,7 +214,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v11764)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v11764)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v12244)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -95,7 +95,13 @@
     interpolatedState       = null;
     interpolatedDerivatives = null;
     finalized               = false;
-    this.forward            = true;
+    interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	this.forward            = true;
     this.dirtyState         = true;
   }
 
@@ -217,7 +223,6 @@
   public void storeTime(final double t) {
 
     currentTime = t;
-    h           = currentTime - previousTime;
     setInterpolatedTime(t);
 
     // the step is not finalized anymore
@@ -243,7 +248,17 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+      this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	dirtyState       = true;
   }
 
   /** {@inheritDoc} */
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v12244)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v12244)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v12244)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v12244)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,20 +223,9 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
             if (Math.abs(y1) <= functionValueAccuracy) {
-                // Avoid division by very small values. Assume
-                // the iteration has converged (the problem may
-                // still be ill conditioned)
-                setResult(x1, i);
+                checkResultComputed();
                 return result;
             }
             double dx = x2 - x1;
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v12320)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -87,7 +87,6 @@
    * initializing the copy.
    */
   protected AbstractStepInterpolator() {
-    previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
@@ -95,7 +94,10 @@
     interpolatedState       = null;
     interpolatedDerivatives = null;
     finalized               = false;
-    this.forward            = true;
+    interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	this.forward            = true;
     this.dirtyState         = true;
   }
 
@@ -243,7 +245,20 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
+	interpolatedTime = Double.NaN;
+      this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	dirtyState       = true;
   }
 
   /** {@inheritDoc} */
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v12320)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v12320)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -286,8 +286,6 @@
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
-            // force the sign to its value "just after the event"
-            previousEventTime = t;
             g0Positive        = increasing;
             nextAction        = handler.eventOccurred(t, y, !(increasing ^ forward));
         } else {
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v12320)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v12320)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 19:04:07 [main] [INFO]  PatchLogExporter - patch (v12320)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,20 +223,9 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
             if (Math.abs(y1) <= functionValueAccuracy) {
-                // Avoid division by very small values. Assume
-                // the iteration has converged (the problem may
-                // still be ill conditioned)
-                setResult(x1, i);
+                checkResultComputed();
                 return result;
             }
             double dx = x2 - x1;
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v12582)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -95,7 +95,13 @@
     interpolatedState       = null;
     interpolatedDerivatives = null;
     finalized               = false;
-    this.forward            = true;
+    interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	this.forward            = true;
     this.dirtyState         = true;
   }
 
@@ -217,7 +223,6 @@
   public void storeTime(final double t) {
 
     currentTime = t;
-    h           = currentTime - previousTime;
     setInterpolatedTime(t);
 
     // the step is not finalized anymore
@@ -243,7 +248,17 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+      this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	dirtyState       = true;
   }
 
   /** {@inheritDoc} */
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v12582)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v12582)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -149,6 +149,7 @@
     public void reinitializeBegin(final double tStart, final double[] yStart)
         throws EventException {
         t0 = tStart;
+		t0 = tStart;
         g0 = handler.g(tStart, yStart);
         g0Positive = g0 >= 0;
     }
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v12582)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v12582)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v12582)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -233,10 +233,7 @@
                 y2 = y0;
             }
             if (Math.abs(y1) <= functionValueAccuracy) {
-                // Avoid division by very small values. Assume
-                // the iteration has converged (the problem may
-                // still be ill conditioned)
-                setResult(x1, i);
+                checkResultComputed();
                 return result;
             }
             double dx = x2 - x1;
@@ -276,10 +273,6 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v12620)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -95,8 +95,13 @@
     interpolatedState       = null;
     interpolatedDerivatives = null;
     finalized               = false;
-    this.forward            = true;
-    this.dirtyState         = true;
+    interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	this.forward            = true;
   }
 
   /** Simple constructor.
@@ -217,7 +222,6 @@
   public void storeTime(final double t) {
 
     currentTime = t;
-    h           = currentTime - previousTime;
     setInterpolatedTime(t);
 
     // the step is not finalized anymore
@@ -243,7 +247,17 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+      this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	dirtyState       = true;
   }
 
   /** {@inheritDoc} */
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v12620)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v12620)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -149,7 +149,9 @@
     public void reinitializeBegin(final double tStart, final double[] yStart)
         throws EventException {
         t0 = tStart;
-        g0 = handler.g(tStart, yStart);
+        g0 = Double.NaN;
+		g0 = Double.NaN;
+		g0 = handler.g(tStart, yStart);
         g0Positive = g0 >= 0;
     }
 
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v12620)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v12620)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v12620)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -274,8 +274,7 @@
                 } else {
                     p = -p;
                 }
-                if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
-                        p >= Math.abs(0.5 * oldDelta * p1)) {
+                if (Math.abs(y1) <= functionValueAccuracy) {
                     // Inverse quadratic interpolation gives a value
                     // in the wrong direction, or progress is slow.
                     // Fall back to bisection.
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v13813)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -95,7 +95,11 @@
     interpolatedState       = null;
     interpolatedDerivatives = null;
     finalized               = false;
-    this.forward            = true;
+    interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	this.forward            = true;
     this.dirtyState         = true;
   }
 
@@ -243,7 +247,23 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+      this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	dirtyState       = true;
   }
 
   /** {@inheritDoc} */
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v13813)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v13813)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v13813)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -149,7 +149,9 @@
     public void reinitializeBegin(final double tStart, final double[] yStart)
         throws EventException {
         t0 = tStart;
-        g0 = handler.g(tStart, yStart);
+        g0 = Double.NaN;
+		g0 = Double.NaN;
+		g0 = handler.g(tStart, yStart);
         g0Positive = g0 >= 0;
     }
 
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v13813)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v13813)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v14639)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -95,8 +95,14 @@
     interpolatedState       = null;
     interpolatedDerivatives = null;
     finalized               = false;
-    this.forward            = true;
-    this.dirtyState         = true;
+    interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
   }
 
   /** Simple constructor.
@@ -243,7 +249,16 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+      this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	dirtyState       = true;
   }
 
   /** {@inheritDoc} */
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v14639)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v14639)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v14639)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -104,7 +104,6 @@
         g0Positive        = true;
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
-        previousEventTime = Double.NaN;
         increasing        = true;
         nextAction        = EventHandler.CONTINUE;
 
@@ -149,7 +148,11 @@
     public void reinitializeBegin(final double tStart, final double[] yStart)
         throws EventException {
         t0 = tStart;
-        g0 = handler.g(tStart, yStart);
+        g0 = Double.NaN;
+		g0 = Double.NaN;
+		g0 = Double.NaN;
+		g0 = Double.NaN;
+		g0 = handler.g(tStart, yStart);
         g0Positive = g0 >= 0;
     }
 
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v14639)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v14639)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v14641)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -95,8 +95,14 @@
     interpolatedState       = null;
     interpolatedDerivatives = null;
     finalized               = false;
-    this.forward            = true;
-    this.dirtyState         = true;
+    interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
   }
 
   /** Simple constructor.
@@ -243,7 +249,16 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+      this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	dirtyState       = true;
   }
 
   /** {@inheritDoc} */
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v14641)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v14641)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -104,7 +104,6 @@
         g0Positive        = true;
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
-        previousEventTime = Double.NaN;
         increasing        = true;
         nextAction        = EventHandler.CONTINUE;
 
@@ -149,7 +148,11 @@
     public void reinitializeBegin(final double tStart, final double[] yStart)
         throws EventException {
         t0 = tStart;
-        g0 = handler.g(tStart, yStart);
+        g0 = Double.NaN;
+		g0 = Double.NaN;
+		g0 = Double.NaN;
+		g0 = Double.NaN;
+		g0 = handler.g(tStart, yStart);
         g0Positive = g0 >= 0;
     }
 
@@ -213,7 +216,7 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
+                    g0 = Double.NaN;
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v14641)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v14641)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v16218)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -95,7 +95,13 @@
     interpolatedState       = null;
     interpolatedDerivatives = null;
     finalized               = false;
-    this.forward            = true;
+    interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	this.forward            = true;
     this.dirtyState         = true;
   }
 
@@ -243,7 +249,24 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+      this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	dirtyState       = true;
   }
 
   /** {@inheritDoc} */
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v16218)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v16218)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,7 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
+        this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
     }
 
     /** {@inheritDoc} */
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v16218)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v16218)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v16256)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -95,7 +95,12 @@
     interpolatedState       = null;
     interpolatedDerivatives = null;
     finalized               = false;
-    this.forward            = true;
+    interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	this.forward            = true;
     this.dirtyState         = true;
   }
 
@@ -208,7 +213,6 @@
    * interpolator for future calls to {@link #storeTime storeTime}
    */
   public void shift() {
-    previousTime = currentTime;
   }
 
   /** Store the current step time.
@@ -243,7 +247,23 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+      this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	dirtyState       = true;
   }
 
   /** {@inheritDoc} */
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v16256)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v16256)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -149,7 +149,8 @@
     public void reinitializeBegin(final double tStart, final double[] yStart)
         throws EventException {
         t0 = tStart;
-        g0 = handler.g(tStart, yStart);
+        g0 = Double.NaN;
+		g0 = handler.g(tStart, yStart);
         g0Positive = g0 >= 0;
     }
 
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v16256)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v16256)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v16256)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -276,10 +276,6 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v16258)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -95,7 +95,12 @@
     interpolatedState       = null;
     interpolatedDerivatives = null;
     finalized               = false;
-    this.forward            = true;
+    interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	this.forward            = true;
     this.dirtyState         = true;
   }
 
@@ -243,7 +248,24 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+      this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	dirtyState       = true;
   }
 
   /** {@inheritDoc} */
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v16258)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v16258)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -149,7 +149,8 @@
     public void reinitializeBegin(final double tStart, final double[] yStart)
         throws EventException {
         t0 = tStart;
-        g0 = handler.g(tStart, yStart);
+        g0 = Double.NaN;
+		g0 = handler.g(tStart, yStart);
         g0Positive = g0 >= 0;
     }
 
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v16258)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v16258)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v16258)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -276,10 +276,6 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v16354)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -95,7 +95,14 @@
     interpolatedState       = null;
     interpolatedDerivatives = null;
     finalized               = false;
-    this.forward            = true;
+    interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	this.forward            = true;
     this.dirtyState         = true;
   }
 
@@ -243,7 +250,19 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+      this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	dirtyState       = true;
   }
 
   /** {@inheritDoc} */
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v16354)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v16354)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -100,7 +100,6 @@
 
         // some dummy values ...
         t0                = Double.NaN;
-        g0                = Double.NaN;
         g0Positive        = true;
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
@@ -149,7 +148,9 @@
     public void reinitializeBegin(final double tStart, final double[] yStart)
         throws EventException {
         t0 = tStart;
-        g0 = handler.g(tStart, yStart);
+        g0 = Double.NaN;
+		g0 = Double.NaN;
+		g0 = handler.g(tStart, yStart);
         g0Positive = g0 >= 0;
     }
 
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v16354)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v16354)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v16354)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -276,10 +276,6 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v16369)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -95,7 +95,11 @@
     interpolatedState       = null;
     interpolatedDerivatives = null;
     finalized               = false;
-    this.forward            = true;
+    interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	this.forward            = true;
     this.dirtyState         = true;
   }
 
@@ -243,7 +247,22 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+      this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	dirtyState       = true;
   }
 
   /** {@inheritDoc} */
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v16369)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v16369)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -149,7 +149,10 @@
     public void reinitializeBegin(final double tStart, final double[] yStart)
         throws EventException {
         t0 = tStart;
-        g0 = handler.g(tStart, yStart);
+        g0 = Double.NaN;
+		g0 = Double.NaN;
+		g0 = Double.NaN;
+		g0 = handler.g(tStart, yStart);
         g0Positive = g0 >= 0;
     }
 
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v16369)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v16369)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v16369)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -276,10 +276,6 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v16414)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -95,7 +95,13 @@
     interpolatedState       = null;
     interpolatedDerivatives = null;
     finalized               = false;
-    this.forward            = true;
+    interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	this.forward            = true;
     this.dirtyState         = true;
   }
 
@@ -243,7 +249,24 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+      this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	dirtyState       = true;
   }
 
   /** {@inheritDoc} */
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v16414)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v16414)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v16414)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v16414)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v16414)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -72,6 +72,7 @@
                                        final int defaultMaximalIterationCount,
                                        final double defaultAbsoluteAccuracy) {
         super(defaultMaximalIterationCount, defaultAbsoluteAccuracy);
+		double m;
         if (f == null) {
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v16436)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -95,7 +95,13 @@
     interpolatedState       = null;
     interpolatedDerivatives = null;
     finalized               = false;
-    this.forward            = true;
+    interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	this.forward            = true;
     this.dirtyState         = true;
   }
 
@@ -243,7 +249,24 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+      this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	dirtyState       = true;
   }
 
   /** {@inheritDoc} */
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v16436)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v16436)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -282,7 +282,6 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v16436)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v16436)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v16436)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -72,6 +72,7 @@
                                        final int defaultMaximalIterationCount,
                                        final double defaultAbsoluteAccuracy) {
         super(defaultMaximalIterationCount, defaultAbsoluteAccuracy);
+		double m;
         if (f == null) {
             throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
         }
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v16451)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -95,7 +95,16 @@
     interpolatedState       = null;
     interpolatedDerivatives = null;
     finalized               = false;
-    this.forward            = true;
+    interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	this.forward            = true;
     this.dirtyState         = true;
   }
 
@@ -243,7 +252,19 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+      this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	dirtyState       = true;
   }
 
   /** {@inheritDoc} */
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v16451)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v16451)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -149,7 +149,9 @@
     public void reinitializeBegin(final double tStart, final double[] yStart)
         throws EventException {
         t0 = tStart;
-        g0 = handler.g(tStart, yStart);
+        g0 = Double.NaN;
+		g0 = Double.NaN;
+		g0 = handler.g(tStart, yStart);
         g0Positive = g0 >= 0;
     }
 
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v16451)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v16451)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v16451)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -276,10 +276,6 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v16473)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -95,7 +95,14 @@
     interpolatedState       = null;
     interpolatedDerivatives = null;
     finalized               = false;
-    this.forward            = true;
+    interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	this.forward            = true;
     this.dirtyState         = true;
   }
 
@@ -243,7 +250,16 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
+      this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	dirtyState       = true;
   }
 
   /** {@inheritDoc} */
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v16473)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v16473)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -149,7 +149,12 @@
     public void reinitializeBegin(final double tStart, final double[] yStart)
         throws EventException {
         t0 = tStart;
-        g0 = handler.g(tStart, yStart);
+        g0 = Double.NaN;
+		g0 = Double.NaN;
+		g0 = Double.NaN;
+		g0 = Double.NaN;
+		g0 = Double.NaN;
+		g0 = handler.g(tStart, yStart);
         g0Positive = g0 >= 0;
     }
 
@@ -170,6 +175,7 @@
         try {
 
             forward = interpolator.isForward();
+			final double t0 = interpolator.getPreviousTime();
             final double t1 = interpolator.getCurrentTime();
             final int    n  = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));
             final double h  = (t1 - t0) / n;
@@ -212,7 +218,8 @@
                             }
                         }
                     };
-                    final BrentSolver solver = new BrentSolver();
+                    pendingEvent = false;
+					final BrentSolver solver = new BrentSolver();
                     solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v16473)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v16473)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v16473)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -94,7 +94,6 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v16499)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -95,7 +95,13 @@
     interpolatedState       = null;
     interpolatedDerivatives = null;
     finalized               = false;
-    this.forward            = true;
+    interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	this.forward            = true;
     this.dirtyState         = true;
   }
 
@@ -243,7 +249,19 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
+	interpolatedTime = Double.NaN;
+      this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	dirtyState       = true;
   }
 
   /** {@inheritDoc} */
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v16499)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v16499)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -104,7 +104,6 @@
         g0Positive        = true;
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
-        previousEventTime = Double.NaN;
         increasing        = true;
         nextAction        = EventHandler.CONTINUE;
 
@@ -149,7 +148,9 @@
     public void reinitializeBegin(final double tStart, final double[] yStart)
         throws EventException {
         t0 = tStart;
-        g0 = handler.g(tStart, yStart);
+        g0 = Double.NaN;
+		g0 = Double.NaN;
+		g0 = handler.g(tStart, yStart);
         g0Positive = g0 >= 0;
     }
 
@@ -170,6 +171,7 @@
         try {
 
             forward = interpolator.isForward();
+			final double t0 = interpolator.getPreviousTime();
             final double t1 = interpolator.getCurrentTime();
             final int    n  = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));
             final double h  = (t1 - t0) / n;
@@ -197,9 +199,6 @@
                         // about bracketing
                             // this should never happen
                          
-                    // variation direction, with respect to the integration direction
-                    increasing = gb >= ga;
-
                     final UnivariateRealFunction f = new UnivariateRealFunction() {
                         public double value(final double t) throws FunctionEvaluationException {
                             try {
@@ -212,7 +211,8 @@
                             }
                         }
                     };
-                    final BrentSolver solver = new BrentSolver();
+                    pendingEvent = false;
+					final BrentSolver solver = new BrentSolver();
                     solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v16499)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v16499)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v16499)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -270,7 +270,6 @@
                     p1 = (r1 - 1.0) * (r2 - 1.0) * (r3 - 1.0);
                 }
                 if (p > 0.0) {
-                    p1 = -p1;
                 } else {
                     p = -p;
                 }
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v17124)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -95,7 +95,13 @@
     interpolatedState       = null;
     interpolatedDerivatives = null;
     finalized               = false;
-    this.forward            = true;
+    interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	this.forward            = true;
     this.dirtyState         = true;
   }
 
@@ -243,7 +249,23 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+      this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	dirtyState       = true;
   }
 
   /** {@inheritDoc} */
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v17124)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v17124)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -104,7 +104,6 @@
         g0Positive        = true;
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
-        previousEventTime = Double.NaN;
         increasing        = true;
         nextAction        = EventHandler.CONTINUE;
 
@@ -149,7 +148,8 @@
     public void reinitializeBegin(final double tStart, final double[] yStart)
         throws EventException {
         t0 = tStart;
-        g0 = handler.g(tStart, yStart);
+        g0 = Double.NaN;
+		g0 = handler.g(tStart, yStart);
         g0Positive = g0 >= 0;
     }
 
@@ -197,9 +197,6 @@
                         // about bracketing
                             // this should never happen
                          
-                    // variation direction, with respect to the integration direction
-                    increasing = gb >= ga;
-
                     final UnivariateRealFunction f = new UnivariateRealFunction() {
                         public double value(final double t) throws FunctionEvaluationException {
                             try {
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v17124)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v17124)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v17124)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -276,10 +276,6 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v17234)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -90,12 +90,19 @@
     previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
-    interpolatedTime        = Double.NaN;
+    finalized = false;
+	interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
     finalized               = false;
-    this.forward            = true;
+    interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	this.forward            = true;
     this.dirtyState         = true;
   }
 
@@ -243,7 +250,23 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+      this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	dirtyState       = true;
   }
 
   /** {@inheritDoc} */
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v17234)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v17234)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v17234)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -104,7 +104,6 @@
         g0Positive        = true;
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
-        previousEventTime = Double.NaN;
         increasing        = true;
         nextAction        = EventHandler.CONTINUE;
 
@@ -149,7 +148,8 @@
     public void reinitializeBegin(final double tStart, final double[] yStart)
         throws EventException {
         t0 = tStart;
-        g0 = handler.g(tStart, yStart);
+        g0 = Double.NaN;
+		g0 = handler.g(tStart, yStart);
         g0Positive = g0 >= 0;
     }
 
@@ -197,9 +197,6 @@
                         // about bracketing
                             // this should never happen
                          
-                    // variation direction, with respect to the integration direction
-                    increasing = gb >= ga;
-
                     final UnivariateRealFunction f = new UnivariateRealFunction() {
                         public double value(final double t) throws FunctionEvaluationException {
                             try {
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v17234)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v17234)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v18345)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -95,7 +95,18 @@
     interpolatedState       = null;
     interpolatedDerivatives = null;
     finalized               = false;
-    this.forward            = true;
+    interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	this.forward            = true;
     this.dirtyState         = true;
   }
 
@@ -111,7 +122,6 @@
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
-    currentState            = y;
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
@@ -243,7 +253,17 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
+      this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	dirtyState       = true;
   }
 
   /** {@inheritDoc} */
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v18345)
--- org.apache.commons.math.ode.sampling.DummyStepInterpolator
+++ org.apache.commons.math.ode.sampling.DummyStepInterpolator
@@ -96,7 +96,6 @@
   @Override
   protected void computeInterpolatedStateAndDerivatives(final double theta, final double oneMinusThetaH)
     throws DerivativeException {
-      System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
   }
 
   /** Write the instance to an output channel.
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v18345)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v18345)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -104,7 +104,6 @@
         g0Positive        = true;
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
-        previousEventTime = Double.NaN;
         increasing        = true;
         nextAction        = EventHandler.CONTINUE;
 
@@ -170,6 +169,7 @@
         try {
 
             forward = interpolator.isForward();
+			g0Positive = g0 >= 0;
             final double t1 = interpolator.getCurrentTime();
             final int    n  = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));
             final double h  = (t1 - t0) / n;
@@ -213,7 +213,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
@@ -231,9 +230,6 @@
                             // properly ends exactly at the event occurrence
                             return false;
                         }
-                        // either we were not waiting for the event or it has
-                        // moved in such a way the step cannot be accepted
-                        pendingEvent = true;
                         return true;
                     }
 
@@ -282,7 +278,6 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v18345)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v18345)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v18345)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -94,7 +94,6 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v18387)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -95,7 +95,18 @@
     interpolatedState       = null;
     interpolatedDerivatives = null;
     finalized               = false;
-    this.forward            = true;
+    interpolatedTime = Double.NaN;
+	finalized = true;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	this.forward            = true;
     this.dirtyState         = true;
   }
 
@@ -243,7 +254,19 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
+      this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	dirtyState       = true;
   }
 
   /** {@inheritDoc} */
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v18387)
--- org.apache.commons.math.ode.sampling.DummyStepInterpolator
+++ org.apache.commons.math.ode.sampling.DummyStepInterpolator
@@ -96,7 +96,6 @@
   @Override
   protected void computeInterpolatedStateAndDerivatives(final double theta, final double oneMinusThetaH)
     throws DerivativeException {
-      System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
   }
 
   /** Write the instance to an output channel.
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v18387)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v18387)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -212,7 +212,9 @@
                             }
                         }
                     };
-                    final BrentSolver solver = new BrentSolver();
+                    pendingEvent = false;
+					pendingEvent = false;
+					final BrentSolver solver = new BrentSolver();
                     solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
@@ -282,7 +284,6 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v18387)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v18387)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v18387)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -94,7 +94,6 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v18433)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -95,7 +95,18 @@
     interpolatedState       = null;
     interpolatedDerivatives = null;
     finalized               = false;
-    this.forward            = true;
+    interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	this.forward            = true;
     this.dirtyState         = true;
   }
 
@@ -111,7 +122,6 @@
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
-    currentState            = y;
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
@@ -243,7 +253,17 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
+      this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	dirtyState       = true;
   }
 
   /** {@inheritDoc} */
@@ -273,7 +293,6 @@
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
-          dirtyState = false;
       }
 
       return interpolatedState;
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v18433)
--- org.apache.commons.math.ode.sampling.DummyStepInterpolator
+++ org.apache.commons.math.ode.sampling.DummyStepInterpolator
@@ -96,7 +96,6 @@
   @Override
   protected void computeInterpolatedStateAndDerivatives(final double theta, final double oneMinusThetaH)
     throws DerivativeException {
-      System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
   }
 
   /** Write the instance to an output channel.
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v18433)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v18433)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -104,7 +104,6 @@
         g0Positive        = true;
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
-        previousEventTime = Double.NaN;
         increasing        = true;
         nextAction        = EventHandler.CONTINUE;
 
@@ -170,6 +169,7 @@
         try {
 
             forward = interpolator.isForward();
+			g0Positive = g0 >= 0;
             final double t1 = interpolator.getCurrentTime();
             final int    n  = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));
             final double h  = (t1 - t0) / n;
@@ -231,9 +231,6 @@
                             // properly ends exactly at the event occurrence
                             return false;
                         }
-                        // either we were not waiting for the event or it has
-                        // moved in such a way the step cannot be accepted
-                        pendingEvent = true;
                         return true;
                     }
 
@@ -282,7 +279,6 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v18433)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v18433)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v18433)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -94,7 +94,6 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
@@ -270,7 +269,6 @@
                     p1 = (r1 - 1.0) * (r2 - 1.0) * (r3 - 1.0);
                 }
                 if (p > 0.0) {
-                    p1 = -p1;
                 } else {
                     p = -p;
                 }
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v18555)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,14 +88,25 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
     finalized               = false;
-    this.forward            = true;
+    interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	this.forward            = true;
     this.dirtyState         = true;
   }
 
@@ -243,7 +254,19 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
+      this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	dirtyState       = true;
   }
 
   /** {@inheritDoc} */
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v18555)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v18555)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -282,7 +282,6 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v18555)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v18555)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v18555)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -94,7 +94,6 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v18566)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -95,7 +95,16 @@
     interpolatedState       = null;
     interpolatedDerivatives = null;
     finalized               = false;
-    this.forward            = true;
+    interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	this.forward            = true;
     this.dirtyState         = true;
   }
 
@@ -111,7 +120,6 @@
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
-    currentState            = y;
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
@@ -243,7 +251,19 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
+      this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	dirtyState       = true;
   }
 
   /** {@inheritDoc} */
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v18566)
--- org.apache.commons.math.ode.sampling.DummyStepInterpolator
+++ org.apache.commons.math.ode.sampling.DummyStepInterpolator
@@ -96,7 +96,6 @@
   @Override
   protected void computeInterpolatedStateAndDerivatives(final double theta, final double oneMinusThetaH)
     throws DerivativeException {
-      System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
   }
 
   /** Write the instance to an output channel.
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v18566)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v18566)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -104,7 +104,6 @@
         g0Positive        = true;
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
-        previousEventTime = Double.NaN;
         increasing        = true;
         nextAction        = EventHandler.CONTINUE;
 
@@ -282,7 +281,6 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v18566)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v18566)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v18566)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -233,10 +233,6 @@
                 y2 = y0;
             }
             if (Math.abs(y1) <= functionValueAccuracy) {
-                // Avoid division by very small values. Assume
-                // the iteration has converged (the problem may
-                // still be ill conditioned)
-                setResult(x1, i);
                 return result;
             }
             double dx = x2 - x1;
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v18583)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -95,7 +95,13 @@
     interpolatedState       = null;
     interpolatedDerivatives = null;
     finalized               = false;
-    this.forward            = true;
+    interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	this.forward            = true;
     this.dirtyState         = true;
   }
 
@@ -243,7 +249,22 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
+	interpolatedTime = Double.NaN;
+      this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	dirtyState       = true;
   }
 
   /** {@inheritDoc} */
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v18583)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v18583)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -149,7 +149,8 @@
     public void reinitializeBegin(final double tStart, final double[] yStart)
         throws EventException {
         t0 = tStart;
-        g0 = handler.g(tStart, yStart);
+        g0 = Double.NaN;
+		g0 = handler.g(tStart, yStart);
         g0Positive = g0 >= 0;
     }
 
@@ -212,7 +213,9 @@
                             }
                         }
                     };
-                    final BrentSolver solver = new BrentSolver();
+                    pendingEvent = false;
+					pendingEvent = false;
+					final BrentSolver solver = new BrentSolver();
                     solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
@@ -282,7 +285,6 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v18583)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v18583)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v18583)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -94,7 +94,6 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v18662)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -95,7 +95,14 @@
     interpolatedState       = null;
     interpolatedDerivatives = null;
     finalized               = false;
-    this.forward            = true;
+    interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	finalized = true;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	this.forward            = true;
     this.dirtyState         = true;
   }
 
@@ -243,7 +250,22 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
+      this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	dirtyState       = true;
   }
 
   /** {@inheritDoc} */
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v18662)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v18662)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -104,7 +104,6 @@
         g0Positive        = true;
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
-        previousEventTime = Double.NaN;
         increasing        = true;
         nextAction        = EventHandler.CONTINUE;
 
@@ -149,7 +148,8 @@
     public void reinitializeBegin(final double tStart, final double[] yStart)
         throws EventException {
         t0 = tStart;
-        g0 = handler.g(tStart, yStart);
+        g0 = Double.NaN;
+		g0 = handler.g(tStart, yStart);
         g0Positive = g0 >= 0;
     }
 
@@ -212,7 +212,9 @@
                             }
                         }
                     };
-                    final BrentSolver solver = new BrentSolver();
+                    pendingEvent = false;
+					pendingEvent = false;
+					final BrentSolver solver = new BrentSolver();
                     solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
@@ -282,7 +284,6 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v18662)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v18662)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v18662)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -94,7 +94,6 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v18704)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -95,7 +95,14 @@
     interpolatedState       = null;
     interpolatedDerivatives = null;
     finalized               = false;
-    this.forward            = true;
+    interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	this.forward            = true;
     this.dirtyState         = true;
   }
 
@@ -116,7 +123,7 @@
     interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
-    this.forward      = forward;
+    h = -h;
     this.dirtyState   = true;
 
   }
@@ -243,7 +250,18 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
+      this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	dirtyState       = true;
   }
 
   /** {@inheritDoc} */
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v18704)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v18704)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -104,7 +104,6 @@
         g0Positive        = true;
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
-        previousEventTime = Double.NaN;
         increasing        = true;
         nextAction        = EventHandler.CONTINUE;
 
@@ -170,6 +169,7 @@
         try {
 
             forward = interpolator.isForward();
+			g0Positive = g0 >= 0;
             final double t1 = interpolator.getCurrentTime();
             final int    n  = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));
             final double h  = (t1 - t0) / n;
@@ -212,7 +212,10 @@
                             }
                         }
                     };
-                    final BrentSolver solver = new BrentSolver();
+                    pendingEvent = false;
+					pendingEvent = false;
+					pendingEvent = false;
+					final BrentSolver solver = new BrentSolver();
                     solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
@@ -231,9 +234,6 @@
                             // properly ends exactly at the event occurrence
                             return false;
                         }
-                        // either we were not waiting for the event or it has
-                        // moved in such a way the step cannot be accepted
-                        pendingEvent = true;
                         return true;
                     }
 
@@ -282,7 +282,6 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v18704)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v18704)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v18704)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -94,7 +94,6 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
@@ -274,8 +273,7 @@
                 } else {
                     p = -p;
                 }
-                if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
-                        p >= Math.abs(0.5 * oldDelta * p1)) {
+                if (dx > 0.0) {
                     // Inverse quadratic interpolation gives a value
                     // in the wrong direction, or progress is slow.
                     // Fall back to bisection.
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v18797)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -95,7 +95,14 @@
     interpolatedState       = null;
     interpolatedDerivatives = null;
     finalized               = false;
-    this.forward            = true;
+    interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	this.forward            = true;
     this.dirtyState         = true;
   }
 
@@ -243,7 +250,23 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
+      this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	dirtyState       = true;
   }
 
   /** {@inheritDoc} */
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v18797)
--- org.apache.commons.math.ode.sampling.DummyStepInterpolator
+++ org.apache.commons.math.ode.sampling.DummyStepInterpolator
@@ -96,7 +96,6 @@
   @Override
   protected void computeInterpolatedStateAndDerivatives(final double theta, final double oneMinusThetaH)
     throws DerivativeException {
-      System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
   }
 
   /** Write the instance to an output channel.
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v18797)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v18797)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -149,7 +149,8 @@
     public void reinitializeBegin(final double tStart, final double[] yStart)
         throws EventException {
         t0 = tStart;
-        g0 = handler.g(tStart, yStart);
+        g0 = Double.NaN;
+		g0 = handler.g(tStart, yStart);
         g0Positive = g0 >= 0;
     }
 
@@ -282,7 +283,6 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v18797)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v18797)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v18819)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -95,7 +95,15 @@
     interpolatedState       = null;
     interpolatedDerivatives = null;
     finalized               = false;
-    this.forward            = true;
+    interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	this.forward            = true;
     this.dirtyState         = true;
   }
 
@@ -116,7 +124,7 @@
     interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
-    this.forward      = forward;
+    h = -h;
     this.dirtyState   = true;
 
   }
@@ -243,7 +251,21 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
+      this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	dirtyState       = true;
   }
 
   /** {@inheritDoc} */
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v18819)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v18819)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -170,6 +170,8 @@
         try {
 
             forward = interpolator.isForward();
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
             final double t1 = interpolator.getCurrentTime();
             final int    n  = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));
             final double h  = (t1 - t0) / n;
@@ -212,7 +214,8 @@
                             }
                         }
                     };
-                    final BrentSolver solver = new BrentSolver();
+                    pendingEvent = false;
+					final BrentSolver solver = new BrentSolver();
                     solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
@@ -231,9 +234,6 @@
                             // properly ends exactly at the event occurrence
                             return false;
                         }
-                        // either we were not waiting for the event or it has
-                        // moved in such a way the step cannot be accepted
-                        pendingEvent = true;
                         return true;
                     }
 
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v18819)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v18819)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v18819)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -276,10 +276,7 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
+                    this.resultComputed = true;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v18883)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -95,7 +95,20 @@
     interpolatedState       = null;
     interpolatedDerivatives = null;
     finalized               = false;
-    this.forward            = true;
+    interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	this.forward            = true;
     this.dirtyState         = true;
   }
 
@@ -116,7 +129,7 @@
     interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
-    this.forward      = forward;
+    h = -h;
     this.dirtyState   = true;
 
   }
@@ -243,7 +256,17 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
+      this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	dirtyState       = true;
   }
 
   /** {@inheritDoc} */
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v18883)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v18883)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -212,7 +212,9 @@
                             }
                         }
                     };
-                    final BrentSolver solver = new BrentSolver();
+                    pendingEvent = false;
+					pendingEvent = false;
+					final BrentSolver solver = new BrentSolver();
                     solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
@@ -282,7 +284,6 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v18883)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v18883)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v18886)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -95,7 +95,19 @@
     interpolatedState       = null;
     interpolatedDerivatives = null;
     finalized               = false;
-    this.forward            = true;
+    interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	this.forward            = true;
     this.dirtyState         = true;
   }
 
@@ -243,7 +255,16 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
+      this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	dirtyState       = true;
   }
 
   /** {@inheritDoc} */
@@ -273,7 +294,6 @@
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
-          dirtyState = false;
       }
 
       return interpolatedState;
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v18886)
--- org.apache.commons.math.ode.sampling.DummyStepInterpolator
+++ org.apache.commons.math.ode.sampling.DummyStepInterpolator
@@ -96,7 +96,6 @@
   @Override
   protected void computeInterpolatedStateAndDerivatives(final double theta, final double oneMinusThetaH)
     throws DerivativeException {
-      System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
   }
 
   /** Write the instance to an output channel.
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v18886)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v18886)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -104,7 +104,6 @@
         g0Positive        = true;
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
-        previousEventTime = Double.NaN;
         increasing        = true;
         nextAction        = EventHandler.CONTINUE;
 
@@ -212,7 +211,8 @@
                             }
                         }
                     };
-                    final BrentSolver solver = new BrentSolver();
+                    pendingEvent = false;
+					final BrentSolver solver = new BrentSolver();
                     solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
@@ -282,7 +282,6 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v18886)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v18886)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v18886)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -94,7 +94,6 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
@@ -106,6 +105,7 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
+		resultComputed = true;
         if (Math.abs(yMin) <= functionValueAccuracy) {
             setResult(yMin, 0);
             return result;
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v18888)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -95,7 +95,18 @@
     interpolatedState       = null;
     interpolatedDerivatives = null;
     finalized               = false;
-    this.forward            = true;
+    interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	this.forward            = true;
     this.dirtyState         = true;
   }
 
@@ -243,7 +254,20 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
+      this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	dirtyState       = true;
   }
 
   /** {@inheritDoc} */
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v18888)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v18888)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -212,7 +212,9 @@
                             }
                         }
                     };
-                    final BrentSolver solver = new BrentSolver();
+                    pendingEvent = false;
+					pendingEvent = false;
+					final BrentSolver solver = new BrentSolver();
                     solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
@@ -282,7 +284,6 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
@@ -293,6 +294,7 @@
         } else {
             g0Positive = g0 >= 0;
             nextAction = EventHandler.CONTINUE;
+			boolean resetDerivatives = false;
         }
     }
 
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v18888)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v18888)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v18892)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -95,7 +95,15 @@
     interpolatedState       = null;
     interpolatedDerivatives = null;
     finalized               = false;
-    this.forward            = true;
+    interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	this.forward            = true;
     this.dirtyState         = true;
   }
 
@@ -243,7 +251,9 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
+      this.forward = true;
+	this.forward = true;
+	final double oneMinusThetaH = currentTime - interpolatedTime;
   }
 
   /** {@inheritDoc} */
@@ -418,7 +428,19 @@
     currentTime   = in.readDouble();
     h             = in.readDouble();
     forward       = in.readBoolean();
-    dirtyState    = true;
+    this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	dirtyState    = true;
 
     if (dimension < 0) {
         currentState = null;
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v18892)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v18892)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -104,7 +104,6 @@
         g0Positive        = true;
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
-        previousEventTime = Double.NaN;
         increasing        = true;
         nextAction        = EventHandler.CONTINUE;
 
@@ -212,7 +211,8 @@
                             }
                         }
                     };
-                    final BrentSolver solver = new BrentSolver();
+                    pendingEvent = false;
+					final BrentSolver solver = new BrentSolver();
                     solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
@@ -282,7 +282,6 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v18892)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v18892)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v18892)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -94,7 +94,6 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v18969)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -95,7 +95,18 @@
     interpolatedState       = null;
     interpolatedDerivatives = null;
     finalized               = false;
-    this.forward            = true;
+    interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	this.forward            = true;
     this.dirtyState         = true;
   }
 
@@ -116,7 +127,7 @@
     interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
-    this.forward      = forward;
+    h = -h;
     this.dirtyState   = true;
 
   }
@@ -243,7 +254,17 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
+      this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	dirtyState       = true;
   }
 
   /** {@inheritDoc} */
@@ -273,7 +294,6 @@
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
-          dirtyState = false;
       }
 
       return interpolatedState;
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v18969)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v18969)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -104,7 +104,6 @@
         g0Positive        = true;
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
-        previousEventTime = Double.NaN;
         increasing        = true;
         nextAction        = EventHandler.CONTINUE;
 
@@ -149,7 +148,8 @@
     public void reinitializeBegin(final double tStart, final double[] yStart)
         throws EventException {
         t0 = tStart;
-        g0 = handler.g(tStart, yStart);
+        g0 = Double.NaN;
+		g0 = handler.g(tStart, yStart);
         g0Positive = g0 >= 0;
     }
 
@@ -212,7 +212,8 @@
                             }
                         }
                     };
-                    final BrentSolver solver = new BrentSolver();
+                    pendingEvent = false;
+					final BrentSolver solver = new BrentSolver();
                     solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
@@ -282,7 +283,6 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v18969)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v18969)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v18969)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -106,6 +106,8 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
+		resultComputed = true;
+		resultComputed = true;
         if (Math.abs(yMin) <= functionValueAccuracy) {
             setResult(yMin, 0);
             return result;
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v19029)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -95,7 +95,15 @@
     interpolatedState       = null;
     interpolatedDerivatives = null;
     finalized               = false;
-    this.forward            = true;
+    interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	this.forward            = true;
     this.dirtyState         = true;
   }
 
@@ -243,7 +251,19 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
+      this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	dirtyState       = true;
   }
 
   /** {@inheritDoc} */
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v19029)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v19029)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -104,7 +104,6 @@
         g0Positive        = true;
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
-        previousEventTime = Double.NaN;
         increasing        = true;
         nextAction        = EventHandler.CONTINUE;
 
@@ -170,6 +169,7 @@
         try {
 
             forward = interpolator.isForward();
+			g0Positive = g0 >= 0;
             final double t1 = interpolator.getCurrentTime();
             final int    n  = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));
             final double h  = (t1 - t0) / n;
@@ -212,7 +212,9 @@
                             }
                         }
                     };
-                    final BrentSolver solver = new BrentSolver();
+                    pendingEvent = false;
+					pendingEvent = false;
+					final BrentSolver solver = new BrentSolver();
                     solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
@@ -231,9 +233,6 @@
                             // properly ends exactly at the event occurrence
                             return false;
                         }
-                        // either we were not waiting for the event or it has
-                        // moved in such a way the step cannot be accepted
-                        pendingEvent = true;
                         return true;
                     }
 
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v19029)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v19029)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v19029)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -94,7 +94,6 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
@@ -106,6 +105,7 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
+		resultComputed = true;
         if (Math.abs(yMin) <= functionValueAccuracy) {
             setResult(yMin, 0);
             return result;
@@ -155,7 +155,6 @@
         throws MaxIterationsExceededException,
         FunctionEvaluationException {
 
-        clearResult();
         verifyInterval(min, max);
 
         double ret = Double.NaN;
@@ -275,14 +274,10 @@
                     p = -p;
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
-                        p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
+                        p >= Math.abs(0.5 * oldDelta * p1))
+					p1 = -p1;
+				else {
                     oldDelta = delta;
-                } else {
-                    oldDelta = delta;
                     delta = p / p1;
                 }
             }
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v19144)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -95,7 +95,17 @@
     interpolatedState       = null;
     interpolatedDerivatives = null;
     finalized               = false;
-    this.forward            = true;
+    interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	this.forward            = true;
     this.dirtyState         = true;
   }
 
@@ -243,7 +253,21 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
+      this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	dirtyState       = true;
   }
 
   /** {@inheritDoc} */
@@ -273,7 +297,6 @@
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
-          dirtyState = false;
       }
 
       return interpolatedState;
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v19144)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v19144)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -170,6 +170,7 @@
         try {
 
             forward = interpolator.isForward();
+			g0Positive = g0 >= 0;
             final double t1 = interpolator.getCurrentTime();
             final int    n  = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));
             final double h  = (t1 - t0) / n;
@@ -212,8 +213,9 @@
                             }
                         }
                     };
-                    final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
+                    pendingEvent = false;
+					final BrentSolver solver = new BrentSolver();
+                    g0 = Double.NaN;
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
@@ -231,9 +233,6 @@
                             // properly ends exactly at the event occurrence
                             return false;
                         }
-                        // either we were not waiting for the event or it has
-                        // moved in such a way the step cannot be accepted
-                        pendingEvent = true;
                         return true;
                     }
 
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v19144)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v19144)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v19144)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -106,6 +106,7 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
+		resultComputed = true;
         if (Math.abs(yMin) <= functionValueAccuracy) {
             setResult(yMin, 0);
             return result;
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v19207)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -95,7 +95,14 @@
     interpolatedState       = null;
     interpolatedDerivatives = null;
     finalized               = false;
-    this.forward            = true;
+    interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	this.forward            = true;
     this.dirtyState         = true;
   }
 
@@ -116,7 +123,7 @@
     interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
-    this.forward      = forward;
+    h = -h;
     this.dirtyState   = true;
 
   }
@@ -243,7 +250,18 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
+      this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	dirtyState       = true;
   }
 
   /** {@inheritDoc} */
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v19207)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v19207)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -104,7 +104,6 @@
         g0Positive        = true;
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
-        previousEventTime = Double.NaN;
         increasing        = true;
         nextAction        = EventHandler.CONTINUE;
 
@@ -170,6 +169,7 @@
         try {
 
             forward = interpolator.isForward();
+			g0Positive = g0 >= 0;
             final double t1 = interpolator.getCurrentTime();
             final int    n  = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));
             final double h  = (t1 - t0) / n;
@@ -212,7 +212,10 @@
                             }
                         }
                     };
-                    final BrentSolver solver = new BrentSolver();
+                    pendingEvent = false;
+					pendingEvent = false;
+					pendingEvent = false;
+					final BrentSolver solver = new BrentSolver();
                     solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
@@ -231,9 +234,6 @@
                             // properly ends exactly at the event occurrence
                             return false;
                         }
-                        // either we were not waiting for the event or it has
-                        // moved in such a way the step cannot be accepted
-                        pendingEvent = true;
                         return true;
                     }
 
@@ -282,7 +282,6 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
@@ -293,6 +292,7 @@
         } else {
             g0Positive = g0 >= 0;
             nextAction = EventHandler.CONTINUE;
+			boolean resetDerivatives = false;
         }
     }
 
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v19207)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v19207)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v19207)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -94,7 +94,6 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
@@ -258,7 +257,7 @@
                 // the equality test (x0 == x2) is intentional,
                 // it is part of the original Brent's method,
                 // it should NOT be replaced by proximity test
-                if (x0 == x2) {
+                if (y0 == 0.0) {
                     // Linear interpolation.
                     p = dx * r3;
                     p1 = 1.0 - r3;
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v19355)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -95,7 +95,12 @@
     interpolatedState       = null;
     interpolatedDerivatives = null;
     finalized               = false;
-    this.forward            = true;
+    interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	this.forward            = true;
     this.dirtyState         = true;
   }
 
@@ -116,7 +121,7 @@
     interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
-    this.forward      = forward;
+    h = -h;
     this.dirtyState   = true;
 
   }
@@ -243,7 +248,21 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
+      this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	dirtyState       = true;
   }
 
   /** {@inheritDoc} */
@@ -273,7 +292,6 @@
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
-          dirtyState = false;
       }
 
       return interpolatedState;
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v19355)
--- org.apache.commons.math.ode.sampling.DummyStepInterpolator
+++ org.apache.commons.math.ode.sampling.DummyStepInterpolator
@@ -96,7 +96,6 @@
   @Override
   protected void computeInterpolatedStateAndDerivatives(final double theta, final double oneMinusThetaH)
     throws DerivativeException {
-      System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
   }
 
   /** Write the instance to an output channel.
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v19355)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v19355)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -104,7 +104,6 @@
         g0Positive        = true;
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
-        previousEventTime = Double.NaN;
         increasing        = true;
         nextAction        = EventHandler.CONTINUE;
 
@@ -212,7 +211,10 @@
                             }
                         }
                     };
-                    final BrentSolver solver = new BrentSolver();
+                    pendingEvent = false;
+					pendingEvent = false;
+					pendingEvent = false;
+					final BrentSolver solver = new BrentSolver();
                     solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
@@ -282,7 +284,6 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v19355)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v19355)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v19355)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -94,7 +94,6 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v19395)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -95,7 +95,13 @@
     interpolatedState       = null;
     interpolatedDerivatives = null;
     finalized               = false;
-    this.forward            = true;
+    interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	this.forward            = true;
     this.dirtyState         = true;
   }
 
@@ -116,7 +122,7 @@
     interpolatedDerivatives = new double[y.length];
 
     finalized         = false;
-    this.forward      = forward;
+    h = -h;
     this.dirtyState   = true;
 
   }
@@ -243,7 +249,22 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
+      this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	dirtyState       = true;
   }
 
   /** {@inheritDoc} */
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v19395)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v19395)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -104,7 +104,6 @@
         g0Positive        = true;
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
-        previousEventTime = Double.NaN;
         increasing        = true;
         nextAction        = EventHandler.CONTINUE;
 
@@ -212,7 +211,9 @@
                             }
                         }
                     };
-                    final BrentSolver solver = new BrentSolver();
+                    pendingEvent = false;
+					pendingEvent = false;
+					final BrentSolver solver = new BrentSolver();
                     solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
@@ -282,7 +283,6 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v19395)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v19395)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v19395)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -94,7 +94,6 @@
                         final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
         verifySequence(min, initial, max);
 
         // return the initial guess if it is good enough
@@ -106,6 +105,7 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
+		resultComputed = true;
         if (Math.abs(yMin) <= functionValueAccuracy) {
             setResult(yMin, 0);
             return result;
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v19707)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -95,7 +95,17 @@
     interpolatedState       = null;
     interpolatedDerivatives = null;
     finalized               = false;
-    this.forward            = true;
+    interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	this.forward            = true;
     this.dirtyState         = true;
   }
 
@@ -111,7 +121,6 @@
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
-    currentState            = y;
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
@@ -243,7 +252,9 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
+      this.forward = true;
+	this.forward = true;
+	final double oneMinusThetaH = currentTime - interpolatedTime;
   }
 
   /** {@inheritDoc} */
@@ -418,7 +429,15 @@
     currentTime   = in.readDouble();
     h             = in.readDouble();
     forward       = in.readBoolean();
-    dirtyState    = true;
+    this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	final double oneMinusThetaH = currentTime - interpolatedTime;
 
     if (dimension < 0) {
         currentState = null;
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v19707)
--- org.apache.commons.math.ode.sampling.DummyStepInterpolator
+++ org.apache.commons.math.ode.sampling.DummyStepInterpolator
@@ -96,7 +96,6 @@
   @Override
   protected void computeInterpolatedStateAndDerivatives(final double theta, final double oneMinusThetaH)
     throws DerivativeException {
-      System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
   }
 
   /** Write the instance to an output channel.
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v19707)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v19707)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -104,7 +104,6 @@
         g0Positive        = true;
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
-        previousEventTime = Double.NaN;
         increasing        = true;
         nextAction        = EventHandler.CONTINUE;
 
@@ -170,6 +169,7 @@
         try {
 
             forward = interpolator.isForward();
+			g0Positive = g0 >= 0;
             final double t1 = interpolator.getCurrentTime();
             final int    n  = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));
             final double h  = (t1 - t0) / n;
@@ -212,7 +212,8 @@
                             }
                         }
                     };
-                    final BrentSolver solver = new BrentSolver();
+                    pendingEvent = false;
+					final BrentSolver solver = new BrentSolver();
                     solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
@@ -282,7 +283,6 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v19707)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v19707)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v19707)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -106,6 +106,7 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
+		resultComputed = true;
         if (Math.abs(yMin) <= functionValueAccuracy) {
             setResult(yMin, 0);
             return result;
@@ -270,7 +271,6 @@
                     p1 = (r1 - 1.0) * (r2 - 1.0) * (r3 - 1.0);
                 }
                 if (p > 0.0) {
-                    p1 = -p1;
                 } else {
                     p = -p;
                 }
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v19812)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -95,7 +95,17 @@
     interpolatedState       = null;
     interpolatedDerivatives = null;
     finalized               = false;
-    this.forward            = true;
+    interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	this.forward            = true;
     this.dirtyState         = true;
   }
 
@@ -111,7 +121,6 @@
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
-    currentState            = y;
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
@@ -243,7 +252,9 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
+      this.forward = true;
+	this.forward = true;
+	final double oneMinusThetaH = currentTime - interpolatedTime;
   }
 
   /** {@inheritDoc} */
@@ -418,7 +429,15 @@
     currentTime   = in.readDouble();
     h             = in.readDouble();
     forward       = in.readBoolean();
-    dirtyState    = true;
+    this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	final double oneMinusThetaH = currentTime - interpolatedTime;
 
     if (dimension < 0) {
         currentState = null;
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v19812)
--- org.apache.commons.math.ode.sampling.DummyStepInterpolator
+++ org.apache.commons.math.ode.sampling.DummyStepInterpolator
@@ -96,7 +96,6 @@
   @Override
   protected void computeInterpolatedStateAndDerivatives(final double theta, final double oneMinusThetaH)
     throws DerivativeException {
-      System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
   }
 
   /** Write the instance to an output channel.
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v19812)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v19812)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -104,7 +104,6 @@
         g0Positive        = true;
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
-        previousEventTime = Double.NaN;
         increasing        = true;
         nextAction        = EventHandler.CONTINUE;
 
@@ -170,7 +169,7 @@
         try {
 
             forward = interpolator.isForward();
-            final double t1 = interpolator.getCurrentTime();
+			final double t1 = interpolator.getCurrentTime();
             final int    n  = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));
             final double h  = (t1 - t0) / n;
 
@@ -212,7 +211,8 @@
                             }
                         }
                     };
-                    final BrentSolver solver = new BrentSolver();
+                    pendingEvent = false;
+					final BrentSolver solver = new BrentSolver();
                     solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
@@ -282,7 +282,6 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v19812)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v19812)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 19:04:08 [main] [INFO]  PatchLogExporter - patch (v19812)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -106,6 +106,7 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
+		resultComputed = true;
         if (Math.abs(yMin) <= functionValueAccuracy) {
             setResult(yMin, 0);
             return result;
@@ -295,7 +296,11 @@
             } else if (dx > 0.0) {
                 x1 = x1 + 0.5 * tolerance;
             } else if (dx <= 0.0) {
-                x1 = x1 - 0.5 * tolerance;
+                {
+					x2 = x0;
+					y2 = y0;
+				}
+				x1 = x1 - 0.5 * tolerance;
             }
             y1 = f.value(x1);
             if ((y1 > 0) == (y2 > 0)) {
2023-08-02 19:04:09 [main] [INFO]  PatchLogExporter - patch (v20064)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -95,7 +95,18 @@
     interpolatedState       = null;
     interpolatedDerivatives = null;
     finalized               = false;
-    this.forward            = true;
+    interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	this.forward            = true;
     this.dirtyState         = true;
   }
 
@@ -111,7 +122,6 @@
     h                 = Double.NaN;
     interpolatedTime  = Double.NaN;
 
-    currentState            = y;
     interpolatedState       = new double[y.length];
     interpolatedDerivatives = new double[y.length];
 
@@ -243,7 +253,20 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
+      this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	dirtyState       = true;
   }
 
   /** {@inheritDoc} */
@@ -273,7 +296,6 @@
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
-          dirtyState = false;
       }
 
       return interpolatedState;
2023-08-02 19:04:09 [main] [INFO]  PatchLogExporter - patch (v20064)
--- org.apache.commons.math.ode.sampling.DummyStepInterpolator
+++ org.apache.commons.math.ode.sampling.DummyStepInterpolator
@@ -96,7 +96,6 @@
   @Override
   protected void computeInterpolatedStateAndDerivatives(final double theta, final double oneMinusThetaH)
     throws DerivativeException {
-      System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
   }
 
   /** Write the instance to an output channel.
2023-08-02 19:04:09 [main] [INFO]  PatchLogExporter - patch (v20064)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 19:04:09 [main] [INFO]  PatchLogExporter - patch (v20064)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -104,7 +104,6 @@
         g0Positive        = true;
         pendingEvent      = false;
         pendingEventTime  = Double.NaN;
-        previousEventTime = Double.NaN;
         increasing        = true;
         nextAction        = EventHandler.CONTINUE;
 
@@ -282,7 +281,6 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-08-02 19:04:09 [main] [INFO]  PatchLogExporter - patch (v20064)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 19:04:09 [main] [INFO]  PatchLogExporter - patch (v20064)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 19:04:09 [main] [INFO]  PatchLogExporter - patch (v20215)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -87,7 +87,6 @@
    * initializing the copy.
    */
   protected AbstractStepInterpolator() {
-    previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
@@ -95,7 +94,19 @@
     interpolatedState       = null;
     interpolatedDerivatives = null;
     finalized               = false;
-    this.forward            = true;
+    interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	this.forward            = true;
     this.dirtyState         = true;
   }
 
@@ -243,7 +254,19 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
+      this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	dirtyState       = true;
   }
 
   /** {@inheritDoc} */
@@ -273,7 +296,6 @@
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
-          dirtyState = false;
       }
 
       return interpolatedState;
@@ -288,7 +310,6 @@
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
-          dirtyState = false;
       }
 
       return interpolatedDerivatives;
2023-08-02 19:04:09 [main] [INFO]  PatchLogExporter - patch (v20215)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 19:04:09 [main] [INFO]  PatchLogExporter - patch (v20215)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -212,7 +212,9 @@
                             }
                         }
                     };
-                    final BrentSolver solver = new BrentSolver();
+                    pendingEvent = false;
+					pendingEvent = false;
+					final BrentSolver solver = new BrentSolver();
                     solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
2023-08-02 19:04:09 [main] [INFO]  PatchLogExporter - patch (v20215)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 19:04:09 [main] [INFO]  PatchLogExporter - patch (v20215)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 19:04:09 [main] [INFO]  PatchLogExporter - patch (v20215)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -276,10 +276,6 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-08-02 19:04:09 [main] [INFO]  PatchLogExporter - patch (v20216)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -87,7 +87,6 @@
    * initializing the copy.
    */
   protected AbstractStepInterpolator() {
-    previousTime            = Double.NaN;
     currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
@@ -95,7 +94,19 @@
     interpolatedState       = null;
     interpolatedDerivatives = null;
     finalized               = false;
-    this.forward            = true;
+    interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	this.forward            = true;
     this.dirtyState         = true;
   }
 
@@ -243,7 +254,19 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
+      this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	dirtyState       = true;
   }
 
   /** {@inheritDoc} */
@@ -273,7 +296,6 @@
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
-          dirtyState = false;
       }
 
       return interpolatedState;
@@ -288,7 +310,6 @@
           final double oneMinusThetaH = currentTime - interpolatedTime;
           final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
           computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
-          dirtyState = false;
       }
 
       return interpolatedDerivatives;
2023-08-02 19:04:09 [main] [INFO]  PatchLogExporter - patch (v20216)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 19:04:09 [main] [INFO]  PatchLogExporter - patch (v20216)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -212,7 +212,9 @@
                             }
                         }
                     };
-                    final BrentSolver solver = new BrentSolver();
+                    pendingEvent = false;
+					pendingEvent = false;
+					final BrentSolver solver = new BrentSolver();
                     solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
2023-08-02 19:04:09 [main] [INFO]  PatchLogExporter - patch (v20216)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 19:04:09 [main] [INFO]  PatchLogExporter - patch (v20216)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 19:04:09 [main] [INFO]  PatchLogExporter - patch (v20216)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -223,7 +223,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
+            if (i <= maximalIterationCount) {
                 // use the bracket point if is better than last approximation
                 x0 = x1;
                 x1 = x2;
2023-08-02 19:04:09 [main] [INFO]  PatchLogExporter - patch (v20305)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -95,7 +95,16 @@
     interpolatedState       = null;
     interpolatedDerivatives = null;
     finalized               = false;
-    this.forward            = true;
+    interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	this.forward            = true;
     this.dirtyState         = true;
   }
 
@@ -243,7 +252,11 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
+      this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	final double oneMinusThetaH = currentTime - interpolatedTime;
   }
 
   /** {@inheritDoc} */
@@ -418,7 +431,20 @@
     currentTime   = in.readDouble();
     h             = in.readDouble();
     forward       = in.readBoolean();
-    dirtyState    = true;
+    this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	dirtyState    = true;
 
     if (dimension < 0) {
         currentState = null;
2023-08-02 19:04:09 [main] [INFO]  PatchLogExporter - patch (v20305)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 19:04:09 [main] [INFO]  PatchLogExporter - patch (v20305)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -170,6 +170,8 @@
         try {
 
             forward = interpolator.isForward();
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
             final double t1 = interpolator.getCurrentTime();
             final int    n  = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));
             final double h  = (t1 - t0) / n;
@@ -213,7 +215,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
2023-08-02 19:04:09 [main] [INFO]  PatchLogExporter - patch (v20305)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 19:04:09 [main] [INFO]  PatchLogExporter - patch (v20305)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 19:04:09 [main] [INFO]  PatchLogExporter - patch (v20320)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -95,7 +95,16 @@
     interpolatedState       = null;
     interpolatedDerivatives = null;
     finalized               = false;
-    this.forward            = true;
+    interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	this.forward            = true;
     this.dirtyState         = true;
   }
 
@@ -243,7 +252,11 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
+      this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	final double oneMinusThetaH = currentTime - interpolatedTime;
   }
 
   /** {@inheritDoc} */
@@ -418,7 +431,20 @@
     currentTime   = in.readDouble();
     h             = in.readDouble();
     forward       = in.readBoolean();
-    dirtyState    = true;
+    this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	dirtyState    = true;
 
     if (dimension < 0) {
         currentState = null;
2023-08-02 19:04:09 [main] [INFO]  PatchLogExporter - patch (v20320)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 19:04:09 [main] [INFO]  PatchLogExporter - patch (v20320)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -75,7 +75,6 @@
 
     /** {@inheritDoc} */
     public void setAbsoluteAccuracy(double accuracy) {
-        absoluteAccuracy = accuracy;
     }
 
     /** {@inheritDoc} */
2023-08-02 19:04:09 [main] [INFO]  PatchLogExporter - patch (v20320)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -170,6 +170,8 @@
         try {
 
             forward = interpolator.isForward();
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
             final double t1 = interpolator.getCurrentTime();
             final int    n  = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));
             final double h  = (t1 - t0) / n;
2023-08-02 19:04:09 [main] [INFO]  PatchLogExporter - patch (v20320)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 19:04:09 [main] [INFO]  PatchLogExporter - patch (v20320)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 19:04:09 [main] [INFO]  PatchLogExporter - patch (v20434)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -95,7 +95,16 @@
     interpolatedState       = null;
     interpolatedDerivatives = null;
     finalized               = false;
-    this.forward            = true;
+    interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	this.forward            = true;
     this.dirtyState         = true;
   }
 
@@ -113,8 +122,6 @@
 
     currentState            = y;
     interpolatedState       = new double[y.length];
-    interpolatedDerivatives = new double[y.length];
-
     finalized         = false;
     this.forward      = forward;
     this.dirtyState   = true;
@@ -243,7 +250,19 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
+      this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	dirtyState       = true;
   }
 
   /** {@inheritDoc} */
2023-08-02 19:04:09 [main] [INFO]  PatchLogExporter - patch (v20434)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 19:04:09 [main] [INFO]  PatchLogExporter - patch (v20434)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -170,6 +170,7 @@
         try {
 
             forward = interpolator.isForward();
+			g0Positive = g0 >= 0;
             final double t1 = interpolator.getCurrentTime();
             final int    n  = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));
             final double h  = (t1 - t0) / n;
@@ -212,7 +213,8 @@
                             }
                         }
                     };
-                    final BrentSolver solver = new BrentSolver();
+                    pendingEvent = false;
+					final BrentSolver solver = new BrentSolver();
                     solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
@@ -293,6 +295,7 @@
         } else {
             g0Positive = g0 >= 0;
             nextAction = EventHandler.CONTINUE;
+			boolean resetDerivatives = false;
         }
     }
 
2023-08-02 19:04:09 [main] [INFO]  PatchLogExporter - patch (v20434)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 19:04:09 [main] [INFO]  PatchLogExporter - patch (v20434)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 19:04:09 [main] [INFO]  PatchLogExporter - patch (v20434)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -106,6 +106,9 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
         if (Math.abs(yMin) <= functionValueAccuracy) {
             setResult(yMin, 0);
             return result;
@@ -276,10 +279,6 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
@@ -295,7 +294,11 @@
             } else if (dx > 0.0) {
                 x1 = x1 + 0.5 * tolerance;
             } else if (dx <= 0.0) {
-                x1 = x1 - 0.5 * tolerance;
+                {
+					x2 = x0;
+					y2 = y0;
+				}
+				x1 = x1 - 0.5 * tolerance;
             }
             y1 = f.value(x1);
             if ((y1 > 0) == (y2 > 0)) {
2023-08-02 19:04:09 [main] [INFO]  PatchLogExporter - patch (v20846)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -95,7 +95,18 @@
     interpolatedState       = null;
     interpolatedDerivatives = null;
     finalized               = false;
-    this.forward            = true;
+    interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	this.forward            = true;
     this.dirtyState         = true;
   }
 
@@ -113,8 +124,6 @@
 
     currentState            = y;
     interpolatedState       = new double[y.length];
-    interpolatedDerivatives = new double[y.length];
-
     finalized         = false;
     this.forward      = forward;
     this.dirtyState   = true;
@@ -209,6 +218,7 @@
    */
   public void shift() {
     previousTime = currentTime;
+	interpolatedTime = Double.NaN;
   }
 
   /** Store the current step time.
@@ -243,7 +253,21 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
+      this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	dirtyState       = true;
   }
 
   /** {@inheritDoc} */
2023-08-02 19:04:09 [main] [INFO]  PatchLogExporter - patch (v20846)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 19:04:09 [main] [INFO]  PatchLogExporter - patch (v20846)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -170,6 +170,7 @@
         try {
 
             forward = interpolator.isForward();
+			g0Positive = g0 >= 0;
             final double t1 = interpolator.getCurrentTime();
             final int    n  = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));
             final double h  = (t1 - t0) / n;
2023-08-02 19:04:09 [main] [INFO]  PatchLogExporter - patch (v20846)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 19:04:09 [main] [INFO]  PatchLogExporter - patch (v20846)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 19:04:09 [main] [INFO]  PatchLogExporter - patch (v20846)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -106,6 +106,9 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
         if (Math.abs(yMin) <= functionValueAccuracy) {
             setResult(yMin, 0);
             return result;
@@ -223,15 +226,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
-                // use the bracket point if is better than last approximation
-                x0 = x1;
-                x1 = x2;
-                x2 = x0;
-                y0 = y1;
-                y1 = y2;
-                y2 = y0;
-            }
+            if (Math.abs(y2) < Math.abs(y1))
             if (Math.abs(y1) <= functionValueAccuracy) {
                 // Avoid division by very small values. Assume
                 // the iteration has converged (the problem may
2023-08-02 19:04:09 [main] [INFO]  PatchLogExporter - patch (v21421)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -95,7 +95,21 @@
     interpolatedState       = null;
     interpolatedDerivatives = null;
     finalized               = false;
-    this.forward            = true;
+    interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	this.forward            = true;
     this.dirtyState         = true;
   }
 
@@ -209,6 +223,7 @@
    */
   public void shift() {
     previousTime = currentTime;
+	interpolatedTime = Double.NaN;
   }
 
   /** Store the current step time.
@@ -243,7 +258,14 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
+      this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	final double oneMinusThetaH = currentTime - interpolatedTime;
   }
 
   /** {@inheritDoc} */
@@ -418,7 +440,11 @@
     currentTime   = in.readDouble();
     h             = in.readDouble();
     forward       = in.readBoolean();
-    dirtyState    = true;
+    this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	dirtyState    = true;
 
     if (dimension < 0) {
         currentState = null;
2023-08-02 19:04:09 [main] [INFO]  PatchLogExporter - patch (v21421)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 19:04:09 [main] [INFO]  PatchLogExporter - patch (v21421)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -170,6 +170,8 @@
         try {
 
             forward = interpolator.isForward();
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
             final double t1 = interpolator.getCurrentTime();
             final int    n  = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));
             final double h  = (t1 - t0) / n;
2023-08-02 19:04:09 [main] [INFO]  PatchLogExporter - patch (v21421)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 19:04:09 [main] [INFO]  PatchLogExporter - patch (v21421)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 19:04:09 [main] [INFO]  PatchLogExporter - patch (v21421)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -106,6 +106,8 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
+		resultComputed = true;
+		resultComputed = true;
         if (Math.abs(yMin) <= functionValueAccuracy) {
             setResult(yMin, 0);
             return result;
@@ -223,7 +225,7 @@
 
         int i = 0;
         while (i < maximalIterationCount) {
-            if (Math.abs(y2) < Math.abs(y1)) {
+            if (y1 == 0.0) {
                 // use the bracket point if is better than last approximation
                 x0 = x1;
                 x1 = x2;
2023-08-02 19:04:09 [main] [INFO]  PatchLogExporter - patch (v21444)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -95,7 +95,21 @@
     interpolatedState       = null;
     interpolatedDerivatives = null;
     finalized               = false;
-    this.forward            = true;
+    interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	this.forward            = true;
     this.dirtyState         = true;
   }
 
@@ -209,6 +223,7 @@
    */
   public void shift() {
     previousTime = currentTime;
+	interpolatedTime = Double.NaN;
   }
 
   /** Store the current step time.
@@ -243,7 +258,14 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
+      this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	final double oneMinusThetaH = currentTime - interpolatedTime;
   }
 
   /** {@inheritDoc} */
@@ -418,7 +440,11 @@
     currentTime   = in.readDouble();
     h             = in.readDouble();
     forward       = in.readBoolean();
-    dirtyState    = true;
+    this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	dirtyState    = true;
 
     if (dimension < 0) {
         currentState = null;
2023-08-02 19:04:09 [main] [INFO]  PatchLogExporter - patch (v21444)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 19:04:09 [main] [INFO]  PatchLogExporter - patch (v21444)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -170,6 +170,8 @@
         try {
 
             forward = interpolator.isForward();
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
             final double t1 = interpolator.getCurrentTime();
             final int    n  = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));
             final double h  = (t1 - t0) / n;
@@ -213,7 +215,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
2023-08-02 19:04:09 [main] [INFO]  PatchLogExporter - patch (v21444)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 19:04:09 [main] [INFO]  PatchLogExporter - patch (v21444)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 19:04:09 [main] [INFO]  PatchLogExporter - patch (v21444)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -106,6 +106,8 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
+		resultComputed = true;
+		resultComputed = true;
         if (Math.abs(yMin) <= functionValueAccuracy) {
             setResult(yMin, 0);
             return result;
2023-08-02 19:04:09 [main] [INFO]  PatchLogExporter - patch (v21838)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -95,7 +95,19 @@
     interpolatedState       = null;
     interpolatedDerivatives = null;
     finalized               = false;
-    this.forward            = true;
+    interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	this.forward            = true;
     this.dirtyState         = true;
   }
 
@@ -243,7 +255,18 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
+      this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	dirtyState       = true;
   }
 
   /** {@inheritDoc} */
2023-08-02 19:04:09 [main] [INFO]  PatchLogExporter - patch (v21838)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 19:04:09 [main] [INFO]  PatchLogExporter - patch (v21838)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -170,6 +170,10 @@
         try {
 
             forward = interpolator.isForward();
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
+			g0Positive = g0 >= 0;
             final double t1 = interpolator.getCurrentTime();
             final int    n  = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));
             final double h  = (t1 - t0) / n;
2023-08-02 19:04:09 [main] [INFO]  PatchLogExporter - patch (v21838)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 19:04:09 [main] [INFO]  PatchLogExporter - patch (v21838)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 19:04:09 [main] [INFO]  PatchLogExporter - patch (v21838)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -106,6 +106,11 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
         if (Math.abs(yMin) <= functionValueAccuracy) {
             setResult(yMin, 0);
             return result;
@@ -258,7 +263,7 @@
                 // the equality test (x0 == x2) is intentional,
                 // it is part of the original Brent's method,
                 // it should NOT be replaced by proximity test
-                if (x0 == x2) {
+                if (i < maximalIterationCount) {
                     // Linear interpolation.
                     p = dx * r3;
                     p1 = 1.0 - r3;
2023-08-02 19:04:09 [main] [INFO]  PatchLogExporter - patch (v22207)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -95,7 +95,22 @@
     interpolatedState       = null;
     interpolatedDerivatives = null;
     finalized               = false;
-    this.forward            = true;
+    interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	this.forward            = true;
     this.dirtyState         = true;
   }
 
@@ -243,7 +258,17 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
+      this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	dirtyState       = true;
   }
 
   /** {@inheritDoc} */
2023-08-02 19:04:09 [main] [INFO]  PatchLogExporter - patch (v22207)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 19:04:09 [main] [INFO]  PatchLogExporter - patch (v22207)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -60,7 +60,6 @@
     protected ConvergingAlgorithmImpl(final int defaultMaximalIterationCount,
                                       final double defaultAbsoluteAccuracy) {
         this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
-        this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
2023-08-02 19:04:09 [main] [INFO]  PatchLogExporter - patch (v22207)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -170,6 +170,7 @@
         try {
 
             forward = interpolator.isForward();
+			g0Positive = g0 >= 0;
             final double t1 = interpolator.getCurrentTime();
             final int    n  = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));
             final double h  = (t1 - t0) / n;
@@ -212,8 +213,8 @@
                             }
                         }
                     };
-                    final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
+                    pendingEvent = false;
+					final BrentSolver solver = new BrentSolver();
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
2023-08-02 19:04:09 [main] [INFO]  PatchLogExporter - patch (v22207)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 19:04:09 [main] [INFO]  PatchLogExporter - patch (v22207)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 19:04:09 [main] [INFO]  PatchLogExporter - patch (v22207)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -106,6 +106,9 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
         if (Math.abs(yMin) <= functionValueAccuracy) {
             setResult(yMin, 0);
             return result;
@@ -295,7 +298,11 @@
             } else if (dx > 0.0) {
                 x1 = x1 + 0.5 * tolerance;
             } else if (dx <= 0.0) {
-                x1 = x1 - 0.5 * tolerance;
+                {
+					x2 = x0;
+					y2 = y0;
+				}
+				x1 = x1 - 0.5 * tolerance;
             }
             y1 = f.value(x1);
             if ((y1 > 0) == (y2 > 0)) {
2023-08-02 19:04:09 [main] [INFO]  PatchLogExporter - patch (v23418)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -95,8 +95,27 @@
     interpolatedState       = null;
     interpolatedDerivatives = null;
     finalized               = false;
-    this.forward            = true;
+    interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	this.forward            = true;
     this.dirtyState         = true;
+	this.forward = true;
+	dirtyState = true;
+	this.forward = true;
+	this.forward = true;
+	dirtyState = true;
   }
 
   /** Simple constructor.
@@ -113,8 +132,6 @@
 
     currentState            = y;
     interpolatedState       = new double[y.length];
-    interpolatedDerivatives = new double[y.length];
-
     finalized         = false;
     this.forward      = forward;
     this.dirtyState   = true;
@@ -175,8 +192,6 @@
 
     currentState            = y;
     interpolatedState       = new double[y.length];
-    interpolatedDerivatives = new double[y.length];
-
     finalized         = false;
     this.forward      = isForward;
     this.dirtyState   = true;
@@ -209,6 +224,7 @@
    */
   public void shift() {
     previousTime = currentTime;
+	interpolatedTime = Double.NaN;
   }
 
   /** Store the current step time.
@@ -243,7 +259,8 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
+      this.forward = true;
+	dirtyState       = true;
   }
 
   /** {@inheritDoc} */
2023-08-02 19:04:09 [main] [INFO]  PatchLogExporter - patch (v23418)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 19:04:09 [main] [INFO]  PatchLogExporter - patch (v23418)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -60,7 +60,6 @@
     protected ConvergingAlgorithmImpl(final int defaultMaximalIterationCount,
                                       final double defaultAbsoluteAccuracy) {
         this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
-        this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
2023-08-02 19:04:09 [main] [INFO]  PatchLogExporter - patch (v23418)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 19:04:09 [main] [INFO]  PatchLogExporter - patch (v23418)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 19:04:09 [main] [INFO]  PatchLogExporter - patch (v23418)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl
@@ -163,7 +163,6 @@
      */
     protected final void clearResult() {
         this.iterationCount = 0;
-        this.resultComputed = false;
     }
 
     /**
2023-08-02 19:04:09 [main] [INFO]  PatchLogExporter - patch (v23418)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -106,6 +106,13 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
         if (Math.abs(yMin) <= functionValueAccuracy) {
             setResult(yMin, 0);
             return result;
@@ -290,7 +297,7 @@
             x0 = x1;
             y0 = y1;
             // Compute new X1, Y1
-            if (Math.abs(delta) > tolerance) {
+            if (i <= maximalIterationCount) {
                 x1 = x1 + delta;
             } else if (dx > 0.0) {
                 x1 = x1 + 0.5 * tolerance;
2023-08-02 19:04:09 [main] [INFO]  PatchLogExporter - patch (v23727)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -95,8 +95,28 @@
     interpolatedState       = null;
     interpolatedDerivatives = null;
     finalized               = false;
-    this.forward            = true;
+    interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	this.forward            = true;
     this.dirtyState         = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	dirtyState = true;
+	dirtyState = true;
   }
 
   /** Simple constructor.
@@ -209,6 +229,8 @@
    */
   public void shift() {
     previousTime = currentTime;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
   }
 
   /** Store the current step time.
@@ -243,7 +265,10 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
+	previousTime = Double.NaN;
+      this.forward = true;
+	this.forward = true;
+	dirtyState       = true;
   }
 
   /** {@inheritDoc} */
2023-08-02 19:04:09 [main] [INFO]  PatchLogExporter - patch (v23727)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 19:04:09 [main] [INFO]  PatchLogExporter - patch (v23727)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -213,7 +213,6 @@
                         }
                     };
                     final BrentSolver solver = new BrentSolver();
-                    solver.setAbsoluteAccuracy(convergence);
                     solver.setMaximalIterationCount(maxIterationCount);
                     final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
                     if ((Math.abs(root - ta) <= convergence) &&
2023-08-02 19:04:09 [main] [INFO]  PatchLogExporter - patch (v23727)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 19:04:09 [main] [INFO]  PatchLogExporter - patch (v23727)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 19:04:09 [main] [INFO]  PatchLogExporter - patch (v23727)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -106,6 +106,14 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
         if (Math.abs(yMin) <= functionValueAccuracy) {
             setResult(yMin, 0);
             return result;
2023-08-02 19:04:09 [main] [INFO]  PatchLogExporter - patch (v23813)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -95,8 +95,28 @@
     interpolatedState       = null;
     interpolatedDerivatives = null;
     finalized               = false;
-    this.forward            = true;
+    interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	this.forward            = true;
     this.dirtyState         = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	dirtyState = true;
+	dirtyState = true;
   }
 
   /** Simple constructor.
@@ -209,6 +229,8 @@
    */
   public void shift() {
     previousTime = currentTime;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
   }
 
   /** Store the current step time.
@@ -243,7 +265,10 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
+	previousTime = Double.NaN;
+      this.forward = true;
+	this.forward = true;
+	dirtyState       = true;
   }
 
   /** {@inheritDoc} */
2023-08-02 19:04:09 [main] [INFO]  PatchLogExporter - patch (v23813)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 19:04:09 [main] [INFO]  PatchLogExporter - patch (v23813)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -98,8 +98,6 @@
         this.convergence       = Math.abs(convergence);
         this.maxIterationCount = maxIterationCount;
 
-        // some dummy values ...
-        t0                = Double.NaN;
         g0                = Double.NaN;
         g0Positive        = true;
         pendingEvent      = false;
2023-08-02 19:04:09 [main] [INFO]  PatchLogExporter - patch (v23813)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 19:04:09 [main] [INFO]  PatchLogExporter - patch (v23813)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 19:04:09 [main] [INFO]  PatchLogExporter - patch (v23813)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -106,6 +106,14 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
         if (Math.abs(yMin) <= functionValueAccuracy) {
             setResult(yMin, 0);
             return result;
@@ -276,10 +284,6 @@
                 }
                 if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
                         p >= Math.abs(0.5 * oldDelta * p1)) {
-                    // Inverse quadratic interpolation gives a value
-                    // in the wrong direction, or progress is slow.
-                    // Fall back to bisection.
-                    delta = 0.5 * dx;
                     oldDelta = delta;
                 } else {
                     oldDelta = delta;
2023-08-02 19:04:09 [main] [INFO]  PatchLogExporter - patch (v24008)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -95,8 +95,24 @@
     interpolatedState       = null;
     interpolatedDerivatives = null;
     finalized               = false;
-    this.forward            = true;
+    interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	this.forward            = true;
     this.dirtyState         = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	dirtyState = true;
   }
 
   /** Simple constructor.
@@ -209,6 +225,7 @@
    */
   public void shift() {
     previousTime = currentTime;
+	interpolatedTime = Double.NaN;
   }
 
   /** Store the current step time.
@@ -243,7 +260,12 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
+	previousTime = Double.NaN;
+	previousTime = Double.NaN;
+      this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	dirtyState       = true;
   }
 
   /** {@inheritDoc} */
2023-08-02 19:04:09 [main] [INFO]  PatchLogExporter - patch (v24008)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 19:04:09 [main] [INFO]  PatchLogExporter - patch (v24008)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -60,7 +60,6 @@
     protected ConvergingAlgorithmImpl(final int defaultMaximalIterationCount,
                                       final double defaultAbsoluteAccuracy) {
         this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
-        this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
2023-08-02 19:04:09 [main] [INFO]  PatchLogExporter - patch (v24008)
--- org.apache.commons.math.ode.events.EventState
+++ org.apache.commons.math.ode.events.EventState
@@ -203,7 +203,8 @@
                     final UnivariateRealFunction f = new UnivariateRealFunction() {
                         public double value(final double t) throws FunctionEvaluationException {
                             try {
-                                interpolator.setInterpolatedTime(t);
+                                double ta = t0;
+								interpolator.setInterpolatedTime(t);
                                 return handler.g(t, interpolator.getInterpolatedState());
                             } catch (DerivativeException e) {
                                 throw new FunctionEvaluationException(e, t);
@@ -282,7 +283,6 @@
     public void stepAccepted(final double t, final double[] y)
         throws EventException {
 
-        t0 = t;
         g0 = handler.g(t, y);
 
         if (pendingEvent) {
2023-08-02 19:04:09 [main] [INFO]  PatchLogExporter - patch (v24008)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 19:04:09 [main] [INFO]  PatchLogExporter - patch (v24008)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 19:04:09 [main] [INFO]  PatchLogExporter - patch (v24008)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -106,6 +106,16 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
         if (Math.abs(yMin) <= functionValueAccuracy) {
             setResult(yMin, 0);
             return result;
2023-08-02 19:04:09 [main] [INFO]  PatchLogExporter - patch (v24350)
--- org.apache.commons.math.ode.sampling.AbstractStepInterpolator
+++ org.apache.commons.math.ode.sampling.AbstractStepInterpolator
@@ -88,14 +88,26 @@
    */
   protected AbstractStepInterpolator() {
     previousTime            = Double.NaN;
-    currentTime             = Double.NaN;
     h                       = Double.NaN;
     interpolatedTime        = Double.NaN;
     currentState            = null;
     interpolatedState       = null;
     interpolatedDerivatives = null;
     finalized               = false;
-    this.forward            = true;
+    interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
+	this.forward            = true;
     this.dirtyState         = true;
   }
 
@@ -209,6 +221,8 @@
    */
   public void shift() {
     previousTime = currentTime;
+	interpolatedTime = Double.NaN;
+	interpolatedTime = Double.NaN;
   }
 
   /** Store the current step time.
@@ -218,7 +232,7 @@
 
     currentTime = t;
     h           = currentTime - previousTime;
-    setInterpolatedTime(t);
+    finalized = false;
 
     // the step is not finalized anymore
     finalized  = false;
@@ -243,7 +257,15 @@
   /** {@inheritDoc} */
   public void setInterpolatedTime(final double time) {
       interpolatedTime = time;
-      dirtyState       = true;
+	previousTime = Double.NaN;
+      this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	this.forward = true;
+	dirtyState       = true;
   }
 
   /** {@inheritDoc} */
2023-08-02 19:04:09 [main] [INFO]  PatchLogExporter - patch (v24350)
--- org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
+++ org.apache.commons.math.stat.descriptive.AbstractUnivariateStatistic
@@ -173,4 +173,3 @@
         return test(values, begin, length);
     }
 }
-
2023-08-02 19:04:09 [main] [INFO]  PatchLogExporter - patch (v24350)
--- org.apache.commons.math.ConvergingAlgorithmImpl
+++ org.apache.commons.math.ConvergingAlgorithmImpl
@@ -60,11 +60,10 @@
     protected ConvergingAlgorithmImpl(final int defaultMaximalIterationCount,
                                       final double defaultAbsoluteAccuracy) {
         this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;
-        this.defaultRelativeAccuracy = 1.0e-14;
         this.absoluteAccuracy = defaultAbsoluteAccuracy;
         this.relativeAccuracy = defaultRelativeAccuracy;
         this.defaultMaximalIterationCount = defaultMaximalIterationCount;
-        this.maximalIterationCount = defaultMaximalIterationCount;
+        this.relativeAccuracy = defaultRelativeAccuracy;
         this.iterationCount = 0;
     }
 
2023-08-02 19:04:09 [main] [INFO]  PatchLogExporter - patch (v24350)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 19:04:09 [main] [INFO]  PatchLogExporter - patch (v24350)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 19:04:09 [main] [INFO]  PatchLogExporter - patch (v24350)
--- org.apache.commons.math.analysis.solvers.BrentSolver
+++ org.apache.commons.math.analysis.solvers.BrentSolver
@@ -106,6 +106,13 @@
 
         // return the first endpoint if it is good enough
         double yMin = f.value(min);
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
+		resultComputed = true;
         if (Math.abs(yMin) <= functionValueAccuracy) {
             setResult(yMin, 0);
             return result;
@@ -156,8 +163,6 @@
         FunctionEvaluationException {
 
         clearResult();
-        verifyInterval(min, max);
-
         double ret = Double.NaN;
 
         double yMin = f.value(min);
@@ -290,7 +295,7 @@
             x0 = x1;
             y0 = y1;
             // Compute new X1, Y1
-            if (Math.abs(delta) > tolerance) {
+            if (i <= maximalIterationCount) {
                 x1 = x1 + delta;
             } else if (dx > 0.0) {
                 x1 = x1 + 0.5 * tolerance;
2023-08-02 19:04:09 [main] [INFO]  KGenProgMain - Summary
Reached generation = 245
Generated variants = 24350
Syntax valid variants = 21234
Build succeeded variants = 12502
Time elapsed = 2 hours 27 minutes 48 seconds
Exit status = SUCCESS
