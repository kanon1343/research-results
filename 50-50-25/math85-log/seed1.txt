2023-08-01 18:33:15 [main] [WARN]  Configuration$Builder - The directory where kGenProg is running is different from the root directory of the given target project.
2023-08-01 18:33:15 [main] [WARN]  Configuration$Builder - If the target project includes test cases with file I/O, such test cases won't run correctly.
2023-08-01 18:33:15 [main] [WARN]  Configuration$Builder - We recommend you running kGenProg with the root directory of the target project as the current directory.
2023-08-01 18:33:15 [main] [INFO]  KGenProgMain - 
==================== kGenProg Configuration ====================
configPath = /home/fse-pluto/Downloads/kGenProg-1.8.2/example/math85/kgenprog-85.toml (set by command line)
rootDir = /home/fse-pluto/Downloads/kGenProg-1.8.2/example/math85 (set in config file)
productPaths = [/home/fse-pluto/Downloads/kGenProg-1.8.2/example/math85/src/java] (set in config file)
testPaths = [/home/fse-pluto/Downloads/kGenProg-1.8.2/example/math85/src/test] (set in config file)
classPaths = []
executionTests = [org.apache.commons.math.distribution.NormalDistributionTest] (set in config file)
outDir = kgenprog-out
logLevel = INFO (set in config file)
mutationGeneratingCount = 50 (set in config file)
crossoverGeneratingCount = 50 (set in config file)
headcount = 25
maxGeneration = 500 (set in config file)
timeLimit = PT24H (set in config file)
testTimeLimit = PT3M (set in config file)
requiredSolutionsCount = 100 (set in config file)
randomSeed = 1 (set by command line)
scope = PACKAGE
faultLocalization = Zoltar (set in config file)
mutationType = Simple
crossoverType = Random
firstVariantSelectionStrategy = Random
secondVariantSelectionStrategy = Random
isPatchOutput = true (set in config file)
isHistoryRecord = false
currentDirectory = /home/fse-pluto/Desktop/afterResearch
version = 1.8.2
================================================================
2023-08-01 18:33:23 [main] [INFO]  KGenProgMain - initial failed tests (1/13)
org.apache.commons.math.distribution.NormalDistributionTest.testMath280: null

2023-08-01 18:33:23 [main] [INFO]  KGenProgMain - GA started
2023-08-01 18:33:23 [main] [INFO]  KGenProgMain - entered the era of 1st generation.
2023-08-01 18:33:25 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 seconds
Variants: generated 50, build-succeeded 4, build-failed 34, syntax-invalid 8, redundant 4
Fitness: max 0.923(4), min 0.923(4), ave 0.923
Test execution time: sum 522 ms, max 145 ms, min 119 ms
----------------------------------------------------------------

2023-08-01 18:33:25 [main] [INFO]  KGenProgMain - entered the era of 2nd generation.
2023-08-01 18:36:27 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 minutes 3 seconds
Variants: generated 50, build-succeeded 8, build-failed 32, syntax-invalid 7, redundant 3
Fitness: max 0.923(7), min 0.846(1), ave 0.913
Test execution time: sum 180861 ms, max 180092 ms, min 88 ms
----------------------------------------------------------------

2023-08-01 18:36:27 [main] [INFO]  KGenProgMain - entered the era of 3rd generation.
2023-08-01 18:48:29 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 15 minutes 6 seconds
Variants: generated 100, build-succeeded 12, build-failed 35, syntax-invalid 10, redundant 43
Fitness: max 1(1), min 0.846(4), ave 0.904
Test execution time: sum 721179 ms, max 360090 ms, min 90 ms
----------------------------------------------------------------

2023-08-01 18:48:29 [main] [INFO]  KGenProgMain - entered the era of 4th generation.
2023-08-01 19:06:32 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 33 minutes 8 seconds
Variants: generated 100, build-succeeded 16, build-failed 38, syntax-invalid 10, redundant 36
Fitness: max 1(2), min 0.846(9), ave 0.889
Test execution time: sum 1081398 ms, max 360078 ms, min 79 ms
----------------------------------------------------------------

2023-08-01 19:06:32 [main] [INFO]  KGenProgMain - entered the era of 5th generation.
2023-08-01 19:38:25 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 5 minutes 1 seconds
Variants: generated 100, build-succeeded 22, build-failed 33, syntax-invalid 9, redundant 36
Fitness: max 1(1), min 0.846(8), ave 0.899
Test execution time: sum 1911829 ms, max 360088 ms, min 83 ms
----------------------------------------------------------------

2023-08-01 19:38:25 [main] [INFO]  KGenProgMain - entered the era of 6th generation.
2023-08-01 19:50:27 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 17 minutes 4 seconds
Variants: generated 100, build-succeeded 19, build-failed 29, syntax-invalid 16, redundant 36
Fitness: max 1(2), min 0.846(3), ave 0.919
Test execution time: sum 721622 ms, max 360094 ms, min 75 ms
----------------------------------------------------------------

2023-08-01 19:50:27 [main] [INFO]  KGenProgMain - entered the era of 7th generation.
2023-08-01 19:50:31 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 17 minutes 8 seconds
Variants: generated 100, build-succeeded 28, build-failed 32, syntax-invalid 16, redundant 24
Fitness: max 1(2), min 0.846(1), ave 0.926
Test execution time: sum 2487 ms, max 114 ms, min 79 ms
----------------------------------------------------------------

2023-08-01 19:50:31 [main] [INFO]  KGenProgMain - entered the era of 8th generation.
2023-08-01 19:59:34 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 26 minutes 11 seconds
Variants: generated 100, build-succeeded 24, build-failed 33, syntax-invalid 16, redundant 27
Fitness: max 0.923(20), min 0.846(4), ave 0.91
Test execution time: sum 542172 ms, max 180091 ms, min 86 ms
----------------------------------------------------------------

2023-08-01 19:59:34 [main] [INFO]  KGenProgMain - entered the era of 9th generation.
2023-08-01 19:59:38 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 26 minutes 14 seconds
Variants: generated 100, build-succeeded 25, build-failed 34, syntax-invalid 14, redundant 27
Fitness: max 0.923(24), min 0.846(1), ave 0.92
Test execution time: sum 2255 ms, max 113 ms, min 87 ms
----------------------------------------------------------------

2023-08-01 19:59:38 [main] [INFO]  KGenProgMain - entered the era of 10th generation.
2023-08-01 20:05:42 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 32 minutes 18 seconds
Variants: generated 100, build-succeeded 27, build-failed 30, syntax-invalid 17, redundant 26
Fitness: max 1(1), min 0.846(1), ave 0.923
Test execution time: sum 362433 ms, max 360117 ms, min 86 ms
----------------------------------------------------------------

2023-08-01 20:05:42 [main] [INFO]  KGenProgMain - entered the era of 11th generation.
2023-08-01 20:08:45 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 35 minutes 21 seconds
Variants: generated 100, build-succeeded 25, build-failed 35, syntax-invalid 20, redundant 20
Fitness: max 1(2), min 0.846(1), ave 0.926
Test execution time: sum 182224 ms, max 180085 ms, min 87 ms
----------------------------------------------------------------

2023-08-01 20:08:45 [main] [INFO]  KGenProgMain - entered the era of 12th generation.
2023-08-01 20:08:48 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 35 minutes 25 seconds
Variants: generated 100, build-succeeded 24, build-failed 29, syntax-invalid 22, redundant 25
Fitness: max 0.923(24), min 0.923(24), ave 0.923
Test execution time: sum 2128 ms, max 109 ms, min 74 ms
----------------------------------------------------------------

2023-08-01 20:08:48 [main] [INFO]  KGenProgMain - entered the era of 13th generation.
2023-08-01 20:08:52 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 35 minutes 28 seconds
Variants: generated 100, build-succeeded 25, build-failed 33, syntax-invalid 21, redundant 21
Fitness: max 0.923(22), min 0.462(1), ave 0.889
Test execution time: sum 2223 ms, max 113 ms, min 68 ms
----------------------------------------------------------------

2023-08-01 20:08:52 [main] [INFO]  KGenProgMain - entered the era of 14th generation.
2023-08-01 20:11:55 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 38 minutes 31 seconds
Variants: generated 100, build-succeeded 23, build-failed 35, syntax-invalid 20, redundant 22
Fitness: max 0.923(22), min 0.846(1), ave 0.92
Test execution time: sum 182055 ms, max 180086 ms, min 86 ms
----------------------------------------------------------------

2023-08-01 20:11:55 [main] [INFO]  KGenProgMain - entered the era of 15th generation.
2023-08-01 20:11:58 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 38 minutes 34 seconds
Variants: generated 100, build-succeeded 21, build-failed 32, syntax-invalid 19, redundant 28
Fitness: max 1(2), min 0.846(1), ave 0.927
Test execution time: sum 1890 ms, max 114 ms, min 86 ms
----------------------------------------------------------------

2023-08-01 20:11:58 [main] [INFO]  KGenProgMain - entered the era of 16th generation.
2023-08-01 20:18:01 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 44 minutes 37 seconds
Variants: generated 100, build-succeeded 21, build-failed 33, syntax-invalid 24, redundant 22
Fitness: max 1(1), min 0.538(1), ave 0.897
Test execution time: sum 361870 ms, max 360086 ms, min 72 ms
----------------------------------------------------------------

2023-08-01 20:18:01 [main] [INFO]  KGenProgMain - entered the era of 17th generation.
2023-08-01 20:22:54 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 49 minutes 30 seconds
Variants: generated 100, build-succeeded 32, build-failed 34, syntax-invalid 20, redundant 14
Fitness: max 1(1), min 0.846(2), ave 0.921
Test execution time: sum 291575 ms, max 180110 ms, min 87 ms
----------------------------------------------------------------

2023-08-01 20:22:54 [main] [INFO]  KGenProgMain - entered the era of 18th generation.
2023-08-01 20:22:58 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 1 hours 49 minutes 34 seconds
Variants: generated 100, build-succeeded 29, build-failed 35, syntax-invalid 17, redundant 19
Fitness: max 1(2), min 0.846(1), ave 0.926
Test execution time: sum 2649 ms, max 107 ms, min 87 ms
----------------------------------------------------------------

2023-08-01 20:22:58 [main] [INFO]  KGenProgMain - entered the era of 19th generation.
2023-08-01 20:35:02 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 1 minutes 38 seconds
Variants: generated 100, build-succeeded 28, build-failed 38, syntax-invalid 25, redundant 9
Fitness: max 0.923(24), min 0.462(2), ave 0.885
Test execution time: sum 722534 ms, max 540070 ms, min 84 ms
----------------------------------------------------------------

2023-08-01 20:35:02 [main] [INFO]  KGenProgMain - entered the era of 20th generation.
2023-08-01 20:36:56 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 3 minutes 32 seconds
Variants: generated 100, build-succeeded 30, build-failed 38, syntax-invalid 17, redundant 15
Fitness: max 1(1), min 0.846(1), ave 0.923
Test execution time: sum 112733 ms, max 110091 ms, min 73 ms
----------------------------------------------------------------

2023-08-01 20:36:56 [main] [INFO]  KGenProgMain - entered the era of 21st generation.
2023-08-01 20:37:00 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 3 minutes 36 seconds
Variants: generated 100, build-succeeded 32, build-failed 32, syntax-invalid 18, redundant 18
Fitness: max 0.923(31), min 0.846(1), ave 0.921
Test execution time: sum 2942 ms, max 118 ms, min 85 ms
----------------------------------------------------------------

2023-08-01 20:37:00 [main] [INFO]  KGenProgMain - entered the era of 22nd generation.
2023-08-01 20:40:03 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 6 minutes 39 seconds
Variants: generated 100, build-succeeded 21, build-failed 42, syntax-invalid 24, redundant 13
Fitness: max 0.923(19), min 0.846(2), ave 0.916
Test execution time: sum 181877 ms, max 180086 ms, min 85 ms
----------------------------------------------------------------

2023-08-01 20:40:03 [main] [INFO]  KGenProgMain - entered the era of 23rd generation.
2023-08-01 20:41:55 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 8 minutes 31 seconds
Variants: generated 100, build-succeeded 24, build-failed 37, syntax-invalid 14, redundant 25
Fitness: max 1(1), min 0.846(1), ave 0.923
Test execution time: sum 110411 ms, max 108292 ms, min 87 ms
----------------------------------------------------------------

2023-08-01 20:41:55 [main] [INFO]  KGenProgMain - entered the era of 24th generation.
2023-08-01 20:41:58 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 8 minutes 35 seconds
Variants: generated 100, build-succeeded 22, build-failed 43, syntax-invalid 13, redundant 22
Fitness: max 0.923(22), min 0.923(22), ave 0.923
Test execution time: sum 1960 ms, max 113 ms, min 86 ms
----------------------------------------------------------------

2023-08-01 20:41:58 [main] [INFO]  KGenProgMain - entered the era of 25th generation.
2023-08-01 20:48:02 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 14 minutes 38 seconds
Variants: generated 100, build-succeeded 29, build-failed 32, syntax-invalid 18, redundant 21
Fitness: max 1(1), min 0.846(2), ave 0.92
Test execution time: sum 362614 ms, max 360129 ms, min 79 ms
----------------------------------------------------------------

2023-08-01 20:48:02 [main] [INFO]  KGenProgMain - entered the era of 26th generation.
2023-08-01 20:48:05 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 14 minutes 42 seconds
Variants: generated 100, build-succeeded 23, build-failed 41, syntax-invalid 14, redundant 22
Fitness: max 1(1), min 0.846(2), ave 0.92
Test execution time: sum 2060 ms, max 118 ms, min 86 ms
----------------------------------------------------------------

2023-08-01 20:48:05 [main] [INFO]  KGenProgMain - entered the era of 27th generation.
2023-08-01 20:48:09 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 14 minutes 46 seconds
Variants: generated 100, build-succeeded 32, build-failed 27, syntax-invalid 29, redundant 12
Fitness: max 0.923(32), min 0.923(32), ave 0.923
Test execution time: sum 2911 ms, max 128 ms, min 84 ms
----------------------------------------------------------------

2023-08-01 20:48:09 [main] [INFO]  KGenProgMain - entered the era of 28th generation.
2023-08-01 20:51:13 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 17 minutes 50 seconds
Variants: generated 100, build-succeeded 31, build-failed 34, syntax-invalid 24, redundant 11
Fitness: max 1(1), min 0.846(1), ave 0.923
Test execution time: sum 182796 ms, max 180086 ms, min 86 ms
----------------------------------------------------------------

2023-08-01 20:51:13 [main] [INFO]  KGenProgMain - entered the era of 29th generation.
2023-08-01 21:03:17 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 29 minutes 54 seconds
Variants: generated 100, build-succeeded 30, build-failed 32, syntax-invalid 21, redundant 17
Fitness: max 0.923(27), min 0.846(3), ave 0.915
Test execution time: sum 722681 ms, max 360087 ms, min 71 ms
----------------------------------------------------------------

2023-08-01 21:03:17 [main] [INFO]  KGenProgMain - entered the era of 30th generation.
2023-08-01 21:08:11 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 34 minutes 47 seconds
Variants: generated 100, build-succeeded 20, build-failed 40, syntax-invalid 24, redundant 16
Fitness: max 1(2), min 0.846(2), ave 0.923
Test execution time: sum 291855 ms, max 180086 ms, min 87 ms
----------------------------------------------------------------

2023-08-01 21:08:11 [main] [INFO]  KGenProgMain - entered the era of 31st generation.
2023-08-01 21:08:15 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 34 minutes 52 seconds
Variants: generated 100, build-succeeded 34, build-failed 40, syntax-invalid 12, redundant 14
Fitness: max 0.923(31), min 0.462(1), ave 0.905
Test execution time: sum 3088 ms, max 137 ms, min 83 ms
----------------------------------------------------------------

2023-08-01 21:08:15 [main] [INFO]  KGenProgMain - entered the era of 32nd generation.
2023-08-01 21:08:20 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 34 minutes 56 seconds
Variants: generated 100, build-succeeded 34, build-failed 38, syntax-invalid 21, redundant 7
Fitness: max 1(1), min 0.923(33), ave 0.925
Test execution time: sum 3061 ms, max 112 ms, min 85 ms
----------------------------------------------------------------

2023-08-01 21:08:20 [main] [INFO]  KGenProgMain - entered the era of 33rd generation.
2023-08-01 21:08:25 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 35 minutes 1 seconds
Variants: generated 100, build-succeeded 41, build-failed 37, syntax-invalid 14, redundant 8
Fitness: max 1(2), min 0.846(1), ave 0.925
Test execution time: sum 3646 ms, max 122 ms, min 84 ms
----------------------------------------------------------------

2023-08-01 21:08:25 [main] [INFO]  KGenProgMain - entered the era of 34th generation.
2023-08-01 21:08:29 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 35 minutes 5 seconds
Variants: generated 100, build-succeeded 26, build-failed 37, syntax-invalid 29, redundant 8
Fitness: max 0.923(26), min 0.923(26), ave 0.923
Test execution time: sum 2409 ms, max 117 ms, min 86 ms
----------------------------------------------------------------

2023-08-01 21:08:29 [main] [INFO]  KGenProgMain - entered the era of 35th generation.
2023-08-01 21:14:32 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 41 minutes 9 seconds
Variants: generated 100, build-succeeded 27, build-failed 31, syntax-invalid 28, redundant 14
Fitness: max 1(1), min 0.846(2), ave 0.92
Test execution time: sum 362468 ms, max 360067 ms, min 67 ms
----------------------------------------------------------------

2023-08-01 21:14:32 [main] [INFO]  KGenProgMain - entered the era of 36th generation.
2023-08-01 21:14:37 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 41 minutes 13 seconds
Variants: generated 100, build-succeeded 36, build-failed 32, syntax-invalid 23, redundant 9
Fitness: max 1(1), min 0.846(1), ave 0.923
Test execution time: sum 3268 ms, max 135 ms, min 84 ms
----------------------------------------------------------------

2023-08-01 21:14:37 [main] [INFO]  KGenProgMain - entered the era of 37th generation.
2023-08-01 21:14:41 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 41 minutes 18 seconds
Variants: generated 100, build-succeeded 31, build-failed 43, syntax-invalid 24, redundant 2
Fitness: max 0.923(30), min 0.846(1), ave 0.921
Test execution time: sum 2813 ms, max 124 ms, min 85 ms
----------------------------------------------------------------

2023-08-01 21:14:41 [main] [INFO]  KGenProgMain - entered the era of 38th generation.
2023-08-01 21:20:47 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 47 minutes 23 seconds
Variants: generated 100, build-succeeded 41, build-failed 39, syntax-invalid 17, redundant 3
Fitness: max 1(2), min 0.846(1), ave 0.925
Test execution time: sum 363657 ms, max 360086 ms, min 87 ms
----------------------------------------------------------------

2023-08-01 21:20:47 [main] [INFO]  KGenProgMain - entered the era of 39th generation.
2023-08-01 21:20:51 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 47 minutes 27 seconds
Variants: generated 100, build-succeeded 30, build-failed 35, syntax-invalid 28, redundant 7
Fitness: max 1(1), min 0.846(1), ave 0.923
Test execution time: sum 2662 ms, max 105 ms, min 84 ms
----------------------------------------------------------------

2023-08-01 21:20:51 [main] [INFO]  KGenProgMain - entered the era of 40th generation.
2023-08-01 21:20:55 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 47 minutes 31 seconds
Variants: generated 100, build-succeeded 26, build-failed 38, syntax-invalid 30, redundant 6
Fitness: max 0.923(26), min 0.923(26), ave 0.923
Test execution time: sum 2378 ms, max 120 ms, min 85 ms
----------------------------------------------------------------

2023-08-01 21:20:55 [main] [INFO]  KGenProgMain - entered the era of 41st generation.
2023-08-01 21:20:59 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 47 minutes 36 seconds
Variants: generated 100, build-succeeded 36, build-failed 32, syntax-invalid 25, redundant 7
Fitness: max 0.923(36), min 0.923(36), ave 0.923
Test execution time: sum 3339 ms, max 151 ms, min 86 ms
----------------------------------------------------------------

2023-08-01 21:20:59 [main] [INFO]  KGenProgMain - entered the era of 42nd generation.
2023-08-01 21:24:04 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 50 minutes 40 seconds
Variants: generated 100, build-succeeded 34, build-failed 33, syntax-invalid 25, redundant 8
Fitness: max 1(1), min 0.846(2), ave 0.921
Test execution time: sum 183142 ms, max 180086 ms, min 84 ms
----------------------------------------------------------------

2023-08-01 21:24:04 [main] [INFO]  KGenProgMain - entered the era of 43rd generation.
2023-08-01 21:33:09 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 59 minutes 45 seconds
Variants: generated 100, build-succeeded 36, build-failed 33, syntax-invalid 25, redundant 6
Fitness: max 1(1), min 0.846(2), ave 0.921
Test execution time: sum 543316 ms, max 360068 ms, min 86 ms
----------------------------------------------------------------

2023-08-01 21:33:09 [main] [INFO]  KGenProgMain - entered the era of 44th generation.
2023-08-01 21:33:13 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 hours 59 minutes 50 seconds
Variants: generated 100, build-succeeded 34, build-failed 33, syntax-invalid 24, redundant 9
Fitness: max 1(1), min 0.846(1), ave 0.923
Test execution time: sum 3129 ms, max 138 ms, min 86 ms
----------------------------------------------------------------

2023-08-01 21:33:13 [main] [INFO]  KGenProgMain - entered the era of 45th generation.
2023-08-01 21:45:18 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 11 minutes 55 seconds
Variants: generated 100, build-succeeded 37, build-failed 34, syntax-invalid 21, redundant 8
Fitness: max 1(1), min 0.846(4), ave 0.917
Test execution time: sum 723438 ms, max 360087 ms, min 86 ms
----------------------------------------------------------------

2023-08-01 21:45:18 [main] [INFO]  KGenProgMain - entered the era of 46th generation.
2023-08-01 21:45:23 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 11 minutes 59 seconds
Variants: generated 100, build-succeeded 33, build-failed 33, syntax-invalid 22, redundant 12
Fitness: max 0.923(32), min 0.846(1), ave 0.921
Test execution time: sum 3086 ms, max 135 ms, min 86 ms
----------------------------------------------------------------

2023-08-01 21:45:23 [main] [INFO]  KGenProgMain - entered the era of 47th generation.
2023-08-01 21:51:28 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 18 minutes 4 seconds
Variants: generated 100, build-succeeded 35, build-failed 32, syntax-invalid 27, redundant 6
Fitness: max 0.923(33), min 0.846(2), ave 0.919
Test execution time: sum 363486 ms, max 360070 ms, min 78 ms
----------------------------------------------------------------

2023-08-01 21:51:28 [main] [INFO]  KGenProgMain - entered the era of 48th generation.
2023-08-01 21:51:32 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 18 minutes 9 seconds
Variants: generated 100, build-succeeded 30, build-failed 34, syntax-invalid 27, redundant 9
Fitness: max 1(1), min 0.923(29), ave 0.926
Test execution time: sum 3056 ms, max 150 ms, min 85 ms
----------------------------------------------------------------

2023-08-01 21:51:32 [main] [INFO]  KGenProgMain - entered the era of 49th generation.
2023-08-01 21:54:38 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 21 minutes 15 seconds
Variants: generated 100, build-succeeded 43, build-failed 37, syntax-invalid 13, redundant 7
Fitness: max 0.923(42), min 0.846(1), ave 0.921
Test execution time: sum 184283 ms, max 180135 ms, min 83 ms
----------------------------------------------------------------

2023-08-01 21:54:38 [main] [INFO]  KGenProgMain - entered the era of 50th generation.
2023-08-01 22:00:43 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 27 minutes 20 seconds
Variants: generated 100, build-succeeded 33, build-failed 41, syntax-invalid 20, redundant 6
Fitness: max 0.923(32), min 0.846(1), ave 0.921
Test execution time: sum 363615 ms, max 360070 ms, min 86 ms
----------------------------------------------------------------

2023-08-01 22:00:43 [main] [INFO]  KGenProgMain - entered the era of 51st generation.
2023-08-01 22:00:49 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 27 minutes 25 seconds
Variants: generated 100, build-succeeded 39, build-failed 33, syntax-invalid 21, redundant 7
Fitness: max 1(1), min 0.846(1), ave 0.923
Test execution time: sum 4124 ms, max 150 ms, min 87 ms
----------------------------------------------------------------

2023-08-01 22:00:49 [main] [INFO]  KGenProgMain - entered the era of 52nd generation.
2023-08-01 22:00:55 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 27 minutes 31 seconds
Variants: generated 100, build-succeeded 39, build-failed 32, syntax-invalid 20, redundant 9
Fitness: max 0.923(38), min 0.846(1), ave 0.921
Test execution time: sum 4129 ms, max 160 ms, min 88 ms
----------------------------------------------------------------

2023-08-01 22:00:55 [main] [INFO]  KGenProgMain - entered the era of 53rd generation.
2023-08-01 22:02:52 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 29 minutes 28 seconds
Variants: generated 100, build-succeeded 35, build-failed 29, syntax-invalid 23, redundant 13
Fitness: max 1(2), min 0.846(1), ave 0.925
Test execution time: sum 115465 ms, max 112074 ms, min 88 ms
----------------------------------------------------------------

2023-08-01 22:02:52 [main] [INFO]  KGenProgMain - entered the era of 54th generation.
2023-08-01 22:02:57 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 29 minutes 34 seconds
Variants: generated 100, build-succeeded 38, build-failed 32, syntax-invalid 19, redundant 11
Fitness: max 0.923(37), min 0.385(1), ave 0.909
Test execution time: sum 4039 ms, max 163 ms, min 83 ms
----------------------------------------------------------------

2023-08-01 22:02:57 [main] [INFO]  KGenProgMain - entered the era of 55th generation.
2023-08-01 22:10:55 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 37 minutes 32 seconds
Variants: generated 100, build-succeeded 37, build-failed 38, syntax-invalid 19, redundant 6
Fitness: max 0.923(35), min 0.846(2), ave 0.919
Test execution time: sum 476258 ms, max 360069 ms, min 86 ms
----------------------------------------------------------------

2023-08-01 22:10:55 [main] [INFO]  KGenProgMain - entered the era of 56th generation.
2023-08-01 22:12:53 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 39 minutes 29 seconds
Variants: generated 100, build-succeeded 38, build-failed 34, syntax-invalid 18, redundant 10
Fitness: max 0.923(36), min 0.846(2), ave 0.919
Test execution time: sum 115799 ms, max 112327 ms, min 78 ms
----------------------------------------------------------------

2023-08-01 22:12:53 [main] [INFO]  KGenProgMain - entered the era of 57th generation.
2023-08-01 22:27:59 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 hours 54 minutes 35 seconds
Variants: generated 100, build-succeeded 39, build-failed 37, syntax-invalid 17, redundant 7
Fitness: max 1(3), min 0.846(3), ave 0.923
Test execution time: sum 903713 ms, max 360070 ms, min 87 ms
----------------------------------------------------------------

2023-08-01 22:27:59 [main] [INFO]  KGenProgMain - entered the era of 58th generation.
2023-08-01 22:34:04 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 41 seconds
Variants: generated 100, build-succeeded 39, build-failed 37, syntax-invalid 14, redundant 10
Fitness: max 0.923(37), min 0.846(2), ave 0.919
Test execution time: sum 363835 ms, max 360070 ms, min 87 ms
----------------------------------------------------------------

2023-08-01 22:34:04 [main] [INFO]  KGenProgMain - entered the era of 59th generation.
2023-08-01 22:34:09 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 45 seconds
Variants: generated 100, build-succeeded 30, build-failed 36, syntax-invalid 20, redundant 14
Fitness: max 0.923(28), min 0.846(2), ave 0.918
Test execution time: sum 2987 ms, max 139 ms, min 78 ms
----------------------------------------------------------------

2023-08-01 22:34:09 [main] [INFO]  KGenProgMain - entered the era of 60th generation.
2023-08-01 22:40:15 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 6 minutes 51 seconds
Variants: generated 100, build-succeeded 39, build-failed 35, syntax-invalid 15, redundant 11
Fitness: max 0.923(37), min 0.846(2), ave 0.919
Test execution time: sum 363775 ms, max 360069 ms, min 88 ms
----------------------------------------------------------------

2023-08-01 22:40:15 [main] [INFO]  KGenProgMain - entered the era of 61st generation.
2023-08-01 22:40:21 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 6 minutes 58 seconds
Variants: generated 100, build-succeeded 44, build-failed 37, syntax-invalid 15, redundant 4
Fitness: max 0.923(42), min 0.615(1), ave 0.914
Test execution time: sum 4542 ms, max 145 ms, min 87 ms
----------------------------------------------------------------

2023-08-01 22:40:21 [main] [INFO]  KGenProgMain - entered the era of 62nd generation.
2023-08-01 23:01:27 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 28 minutes 4 seconds
Variants: generated 100, build-succeeded 42, build-failed 38, syntax-invalid 13, redundant 7
Fitness: max 1(2), min 0.846(5), ave 0.918
Test execution time: sum 1264360 ms, max 360081 ms, min 89 ms
----------------------------------------------------------------

2023-08-01 23:01:27 [main] [INFO]  KGenProgMain - entered the era of 63rd generation.
2023-08-01 23:01:34 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 28 minutes 10 seconds
Variants: generated 100, build-succeeded 42, build-failed 34, syntax-invalid 10, redundant 14
Fitness: max 0.923(39), min 0.846(3), ave 0.918
Test execution time: sum 4171 ms, max 156 ms, min 84 ms
----------------------------------------------------------------

2023-08-01 23:01:34 [main] [INFO]  KGenProgMain - entered the era of 64th generation.
2023-08-01 23:01:39 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 28 minutes 15 seconds
Variants: generated 100, build-succeeded 35, build-failed 31, syntax-invalid 21, redundant 13
Fitness: max 0.923(34), min 0.846(1), ave 0.921
Test execution time: sum 3518 ms, max 157 ms, min 82 ms
----------------------------------------------------------------

2023-08-01 23:01:39 [main] [INFO]  KGenProgMain - entered the era of 65th generation.
2023-08-01 23:03:37 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 30 minutes 13 seconds
Variants: generated 100, build-succeeded 38, build-failed 34, syntax-invalid 16, redundant 12
Fitness: max 0.923(37), min 0.846(1), ave 0.921
Test execution time: sum 115695 ms, max 111944 ms, min 86 ms
----------------------------------------------------------------

2023-08-01 23:03:37 [main] [INFO]  KGenProgMain - entered the era of 66th generation.
2023-08-01 23:15:42 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 42 minutes 19 seconds
Variants: generated 100, build-succeeded 37, build-failed 36, syntax-invalid 17, redundant 10
Fitness: max 0.923(35), min 0.846(2), ave 0.919
Test execution time: sum 723541 ms, max 360088 ms, min 77 ms
----------------------------------------------------------------

2023-08-01 23:15:42 [main] [INFO]  KGenProgMain - entered the era of 67th generation.
2023-08-01 23:21:48 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 48 minutes 24 seconds
Variants: generated 100, build-succeeded 37, build-failed 37, syntax-invalid 16, redundant 10
Fitness: max 0.923(35), min 0.846(2), ave 0.919
Test execution time: sum 363537 ms, max 360070 ms, min 83 ms
----------------------------------------------------------------

2023-08-01 23:21:48 [main] [INFO]  KGenProgMain - entered the era of 68th generation.
2023-08-01 23:21:54 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 48 minutes 30 seconds
Variants: generated 100, build-succeeded 42, build-failed 37, syntax-invalid 12, redundant 9
Fitness: max 0.923(42), min 0.923(42), ave 0.923
Test execution time: sum 3922 ms, max 167 ms, min 78 ms
----------------------------------------------------------------

2023-08-01 23:21:54 [main] [INFO]  KGenProgMain - entered the era of 69th generation.
2023-08-01 23:29:50 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 hours 56 minutes 27 seconds
Variants: generated 100, build-succeeded 34, build-failed 33, syntax-invalid 23, redundant 10
Fitness: max 1(1), min 0.846(2), ave 0.921
Test execution time: sum 474960 ms, max 360078 ms, min 87 ms
----------------------------------------------------------------

2023-08-01 23:29:50 [main] [INFO]  KGenProgMain - entered the era of 70th generation.
2023-08-01 23:38:56 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 5 minutes 33 seconds
Variants: generated 100, build-succeeded 40, build-failed 34, syntax-invalid 19, redundant 7
Fitness: max 0.923(38), min 0.846(2), ave 0.919
Test execution time: sum 543807 ms, max 360088 ms, min 88 ms
----------------------------------------------------------------

2023-08-01 23:38:56 [main] [INFO]  KGenProgMain - entered the era of 71st generation.
2023-08-01 23:39:02 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 5 minutes 39 seconds
Variants: generated 100, build-succeeded 40, build-failed 36, syntax-invalid 20, redundant 4
Fitness: max 0.923(40), min 0.923(40), ave 0.923
Test execution time: sum 3867 ms, max 150 ms, min 80 ms
----------------------------------------------------------------

2023-08-01 23:39:02 [main] [INFO]  KGenProgMain - entered the era of 72nd generation.
2023-08-01 23:39:07 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 5 minutes 44 seconds
Variants: generated 100, build-succeeded 32, build-failed 33, syntax-invalid 18, redundant 17
Fitness: max 0.923(32), min 0.923(32), ave 0.923
Test execution time: sum 3075 ms, max 147 ms, min 87 ms
----------------------------------------------------------------

2023-08-01 23:39:07 [main] [INFO]  KGenProgMain - entered the era of 73rd generation.
2023-08-01 23:39:12 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 5 minutes 49 seconds
Variants: generated 100, build-succeeded 31, build-failed 36, syntax-invalid 24, redundant 9
Fitness: max 0.923(31), min 0.923(31), ave 0.923
Test execution time: sum 2934 ms, max 136 ms, min 90 ms
----------------------------------------------------------------

2023-08-01 23:39:12 [main] [INFO]  KGenProgMain - entered the era of 74th generation.
2023-08-01 23:39:18 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 5 minutes 54 seconds
Variants: generated 100, build-succeeded 37, build-failed 37, syntax-invalid 15, redundant 11
Fitness: max 0.923(37), min 0.923(37), ave 0.923
Test execution time: sum 3452 ms, max 143 ms, min 80 ms
----------------------------------------------------------------

2023-08-01 23:39:18 [main] [INFO]  KGenProgMain - entered the era of 75th generation.
2023-08-01 23:45:23 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 11 minutes 59 seconds
Variants: generated 100, build-succeeded 34, build-failed 38, syntax-invalid 17, redundant 11
Fitness: max 0.923(33), min 0.846(1), ave 0.921
Test execution time: sum 363111 ms, max 360068 ms, min 78 ms
----------------------------------------------------------------

2023-08-01 23:45:23 [main] [INFO]  KGenProgMain - entered the era of 76th generation.
2023-08-01 23:48:28 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 15 minutes 4 seconds
Variants: generated 100, build-succeeded 32, build-failed 31, syntax-invalid 28, redundant 9
Fitness: max 0.923(31), min 0.846(1), ave 0.921
Test execution time: sum 182963 ms, max 180088 ms, min 89 ms
----------------------------------------------------------------

2023-08-01 23:48:28 [main] [INFO]  KGenProgMain - entered the era of 77th generation.
2023-08-01 23:48:34 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 15 minutes 10 seconds
Variants: generated 100, build-succeeded 42, build-failed 27, syntax-invalid 22, redundant 9
Fitness: max 1(2), min 0.846(2), ave 0.923
Test execution time: sum 3905 ms, max 136 ms, min 81 ms
----------------------------------------------------------------

2023-08-01 23:48:34 [main] [INFO]  KGenProgMain - entered the era of 78th generation.
2023-08-01 23:48:39 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 15 minutes 16 seconds
Variants: generated 100, build-succeeded 35, build-failed 32, syntax-invalid 23, redundant 10
Fitness: max 1(1), min 0.846(1), ave 0.923
Test execution time: sum 3302 ms, max 121 ms, min 90 ms
----------------------------------------------------------------

2023-08-01 23:48:39 [main] [INFO]  KGenProgMain - entered the era of 79th generation.
2023-08-01 23:48:44 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 15 minutes 21 seconds
Variants: generated 100, build-succeeded 33, build-failed 34, syntax-invalid 23, redundant 10
Fitness: max 0.923(31), min 0.846(2), ave 0.918
Test execution time: sum 3071 ms, max 114 ms, min 78 ms
----------------------------------------------------------------

2023-08-01 23:48:44 [main] [INFO]  KGenProgMain - entered the era of 80th generation.
2023-08-01 23:48:49 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 15 minutes 26 seconds
Variants: generated 100, build-succeeded 32, build-failed 35, syntax-invalid 22, redundant 11
Fitness: max 0.923(32), min 0.923(32), ave 0.923
Test execution time: sum 2962 ms, max 115 ms, min 89 ms
----------------------------------------------------------------

2023-08-01 23:48:49 [main] [INFO]  KGenProgMain - entered the era of 81st generation.
2023-08-01 23:48:55 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 15 minutes 31 seconds
Variants: generated 100, build-succeeded 35, build-failed 34, syntax-invalid 18, redundant 13
Fitness: max 1(1), min 0.846(1), ave 0.923
Test execution time: sum 3273 ms, max 140 ms, min 82 ms
----------------------------------------------------------------

2023-08-01 23:48:55 [main] [INFO]  KGenProgMain - entered the era of 82nd generation.
2023-08-01 23:49:01 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 15 minutes 38 seconds
Variants: generated 100, build-succeeded 41, build-failed 37, syntax-invalid 14, redundant 8
Fitness: max 0.923(41), min 0.923(41), ave 0.923
Test execution time: sum 3940 ms, max 140 ms, min 89 ms
----------------------------------------------------------------

2023-08-01 23:49:01 [main] [INFO]  KGenProgMain - entered the era of 83rd generation.
2023-08-01 23:49:06 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 15 minutes 43 seconds
Variants: generated 100, build-succeeded 30, build-failed 38, syntax-invalid 24, redundant 8
Fitness: max 1(2), min 0.923(28), ave 0.928
Test execution time: sum 2885 ms, max 147 ms, min 88 ms
----------------------------------------------------------------

2023-08-01 23:49:06 [main] [INFO]  KGenProgMain - entered the era of 84th generation.
2023-08-01 23:49:12 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 15 minutes 49 seconds
Variants: generated 100, build-succeeded 39, build-failed 40, syntax-invalid 15, redundant 6
Fitness: max 0.923(39), min 0.923(39), ave 0.923
Test execution time: sum 3836 ms, max 151 ms, min 84 ms
----------------------------------------------------------------

2023-08-01 23:49:12 [main] [INFO]  KGenProgMain - entered the era of 85th generation.
2023-08-01 23:52:19 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 18 minutes 56 seconds
Variants: generated 100, build-succeeded 44, build-failed 42, syntax-invalid 10, redundant 4
Fitness: max 0.923(43), min 0.846(1), ave 0.921
Test execution time: sum 184467 ms, max 180071 ms, min 89 ms
----------------------------------------------------------------

2023-08-01 23:52:19 [main] [INFO]  KGenProgMain - entered the era of 86th generation.
2023-08-01 23:54:18 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 20 minutes 55 seconds
Variants: generated 100, build-succeeded 42, build-failed 36, syntax-invalid 13, redundant 9
Fitness: max 0.923(39), min 0.846(3), ave 0.918
Test execution time: sum 116898 ms, max 112733 ms, min 82 ms
----------------------------------------------------------------

2023-08-01 23:54:18 [main] [INFO]  KGenProgMain - entered the era of 87th generation.
2023-08-02 00:03:24 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 hours 30 minutes 1 seconds
Variants: generated 100, build-succeeded 37, build-failed 41, syntax-invalid 15, redundant 7
Fitness: max 0.923(35), min 0.462(1), ave 0.909
Test execution time: sum 543802 ms, max 360067 ms, min 80 ms
----------------------------------------------------------------

2023-08-02 00:03:24 [main] [INFO]  KGenProgMain - entered the era of 88th generation.
2023-08-02 00:33:31 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 hours 8 seconds
Variants: generated 100, build-succeeded 43, build-failed 38, syntax-invalid 13, redundant 6
Fitness: max 1(1), min 0.385(1), ave 0.911
Test execution time: sum 1804526 ms, max 1440068 ms, min 89 ms
----------------------------------------------------------------

2023-08-02 00:33:31 [main] [INFO]  KGenProgMain - entered the era of 89th generation.
2023-08-02 00:33:38 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 hours 14 seconds
Variants: generated 100, build-succeeded 44, build-failed 39, syntax-invalid 17, redundant 0
Fitness: max 1(3), min 0.846(1), ave 0.927
Test execution time: sum 4451 ms, max 148 ms, min 90 ms
----------------------------------------------------------------

2023-08-02 00:33:38 [main] [INFO]  KGenProgMain - entered the era of 90th generation.
2023-08-02 00:33:46 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 hours 22 seconds
Variants: generated 100, build-succeeded 48, build-failed 32, syntax-invalid 11, redundant 9
Fitness: max 1(1), min 0.846(1), ave 0.923
Test execution time: sum 5137 ms, max 147 ms, min 78 ms
----------------------------------------------------------------

2023-08-02 00:33:46 [main] [INFO]  KGenProgMain - entered the era of 91st generation.
2023-08-02 00:36:51 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 hours 3 minutes 28 seconds
Variants: generated 100, build-succeeded 37, build-failed 28, syntax-invalid 25, redundant 10
Fitness: max 0.923(34), min 0.846(3), ave 0.917
Test execution time: sum 183719 ms, max 180088 ms, min 82 ms
----------------------------------------------------------------

2023-08-02 00:36:51 [main] [INFO]  KGenProgMain - entered the era of 92nd generation.
2023-08-02 00:36:58 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 hours 3 minutes 34 seconds
Variants: generated 100, build-succeeded 43, build-failed 32, syntax-invalid 18, redundant 7
Fitness: max 1(1), min 0.923(42), ave 0.925
Test execution time: sum 4245 ms, max 146 ms, min 90 ms
----------------------------------------------------------------

2023-08-02 00:36:58 [main] [INFO]  KGenProgMain - entered the era of 93rd generation.
2023-08-02 00:49:05 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 hours 15 minutes 41 seconds
Variants: generated 100, build-succeeded 45, build-failed 36, syntax-invalid 11, redundant 8
Fitness: max 1(1), min 0.846(2), ave 0.921
Test execution time: sum 724377 ms, max 360071 ms, min 73 ms
----------------------------------------------------------------

2023-08-02 00:49:05 [main] [INFO]  KGenProgMain - entered the era of 94th generation.
2023-08-02 00:49:12 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 hours 15 minutes 48 seconds
Variants: generated 100, build-succeeded 48, build-failed 36, syntax-invalid 7, redundant 9
Fitness: max 0.923(48), min 0.923(48), ave 0.923
Test execution time: sum 4699 ms, max 153 ms, min 89 ms
----------------------------------------------------------------

2023-08-02 00:49:12 [main] [INFO]  KGenProgMain - entered the era of 95th generation.
2023-08-02 00:49:18 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 hours 15 minutes 54 seconds
Variants: generated 100, build-succeeded 36, build-failed 38, syntax-invalid 15, redundant 11
Fitness: max 0.923(34), min 0.846(2), ave 0.919
Test execution time: sum 3547 ms, max 142 ms, min 84 ms
----------------------------------------------------------------

2023-08-02 00:49:18 [main] [INFO]  KGenProgMain - entered the era of 96th generation.
2023-08-02 00:55:25 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 hours 22 minutes 1 seconds
Variants: generated 100, build-succeeded 44, build-failed 31, syntax-invalid 16, redundant 9
Fitness: max 1(2), min 0.846(1), ave 0.925
Test execution time: sum 364423 ms, max 360090 ms, min 83 ms
----------------------------------------------------------------

2023-08-02 00:55:25 [main] [INFO]  KGenProgMain - entered the era of 97th generation.
2023-08-02 00:55:32 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 hours 22 minutes 8 seconds
Variants: generated 100, build-succeeded 41, build-failed 35, syntax-invalid 12, redundant 12
Fitness: max 0.923(41), min 0.923(41), ave 0.923
Test execution time: sum 4278 ms, max 145 ms, min 91 ms
----------------------------------------------------------------

2023-08-02 00:55:32 [main] [INFO]  KGenProgMain - entered the era of 98th generation.
2023-08-02 00:55:39 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 hours 22 minutes 15 seconds
Variants: generated 100, build-succeeded 44, build-failed 38, syntax-invalid 10, redundant 8
Fitness: max 1(2), min 0.846(1), ave 0.925
Test execution time: sum 4440 ms, max 171 ms, min 83 ms
----------------------------------------------------------------

2023-08-02 00:55:39 [main] [INFO]  KGenProgMain - entered the era of 99th generation.
2023-08-02 00:55:46 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 hours 22 minutes 22 seconds
Variants: generated 100, build-succeeded 42, build-failed 38, syntax-invalid 15, redundant 5
Fitness: max 1(1), min 0.846(3), ave 0.919
Test execution time: sum 4326 ms, max 156 ms, min 84 ms
----------------------------------------------------------------

2023-08-02 00:55:46 [main] [INFO]  KGenProgMain - entered the era of 100th generation.
2023-08-02 01:01:53 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 hours 28 minutes 29 seconds
Variants: generated 100, build-succeeded 38, build-failed 38, syntax-invalid 14, redundant 10
Fitness: max 1(1), min 0.846(1), ave 0.923
Test execution time: sum 364048 ms, max 360071 ms, min 91 ms
----------------------------------------------------------------

2023-08-02 01:01:53 [main] [INFO]  KGenProgMain - entered the era of 101st generation.
2023-08-02 01:02:00 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 hours 28 minutes 37 seconds
Variants: generated 100, build-succeeded 40, build-failed 33, syntax-invalid 19, redundant 8
Fitness: max 0.923(40), min 0.923(40), ave 0.923
Test execution time: sum 4417 ms, max 154 ms, min 92 ms
----------------------------------------------------------------

2023-08-02 01:02:00 [main] [INFO]  KGenProgMain - entered the era of 102nd generation.
2023-08-02 01:02:08 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 hours 28 minutes 44 seconds
Variants: generated 100, build-succeeded 42, build-failed 39, syntax-invalid 14, redundant 5
Fitness: max 0.923(41), min 0.846(1), ave 0.921
Test execution time: sum 4722 ms, max 158 ms, min 91 ms
----------------------------------------------------------------

2023-08-02 01:02:08 [main] [INFO]  KGenProgMain - entered the era of 103rd generation.
2023-08-02 01:05:15 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 hours 31 minutes 51 seconds
Variants: generated 100, build-succeeded 37, build-failed 30, syntax-invalid 21, redundant 12
Fitness: max 1(3), min 0.846(1), ave 0.927
Test execution time: sum 184246 ms, max 180091 ms, min 92 ms
----------------------------------------------------------------

2023-08-02 01:05:15 [main] [INFO]  KGenProgMain - entered the era of 104th generation.
2023-08-02 01:41:22 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 hours 7 minutes 58 seconds
Variants: generated 100, build-succeeded 42, build-failed 29, syntax-invalid 13, redundant 16
Fitness: max 0.923(39), min 0.385(1), ave 0.907
Test execution time: sum 2164457 ms, max 1440070 ms, min 77 ms
----------------------------------------------------------------

2023-08-02 01:41:22 [main] [INFO]  KGenProgMain - entered the era of 105th generation.
2023-08-02 01:47:28 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 hours 14 minutes 4 seconds
Variants: generated 100, build-succeeded 30, build-failed 32, syntax-invalid 22, redundant 16
Fitness: max 1(2), min 0.846(1), ave 0.926
Test execution time: sum 363230 ms, max 360071 ms, min 92 ms
----------------------------------------------------------------

2023-08-02 01:47:28 [main] [INFO]  KGenProgMain - entered the era of 106th generation.
2023-08-02 01:50:35 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 hours 17 minutes 11 seconds
Variants: generated 100, build-succeeded 40, build-failed 34, syntax-invalid 15, redundant 11
Fitness: max 1(1), min 0.846(1), ave 0.923
Test execution time: sum 184432 ms, max 180139 ms, min 92 ms
----------------------------------------------------------------

2023-08-02 01:50:35 [main] [INFO]  KGenProgMain - entered the era of 107th generation.
2023-08-02 01:56:42 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 hours 23 minutes 18 seconds
Variants: generated 100, build-succeeded 40, build-failed 34, syntax-invalid 13, redundant 13
Fitness: max 1(1), min 0.846(2), ave 0.921
Test execution time: sum 364018 ms, max 360089 ms, min 85 ms
----------------------------------------------------------------

2023-08-02 01:56:42 [main] [INFO]  KGenProgMain - entered the era of 108th generation.
2023-08-02 01:59:48 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 hours 26 minutes 25 seconds
Variants: generated 100, build-succeeded 34, build-failed 36, syntax-invalid 11, redundant 19
Fitness: max 0.923(33), min 0.846(1), ave 0.921
Test execution time: sum 183583 ms, max 180103 ms, min 78 ms
----------------------------------------------------------------

2023-08-02 01:59:48 [main] [INFO]  KGenProgMain - entered the era of 109th generation.
2023-08-02 02:05:55 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 hours 32 minutes 31 seconds
Variants: generated 100, build-succeeded 39, build-failed 33, syntax-invalid 17, redundant 11
Fitness: max 1(2), min 0.846(3), ave 0.921
Test execution time: sum 364042 ms, max 360092 ms, min 74 ms
----------------------------------------------------------------

2023-08-02 02:05:55 [main] [INFO]  KGenProgMain - entered the era of 110th generation.
2023-08-02 02:06:02 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 hours 32 minutes 38 seconds
Variants: generated 100, build-succeeded 38, build-failed 32, syntax-invalid 12, redundant 18
Fitness: max 1(2), min 0.923(36), ave 0.927
Test execution time: sum 3964 ms, max 149 ms, min 93 ms
----------------------------------------------------------------

2023-08-02 02:06:02 [main] [INFO]  KGenProgMain - entered the era of 111th generation.
2023-08-02 02:12:08 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 hours 38 minutes 45 seconds
Variants: generated 100, build-succeeded 33, build-failed 31, syntax-invalid 14, redundant 22
Fitness: max 0.923(29), min 0.846(4), ave 0.914
Test execution time: sum 363290 ms, max 360092 ms, min 82 ms
----------------------------------------------------------------

2023-08-02 02:12:08 [main] [INFO]  KGenProgMain - entered the era of 112th generation.
2023-08-02 02:12:15 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 hours 38 minutes 52 seconds
Variants: generated 100, build-succeeded 36, build-failed 32, syntax-invalid 19, redundant 13
Fitness: max 1(3), min 0.846(1), ave 0.927
Test execution time: sum 3752 ms, max 170 ms, min 87 ms
----------------------------------------------------------------

2023-08-02 02:12:15 [main] [INFO]  KGenProgMain - entered the era of 113th generation.
2023-08-02 02:24:22 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 hours 50 minutes 59 seconds
Variants: generated 100, build-succeeded 37, build-failed 31, syntax-invalid 19, redundant 13
Fitness: max 0.923(35), min 0.846(2), ave 0.919
Test execution time: sum 723676 ms, max 360071 ms, min 77 ms
----------------------------------------------------------------

2023-08-02 02:24:22 [main] [INFO]  KGenProgMain - entered the era of 114th generation.
2023-08-02 02:24:28 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 hours 51 minutes 5 seconds
Variants: generated 100, build-succeeded 28, build-failed 42, syntax-invalid 6, redundant 24
Fitness: max 0.923(28), min 0.923(28), ave 0.923
Test execution time: sum 2846 ms, max 141 ms, min 94 ms
----------------------------------------------------------------

2023-08-02 02:24:28 [main] [INFO]  KGenProgMain - entered the era of 115th generation.
2023-08-02 02:36:36 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 hours 3 minutes 12 seconds
Variants: generated 100, build-succeeded 41, build-failed 31, syntax-invalid 6, redundant 22
Fitness: max 1(1), min 0.846(2), ave 0.921
Test execution time: sum 724237 ms, max 360113 ms, min 91 ms
----------------------------------------------------------------

2023-08-02 02:36:36 [main] [INFO]  KGenProgMain - entered the era of 116th generation.
2023-08-02 02:39:42 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 hours 6 minutes 19 seconds
Variants: generated 100, build-succeeded 32, build-failed 37, syntax-invalid 11, redundant 20
Fitness: max 1(1), min 0.846(1), ave 0.923
Test execution time: sum 183410 ms, max 180094 ms, min 93 ms
----------------------------------------------------------------

2023-08-02 02:39:42 [main] [INFO]  KGenProgMain - entered the era of 117th generation.
2023-08-02 02:39:49 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 hours 6 minutes 25 seconds
Variants: generated 100, build-succeeded 31, build-failed 35, syntax-invalid 14, redundant 20
Fitness: max 1(1), min 0.923(30), ave 0.926
Test execution time: sum 3349 ms, max 165 ms, min 92 ms
----------------------------------------------------------------

2023-08-02 02:39:49 [main] [INFO]  KGenProgMain - entered the era of 118th generation.
2023-08-02 02:42:55 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 hours 9 minutes 31 seconds
Variants: generated 100, build-succeeded 28, build-failed 31, syntax-invalid 13, redundant 28
Fitness: max 1(1), min 0.846(2), ave 0.92
Test execution time: sum 183073 ms, max 180138 ms, min 93 ms
----------------------------------------------------------------

2023-08-02 02:42:55 [main] [INFO]  KGenProgMain - entered the era of 119th generation.
2023-08-02 02:43:06 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 hours 9 minutes 42 seconds
Variants: generated 100, build-succeeded 35, build-failed 35, syntax-invalid 10, redundant 20
Fitness: max 0.923(33), min 0.846(2), ave 0.919
Test execution time: sum 7293 ms, max 3631 ms, min 77 ms
----------------------------------------------------------------

2023-08-02 02:43:06 [main] [INFO]  KGenProgMain - entered the era of 120th generation.
2023-08-02 02:43:13 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 hours 9 minutes 49 seconds
Variants: generated 100, build-succeeded 33, build-failed 37, syntax-invalid 5, redundant 25
Fitness: max 0.923(31), min 0.385(1), ave 0.904
Test execution time: sum 3523 ms, max 145 ms, min 69 ms
----------------------------------------------------------------

2023-08-02 02:43:13 [main] [INFO]  KGenProgMain - entered the era of 121st generation.
2023-08-02 02:43:20 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 hours 9 minutes 56 seconds
Variants: generated 100, build-succeeded 39, build-failed 35, syntax-invalid 9, redundant 17
Fitness: max 0.923(38), min 0.846(1), ave 0.921
Test execution time: sum 4206 ms, max 145 ms, min 94 ms
----------------------------------------------------------------

2023-08-02 02:43:20 [main] [INFO]  KGenProgMain - entered the era of 122nd generation.
2023-08-02 02:52:27 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 hours 19 minutes 3 seconds
Variants: generated 100, build-succeeded 32, build-failed 33, syntax-invalid 16, redundant 19
Fitness: max 1(1), min 0.462(1), ave 0.906
Test execution time: sum 543187 ms, max 360071 ms, min 71 ms
----------------------------------------------------------------

2023-08-02 02:52:27 [main] [INFO]  KGenProgMain - entered the era of 123rd generation.
2023-08-02 03:04:33 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 hours 31 minutes 10 seconds
Variants: generated 100, build-succeeded 34, build-failed 32, syntax-invalid 16, redundant 18
Fitness: max 1(2), min 0.846(4), ave 0.919
Test execution time: sum 723465 ms, max 360074 ms, min 94 ms
----------------------------------------------------------------

2023-08-02 03:04:33 [main] [INFO]  KGenProgMain - entered the era of 124th generation.
2023-08-02 03:10:41 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 hours 37 minutes 17 seconds
Variants: generated 100, build-succeeded 39, build-failed 35, syntax-invalid 15, redundant 11
Fitness: max 0.923(38), min 0.846(1), ave 0.921
Test execution time: sum 364112 ms, max 360094 ms, min 94 ms
----------------------------------------------------------------

2023-08-02 03:10:41 [main] [INFO]  KGenProgMain - entered the era of 125th generation.
2023-08-02 03:16:47 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 hours 43 minutes 24 seconds
Variants: generated 100, build-succeeded 33, build-failed 31, syntax-invalid 19, redundant 17
Fitness: max 1(1), min 0.615(1), ave 0.911
Test execution time: sum 363489 ms, max 360072 ms, min 85 ms
----------------------------------------------------------------

2023-08-02 03:16:47 [main] [INFO]  KGenProgMain - entered the era of 126th generation.
2023-08-02 03:16:55 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 hours 43 minutes 31 seconds
Variants: generated 100, build-succeeded 36, build-failed 38, syntax-invalid 13, redundant 13
Fitness: max 0.923(34), min 0.846(2), ave 0.919
Test execution time: sum 3965 ms, max 151 ms, min 95 ms
----------------------------------------------------------------

2023-08-02 03:16:55 [main] [INFO]  KGenProgMain - entered the era of 127th generation.
2023-08-02 03:18:57 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 hours 45 minutes 33 seconds
Variants: generated 100, build-succeeded 38, build-failed 31, syntax-invalid 15, redundant 16
Fitness: max 1(1), min 0.846(2), ave 0.921
Test execution time: sum 118332 ms, max 114209 ms, min 85 ms
----------------------------------------------------------------

2023-08-02 03:18:57 [main] [INFO]  KGenProgMain - entered the era of 128th generation.
2023-08-02 03:31:03 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 hours 57 minutes 40 seconds
Variants: generated 100, build-succeeded 29, build-failed 27, syntax-invalid 22, redundant 22
Fitness: max 1(1), min 0.846(3), ave 0.918
Test execution time: sum 723030 ms, max 360096 ms, min 96 ms
----------------------------------------------------------------

2023-08-02 03:31:03 [main] [INFO]  KGenProgMain - entered the era of 129th generation.
2023-08-02 03:31:11 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 hours 57 minutes 47 seconds
Variants: generated 100, build-succeeded 36, build-failed 28, syntax-invalid 19, redundant 17
Fitness: max 0.923(35), min 0.846(1), ave 0.921
Test execution time: sum 3797 ms, max 142 ms, min 94 ms
----------------------------------------------------------------

2023-08-02 03:31:11 [main] [INFO]  KGenProgMain - entered the era of 130th generation.
2023-08-02 03:33:11 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 hours 59 minutes 47 seconds
Variants: generated 100, build-succeeded 30, build-failed 33, syntax-invalid 18, redundant 19
Fitness: max 0.923(28), min 0.846(2), ave 0.918
Test execution time: sum 116552 ms, max 113590 ms, min 91 ms
----------------------------------------------------------------

2023-08-02 03:33:11 [main] [INFO]  KGenProgMain - entered the era of 131st generation.
2023-08-02 03:45:17 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 hours 11 minutes 54 seconds
Variants: generated 100, build-succeeded 32, build-failed 26, syntax-invalid 21, redundant 21
Fitness: max 1(1), min 0.846(3), ave 0.918
Test execution time: sum 723334 ms, max 360081 ms, min 96 ms
----------------------------------------------------------------

2023-08-02 03:45:17 [main] [INFO]  KGenProgMain - entered the era of 132nd generation.
2023-08-02 03:45:25 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 hours 12 minutes 1 seconds
Variants: generated 100, build-succeeded 36, build-failed 36, syntax-invalid 11, redundant 17
Fitness: max 0.923(34), min 0.385(1), ave 0.906
Test execution time: sum 3734 ms, max 149 ms, min 83 ms
----------------------------------------------------------------

2023-08-02 03:45:25 [main] [INFO]  KGenProgMain - entered the era of 133rd generation.
2023-08-02 03:51:32 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 hours 18 minutes 9 seconds
Variants: generated 100, build-succeeded 35, build-failed 35, syntax-invalid 17, redundant 13
Fitness: max 1(1), min 0.615(1), ave 0.914
Test execution time: sum 363620 ms, max 360091 ms, min 90 ms
----------------------------------------------------------------

2023-08-02 03:51:32 [main] [INFO]  KGenProgMain - entered the era of 134th generation.
2023-08-02 03:51:38 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 hours 18 minutes 15 seconds
Variants: generated 100, build-succeeded 27, build-failed 28, syntax-invalid 26, redundant 19
Fitness: max 0.923(27), min 0.923(27), ave 0.923
Test execution time: sum 2781 ms, max 133 ms, min 95 ms
----------------------------------------------------------------

2023-08-02 03:51:38 [main] [INFO]  KGenProgMain - entered the era of 135th generation.
2023-08-02 03:57:44 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 hours 24 minutes 21 seconds
Variants: generated 100, build-succeeded 25, build-failed 35, syntax-invalid 19, redundant 21
Fitness: max 1(2), min 0.846(2), ave 0.923
Test execution time: sum 362577 ms, max 180106 ms, min 96 ms
----------------------------------------------------------------

2023-08-02 03:57:44 [main] [INFO]  KGenProgMain - entered the era of 136th generation.
2023-08-02 03:57:51 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 hours 24 minutes 27 seconds
Variants: generated 100, build-succeeded 26, build-failed 36, syntax-invalid 12, redundant 26
Fitness: max 1(3), min 0.923(23), ave 0.932
Test execution time: sum 2682 ms, max 164 ms, min 95 ms
----------------------------------------------------------------

2023-08-02 03:57:51 [main] [INFO]  KGenProgMain - entered the era of 137th generation.
2023-08-02 03:57:57 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 hours 24 minutes 34 seconds
Variants: generated 100, build-succeeded 30, build-failed 35, syntax-invalid 15, redundant 20
Fitness: max 1(1), min 0.923(29), ave 0.926
Test execution time: sum 3137 ms, max 125 ms, min 94 ms
----------------------------------------------------------------

2023-08-02 03:57:57 [main] [INFO]  KGenProgMain - entered the era of 138th generation.
2023-08-02 03:58:04 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 hours 24 minutes 41 seconds
Variants: generated 100, build-succeeded 33, build-failed 34, syntax-invalid 17, redundant 16
Fitness: max 0.923(33), min 0.923(33), ave 0.923
Test execution time: sum 3393 ms, max 136 ms, min 94 ms
----------------------------------------------------------------

2023-08-02 03:58:04 [main] [INFO]  KGenProgMain - entered the era of 139th generation.
2023-08-02 03:58:07 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 hours 24 minutes 44 seconds
Variants: generated 50, build-succeeded 7, build-failed 35, syntax-invalid 4, redundant 4
Fitness: max 1(3), min 0.923(4), ave 0.956
Test execution time: sum 712 ms, max 119 ms, min 93 ms
----------------------------------------------------------------

2023-08-02 03:58:07 [main] [INFO]  KGenProgMain - GA stopped
2023-08-02 03:58:07 [main] [INFO]  PatchLogExporter - patch (v109)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 03:58:07 [main] [INFO]  PatchLogExporter - patch (v109)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils
@@ -196,12 +196,6 @@
                 ((a > lowerBound) || (b < upperBound)));
    
         if (fa * fb >= 0.0 ) {
-            throw new ConvergenceException(
-                      "number of iterations={0}, maximum iterations={1}, " +
-                      "initial={2}, lower bound={3}, upper bound={4}, final a value={5}, " +
-                      "final b value={6}, f(a)={7}, f(b)={8}",
-                      numIterations, maximumIterations, initial,
-                      lowerBound, upperBound, a, b, fa, fb);
         }
         
         return new double[]{a, b};
2023-08-02 03:58:07 [main] [INFO]  PatchLogExporter - patch (v109)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 03:58:07 [main] [INFO]  PatchLogExporter - patch (v217)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 03:58:07 [main] [INFO]  PatchLogExporter - patch (v217)
--- org.apache.commons.math.distribution.AbstractContinuousDistribution
+++ org.apache.commons.math.distribution.AbstractContinuousDistribution
@@ -100,8 +100,7 @@
             if (Math.abs(rootFindingFunction.value(upperBound)) < 1E-6) {
                 return upperBound;
             }     
-            // Failed bracket convergence was not because of corner solution
-            throw new MathException(ex);
+            return 0;
         }
 
         // find root
2023-08-02 03:58:07 [main] [INFO]  PatchLogExporter - patch (v217)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils
@@ -196,12 +196,6 @@
                 ((a > lowerBound) || (b < upperBound)));
    
         if (fa * fb >= 0.0 ) {
-            throw new ConvergenceException(
-                      "number of iterations={0}, maximum iterations={1}, " +
-                      "initial={2}, lower bound={3}, upper bound={4}, final a value={5}, " +
-                      "final b value={6}, f(a)={7}, f(b)={8}",
-                      numIterations, maximumIterations, initial,
-                      lowerBound, upperBound, a, b, fa, fb);
         }
         
         return new double[]{a, b};
2023-08-02 03:58:07 [main] [INFO]  PatchLogExporter - patch (v217)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 03:58:07 [main] [INFO]  PatchLogExporter - patch (v229)
--- org.apache.commons.math.MathException
+++ org.apache.commons.math.MathException
@@ -116,7 +116,6 @@
      *                   to be thrown.
      */
     public MathException(Throwable rootCause) {
-        super(rootCause);
         this.pattern   = getMessage();
         this.arguments = new Object[0];
     }
2023-08-02 03:58:07 [main] [INFO]  PatchLogExporter - patch (v229)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 03:58:07 [main] [INFO]  PatchLogExporter - patch (v229)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils
@@ -196,12 +196,6 @@
                 ((a > lowerBound) || (b < upperBound)));
    
         if (fa * fb >= 0.0 ) {
-            throw new ConvergenceException(
-                      "number of iterations={0}, maximum iterations={1}, " +
-                      "initial={2}, lower bound={3}, upper bound={4}, final a value={5}, " +
-                      "final b value={6}, f(a)={7}, f(b)={8}",
-                      numIterations, maximumIterations, initial,
-                      lowerBound, upperBound, a, b, fa, fb);
         }
         
         return new double[]{a, b};
2023-08-02 03:58:07 [main] [INFO]  PatchLogExporter - patch (v229)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 03:58:07 [main] [INFO]  PatchLogExporter - patch (v229)
--- org.apache.commons.math.distribution.NormalDistributionImpl
+++ org.apache.commons.math.distribution.NormalDistributionImpl
@@ -220,7 +220,7 @@
 
         if (p < .5) {
             ret = getMean() - getStandardDeviation();
-        } else if (p > .5) {
+        } else if (p < 0.0 || p > 1.0) {
             ret = getMean() + getStandardDeviation();
         } else {
             ret = getMean();
2023-08-02 03:58:07 [main] [INFO]  PatchLogExporter - patch (v308)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 03:58:07 [main] [INFO]  PatchLogExporter - patch (v308)
--- org.apache.commons.math.distribution.AbstractContinuousDistribution
+++ org.apache.commons.math.distribution.AbstractContinuousDistribution
@@ -99,9 +99,7 @@
             }
             if (Math.abs(rootFindingFunction.value(upperBound)) < 1E-6) {
                 return upperBound;
-            }     
-            // Failed bracket convergence was not because of corner solution
-            throw new MathException(ex);
+            }
         }
 
         // find root
2023-08-02 03:58:07 [main] [INFO]  PatchLogExporter - patch (v308)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils
@@ -196,12 +196,6 @@
                 ((a > lowerBound) || (b < upperBound)));
    
         if (fa * fb >= 0.0 ) {
-            throw new ConvergenceException(
-                      "number of iterations={0}, maximum iterations={1}, " +
-                      "initial={2}, lower bound={3}, upper bound={4}, final a value={5}, " +
-                      "final b value={6}, f(a)={7}, f(b)={8}",
-                      numIterations, maximumIterations, initial,
-                      lowerBound, upperBound, a, b, fa, fb);
         }
         
         return new double[]{a, b};
2023-08-02 03:58:07 [main] [INFO]  PatchLogExporter - patch (v308)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 03:58:07 [main] [INFO]  PatchLogExporter - patch (v404)
--- org.apache.commons.math.MathException
+++ org.apache.commons.math.MathException
@@ -163,7 +163,7 @@
      * @since 1.2
      */
     public String getMessage(Locale locale) {
-        return buildMessage(locale, pattern, arguments);
+        return (pattern == null) ? "" : new MessageFormat(translate(pattern, locale), locale).format(arguments);
     }
 
     /** {@inheritDoc} */
2023-08-02 03:58:07 [main] [INFO]  PatchLogExporter - patch (v404)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 03:58:07 [main] [INFO]  PatchLogExporter - patch (v404)
--- org.apache.commons.math.distribution.AbstractContinuousDistribution
+++ org.apache.commons.math.distribution.AbstractContinuousDistribution
@@ -97,11 +97,9 @@
             if (Math.abs(rootFindingFunction.value(lowerBound)) < 1E-6) {
                 return lowerBound;
             }
-            if (Math.abs(rootFindingFunction.value(upperBound)) < 1E-6) {
+            if (p == 1) {
                 return upperBound;
-            }     
-            // Failed bracket convergence was not because of corner solution
-            throw new MathException(ex);
+            }
         }
 
         // find root
2023-08-02 03:58:07 [main] [INFO]  PatchLogExporter - patch (v404)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils
@@ -196,12 +196,7 @@
                 ((a > lowerBound) || (b < upperBound)));
    
         if (fa * fb >= 0.0 ) {
-            throw new ConvergenceException(
-                      "number of iterations={0}, maximum iterations={1}, " +
-                      "initial={2}, lower bound={3}, upper bound={4}, final a value={5}, " +
-                      "final b value={6}, f(a)={7}, f(b)={8}",
-                      numIterations, maximumIterations, initial,
-                      lowerBound, upperBound, a, b, fa, fb);
+            fb = function.value(b);
         }
         
         return new double[]{a, b};
2023-08-02 03:58:07 [main] [INFO]  PatchLogExporter - patch (v404)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 03:58:07 [main] [INFO]  PatchLogExporter - patch (v430)
--- org.apache.commons.math.MathException
+++ org.apache.commons.math.MathException
@@ -163,7 +163,7 @@
      * @since 1.2
      */
     public String getMessage(Locale locale) {
-        return buildMessage(locale, pattern, arguments);
+        return (pattern == null) ? "" : new MessageFormat(translate(pattern, locale), locale).format(arguments);
     }
 
     /** {@inheritDoc} */
2023-08-02 03:58:07 [main] [INFO]  PatchLogExporter - patch (v430)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 03:58:07 [main] [INFO]  PatchLogExporter - patch (v430)
--- org.apache.commons.math.distribution.AbstractContinuousDistribution
+++ org.apache.commons.math.distribution.AbstractContinuousDistribution
@@ -97,7 +97,7 @@
             if (Math.abs(rootFindingFunction.value(lowerBound)) < 1E-6) {
                 return lowerBound;
             }
-            if (Math.abs(rootFindingFunction.value(upperBound)) < 1E-6) {
+            if (p < 0.0 || p > 1.0) {
                 return upperBound;
             }     
             // Failed bracket convergence was not because of corner solution
2023-08-02 03:58:07 [main] [INFO]  PatchLogExporter - patch (v430)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils
@@ -196,12 +196,6 @@
                 ((a > lowerBound) || (b < upperBound)));
    
         if (fa * fb >= 0.0 ) {
-            throw new ConvergenceException(
-                      "number of iterations={0}, maximum iterations={1}, " +
-                      "initial={2}, lower bound={3}, upper bound={4}, final a value={5}, " +
-                      "final b value={6}, f(a)={7}, f(b)={8}",
-                      numIterations, maximumIterations, initial,
-                      lowerBound, upperBound, a, b, fa, fb);
         }
         
         return new double[]{a, b};
2023-08-02 03:58:07 [main] [INFO]  PatchLogExporter - patch (v430)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 03:58:07 [main] [INFO]  PatchLogExporter - patch (v430)
--- org.apache.commons.math.distribution.NormalDistributionImpl
+++ org.apache.commons.math.distribution.NormalDistributionImpl
@@ -201,6 +201,7 @@
             ret = getMean();
         } else {
             ret = Double.MAX_VALUE;
+			return ret;
         }
         
         return ret;
2023-08-02 03:58:07 [main] [INFO]  PatchLogExporter - patch (v526)
--- org.apache.commons.math.MathException
+++ org.apache.commons.math.MathException
@@ -116,7 +116,6 @@
      *                   to be thrown.
      */
     public MathException(Throwable rootCause) {
-        super(rootCause);
         this.pattern   = getMessage();
         this.arguments = new Object[0];
     }
2023-08-02 03:58:07 [main] [INFO]  PatchLogExporter - patch (v526)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 03:58:07 [main] [INFO]  PatchLogExporter - patch (v526)
--- org.apache.commons.math.distribution.AbstractContinuousDistribution
+++ org.apache.commons.math.distribution.AbstractContinuousDistribution
@@ -99,9 +99,7 @@
             }
             if (Math.abs(rootFindingFunction.value(upperBound)) < 1E-6) {
                 return upperBound;
-            }     
-            // Failed bracket convergence was not because of corner solution
-            throw new MathException(ex);
+            }
         }
 
         // find root
2023-08-02 03:58:07 [main] [INFO]  PatchLogExporter - patch (v526)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils
@@ -196,12 +196,6 @@
                 ((a > lowerBound) || (b < upperBound)));
    
         if (fa * fb >= 0.0 ) {
-            throw new ConvergenceException(
-                      "number of iterations={0}, maximum iterations={1}, " +
-                      "initial={2}, lower bound={3}, upper bound={4}, final a value={5}, " +
-                      "final b value={6}, f(a)={7}, f(b)={8}",
-                      numIterations, maximumIterations, initial,
-                      lowerBound, upperBound, a, b, fa, fb);
         }
         
         return new double[]{a, b};
2023-08-02 03:58:07 [main] [INFO]  PatchLogExporter - patch (v526)
--- org.apache.commons.math.MaxIterationsExceededException
+++ org.apache.commons.math.MaxIterationsExceededException
@@ -40,7 +40,6 @@
      * @param maxIterations maximal number of iterations allowed
      */
     public MaxIterationsExceededException(final int maxIterations) {
-        super("Maximal number of iterations ({0}) exceeded", maxIterations);
         this.maxIterations = maxIterations;
     }
 
2023-08-02 03:58:07 [main] [INFO]  PatchLogExporter - patch (v526)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 03:58:07 [main] [INFO]  PatchLogExporter - patch (v537)
--- org.apache.commons.math.MathException
+++ org.apache.commons.math.MathException
@@ -163,7 +163,7 @@
      * @since 1.2
      */
     public String getMessage(Locale locale) {
-        return buildMessage(locale, pattern, arguments);
+        return (pattern == null) ? "" : new MessageFormat(translate(pattern, locale), locale).format(arguments);
     }
 
     /** {@inheritDoc} */
2023-08-02 03:58:07 [main] [INFO]  PatchLogExporter - patch (v537)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 03:58:07 [main] [INFO]  PatchLogExporter - patch (v537)
--- org.apache.commons.math.distribution.AbstractContinuousDistribution
+++ org.apache.commons.math.distribution.AbstractContinuousDistribution
@@ -97,7 +97,7 @@
             if (Math.abs(rootFindingFunction.value(lowerBound)) < 1E-6) {
                 return lowerBound;
             }
-            if (Math.abs(rootFindingFunction.value(upperBound)) < 1E-6) {
+            if (p == 1) {
                 return upperBound;
             }     
             // Failed bracket convergence was not because of corner solution
2023-08-02 03:58:07 [main] [INFO]  PatchLogExporter - patch (v537)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils
@@ -196,12 +196,6 @@
                 ((a > lowerBound) || (b < upperBound)));
    
         if (fa * fb >= 0.0 ) {
-            throw new ConvergenceException(
-                      "number of iterations={0}, maximum iterations={1}, " +
-                      "initial={2}, lower bound={3}, upper bound={4}, final a value={5}, " +
-                      "final b value={6}, f(a)={7}, f(b)={8}",
-                      numIterations, maximumIterations, initial,
-                      lowerBound, upperBound, a, b, fa, fb);
         }
         
         return new double[]{a, b};
2023-08-02 03:58:07 [main] [INFO]  PatchLogExporter - patch (v537)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 03:58:07 [main] [INFO]  PatchLogExporter - patch (v810)
--- org.apache.commons.math.MathException
+++ org.apache.commons.math.MathException
@@ -116,7 +116,6 @@
      *                   to be thrown.
      */
     public MathException(Throwable rootCause) {
-        super(rootCause);
         this.pattern   = getMessage();
         this.arguments = new Object[0];
     }
@@ -163,7 +162,7 @@
      * @since 1.2
      */
     public String getMessage(Locale locale) {
-        return buildMessage(locale, pattern, arguments);
+        return (pattern == null) ? "" : new MessageFormat(translate(pattern, locale), locale).format(arguments);
     }
 
     /** {@inheritDoc} */
2023-08-02 03:58:07 [main] [INFO]  PatchLogExporter - patch (v810)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 03:58:07 [main] [INFO]  PatchLogExporter - patch (v810)
--- org.apache.commons.math.distribution.AbstractContinuousDistribution
+++ org.apache.commons.math.distribution.AbstractContinuousDistribution
@@ -100,8 +100,7 @@
             if (Math.abs(rootFindingFunction.value(upperBound)) < 1E-6) {
                 return upperBound;
             }     
-            // Failed bracket convergence was not because of corner solution
-            throw new MathException(ex);
+            return 0;
         }
 
         // find root
2023-08-02 03:58:07 [main] [INFO]  PatchLogExporter - patch (v810)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils
@@ -196,12 +196,6 @@
                 ((a > lowerBound) || (b < upperBound)));
    
         if (fa * fb >= 0.0 ) {
-            throw new ConvergenceException(
-                      "number of iterations={0}, maximum iterations={1}, " +
-                      "initial={2}, lower bound={3}, upper bound={4}, final a value={5}, " +
-                      "final b value={6}, f(a)={7}, f(b)={8}",
-                      numIterations, maximumIterations, initial,
-                      lowerBound, upperBound, a, b, fa, fb);
         }
         
         return new double[]{a, b};
2023-08-02 03:58:07 [main] [INFO]  PatchLogExporter - patch (v810)
--- org.apache.commons.math.ConvergenceException
+++ org.apache.commons.math.ConvergenceException
@@ -42,7 +42,6 @@
      * @since 1.2
      */
     public ConvergenceException(String pattern, Object ... arguments) {
-        super(pattern, arguments);
     }
 
     /**
2023-08-02 03:58:07 [main] [INFO]  PatchLogExporter - patch (v810)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v909)
--- org.apache.commons.math.MathException
+++ org.apache.commons.math.MathException
@@ -163,7 +163,7 @@
      * @since 1.2
      */
     public String getMessage(Locale locale) {
-        return buildMessage(locale, pattern, arguments);
+        return (pattern == null) ? "" : new MessageFormat(translate(pattern, locale), locale).format(arguments);
     }
 
     /** {@inheritDoc} */
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v909)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v909)
--- org.apache.commons.math.distribution.AbstractContinuousDistribution
+++ org.apache.commons.math.distribution.AbstractContinuousDistribution
@@ -97,7 +97,7 @@
             if (Math.abs(rootFindingFunction.value(lowerBound)) < 1E-6) {
                 return lowerBound;
             }
-            if (Math.abs(rootFindingFunction.value(upperBound)) < 1E-6) {
+            if (p == 1) {
                 return upperBound;
             }     
             // Failed bracket convergence was not because of corner solution
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v909)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils
@@ -196,12 +196,6 @@
                 ((a > lowerBound) || (b < upperBound)));
    
         if (fa * fb >= 0.0 ) {
-            throw new ConvergenceException(
-                      "number of iterations={0}, maximum iterations={1}, " +
-                      "initial={2}, lower bound={3}, upper bound={4}, final a value={5}, " +
-                      "final b value={6}, f(a)={7}, f(b)={8}",
-                      numIterations, maximumIterations, initial,
-                      lowerBound, upperBound, a, b, fa, fb);
         }
         
         return new double[]{a, b};
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v909)
--- org.apache.commons.math.MaxIterationsExceededException
+++ org.apache.commons.math.MaxIterationsExceededException
@@ -40,7 +40,6 @@
      * @param maxIterations maximal number of iterations allowed
      */
     public MaxIterationsExceededException(final int maxIterations) {
-        super("Maximal number of iterations ({0}) exceeded", maxIterations);
         this.maxIterations = maxIterations;
     }
 
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v909)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v926)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v926)
--- org.apache.commons.math.distribution.AbstractContinuousDistribution
+++ org.apache.commons.math.distribution.AbstractContinuousDistribution
@@ -97,11 +97,9 @@
             if (Math.abs(rootFindingFunction.value(lowerBound)) < 1E-6) {
                 return lowerBound;
             }
-            if (Math.abs(rootFindingFunction.value(upperBound)) < 1E-6) {
+            if (p < 0.0 || p > 1.0) {
                 return upperBound;
-            }     
-            // Failed bracket convergence was not because of corner solution
-            throw new MathException(ex);
+            }
         }
 
         // find root
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v926)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils
@@ -196,12 +196,6 @@
                 ((a > lowerBound) || (b < upperBound)));
    
         if (fa * fb >= 0.0 ) {
-            throw new ConvergenceException(
-                      "number of iterations={0}, maximum iterations={1}, " +
-                      "initial={2}, lower bound={3}, upper bound={4}, final a value={5}, " +
-                      "final b value={6}, f(a)={7}, f(b)={8}",
-                      numIterations, maximumIterations, initial,
-                      lowerBound, upperBound, a, b, fa, fb);
         }
         
         return new double[]{a, b};
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v926)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v926)
--- org.apache.commons.math.distribution.NormalDistributionImpl
+++ org.apache.commons.math.distribution.NormalDistributionImpl
@@ -51,7 +51,6 @@
      * @param sd standard deviation for this distribution
      */
     public NormalDistributionImpl(double mean, double sd){
-        super();
         setMean(mean);
         setStandardDeviation(sd);
     }
@@ -201,6 +200,7 @@
             ret = getMean();
         } else {
             ret = Double.MAX_VALUE;
+			return ret;
         }
         
         return ret;
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v1310)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v1310)
--- org.apache.commons.math.distribution.AbstractContinuousDistribution
+++ org.apache.commons.math.distribution.AbstractContinuousDistribution
@@ -99,9 +99,7 @@
             }
             if (Math.abs(rootFindingFunction.value(upperBound)) < 1E-6) {
                 return upperBound;
-            }     
-            // Failed bracket convergence was not because of corner solution
-            throw new MathException(ex);
+            }
         }
 
         // find root
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v1310)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils
@@ -196,12 +196,6 @@
                 ((a > lowerBound) || (b < upperBound)));
    
         if (fa * fb >= 0.0 ) {
-            throw new ConvergenceException(
-                      "number of iterations={0}, maximum iterations={1}, " +
-                      "initial={2}, lower bound={3}, upper bound={4}, final a value={5}, " +
-                      "final b value={6}, f(a)={7}, f(b)={8}",
-                      numIterations, maximumIterations, initial,
-                      lowerBound, upperBound, a, b, fa, fb);
         }
         
         return new double[]{a, b};
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v1310)
--- org.apache.commons.math.ConvergenceException
+++ org.apache.commons.math.ConvergenceException
@@ -42,7 +42,6 @@
      * @since 1.2
      */
     public ConvergenceException(String pattern, Object ... arguments) {
-        super(pattern, arguments);
     }
 
     /**
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v1310)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v1310)
--- org.apache.commons.math.distribution.NormalDistributionImpl
+++ org.apache.commons.math.distribution.NormalDistributionImpl
@@ -201,6 +201,7 @@
             ret = getMean();
         } else {
             ret = Double.MAX_VALUE;
+			return ret;
         }
         
         return ret;
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v1335)
--- org.apache.commons.math.MathException
+++ org.apache.commons.math.MathException
@@ -116,7 +116,6 @@
      *                   to be thrown.
      */
     public MathException(Throwable rootCause) {
-        super(rootCause);
         this.pattern   = getMessage();
         this.arguments = new Object[0];
     }
@@ -163,7 +162,7 @@
      * @since 1.2
      */
     public String getMessage(Locale locale) {
-        return buildMessage(locale, pattern, arguments);
+        return (pattern == null) ? "" : new MessageFormat(translate(pattern, locale), locale).format(arguments);
     }
 
     /** {@inheritDoc} */
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v1335)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v1335)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils
@@ -196,12 +196,6 @@
                 ((a > lowerBound) || (b < upperBound)));
    
         if (fa * fb >= 0.0 ) {
-            throw new ConvergenceException(
-                      "number of iterations={0}, maximum iterations={1}, " +
-                      "initial={2}, lower bound={3}, upper bound={4}, final a value={5}, " +
-                      "final b value={6}, f(a)={7}, f(b)={8}",
-                      numIterations, maximumIterations, initial,
-                      lowerBound, upperBound, a, b, fa, fb);
         }
         
         return new double[]{a, b};
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v1335)
--- org.apache.commons.math.MaxIterationsExceededException
+++ org.apache.commons.math.MaxIterationsExceededException
@@ -40,7 +40,6 @@
      * @param maxIterations maximal number of iterations allowed
      */
     public MaxIterationsExceededException(final int maxIterations) {
-        super("Maximal number of iterations ({0}) exceeded", maxIterations);
         this.maxIterations = maxIterations;
     }
 
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v1335)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v1335)
--- org.apache.commons.math.distribution.NormalDistributionImpl
+++ org.apache.commons.math.distribution.NormalDistributionImpl
@@ -220,7 +220,7 @@
 
         if (p < .5) {
             ret = getMean() - getStandardDeviation();
-        } else if (p > .5) {
+        } else if (p < 0.0 || p > 1.0) {
             ret = getMean() + getStandardDeviation();
         } else {
             ret = getMean();
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v1429)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v1429)
--- org.apache.commons.math.distribution.AbstractContinuousDistribution
+++ org.apache.commons.math.distribution.AbstractContinuousDistribution
@@ -94,14 +94,12 @@
              * TODO: expose the default solver, defaultAbsoluteAccuracy as
              * a constant.
              */ 
-            if (Math.abs(rootFindingFunction.value(lowerBound)) < 1E-6) {
+            if (p == 1) {
                 return lowerBound;
             }
             if (Math.abs(rootFindingFunction.value(upperBound)) < 1E-6) {
                 return upperBound;
-            }     
-            // Failed bracket convergence was not because of corner solution
-            throw new MathException(ex);
+            }
         }
 
         // find root
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v1429)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils
@@ -196,12 +196,6 @@
                 ((a > lowerBound) || (b < upperBound)));
    
         if (fa * fb >= 0.0 ) {
-            throw new ConvergenceException(
-                      "number of iterations={0}, maximum iterations={1}, " +
-                      "initial={2}, lower bound={3}, upper bound={4}, final a value={5}, " +
-                      "final b value={6}, f(a)={7}, f(b)={8}",
-                      numIterations, maximumIterations, initial,
-                      lowerBound, upperBound, a, b, fa, fb);
         }
         
         return new double[]{a, b};
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v1429)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v1429)
--- org.apache.commons.math.distribution.NormalDistributionImpl
+++ org.apache.commons.math.distribution.NormalDistributionImpl
@@ -51,7 +51,6 @@
      * @param sd standard deviation for this distribution
      */
     public NormalDistributionImpl(double mean, double sd){
-        super();
         setMean(mean);
         setStandardDeviation(sd);
     }
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v1504)
--- org.apache.commons.math.MathException
+++ org.apache.commons.math.MathException
@@ -116,7 +116,6 @@
      *                   to be thrown.
      */
     public MathException(Throwable rootCause) {
-        super(rootCause);
         this.pattern   = getMessage();
         this.arguments = new Object[0];
     }
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v1504)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v1504)
--- org.apache.commons.math.distribution.AbstractContinuousDistribution
+++ org.apache.commons.math.distribution.AbstractContinuousDistribution
@@ -99,9 +99,7 @@
             }
             if (Math.abs(rootFindingFunction.value(upperBound)) < 1E-6) {
                 return upperBound;
-            }     
-            // Failed bracket convergence was not because of corner solution
-            throw new MathException(ex);
+            }
         }
 
         // find root
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v1504)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils
@@ -196,12 +196,7 @@
                 ((a > lowerBound) || (b < upperBound)));
    
         if (fa * fb >= 0.0 ) {
-            throw new ConvergenceException(
-                      "number of iterations={0}, maximum iterations={1}, " +
-                      "initial={2}, lower bound={3}, upper bound={4}, final a value={5}, " +
-                      "final b value={6}, f(a)={7}, f(b)={8}",
-                      numIterations, maximumIterations, initial,
-                      lowerBound, upperBound, a, b, fa, fb);
+            double x0, x1, x2, x, oldx, y0, y1, y2, y;
         }
         
         return new double[]{a, b};
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v1504)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v1504)
--- org.apache.commons.math.distribution.NormalDistributionImpl
+++ org.apache.commons.math.distribution.NormalDistributionImpl
@@ -220,7 +220,7 @@
 
         if (p < .5) {
             ret = getMean() - getStandardDeviation();
-        } else if (p > .5) {
+        } else if (p < .5) {
             ret = getMean() + getStandardDeviation();
         } else {
             ret = getMean();
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v1640)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v1640)
--- org.apache.commons.math.distribution.AbstractContinuousDistribution
+++ org.apache.commons.math.distribution.AbstractContinuousDistribution
@@ -97,11 +97,9 @@
             if (Math.abs(rootFindingFunction.value(lowerBound)) < 1E-6) {
                 return lowerBound;
             }
-            if (Math.abs(rootFindingFunction.value(upperBound)) < 1E-6) {
+            if (p < 0.0 || p > 1.0) {
                 return upperBound;
-            }     
-            // Failed bracket convergence was not because of corner solution
-            throw new MathException(ex);
+            }
         }
 
         // find root
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v1640)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils
@@ -196,12 +196,6 @@
                 ((a > lowerBound) || (b < upperBound)));
    
         if (fa * fb >= 0.0 ) {
-            throw new ConvergenceException(
-                      "number of iterations={0}, maximum iterations={1}, " +
-                      "initial={2}, lower bound={3}, upper bound={4}, final a value={5}, " +
-                      "final b value={6}, f(a)={7}, f(b)={8}",
-                      numIterations, maximumIterations, initial,
-                      lowerBound, upperBound, a, b, fa, fb);
         }
         
         return new double[]{a, b};
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v1640)
--- org.apache.commons.math.ConvergenceException
+++ org.apache.commons.math.ConvergenceException
@@ -42,7 +42,6 @@
      * @since 1.2
      */
     public ConvergenceException(String pattern, Object ... arguments) {
-        super(pattern, arguments);
     }
 
     /**
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v1640)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v1640)
--- org.apache.commons.math.distribution.NormalDistributionImpl
+++ org.apache.commons.math.distribution.NormalDistributionImpl
@@ -51,7 +51,6 @@
      * @param sd standard deviation for this distribution
      */
     public NormalDistributionImpl(double mean, double sd){
-        super();
         setMean(mean);
         setStandardDeviation(sd);
     }
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v1649)
--- org.apache.commons.math.MathException
+++ org.apache.commons.math.MathException
@@ -163,7 +163,7 @@
      * @since 1.2
      */
     public String getMessage(Locale locale) {
-        return buildMessage(locale, pattern, arguments);
+        return (pattern == null) ? "" : new MessageFormat(translate(pattern, locale), locale).format(arguments);
     }
 
     /** {@inheritDoc} */
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v1649)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v1649)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils
@@ -196,12 +196,6 @@
                 ((a > lowerBound) || (b < upperBound)));
    
         if (fa * fb >= 0.0 ) {
-            throw new ConvergenceException(
-                      "number of iterations={0}, maximum iterations={1}, " +
-                      "initial={2}, lower bound={3}, upper bound={4}, final a value={5}, " +
-                      "final b value={6}, f(a)={7}, f(b)={8}",
-                      numIterations, maximumIterations, initial,
-                      lowerBound, upperBound, a, b, fa, fb);
         }
         
         return new double[]{a, b};
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v1649)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v1649)
--- org.apache.commons.math.distribution.NormalDistributionImpl
+++ org.apache.commons.math.distribution.NormalDistributionImpl
@@ -51,7 +51,6 @@
      * @param sd standard deviation for this distribution
      */
     public NormalDistributionImpl(double mean, double sd){
-        super();
         setMean(mean);
         setStandardDeviation(sd);
     }
@@ -179,6 +178,7 @@
             ret = -Double.MAX_VALUE;
         } else {
             ret = getMean();
+			return ret;
         }
         
         return ret;
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v1846)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v1846)
--- org.apache.commons.math.distribution.AbstractContinuousDistribution
+++ org.apache.commons.math.distribution.AbstractContinuousDistribution
@@ -97,7 +97,7 @@
             if (Math.abs(rootFindingFunction.value(lowerBound)) < 1E-6) {
                 return lowerBound;
             }
-            if (Math.abs(rootFindingFunction.value(upperBound)) < 1E-6) {
+            if (p < 0.0 || p > 1.0) {
                 return upperBound;
             }     
             // Failed bracket convergence was not because of corner solution
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v1846)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils
@@ -196,12 +196,6 @@
                 ((a > lowerBound) || (b < upperBound)));
    
         if (fa * fb >= 0.0 ) {
-            throw new ConvergenceException(
-                      "number of iterations={0}, maximum iterations={1}, " +
-                      "initial={2}, lower bound={3}, upper bound={4}, final a value={5}, " +
-                      "final b value={6}, f(a)={7}, f(b)={8}",
-                      numIterations, maximumIterations, initial,
-                      lowerBound, upperBound, a, b, fa, fb);
         }
         
         return new double[]{a, b};
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v1846)
--- org.apache.commons.math.ConvergenceException
+++ org.apache.commons.math.ConvergenceException
@@ -42,7 +42,6 @@
      * @since 1.2
      */
     public ConvergenceException(String pattern, Object ... arguments) {
-        super(pattern, arguments);
     }
 
     /**
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v1846)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v1846)
--- org.apache.commons.math.distribution.NormalDistributionImpl
+++ org.apache.commons.math.distribution.NormalDistributionImpl
@@ -220,7 +220,7 @@
 
         if (p < .5) {
             ret = getMean() - getStandardDeviation();
-        } else if (p > .5) {
+        } else if (p < 0.0 || p > 1.0) {
             ret = getMean() + getStandardDeviation();
         } else {
             ret = getMean();
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v2101)
--- org.apache.commons.math.MathException
+++ org.apache.commons.math.MathException
@@ -116,7 +116,6 @@
      *                   to be thrown.
      */
     public MathException(Throwable rootCause) {
-        super(rootCause);
         this.pattern   = getMessage();
         this.arguments = new Object[0];
     }
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v2101)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v2101)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils
@@ -196,12 +196,6 @@
                 ((a > lowerBound) || (b < upperBound)));
    
         if (fa * fb >= 0.0 ) {
-            throw new ConvergenceException(
-                      "number of iterations={0}, maximum iterations={1}, " +
-                      "initial={2}, lower bound={3}, upper bound={4}, final a value={5}, " +
-                      "final b value={6}, f(a)={7}, f(b)={8}",
-                      numIterations, maximumIterations, initial,
-                      lowerBound, upperBound, a, b, fa, fb);
         }
         
         return new double[]{a, b};
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v2101)
--- org.apache.commons.math.MaxIterationsExceededException
+++ org.apache.commons.math.MaxIterationsExceededException
@@ -40,7 +40,6 @@
      * @param maxIterations maximal number of iterations allowed
      */
     public MaxIterationsExceededException(final int maxIterations) {
-        super("Maximal number of iterations ({0}) exceeded", maxIterations);
         this.maxIterations = maxIterations;
     }
 
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v2101)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v2101)
--- org.apache.commons.math.distribution.NormalDistributionImpl
+++ org.apache.commons.math.distribution.NormalDistributionImpl
@@ -179,6 +179,7 @@
             ret = -Double.MAX_VALUE;
         } else {
             ret = getMean();
+			return ret;
         }
         
         return ret;
@@ -201,6 +202,7 @@
             ret = getMean();
         } else {
             ret = Double.MAX_VALUE;
+			return ret;
         }
         
         return ret;
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v2303)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v2303)
--- org.apache.commons.math.distribution.AbstractContinuousDistribution
+++ org.apache.commons.math.distribution.AbstractContinuousDistribution
@@ -94,7 +94,7 @@
              * TODO: expose the default solver, defaultAbsoluteAccuracy as
              * a constant.
              */ 
-            if (Math.abs(rootFindingFunction.value(lowerBound)) < 1E-6) {
+            if (p == 1) {
                 return lowerBound;
             }
             if (Math.abs(rootFindingFunction.value(upperBound)) < 1E-6) {
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v2303)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils
@@ -196,12 +196,6 @@
                 ((a > lowerBound) || (b < upperBound)));
    
         if (fa * fb >= 0.0 ) {
-            throw new ConvergenceException(
-                      "number of iterations={0}, maximum iterations={1}, " +
-                      "initial={2}, lower bound={3}, upper bound={4}, final a value={5}, " +
-                      "final b value={6}, f(a)={7}, f(b)={8}",
-                      numIterations, maximumIterations, initial,
-                      lowerBound, upperBound, a, b, fa, fb);
         }
         
         return new double[]{a, b};
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v2303)
--- org.apache.commons.math.MaxIterationsExceededException
+++ org.apache.commons.math.MaxIterationsExceededException
@@ -40,7 +40,6 @@
      * @param maxIterations maximal number of iterations allowed
      */
     public MaxIterationsExceededException(final int maxIterations) {
-        super("Maximal number of iterations ({0}) exceeded", maxIterations);
         this.maxIterations = maxIterations;
     }
 
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v2303)
--- org.apache.commons.math.ConvergenceException
+++ org.apache.commons.math.ConvergenceException
@@ -42,7 +42,6 @@
      * @since 1.2
      */
     public ConvergenceException(String pattern, Object ... arguments) {
-        super(pattern, arguments);
     }
 
     /**
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v2303)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v2303)
--- org.apache.commons.math.distribution.NormalDistributionImpl
+++ org.apache.commons.math.distribution.NormalDistributionImpl
@@ -51,7 +51,6 @@
      * @param sd standard deviation for this distribution
      */
     public NormalDistributionImpl(double mean, double sd){
-        super();
         setMean(mean);
         setStandardDeviation(sd);
     }
@@ -220,7 +219,7 @@
 
         if (p < .5) {
             ret = getMean() - getStandardDeviation();
-        } else if (p > .5) {
+        } else if (p < 0.0 || p > 1.0) {
             ret = getMean() + getStandardDeviation();
         } else {
             ret = getMean();
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v2410)
--- org.apache.commons.math.MathException
+++ org.apache.commons.math.MathException
@@ -116,7 +116,6 @@
      *                   to be thrown.
      */
     public MathException(Throwable rootCause) {
-        super(rootCause);
         this.pattern   = getMessage();
         this.arguments = new Object[0];
     }
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v2410)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v2410)
--- org.apache.commons.math.distribution.AbstractContinuousDistribution
+++ org.apache.commons.math.distribution.AbstractContinuousDistribution
@@ -94,10 +94,10 @@
              * TODO: expose the default solver, defaultAbsoluteAccuracy as
              * a constant.
              */ 
-            if (Math.abs(rootFindingFunction.value(lowerBound)) < 1E-6) {
+            if (p == 1) {
                 return lowerBound;
             }
-            if (Math.abs(rootFindingFunction.value(upperBound)) < 1E-6) {
+            if (p < 0.0 || p > 1.0) {
                 return upperBound;
             }     
             // Failed bracket convergence was not because of corner solution
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v2410)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils
@@ -196,12 +196,6 @@
                 ((a > lowerBound) || (b < upperBound)));
    
         if (fa * fb >= 0.0 ) {
-            throw new ConvergenceException(
-                      "number of iterations={0}, maximum iterations={1}, " +
-                      "initial={2}, lower bound={3}, upper bound={4}, final a value={5}, " +
-                      "final b value={6}, f(a)={7}, f(b)={8}",
-                      numIterations, maximumIterations, initial,
-                      lowerBound, upperBound, a, b, fa, fb);
         }
         
         return new double[]{a, b};
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v2410)
--- org.apache.commons.math.MaxIterationsExceededException
+++ org.apache.commons.math.MaxIterationsExceededException
@@ -40,7 +40,6 @@
      * @param maxIterations maximal number of iterations allowed
      */
     public MaxIterationsExceededException(final int maxIterations) {
-        super("Maximal number of iterations ({0}) exceeded", maxIterations);
         this.maxIterations = maxIterations;
     }
 
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v2410)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v2410)
--- org.apache.commons.math.distribution.NormalDistributionImpl
+++ org.apache.commons.math.distribution.NormalDistributionImpl
@@ -51,7 +51,6 @@
      * @param sd standard deviation for this distribution
      */
     public NormalDistributionImpl(double mean, double sd){
-        super();
         setMean(mean);
         setStandardDeviation(sd);
     }
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v2605)
--- org.apache.commons.math.MathException
+++ org.apache.commons.math.MathException
@@ -90,7 +90,6 @@
      * detail message.
      */
     public MathException() {
-        super();
         this.pattern   = null;
         this.arguments = new Object[0];
     }
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v2605)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v2605)
--- org.apache.commons.math.distribution.AbstractContinuousDistribution
+++ org.apache.commons.math.distribution.AbstractContinuousDistribution
@@ -94,10 +94,10 @@
              * TODO: expose the default solver, defaultAbsoluteAccuracy as
              * a constant.
              */ 
-            if (Math.abs(rootFindingFunction.value(lowerBound)) < 1E-6) {
+            if (p == 1) {
                 return lowerBound;
             }
-            if (Math.abs(rootFindingFunction.value(upperBound)) < 1E-6) {
+            if (p == 1) {
                 return upperBound;
             }     
             // Failed bracket convergence was not because of corner solution
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v2605)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils
@@ -196,12 +196,6 @@
                 ((a > lowerBound) || (b < upperBound)));
    
         if (fa * fb >= 0.0 ) {
-            throw new ConvergenceException(
-                      "number of iterations={0}, maximum iterations={1}, " +
-                      "initial={2}, lower bound={3}, upper bound={4}, final a value={5}, " +
-                      "final b value={6}, f(a)={7}, f(b)={8}",
-                      numIterations, maximumIterations, initial,
-                      lowerBound, upperBound, a, b, fa, fb);
         }
         
         return new double[]{a, b};
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v2605)
--- org.apache.commons.math.MaxIterationsExceededException
+++ org.apache.commons.math.MaxIterationsExceededException
@@ -40,7 +40,6 @@
      * @param maxIterations maximal number of iterations allowed
      */
     public MaxIterationsExceededException(final int maxIterations) {
-        super("Maximal number of iterations ({0}) exceeded", maxIterations);
         this.maxIterations = maxIterations;
     }
 
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v2605)
--- org.apache.commons.math.ConvergenceException
+++ org.apache.commons.math.ConvergenceException
@@ -42,7 +42,6 @@
      * @since 1.2
      */
     public ConvergenceException(String pattern, Object ... arguments) {
-        super(pattern, arguments);
     }
 
     /**
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v2605)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v2605)
--- org.apache.commons.math.distribution.NormalDistributionImpl
+++ org.apache.commons.math.distribution.NormalDistributionImpl
@@ -51,7 +51,6 @@
      * @param sd standard deviation for this distribution
      */
     public NormalDistributionImpl(double mean, double sd){
-        super();
         setMean(mean);
         setStandardDeviation(sd);
     }
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v2836)
--- org.apache.commons.math.MathException
+++ org.apache.commons.math.MathException
@@ -116,7 +116,6 @@
      *                   to be thrown.
      */
     public MathException(Throwable rootCause) {
-        super(rootCause);
         this.pattern   = getMessage();
         this.arguments = new Object[0];
     }
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v2836)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v2836)
--- org.apache.commons.math.distribution.AbstractContinuousDistribution
+++ org.apache.commons.math.distribution.AbstractContinuousDistribution
@@ -94,14 +94,12 @@
              * TODO: expose the default solver, defaultAbsoluteAccuracy as
              * a constant.
              */ 
-            if (Math.abs(rootFindingFunction.value(lowerBound)) < 1E-6) {
+            if (p == 1) {
                 return lowerBound;
             }
             if (Math.abs(rootFindingFunction.value(upperBound)) < 1E-6) {
                 return upperBound;
-            }     
-            // Failed bracket convergence was not because of corner solution
-            throw new MathException(ex);
+            }
         }
 
         // find root
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v2836)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils
@@ -191,17 +191,10 @@
             fa = function.value(a);
             
             fb = function.value(b);
-            numIterations++ ;
         } while ((fa * fb > 0.0) && (numIterations < maximumIterations) && 
                 ((a > lowerBound) || (b < upperBound)));
    
         if (fa * fb >= 0.0 ) {
-            throw new ConvergenceException(
-                      "number of iterations={0}, maximum iterations={1}, " +
-                      "initial={2}, lower bound={3}, upper bound={4}, final a value={5}, " +
-                      "final b value={6}, f(a)={7}, f(b)={8}",
-                      numIterations, maximumIterations, initial,
-                      lowerBound, upperBound, a, b, fa, fb);
         }
         
         return new double[]{a, b};
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v2836)
--- org.apache.commons.math.ConvergenceException
+++ org.apache.commons.math.ConvergenceException
@@ -42,7 +42,6 @@
      * @since 1.2
      */
     public ConvergenceException(String pattern, Object ... arguments) {
-        super(pattern, arguments);
     }
 
     /**
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v2836)
--- org.apache.commons.math.distribution.AbstractDistribution
+++ org.apache.commons.math.distribution.AbstractDistribution
@@ -36,7 +36,6 @@
      * Default constructor.
      */
     protected AbstractDistribution() {
-        super();
     }
 
     /**
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v2836)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v2836)
--- org.apache.commons.math.distribution.NormalDistributionImpl
+++ org.apache.commons.math.distribution.NormalDistributionImpl
@@ -220,7 +220,7 @@
 
         if (p < .5) {
             ret = getMean() - getStandardDeviation();
-        } else if (p > .5) {
+        } else if (p < 0.0 || p > 1.0) {
             ret = getMean() + getStandardDeviation();
         } else {
             ret = getMean();
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v2847)
--- org.apache.commons.math.MathException
+++ org.apache.commons.math.MathException
@@ -116,7 +116,6 @@
      *                   to be thrown.
      */
     public MathException(Throwable rootCause) {
-        super(rootCause);
         this.pattern   = getMessage();
         this.arguments = new Object[0];
     }
@@ -163,7 +162,7 @@
      * @since 1.2
      */
     public String getMessage(Locale locale) {
-        return buildMessage(locale, pattern, arguments);
+        return (pattern == null) ? "" : new MessageFormat(translate(pattern, locale), locale).format(arguments);
     }
 
     /** {@inheritDoc} */
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v2847)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v2847)
--- org.apache.commons.math.distribution.AbstractContinuousDistribution
+++ org.apache.commons.math.distribution.AbstractContinuousDistribution
@@ -94,14 +94,12 @@
              * TODO: expose the default solver, defaultAbsoluteAccuracy as
              * a constant.
              */ 
-            if (Math.abs(rootFindingFunction.value(lowerBound)) < 1E-6) {
+            if (p == 1) {
                 return lowerBound;
             }
             if (Math.abs(rootFindingFunction.value(upperBound)) < 1E-6) {
                 return upperBound;
-            }     
-            // Failed bracket convergence was not because of corner solution
-            throw new MathException(ex);
+            }
         }
 
         // find root
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v2847)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils
@@ -196,12 +196,6 @@
                 ((a > lowerBound) || (b < upperBound)));
    
         if (fa * fb >= 0.0 ) {
-            throw new ConvergenceException(
-                      "number of iterations={0}, maximum iterations={1}, " +
-                      "initial={2}, lower bound={3}, upper bound={4}, final a value={5}, " +
-                      "final b value={6}, f(a)={7}, f(b)={8}",
-                      numIterations, maximumIterations, initial,
-                      lowerBound, upperBound, a, b, fa, fb);
         }
         
         return new double[]{a, b};
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v2847)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v2847)
--- org.apache.commons.math.distribution.NormalDistributionImpl
+++ org.apache.commons.math.distribution.NormalDistributionImpl
@@ -201,6 +201,7 @@
             ret = getMean();
         } else {
             ret = Double.MAX_VALUE;
+			return ret;
         }
         
         return ret;
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v3017)
--- org.apache.commons.math.MathException
+++ org.apache.commons.math.MathException
@@ -116,7 +116,6 @@
      *                   to be thrown.
      */
     public MathException(Throwable rootCause) {
-        super(rootCause);
         this.pattern   = getMessage();
         this.arguments = new Object[0];
     }
@@ -163,7 +162,7 @@
      * @since 1.2
      */
     public String getMessage(Locale locale) {
-        return buildMessage(locale, pattern, arguments);
+        return (pattern == null) ? "" : new MessageFormat(translate(pattern, locale), locale).format(arguments);
     }
 
     /** {@inheritDoc} */
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v3017)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v3017)
--- org.apache.commons.math.distribution.AbstractContinuousDistribution
+++ org.apache.commons.math.distribution.AbstractContinuousDistribution
@@ -97,11 +97,9 @@
             if (Math.abs(rootFindingFunction.value(lowerBound)) < 1E-6) {
                 return lowerBound;
             }
-            if (Math.abs(rootFindingFunction.value(upperBound)) < 1E-6) {
+            if (p < 0.0 || p > 1.0) {
                 return upperBound;
-            }     
-            // Failed bracket convergence was not because of corner solution
-            throw new MathException(ex);
+            }
         }
 
         // find root
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v3017)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils
@@ -196,12 +196,6 @@
                 ((a > lowerBound) || (b < upperBound)));
    
         if (fa * fb >= 0.0 ) {
-            throw new ConvergenceException(
-                      "number of iterations={0}, maximum iterations={1}, " +
-                      "initial={2}, lower bound={3}, upper bound={4}, final a value={5}, " +
-                      "final b value={6}, f(a)={7}, f(b)={8}",
-                      numIterations, maximumIterations, initial,
-                      lowerBound, upperBound, a, b, fa, fb);
         }
         
         return new double[]{a, b};
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v3017)
--- org.apache.commons.math.MaxIterationsExceededException
+++ org.apache.commons.math.MaxIterationsExceededException
@@ -40,7 +40,6 @@
      * @param maxIterations maximal number of iterations allowed
      */
     public MaxIterationsExceededException(final int maxIterations) {
-        super("Maximal number of iterations ({0}) exceeded", maxIterations);
         this.maxIterations = maxIterations;
     }
 
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v3017)
--- org.apache.commons.math.util.ContinuedFraction
+++ org.apache.commons.math.util.ContinuedFraction
@@ -43,7 +43,6 @@
      * Default constructor.
      */
     protected ContinuedFraction() {
-        super();
     }
 
     /**
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v3017)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v3111)
--- org.apache.commons.math.MathException
+++ org.apache.commons.math.MathException
@@ -163,7 +163,7 @@
      * @since 1.2
      */
     public String getMessage(Locale locale) {
-        return buildMessage(locale, pattern, arguments);
+        return (pattern == null) ? "" : new MessageFormat(translate(pattern, locale), locale).format(arguments);
     }
 
     /** {@inheritDoc} */
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v3111)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v3111)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils
@@ -196,12 +196,6 @@
                 ((a > lowerBound) || (b < upperBound)));
    
         if (fa * fb >= 0.0 ) {
-            throw new ConvergenceException(
-                      "number of iterations={0}, maximum iterations={1}, " +
-                      "initial={2}, lower bound={3}, upper bound={4}, final a value={5}, " +
-                      "final b value={6}, f(a)={7}, f(b)={8}",
-                      numIterations, maximumIterations, initial,
-                      lowerBound, upperBound, a, b, fa, fb);
         }
         
         return new double[]{a, b};
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v3111)
--- org.apache.commons.math.util.ContinuedFraction
+++ org.apache.commons.math.util.ContinuedFraction
@@ -43,7 +43,6 @@
      * Default constructor.
      */
     protected ContinuedFraction() {
-        super();
     }
 
     /**
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v3111)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v3111)
--- org.apache.commons.math.distribution.NormalDistributionImpl
+++ org.apache.commons.math.distribution.NormalDistributionImpl
@@ -51,7 +51,6 @@
      * @param sd standard deviation for this distribution
      */
     public NormalDistributionImpl(double mean, double sd){
-        super();
         setMean(mean);
         setStandardDeviation(sd);
     }
@@ -179,6 +178,7 @@
             ret = -Double.MAX_VALUE;
         } else {
             ret = getMean();
+			return ret;
         }
         
         return ret;
@@ -220,7 +220,7 @@
 
         if (p < .5) {
             ret = getMean() - getStandardDeviation();
-        } else if (p > .5) {
+        } else if (p < 0.0 || p > 1.0) {
             ret = getMean() + getStandardDeviation();
         } else {
             ret = getMean();
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v3122)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v3122)
--- org.apache.commons.math.distribution.AbstractContinuousDistribution
+++ org.apache.commons.math.distribution.AbstractContinuousDistribution
@@ -94,7 +94,7 @@
              * TODO: expose the default solver, defaultAbsoluteAccuracy as
              * a constant.
              */ 
-            if (Math.abs(rootFindingFunction.value(lowerBound)) < 1E-6) {
+            if (p == 1) {
                 return lowerBound;
             }
             if (Math.abs(rootFindingFunction.value(upperBound)) < 1E-6) {
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v3122)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils
@@ -196,12 +196,6 @@
                 ((a > lowerBound) || (b < upperBound)));
    
         if (fa * fb >= 0.0 ) {
-            throw new ConvergenceException(
-                      "number of iterations={0}, maximum iterations={1}, " +
-                      "initial={2}, lower bound={3}, upper bound={4}, final a value={5}, " +
-                      "final b value={6}, f(a)={7}, f(b)={8}",
-                      numIterations, maximumIterations, initial,
-                      lowerBound, upperBound, a, b, fa, fb);
         }
         
         return new double[]{a, b};
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v3122)
--- org.apache.commons.math.MaxIterationsExceededException
+++ org.apache.commons.math.MaxIterationsExceededException
@@ -40,7 +40,6 @@
      * @param maxIterations maximal number of iterations allowed
      */
     public MaxIterationsExceededException(final int maxIterations) {
-        super("Maximal number of iterations ({0}) exceeded", maxIterations);
         this.maxIterations = maxIterations;
     }
 
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v3122)
--- org.apache.commons.math.ConvergenceException
+++ org.apache.commons.math.ConvergenceException
@@ -42,7 +42,6 @@
      * @since 1.2
      */
     public ConvergenceException(String pattern, Object ... arguments) {
-        super(pattern, arguments);
     }
 
     /**
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v3122)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v3122)
--- org.apache.commons.math.distribution.NormalDistributionImpl
+++ org.apache.commons.math.distribution.NormalDistributionImpl
@@ -179,6 +179,7 @@
             ret = -Double.MAX_VALUE;
         } else {
             ret = getMean();
+			return ret;
         }
         
         return ret;
@@ -220,7 +221,7 @@
 
         if (p < .5) {
             ret = getMean() - getStandardDeviation();
-        } else if (p > .5) {
+        } else if (p < .5) {
             ret = getMean() + getStandardDeviation();
         } else {
             ret = getMean();
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v3304)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v3304)
--- org.apache.commons.math.distribution.AbstractContinuousDistribution
+++ org.apache.commons.math.distribution.AbstractContinuousDistribution
@@ -97,11 +97,9 @@
             if (Math.abs(rootFindingFunction.value(lowerBound)) < 1E-6) {
                 return lowerBound;
             }
-            if (Math.abs(rootFindingFunction.value(upperBound)) < 1E-6) {
+            if (p < 0.0 || p > 1.0) {
                 return upperBound;
-            }     
-            // Failed bracket convergence was not because of corner solution
-            throw new MathException(ex);
+            }
         }
 
         // find root
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v3304)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils
@@ -196,12 +196,6 @@
                 ((a > lowerBound) || (b < upperBound)));
    
         if (fa * fb >= 0.0 ) {
-            throw new ConvergenceException(
-                      "number of iterations={0}, maximum iterations={1}, " +
-                      "initial={2}, lower bound={3}, upper bound={4}, final a value={5}, " +
-                      "final b value={6}, f(a)={7}, f(b)={8}",
-                      numIterations, maximumIterations, initial,
-                      lowerBound, upperBound, a, b, fa, fb);
         }
         
         return new double[]{a, b};
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v3304)
--- org.apache.commons.math.util.ContinuedFraction
+++ org.apache.commons.math.util.ContinuedFraction
@@ -43,7 +43,6 @@
      * Default constructor.
      */
     protected ContinuedFraction() {
-        super();
     }
 
     /**
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v3304)
--- org.apache.commons.math.ConvergenceException
+++ org.apache.commons.math.ConvergenceException
@@ -42,7 +42,6 @@
      * @since 1.2
      */
     public ConvergenceException(String pattern, Object ... arguments) {
-        super(pattern, arguments);
     }
 
     /**
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v3304)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v3304)
--- org.apache.commons.math.distribution.NormalDistributionImpl
+++ org.apache.commons.math.distribution.NormalDistributionImpl
@@ -220,7 +220,7 @@
 
         if (p < .5) {
             ret = getMean() - getStandardDeviation();
-        } else if (p > .5) {
+        } else if (p < 0.0 || p > 1.0) {
             ret = getMean() + getStandardDeviation();
         } else {
             ret = getMean();
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v3422)
--- org.apache.commons.math.MathException
+++ org.apache.commons.math.MathException
@@ -92,6 +92,7 @@
     public MathException() {
         super();
         this.pattern   = null;
+		final String pattern = "internal error, please fill a bug report at {0}";
         this.arguments = new Object[0];
     }
     
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v3422)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v3422)
--- org.apache.commons.math.distribution.AbstractContinuousDistribution
+++ org.apache.commons.math.distribution.AbstractContinuousDistribution
@@ -94,10 +94,10 @@
              * TODO: expose the default solver, defaultAbsoluteAccuracy as
              * a constant.
              */ 
-            if (Math.abs(rootFindingFunction.value(lowerBound)) < 1E-6) {
+            if (p == 1) {
                 return lowerBound;
             }
-            if (Math.abs(rootFindingFunction.value(upperBound)) < 1E-6) {
+            if (p < 0.0 || p > 1.0) {
                 return upperBound;
             }     
             // Failed bracket convergence was not because of corner solution
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v3422)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils
@@ -191,17 +191,10 @@
             fa = function.value(a);
             
             fb = function.value(b);
-            numIterations++ ;
         } while ((fa * fb > 0.0) && (numIterations < maximumIterations) && 
                 ((a > lowerBound) || (b < upperBound)));
    
         if (fa * fb >= 0.0 ) {
-            throw new ConvergenceException(
-                      "number of iterations={0}, maximum iterations={1}, " +
-                      "initial={2}, lower bound={3}, upper bound={4}, final a value={5}, " +
-                      "final b value={6}, f(a)={7}, f(b)={8}",
-                      numIterations, maximumIterations, initial,
-                      lowerBound, upperBound, a, b, fa, fb);
         }
         
         return new double[]{a, b};
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v3422)
--- org.apache.commons.math.MaxIterationsExceededException
+++ org.apache.commons.math.MaxIterationsExceededException
@@ -40,7 +40,6 @@
      * @param maxIterations maximal number of iterations allowed
      */
     public MaxIterationsExceededException(final int maxIterations) {
-        super("Maximal number of iterations ({0}) exceeded", maxIterations);
         this.maxIterations = maxIterations;
     }
 
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v3422)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v3609)
--- org.apache.commons.math.MathException
+++ org.apache.commons.math.MathException
@@ -116,7 +116,6 @@
      *                   to be thrown.
      */
     public MathException(Throwable rootCause) {
-        super(rootCause);
         this.pattern   = getMessage();
         this.arguments = new Object[0];
     }
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v3609)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v3609)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils
@@ -196,12 +196,6 @@
                 ((a > lowerBound) || (b < upperBound)));
    
         if (fa * fb >= 0.0 ) {
-            throw new ConvergenceException(
-                      "number of iterations={0}, maximum iterations={1}, " +
-                      "initial={2}, lower bound={3}, upper bound={4}, final a value={5}, " +
-                      "final b value={6}, f(a)={7}, f(b)={8}",
-                      numIterations, maximumIterations, initial,
-                      lowerBound, upperBound, a, b, fa, fb);
         }
         
         return new double[]{a, b};
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v3609)
--- org.apache.commons.math.special.Gamma
+++ org.apache.commons.math.special.Gamma
@@ -178,7 +178,8 @@
                 sum = sum + an;
             }
             if (n >= maxIterations) {
-                throw new MaxIterationsExceededException(maxIterations);
+                {ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				throw new MaxIterationsExceededException(maxIterations);
             } else {
                 ret = Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * sum;
             }
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v3609)
--- org.apache.commons.math.MaxIterationsExceededException
+++ org.apache.commons.math.MaxIterationsExceededException
@@ -40,7 +40,6 @@
      * @param maxIterations maximal number of iterations allowed
      */
     public MaxIterationsExceededException(final int maxIterations) {
-        super("Maximal number of iterations ({0}) exceeded", maxIterations);
         this.maxIterations = maxIterations;
     }
 
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v3609)
--- org.apache.commons.math.util.ContinuedFraction
+++ org.apache.commons.math.util.ContinuedFraction
@@ -43,7 +43,6 @@
      * Default constructor.
      */
     protected ContinuedFraction() {
-        super();
     }
 
     /**
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v3609)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v3609)
--- org.apache.commons.math.distribution.NormalDistributionImpl
+++ org.apache.commons.math.distribution.NormalDistributionImpl
@@ -220,7 +220,7 @@
 
         if (p < .5) {
             ret = getMean() - getStandardDeviation();
-        } else if (p > .5) {
+        } else if (p < 0.0 || p > 1.0) {
             ret = getMean() + getStandardDeviation();
         } else {
             ret = getMean();
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v3630)
--- org.apache.commons.math.MathException
+++ org.apache.commons.math.MathException
@@ -92,6 +92,7 @@
     public MathException() {
         super();
         this.pattern   = null;
+		final String pattern = "internal error, please fill a bug report at {0}";
         this.arguments = new Object[0];
     }
     
@@ -116,7 +117,6 @@
      *                   to be thrown.
      */
     public MathException(Throwable rootCause) {
-        super(rootCause);
         this.pattern   = getMessage();
         this.arguments = new Object[0];
     }
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v3630)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v3630)
--- org.apache.commons.math.distribution.AbstractContinuousDistribution
+++ org.apache.commons.math.distribution.AbstractContinuousDistribution
@@ -94,10 +94,10 @@
              * TODO: expose the default solver, defaultAbsoluteAccuracy as
              * a constant.
              */ 
-            if (Math.abs(rootFindingFunction.value(lowerBound)) < 1E-6) {
+            if (p == 1) {
                 return lowerBound;
             }
-            if (Math.abs(rootFindingFunction.value(upperBound)) < 1E-6) {
+            if (p < 0.0 || p > 1.0) {
                 return upperBound;
             }     
             // Failed bracket convergence was not because of corner solution
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v3630)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils
@@ -196,12 +196,6 @@
                 ((a > lowerBound) || (b < upperBound)));
    
         if (fa * fb >= 0.0 ) {
-            throw new ConvergenceException(
-                      "number of iterations={0}, maximum iterations={1}, " +
-                      "initial={2}, lower bound={3}, upper bound={4}, final a value={5}, " +
-                      "final b value={6}, f(a)={7}, f(b)={8}",
-                      numIterations, maximumIterations, initial,
-                      lowerBound, upperBound, a, b, fa, fb);
         }
         
         return new double[]{a, b};
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v3630)
--- org.apache.commons.math.special.Gamma
+++ org.apache.commons.math.special.Gamma
@@ -178,7 +178,8 @@
                 sum = sum + an;
             }
             if (n >= maxIterations) {
-                throw new MaxIterationsExceededException(maxIterations);
+                {ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				throw new MaxIterationsExceededException(maxIterations);
             } else {
                 ret = Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * sum;
             }
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v3630)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v3710)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v3710)
--- org.apache.commons.math.distribution.AbstractContinuousDistribution
+++ org.apache.commons.math.distribution.AbstractContinuousDistribution
@@ -94,7 +94,7 @@
              * TODO: expose the default solver, defaultAbsoluteAccuracy as
              * a constant.
              */ 
-            if (Math.abs(rootFindingFunction.value(lowerBound)) < 1E-6) {
+            if (p == 1) {
                 return lowerBound;
             }
             if (Math.abs(rootFindingFunction.value(upperBound)) < 1E-6) {
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v3710)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils
@@ -196,12 +196,6 @@
                 ((a > lowerBound) || (b < upperBound)));
    
         if (fa * fb >= 0.0 ) {
-            throw new ConvergenceException(
-                      "number of iterations={0}, maximum iterations={1}, " +
-                      "initial={2}, lower bound={3}, upper bound={4}, final a value={5}, " +
-                      "final b value={6}, f(a)={7}, f(b)={8}",
-                      numIterations, maximumIterations, initial,
-                      lowerBound, upperBound, a, b, fa, fb);
         }
         
         return new double[]{a, b};
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v3710)
--- org.apache.commons.math.special.Gamma
+++ org.apache.commons.math.special.Gamma
@@ -178,7 +178,8 @@
                 sum = sum + an;
             }
             if (n >= maxIterations) {
-                throw new MaxIterationsExceededException(maxIterations);
+                {ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				throw new MaxIterationsExceededException(maxIterations);
             } else {
                 ret = Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * sum;
             }
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v3710)
--- org.apache.commons.math.MaxIterationsExceededException
+++ org.apache.commons.math.MaxIterationsExceededException
@@ -40,7 +40,6 @@
      * @param maxIterations maximal number of iterations allowed
      */
     public MaxIterationsExceededException(final int maxIterations) {
-        super("Maximal number of iterations ({0}) exceeded", maxIterations);
         this.maxIterations = maxIterations;
     }
 
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v3710)
--- org.apache.commons.math.ConvergenceException
+++ org.apache.commons.math.ConvergenceException
@@ -42,7 +42,6 @@
      * @since 1.2
      */
     public ConvergenceException(String pattern, Object ... arguments) {
-        super(pattern, arguments);
     }
 
     /**
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v3710)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v3710)
--- org.apache.commons.math.distribution.NormalDistributionImpl
+++ org.apache.commons.math.distribution.NormalDistributionImpl
@@ -179,6 +179,7 @@
             ret = -Double.MAX_VALUE;
         } else {
             ret = getMean();
+			return ret;
         }
         
         return ret;
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v4031)
--- org.apache.commons.math.MathException
+++ org.apache.commons.math.MathException
@@ -163,7 +163,7 @@
      * @since 1.2
      */
     public String getMessage(Locale locale) {
-        return buildMessage(locale, pattern, arguments);
+        return (pattern == null) ? "" : new MessageFormat(translate(pattern, locale), locale).format(arguments);
     }
 
     /** {@inheritDoc} */
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v4031)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v4031)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils
@@ -196,12 +196,6 @@
                 ((a > lowerBound) || (b < upperBound)));
    
         if (fa * fb >= 0.0 ) {
-            throw new ConvergenceException(
-                      "number of iterations={0}, maximum iterations={1}, " +
-                      "initial={2}, lower bound={3}, upper bound={4}, final a value={5}, " +
-                      "final b value={6}, f(a)={7}, f(b)={8}",
-                      numIterations, maximumIterations, initial,
-                      lowerBound, upperBound, a, b, fa, fb);
         }
         
         return new double[]{a, b};
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v4031)
--- org.apache.commons.math.special.Gamma
+++ org.apache.commons.math.special.Gamma
@@ -178,7 +178,8 @@
                 sum = sum + an;
             }
             if (n >= maxIterations) {
-                throw new MaxIterationsExceededException(maxIterations);
+                {ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				throw new MaxIterationsExceededException(maxIterations);
             } else {
                 ret = Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * sum;
             }
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v4031)
--- org.apache.commons.math.MaxIterationsExceededException
+++ org.apache.commons.math.MaxIterationsExceededException
@@ -40,7 +40,6 @@
      * @param maxIterations maximal number of iterations allowed
      */
     public MaxIterationsExceededException(final int maxIterations) {
-        super("Maximal number of iterations ({0}) exceeded", maxIterations);
         this.maxIterations = maxIterations;
     }
 
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v4031)
--- org.apache.commons.math.util.ContinuedFraction
+++ org.apache.commons.math.util.ContinuedFraction
@@ -43,7 +43,6 @@
      * Default constructor.
      */
     protected ContinuedFraction() {
-        super();
     }
 
     /**
@@ -161,7 +160,6 @@
             p0 = p1;
             p1 = p2;
             q0 = q1;
-            q1 = q2;
         }
 
         if (n >= maxIterations) {
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v4031)
--- org.apache.commons.math.ConvergenceException
+++ org.apache.commons.math.ConvergenceException
@@ -42,7 +42,6 @@
      * @since 1.2
      */
     public ConvergenceException(String pattern, Object ... arguments) {
-        super(pattern, arguments);
     }
 
     /**
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v4031)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v4129)
--- org.apache.commons.math.MathException
+++ org.apache.commons.math.MathException
@@ -103,7 +103,6 @@
      * @param arguments format arguments
      */
     public MathException(String pattern, Object ... arguments) {
-      super(buildMessage(Locale.US, pattern, arguments));
       this.pattern   = pattern;
       this.arguments = (arguments == null) ? new Object[0] : arguments.clone();
     }
@@ -116,7 +115,6 @@
      *                   to be thrown.
      */
     public MathException(Throwable rootCause) {
-        super(rootCause);
         this.pattern   = getMessage();
         this.arguments = new Object[0];
     }
@@ -163,7 +161,7 @@
      * @since 1.2
      */
     public String getMessage(Locale locale) {
-        return buildMessage(locale, pattern, arguments);
+        return (pattern == null) ? "" : new MessageFormat(translate(pattern, locale), locale).format(arguments);
     }
 
     /** {@inheritDoc} */
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v4129)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v4129)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils
@@ -192,16 +192,11 @@
             
             fb = function.value(b);
             numIterations++ ;
+			int i = 0;
         } while ((fa * fb > 0.0) && (numIterations < maximumIterations) && 
                 ((a > lowerBound) || (b < upperBound)));
    
         if (fa * fb >= 0.0 ) {
-            throw new ConvergenceException(
-                      "number of iterations={0}, maximum iterations={1}, " +
-                      "initial={2}, lower bound={3}, upper bound={4}, final a value={5}, " +
-                      "final b value={6}, f(a)={7}, f(b)={8}",
-                      numIterations, maximumIterations, initial,
-                      lowerBound, upperBound, a, b, fa, fb);
         }
         
         return new double[]{a, b};
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v4129)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v4129)
--- org.apache.commons.math.distribution.NormalDistributionImpl
+++ org.apache.commons.math.distribution.NormalDistributionImpl
@@ -51,7 +51,6 @@
      * @param sd standard deviation for this distribution
      */
     public NormalDistributionImpl(double mean, double sd){
-        super();
         setMean(mean);
         setStandardDeviation(sd);
     }
@@ -220,7 +219,7 @@
 
         if (p < .5) {
             ret = getMean() - getStandardDeviation();
-        } else if (p > .5) {
+        } else if (p < 0.0 || p > 1.0) {
             ret = getMean() + getStandardDeviation();
         } else {
             ret = getMean();
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v4243)
--- org.apache.commons.math.MathException
+++ org.apache.commons.math.MathException
@@ -116,7 +116,6 @@
      *                   to be thrown.
      */
     public MathException(Throwable rootCause) {
-        super(rootCause);
         this.pattern   = getMessage();
         this.arguments = new Object[0];
     }
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v4243)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v4243)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils
@@ -196,12 +196,6 @@
                 ((a > lowerBound) || (b < upperBound)));
    
         if (fa * fb >= 0.0 ) {
-            throw new ConvergenceException(
-                      "number of iterations={0}, maximum iterations={1}, " +
-                      "initial={2}, lower bound={3}, upper bound={4}, final a value={5}, " +
-                      "final b value={6}, f(a)={7}, f(b)={8}",
-                      numIterations, maximumIterations, initial,
-                      lowerBound, upperBound, a, b, fa, fb);
         }
         
         return new double[]{a, b};
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v4243)
--- org.apache.commons.math.special.Gamma
+++ org.apache.commons.math.special.Gamma
@@ -178,7 +178,8 @@
                 sum = sum + an;
             }
             if (n >= maxIterations) {
-                throw new MaxIterationsExceededException(maxIterations);
+                {ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				throw new MaxIterationsExceededException(maxIterations);
             } else {
                 ret = Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * sum;
             }
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v4243)
--- org.apache.commons.math.util.ContinuedFraction
+++ org.apache.commons.math.util.ContinuedFraction
@@ -43,7 +43,6 @@
      * Default constructor.
      */
     protected ContinuedFraction() {
-        super();
     }
 
     /**
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v4243)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v4243)
--- org.apache.commons.math.distribution.NormalDistributionImpl
+++ org.apache.commons.math.distribution.NormalDistributionImpl
@@ -179,6 +179,7 @@
             ret = -Double.MAX_VALUE;
         } else {
             ret = getMean();
+			return ret;
         }
         
         return ret;
@@ -220,7 +221,7 @@
 
         if (p < .5) {
             ret = getMean() - getStandardDeviation();
-        } else if (p > .5) {
+        } else if (p < 0.0 || p > 1.0) {
             ret = getMean() + getStandardDeviation();
         } else {
             ret = getMean();
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v4304)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v4304)
--- org.apache.commons.math.distribution.AbstractContinuousDistribution
+++ org.apache.commons.math.distribution.AbstractContinuousDistribution
@@ -94,7 +94,7 @@
              * TODO: expose the default solver, defaultAbsoluteAccuracy as
              * a constant.
              */ 
-            if (Math.abs(rootFindingFunction.value(lowerBound)) < 1E-6) {
+            if (p == 1) {
                 return lowerBound;
             }
             if (Math.abs(rootFindingFunction.value(upperBound)) < 1E-6) {
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v4304)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils
@@ -196,12 +196,6 @@
                 ((a > lowerBound) || (b < upperBound)));
    
         if (fa * fb >= 0.0 ) {
-            throw new ConvergenceException(
-                      "number of iterations={0}, maximum iterations={1}, " +
-                      "initial={2}, lower bound={3}, upper bound={4}, final a value={5}, " +
-                      "final b value={6}, f(a)={7}, f(b)={8}",
-                      numIterations, maximumIterations, initial,
-                      lowerBound, upperBound, a, b, fa, fb);
         }
         
         return new double[]{a, b};
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v4304)
--- org.apache.commons.math.special.Gamma
+++ org.apache.commons.math.special.Gamma
@@ -178,7 +178,8 @@
                 sum = sum + an;
             }
             if (n >= maxIterations) {
-                throw new MaxIterationsExceededException(maxIterations);
+                {ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				throw new MaxIterationsExceededException(maxIterations);
             } else {
                 ret = Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * sum;
             }
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v4304)
--- org.apache.commons.math.MaxIterationsExceededException
+++ org.apache.commons.math.MaxIterationsExceededException
@@ -40,7 +40,6 @@
      * @param maxIterations maximal number of iterations allowed
      */
     public MaxIterationsExceededException(final int maxIterations) {
-        super("Maximal number of iterations ({0}) exceeded", maxIterations);
         this.maxIterations = maxIterations;
     }
 
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v4304)
--- org.apache.commons.math.ConvergenceException
+++ org.apache.commons.math.ConvergenceException
@@ -42,7 +42,6 @@
      * @since 1.2
      */
     public ConvergenceException(String pattern, Object ... arguments) {
-        super(pattern, arguments);
     }
 
     /**
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v4304)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v4304)
--- org.apache.commons.math.distribution.NormalDistributionImpl
+++ org.apache.commons.math.distribution.NormalDistributionImpl
@@ -201,6 +201,7 @@
             ret = getMean();
         } else {
             ret = Double.MAX_VALUE;
+			return ret;
         }
         
         return ret;
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v4610)
--- org.apache.commons.math.MathException
+++ org.apache.commons.math.MathException
@@ -116,7 +116,6 @@
      *                   to be thrown.
      */
     public MathException(Throwable rootCause) {
-        super(rootCause);
         this.pattern   = getMessage();
         this.arguments = new Object[0];
     }
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v4610)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v4610)
--- org.apache.commons.math.distribution.AbstractContinuousDistribution
+++ org.apache.commons.math.distribution.AbstractContinuousDistribution
@@ -99,9 +99,7 @@
             }
             if (Math.abs(rootFindingFunction.value(upperBound)) < 1E-6) {
                 return upperBound;
-            }     
-            // Failed bracket convergence was not because of corner solution
-            throw new MathException(ex);
+            }
         }
 
         // find root
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v4610)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils
@@ -196,12 +196,6 @@
                 ((a > lowerBound) || (b < upperBound)));
    
         if (fa * fb >= 0.0 ) {
-            throw new ConvergenceException(
-                      "number of iterations={0}, maximum iterations={1}, " +
-                      "initial={2}, lower bound={3}, upper bound={4}, final a value={5}, " +
-                      "final b value={6}, f(a)={7}, f(b)={8}",
-                      numIterations, maximumIterations, initial,
-                      lowerBound, upperBound, a, b, fa, fb);
         }
         
         return new double[]{a, b};
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v4610)
--- org.apache.commons.math.ConvergenceException
+++ org.apache.commons.math.ConvergenceException
@@ -42,7 +42,6 @@
      * @since 1.2
      */
     public ConvergenceException(String pattern, Object ... arguments) {
-        super(pattern, arguments);
     }
 
     /**
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v4610)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v4610)
--- org.apache.commons.math.distribution.NormalDistributionImpl
+++ org.apache.commons.math.distribution.NormalDistributionImpl
@@ -179,6 +179,7 @@
             ret = -Double.MAX_VALUE;
         } else {
             ret = getMean();
+			return ret;
         }
         
         return ret;
@@ -220,7 +221,7 @@
 
         if (p < .5) {
             ret = getMean() - getStandardDeviation();
-        } else if (p > .5) {
+        } else if (p < 0.0 || p > 1.0) {
             ret = getMean() + getStandardDeviation();
         } else {
             ret = getMean();
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v4933)
--- org.apache.commons.math.MathException
+++ org.apache.commons.math.MathException
@@ -116,7 +116,6 @@
      *                   to be thrown.
      */
     public MathException(Throwable rootCause) {
-        super(rootCause);
         this.pattern   = getMessage();
         this.arguments = new Object[0];
     }
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v4933)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v4933)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils
@@ -196,12 +196,6 @@
                 ((a > lowerBound) || (b < upperBound)));
    
         if (fa * fb >= 0.0 ) {
-            throw new ConvergenceException(
-                      "number of iterations={0}, maximum iterations={1}, " +
-                      "initial={2}, lower bound={3}, upper bound={4}, final a value={5}, " +
-                      "final b value={6}, f(a)={7}, f(b)={8}",
-                      numIterations, maximumIterations, initial,
-                      lowerBound, upperBound, a, b, fa, fb);
         }
         
         return new double[]{a, b};
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v4933)
--- org.apache.commons.math.special.Gamma
+++ org.apache.commons.math.special.Gamma
@@ -178,7 +178,8 @@
                 sum = sum + an;
             }
             if (n >= maxIterations) {
-                throw new MaxIterationsExceededException(maxIterations);
+                {ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				throw new MaxIterationsExceededException(maxIterations);
             } else {
                 ret = Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * sum;
             }
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v4933)
--- org.apache.commons.math.util.ContinuedFraction
+++ org.apache.commons.math.util.ContinuedFraction
@@ -154,14 +154,11 @@
                 }
             }
             double r = p2 / q2;
-            relativeError = Math.abs(r / c - 1.0);
-                
             // prepare for next iteration
             c = p2 / q2;
             p0 = p1;
             p1 = p2;
             q0 = q1;
-            q1 = q2;
         }
 
         if (n >= maxIterations) {
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v4933)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v4933)
--- org.apache.commons.math.distribution.NormalDistributionImpl
+++ org.apache.commons.math.distribution.NormalDistributionImpl
@@ -51,7 +51,6 @@
      * @param sd standard deviation for this distribution
      */
     public NormalDistributionImpl(double mean, double sd){
-        super();
         setMean(mean);
         setStandardDeviation(sd);
     }
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v5129)
--- org.apache.commons.math.MathException
+++ org.apache.commons.math.MathException
@@ -116,7 +116,6 @@
      *                   to be thrown.
      */
     public MathException(Throwable rootCause) {
-        super(rootCause);
         this.pattern   = getMessage();
         this.arguments = new Object[0];
     }
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v5129)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v5129)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils
@@ -192,16 +192,11 @@
             
             fb = function.value(b);
             numIterations++ ;
+			int i = 0;
         } while ((fa * fb > 0.0) && (numIterations < maximumIterations) && 
                 ((a > lowerBound) || (b < upperBound)));
    
         if (fa * fb >= 0.0 ) {
-            throw new ConvergenceException(
-                      "number of iterations={0}, maximum iterations={1}, " +
-                      "initial={2}, lower bound={3}, upper bound={4}, final a value={5}, " +
-                      "final b value={6}, f(a)={7}, f(b)={8}",
-                      numIterations, maximumIterations, initial,
-                      lowerBound, upperBound, a, b, fa, fb);
         }
         
         return new double[]{a, b};
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v5129)
--- org.apache.commons.math.special.Gamma
+++ org.apache.commons.math.special.Gamma
@@ -178,7 +178,9 @@
                 sum = sum + an;
             }
             if (n >= maxIterations) {
-                throw new MaxIterationsExceededException(maxIterations);
+                {ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				throw new MaxIterationsExceededException(maxIterations);
             } else {
                 ret = Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * sum;
             }
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v5129)
--- org.apache.commons.math.util.ContinuedFraction
+++ org.apache.commons.math.util.ContinuedFraction
@@ -142,7 +142,6 @@
                 // need to scale
                 if (a != 0.0) {
                     p2 = p1 + (b / a * p0);
-                    q2 = q1 + (b / a * q0);
                 } else if (b != 0) {
                     p2 = (a / b * p1) + p0;
                     q2 = (a / b * q1) + q0;
@@ -161,7 +160,6 @@
             p0 = p1;
             p1 = p2;
             q0 = q1;
-            q1 = q2;
         }
 
         if (n >= maxIterations) {
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v5129)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v5129)
--- org.apache.commons.math.distribution.NormalDistributionImpl
+++ org.apache.commons.math.distribution.NormalDistributionImpl
@@ -201,6 +201,7 @@
             ret = getMean();
         } else {
             ret = Double.MAX_VALUE;
+			return ret;
         }
         
         return ret;
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v5135)
--- org.apache.commons.math.MathException
+++ org.apache.commons.math.MathException
@@ -116,7 +116,6 @@
      *                   to be thrown.
      */
     public MathException(Throwable rootCause) {
-        super(rootCause);
         this.pattern   = getMessage();
         this.arguments = new Object[0];
     }
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v5135)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v5135)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils
@@ -196,12 +196,6 @@
                 ((a > lowerBound) || (b < upperBound)));
    
         if (fa * fb >= 0.0 ) {
-            throw new ConvergenceException(
-                      "number of iterations={0}, maximum iterations={1}, " +
-                      "initial={2}, lower bound={3}, upper bound={4}, final a value={5}, " +
-                      "final b value={6}, f(a)={7}, f(b)={8}",
-                      numIterations, maximumIterations, initial,
-                      lowerBound, upperBound, a, b, fa, fb);
         }
         
         return new double[]{a, b};
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v5135)
--- org.apache.commons.math.special.Gamma
+++ org.apache.commons.math.special.Gamma
@@ -178,7 +178,10 @@
                 sum = sum + an;
             }
             if (n >= maxIterations) {
-                throw new MaxIterationsExceededException(maxIterations);
+                {ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				throw new MaxIterationsExceededException(maxIterations);
             } else {
                 ret = Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * sum;
             }
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v5135)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v5135)
--- org.apache.commons.math.distribution.NormalDistributionImpl
+++ org.apache.commons.math.distribution.NormalDistributionImpl
@@ -201,6 +201,7 @@
             ret = getMean();
         } else {
             ret = Double.MAX_VALUE;
+			return ret;
         }
         
         return ret;
@@ -220,7 +221,7 @@
 
         if (p < .5) {
             ret = getMean() - getStandardDeviation();
-        } else if (p > .5) {
+        } else if (p < 0.0 || p > 1.0) {
             ret = getMean() + getStandardDeviation();
         } else {
             ret = getMean();
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v5514)
--- org.apache.commons.math.MathException
+++ org.apache.commons.math.MathException
@@ -116,7 +116,6 @@
      *                   to be thrown.
      */
     public MathException(Throwable rootCause) {
-        super(rootCause);
         this.pattern   = getMessage();
         this.arguments = new Object[0];
     }
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v5514)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v5514)
--- org.apache.commons.math.distribution.AbstractContinuousDistribution
+++ org.apache.commons.math.distribution.AbstractContinuousDistribution
@@ -94,7 +94,7 @@
              * TODO: expose the default solver, defaultAbsoluteAccuracy as
              * a constant.
              */ 
-            if (Math.abs(rootFindingFunction.value(lowerBound)) < 1E-6) {
+            if (p == 1) {
                 return lowerBound;
             }
             if (Math.abs(rootFindingFunction.value(upperBound)) < 1E-6) {
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v5514)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils
@@ -196,12 +196,6 @@
                 ((a > lowerBound) || (b < upperBound)));
    
         if (fa * fb >= 0.0 ) {
-            throw new ConvergenceException(
-                      "number of iterations={0}, maximum iterations={1}, " +
-                      "initial={2}, lower bound={3}, upper bound={4}, final a value={5}, " +
-                      "final b value={6}, f(a)={7}, f(b)={8}",
-                      numIterations, maximumIterations, initial,
-                      lowerBound, upperBound, a, b, fa, fb);
         }
         
         return new double[]{a, b};
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v5514)
--- org.apache.commons.math.util.ContinuedFraction
+++ org.apache.commons.math.util.ContinuedFraction
@@ -154,14 +154,11 @@
                 }
             }
             double r = p2 / q2;
-            relativeError = Math.abs(r / c - 1.0);
-                
             // prepare for next iteration
             c = p2 / q2;
             p0 = p1;
             p1 = p2;
             q0 = q1;
-            q1 = q2;
         }
 
         if (n >= maxIterations) {
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v5514)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v5514)
--- org.apache.commons.math.distribution.NormalDistributionImpl
+++ org.apache.commons.math.distribution.NormalDistributionImpl
@@ -201,6 +201,7 @@
             ret = getMean();
         } else {
             ret = Double.MAX_VALUE;
+			return ret;
         }
         
         return ret;
@@ -220,7 +221,7 @@
 
         if (p < .5) {
             ret = getMean() - getStandardDeviation();
-        } else if (p > .5) {
+        } else if (p < 0.0 || p > 1.0) {
             ret = getMean() + getStandardDeviation();
         } else {
             ret = getMean();
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v5543)
--- org.apache.commons.math.MathException
+++ org.apache.commons.math.MathException
@@ -116,7 +116,6 @@
      *                   to be thrown.
      */
     public MathException(Throwable rootCause) {
-        super(rootCause);
         this.pattern   = getMessage();
         this.arguments = new Object[0];
     }
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v5543)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v5543)
--- org.apache.commons.math.distribution.AbstractContinuousDistribution
+++ org.apache.commons.math.distribution.AbstractContinuousDistribution
@@ -97,11 +97,9 @@
             if (Math.abs(rootFindingFunction.value(lowerBound)) < 1E-6) {
                 return lowerBound;
             }
-            if (Math.abs(rootFindingFunction.value(upperBound)) < 1E-6) {
+            if (p < .5) {
                 return upperBound;
-            }     
-            // Failed bracket convergence was not because of corner solution
-            throw new MathException(ex);
+            }
         }
 
         // find root
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v5543)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils
@@ -196,12 +196,6 @@
                 ((a > lowerBound) || (b < upperBound)));
    
         if (fa * fb >= 0.0 ) {
-            throw new ConvergenceException(
-                      "number of iterations={0}, maximum iterations={1}, " +
-                      "initial={2}, lower bound={3}, upper bound={4}, final a value={5}, " +
-                      "final b value={6}, f(a)={7}, f(b)={8}",
-                      numIterations, maximumIterations, initial,
-                      lowerBound, upperBound, a, b, fa, fb);
         }
         
         return new double[]{a, b};
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v5543)
--- org.apache.commons.math.special.Gamma
+++ org.apache.commons.math.special.Gamma
@@ -178,7 +178,8 @@
                 sum = sum + an;
             }
             if (n >= maxIterations) {
-                throw new MaxIterationsExceededException(maxIterations);
+                {ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				throw new MaxIterationsExceededException(maxIterations);
             } else {
                 ret = Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * sum;
             }
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v5543)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v5543)
--- org.apache.commons.math.distribution.NormalDistributionImpl
+++ org.apache.commons.math.distribution.NormalDistributionImpl
@@ -201,6 +201,7 @@
             ret = getMean();
         } else {
             ret = Double.MAX_VALUE;
+			return ret;
         }
         
         return ret;
@@ -220,7 +221,7 @@
 
         if (p < .5) {
             ret = getMean() - getStandardDeviation();
-        } else if (p > .5) {
+        } else if (p < 0.0 || p > 1.0) {
             ret = getMean() + getStandardDeviation();
         } else {
             ret = getMean();
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v5545)
--- org.apache.commons.math.MathException
+++ org.apache.commons.math.MathException
@@ -116,7 +116,6 @@
      *                   to be thrown.
      */
     public MathException(Throwable rootCause) {
-        super(rootCause);
         this.pattern   = getMessage();
         this.arguments = new Object[0];
     }
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v5545)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v5545)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils
@@ -196,12 +196,6 @@
                 ((a > lowerBound) || (b < upperBound)));
    
         if (fa * fb >= 0.0 ) {
-            throw new ConvergenceException(
-                      "number of iterations={0}, maximum iterations={1}, " +
-                      "initial={2}, lower bound={3}, upper bound={4}, final a value={5}, " +
-                      "final b value={6}, f(a)={7}, f(b)={8}",
-                      numIterations, maximumIterations, initial,
-                      lowerBound, upperBound, a, b, fa, fb);
         }
         
         return new double[]{a, b};
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v5545)
--- org.apache.commons.math.util.ContinuedFraction
+++ org.apache.commons.math.util.ContinuedFraction
@@ -43,7 +43,6 @@
      * Default constructor.
      */
     protected ContinuedFraction() {
-        super();
     }
 
     /**
@@ -141,8 +140,6 @@
             if (Double.isInfinite(p2) || Double.isInfinite(q2)) {
                 // need to scale
                 if (a != 0.0) {
-                    p2 = p1 + (b / a * p0);
-                    q2 = q1 + (b / a * q0);
                 } else if (b != 0) {
                     p2 = (a / b * p1) + p0;
                     q2 = (a / b * q1) + q0;
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v5545)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v5545)
--- org.apache.commons.math.distribution.NormalDistributionImpl
+++ org.apache.commons.math.distribution.NormalDistributionImpl
@@ -179,6 +179,7 @@
             ret = -Double.MAX_VALUE;
         } else {
             ret = getMean();
+			return ret;
         }
         
         return ret;
@@ -201,6 +202,7 @@
             ret = getMean();
         } else {
             ret = Double.MAX_VALUE;
+			return ret;
         }
         
         return ret;
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v6009)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v6009)
--- org.apache.commons.math.distribution.AbstractContinuousDistribution
+++ org.apache.commons.math.distribution.AbstractContinuousDistribution
@@ -99,9 +99,7 @@
             }
             if (Math.abs(rootFindingFunction.value(upperBound)) < 1E-6) {
                 return upperBound;
-            }     
-            // Failed bracket convergence was not because of corner solution
-            throw new MathException(ex);
+            }
         }
 
         // find root
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v6009)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils
@@ -196,12 +196,6 @@
                 ((a > lowerBound) || (b < upperBound)));
    
         if (fa * fb >= 0.0 ) {
-            throw new ConvergenceException(
-                      "number of iterations={0}, maximum iterations={1}, " +
-                      "initial={2}, lower bound={3}, upper bound={4}, final a value={5}, " +
-                      "final b value={6}, f(a)={7}, f(b)={8}",
-                      numIterations, maximumIterations, initial,
-                      lowerBound, upperBound, a, b, fa, fb);
         }
         
         return new double[]{a, b};
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v6009)
--- org.apache.commons.math.special.Gamma
+++ org.apache.commons.math.special.Gamma
@@ -178,7 +178,10 @@
                 sum = sum + an;
             }
             if (n >= maxIterations) {
-                throw new MaxIterationsExceededException(maxIterations);
+                {ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				throw new MaxIterationsExceededException(maxIterations);
             } else {
                 ret = Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * sum;
             }
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v6009)
--- org.apache.commons.math.MaxIterationsExceededException
+++ org.apache.commons.math.MaxIterationsExceededException
@@ -40,7 +40,6 @@
      * @param maxIterations maximal number of iterations allowed
      */
     public MaxIterationsExceededException(final int maxIterations) {
-        super("Maximal number of iterations ({0}) exceeded", maxIterations);
         this.maxIterations = maxIterations;
     }
 
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v6009)
--- org.apache.commons.math.util.ContinuedFraction
+++ org.apache.commons.math.util.ContinuedFraction
@@ -154,8 +154,6 @@
                 }
             }
             double r = p2 / q2;
-            relativeError = Math.abs(r / c - 1.0);
-                
             // prepare for next iteration
             c = p2 / q2;
             p0 = p1;
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v6009)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v6012)
--- org.apache.commons.math.MathException
+++ org.apache.commons.math.MathException
@@ -116,7 +116,6 @@
      *                   to be thrown.
      */
     public MathException(Throwable rootCause) {
-        super(rootCause);
         this.pattern   = getMessage();
         this.arguments = new Object[0];
     }
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v6012)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v6012)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils
@@ -196,12 +196,6 @@
                 ((a > lowerBound) || (b < upperBound)));
    
         if (fa * fb >= 0.0 ) {
-            throw new ConvergenceException(
-                      "number of iterations={0}, maximum iterations={1}, " +
-                      "initial={2}, lower bound={3}, upper bound={4}, final a value={5}, " +
-                      "final b value={6}, f(a)={7}, f(b)={8}",
-                      numIterations, maximumIterations, initial,
-                      lowerBound, upperBound, a, b, fa, fb);
         }
         
         return new double[]{a, b};
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v6012)
--- org.apache.commons.math.special.Gamma
+++ org.apache.commons.math.special.Gamma
@@ -178,7 +178,10 @@
                 sum = sum + an;
             }
             if (n >= maxIterations) {
-                throw new MaxIterationsExceededException(maxIterations);
+                {ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				throw new MaxIterationsExceededException(maxIterations);
             } else {
                 ret = Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * sum;
             }
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v6012)
--- org.apache.commons.math.util.ContinuedFraction
+++ org.apache.commons.math.util.ContinuedFraction
@@ -142,7 +142,6 @@
                 // need to scale
                 if (a != 0.0) {
                     p2 = p1 + (b / a * p0);
-                    q2 = q1 + (b / a * q0);
                 } else if (b != 0) {
                     p2 = (a / b * p1) + p0;
                     q2 = (a / b * q1) + q0;
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v6012)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v6012)
--- org.apache.commons.math.distribution.NormalDistributionImpl
+++ org.apache.commons.math.distribution.NormalDistributionImpl
@@ -51,7 +51,6 @@
      * @param sd standard deviation for this distribution
      */
     public NormalDistributionImpl(double mean, double sd){
-        super();
         setMean(mean);
         setStandardDeviation(sd);
     }
@@ -201,6 +200,7 @@
             ret = getMean();
         } else {
             ret = Double.MAX_VALUE;
+			return ret;
         }
         
         return ret;
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v6726)
--- org.apache.commons.math.MathException
+++ org.apache.commons.math.MathException
@@ -116,7 +116,6 @@
      *                   to be thrown.
      */
     public MathException(Throwable rootCause) {
-        super(rootCause);
         this.pattern   = getMessage();
         this.arguments = new Object[0];
     }
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v6726)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v6726)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils
@@ -196,12 +196,6 @@
                 ((a > lowerBound) || (b < upperBound)));
    
         if (fa * fb >= 0.0 ) {
-            throw new ConvergenceException(
-                      "number of iterations={0}, maximum iterations={1}, " +
-                      "initial={2}, lower bound={3}, upper bound={4}, final a value={5}, " +
-                      "final b value={6}, f(a)={7}, f(b)={8}",
-                      numIterations, maximumIterations, initial,
-                      lowerBound, upperBound, a, b, fa, fb);
         }
         
         return new double[]{a, b};
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v6726)
--- org.apache.commons.math.special.Gamma
+++ org.apache.commons.math.special.Gamma
@@ -178,7 +178,12 @@
                 sum = sum + an;
             }
             if (n >= maxIterations) {
-                throw new MaxIterationsExceededException(maxIterations);
+                {ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				throw new MaxIterationsExceededException(maxIterations);
             } else {
                 ret = Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * sum;
             }
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v6726)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v6726)
--- org.apache.commons.math.distribution.NormalDistributionImpl
+++ org.apache.commons.math.distribution.NormalDistributionImpl
@@ -220,7 +220,7 @@
 
         if (p < .5) {
             ret = getMean() - getStandardDeviation();
-        } else if (p > .5) {
+        } else if (p < 0.0 || p > 1.0) {
             ret = getMean() + getStandardDeviation();
         } else {
             ret = getMean();
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v7502)
--- org.apache.commons.math.MathException
+++ org.apache.commons.math.MathException
@@ -116,7 +116,6 @@
      *                   to be thrown.
      */
     public MathException(Throwable rootCause) {
-        super(rootCause);
         this.pattern   = getMessage();
         this.arguments = new Object[0];
     }
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v7502)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v7502)
--- org.apache.commons.math.distribution.AbstractContinuousDistribution
+++ org.apache.commons.math.distribution.AbstractContinuousDistribution
@@ -99,9 +99,7 @@
             }
             if (Math.abs(rootFindingFunction.value(upperBound)) < 1E-6) {
                 return upperBound;
-            }     
-            // Failed bracket convergence was not because of corner solution
-            throw new MathException(ex);
+            }
         }
 
         // find root
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v7502)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils
@@ -196,12 +196,6 @@
                 ((a > lowerBound) || (b < upperBound)));
    
         if (fa * fb >= 0.0 ) {
-            throw new ConvergenceException(
-                      "number of iterations={0}, maximum iterations={1}, " +
-                      "initial={2}, lower bound={3}, upper bound={4}, final a value={5}, " +
-                      "final b value={6}, f(a)={7}, f(b)={8}",
-                      numIterations, maximumIterations, initial,
-                      lowerBound, upperBound, a, b, fa, fb);
         }
         
         return new double[]{a, b};
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v7502)
--- org.apache.commons.math.special.Gamma
+++ org.apache.commons.math.special.Gamma
@@ -178,7 +178,9 @@
                 sum = sum + an;
             }
             if (n >= maxIterations) {
-                throw new MaxIterationsExceededException(maxIterations);
+                {ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				throw new MaxIterationsExceededException(maxIterations);
             } else {
                 ret = Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * sum;
             }
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v7502)
--- org.apache.commons.math.MaxIterationsExceededException
+++ org.apache.commons.math.MaxIterationsExceededException
@@ -40,7 +40,6 @@
      * @param maxIterations maximal number of iterations allowed
      */
     public MaxIterationsExceededException(final int maxIterations) {
-        super("Maximal number of iterations ({0}) exceeded", maxIterations);
         this.maxIterations = maxIterations;
     }
 
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v7502)
--- org.apache.commons.math.util.ContinuedFraction
+++ org.apache.commons.math.util.ContinuedFraction
@@ -142,7 +142,6 @@
                 // need to scale
                 if (a != 0.0) {
                     p2 = p1 + (b / a * p0);
-                    q2 = q1 + (b / a * q0);
                 } else if (b != 0) {
                     p2 = (a / b * p1) + p0;
                     q2 = (a / b * q1) + q0;
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v7502)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v7502)
--- org.apache.commons.math.distribution.NormalDistributionImpl
+++ org.apache.commons.math.distribution.NormalDistributionImpl
@@ -201,6 +201,7 @@
             ret = getMean();
         } else {
             ret = Double.MAX_VALUE;
+			return ret;
         }
         
         return ret;
@@ -220,7 +221,7 @@
 
         if (p < .5) {
             ret = getMean() - getStandardDeviation();
-        } else if (p > .5) {
+        } else if (p < 0.0 || p > 1.0) {
             ret = getMean() + getStandardDeviation();
         } else {
             ret = getMean();
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v7536)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v7536)
--- org.apache.commons.math.distribution.AbstractContinuousDistribution
+++ org.apache.commons.math.distribution.AbstractContinuousDistribution
@@ -94,7 +94,7 @@
              * TODO: expose the default solver, defaultAbsoluteAccuracy as
              * a constant.
              */ 
-            if (Math.abs(rootFindingFunction.value(lowerBound)) < 1E-6) {
+            if (Math.abs(rootFindingFunction.value(upperBound)) < 1E-6) {
                 return lowerBound;
             }
             if (Math.abs(rootFindingFunction.value(upperBound)) < 1E-6) {
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v7536)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils
@@ -196,12 +196,6 @@
                 ((a > lowerBound) || (b < upperBound)));
    
         if (fa * fb >= 0.0 ) {
-            throw new ConvergenceException(
-                      "number of iterations={0}, maximum iterations={1}, " +
-                      "initial={2}, lower bound={3}, upper bound={4}, final a value={5}, " +
-                      "final b value={6}, f(a)={7}, f(b)={8}",
-                      numIterations, maximumIterations, initial,
-                      lowerBound, upperBound, a, b, fa, fb);
         }
         
         return new double[]{a, b};
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v7536)
--- org.apache.commons.math.special.Gamma
+++ org.apache.commons.math.special.Gamma
@@ -178,7 +178,11 @@
                 sum = sum + an;
             }
             if (n >= maxIterations) {
-                throw new MaxIterationsExceededException(maxIterations);
+                {ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				throw new MaxIterationsExceededException(maxIterations);
             } else {
                 ret = Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * sum;
             }
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v7536)
--- org.apache.commons.math.MaxIterationsExceededException
+++ org.apache.commons.math.MaxIterationsExceededException
@@ -40,7 +40,6 @@
      * @param maxIterations maximal number of iterations allowed
      */
     public MaxIterationsExceededException(final int maxIterations) {
-        super("Maximal number of iterations ({0}) exceeded", maxIterations);
         this.maxIterations = maxIterations;
     }
 
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v7536)
--- org.apache.commons.math.util.ContinuedFraction
+++ org.apache.commons.math.util.ContinuedFraction
@@ -141,7 +141,6 @@
             if (Double.isInfinite(p2) || Double.isInfinite(q2)) {
                 // need to scale
                 if (a != 0.0) {
-                    p2 = p1 + (b / a * p0);
                     q2 = q1 + (b / a * q0);
                 } else if (b != 0) {
                     p2 = (a / b * p1) + p0;
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v7536)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v7536)
--- org.apache.commons.math.distribution.NormalDistributionImpl
+++ org.apache.commons.math.distribution.NormalDistributionImpl
@@ -201,6 +201,7 @@
             ret = getMean();
         } else {
             ret = Double.MAX_VALUE;
+			return ret;
         }
         
         return ret;
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v7635)
--- org.apache.commons.math.MathException
+++ org.apache.commons.math.MathException
@@ -116,7 +116,6 @@
      *                   to be thrown.
      */
     public MathException(Throwable rootCause) {
-        super(rootCause);
         this.pattern   = getMessage();
         this.arguments = new Object[0];
     }
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v7635)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v7635)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils
@@ -196,12 +196,6 @@
                 ((a > lowerBound) || (b < upperBound)));
    
         if (fa * fb >= 0.0 ) {
-            throw new ConvergenceException(
-                      "number of iterations={0}, maximum iterations={1}, " +
-                      "initial={2}, lower bound={3}, upper bound={4}, final a value={5}, " +
-                      "final b value={6}, f(a)={7}, f(b)={8}",
-                      numIterations, maximumIterations, initial,
-                      lowerBound, upperBound, a, b, fa, fb);
         }
         
         return new double[]{a, b};
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v7635)
--- org.apache.commons.math.special.Gamma
+++ org.apache.commons.math.special.Gamma
@@ -178,7 +178,12 @@
                 sum = sum + an;
             }
             if (n >= maxIterations) {
-                throw new MaxIterationsExceededException(maxIterations);
+                {ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				throw new MaxIterationsExceededException(maxIterations);
             } else {
                 ret = Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * sum;
             }
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v7635)
--- org.apache.commons.math.util.ContinuedFraction
+++ org.apache.commons.math.util.ContinuedFraction
@@ -133,7 +133,6 @@
         int n = 0;
         double relativeError = Double.MAX_VALUE;
         while (n < maxIterations && relativeError > epsilon) {
-            ++n;
             double a = getA(n, x);
             double b = getB(n, x);
             double p2 = a * p1 + b * p0;
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v7635)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v7927)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v7927)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils
@@ -196,12 +196,6 @@
                 ((a > lowerBound) || (b < upperBound)));
    
         if (fa * fb >= 0.0 ) {
-            throw new ConvergenceException(
-                      "number of iterations={0}, maximum iterations={1}, " +
-                      "initial={2}, lower bound={3}, upper bound={4}, final a value={5}, " +
-                      "final b value={6}, f(a)={7}, f(b)={8}",
-                      numIterations, maximumIterations, initial,
-                      lowerBound, upperBound, a, b, fa, fb);
         }
         
         return new double[]{a, b};
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v7927)
--- org.apache.commons.math.special.Gamma
+++ org.apache.commons.math.special.Gamma
@@ -178,7 +178,11 @@
                 sum = sum + an;
             }
             if (n >= maxIterations) {
-                throw new MaxIterationsExceededException(maxIterations);
+                {ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				throw new MaxIterationsExceededException(maxIterations);
             } else {
                 ret = Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * sum;
             }
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v7927)
--- org.apache.commons.math.MaxIterationsExceededException
+++ org.apache.commons.math.MaxIterationsExceededException
@@ -40,7 +40,6 @@
      * @param maxIterations maximal number of iterations allowed
      */
     public MaxIterationsExceededException(final int maxIterations) {
-        super("Maximal number of iterations ({0}) exceeded", maxIterations);
         this.maxIterations = maxIterations;
     }
 
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v7927)
--- org.apache.commons.math.util.ContinuedFraction
+++ org.apache.commons.math.util.ContinuedFraction
@@ -43,7 +43,6 @@
      * Default constructor.
      */
     protected ContinuedFraction() {
-        super();
     }
 
     /**
@@ -133,7 +132,6 @@
         int n = 0;
         double relativeError = Double.MAX_VALUE;
         while (n < maxIterations && relativeError > epsilon) {
-            ++n;
             double a = getA(n, x);
             double b = getB(n, x);
             double p2 = a * p1 + b * p0;
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v7927)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v8125)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v8125)
--- org.apache.commons.math.distribution.AbstractContinuousDistribution
+++ org.apache.commons.math.distribution.AbstractContinuousDistribution
@@ -97,7 +97,7 @@
             if (Math.abs(rootFindingFunction.value(lowerBound)) < 1E-6) {
                 return lowerBound;
             }
-            if (Math.abs(rootFindingFunction.value(upperBound)) < 1E-6) {
+            if (p == 1) {
                 return upperBound;
             }     
             // Failed bracket convergence was not because of corner solution
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v8125)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils
@@ -196,12 +196,6 @@
                 ((a > lowerBound) || (b < upperBound)));
    
         if (fa * fb >= 0.0 ) {
-            throw new ConvergenceException(
-                      "number of iterations={0}, maximum iterations={1}, " +
-                      "initial={2}, lower bound={3}, upper bound={4}, final a value={5}, " +
-                      "final b value={6}, f(a)={7}, f(b)={8}",
-                      numIterations, maximumIterations, initial,
-                      lowerBound, upperBound, a, b, fa, fb);
         }
         
         return new double[]{a, b};
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v8125)
--- org.apache.commons.math.special.Gamma
+++ org.apache.commons.math.special.Gamma
@@ -178,7 +178,9 @@
                 sum = sum + an;
             }
             if (n >= maxIterations) {
-                throw new MaxIterationsExceededException(maxIterations);
+                {ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				throw new MaxIterationsExceededException(maxIterations);
             } else {
                 ret = Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * sum;
             }
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v8125)
--- org.apache.commons.math.util.ContinuedFraction
+++ org.apache.commons.math.util.ContinuedFraction
@@ -133,15 +133,18 @@
         int n = 0;
         double relativeError = Double.MAX_VALUE;
         while (n < maxIterations && relativeError > epsilon) {
-            ++n;
-            double a = getA(n, x);
+            int[] hashData = new int[7];
+			double a = getA(n, x);
             double b = getB(n, x);
             double p2 = a * p1 + b * p0;
             double q2 = a * q1 + b * q0;
             if (Double.isInfinite(p2) || Double.isInfinite(q2)) {
                 // need to scale
                 if (a != 0.0) {
-                    p2 = p1 + (b / a * p0);
+                    {
+						p2 = (a / b * p1) + p0;
+						q2 = (a / b * q1) + q0;
+					}
                     q2 = q1 + (b / a * q0);
                 } else if (b != 0) {
                     p2 = (a / b * p1) + p0;
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v8125)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v8125)
--- org.apache.commons.math.distribution.NormalDistributionImpl
+++ org.apache.commons.math.distribution.NormalDistributionImpl
@@ -201,6 +201,7 @@
             ret = getMean();
         } else {
             ret = Double.MAX_VALUE;
+			return ret;
         }
         
         return ret;
@@ -220,7 +221,7 @@
 
         if (p < .5) {
             ret = getMean() - getStandardDeviation();
-        } else if (p > .5) {
+        } else if (p < 0.0 || p > 1.0) {
             ret = getMean() + getStandardDeviation();
         } else {
             ret = getMean();
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v8130)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v8130)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils
@@ -196,12 +196,6 @@
                 ((a > lowerBound) || (b < upperBound)));
    
         if (fa * fb >= 0.0 ) {
-            throw new ConvergenceException(
-                      "number of iterations={0}, maximum iterations={1}, " +
-                      "initial={2}, lower bound={3}, upper bound={4}, final a value={5}, " +
-                      "final b value={6}, f(a)={7}, f(b)={8}",
-                      numIterations, maximumIterations, initial,
-                      lowerBound, upperBound, a, b, fa, fb);
         }
         
         return new double[]{a, b};
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v8130)
--- org.apache.commons.math.special.Gamma
+++ org.apache.commons.math.special.Gamma
@@ -178,7 +178,9 @@
                 sum = sum + an;
             }
             if (n >= maxIterations) {
-                throw new MaxIterationsExceededException(maxIterations);
+                {ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				throw new MaxIterationsExceededException(maxIterations);
             } else {
                 ret = Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * sum;
             }
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v8130)
--- org.apache.commons.math.MaxIterationsExceededException
+++ org.apache.commons.math.MaxIterationsExceededException
@@ -40,7 +40,6 @@
      * @param maxIterations maximal number of iterations allowed
      */
     public MaxIterationsExceededException(final int maxIterations) {
-        super("Maximal number of iterations ({0}) exceeded", maxIterations);
         this.maxIterations = maxIterations;
     }
 
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v8130)
--- org.apache.commons.math.util.ContinuedFraction
+++ org.apache.commons.math.util.ContinuedFraction
@@ -141,8 +141,6 @@
             if (Double.isInfinite(p2) || Double.isInfinite(q2)) {
                 // need to scale
                 if (a != 0.0) {
-                    p2 = p1 + (b / a * p0);
-                    q2 = q1 + (b / a * q0);
                 } else if (b != 0) {
                     p2 = (a / b * p1) + p0;
                     q2 = (a / b * q1) + q0;
@@ -164,7 +162,7 @@
             q1 = q2;
         }
 
-        if (n >= maxIterations) {
+        if (true) {
             throw new MaxIterationsExceededException(maxIterations,
                 "Continued fraction convergents failed to converge for value {0}",
                 x);
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v8130)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v8130)
--- org.apache.commons.math.distribution.NormalDistributionImpl
+++ org.apache.commons.math.distribution.NormalDistributionImpl
@@ -51,7 +51,6 @@
      * @param sd standard deviation for this distribution
      */
     public NormalDistributionImpl(double mean, double sd){
-        super();
         setMean(mean);
         setStandardDeviation(sd);
     }
@@ -201,6 +200,7 @@
             ret = getMean();
         } else {
             ret = Double.MAX_VALUE;
+			return ret;
         }
         
         return ret;
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v8631)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v8631)
--- org.apache.commons.math.distribution.AbstractContinuousDistribution
+++ org.apache.commons.math.distribution.AbstractContinuousDistribution
@@ -97,7 +97,7 @@
             if (Math.abs(rootFindingFunction.value(lowerBound)) < 1E-6) {
                 return lowerBound;
             }
-            if (Math.abs(rootFindingFunction.value(upperBound)) < 1E-6) {
+            if (p < 0.0 || p > 1.0) {
                 return upperBound;
             }     
             // Failed bracket convergence was not because of corner solution
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v8631)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils
@@ -196,12 +196,6 @@
                 ((a > lowerBound) || (b < upperBound)));
    
         if (fa * fb >= 0.0 ) {
-            throw new ConvergenceException(
-                      "number of iterations={0}, maximum iterations={1}, " +
-                      "initial={2}, lower bound={3}, upper bound={4}, final a value={5}, " +
-                      "final b value={6}, f(a)={7}, f(b)={8}",
-                      numIterations, maximumIterations, initial,
-                      lowerBound, upperBound, a, b, fa, fb);
         }
         
         return new double[]{a, b};
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v8631)
--- org.apache.commons.math.special.Gamma
+++ org.apache.commons.math.special.Gamma
@@ -178,7 +178,10 @@
                 sum = sum + an;
             }
             if (n >= maxIterations) {
-                throw new MaxIterationsExceededException(maxIterations);
+                {ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				throw new MaxIterationsExceededException(maxIterations);
             } else {
                 ret = Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * sum;
             }
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v8631)
--- org.apache.commons.math.util.ContinuedFraction
+++ org.apache.commons.math.util.ContinuedFraction
@@ -134,7 +134,8 @@
         double relativeError = Double.MAX_VALUE;
         while (n < maxIterations && relativeError > epsilon) {
             ++n;
-            double a = getA(n, x);
+            int[] hashData = new int[7];
+			double a = getA(n, x);
             double b = getB(n, x);
             double p2 = a * p1 + b * p0;
             double q2 = a * q1 + b * q0;
@@ -142,7 +143,6 @@
                 // need to scale
                 if (a != 0.0) {
                     p2 = p1 + (b / a * p0);
-                    q2 = q1 + (b / a * q0);
                 } else if (b != 0) {
                     p2 = (a / b * p1) + p0;
                     q2 = (a / b * q1) + q0;
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v8631)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 03:58:08 [main] [INFO]  PatchLogExporter - patch (v8631)
--- org.apache.commons.math.distribution.NormalDistributionImpl
+++ org.apache.commons.math.distribution.NormalDistributionImpl
@@ -220,7 +220,7 @@
 
         if (p < .5) {
             ret = getMean() - getStandardDeviation();
-        } else if (p > .5) {
+        } else if (p < 0.0 || p > 1.0) {
             ret = getMean() + getStandardDeviation();
         } else {
             ret = getMean();
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v8705)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v8705)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils
@@ -196,12 +196,6 @@
                 ((a > lowerBound) || (b < upperBound)));
    
         if (fa * fb >= 0.0 ) {
-            throw new ConvergenceException(
-                      "number of iterations={0}, maximum iterations={1}, " +
-                      "initial={2}, lower bound={3}, upper bound={4}, final a value={5}, " +
-                      "final b value={6}, f(a)={7}, f(b)={8}",
-                      numIterations, maximumIterations, initial,
-                      lowerBound, upperBound, a, b, fa, fb);
         }
         
         return new double[]{a, b};
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v8705)
--- org.apache.commons.math.special.Gamma
+++ org.apache.commons.math.special.Gamma
@@ -178,7 +178,13 @@
                 sum = sum + an;
             }
             if (n >= maxIterations) {
-                throw new MaxIterationsExceededException(maxIterations);
+                {ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				throw new MaxIterationsExceededException(maxIterations);
             } else {
                 ret = Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * sum;
             }
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v8705)
--- org.apache.commons.math.util.ContinuedFraction
+++ org.apache.commons.math.util.ContinuedFraction
@@ -134,7 +134,8 @@
         double relativeError = Double.MAX_VALUE;
         while (n < maxIterations && relativeError > epsilon) {
             ++n;
-            double a = getA(n, x);
+            int[] hashData = new int[7];
+			double a = getA(n, x);
             double b = getB(n, x);
             double p2 = a * p1 + b * p0;
             double q2 = a * q1 + b * q0;
@@ -142,7 +143,6 @@
                 // need to scale
                 if (a != 0.0) {
                     p2 = p1 + (b / a * p0);
-                    q2 = q1 + (b / a * q0);
                 } else if (b != 0) {
                     p2 = (a / b * p1) + p0;
                     q2 = (a / b * q1) + q0;
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v8705)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v8708)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v8708)
--- org.apache.commons.math.distribution.AbstractContinuousDistribution
+++ org.apache.commons.math.distribution.AbstractContinuousDistribution
@@ -94,7 +94,7 @@
              * TODO: expose the default solver, defaultAbsoluteAccuracy as
              * a constant.
              */ 
-            if (Math.abs(rootFindingFunction.value(lowerBound)) < 1E-6) {
+            if (p == 1) {
                 return lowerBound;
             }
             if (Math.abs(rootFindingFunction.value(upperBound)) < 1E-6) {
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v8708)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils
@@ -196,12 +196,6 @@
                 ((a > lowerBound) || (b < upperBound)));
    
         if (fa * fb >= 0.0 ) {
-            throw new ConvergenceException(
-                      "number of iterations={0}, maximum iterations={1}, " +
-                      "initial={2}, lower bound={3}, upper bound={4}, final a value={5}, " +
-                      "final b value={6}, f(a)={7}, f(b)={8}",
-                      numIterations, maximumIterations, initial,
-                      lowerBound, upperBound, a, b, fa, fb);
         }
         
         return new double[]{a, b};
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v8708)
--- org.apache.commons.math.special.Gamma
+++ org.apache.commons.math.special.Gamma
@@ -178,7 +178,10 @@
                 sum = sum + an;
             }
             if (n >= maxIterations) {
-                throw new MaxIterationsExceededException(maxIterations);
+                {ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				throw new MaxIterationsExceededException(maxIterations);
             } else {
                 ret = Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * sum;
             }
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v8708)
--- org.apache.commons.math.MaxIterationsExceededException
+++ org.apache.commons.math.MaxIterationsExceededException
@@ -40,7 +40,6 @@
      * @param maxIterations maximal number of iterations allowed
      */
     public MaxIterationsExceededException(final int maxIterations) {
-        super("Maximal number of iterations ({0}) exceeded", maxIterations);
         this.maxIterations = maxIterations;
     }
 
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v8708)
--- org.apache.commons.math.util.ContinuedFraction
+++ org.apache.commons.math.util.ContinuedFraction
@@ -134,7 +134,8 @@
         double relativeError = Double.MAX_VALUE;
         while (n < maxIterations && relativeError > epsilon) {
             ++n;
-            double a = getA(n, x);
+            int[] hashData = new int[7];
+			double a = getA(n, x);
             double b = getB(n, x);
             double p2 = a * p1 + b * p0;
             double q2 = a * q1 + b * q0;
@@ -142,7 +143,6 @@
                 // need to scale
                 if (a != 0.0) {
                     p2 = p1 + (b / a * p0);
-                    q2 = q1 + (b / a * q0);
                 } else if (b != 0) {
                     p2 = (a / b * p1) + p0;
                     q2 = (a / b * q1) + q0;
@@ -164,7 +164,7 @@
             q1 = q2;
         }
 
-        if (n >= maxIterations) {
+        if (true) {
             throw new MaxIterationsExceededException(maxIterations,
                 "Continued fraction convergents failed to converge for value {0}",
                 x);
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v8708)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v8735)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v8735)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils
@@ -196,12 +196,6 @@
                 ((a > lowerBound) || (b < upperBound)));
    
         if (fa * fb >= 0.0 ) {
-            throw new ConvergenceException(
-                      "number of iterations={0}, maximum iterations={1}, " +
-                      "initial={2}, lower bound={3}, upper bound={4}, final a value={5}, " +
-                      "final b value={6}, f(a)={7}, f(b)={8}",
-                      numIterations, maximumIterations, initial,
-                      lowerBound, upperBound, a, b, fa, fb);
         }
         
         return new double[]{a, b};
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v8735)
--- org.apache.commons.math.special.Gamma
+++ org.apache.commons.math.special.Gamma
@@ -178,7 +178,11 @@
                 sum = sum + an;
             }
             if (n >= maxIterations) {
-                throw new MaxIterationsExceededException(maxIterations);
+                {ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				throw new MaxIterationsExceededException(maxIterations);
             } else {
                 ret = Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * sum;
             }
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v8735)
--- org.apache.commons.math.MaxIterationsExceededException
+++ org.apache.commons.math.MaxIterationsExceededException
@@ -40,7 +40,6 @@
      * @param maxIterations maximal number of iterations allowed
      */
     public MaxIterationsExceededException(final int maxIterations) {
-        super("Maximal number of iterations ({0}) exceeded", maxIterations);
         this.maxIterations = maxIterations;
     }
 
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v8735)
--- org.apache.commons.math.util.ContinuedFraction
+++ org.apache.commons.math.util.ContinuedFraction
@@ -134,7 +134,8 @@
         double relativeError = Double.MAX_VALUE;
         while (n < maxIterations && relativeError > epsilon) {
             ++n;
-            double a = getA(n, x);
+            int[] hashData = new int[7];
+			double a = getA(n, x);
             double b = getB(n, x);
             double p2 = a * p1 + b * p0;
             double q2 = a * q1 + b * q0;
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v8735)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v8735)
--- org.apache.commons.math.distribution.NormalDistributionImpl
+++ org.apache.commons.math.distribution.NormalDistributionImpl
@@ -201,6 +201,7 @@
             ret = getMean();
         } else {
             ret = Double.MAX_VALUE;
+			return ret;
         }
         
         return ret;
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v8850)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v8850)
--- org.apache.commons.math.distribution.AbstractContinuousDistribution
+++ org.apache.commons.math.distribution.AbstractContinuousDistribution
@@ -100,8 +100,7 @@
             if (Math.abs(rootFindingFunction.value(upperBound)) < 1E-6) {
                 return upperBound;
             }     
-            // Failed bracket convergence was not because of corner solution
-            throw new MathException(ex);
+            double ret;
         }
 
         // find root
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v8850)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils
@@ -196,12 +196,6 @@
                 ((a > lowerBound) || (b < upperBound)));
    
         if (fa * fb >= 0.0 ) {
-            throw new ConvergenceException(
-                      "number of iterations={0}, maximum iterations={1}, " +
-                      "initial={2}, lower bound={3}, upper bound={4}, final a value={5}, " +
-                      "final b value={6}, f(a)={7}, f(b)={8}",
-                      numIterations, maximumIterations, initial,
-                      lowerBound, upperBound, a, b, fa, fb);
         }
         
         return new double[]{a, b};
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v8850)
--- org.apache.commons.math.special.Gamma
+++ org.apache.commons.math.special.Gamma
@@ -178,7 +178,9 @@
                 sum = sum + an;
             }
             if (n >= maxIterations) {
-                throw new MaxIterationsExceededException(maxIterations);
+                {ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				throw new MaxIterationsExceededException(maxIterations);
             } else {
                 ret = Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * sum;
             }
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v8850)
--- org.apache.commons.math.util.ContinuedFraction
+++ org.apache.commons.math.util.ContinuedFraction
@@ -134,7 +134,8 @@
         double relativeError = Double.MAX_VALUE;
         while (n < maxIterations && relativeError > epsilon) {
             ++n;
-            double a = getA(n, x);
+            int[] hashData = new int[7];
+			double a = getA(n, x);
             double b = getB(n, x);
             double p2 = a * p1 + b * p0;
             double q2 = a * q1 + b * q0;
@@ -154,8 +155,6 @@
                 }
             }
             double r = p2 / q2;
-            relativeError = Math.abs(r / c - 1.0);
-                
             // prepare for next iteration
             c = p2 / q2;
             p0 = p1;
@@ -164,7 +163,7 @@
             q1 = q2;
         }
 
-        if (n >= maxIterations) {
+        if (true) {
             throw new MaxIterationsExceededException(maxIterations,
                 "Continued fraction convergents failed to converge for value {0}",
                 x);
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v8850)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v8850)
--- org.apache.commons.math.distribution.NormalDistributionImpl
+++ org.apache.commons.math.distribution.NormalDistributionImpl
@@ -220,7 +220,7 @@
 
         if (p < .5) {
             ret = getMean() - getStandardDeviation();
-        } else if (p > .5) {
+        } else if (p < 0.0 || p > 1.0) {
             ret = getMean() + getStandardDeviation();
         } else {
             ret = getMean();
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v9045)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v9045)
--- org.apache.commons.math.distribution.AbstractContinuousDistribution
+++ org.apache.commons.math.distribution.AbstractContinuousDistribution
@@ -94,7 +94,7 @@
              * TODO: expose the default solver, defaultAbsoluteAccuracy as
              * a constant.
              */ 
-            if (Math.abs(rootFindingFunction.value(lowerBound)) < 1E-6) {
+            if (p < 0.0 || p > 1.0) {
                 return lowerBound;
             }
             if (Math.abs(rootFindingFunction.value(upperBound)) < 1E-6) {
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v9045)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils
@@ -196,12 +196,6 @@
                 ((a > lowerBound) || (b < upperBound)));
    
         if (fa * fb >= 0.0 ) {
-            throw new ConvergenceException(
-                      "number of iterations={0}, maximum iterations={1}, " +
-                      "initial={2}, lower bound={3}, upper bound={4}, final a value={5}, " +
-                      "final b value={6}, f(a)={7}, f(b)={8}",
-                      numIterations, maximumIterations, initial,
-                      lowerBound, upperBound, a, b, fa, fb);
         }
         
         return new double[]{a, b};
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v9045)
--- org.apache.commons.math.special.Gamma
+++ org.apache.commons.math.special.Gamma
@@ -178,7 +178,11 @@
                 sum = sum + an;
             }
             if (n >= maxIterations) {
-                throw new MaxIterationsExceededException(maxIterations);
+                {ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				throw new MaxIterationsExceededException(maxIterations);
             } else {
                 ret = Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * sum;
             }
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v9045)
--- org.apache.commons.math.MaxIterationsExceededException
+++ org.apache.commons.math.MaxIterationsExceededException
@@ -40,7 +40,6 @@
      * @param maxIterations maximal number of iterations allowed
      */
     public MaxIterationsExceededException(final int maxIterations) {
-        super("Maximal number of iterations ({0}) exceeded", maxIterations);
         this.maxIterations = maxIterations;
     }
 
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v9045)
--- org.apache.commons.math.util.ContinuedFraction
+++ org.apache.commons.math.util.ContinuedFraction
@@ -141,7 +141,9 @@
             if (Double.isInfinite(p2) || Double.isInfinite(q2)) {
                 // need to scale
                 if (a != 0.0) {
-                    p2 = p1 + (b / a * p0);
+                    {
+						q2 = (a / b * q1) + q0;
+					}
                     q2 = q1 + (b / a * q0);
                 } else if (b != 0) {
                     p2 = (a / b * p1) + p0;
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v9045)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v9120)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v9120)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils
@@ -196,12 +196,7 @@
                 ((a > lowerBound) || (b < upperBound)));
    
         if (fa * fb >= 0.0 ) {
-            throw new ConvergenceException(
-                      "number of iterations={0}, maximum iterations={1}, " +
-                      "initial={2}, lower bound={3}, upper bound={4}, final a value={5}, " +
-                      "final b value={6}, f(a)={7}, f(b)={8}",
-                      numIterations, maximumIterations, initial,
-                      lowerBound, upperBound, a, b, fa, fb);
+            int i = 1;
         }
         
         return new double[]{a, b};
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v9120)
--- org.apache.commons.math.special.Gamma
+++ org.apache.commons.math.special.Gamma
@@ -178,7 +178,12 @@
                 sum = sum + an;
             }
             if (n >= maxIterations) {
-                throw new MaxIterationsExceededException(maxIterations);
+                {ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				throw new MaxIterationsExceededException(maxIterations);
             } else {
                 ret = Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * sum;
             }
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v9120)
--- org.apache.commons.math.util.ContinuedFraction
+++ org.apache.commons.math.util.ContinuedFraction
@@ -127,6 +127,7 @@
     {
         double p0 = 1.0;
         double p1 = getA(0, x);
+		final double[] special = { Double.NaN, Double.POSITIVE_INFINITY, Double.NEGATIVE_INFINITY };
         double q0 = 0.0;
         double q1 = 1.0;
         double c = p1 / q1;
@@ -142,7 +143,6 @@
                 // need to scale
                 if (a != 0.0) {
                     p2 = p1 + (b / a * p0);
-                    q2 = q1 + (b / a * q0);
                 } else if (b != 0) {
                     p2 = (a / b * p1) + p0;
                     q2 = (a / b * q1) + q0;
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v9120)
--- org.apache.commons.math.ConvergenceException
+++ org.apache.commons.math.ConvergenceException
@@ -42,7 +42,6 @@
      * @since 1.2
      */
     public ConvergenceException(String pattern, Object ... arguments) {
-        super(pattern, arguments);
     }
 
     /**
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v9120)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v9403)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v9403)
--- org.apache.commons.math.distribution.AbstractContinuousDistribution
+++ org.apache.commons.math.distribution.AbstractContinuousDistribution
@@ -94,7 +94,7 @@
              * TODO: expose the default solver, defaultAbsoluteAccuracy as
              * a constant.
              */ 
-            if (Math.abs(rootFindingFunction.value(lowerBound)) < 1E-6) {
+            if (Math.abs(rootFindingFunction.value(upperBound)) < 1E-6) {
                 return lowerBound;
             }
             if (Math.abs(rootFindingFunction.value(upperBound)) < 1E-6) {
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v9403)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils
@@ -196,12 +196,6 @@
                 ((a > lowerBound) || (b < upperBound)));
    
         if (fa * fb >= 0.0 ) {
-            throw new ConvergenceException(
-                      "number of iterations={0}, maximum iterations={1}, " +
-                      "initial={2}, lower bound={3}, upper bound={4}, final a value={5}, " +
-                      "final b value={6}, f(a)={7}, f(b)={8}",
-                      numIterations, maximumIterations, initial,
-                      lowerBound, upperBound, a, b, fa, fb);
         }
         
         return new double[]{a, b};
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v9403)
--- org.apache.commons.math.special.Gamma
+++ org.apache.commons.math.special.Gamma
@@ -178,7 +178,11 @@
                 sum = sum + an;
             }
             if (n >= maxIterations) {
-                throw new MaxIterationsExceededException(maxIterations);
+                {ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				throw new MaxIterationsExceededException(maxIterations);
             } else {
                 ret = Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * sum;
             }
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v9403)
--- org.apache.commons.math.util.ContinuedFraction
+++ org.apache.commons.math.util.ContinuedFraction
@@ -134,15 +134,18 @@
         double relativeError = Double.MAX_VALUE;
         while (n < maxIterations && relativeError > epsilon) {
             ++n;
-            double a = getA(n, x);
+            int[] hashData = new int[7];
+			double a = getA(n, x);
             double b = getB(n, x);
             double p2 = a * p1 + b * p0;
             double q2 = a * q1 + b * q0;
             if (Double.isInfinite(p2) || Double.isInfinite(q2)) {
                 // need to scale
                 if (a != 0.0) {
-                    p2 = p1 + (b / a * p0);
-                    q2 = q1 + (b / a * q0);
+                    {
+						p2 = (a / b * p1) + p0;
+						q2 = (a / b * q1) + q0;
+					}
                 } else if (b != 0) {
                     p2 = (a / b * p1) + p0;
                     q2 = (a / b * q1) + q0;
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v9403)
--- org.apache.commons.math.ConvergenceException
+++ org.apache.commons.math.ConvergenceException
@@ -42,7 +42,6 @@
      * @since 1.2
      */
     public ConvergenceException(String pattern, Object ... arguments) {
-        super(pattern, arguments);
     }
 
     /**
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v9403)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v9418)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v9418)
--- org.apache.commons.math.distribution.AbstractContinuousDistribution
+++ org.apache.commons.math.distribution.AbstractContinuousDistribution
@@ -99,9 +99,7 @@
             }
             if (Math.abs(rootFindingFunction.value(upperBound)) < 1E-6) {
                 return upperBound;
-            }     
-            // Failed bracket convergence was not because of corner solution
-            throw new MathException(ex);
+            }
         }
 
         // find root
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v9418)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils
@@ -196,12 +196,6 @@
                 ((a > lowerBound) || (b < upperBound)));
    
         if (fa * fb >= 0.0 ) {
-            throw new ConvergenceException(
-                      "number of iterations={0}, maximum iterations={1}, " +
-                      "initial={2}, lower bound={3}, upper bound={4}, final a value={5}, " +
-                      "final b value={6}, f(a)={7}, f(b)={8}",
-                      numIterations, maximumIterations, initial,
-                      lowerBound, upperBound, a, b, fa, fb);
         }
         
         return new double[]{a, b};
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v9418)
--- org.apache.commons.math.special.Gamma
+++ org.apache.commons.math.special.Gamma
@@ -178,7 +178,13 @@
                 sum = sum + an;
             }
             if (n >= maxIterations) {
-                throw new MaxIterationsExceededException(maxIterations);
+                {ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				throw new MaxIterationsExceededException(maxIterations);
             } else {
                 ret = Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * sum;
             }
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v9418)
--- org.apache.commons.math.util.ContinuedFraction
+++ org.apache.commons.math.util.ContinuedFraction
@@ -134,7 +134,8 @@
         double relativeError = Double.MAX_VALUE;
         while (n < maxIterations && relativeError > epsilon) {
             ++n;
-            double a = getA(n, x);
+            int[] hashData = new int[7];
+			double a = getA(n, x);
             double b = getB(n, x);
             double p2 = a * p1 + b * p0;
             double q2 = a * q1 + b * q0;
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v9418)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v9418)
--- org.apache.commons.math.distribution.NormalDistributionImpl
+++ org.apache.commons.math.distribution.NormalDistributionImpl
@@ -126,7 +126,7 @@
             return 0.5 * (1.0 + Erf.erf((x - mean) /
                     (standardDeviation * Math.sqrt(2.0))));
         } catch (MaxIterationsExceededException ex) {
-            if (x < (mean - 20 * standardDeviation)) { // JDK 1.5 blows at 38
+            if (x < 0.0) { // JDK 1.5 blows at 38
                 return 0.0d;
             } else if (x > (mean + 20 * standardDeviation)) {
                 return 1.0d;
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v9617)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v9617)
--- org.apache.commons.math.distribution.AbstractContinuousDistribution
+++ org.apache.commons.math.distribution.AbstractContinuousDistribution
@@ -99,9 +99,7 @@
             }
             if (Math.abs(rootFindingFunction.value(upperBound)) < 1E-6) {
                 return upperBound;
-            }     
-            // Failed bracket convergence was not because of corner solution
-            throw new MathException(ex);
+            }
         }
 
         // find root
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v9617)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils
@@ -196,12 +196,7 @@
                 ((a > lowerBound) || (b < upperBound)));
    
         if (fa * fb >= 0.0 ) {
-            throw new ConvergenceException(
-                      "number of iterations={0}, maximum iterations={1}, " +
-                      "initial={2}, lower bound={3}, upper bound={4}, final a value={5}, " +
-                      "final b value={6}, f(a)={7}, f(b)={8}",
-                      numIterations, maximumIterations, initial,
-                      lowerBound, upperBound, a, b, fa, fb);
+            UnivariateRealSolver solver = LazyHolder.FACTORY.newDefaultSolver();
         }
         
         return new double[]{a, b};
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v9617)
--- org.apache.commons.math.special.Gamma
+++ org.apache.commons.math.special.Gamma
@@ -178,7 +178,11 @@
                 sum = sum + an;
             }
             if (n >= maxIterations) {
-                throw new MaxIterationsExceededException(maxIterations);
+                {ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				throw new MaxIterationsExceededException(maxIterations);
             } else {
                 ret = Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * sum;
             }
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v9617)
--- org.apache.commons.math.util.ContinuedFraction
+++ org.apache.commons.math.util.ContinuedFraction
@@ -154,8 +154,6 @@
                 }
             }
             double r = p2 / q2;
-            relativeError = Math.abs(r / c - 1.0);
-                
             // prepare for next iteration
             c = p2 / q2;
             p0 = p1;
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v9617)
--- org.apache.commons.math.ConvergenceException
+++ org.apache.commons.math.ConvergenceException
@@ -42,7 +42,6 @@
      * @since 1.2
      */
     public ConvergenceException(String pattern, Object ... arguments) {
-        super(pattern, arguments);
     }
 
     /**
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v9617)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v9617)
--- org.apache.commons.math.distribution.NormalDistributionImpl
+++ org.apache.commons.math.distribution.NormalDistributionImpl
@@ -126,7 +126,7 @@
             return 0.5 * (1.0 + Erf.erf((x - mean) /
                     (standardDeviation * Math.sqrt(2.0))));
         } catch (MaxIterationsExceededException ex) {
-            if (x < (mean - 20 * standardDeviation)) { // JDK 1.5 blows at 38
+            if (x < 0.0) { // JDK 1.5 blows at 38
                 return 0.0d;
             } else if (x > (mean + 20 * standardDeviation)) {
                 return 1.0d;
@@ -220,7 +220,7 @@
 
         if (p < .5) {
             ret = getMean() - getStandardDeviation();
-        } else if (p > .5) {
+        } else if (p < 0.0 || p > 1.0) {
             ret = getMean() + getStandardDeviation();
         } else {
             ret = getMean();
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v9637)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v9637)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils
@@ -196,12 +196,6 @@
                 ((a > lowerBound) || (b < upperBound)));
    
         if (fa * fb >= 0.0 ) {
-            throw new ConvergenceException(
-                      "number of iterations={0}, maximum iterations={1}, " +
-                      "initial={2}, lower bound={3}, upper bound={4}, final a value={5}, " +
-                      "final b value={6}, f(a)={7}, f(b)={8}",
-                      numIterations, maximumIterations, initial,
-                      lowerBound, upperBound, a, b, fa, fb);
         }
         
         return new double[]{a, b};
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v9637)
--- org.apache.commons.math.special.Gamma
+++ org.apache.commons.math.special.Gamma
@@ -178,7 +178,17 @@
                 sum = sum + an;
             }
             if (n >= maxIterations) {
-                throw new MaxIterationsExceededException(maxIterations);
+                {ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				throw new MaxIterationsExceededException(maxIterations);
             } else {
                 ret = Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * sum;
             }
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v9637)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v9723)
--- org.apache.commons.math.MathException
+++ org.apache.commons.math.MathException
@@ -116,7 +116,6 @@
      *                   to be thrown.
      */
     public MathException(Throwable rootCause) {
-        super(rootCause);
         this.pattern   = getMessage();
         this.arguments = new Object[0];
     }
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v9723)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v9723)
--- org.apache.commons.math.distribution.AbstractContinuousDistribution
+++ org.apache.commons.math.distribution.AbstractContinuousDistribution
@@ -94,7 +94,7 @@
              * TODO: expose the default solver, defaultAbsoluteAccuracy as
              * a constant.
              */ 
-            if (Math.abs(rootFindingFunction.value(lowerBound)) < 1E-6) {
+            if (p < 0.0 || p > 1.0) {
                 return lowerBound;
             }
             if (Math.abs(rootFindingFunction.value(upperBound)) < 1E-6) {
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v9723)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils
@@ -196,12 +196,6 @@
                 ((a > lowerBound) || (b < upperBound)));
    
         if (fa * fb >= 0.0 ) {
-            throw new ConvergenceException(
-                      "number of iterations={0}, maximum iterations={1}, " +
-                      "initial={2}, lower bound={3}, upper bound={4}, final a value={5}, " +
-                      "final b value={6}, f(a)={7}, f(b)={8}",
-                      numIterations, maximumIterations, initial,
-                      lowerBound, upperBound, a, b, fa, fb);
         }
         
         return new double[]{a, b};
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v9723)
--- org.apache.commons.math.special.Gamma
+++ org.apache.commons.math.special.Gamma
@@ -178,7 +178,12 @@
                 sum = sum + an;
             }
             if (n >= maxIterations) {
-                throw new MaxIterationsExceededException(maxIterations);
+                {ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				throw new MaxIterationsExceededException(maxIterations);
             } else {
                 ret = Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * sum;
             }
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v9723)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v9723)
--- org.apache.commons.math.distribution.NormalDistributionImpl
+++ org.apache.commons.math.distribution.NormalDistributionImpl
@@ -220,7 +220,7 @@
 
         if (p < .5) {
             ret = getMean() - getStandardDeviation();
-        } else if (p > .5) {
+        } else if (p < 0.0 || p > 1.0) {
             ret = getMean() + getStandardDeviation();
         } else {
             ret = getMean();
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v9848)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v9848)
--- org.apache.commons.math.distribution.AbstractContinuousDistribution
+++ org.apache.commons.math.distribution.AbstractContinuousDistribution
@@ -94,14 +94,12 @@
              * TODO: expose the default solver, defaultAbsoluteAccuracy as
              * a constant.
              */ 
-            if (Math.abs(rootFindingFunction.value(lowerBound)) < 1E-6) {
+            if (Math.abs(rootFindingFunction.value(upperBound)) < 1E-6) {
                 return lowerBound;
             }
-            if (Math.abs(rootFindingFunction.value(upperBound)) < 1E-6) {
+            if (p == 1) {
                 return upperBound;
-            }     
-            // Failed bracket convergence was not because of corner solution
-            throw new MathException(ex);
+            }
         }
 
         // find root
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v9848)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils
@@ -196,12 +196,6 @@
                 ((a > lowerBound) || (b < upperBound)));
    
         if (fa * fb >= 0.0 ) {
-            throw new ConvergenceException(
-                      "number of iterations={0}, maximum iterations={1}, " +
-                      "initial={2}, lower bound={3}, upper bound={4}, final a value={5}, " +
-                      "final b value={6}, f(a)={7}, f(b)={8}",
-                      numIterations, maximumIterations, initial,
-                      lowerBound, upperBound, a, b, fa, fb);
         }
         
         return new double[]{a, b};
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v9848)
--- org.apache.commons.math.special.Gamma
+++ org.apache.commons.math.special.Gamma
@@ -178,7 +178,10 @@
                 sum = sum + an;
             }
             if (n >= maxIterations) {
-                throw new MaxIterationsExceededException(maxIterations);
+                {ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				throw new MaxIterationsExceededException(maxIterations);
             } else {
                 ret = Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * sum;
             }
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v9848)
--- org.apache.commons.math.util.ContinuedFraction
+++ org.apache.commons.math.util.ContinuedFraction
@@ -142,7 +142,6 @@
                 // need to scale
                 if (a != 0.0) {
                     p2 = p1 + (b / a * p0);
-                    q2 = q1 + (b / a * q0);
                 } else if (b != 0) {
                     p2 = (a / b * p1) + p0;
                     q2 = (a / b * q1) + q0;
@@ -154,8 +153,6 @@
                 }
             }
             double r = p2 / q2;
-            relativeError = Math.abs(r / c - 1.0);
-                
             // prepare for next iteration
             c = p2 / q2;
             p0 = p1;
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v9848)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v9848)
--- org.apache.commons.math.distribution.NormalDistributionImpl
+++ org.apache.commons.math.distribution.NormalDistributionImpl
@@ -126,7 +126,7 @@
             return 0.5 * (1.0 + Erf.erf((x - mean) /
                     (standardDeviation * Math.sqrt(2.0))));
         } catch (MaxIterationsExceededException ex) {
-            if (x < (mean - 20 * standardDeviation)) { // JDK 1.5 blows at 38
+            if (x < 0.0) { // JDK 1.5 blows at 38
                 return 0.0d;
             } else if (x > (mean + 20 * standardDeviation)) {
                 return 1.0d;
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v10128)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v10128)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils
@@ -196,12 +196,6 @@
                 ((a > lowerBound) || (b < upperBound)));
    
         if (fa * fb >= 0.0 ) {
-            throw new ConvergenceException(
-                      "number of iterations={0}, maximum iterations={1}, " +
-                      "initial={2}, lower bound={3}, upper bound={4}, final a value={5}, " +
-                      "final b value={6}, f(a)={7}, f(b)={8}",
-                      numIterations, maximumIterations, initial,
-                      lowerBound, upperBound, a, b, fa, fb);
         }
         
         return new double[]{a, b};
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v10128)
--- org.apache.commons.math.special.Gamma
+++ org.apache.commons.math.special.Gamma
@@ -178,7 +178,13 @@
                 sum = sum + an;
             }
             if (n >= maxIterations) {
-                throw new MaxIterationsExceededException(maxIterations);
+                {ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				throw new MaxIterationsExceededException(maxIterations);
             } else {
                 ret = Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * sum;
             }
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v10128)
--- org.apache.commons.math.util.ContinuedFraction
+++ org.apache.commons.math.util.ContinuedFraction
@@ -141,7 +141,10 @@
             if (Double.isInfinite(p2) || Double.isInfinite(q2)) {
                 // need to scale
                 if (a != 0.0) {
-                    p2 = p1 + (b / a * p0);
+                    {
+						p2 = (a / b * p1) + p0;
+						q2 = (a / b * q1) + q0;
+					}
                     q2 = q1 + (b / a * q0);
                 } else if (b != 0) {
                     p2 = (a / b * p1) + p0;
@@ -154,8 +157,6 @@
                 }
             }
             double r = p2 / q2;
-            relativeError = Math.abs(r / c - 1.0);
-                
             // prepare for next iteration
             c = p2 / q2;
             p0 = p1;
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v10128)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v10128)
--- org.apache.commons.math.distribution.NormalDistributionImpl
+++ org.apache.commons.math.distribution.NormalDistributionImpl
@@ -178,7 +178,7 @@
         if (p < .5) {
             ret = -Double.MAX_VALUE;
         } else {
-            ret = getMean();
+            return 0;
         }
         
         return ret;
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v10130)
--- org.apache.commons.math.MathException
+++ org.apache.commons.math.MathException
@@ -116,7 +116,6 @@
      *                   to be thrown.
      */
     public MathException(Throwable rootCause) {
-        super(rootCause);
         this.pattern   = getMessage();
         this.arguments = new Object[0];
     }
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v10130)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v10130)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils
@@ -196,12 +196,6 @@
                 ((a > lowerBound) || (b < upperBound)));
    
         if (fa * fb >= 0.0 ) {
-            throw new ConvergenceException(
-                      "number of iterations={0}, maximum iterations={1}, " +
-                      "initial={2}, lower bound={3}, upper bound={4}, final a value={5}, " +
-                      "final b value={6}, f(a)={7}, f(b)={8}",
-                      numIterations, maximumIterations, initial,
-                      lowerBound, upperBound, a, b, fa, fb);
         }
         
         return new double[]{a, b};
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v10130)
--- org.apache.commons.math.special.Gamma
+++ org.apache.commons.math.special.Gamma
@@ -178,7 +178,14 @@
                 sum = sum + an;
             }
             if (n >= maxIterations) {
-                throw new MaxIterationsExceededException(maxIterations);
+                {ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				throw new MaxIterationsExceededException(maxIterations);
             } else {
                 ret = Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * sum;
             }
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v10130)
--- org.apache.commons.math.util.ContinuedFraction
+++ org.apache.commons.math.util.ContinuedFraction
@@ -43,7 +43,6 @@
      * Default constructor.
      */
     protected ContinuedFraction() {
-        super();
     }
 
     /**
@@ -156,8 +155,6 @@
             double r = p2 / q2;
             relativeError = Math.abs(r / c - 1.0);
                 
-            // prepare for next iteration
-            c = p2 / q2;
             p0 = p1;
             p1 = p2;
             q0 = q1;
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v10130)
--- org.apache.commons.math.ConvergenceException
+++ org.apache.commons.math.ConvergenceException
@@ -42,7 +42,6 @@
      * @since 1.2
      */
     public ConvergenceException(String pattern, Object ... arguments) {
-        super(pattern, arguments);
     }
 
     /**
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v10130)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v10132)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v10132)
--- org.apache.commons.math.distribution.AbstractContinuousDistribution
+++ org.apache.commons.math.distribution.AbstractContinuousDistribution
@@ -99,9 +99,7 @@
             }
             if (Math.abs(rootFindingFunction.value(upperBound)) < 1E-6) {
                 return upperBound;
-            }     
-            // Failed bracket convergence was not because of corner solution
-            throw new MathException(ex);
+            }
         }
 
         // find root
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v10132)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils
@@ -196,12 +196,6 @@
                 ((a > lowerBound) || (b < upperBound)));
    
         if (fa * fb >= 0.0 ) {
-            throw new ConvergenceException(
-                      "number of iterations={0}, maximum iterations={1}, " +
-                      "initial={2}, lower bound={3}, upper bound={4}, final a value={5}, " +
-                      "final b value={6}, f(a)={7}, f(b)={8}",
-                      numIterations, maximumIterations, initial,
-                      lowerBound, upperBound, a, b, fa, fb);
         }
         
         return new double[]{a, b};
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v10132)
--- org.apache.commons.math.special.Gamma
+++ org.apache.commons.math.special.Gamma
@@ -178,7 +178,12 @@
                 sum = sum + an;
             }
             if (n >= maxIterations) {
-                throw new MaxIterationsExceededException(maxIterations);
+                {ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				throw new MaxIterationsExceededException(maxIterations);
             } else {
                 ret = Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * sum;
             }
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v10132)
--- org.apache.commons.math.util.ContinuedFraction
+++ org.apache.commons.math.util.ContinuedFraction
@@ -127,6 +127,7 @@
     {
         double p0 = 1.0;
         double p1 = getA(0, x);
+		final double[] special = { Double.NaN, Double.POSITIVE_INFINITY, Double.NEGATIVE_INFINITY };
         double q0 = 0.0;
         double q1 = 1.0;
         double c = p1 / q1;
@@ -134,7 +135,8 @@
         double relativeError = Double.MAX_VALUE;
         while (n < maxIterations && relativeError > epsilon) {
             ++n;
-            double a = getA(n, x);
+            int[] hashData = new int[7];
+			double a = getA(n, x);
             double b = getB(n, x);
             double p2 = a * p1 + b * p0;
             double q2 = a * q1 + b * q0;
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v10132)
--- org.apache.commons.math.ConvergenceException
+++ org.apache.commons.math.ConvergenceException
@@ -42,7 +42,6 @@
      * @since 1.2
      */
     public ConvergenceException(String pattern, Object ... arguments) {
-        super(pattern, arguments);
     }
 
     /**
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v10132)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v10132)
--- org.apache.commons.math.distribution.NormalDistributionImpl
+++ org.apache.commons.math.distribution.NormalDistributionImpl
@@ -126,7 +126,7 @@
             return 0.5 * (1.0 + Erf.erf((x - mean) /
                     (standardDeviation * Math.sqrt(2.0))));
         } catch (MaxIterationsExceededException ex) {
-            if (x < (mean - 20 * standardDeviation)) { // JDK 1.5 blows at 38
+            if (x < 0.0) { // JDK 1.5 blows at 38
                 return 0.0d;
             } else if (x > (mean + 20 * standardDeviation)) {
                 return 1.0d;
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v10315)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v10315)
--- org.apache.commons.math.distribution.AbstractContinuousDistribution
+++ org.apache.commons.math.distribution.AbstractContinuousDistribution
@@ -94,10 +94,10 @@
              * TODO: expose the default solver, defaultAbsoluteAccuracy as
              * a constant.
              */ 
-            if (Math.abs(rootFindingFunction.value(lowerBound)) < 1E-6) {
+            if (Math.abs(rootFindingFunction.value(upperBound)) < 1E-6) {
                 return lowerBound;
             }
-            if (Math.abs(rootFindingFunction.value(upperBound)) < 1E-6) {
+            if (p == 0) {
                 return upperBound;
             }     
             // Failed bracket convergence was not because of corner solution
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v10315)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils
@@ -196,12 +196,6 @@
                 ((a > lowerBound) || (b < upperBound)));
    
         if (fa * fb >= 0.0 ) {
-            throw new ConvergenceException(
-                      "number of iterations={0}, maximum iterations={1}, " +
-                      "initial={2}, lower bound={3}, upper bound={4}, final a value={5}, " +
-                      "final b value={6}, f(a)={7}, f(b)={8}",
-                      numIterations, maximumIterations, initial,
-                      lowerBound, upperBound, a, b, fa, fb);
         }
         
         return new double[]{a, b};
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v10315)
--- org.apache.commons.math.special.Gamma
+++ org.apache.commons.math.special.Gamma
@@ -178,7 +178,14 @@
                 sum = sum + an;
             }
             if (n >= maxIterations) {
-                throw new MaxIterationsExceededException(maxIterations);
+                {ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				throw new MaxIterationsExceededException(maxIterations);
             } else {
                 ret = Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * sum;
             }
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v10315)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v10323)
--- org.apache.commons.math.MathException
+++ org.apache.commons.math.MathException
@@ -116,7 +116,6 @@
      *                   to be thrown.
      */
     public MathException(Throwable rootCause) {
-        super(rootCause);
         this.pattern   = getMessage();
         this.arguments = new Object[0];
     }
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v10323)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v10323)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils
@@ -196,12 +196,6 @@
                 ((a > lowerBound) || (b < upperBound)));
    
         if (fa * fb >= 0.0 ) {
-            throw new ConvergenceException(
-                      "number of iterations={0}, maximum iterations={1}, " +
-                      "initial={2}, lower bound={3}, upper bound={4}, final a value={5}, " +
-                      "final b value={6}, f(a)={7}, f(b)={8}",
-                      numIterations, maximumIterations, initial,
-                      lowerBound, upperBound, a, b, fa, fb);
         }
         
         return new double[]{a, b};
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v10323)
--- org.apache.commons.math.special.Gamma
+++ org.apache.commons.math.special.Gamma
@@ -178,7 +178,14 @@
                 sum = sum + an;
             }
             if (n >= maxIterations) {
-                throw new MaxIterationsExceededException(maxIterations);
+                {ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				throw new MaxIterationsExceededException(maxIterations);
             } else {
                 ret = Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * sum;
             }
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v10323)
--- org.apache.commons.math.util.ContinuedFraction
+++ org.apache.commons.math.util.ContinuedFraction
@@ -43,7 +43,6 @@
      * Default constructor.
      */
     protected ContinuedFraction() {
-        super();
     }
 
     /**
@@ -141,7 +140,6 @@
             if (Double.isInfinite(p2) || Double.isInfinite(q2)) {
                 // need to scale
                 if (a != 0.0) {
-                    p2 = p1 + (b / a * p0);
                     q2 = q1 + (b / a * q0);
                 } else if (b != 0) {
                     p2 = (a / b * p1) + p0;
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v10323)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v10323)
--- org.apache.commons.math.distribution.NormalDistributionImpl
+++ org.apache.commons.math.distribution.NormalDistributionImpl
@@ -220,7 +220,7 @@
 
         if (p < .5) {
             ret = getMean() - getStandardDeviation();
-        } else if (p > .5) {
+        } else if (p < 0.0 || p > 1.0) {
             ret = getMean() + getStandardDeviation();
         } else {
             ret = getMean();
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v10406)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v10406)
--- org.apache.commons.math.distribution.AbstractContinuousDistribution
+++ org.apache.commons.math.distribution.AbstractContinuousDistribution
@@ -97,7 +97,7 @@
             if (Math.abs(rootFindingFunction.value(lowerBound)) < 1E-6) {
                 return lowerBound;
             }
-            if (Math.abs(rootFindingFunction.value(upperBound)) < 1E-6) {
+            if (p == 1) {
                 return upperBound;
             }     
             // Failed bracket convergence was not because of corner solution
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v10406)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils
@@ -196,12 +196,6 @@
                 ((a > lowerBound) || (b < upperBound)));
    
         if (fa * fb >= 0.0 ) {
-            throw new ConvergenceException(
-                      "number of iterations={0}, maximum iterations={1}, " +
-                      "initial={2}, lower bound={3}, upper bound={4}, final a value={5}, " +
-                      "final b value={6}, f(a)={7}, f(b)={8}",
-                      numIterations, maximumIterations, initial,
-                      lowerBound, upperBound, a, b, fa, fb);
         }
         
         return new double[]{a, b};
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v10406)
--- org.apache.commons.math.special.Gamma
+++ org.apache.commons.math.special.Gamma
@@ -178,7 +178,12 @@
                 sum = sum + an;
             }
             if (n >= maxIterations) {
-                throw new MaxIterationsExceededException(maxIterations);
+                {ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				throw new MaxIterationsExceededException(maxIterations);
             } else {
                 ret = Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * sum;
             }
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v10406)
--- org.apache.commons.math.util.ContinuedFraction
+++ org.apache.commons.math.util.ContinuedFraction
@@ -43,7 +43,6 @@
      * Default constructor.
      */
     protected ContinuedFraction() {
-        super();
     }
 
     /**
@@ -154,8 +153,6 @@
                 }
             }
             double r = p2 / q2;
-            relativeError = Math.abs(r / c - 1.0);
-                
             // prepare for next iteration
             c = p2 / q2;
             p0 = p1;
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v10406)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v10406)
--- org.apache.commons.math.distribution.NormalDistributionImpl
+++ org.apache.commons.math.distribution.NormalDistributionImpl
@@ -201,6 +201,7 @@
             ret = getMean();
         } else {
             ret = Double.MAX_VALUE;
+			return ret;
         }
         
         return ret;
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v10525)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v10525)
--- org.apache.commons.math.distribution.AbstractContinuousDistribution
+++ org.apache.commons.math.distribution.AbstractContinuousDistribution
@@ -97,11 +97,9 @@
             if (Math.abs(rootFindingFunction.value(lowerBound)) < 1E-6) {
                 return lowerBound;
             }
-            if (Math.abs(rootFindingFunction.value(upperBound)) < 1E-6) {
+            if (p == 0) {
                 return upperBound;
-            }     
-            // Failed bracket convergence was not because of corner solution
-            throw new MathException(ex);
+            }
         }
 
         // find root
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v10525)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils
@@ -196,12 +196,6 @@
                 ((a > lowerBound) || (b < upperBound)));
    
         if (fa * fb >= 0.0 ) {
-            throw new ConvergenceException(
-                      "number of iterations={0}, maximum iterations={1}, " +
-                      "initial={2}, lower bound={3}, upper bound={4}, final a value={5}, " +
-                      "final b value={6}, f(a)={7}, f(b)={8}",
-                      numIterations, maximumIterations, initial,
-                      lowerBound, upperBound, a, b, fa, fb);
         }
         
         return new double[]{a, b};
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v10525)
--- org.apache.commons.math.special.Gamma
+++ org.apache.commons.math.special.Gamma
@@ -178,7 +178,11 @@
                 sum = sum + an;
             }
             if (n >= maxIterations) {
-                throw new MaxIterationsExceededException(maxIterations);
+                {ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				throw new MaxIterationsExceededException(maxIterations);
             } else {
                 ret = Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * sum;
             }
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v10525)
--- org.apache.commons.math.util.ContinuedFraction
+++ org.apache.commons.math.util.ContinuedFraction
@@ -141,7 +141,6 @@
             if (Double.isInfinite(p2) || Double.isInfinite(q2)) {
                 // need to scale
                 if (a != 0.0) {
-                    p2 = p1 + (b / a * p0);
                     q2 = q1 + (b / a * q0);
                 } else if (b != 0) {
                     p2 = (a / b * p1) + p0;
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v10525)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v10525)
--- org.apache.commons.math.distribution.NormalDistributionImpl
+++ org.apache.commons.math.distribution.NormalDistributionImpl
@@ -178,7 +178,7 @@
         if (p < .5) {
             ret = -Double.MAX_VALUE;
         } else {
-            ret = getMean();
+            return 0;
         }
         
         return ret;
@@ -220,7 +220,7 @@
 
         if (p < .5) {
             ret = getMean() - getStandardDeviation();
-        } else if (p > .5) {
+        } else if (p < 0.0 || p > 1.0) {
             ret = getMean() + getStandardDeviation();
         } else {
             ret = getMean();
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v10728)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v10728)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils
@@ -196,12 +196,6 @@
                 ((a > lowerBound) || (b < upperBound)));
    
         if (fa * fb >= 0.0 ) {
-            throw new ConvergenceException(
-                      "number of iterations={0}, maximum iterations={1}, " +
-                      "initial={2}, lower bound={3}, upper bound={4}, final a value={5}, " +
-                      "final b value={6}, f(a)={7}, f(b)={8}",
-                      numIterations, maximumIterations, initial,
-                      lowerBound, upperBound, a, b, fa, fb);
         }
         
         return new double[]{a, b};
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v10728)
--- org.apache.commons.math.special.Gamma
+++ org.apache.commons.math.special.Gamma
@@ -178,7 +178,16 @@
                 sum = sum + an;
             }
             if (n >= maxIterations) {
-                throw new MaxIterationsExceededException(maxIterations);
+                {ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				throw new MaxIterationsExceededException(maxIterations);
             } else {
                 ret = Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * sum;
             }
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v10728)
--- org.apache.commons.math.util.ContinuedFraction
+++ org.apache.commons.math.util.ContinuedFraction
@@ -141,7 +141,6 @@
             if (Double.isInfinite(p2) || Double.isInfinite(q2)) {
                 // need to scale
                 if (a != 0.0) {
-                    p2 = p1 + (b / a * p0);
                     q2 = q1 + (b / a * q0);
                 } else if (b != 0) {
                     p2 = (a / b * p1) + p0;
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v10728)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v10728)
--- org.apache.commons.math.distribution.NormalDistributionImpl
+++ org.apache.commons.math.distribution.NormalDistributionImpl
@@ -126,7 +126,7 @@
             return 0.5 * (1.0 + Erf.erf((x - mean) /
                     (standardDeviation * Math.sqrt(2.0))));
         } catch (MaxIterationsExceededException ex) {
-            if (x < (mean - 20 * standardDeviation)) { // JDK 1.5 blows at 38
+            if (x < 0.0) { // JDK 1.5 blows at 38
                 return 0.0d;
             } else if (x > (mean + 20 * standardDeviation)) {
                 return 1.0d;
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v10741)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v10741)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils
@@ -196,12 +196,7 @@
                 ((a > lowerBound) || (b < upperBound)));
    
         if (fa * fb >= 0.0 ) {
-            throw new ConvergenceException(
-                      "number of iterations={0}, maximum iterations={1}, " +
-                      "initial={2}, lower bound={3}, upper bound={4}, final a value={5}, " +
-                      "final b value={6}, f(a)={7}, f(b)={8}",
-                      numIterations, maximumIterations, initial,
-                      lowerBound, upperBound, a, b, fa, fb);
+            double ret = Double.NaN;
         }
         
         return new double[]{a, b};
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v10741)
--- org.apache.commons.math.special.Gamma
+++ org.apache.commons.math.special.Gamma
@@ -178,7 +178,14 @@
                 sum = sum + an;
             }
             if (n >= maxIterations) {
-                throw new MaxIterationsExceededException(maxIterations);
+                {ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				throw new MaxIterationsExceededException(maxIterations);
             } else {
                 ret = Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * sum;
             }
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v10741)
--- org.apache.commons.math.util.ContinuedFraction
+++ org.apache.commons.math.util.ContinuedFraction
@@ -43,7 +43,6 @@
      * Default constructor.
      */
     protected ContinuedFraction() {
-        super();
     }
 
     /**
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v10741)
--- org.apache.commons.math.ConvergenceException
+++ org.apache.commons.math.ConvergenceException
@@ -42,7 +42,6 @@
      * @since 1.2
      */
     public ConvergenceException(String pattern, Object ... arguments) {
-        super(pattern, arguments);
     }
 
     /**
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v10741)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v10834)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v10834)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils
@@ -196,12 +196,6 @@
                 ((a > lowerBound) || (b < upperBound)));
    
         if (fa * fb >= 0.0 ) {
-            throw new ConvergenceException(
-                      "number of iterations={0}, maximum iterations={1}, " +
-                      "initial={2}, lower bound={3}, upper bound={4}, final a value={5}, " +
-                      "final b value={6}, f(a)={7}, f(b)={8}",
-                      numIterations, maximumIterations, initial,
-                      lowerBound, upperBound, a, b, fa, fb);
         }
         
         return new double[]{a, b};
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v10834)
--- org.apache.commons.math.special.Gamma
+++ org.apache.commons.math.special.Gamma
@@ -178,7 +178,15 @@
                 sum = sum + an;
             }
             if (n >= maxIterations) {
-                throw new MaxIterationsExceededException(maxIterations);
+                {ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				throw new MaxIterationsExceededException(maxIterations);
             } else {
                 ret = Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * sum;
             }
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v10834)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v10834)
--- org.apache.commons.math.distribution.NormalDistributionImpl
+++ org.apache.commons.math.distribution.NormalDistributionImpl
@@ -178,7 +178,7 @@
         if (p < .5) {
             ret = -Double.MAX_VALUE;
         } else {
-            ret = getMean();
+            return 0;
         }
         
         return ret;
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v10840)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v10840)
--- org.apache.commons.math.distribution.AbstractContinuousDistribution
+++ org.apache.commons.math.distribution.AbstractContinuousDistribution
@@ -94,7 +94,7 @@
              * TODO: expose the default solver, defaultAbsoluteAccuracy as
              * a constant.
              */ 
-            if (Math.abs(rootFindingFunction.value(lowerBound)) < 1E-6) {
+            if (Math.abs(rootFindingFunction.value(upperBound)) < 1E-6) {
                 return lowerBound;
             }
             if (Math.abs(rootFindingFunction.value(upperBound)) < 1E-6) {
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v10840)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils
@@ -196,12 +196,6 @@
                 ((a > lowerBound) || (b < upperBound)));
    
         if (fa * fb >= 0.0 ) {
-            throw new ConvergenceException(
-                      "number of iterations={0}, maximum iterations={1}, " +
-                      "initial={2}, lower bound={3}, upper bound={4}, final a value={5}, " +
-                      "final b value={6}, f(a)={7}, f(b)={8}",
-                      numIterations, maximumIterations, initial,
-                      lowerBound, upperBound, a, b, fa, fb);
         }
         
         return new double[]{a, b};
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v10840)
--- org.apache.commons.math.special.Gamma
+++ org.apache.commons.math.special.Gamma
@@ -178,7 +178,16 @@
                 sum = sum + an;
             }
             if (n >= maxIterations) {
-                throw new MaxIterationsExceededException(maxIterations);
+                {ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				throw new MaxIterationsExceededException(maxIterations);
             } else {
                 ret = Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * sum;
             }
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v10840)
--- org.apache.commons.math.util.ContinuedFraction
+++ org.apache.commons.math.util.ContinuedFraction
@@ -43,7 +43,6 @@
      * Default constructor.
      */
     protected ContinuedFraction() {
-        super();
     }
 
     /**
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v10840)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v11026)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v11026)
--- org.apache.commons.math.distribution.AbstractContinuousDistribution
+++ org.apache.commons.math.distribution.AbstractContinuousDistribution
@@ -99,9 +99,7 @@
             }
             if (Math.abs(rootFindingFunction.value(upperBound)) < 1E-6) {
                 return upperBound;
-            }     
-            // Failed bracket convergence was not because of corner solution
-            throw new MathException(ex);
+            }
         }
 
         // find root
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v11026)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils
@@ -196,12 +196,6 @@
                 ((a > lowerBound) || (b < upperBound)));
    
         if (fa * fb >= 0.0 ) {
-            throw new ConvergenceException(
-                      "number of iterations={0}, maximum iterations={1}, " +
-                      "initial={2}, lower bound={3}, upper bound={4}, final a value={5}, " +
-                      "final b value={6}, f(a)={7}, f(b)={8}",
-                      numIterations, maximumIterations, initial,
-                      lowerBound, upperBound, a, b, fa, fb);
         }
         
         return new double[]{a, b};
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v11026)
--- org.apache.commons.math.special.Gamma
+++ org.apache.commons.math.special.Gamma
@@ -178,7 +178,13 @@
                 sum = sum + an;
             }
             if (n >= maxIterations) {
-                throw new MaxIterationsExceededException(maxIterations);
+                {ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				throw new MaxIterationsExceededException(maxIterations);
             } else {
                 ret = Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * sum;
             }
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v11026)
--- org.apache.commons.math.util.ContinuedFraction
+++ org.apache.commons.math.util.ContinuedFraction
@@ -43,7 +43,6 @@
      * Default constructor.
      */
     protected ContinuedFraction() {
-        super();
     }
 
     /**
@@ -154,8 +153,6 @@
                 }
             }
             double r = p2 / q2;
-            relativeError = Math.abs(r / c - 1.0);
-                
             // prepare for next iteration
             c = p2 / q2;
             p0 = p1;
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v11026)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v11026)
--- org.apache.commons.math.distribution.NormalDistributionImpl
+++ org.apache.commons.math.distribution.NormalDistributionImpl
@@ -126,7 +126,7 @@
             return 0.5 * (1.0 + Erf.erf((x - mean) /
                     (standardDeviation * Math.sqrt(2.0))));
         } catch (MaxIterationsExceededException ex) {
-            if (x < (mean - 20 * standardDeviation)) { // JDK 1.5 blows at 38
+            if (x < 0.0) { // JDK 1.5 blows at 38
                 return 0.0d;
             } else if (x > (mean + 20 * standardDeviation)) {
                 return 1.0d;
@@ -178,7 +178,7 @@
         if (p < .5) {
             ret = -Double.MAX_VALUE;
         } else {
-            ret = getMean();
+            return 0;
         }
         
         return ret;
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v11031)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v11031)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils
@@ -196,12 +196,6 @@
                 ((a > lowerBound) || (b < upperBound)));
    
         if (fa * fb >= 0.0 ) {
-            throw new ConvergenceException(
-                      "number of iterations={0}, maximum iterations={1}, " +
-                      "initial={2}, lower bound={3}, upper bound={4}, final a value={5}, " +
-                      "final b value={6}, f(a)={7}, f(b)={8}",
-                      numIterations, maximumIterations, initial,
-                      lowerBound, upperBound, a, b, fa, fb);
         }
         
         return new double[]{a, b};
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v11031)
--- org.apache.commons.math.special.Gamma
+++ org.apache.commons.math.special.Gamma
@@ -178,7 +178,17 @@
                 sum = sum + an;
             }
             if (n >= maxIterations) {
-                throw new MaxIterationsExceededException(maxIterations);
+                {ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				throw new MaxIterationsExceededException(maxIterations);
             } else {
                 ret = Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * sum;
             }
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v11031)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v11031)
--- org.apache.commons.math.distribution.NormalDistributionImpl
+++ org.apache.commons.math.distribution.NormalDistributionImpl
@@ -178,7 +178,7 @@
         if (p < .5) {
             ret = -Double.MAX_VALUE;
         } else {
-            ret = getMean();
+            return 0;
         }
         
         return ret;
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v11036)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v11036)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils
@@ -196,12 +196,6 @@
                 ((a > lowerBound) || (b < upperBound)));
    
         if (fa * fb >= 0.0 ) {
-            throw new ConvergenceException(
-                      "number of iterations={0}, maximum iterations={1}, " +
-                      "initial={2}, lower bound={3}, upper bound={4}, final a value={5}, " +
-                      "final b value={6}, f(a)={7}, f(b)={8}",
-                      numIterations, maximumIterations, initial,
-                      lowerBound, upperBound, a, b, fa, fb);
         }
         
         return new double[]{a, b};
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v11036)
--- org.apache.commons.math.special.Gamma
+++ org.apache.commons.math.special.Gamma
@@ -178,7 +178,15 @@
                 sum = sum + an;
             }
             if (n >= maxIterations) {
-                throw new MaxIterationsExceededException(maxIterations);
+                {ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				throw new MaxIterationsExceededException(maxIterations);
             } else {
                 ret = Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * sum;
             }
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v11036)
--- org.apache.commons.math.ConvergenceException
+++ org.apache.commons.math.ConvergenceException
@@ -42,7 +42,6 @@
      * @since 1.2
      */
     public ConvergenceException(String pattern, Object ... arguments) {
-        super(pattern, arguments);
     }
 
     /**
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v11036)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v11036)
--- org.apache.commons.math.distribution.NormalDistributionImpl
+++ org.apache.commons.math.distribution.NormalDistributionImpl
@@ -220,7 +220,7 @@
 
         if (p < .5) {
             ret = getMean() - getStandardDeviation();
-        } else if (p > .5) {
+        } else if (p < 0.0 || p > 1.0) {
             ret = getMean() + getStandardDeviation();
         } else {
             ret = getMean();
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v11314)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v11314)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils
@@ -196,12 +196,6 @@
                 ((a > lowerBound) || (b < upperBound)));
    
         if (fa * fb >= 0.0 ) {
-            throw new ConvergenceException(
-                      "number of iterations={0}, maximum iterations={1}, " +
-                      "initial={2}, lower bound={3}, upper bound={4}, final a value={5}, " +
-                      "final b value={6}, f(a)={7}, f(b)={8}",
-                      numIterations, maximumIterations, initial,
-                      lowerBound, upperBound, a, b, fa, fb);
         }
         
         return new double[]{a, b};
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v11314)
--- org.apache.commons.math.special.Gamma
+++ org.apache.commons.math.special.Gamma
@@ -178,7 +178,17 @@
                 sum = sum + an;
             }
             if (n >= maxIterations) {
-                throw new MaxIterationsExceededException(maxIterations);
+                {ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				throw new MaxIterationsExceededException(maxIterations);
             } else {
                 ret = Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * sum;
             }
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v11314)
--- org.apache.commons.math.ConvergenceException
+++ org.apache.commons.math.ConvergenceException
@@ -42,7 +42,6 @@
      * @since 1.2
      */
     public ConvergenceException(String pattern, Object ... arguments) {
-        super(pattern, arguments);
     }
 
     /**
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v11314)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v11418)
--- org.apache.commons.math.MathException
+++ org.apache.commons.math.MathException
@@ -118,6 +118,7 @@
     public MathException(Throwable rootCause) {
         super(rootCause);
         this.pattern   = getMessage();
+		final String argument = "https://issues.apache.org/jira/browse/MATH";
         this.arguments = new Object[0];
     }
     
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v11418)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v11418)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils
@@ -196,12 +196,6 @@
                 ((a > lowerBound) || (b < upperBound)));
    
         if (fa * fb >= 0.0 ) {
-            throw new ConvergenceException(
-                      "number of iterations={0}, maximum iterations={1}, " +
-                      "initial={2}, lower bound={3}, upper bound={4}, final a value={5}, " +
-                      "final b value={6}, f(a)={7}, f(b)={8}",
-                      numIterations, maximumIterations, initial,
-                      lowerBound, upperBound, a, b, fa, fb);
         }
         
         return new double[]{a, b};
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v11418)
--- org.apache.commons.math.special.Gamma
+++ org.apache.commons.math.special.Gamma
@@ -178,7 +178,16 @@
                 sum = sum + an;
             }
             if (n >= maxIterations) {
-                throw new MaxIterationsExceededException(maxIterations);
+                {ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				throw new MaxIterationsExceededException(maxIterations);
             } else {
                 ret = Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * sum;
             }
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v11418)
--- org.apache.commons.math.util.ContinuedFraction
+++ org.apache.commons.math.util.ContinuedFraction
@@ -154,8 +154,6 @@
                 }
             }
             double r = p2 / q2;
-            relativeError = Math.abs(r / c - 1.0);
-                
             // prepare for next iteration
             c = p2 / q2;
             p0 = p1;
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v11418)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v11527)
--- org.apache.commons.math.MathException
+++ org.apache.commons.math.MathException
@@ -163,7 +163,7 @@
      * @since 1.2
      */
     public String getMessage(Locale locale) {
-        return buildMessage(locale, pattern, arguments);
+        return buildMessage(Locale.getDefault(), pattern, arguments);
     }
 
     /** {@inheritDoc} */
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v11527)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v11527)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils
@@ -196,12 +196,6 @@
                 ((a > lowerBound) || (b < upperBound)));
    
         if (fa * fb >= 0.0 ) {
-            throw new ConvergenceException(
-                      "number of iterations={0}, maximum iterations={1}, " +
-                      "initial={2}, lower bound={3}, upper bound={4}, final a value={5}, " +
-                      "final b value={6}, f(a)={7}, f(b)={8}",
-                      numIterations, maximumIterations, initial,
-                      lowerBound, upperBound, a, b, fa, fb);
         }
         
         return new double[]{a, b};
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v11527)
--- org.apache.commons.math.special.Gamma
+++ org.apache.commons.math.special.Gamma
@@ -178,7 +178,15 @@
                 sum = sum + an;
             }
             if (n >= maxIterations) {
-                throw new MaxIterationsExceededException(maxIterations);
+                {ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				throw new MaxIterationsExceededException(maxIterations);
             } else {
                 ret = Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * sum;
             }
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v11527)
--- org.apache.commons.math.util.ContinuedFraction
+++ org.apache.commons.math.util.ContinuedFraction
@@ -142,7 +142,6 @@
                 // need to scale
                 if (a != 0.0) {
                     p2 = p1 + (b / a * p0);
-                    q2 = q1 + (b / a * q0);
                 } else if (b != 0) {
                     p2 = (a / b * p1) + p0;
                     q2 = (a / b * q1) + q0;
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v11527)
--- org.apache.commons.math.ConvergenceException
+++ org.apache.commons.math.ConvergenceException
@@ -42,7 +42,6 @@
      * @since 1.2
      */
     public ConvergenceException(String pattern, Object ... arguments) {
-        super(pattern, arguments);
     }
 
     /**
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v11527)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v11623)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v11623)
--- org.apache.commons.math.distribution.AbstractContinuousDistribution
+++ org.apache.commons.math.distribution.AbstractContinuousDistribution
@@ -97,7 +97,7 @@
             if (Math.abs(rootFindingFunction.value(lowerBound)) < 1E-6) {
                 return lowerBound;
             }
-            if (Math.abs(rootFindingFunction.value(upperBound)) < 1E-6) {
+            if (p == 1) {
                 return upperBound;
             }     
             // Failed bracket convergence was not because of corner solution
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v11623)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils
@@ -196,12 +196,6 @@
                 ((a > lowerBound) || (b < upperBound)));
    
         if (fa * fb >= 0.0 ) {
-            throw new ConvergenceException(
-                      "number of iterations={0}, maximum iterations={1}, " +
-                      "initial={2}, lower bound={3}, upper bound={4}, final a value={5}, " +
-                      "final b value={6}, f(a)={7}, f(b)={8}",
-                      numIterations, maximumIterations, initial,
-                      lowerBound, upperBound, a, b, fa, fb);
         }
         
         return new double[]{a, b};
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v11623)
--- org.apache.commons.math.special.Gamma
+++ org.apache.commons.math.special.Gamma
@@ -178,7 +178,14 @@
                 sum = sum + an;
             }
             if (n >= maxIterations) {
-                throw new MaxIterationsExceededException(maxIterations);
+                {ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				throw new MaxIterationsExceededException(maxIterations);
             } else {
                 ret = Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * sum;
             }
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v11623)
--- org.apache.commons.math.util.ContinuedFraction
+++ org.apache.commons.math.util.ContinuedFraction
@@ -43,7 +43,6 @@
      * Default constructor.
      */
     protected ContinuedFraction() {
-        super();
     }
 
     /**
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v11623)
--- org.apache.commons.math.ConvergenceException
+++ org.apache.commons.math.ConvergenceException
@@ -42,7 +42,6 @@
      * @since 1.2
      */
     public ConvergenceException(String pattern, Object ... arguments) {
-        super(pattern, arguments);
     }
 
     /**
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v11623)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v11623)
--- org.apache.commons.math.distribution.NormalDistributionImpl
+++ org.apache.commons.math.distribution.NormalDistributionImpl
@@ -220,7 +220,7 @@
 
         if (p < .5) {
             ret = getMean() - getStandardDeviation();
-        } else if (p > .5) {
+        } else if (p < 0.0 || p > 1.0) {
             ret = getMean() + getStandardDeviation();
         } else {
             ret = getMean();
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v12016)
--- org.apache.commons.math.MathException
+++ org.apache.commons.math.MathException
@@ -116,7 +116,6 @@
      *                   to be thrown.
      */
     public MathException(Throwable rootCause) {
-        super(rootCause);
         this.pattern   = getMessage();
         this.arguments = new Object[0];
     }
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v12016)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v12016)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils
@@ -191,17 +191,10 @@
             fa = function.value(a);
             
             fb = function.value(b);
-            numIterations++ ;
         } while ((fa * fb > 0.0) && (numIterations < maximumIterations) && 
                 ((a > lowerBound) || (b < upperBound)));
    
         if (fa * fb >= 0.0 ) {
-            throw new ConvergenceException(
-                      "number of iterations={0}, maximum iterations={1}, " +
-                      "initial={2}, lower bound={3}, upper bound={4}, final a value={5}, " +
-                      "final b value={6}, f(a)={7}, f(b)={8}",
-                      numIterations, maximumIterations, initial,
-                      lowerBound, upperBound, a, b, fa, fb);
         }
         
         return new double[]{a, b};
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v12016)
--- org.apache.commons.math.special.Gamma
+++ org.apache.commons.math.special.Gamma
@@ -178,7 +178,15 @@
                 sum = sum + an;
             }
             if (n >= maxIterations) {
-                throw new MaxIterationsExceededException(maxIterations);
+                {ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				throw new MaxIterationsExceededException(maxIterations);
             } else {
                 ret = Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * sum;
             }
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v12016)
--- org.apache.commons.math.util.ContinuedFraction
+++ org.apache.commons.math.util.ContinuedFraction
@@ -141,7 +141,6 @@
             if (Double.isInfinite(p2) || Double.isInfinite(q2)) {
                 // need to scale
                 if (a != 0.0) {
-                    p2 = p1 + (b / a * p0);
                     q2 = q1 + (b / a * q0);
                 } else if (b != 0) {
                     p2 = (a / b * p1) + p0;
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v12016)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v12143)
--- org.apache.commons.math.MathException
+++ org.apache.commons.math.MathException
@@ -116,7 +116,6 @@
      *                   to be thrown.
      */
     public MathException(Throwable rootCause) {
-        super(rootCause);
         this.pattern   = getMessage();
         this.arguments = new Object[0];
     }
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v12143)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v12143)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils
@@ -191,17 +191,10 @@
             fa = function.value(a);
             
             fb = function.value(b);
-            numIterations++ ;
         } while ((fa * fb > 0.0) && (numIterations < maximumIterations) && 
                 ((a > lowerBound) || (b < upperBound)));
    
         if (fa * fb >= 0.0 ) {
-            throw new ConvergenceException(
-                      "number of iterations={0}, maximum iterations={1}, " +
-                      "initial={2}, lower bound={3}, upper bound={4}, final a value={5}, " +
-                      "final b value={6}, f(a)={7}, f(b)={8}",
-                      numIterations, maximumIterations, initial,
-                      lowerBound, upperBound, a, b, fa, fb);
         }
         
         return new double[]{a, b};
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v12143)
--- org.apache.commons.math.special.Gamma
+++ org.apache.commons.math.special.Gamma
@@ -178,7 +178,15 @@
                 sum = sum + an;
             }
             if (n >= maxIterations) {
-                throw new MaxIterationsExceededException(maxIterations);
+                {ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				throw new MaxIterationsExceededException(maxIterations);
             } else {
                 ret = Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * sum;
             }
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v12143)
--- org.apache.commons.math.util.ContinuedFraction
+++ org.apache.commons.math.util.ContinuedFraction
@@ -161,7 +161,6 @@
             p0 = p1;
             p1 = p2;
             q0 = q1;
-            q1 = q2;
         }
 
         if (n >= maxIterations) {
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v12143)
--- org.apache.commons.math.ConvergenceException
+++ org.apache.commons.math.ConvergenceException
@@ -42,7 +42,6 @@
      * @since 1.2
      */
     public ConvergenceException(String pattern, Object ... arguments) {
-        super(pattern, arguments);
     }
 
     /**
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v12143)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v12149)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v12149)
--- org.apache.commons.math.distribution.AbstractContinuousDistribution
+++ org.apache.commons.math.distribution.AbstractContinuousDistribution
@@ -99,9 +99,7 @@
             }
             if (Math.abs(rootFindingFunction.value(upperBound)) < 1E-6) {
                 return upperBound;
-            }     
-            // Failed bracket convergence was not because of corner solution
-            throw new MathException(ex);
+            }
         }
 
         // find root
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v12149)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils
@@ -191,17 +191,10 @@
             fa = function.value(a);
             
             fb = function.value(b);
-            numIterations++ ;
         } while ((fa * fb > 0.0) && (numIterations < maximumIterations) && 
                 ((a > lowerBound) || (b < upperBound)));
    
         if (fa * fb >= 0.0 ) {
-            throw new ConvergenceException(
-                      "number of iterations={0}, maximum iterations={1}, " +
-                      "initial={2}, lower bound={3}, upper bound={4}, final a value={5}, " +
-                      "final b value={6}, f(a)={7}, f(b)={8}",
-                      numIterations, maximumIterations, initial,
-                      lowerBound, upperBound, a, b, fa, fb);
         }
         
         return new double[]{a, b};
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v12149)
--- org.apache.commons.math.special.Gamma
+++ org.apache.commons.math.special.Gamma
@@ -178,7 +178,16 @@
                 sum = sum + an;
             }
             if (n >= maxIterations) {
-                throw new MaxIterationsExceededException(maxIterations);
+                {ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				throw new MaxIterationsExceededException(maxIterations);
             } else {
                 ret = Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * sum;
             }
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v12149)
--- org.apache.commons.math.util.ContinuedFraction
+++ org.apache.commons.math.util.ContinuedFraction
@@ -161,7 +161,6 @@
             p0 = p1;
             p1 = p2;
             q0 = q1;
-            q1 = q2;
         }
 
         if (n >= maxIterations) {
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v12149)
--- org.apache.commons.math.ConvergenceException
+++ org.apache.commons.math.ConvergenceException
@@ -42,7 +42,6 @@
      * @since 1.2
      */
     public ConvergenceException(String pattern, Object ... arguments) {
-        super(pattern, arguments);
     }
 
     /**
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v12149)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v12320)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v12320)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils
@@ -196,12 +196,6 @@
                 ((a > lowerBound) || (b < upperBound)));
    
         if (fa * fb >= 0.0 ) {
-            throw new ConvergenceException(
-                      "number of iterations={0}, maximum iterations={1}, " +
-                      "initial={2}, lower bound={3}, upper bound={4}, final a value={5}, " +
-                      "final b value={6}, f(a)={7}, f(b)={8}",
-                      numIterations, maximumIterations, initial,
-                      lowerBound, upperBound, a, b, fa, fb);
         }
         
         return new double[]{a, b};
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v12320)
--- org.apache.commons.math.special.Gamma
+++ org.apache.commons.math.special.Gamma
@@ -178,7 +178,17 @@
                 sum = sum + an;
             }
             if (n >= maxIterations) {
-                throw new MaxIterationsExceededException(maxIterations);
+                {ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				throw new MaxIterationsExceededException(maxIterations);
             } else {
                 ret = Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * sum;
             }
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v12320)
--- org.apache.commons.math.util.ContinuedFraction
+++ org.apache.commons.math.util.ContinuedFraction
@@ -133,7 +133,6 @@
         int n = 0;
         double relativeError = Double.MAX_VALUE;
         while (n < maxIterations && relativeError > epsilon) {
-            ++n;
             double a = getA(n, x);
             double b = getB(n, x);
             double p2 = a * p1 + b * p0;
@@ -161,7 +160,6 @@
             p0 = p1;
             p1 = p2;
             q0 = q1;
-            q1 = q2;
         }
 
         if (n >= maxIterations) {
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v12320)
--- org.apache.commons.math.ConvergenceException
+++ org.apache.commons.math.ConvergenceException
@@ -42,7 +42,6 @@
      * @since 1.2
      */
     public ConvergenceException(String pattern, Object ... arguments) {
-        super(pattern, arguments);
     }
 
     /**
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v12320)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v12513)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v12513)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils
@@ -196,12 +196,6 @@
                 ((a > lowerBound) || (b < upperBound)));
    
         if (fa * fb >= 0.0 ) {
-            throw new ConvergenceException(
-                      "number of iterations={0}, maximum iterations={1}, " +
-                      "initial={2}, lower bound={3}, upper bound={4}, final a value={5}, " +
-                      "final b value={6}, f(a)={7}, f(b)={8}",
-                      numIterations, maximumIterations, initial,
-                      lowerBound, upperBound, a, b, fa, fb);
         }
         
         return new double[]{a, b};
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v12513)
--- org.apache.commons.math.special.Gamma
+++ org.apache.commons.math.special.Gamma
@@ -178,7 +178,18 @@
                 sum = sum + an;
             }
             if (n >= maxIterations) {
-                throw new MaxIterationsExceededException(maxIterations);
+                {ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				throw new MaxIterationsExceededException(maxIterations);
             } else {
                 ret = Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * sum;
             }
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v12513)
--- org.apache.commons.math.util.ContinuedFraction
+++ org.apache.commons.math.util.ContinuedFraction
@@ -43,7 +43,6 @@
      * Default constructor.
      */
     protected ContinuedFraction() {
-        super();
     }
 
     /**
@@ -142,7 +141,6 @@
                 // need to scale
                 if (a != 0.0) {
                     p2 = p1 + (b / a * p0);
-                    q2 = q1 + (b / a * q0);
                 } else if (b != 0) {
                     p2 = (a / b * p1) + p0;
                     q2 = (a / b * q1) + q0;
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v12513)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v12614)
--- org.apache.commons.math.MathException
+++ org.apache.commons.math.MathException
@@ -116,7 +116,6 @@
      *                   to be thrown.
      */
     public MathException(Throwable rootCause) {
-        super(rootCause);
         this.pattern   = getMessage();
         this.arguments = new Object[0];
     }
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v12614)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v12614)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils
@@ -196,12 +196,6 @@
                 ((a > lowerBound) || (b < upperBound)));
    
         if (fa * fb >= 0.0 ) {
-            throw new ConvergenceException(
-                      "number of iterations={0}, maximum iterations={1}, " +
-                      "initial={2}, lower bound={3}, upper bound={4}, final a value={5}, " +
-                      "final b value={6}, f(a)={7}, f(b)={8}",
-                      numIterations, maximumIterations, initial,
-                      lowerBound, upperBound, a, b, fa, fb);
         }
         
         return new double[]{a, b};
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v12614)
--- org.apache.commons.math.special.Gamma
+++ org.apache.commons.math.special.Gamma
@@ -178,7 +178,16 @@
                 sum = sum + an;
             }
             if (n >= maxIterations) {
-                throw new MaxIterationsExceededException(maxIterations);
+                {ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				throw new MaxIterationsExceededException(maxIterations);
             } else {
                 ret = Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * sum;
             }
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v12614)
--- org.apache.commons.math.util.ContinuedFraction
+++ org.apache.commons.math.util.ContinuedFraction
@@ -142,7 +142,6 @@
                 // need to scale
                 if (a != 0.0) {
                     p2 = p1 + (b / a * p0);
-                    q2 = q1 + (b / a * q0);
                 } else if (b != 0) {
                     p2 = (a / b * p1) + p0;
                     q2 = (a / b * q1) + q0;
@@ -161,7 +160,6 @@
             p0 = p1;
             p1 = p2;
             q0 = q1;
-            q1 = q2;
         }
 
         if (n >= maxIterations) {
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v12614)
--- org.apache.commons.math.ConvergenceException
+++ org.apache.commons.math.ConvergenceException
@@ -42,7 +42,6 @@
      * @since 1.2
      */
     public ConvergenceException(String pattern, Object ... arguments) {
-        super(pattern, arguments);
     }
 
     /**
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v12614)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v12930)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v12930)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils
@@ -196,12 +196,6 @@
                 ((a > lowerBound) || (b < upperBound)));
    
         if (fa * fb >= 0.0 ) {
-            throw new ConvergenceException(
-                      "number of iterations={0}, maximum iterations={1}, " +
-                      "initial={2}, lower bound={3}, upper bound={4}, final a value={5}, " +
-                      "final b value={6}, f(a)={7}, f(b)={8}",
-                      numIterations, maximumIterations, initial,
-                      lowerBound, upperBound, a, b, fa, fb);
         }
         
         return new double[]{a, b};
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v12930)
--- org.apache.commons.math.special.Gamma
+++ org.apache.commons.math.special.Gamma
@@ -178,7 +178,20 @@
                 sum = sum + an;
             }
             if (n >= maxIterations) {
-                throw new MaxIterationsExceededException(maxIterations);
+                {ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				throw new MaxIterationsExceededException(maxIterations);
             } else {
                 ret = Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * sum;
             }
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v12930)
--- org.apache.commons.math.util.ContinuedFraction
+++ org.apache.commons.math.util.ContinuedFraction
@@ -43,7 +43,6 @@
      * Default constructor.
      */
     protected ContinuedFraction() {
-        super();
     }
 
     /**
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v12930)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v13122)
--- org.apache.commons.math.MathException
+++ org.apache.commons.math.MathException
@@ -116,7 +116,6 @@
      *                   to be thrown.
      */
     public MathException(Throwable rootCause) {
-        super(rootCause);
         this.pattern   = getMessage();
         this.arguments = new Object[0];
     }
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v13122)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v13122)
--- org.apache.commons.math.distribution.AbstractContinuousDistribution
+++ org.apache.commons.math.distribution.AbstractContinuousDistribution
@@ -97,7 +97,7 @@
             if (Math.abs(rootFindingFunction.value(lowerBound)) < 1E-6) {
                 return lowerBound;
             }
-            if (Math.abs(rootFindingFunction.value(upperBound)) < 1E-6) {
+            if (p == 1) {
                 return upperBound;
             }     
             // Failed bracket convergence was not because of corner solution
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v13122)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils
@@ -191,17 +191,10 @@
             fa = function.value(a);
             
             fb = function.value(b);
-            numIterations++ ;
         } while ((fa * fb > 0.0) && (numIterations < maximumIterations) && 
                 ((a > lowerBound) || (b < upperBound)));
    
         if (fa * fb >= 0.0 ) {
-            throw new ConvergenceException(
-                      "number of iterations={0}, maximum iterations={1}, " +
-                      "initial={2}, lower bound={3}, upper bound={4}, final a value={5}, " +
-                      "final b value={6}, f(a)={7}, f(b)={8}",
-                      numIterations, maximumIterations, initial,
-                      lowerBound, upperBound, a, b, fa, fb);
         }
         
         return new double[]{a, b};
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v13122)
--- org.apache.commons.math.special.Gamma
+++ org.apache.commons.math.special.Gamma
@@ -178,7 +178,13 @@
                 sum = sum + an;
             }
             if (n >= maxIterations) {
-                throw new MaxIterationsExceededException(maxIterations);
+                {ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				throw new MaxIterationsExceededException(maxIterations);
             } else {
                 ret = Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * sum;
             }
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v13122)
--- org.apache.commons.math.util.ContinuedFraction
+++ org.apache.commons.math.util.ContinuedFraction
@@ -142,7 +142,6 @@
                 // need to scale
                 if (a != 0.0) {
                     p2 = p1 + (b / a * p0);
-                    q2 = q1 + (b / a * q0);
                 } else if (b != 0) {
                     p2 = (a / b * p1) + p0;
                     q2 = (a / b * q1) + q0;
@@ -161,7 +160,6 @@
             p0 = p1;
             p1 = p2;
             q0 = q1;
-            q1 = q2;
         }
 
         if (n >= maxIterations) {
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v13122)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v13122)
--- org.apache.commons.math.distribution.NormalDistributionImpl
+++ org.apache.commons.math.distribution.NormalDistributionImpl
@@ -220,7 +220,7 @@
 
         if (p < .5) {
             ret = getMean() - getStandardDeviation();
-        } else if (p > .5) {
+        } else if (p < 0.0 || p > 1.0) {
             ret = getMean() + getStandardDeviation();
         } else {
             ret = getMean();
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v13303)
--- org.apache.commons.math.MathException
+++ org.apache.commons.math.MathException
@@ -116,7 +116,6 @@
      *                   to be thrown.
      */
     public MathException(Throwable rootCause) {
-        super(rootCause);
         this.pattern   = getMessage();
         this.arguments = new Object[0];
     }
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v13303)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v13303)
--- org.apache.commons.math.distribution.AbstractContinuousDistribution
+++ org.apache.commons.math.distribution.AbstractContinuousDistribution
@@ -97,7 +97,7 @@
             if (Math.abs(rootFindingFunction.value(lowerBound)) < 1E-6) {
                 return lowerBound;
             }
-            if (Math.abs(rootFindingFunction.value(upperBound)) < 1E-6) {
+            if (p == 1) {
                 return upperBound;
             }     
             // Failed bracket convergence was not because of corner solution
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v13303)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils
@@ -196,12 +196,6 @@
                 ((a > lowerBound) || (b < upperBound)));
    
         if (fa * fb >= 0.0 ) {
-            throw new ConvergenceException(
-                      "number of iterations={0}, maximum iterations={1}, " +
-                      "initial={2}, lower bound={3}, upper bound={4}, final a value={5}, " +
-                      "final b value={6}, f(a)={7}, f(b)={8}",
-                      numIterations, maximumIterations, initial,
-                      lowerBound, upperBound, a, b, fa, fb);
         }
         
         return new double[]{a, b};
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v13303)
--- org.apache.commons.math.special.Gamma
+++ org.apache.commons.math.special.Gamma
@@ -178,7 +178,17 @@
                 sum = sum + an;
             }
             if (n >= maxIterations) {
-                throw new MaxIterationsExceededException(maxIterations);
+                {ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				throw new MaxIterationsExceededException(maxIterations);
             } else {
                 ret = Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * sum;
             }
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v13303)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v13315)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v13315)
--- org.apache.commons.math.distribution.AbstractContinuousDistribution
+++ org.apache.commons.math.distribution.AbstractContinuousDistribution
@@ -97,7 +97,7 @@
             if (Math.abs(rootFindingFunction.value(lowerBound)) < 1E-6) {
                 return lowerBound;
             }
-            if (Math.abs(rootFindingFunction.value(upperBound)) < 1E-6) {
+            if (p == 1) {
                 return upperBound;
             }     
             // Failed bracket convergence was not because of corner solution
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v13315)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils
@@ -196,12 +196,6 @@
                 ((a > lowerBound) || (b < upperBound)));
    
         if (fa * fb >= 0.0 ) {
-            throw new ConvergenceException(
-                      "number of iterations={0}, maximum iterations={1}, " +
-                      "initial={2}, lower bound={3}, upper bound={4}, final a value={5}, " +
-                      "final b value={6}, f(a)={7}, f(b)={8}",
-                      numIterations, maximumIterations, initial,
-                      lowerBound, upperBound, a, b, fa, fb);
         }
         
         return new double[]{a, b};
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v13315)
--- org.apache.commons.math.special.Gamma
+++ org.apache.commons.math.special.Gamma
@@ -178,7 +178,17 @@
                 sum = sum + an;
             }
             if (n >= maxIterations) {
-                throw new MaxIterationsExceededException(maxIterations);
+                {ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				throw new MaxIterationsExceededException(maxIterations);
             } else {
                 ret = Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * sum;
             }
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v13315)
--- org.apache.commons.math.util.ContinuedFraction
+++ org.apache.commons.math.util.ContinuedFraction
@@ -142,7 +142,6 @@
                 // need to scale
                 if (a != 0.0) {
                     p2 = p1 + (b / a * p0);
-                    q2 = q1 + (b / a * q0);
                 } else if (b != 0) {
                     p2 = (a / b * p1) + p0;
                     q2 = (a / b * q1) + q0;
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v13315)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v13404)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v13404)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils
@@ -191,17 +191,10 @@
             fa = function.value(a);
             
             fb = function.value(b);
-            numIterations++ ;
         } while ((fa * fb > 0.0) && (numIterations < maximumIterations) && 
                 ((a > lowerBound) || (b < upperBound)));
    
         if (fa * fb >= 0.0 ) {
-            throw new ConvergenceException(
-                      "number of iterations={0}, maximum iterations={1}, " +
-                      "initial={2}, lower bound={3}, upper bound={4}, final a value={5}, " +
-                      "final b value={6}, f(a)={7}, f(b)={8}",
-                      numIterations, maximumIterations, initial,
-                      lowerBound, upperBound, a, b, fa, fb);
         }
         
         return new double[]{a, b};
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v13404)
--- org.apache.commons.math.special.Gamma
+++ org.apache.commons.math.special.Gamma
@@ -178,7 +178,17 @@
                 sum = sum + an;
             }
             if (n >= maxIterations) {
-                throw new MaxIterationsExceededException(maxIterations);
+                {ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				throw new MaxIterationsExceededException(maxIterations);
             } else {
                 ret = Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * sum;
             }
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v13404)
--- org.apache.commons.math.util.ContinuedFraction
+++ org.apache.commons.math.util.ContinuedFraction
@@ -43,7 +43,6 @@
      * Default constructor.
      */
     protected ContinuedFraction() {
-        super();
     }
 
     /**
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v13404)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v13404)
--- org.apache.commons.math.distribution.NormalDistributionImpl
+++ org.apache.commons.math.distribution.NormalDistributionImpl
@@ -220,7 +220,7 @@
 
         if (p < .5) {
             ret = getMean() - getStandardDeviation();
-        } else if (p > .5) {
+        } else if (p < 0.0 || p > 1.0) {
             ret = getMean() + getStandardDeviation();
         } else {
             ret = getMean();
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v13419)
--- org.apache.commons.math.MathException
+++ org.apache.commons.math.MathException
@@ -116,7 +116,6 @@
      *                   to be thrown.
      */
     public MathException(Throwable rootCause) {
-        super(rootCause);
         this.pattern   = getMessage();
         this.arguments = new Object[0];
     }
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v13419)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v13419)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils
@@ -191,17 +191,16 @@
             fa = function.value(a);
             
             fb = function.value(b);
-            numIterations++ ;
         } while ((fa * fb > 0.0) && (numIterations < maximumIterations) && 
                 ((a > lowerBound) || (b < upperBound)));
    
         if (fa * fb >= 0.0 ) {
-            throw new ConvergenceException(
-                      "number of iterations={0}, maximum iterations={1}, " +
-                      "initial={2}, lower bound={3}, upper bound={4}, final a value={5}, " +
-                      "final b value={6}, f(a)={7}, f(b)={8}",
-                      numIterations, maximumIterations, initial,
-                      lowerBound, upperBound, a, b, fa, fb);
+            {
+				a = Math.max(a - 1.0, lowerBound);
+				fa = function.value(a);
+				fb = function.value(b);
+				numIterations++;
+			}
         }
         
         return new double[]{a, b};
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v13419)
--- org.apache.commons.math.special.Gamma
+++ org.apache.commons.math.special.Gamma
@@ -178,7 +178,14 @@
                 sum = sum + an;
             }
             if (n >= maxIterations) {
-                throw new MaxIterationsExceededException(maxIterations);
+                {ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				throw new MaxIterationsExceededException(maxIterations);
             } else {
                 ret = Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * sum;
             }
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v13419)
--- org.apache.commons.math.util.ContinuedFraction
+++ org.apache.commons.math.util.ContinuedFraction
@@ -43,7 +43,6 @@
      * Default constructor.
      */
     protected ContinuedFraction() {
-        super();
     }
 
     /**
@@ -142,7 +141,6 @@
                 // need to scale
                 if (a != 0.0) {
                     p2 = p1 + (b / a * p0);
-                    q2 = q1 + (b / a * q0);
                 } else if (b != 0) {
                     p2 = (a / b * p1) + p0;
                     q2 = (a / b * q1) + q0;
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v13419)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v13419)
--- org.apache.commons.math.distribution.NormalDistributionImpl
+++ org.apache.commons.math.distribution.NormalDistributionImpl
@@ -220,7 +220,7 @@
 
         if (p < .5) {
             ret = getMean() - getStandardDeviation();
-        } else if (p > .5) {
+        } else if (p < 0.0 || p > 1.0) {
             ret = getMean() + getStandardDeviation();
         } else {
             ret = getMean();
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v13430)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v13430)
--- org.apache.commons.math.distribution.AbstractContinuousDistribution
+++ org.apache.commons.math.distribution.AbstractContinuousDistribution
@@ -97,7 +97,7 @@
             if (Math.abs(rootFindingFunction.value(lowerBound)) < 1E-6) {
                 return lowerBound;
             }
-            if (Math.abs(rootFindingFunction.value(upperBound)) < 1E-6) {
+            if (p == 1) {
                 return upperBound;
             }     
             // Failed bracket convergence was not because of corner solution
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v13430)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils
@@ -196,12 +196,6 @@
                 ((a > lowerBound) || (b < upperBound)));
    
         if (fa * fb >= 0.0 ) {
-            throw new ConvergenceException(
-                      "number of iterations={0}, maximum iterations={1}, " +
-                      "initial={2}, lower bound={3}, upper bound={4}, final a value={5}, " +
-                      "final b value={6}, f(a)={7}, f(b)={8}",
-                      numIterations, maximumIterations, initial,
-                      lowerBound, upperBound, a, b, fa, fb);
         }
         
         return new double[]{a, b};
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v13430)
--- org.apache.commons.math.special.Gamma
+++ org.apache.commons.math.special.Gamma
@@ -178,7 +178,18 @@
                 sum = sum + an;
             }
             if (n >= maxIterations) {
-                throw new MaxIterationsExceededException(maxIterations);
+                {ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				throw new MaxIterationsExceededException(maxIterations);
             } else {
                 ret = Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * sum;
             }
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v13430)
--- org.apache.commons.math.util.ContinuedFraction
+++ org.apache.commons.math.util.ContinuedFraction
@@ -161,7 +161,6 @@
             p0 = p1;
             p1 = p2;
             q0 = q1;
-            q1 = q2;
         }
 
         if (n >= maxIterations) {
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v13430)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v13540)
--- org.apache.commons.math.MathException
+++ org.apache.commons.math.MathException
@@ -116,7 +116,6 @@
      *                   to be thrown.
      */
     public MathException(Throwable rootCause) {
-        super(rootCause);
         this.pattern   = getMessage();
         this.arguments = new Object[0];
     }
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v13540)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v13540)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils
@@ -196,12 +196,6 @@
                 ((a > lowerBound) || (b < upperBound)));
    
         if (fa * fb >= 0.0 ) {
-            throw new ConvergenceException(
-                      "number of iterations={0}, maximum iterations={1}, " +
-                      "initial={2}, lower bound={3}, upper bound={4}, final a value={5}, " +
-                      "final b value={6}, f(a)={7}, f(b)={8}",
-                      numIterations, maximumIterations, initial,
-                      lowerBound, upperBound, a, b, fa, fb);
         }
         
         return new double[]{a, b};
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v13540)
--- org.apache.commons.math.special.Gamma
+++ org.apache.commons.math.special.Gamma
@@ -178,7 +178,18 @@
                 sum = sum + an;
             }
             if (n >= maxIterations) {
-                throw new MaxIterationsExceededException(maxIterations);
+                {ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				throw new MaxIterationsExceededException(maxIterations);
             } else {
                 ret = Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * sum;
             }
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v13540)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v13540)
--- org.apache.commons.math.distribution.NormalDistributionImpl
+++ org.apache.commons.math.distribution.NormalDistributionImpl
@@ -220,7 +220,7 @@
 
         if (p < .5) {
             ret = getMean() - getStandardDeviation();
-        } else if (p > .5) {
+        } else if (p < 0.0 || p > 1.0) {
             ret = getMean() + getStandardDeviation();
         } else {
             ret = getMean();
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v13703)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v13703)
--- org.apache.commons.math.distribution.AbstractContinuousDistribution
+++ org.apache.commons.math.distribution.AbstractContinuousDistribution
@@ -97,11 +97,9 @@
             if (Math.abs(rootFindingFunction.value(lowerBound)) < 1E-6) {
                 return lowerBound;
             }
-            if (Math.abs(rootFindingFunction.value(upperBound)) < 1E-6) {
+            if (p == 1) {
                 return upperBound;
-            }     
-            // Failed bracket convergence was not because of corner solution
-            throw new MathException(ex);
+            }
         }
 
         // find root
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v13703)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils
@@ -196,12 +196,6 @@
                 ((a > lowerBound) || (b < upperBound)));
    
         if (fa * fb >= 0.0 ) {
-            throw new ConvergenceException(
-                      "number of iterations={0}, maximum iterations={1}, " +
-                      "initial={2}, lower bound={3}, upper bound={4}, final a value={5}, " +
-                      "final b value={6}, f(a)={7}, f(b)={8}",
-                      numIterations, maximumIterations, initial,
-                      lowerBound, upperBound, a, b, fa, fb);
         }
         
         return new double[]{a, b};
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v13703)
--- org.apache.commons.math.special.Gamma
+++ org.apache.commons.math.special.Gamma
@@ -178,7 +178,15 @@
                 sum = sum + an;
             }
             if (n >= maxIterations) {
-                throw new MaxIterationsExceededException(maxIterations);
+                {ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				throw new MaxIterationsExceededException(maxIterations);
             } else {
                 ret = Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * sum;
             }
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v13703)
--- org.apache.commons.math.util.ContinuedFraction
+++ org.apache.commons.math.util.ContinuedFraction
@@ -43,7 +43,6 @@
      * Default constructor.
      */
     protected ContinuedFraction() {
-        super();
     }
 
     /**
@@ -142,7 +141,6 @@
                 // need to scale
                 if (a != 0.0) {
                     p2 = p1 + (b / a * p0);
-                    q2 = q1 + (b / a * q0);
                 } else if (b != 0) {
                     p2 = (a / b * p1) + p0;
                     q2 = (a / b * q1) + q0;
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v13703)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v13703)
--- org.apache.commons.math.distribution.NormalDistributionImpl
+++ org.apache.commons.math.distribution.NormalDistributionImpl
@@ -220,7 +220,7 @@
 
         if (p < .5) {
             ret = getMean() - getStandardDeviation();
-        } else if (p > .5) {
+        } else if (p < 0.0 || p > 1.0) {
             ret = getMean() + getStandardDeviation();
         } else {
             ret = getMean();
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v13742)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v13742)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils
@@ -196,12 +196,7 @@
                 ((a > lowerBound) || (b < upperBound)));
    
         if (fa * fb >= 0.0 ) {
-            throw new ConvergenceException(
-                      "number of iterations={0}, maximum iterations={1}, " +
-                      "initial={2}, lower bound={3}, upper bound={4}, final a value={5}, " +
-                      "final b value={6}, f(a)={7}, f(b)={8}",
-                      numIterations, maximumIterations, initial,
-                      lowerBound, upperBound, a, b, fa, fb);
+            int i = 1;
         }
         
         return new double[]{a, b};
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v13742)
--- org.apache.commons.math.special.Gamma
+++ org.apache.commons.math.special.Gamma
@@ -178,7 +178,17 @@
                 sum = sum + an;
             }
             if (n >= maxIterations) {
-                throw new MaxIterationsExceededException(maxIterations);
+                {ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				throw new MaxIterationsExceededException(maxIterations);
             } else {
                 ret = Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * sum;
             }
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v13742)
--- org.apache.commons.math.MaxIterationsExceededException
+++ org.apache.commons.math.MaxIterationsExceededException
@@ -40,7 +40,6 @@
      * @param maxIterations maximal number of iterations allowed
      */
     public MaxIterationsExceededException(final int maxIterations) {
-        super("Maximal number of iterations ({0}) exceeded", maxIterations);
         this.maxIterations = maxIterations;
     }
 
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v13742)
--- org.apache.commons.math.util.ContinuedFraction
+++ org.apache.commons.math.util.ContinuedFraction
@@ -142,7 +142,6 @@
                 // need to scale
                 if (a != 0.0) {
                     p2 = p1 + (b / a * p0);
-                    q2 = q1 + (b / a * q0);
                 } else if (b != 0) {
                     p2 = (a / b * p1) + p0;
                     q2 = (a / b * q1) + q0;
@@ -159,7 +158,6 @@
             // prepare for next iteration
             c = p2 / q2;
             p0 = p1;
-            p1 = p2;
             q0 = q1;
             q1 = q2;
         }
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v13742)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v13750)
--- org.apache.commons.math.linear.BigMatrix
+++ org.apache.commons.math.linear.BigMatrix
@@ -328,4 +328,3 @@
      */
     BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException;
 }
-
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v13750)
--- org.apache.commons.math.distribution.AbstractContinuousDistribution
+++ org.apache.commons.math.distribution.AbstractContinuousDistribution
@@ -97,7 +97,7 @@
             if (Math.abs(rootFindingFunction.value(lowerBound)) < 1E-6) {
                 return lowerBound;
             }
-            if (Math.abs(rootFindingFunction.value(upperBound)) < 1E-6) {
+            if (p == 1) {
                 return upperBound;
             }     
             // Failed bracket convergence was not because of corner solution
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v13750)
--- org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils
+++ org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils
@@ -196,12 +196,6 @@
                 ((a > lowerBound) || (b < upperBound)));
    
         if (fa * fb >= 0.0 ) {
-            throw new ConvergenceException(
-                      "number of iterations={0}, maximum iterations={1}, " +
-                      "initial={2}, lower bound={3}, upper bound={4}, final a value={5}, " +
-                      "final b value={6}, f(a)={7}, f(b)={8}",
-                      numIterations, maximumIterations, initial,
-                      lowerBound, upperBound, a, b, fa, fb);
         }
         
         return new double[]{a, b};
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v13750)
--- org.apache.commons.math.special.Gamma
+++ org.apache.commons.math.special.Gamma
@@ -178,7 +178,15 @@
                 sum = sum + an;
             }
             if (n >= maxIterations) {
-                throw new MaxIterationsExceededException(maxIterations);
+                {ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				{ContinuedFraction cf=new ContinuedFraction(){@Override protected double getA(int n,double x){return ((2.0 * n) + 1.0) - a + x;}@Override protected double getB(int n,double x){return n * (a - n);}};ret=1.0 / cf.evaluate(x,epsilon,maxIterations);ret=Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;}
+				throw new MaxIterationsExceededException(maxIterations);
             } else {
                 ret = Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * sum;
             }
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v13750)
--- org.apache.commons.math.MaxIterationsExceededException
+++ org.apache.commons.math.MaxIterationsExceededException
@@ -40,7 +40,6 @@
      * @param maxIterations maximal number of iterations allowed
      */
     public MaxIterationsExceededException(final int maxIterations) {
-        super("Maximal number of iterations ({0}) exceeded", maxIterations);
         this.maxIterations = maxIterations;
     }
 
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v13750)
--- org.apache.commons.math.util.ContinuedFraction
+++ org.apache.commons.math.util.ContinuedFraction
@@ -156,12 +156,9 @@
             double r = p2 / q2;
             relativeError = Math.abs(r / c - 1.0);
                 
-            // prepare for next iteration
-            c = p2 / q2;
             p0 = p1;
             p1 = p2;
             q0 = q1;
-            q1 = q2;
         }
 
         if (n >= maxIterations) {
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v13750)
--- org.apache.commons.math.optimization.fitting.WeightedObservedPoint
+++ org.apache.commons.math.optimization.fitting.WeightedObservedPoint
@@ -72,4 +72,3 @@
     }
 
 }
-
2023-08-02 03:58:09 [main] [INFO]  PatchLogExporter - patch (v13750)
--- org.apache.commons.math.distribution.NormalDistributionImpl
+++ org.apache.commons.math.distribution.NormalDistributionImpl
@@ -178,7 +178,8 @@
         if (p < .5) {
             ret = -Double.MAX_VALUE;
         } else {
-            ret = getMean();
+            ret = 0.0;
+			ret = getMean();
         }
         
         return ret;
2023-08-02 03:58:12 [main] [INFO]  KGenProgMain - Summary
Reached generation = 139
Generated variants = 13750
Syntax valid variants = 11337
Build succeeded variants = 4630
Time elapsed = 9 hours 24 minutes 48 seconds
Exit status = SUCCESS
